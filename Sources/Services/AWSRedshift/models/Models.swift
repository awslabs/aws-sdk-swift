// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyReadWrite
import SmithyXML

extension AcceptReservedNodeExchangeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservedNodeId = "ReservedNodeId"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        try container.encode("AcceptReservedNodeExchange", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AcceptReservedNodeExchangeInput {

    static func urlPathProvider(_ value: AcceptReservedNodeExchangeInput) -> Swift.String? {
        return "/"
    }
}

public struct AcceptReservedNodeExchangeInput: Swift.Equatable {
    /// A string representing the node identifier of the DC1 Reserved Node to be exchanged.
    /// This member is required.
    public var reservedNodeId: Swift.String?
    /// The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling [GetReservedNodeExchangeOfferings]
    /// This member is required.
    public var targetReservedNodeOfferingId: Swift.String?

    public init(
        reservedNodeId: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.reservedNodeId = reservedNodeId
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
    }
}

extension AcceptReservedNodeExchangeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AcceptReservedNodeExchangeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AcceptReservedNodeExchangeResult"]
            var value = AcceptReservedNodeExchangeOutput()
            value.exchangedReservedNode = try reader["ExchangedReservedNode"].readIfPresent(readingClosure: RedshiftClientTypes.ReservedNode.readingClosure)
            return value
        }
    }
}

public struct AcceptReservedNodeExchangeOutput: Swift.Equatable {
    ///
    public var exchangedReservedNode: RedshiftClientTypes.ReservedNode?

    public init(
        exchangedReservedNode: RedshiftClientTypes.ReservedNode? = nil
    )
    {
        self.exchangedReservedNode = exchangedReservedNode
    }
}

enum AcceptReservedNodeExchangeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AccessToClusterDeniedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AccessToClusterDeniedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You are not authorized to access the cluster.
public struct AccessToClusterDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessToClusterDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AccessToSnapshotDeniedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AccessToSnapshotDeniedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The owner of the specified snapshot has not authorized your account to access the snapshot.
public struct AccessToSnapshotDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessToSnapshotDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.AccountAttribute: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeValues = "AttributeValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: ClientRuntime.Key("AttributeName"))
        }
        if let attributeValues = attributeValues {
            if !attributeValues.isEmpty {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                for (index0, attributevaluetarget0) in attributeValues.enumerated() {
                    try attributeValuesContainer.encode(attributevaluetarget0, forKey: ClientRuntime.Key("AttributeValueTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                try attributeValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AccountAttribute, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AccountAttribute()
            value.attributeName = try reader["AttributeName"].readIfPresent()
            value.attributeValues = try reader["AttributeValues"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AttributeValueTarget.readingClosure, memberNodeInfo: "AttributeValueTarget", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A name value pair that describes an aspect of an account.
    public struct AccountAttribute: Swift.Equatable {
        /// The name of the attribute.
        public var attributeName: Swift.String?
        /// A list of attribute values.
        public var attributeValues: [RedshiftClientTypes.AttributeValueTarget]?

        public init(
            attributeName: Swift.String? = nil,
            attributeValues: [RedshiftClientTypes.AttributeValueTarget]? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }
    }

}

extension RedshiftClientTypes.AccountWithRestoreAccess: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAlias = "AccountAlias"
        case accountId = "AccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountAlias = accountAlias {
            try container.encode(accountAlias, forKey: ClientRuntime.Key("AccountAlias"))
        }
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AccountWithRestoreAccess, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AccountWithRestoreAccess()
            value.accountId = try reader["AccountId"].readIfPresent()
            value.accountAlias = try reader["AccountAlias"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an Amazon Web Services account authorized to restore a snapshot.
    public struct AccountWithRestoreAccess: Swift.Equatable {
        /// The identifier of an Amazon Web Services support account authorized to restore a snapshot. For Amazon Web Services Support, the identifier is amazon-redshift-support.
        public var accountAlias: Swift.String?
        /// The identifier of an Amazon Web Services account authorized to restore a snapshot.
        public var accountId: Swift.String?

        public init(
            accountAlias: Swift.String? = nil,
            accountId: Swift.String? = nil
        )
        {
            self.accountAlias = accountAlias
            self.accountId = accountId
        }
    }

}

extension RedshiftClientTypes {
    public enum ActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case recommendNodeConfig
        case resizeCluster
        case restoreCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .recommendNodeConfig,
                .resizeCluster,
                .restoreCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .recommendNodeConfig: return "recommend-node-config"
            case .resizeCluster: return "resize-cluster"
            case .restoreCluster: return "restore-cluster"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionType(rawValue: rawValue) ?? ActionType.sdkUnknown(rawValue)
        }
    }
}

extension AddPartnerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        try container.encode("AddPartner", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddPartnerInput {

    static func urlPathProvider(_ value: AddPartnerInput) -> Swift.String? {
        return "/"
    }
}

public struct AddPartnerInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster that receives data from the partner.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database that receives data from the partner.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    /// This member is required.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

extension AddPartnerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddPartnerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AddPartnerResult"]
            var value = AddPartnerOutput()
            value.databaseName = try reader["DatabaseName"].readIfPresent()
            value.partnerName = try reader["PartnerName"].readIfPresent()
            return value
        }
    }
}

public struct AddPartnerOutput: Swift.Equatable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

enum AddPartnerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "PartnerNotFound": return try await PartnerNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.AquaConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case aquaStatus = "AquaStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let aquaStatus = aquaStatus {
            try container.encode(aquaStatus, forKey: ClientRuntime.Key("AquaStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AquaConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AquaConfiguration()
            value.aquaStatus = try reader["AquaStatus"].readIfPresent()
            value.aquaConfigurationStatus = try reader["AquaConfigurationStatus"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The operation that uses this structure is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public struct AquaConfiguration: Swift.Equatable {
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaStatus: RedshiftClientTypes.AquaStatus?

        public init(
            aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
            aquaStatus: RedshiftClientTypes.AquaStatus? = nil
        )
        {
            self.aquaConfigurationStatus = aquaConfigurationStatus
            self.aquaStatus = aquaStatus
        }
    }

}

extension RedshiftClientTypes {
    public enum AquaConfigurationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AquaConfigurationStatus] {
            return [
                .auto,
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "auto"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AquaConfigurationStatus(rawValue: rawValue) ?? AquaConfigurationStatus.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum AquaStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applying
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AquaStatus] {
            return [
                .applying,
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applying: return "applying"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AquaStatus(rawValue: rawValue) ?? AquaStatus.sdkUnknown(rawValue)
        }
    }
}

extension AssociateDataShareConsumerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowWrites = "AllowWrites"
        case associateEntireAccount = "AssociateEntireAccount"
        case consumerArn = "ConsumerArn"
        case consumerRegion = "ConsumerRegion"
        case dataShareArn = "DataShareArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowWrites = allowWrites {
            try container.encode(allowWrites, forKey: ClientRuntime.Key("AllowWrites"))
        }
        if let associateEntireAccount = associateEntireAccount {
            try container.encode(associateEntireAccount, forKey: ClientRuntime.Key("AssociateEntireAccount"))
        }
        if let consumerArn = consumerArn {
            try container.encode(consumerArn, forKey: ClientRuntime.Key("ConsumerArn"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("AssociateDataShareConsumer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AssociateDataShareConsumerInput {

    static func urlPathProvider(_ value: AssociateDataShareConsumerInput) -> Swift.String? {
        return "/"
    }
}

public struct AssociateDataShareConsumerInput: Swift.Equatable {
    /// If set to true, allows write operations for a datashare.
    public var allowWrites: Swift.Bool?
    /// A value that specifies whether the datashare is associated with the entire account.
    public var associateEntireAccount: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the consumer that is associated with the datashare.
    public var consumerArn: Swift.String?
    /// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified Amazon Web Services Region.
    public var consumerRegion: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        allowWrites: Swift.Bool? = nil,
        associateEntireAccount: Swift.Bool? = nil,
        consumerArn: Swift.String? = nil,
        consumerRegion: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.allowWrites = allowWrites
        self.associateEntireAccount = associateEntireAccount
        self.consumerArn = consumerArn
        self.consumerRegion = consumerRegion
        self.dataShareArn = dataShareArn
    }
}

extension AssociateDataShareConsumerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AssociateDataShareConsumerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AssociateDataShareConsumerResult"]
            var value = AssociateDataShareConsumerOutput()
            value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
            value.dataShareArn = try reader["DataShareArn"].readIfPresent()
            value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedBy = try reader["ManagedBy"].readIfPresent()
            value.producerArn = try reader["ProducerArn"].readIfPresent()
            return value
        }
    }
}

public struct AssociateDataShareConsumerOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

enum AssociateDataShareConsumerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDataShareFault": return try await InvalidDataShareFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidNamespaceFault": return try await InvalidNamespaceFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.Association: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAssociations = "CertificateAssociations"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainCertificateExpiryDate = "CustomDomainCertificateExpiryDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateAssociations = certificateAssociations {
            if !certificateAssociations.isEmpty {
                var certificateAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CertificateAssociations"))
                for (index0, certificateassociation0) in certificateAssociations.enumerated() {
                    try certificateAssociationsContainer.encode(certificateassociation0, forKey: ClientRuntime.Key("CertificateAssociation.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificateAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CertificateAssociations"))
                try certificateAssociationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainCertificateExpiryDate = customDomainCertificateExpiryDate {
            try container.encodeTimestamp(customDomainCertificateExpiryDate, format: .dateTime, forKey: ClientRuntime.Key("CustomDomainCertificateExpiryDate"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Association, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Association()
            value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
            value.customDomainCertificateExpiryDate = try reader["CustomDomainCertificateExpiryDate"].readTimestampIfPresent(format: .dateTime)
            value.certificateAssociations = try reader["CertificateAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.CertificateAssociation.readingClosure, memberNodeInfo: "CertificateAssociation", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Contains information about the custom domain name association.
    public struct Association: Swift.Equatable {
        /// A list of all associated clusters and domain names tied to a specific certificate.
        public var certificateAssociations: [RedshiftClientTypes.CertificateAssociation]?
        /// The Amazon Resource Name (ARN) for the certificate associated with the custom domain.
        public var customDomainCertificateArn: Swift.String?
        /// The expiration date for the certificate.
        public var customDomainCertificateExpiryDate: ClientRuntime.Date?

        public init(
            certificateAssociations: [RedshiftClientTypes.CertificateAssociation]? = nil,
            customDomainCertificateArn: Swift.String? = nil,
            customDomainCertificateExpiryDate: ClientRuntime.Date? = nil
        )
        {
            self.certificateAssociations = certificateAssociations
            self.customDomainCertificateArn = customDomainCertificateArn
            self.customDomainCertificateExpiryDate = customDomainCertificateExpiryDate
        }
    }

}

extension RedshiftClientTypes.AttributeValueTarget: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeValue = "AttributeValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeValue = attributeValue {
            try container.encode(attributeValue, forKey: ClientRuntime.Key("AttributeValue"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AttributeValueTarget, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AttributeValueTarget()
            value.attributeValue = try reader["AttributeValue"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an attribute value.
    public struct AttributeValueTarget: Swift.Equatable {
        /// The value of the attribute.
        public var attributeValue: Swift.String?

        public init(
            attributeValue: Swift.String? = nil
        )
        {
            self.attributeValue = attributeValue
        }
    }

}

extension RedshiftClientTypes.AuthenticationProfile: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileContent = authenticationProfileContent {
            try container.encode(authenticationProfileContent, forKey: ClientRuntime.Key("AuthenticationProfileContent"))
        }
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AuthenticationProfile, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AuthenticationProfile()
            value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
            value.authenticationProfileContent = try reader["AuthenticationProfileContent"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an authentication profile.
    public struct AuthenticationProfile: Swift.Equatable {
        /// The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
        public var authenticationProfileContent: Swift.String?
        /// The name of the authentication profile.
        public var authenticationProfileName: Swift.String?

        public init(
            authenticationProfileContent: Swift.String? = nil,
            authenticationProfileName: Swift.String? = nil
        )
        {
            self.authenticationProfileContent = authenticationProfileContent
            self.authenticationProfileName = authenticationProfileName
        }
    }

}

extension AuthenticationProfileAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthenticationProfileAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The authentication profile already exists.
public struct AuthenticationProfileAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthenticationProfileNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthenticationProfileNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The authentication profile can't be found.
public struct AuthenticationProfileNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthenticationProfileQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthenticationProfileQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The size or number of authentication profiles has exceeded the quota. The maximum length of the JSON string and maximum number of authentication profiles is determined by a quota for your account.
public struct AuthenticationProfileQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthorizationAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthorizationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified CIDR block or EC2 security group is already authorized for the specified cluster security group.
public struct AuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthorizationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified CIDR IP range or EC2 security group is not authorized for the specified cluster security group.
public struct AuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AuthorizationQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AuthorizationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The authorization quota for the cluster security group has been reached.
public struct AuthorizationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum AuthorizationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authorized
        case revoking
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthorizationStatus] {
            return [
                .authorized,
                .revoking,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authorized: return "Authorized"
            case .revoking: return "Revoking"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthorizationStatus(rawValue: rawValue) ?? AuthorizationStatus.sdkUnknown(rawValue)
        }
    }
}

extension AuthorizeClusterSecurityGroupIngressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("AuthorizeClusterSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeClusterSecurityGroupIngressInput {

    static func urlPathProvider(_ value: AuthorizeClusterSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

///
public struct AuthorizeClusterSecurityGroupIngressInput: Swift.Equatable {
    /// The IP range to be added the Amazon Redshift security group.
    public var cidrip: Swift.String?
    /// The name of the security group to which the ingress rule is added.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// The EC2 security group to be added the Amazon Redshift security group.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the security group specified by the EC2SecurityGroupName parameter. The Amazon Web Services Access Key ID is not an acceptable value. Example: 111122223333
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        clusterSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

extension AuthorizeClusterSecurityGroupIngressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AuthorizeClusterSecurityGroupIngressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AuthorizeClusterSecurityGroupIngressResult"]
            var value = AuthorizeClusterSecurityGroupIngressOutput()
            value.clusterSecurityGroup = try reader["ClusterSecurityGroup"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterSecurityGroup.readingClosure)
            return value
        }
    }
}

public struct AuthorizeClusterSecurityGroupIngressOutput: Swift.Equatable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

enum AuthorizeClusterSecurityGroupIngressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationAlreadyExists": return try await AuthorizationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AuthorizationQuotaExceeded": return try await AuthorizationQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AuthorizeDataShareInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowWrites = "AllowWrites"
        case consumerIdentifier = "ConsumerIdentifier"
        case dataShareArn = "DataShareArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowWrites = allowWrites {
            try container.encode(allowWrites, forKey: ClientRuntime.Key("AllowWrites"))
        }
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("AuthorizeDataShare", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeDataShareInput {

    static func urlPathProvider(_ value: AuthorizeDataShareInput) -> Swift.String? {
        return "/"
    }
}

public struct AuthorizeDataShareInput: Swift.Equatable {
    /// If set to true, allows write operations for a datashare.
    public var allowWrites: Swift.Bool?
    /// The identifier of the data consumer that is authorized to access the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
    /// This member is required.
    public var consumerIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        allowWrites: Swift.Bool? = nil,
        consumerIdentifier: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.allowWrites = allowWrites
        self.consumerIdentifier = consumerIdentifier
        self.dataShareArn = dataShareArn
    }
}

extension AuthorizeDataShareOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AuthorizeDataShareOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AuthorizeDataShareResult"]
            var value = AuthorizeDataShareOutput()
            value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
            value.dataShareArn = try reader["DataShareArn"].readIfPresent()
            value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedBy = try reader["ManagedBy"].readIfPresent()
            value.producerArn = try reader["ProducerArn"].readIfPresent()
            return value
        }
    }
}

public struct AuthorizeDataShareOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

enum AuthorizeDataShareOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDataShareFault": return try await InvalidDataShareFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AuthorizeEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case clusterIdentifier = "ClusterIdentifier"
        case vpcIds = "VpcIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let vpcIds = vpcIds {
            if !vpcIds.isEmpty {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                for (index0, string0) in vpcIds.enumerated() {
                    try vpcIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                try vpcIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AuthorizeEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeEndpointAccessInput {

    static func urlPathProvider(_ value: AuthorizeEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct AuthorizeEndpointAccessInput: Swift.Equatable {
    /// The Amazon Web Services account ID to grant access to.
    /// This member is required.
    public var account: Swift.String?
    /// The cluster identifier of the cluster to grant access to.
    public var clusterIdentifier: Swift.String?
    /// The virtual private cloud (VPC) identifiers to grant access to.
    public var vpcIds: [Swift.String]?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.vpcIds = vpcIds
    }
}

extension AuthorizeEndpointAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AuthorizeEndpointAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AuthorizeEndpointAccessResult"]
            var value = AuthorizeEndpointAccessOutput()
            value.allowedAllVPCs = try reader["AllowedAllVPCs"].readIfPresent()
            value.allowedVPCs = try reader["AllowedVPCs"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "VpcIdentifier", isFlattened: false)
            value.authorizeTime = try reader["AuthorizeTime"].readTimestampIfPresent(format: .dateTime)
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
            value.endpointCount = try reader["EndpointCount"].readIfPresent()
            value.grantee = try reader["Grantee"].readIfPresent()
            value.grantor = try reader["Grantor"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
public struct AuthorizeEndpointAccessOutput: Swift.Equatable {
    /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
    public var allowedAllVPCs: Swift.Bool?
    /// The VPCs allowed access to the cluster.
    public var allowedVPCs: [Swift.String]?
    /// The time (UTC) when the authorization was created.
    public var authorizeTime: ClientRuntime.Date?
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The status of the cluster.
    public var clusterStatus: Swift.String?
    /// The number of Redshift-managed VPC endpoints created for the authorization.
    public var endpointCount: Swift.Int?
    /// The Amazon Web Services account ID of the grantee of the cluster.
    public var grantee: Swift.String?
    /// The Amazon Web Services account ID of the cluster owner.
    public var grantor: Swift.String?
    /// The status of the authorization action.
    public var status: RedshiftClientTypes.AuthorizationStatus?

    public init(
        allowedAllVPCs: Swift.Bool? = nil,
        allowedVPCs: [Swift.String]? = nil,
        authorizeTime: ClientRuntime.Date? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterStatus: Swift.String? = nil,
        endpointCount: Swift.Int? = nil,
        grantee: Swift.String? = nil,
        grantor: Swift.String? = nil,
        status: RedshiftClientTypes.AuthorizationStatus? = nil
    )
    {
        self.allowedAllVPCs = allowedAllVPCs
        self.allowedVPCs = allowedVPCs
        self.authorizeTime = authorizeTime
        self.clusterIdentifier = clusterIdentifier
        self.clusterStatus = clusterStatus
        self.endpointCount = endpointCount
        self.grantee = grantee
        self.grantor = grantor
        self.status = status
    }
}

enum AuthorizeEndpointAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointAuthorizationAlreadyExists": return try await EndpointAuthorizationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointAuthorizationsPerClusterLimitExceeded": return try await EndpointAuthorizationsPerClusterLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidAuthorizationState": return try await InvalidAuthorizationStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AuthorizeSnapshotAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountWithRestoreAccess = "AccountWithRestoreAccess"
        case snapshotArn = "SnapshotArn"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountWithRestoreAccess = accountWithRestoreAccess {
            try container.encode(accountWithRestoreAccess, forKey: ClientRuntime.Key("AccountWithRestoreAccess"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("AuthorizeSnapshotAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeSnapshotAccessInput {

    static func urlPathProvider(_ value: AuthorizeSnapshotAccessInput) -> Swift.String? {
        return "/"
    }
}

///
public struct AuthorizeSnapshotAccessInput: Swift.Equatable {
    /// The identifier of the Amazon Web Services account authorized to restore the specified snapshot. To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.
    /// This member is required.
    public var accountWithRestoreAccess: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot to authorize access to.
    public var snapshotArn: Swift.String?
    /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The identifier of the snapshot the account is authorized to restore.
    public var snapshotIdentifier: Swift.String?

    public init(
        accountWithRestoreAccess: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.accountWithRestoreAccess = accountWithRestoreAccess
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension AuthorizeSnapshotAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AuthorizeSnapshotAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AuthorizeSnapshotAccessResult"]
            var value = AuthorizeSnapshotAccessOutput()
            value.snapshot = try reader["Snapshot"].readIfPresent(readingClosure: RedshiftClientTypes.Snapshot.readingClosure)
            return value
        }
    }
}

public struct AuthorizeSnapshotAccessOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

enum AuthorizeSnapshotAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationAlreadyExists": return try await AuthorizationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AuthorizationQuotaExceeded": return try await AuthorizationQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.AuthorizedTokenIssuer: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedAudiencesList = "AuthorizedAudiencesList"
        case trustedTokenIssuerArn = "TrustedTokenIssuerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedAudiencesList = authorizedAudiencesList {
            if !authorizedAudiencesList.isEmpty {
                var authorizedAudiencesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedAudiencesList"))
                for (index0, string0) in authorizedAudiencesList.enumerated() {
                    try authorizedAudiencesListContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedAudiencesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedAudiencesList"))
                try authorizedAudiencesListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trustedTokenIssuerArn = trustedTokenIssuerArn {
            try container.encode(trustedTokenIssuerArn, forKey: ClientRuntime.Key("TrustedTokenIssuerArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AuthorizedTokenIssuer, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AuthorizedTokenIssuer()
            value.trustedTokenIssuerArn = try reader["TrustedTokenIssuerArn"].readIfPresent()
            value.authorizedAudiencesList = try reader["AuthorizedAudiencesList"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The authorized token issuer for the Amazon Redshift IAM Identity Center application.
    public struct AuthorizedTokenIssuer: Swift.Equatable {
        /// The list of audiences for the authorized token issuer for integrating Amazon Redshift with IDC Identity Center.
        public var authorizedAudiencesList: [Swift.String]?
        /// The ARN for the authorized token issuer for integrating Amazon Redshift with IDC Identity Center.
        public var trustedTokenIssuerArn: Swift.String?

        public init(
            authorizedAudiencesList: [Swift.String]? = nil,
            trustedTokenIssuerArn: Swift.String? = nil
        )
        {
            self.authorizedAudiencesList = authorizedAudiencesList
            self.trustedTokenIssuerArn = trustedTokenIssuerArn
        }
    }

}

extension RedshiftClientTypes.AvailabilityZone: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case supportedPlatforms = "SupportedPlatforms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let supportedPlatforms = supportedPlatforms {
            if !supportedPlatforms.isEmpty {
                var supportedPlatformsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedPlatforms"))
                for (index0, supportedplatform0) in supportedPlatforms.enumerated() {
                    try supportedPlatformsContainer.encode(supportedplatform0, forKey: ClientRuntime.Key("SupportedPlatform.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedPlatformsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedPlatforms"))
                try supportedPlatformsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.AvailabilityZone, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.AvailabilityZone()
            value.name = try reader["Name"].readIfPresent()
            value.supportedPlatforms = try reader["SupportedPlatforms"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SupportedPlatform.readingClosure, memberNodeInfo: "SupportedPlatform", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an availability zone.
    public struct AvailabilityZone: Swift.Equatable {
        /// The name of the availability zone.
        public var name: Swift.String?
        ///
        public var supportedPlatforms: [RedshiftClientTypes.SupportedPlatform]?

        public init(
            name: Swift.String? = nil,
            supportedPlatforms: [RedshiftClientTypes.SupportedPlatform]? = nil
        )
        {
            self.name = name
            self.supportedPlatforms = supportedPlatforms
        }
    }

}

extension BatchDeleteClusterSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifiers = "Identifiers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identifiers = identifiers {
            if !identifiers.isEmpty {
                var identifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identifiers"))
                for (index0, deleteclustersnapshotmessage0) in identifiers.enumerated() {
                    try identifiersContainer.encode(deleteclustersnapshotmessage0, forKey: ClientRuntime.Key("DeleteClusterSnapshotMessage.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identifiers"))
                try identifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchDeleteClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchDeleteClusterSnapshotsInput {

    static func urlPathProvider(_ value: BatchDeleteClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

public struct BatchDeleteClusterSnapshotsInput: Swift.Equatable {
    /// A list of identifiers for the snapshots that you want to delete.
    /// This member is required.
    public var identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]?

    public init(
        identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]? = nil
    )
    {
        self.identifiers = identifiers
    }
}

extension BatchDeleteClusterSnapshotsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<BatchDeleteClusterSnapshotsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["BatchDeleteClusterSnapshotsResult"]
            var value = BatchDeleteClusterSnapshotsOutput()
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotErrorMessage.readingClosure, memberNodeInfo: "SnapshotErrorMessage", isFlattened: false)
            value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "String", isFlattened: false)
            return value
        }
    }
}

public struct BatchDeleteClusterSnapshotsOutput: Swift.Equatable {
    /// A list of any errors returned.
    public var errors: [RedshiftClientTypes.SnapshotErrorMessage]?
    /// A list of the snapshot identifiers that were deleted.
    public var resources: [Swift.String]?

    public init(
        errors: [RedshiftClientTypes.SnapshotErrorMessage]? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.resources = resources
    }
}

enum BatchDeleteClusterSnapshotsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BatchDeleteRequestSizeExceeded": return try await BatchDeleteRequestSizeExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension BatchDeleteRequestSizeExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = BatchDeleteRequestSizeExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The maximum number for a batch delete of snapshots has been reached. The limit is 100.
public struct BatchDeleteRequestSizeExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchDeleteRequestSizeExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension BatchModifyClusterSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force = "Force"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case snapshotIdentifierList = "SnapshotIdentifierList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let snapshotIdentifierList = snapshotIdentifierList {
            if !snapshotIdentifierList.isEmpty {
                var snapshotIdentifierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SnapshotIdentifierList"))
                for (index0, string0) in snapshotIdentifierList.enumerated() {
                    try snapshotIdentifierListContainer.encode(string0, forKey: ClientRuntime.Key("String.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var snapshotIdentifierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SnapshotIdentifierList"))
                try snapshotIdentifierListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchModifyClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchModifyClusterSnapshotsInput {

    static func urlPathProvider(_ value: BatchModifyClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

public struct BatchModifyClusterSnapshotsInput: Swift.Equatable {
    /// A boolean value indicating whether to override an exception if the retention period has passed.
    public var force: Swift.Bool?
    /// The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely. The number must be either -1 or an integer between 1 and 3,653. If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// A list of snapshot identifiers you want to modify.
    /// This member is required.
    public var snapshotIdentifierList: [Swift.String]?

    public init(
        force: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifierList: [Swift.String]? = nil
    )
    {
        self.force = force
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifierList = snapshotIdentifierList
    }
}

extension BatchModifyClusterSnapshotsLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = BatchModifyClusterSnapshotsLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The maximum number for snapshot identifiers has been reached. The limit is 100.
public struct BatchModifyClusterSnapshotsLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchModifyClusterSnapshotsLimitExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension BatchModifyClusterSnapshotsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<BatchModifyClusterSnapshotsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["BatchModifyClusterSnapshotsResult"]
            var value = BatchModifyClusterSnapshotsOutput()
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotErrorMessage.readingClosure, memberNodeInfo: "SnapshotErrorMessage", isFlattened: false)
            value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "String", isFlattened: false)
            return value
        }
    }
}

public struct BatchModifyClusterSnapshotsOutput: Swift.Equatable {
    /// A list of any errors returned.
    public var errors: [RedshiftClientTypes.SnapshotErrorMessage]?
    /// A list of the snapshots that were modified.
    public var resources: [Swift.String]?

    public init(
        errors: [RedshiftClientTypes.SnapshotErrorMessage]? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.resources = resources
    }
}

enum BatchModifyClusterSnapshotsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BatchModifyClusterSnapshotsLimitExceededFault": return try await BatchModifyClusterSnapshotsLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension BucketNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = BucketNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Could not find the specified S3 bucket.
public struct BucketNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BucketNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CancelResizeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("CancelResize", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelResizeInput {

    static func urlPathProvider(_ value: CancelResizeInput) -> Swift.String? {
        return "/"
    }
}

public struct CancelResizeInput: Swift.Equatable {
    /// The unique identifier for the cluster that you want to cancel a resize operation for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension CancelResizeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CancelResizeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CancelResizeResult"]
            var value = CancelResizeOutput()
            value.avgResizeRateInMegaBytesPerSecond = try reader["AvgResizeRateInMegaBytesPerSecond"].readIfPresent()
            value.dataTransferProgressPercent = try reader["DataTransferProgressPercent"].readIfPresent()
            value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
            value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
            value.importTablesCompleted = try reader["ImportTablesCompleted"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.importTablesInProgress = try reader["ImportTablesInProgress"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.importTablesNotStarted = try reader["ImportTablesNotStarted"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.message = try reader["Message"].readIfPresent()
            value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
            value.resizeType = try reader["ResizeType"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.targetClusterType = try reader["TargetClusterType"].readIfPresent()
            value.targetEncryptionType = try reader["TargetEncryptionType"].readIfPresent()
            value.targetNodeType = try reader["TargetNodeType"].readIfPresent()
            value.targetNumberOfNodes = try reader["TargetNumberOfNodes"].readIfPresent()
            value.totalResizeDataInMegaBytes = try reader["TotalResizeDataInMegaBytes"].readIfPresent()
            return value
        }
    }
}

/// Describes the result of a cluster resize operation.
public struct CancelResizeOutput: Swift.Equatable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init(
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}

enum CancelResizeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResizeNotFound": return try await ResizeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.CertificateAssociation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.CertificateAssociation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.CertificateAssociation()
            value.customDomainName = try reader["CustomDomainName"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A cluster ID and custom domain name tied to a specific certificate. These are typically returned in a list.
    public struct CertificateAssociation: Swift.Equatable {
        /// The cluster identifier for the certificate association.
        public var clusterIdentifier: Swift.String?
        /// The custom domain name for the certificate association.
        public var customDomainName: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil,
            customDomainName: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.customDomainName = customDomainName
        }
    }

}

extension RedshiftClientTypes.Cluster: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfiguration = "AquaConfiguration"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocationStatus = "AvailabilityZoneRelocationStatus"
        case clusterAvailabilityStatus = "ClusterAvailabilityStatus"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterNamespaceArn = "ClusterNamespaceArn"
        case clusterNodes = "ClusterNodes"
        case clusterParameterGroups = "ClusterParameterGroups"
        case clusterPublicKey = "ClusterPublicKey"
        case clusterRevisionNumber = "ClusterRevisionNumber"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSnapshotCopyStatus = "ClusterSnapshotCopyStatus"
        case clusterStatus = "ClusterStatus"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterVersion = "ClusterVersion"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainCertificateExpiryDate = "CustomDomainCertificateExpiryDate"
        case customDomainName = "CustomDomainName"
        case dbName = "DBName"
        case dataTransferProgress = "DataTransferProgress"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case deferredMaintenanceWindows = "DeferredMaintenanceWindows"
        case elasticIpStatus = "ElasticIpStatus"
        case elasticResizeNumberOfNodeOptions = "ElasticResizeNumberOfNodeOptions"
        case encrypted = "Encrypted"
        case endpoint = "Endpoint"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case expectedNextSnapshotScheduleTime = "ExpectedNextSnapshotScheduleTime"
        case expectedNextSnapshotScheduleTimeStatus = "ExpectedNextSnapshotScheduleTimeStatus"
        case hsmStatus = "HsmStatus"
        case iamRoles = "IamRoles"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretArn = "MasterPasswordSecretArn"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case modifyStatus = "ModifyStatus"
        case multiAZ = "MultiAZ"
        case multiAZSecondary = "MultiAZSecondary"
        case nextMaintenanceWindowStartTime = "NextMaintenanceWindowStartTime"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case pendingActions = "PendingActions"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case reservedNodeExchangeStatus = "ReservedNodeExchangeStatus"
        case resizeInfo = "ResizeInfo"
        case restoreStatus = "RestoreStatus"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case snapshotScheduleState = "SnapshotScheduleState"
        case tags = "Tags"
        case totalStorageCapacityInMegaBytes = "TotalStorageCapacityInMegaBytes"
        case vpcId = "VpcId"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let aquaConfiguration = aquaConfiguration {
            try container.encode(aquaConfiguration, forKey: ClientRuntime.Key("AquaConfiguration"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocationStatus = availabilityZoneRelocationStatus {
            try container.encode(availabilityZoneRelocationStatus, forKey: ClientRuntime.Key("AvailabilityZoneRelocationStatus"))
        }
        if let clusterAvailabilityStatus = clusterAvailabilityStatus {
            try container.encode(clusterAvailabilityStatus, forKey: ClientRuntime.Key("ClusterAvailabilityStatus"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterNamespaceArn = clusterNamespaceArn {
            try container.encode(clusterNamespaceArn, forKey: ClientRuntime.Key("ClusterNamespaceArn"))
        }
        if let clusterNodes = clusterNodes {
            if !clusterNodes.isEmpty {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                for (index0, clusternode0) in clusterNodes.enumerated() {
                    try clusterNodesContainer.encode(clusternode0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                try clusterNodesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterParameterGroups = clusterParameterGroups {
            if !clusterParameterGroups.isEmpty {
                var clusterParameterGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterGroups"))
                for (index0, clusterparametergroupstatus0) in clusterParameterGroups.enumerated() {
                    try clusterParameterGroupsContainer.encode(clusterparametergroupstatus0, forKey: ClientRuntime.Key("ClusterParameterGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterParameterGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterGroups"))
                try clusterParameterGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterPublicKey = clusterPublicKey {
            try container.encode(clusterPublicKey, forKey: ClientRuntime.Key("ClusterPublicKey"))
        }
        if let clusterRevisionNumber = clusterRevisionNumber {
            try container.encode(clusterRevisionNumber, forKey: ClientRuntime.Key("ClusterRevisionNumber"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, clustersecuritygroupmembership0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(clustersecuritygroupmembership0, forKey: ClientRuntime.Key("ClusterSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterSnapshotCopyStatus = clusterSnapshotCopyStatus {
            try container.encode(clusterSnapshotCopyStatus, forKey: ClientRuntime.Key("ClusterSnapshotCopyStatus"))
        }
        if let clusterStatus = clusterStatus {
            try container.encode(clusterStatus, forKey: ClientRuntime.Key("ClusterStatus"))
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainCertificateExpiryDate = customDomainCertificateExpiryDate {
            try container.encodeTimestamp(customDomainCertificateExpiryDate, format: .dateTime, forKey: ClientRuntime.Key("CustomDomainCertificateExpiryDate"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dataTransferProgress = dataTransferProgress {
            try container.encode(dataTransferProgress, forKey: ClientRuntime.Key("DataTransferProgress"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let deferredMaintenanceWindows = deferredMaintenanceWindows {
            if !deferredMaintenanceWindows.isEmpty {
                var deferredMaintenanceWindowsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeferredMaintenanceWindows"))
                for (index0, deferredmaintenancewindow0) in deferredMaintenanceWindows.enumerated() {
                    try deferredMaintenanceWindowsContainer.encode(deferredmaintenancewindow0, forKey: ClientRuntime.Key("DeferredMaintenanceWindow.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var deferredMaintenanceWindowsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeferredMaintenanceWindows"))
                try deferredMaintenanceWindowsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let elasticIpStatus = elasticIpStatus {
            try container.encode(elasticIpStatus, forKey: ClientRuntime.Key("ElasticIpStatus"))
        }
        if let elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions {
            try container.encode(elasticResizeNumberOfNodeOptions, forKey: ClientRuntime.Key("ElasticResizeNumberOfNodeOptions"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime {
            try container.encodeTimestamp(expectedNextSnapshotScheduleTime, format: .dateTime, forKey: ClientRuntime.Key("ExpectedNextSnapshotScheduleTime"))
        }
        if let expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus {
            try container.encode(expectedNextSnapshotScheduleTimeStatus, forKey: ClientRuntime.Key("ExpectedNextSnapshotScheduleTimeStatus"))
        }
        if let hsmStatus = hsmStatus {
            try container.encode(hsmStatus, forKey: ClientRuntime.Key("HsmStatus"))
        }
        if let iamRoles = iamRoles {
            if !iamRoles.isEmpty {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                for (index0, clusteriamrole0) in iamRoles.enumerated() {
                    try iamRolesContainer.encode(clusteriamrole0, forKey: ClientRuntime.Key("ClusterIamRole.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                try iamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretArn = masterPasswordSecretArn {
            try container.encode(masterPasswordSecretArn, forKey: ClientRuntime.Key("MasterPasswordSecretArn"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let modifyStatus = modifyStatus {
            try container.encode(modifyStatus, forKey: ClientRuntime.Key("ModifyStatus"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let multiAZSecondary = multiAZSecondary {
            try container.encode(multiAZSecondary, forKey: ClientRuntime.Key("MultiAZSecondary"))
        }
        if let nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime {
            try container.encodeTimestamp(nextMaintenanceWindowStartTime, format: .dateTime, forKey: ClientRuntime.Key("NextMaintenanceWindowStartTime"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let pendingActions = pendingActions {
            if !pendingActions.isEmpty {
                var pendingActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PendingActions"))
                for (index0, string0) in pendingActions.enumerated() {
                    try pendingActionsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var pendingActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PendingActions"))
                try pendingActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let reservedNodeExchangeStatus = reservedNodeExchangeStatus {
            try container.encode(reservedNodeExchangeStatus, forKey: ClientRuntime.Key("ReservedNodeExchangeStatus"))
        }
        if let resizeInfo = resizeInfo {
            try container.encode(resizeInfo, forKey: ClientRuntime.Key("ResizeInfo"))
        }
        if let restoreStatus = restoreStatus {
            try container.encode(restoreStatus, forKey: ClientRuntime.Key("RestoreStatus"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: ClientRuntime.Key("SnapshotScheduleIdentifier"))
        }
        if let snapshotScheduleState = snapshotScheduleState {
            try container.encode(snapshotScheduleState, forKey: ClientRuntime.Key("SnapshotScheduleState"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytes {
            try container.encode(totalStorageCapacityInMegaBytes, forKey: ClientRuntime.Key("TotalStorageCapacityInMegaBytes"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            if !vpcSecurityGroups.isEmpty {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                    try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                try vpcSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Cluster, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Cluster()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
            value.clusterAvailabilityStatus = try reader["ClusterAvailabilityStatus"].readIfPresent()
            value.modifyStatus = try reader["ModifyStatus"].readIfPresent()
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.dbName = try reader["DBName"].readIfPresent()
            value.endpoint = try reader["Endpoint"].readIfPresent(readingClosure: RedshiftClientTypes.Endpoint.readingClosure)
            value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.automatedSnapshotRetentionPeriod = try reader["AutomatedSnapshotRetentionPeriod"].readIfPresent()
            value.manualSnapshotRetentionPeriod = try reader["ManualSnapshotRetentionPeriod"].readIfPresent()
            value.clusterSecurityGroups = try reader["ClusterSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterSecurityGroupMembership.readingClosure, memberNodeInfo: "ClusterSecurityGroup", isFlattened: false)
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
            value.clusterParameterGroups = try reader["ClusterParameterGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterParameterGroupStatus.readingClosure, memberNodeInfo: "ClusterParameterGroup", isFlattened: false)
            value.clusterSubnetGroupName = try reader["ClusterSubnetGroupName"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
            value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(readingClosure: RedshiftClientTypes.PendingModifiedValues.readingClosure)
            value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
            value.allowVersionUpgrade = try reader["AllowVersionUpgrade"].readIfPresent()
            value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.encrypted = try reader["Encrypted"].readIfPresent()
            value.restoreStatus = try reader["RestoreStatus"].readIfPresent(readingClosure: RedshiftClientTypes.RestoreStatus.readingClosure)
            value.dataTransferProgress = try reader["DataTransferProgress"].readIfPresent(readingClosure: RedshiftClientTypes.DataTransferProgress.readingClosure)
            value.hsmStatus = try reader["HsmStatus"].readIfPresent(readingClosure: RedshiftClientTypes.HsmStatus.readingClosure)
            value.clusterSnapshotCopyStatus = try reader["ClusterSnapshotCopyStatus"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterSnapshotCopyStatus.readingClosure)
            value.clusterPublicKey = try reader["ClusterPublicKey"].readIfPresent()
            value.clusterNodes = try reader["ClusterNodes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterNode.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.elasticIpStatus = try reader["ElasticIpStatus"].readIfPresent(readingClosure: RedshiftClientTypes.ElasticIpStatus.readingClosure)
            value.clusterRevisionNumber = try reader["ClusterRevisionNumber"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.enhancedVpcRouting = try reader["EnhancedVpcRouting"].readIfPresent()
            value.iamRoles = try reader["IamRoles"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterIamRole.readingClosure, memberNodeInfo: "ClusterIamRole", isFlattened: false)
            value.pendingActions = try reader["PendingActions"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
            value.elasticResizeNumberOfNodeOptions = try reader["ElasticResizeNumberOfNodeOptions"].readIfPresent()
            value.deferredMaintenanceWindows = try reader["DeferredMaintenanceWindows"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DeferredMaintenanceWindow.readingClosure, memberNodeInfo: "DeferredMaintenanceWindow", isFlattened: false)
            value.snapshotScheduleIdentifier = try reader["SnapshotScheduleIdentifier"].readIfPresent()
            value.snapshotScheduleState = try reader["SnapshotScheduleState"].readIfPresent()
            value.expectedNextSnapshotScheduleTime = try reader["ExpectedNextSnapshotScheduleTime"].readTimestampIfPresent(format: .dateTime)
            value.expectedNextSnapshotScheduleTimeStatus = try reader["ExpectedNextSnapshotScheduleTimeStatus"].readIfPresent()
            value.nextMaintenanceWindowStartTime = try reader["NextMaintenanceWindowStartTime"].readTimestampIfPresent(format: .dateTime)
            value.resizeInfo = try reader["ResizeInfo"].readIfPresent(readingClosure: RedshiftClientTypes.ResizeInfo.readingClosure)
            value.availabilityZoneRelocationStatus = try reader["AvailabilityZoneRelocationStatus"].readIfPresent()
            value.clusterNamespaceArn = try reader["ClusterNamespaceArn"].readIfPresent()
            value.totalStorageCapacityInMegaBytes = try reader["TotalStorageCapacityInMegaBytes"].readIfPresent()
            value.aquaConfiguration = try reader["AquaConfiguration"].readIfPresent(readingClosure: RedshiftClientTypes.AquaConfiguration.readingClosure)
            value.defaultIamRoleArn = try reader["DefaultIamRoleArn"].readIfPresent()
            value.reservedNodeExchangeStatus = try reader["ReservedNodeExchangeStatus"].readIfPresent(readingClosure: RedshiftClientTypes.ReservedNodeExchangeStatus.readingClosure)
            value.customDomainName = try reader["CustomDomainName"].readIfPresent()
            value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
            value.customDomainCertificateExpiryDate = try reader["CustomDomainCertificateExpiryDate"].readTimestampIfPresent(format: .dateTime)
            value.masterPasswordSecretArn = try reader["MasterPasswordSecretArn"].readIfPresent()
            value.masterPasswordSecretKmsKeyId = try reader["MasterPasswordSecretKmsKeyId"].readIfPresent()
            value.ipAddressType = try reader["IpAddressType"].readIfPresent()
            value.multiAZ = try reader["MultiAZ"].readIfPresent()
            value.multiAZSecondary = try reader["MultiAZSecondary"].readIfPresent(readingClosure: RedshiftClientTypes.SecondaryClusterInfo.readingClosure)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a cluster.
    public struct Cluster: Swift.Equatable {
        /// A boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window.
        public var allowVersionUpgrade: Swift.Bool?
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaConfiguration: RedshiftClientTypes.AquaConfiguration?
        /// The number of days that automatic cluster snapshots are retained.
        public var automatedSnapshotRetentionPeriod: Swift.Int?
        /// The name of the Availability Zone in which the cluster is located.
        public var availabilityZone: Swift.String?
        /// Describes the status of the Availability Zone relocation operation.
        public var availabilityZoneRelocationStatus: Swift.String?
        /// The availability status of the cluster for queries. Possible values are the following:
        ///
        /// * Available - The cluster is available for queries.
        ///
        /// * Unavailable - The cluster is not available for queries.
        ///
        /// * Maintenance - The cluster is intermittently available for queries due to maintenance activities.
        ///
        /// * Modifying - The cluster is intermittently available for queries due to changes that modify the cluster.
        ///
        /// * Failed - The cluster failed and is not available for queries.
        public var clusterAvailabilityStatus: Swift.String?
        /// The date and time that the cluster was created.
        public var clusterCreateTime: ClientRuntime.Date?
        /// The unique identifier of the cluster.
        public var clusterIdentifier: Swift.String?
        /// The namespace Amazon Resource Name (ARN) of the cluster.
        public var clusterNamespaceArn: Swift.String?
        /// The nodes in the cluster.
        public var clusterNodes: [RedshiftClientTypes.ClusterNode]?
        /// The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.
        public var clusterParameterGroups: [RedshiftClientTypes.ClusterParameterGroupStatus]?
        /// The public key for the cluster.
        public var clusterPublicKey: Swift.String?
        /// The specific revision number of the database in the cluster.
        public var clusterRevisionNumber: Swift.String?
        /// A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements. Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter.
        public var clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroupMembership]?
        /// A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
        public var clusterSnapshotCopyStatus: RedshiftClientTypes.ClusterSnapshotCopyStatus?
        /// The current state of the cluster. Possible values are the following:
        ///
        /// * available
        ///
        /// * available, prep-for-resize
        ///
        /// * available, resize-cleanup
        ///
        /// * cancelling-resize
        ///
        /// * creating
        ///
        /// * deleting
        ///
        /// * final-snapshot
        ///
        /// * hardware-failure
        ///
        /// * incompatible-hsm
        ///
        /// * incompatible-network
        ///
        /// * incompatible-parameters
        ///
        /// * incompatible-restore
        ///
        /// * modifying
        ///
        /// * paused
        ///
        /// * rebooting
        ///
        /// * renaming
        ///
        /// * resizing
        ///
        /// * rotating-keys
        ///
        /// * storage-full
        ///
        /// * updating-hsm
        public var clusterStatus: Swift.String?
        /// The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.
        public var clusterSubnetGroupName: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The certificate Amazon Resource Name (ARN) for the custom domain name.
        public var customDomainCertificateArn: Swift.String?
        /// The expiration date for the certificate associated with the custom domain name.
        public var customDomainCertificateExpiryDate: ClientRuntime.Date?
        /// The custom domain name associated with the cluster.
        public var customDomainName: Swift.String?
        ///
        public var dataTransferProgress: RedshiftClientTypes.DataTransferProgress?
        /// The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default.
        public var dbName: Swift.String?
        /// The Amazon Resource Name (ARN) for the IAM role set as default for the cluster.
        public var defaultIamRoleArn: Swift.String?
        /// Describes a group of DeferredMaintenanceWindow objects.
        public var deferredMaintenanceWindows: [RedshiftClientTypes.DeferredMaintenanceWindow]?
        /// The status of the elastic IP (EIP) address.
        public var elasticIpStatus: RedshiftClientTypes.ElasticIpStatus?
        /// The number of nodes that you can resize the cluster to with the elastic resize method.
        public var elasticResizeNumberOfNodeOptions: Swift.String?
        /// A boolean value that, if true, indicates that data in the cluster is encrypted at rest.
        public var encrypted: Swift.Bool?
        /// The connection endpoint.
        public var endpoint: RedshiftClientTypes.Endpoint?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The date and time when the next snapshot is expected to be taken for clusters with a valid snapshot schedule and backups enabled.
        public var expectedNextSnapshotScheduleTime: ClientRuntime.Date?
        /// The status of next expected snapshot for clusters having a valid snapshot schedule and backups enabled. Possible values are the following:
        ///
        /// * OnTrack - The next snapshot is expected to be taken on time.
        ///
        /// * Pending - The next snapshot is pending to be taken.
        public var expectedNextSnapshotScheduleTimeStatus: Swift.String?
        /// A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command. Values: active, applying
        public var hsmStatus: RedshiftClientTypes.HsmStatus?
        /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.
        public var iamRoles: [RedshiftClientTypes.ClusterIamRole]?
        /// The IP address type for the cluster. Possible values are ipv4 and dualstack.
        public var ipAddressType: Swift.String?
        /// The Key Management Service (KMS) key ID of the encryption key used to encrypt data in the cluster.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the cluster.
        public var maintenanceTrackName: Swift.String?
        /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
        public var masterPasswordSecretArn: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret.
        public var masterPasswordSecretKmsKeyId: Swift.String?
        /// The admin user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter.
        public var masterUsername: Swift.String?
        /// The status of a modify operation, if any, initiated for the cluster.
        public var modifyStatus: Swift.String?
        /// A boolean value that, if true, indicates that the cluster is deployed in two Availability Zones.
        public var multiAZ: Swift.String?
        /// The secondary compute unit of a cluster, if Multi-AZ deployment is turned on.
        public var multiAZSecondary: RedshiftClientTypes.SecondaryClusterInfo?
        /// The date and time in UTC when system maintenance can begin.
        public var nextMaintenanceWindowStartTime: ClientRuntime.Date?
        /// The node type for the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of compute nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// Cluster operations that are waiting to be started.
        public var pendingActions: [Swift.String]?
        /// A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.
        public var pendingModifiedValues: RedshiftClientTypes.PendingModifiedValues?
        /// The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
        public var preferredMaintenanceWindow: Swift.String?
        /// A boolean value that, if true, indicates that the cluster can be accessed from a public network.
        public var publiclyAccessible: Swift.Bool?
        /// The status of the reserved-node exchange request. Statuses include in-progress and requested.
        public var reservedNodeExchangeStatus: RedshiftClientTypes.ReservedNodeExchangeStatus?
        /// Returns the following:
        ///
        /// * AllowCancelResize: a boolean value indicating if the resize operation can be cancelled.
        ///
        /// * ResizeType: Returns ClassicResize
        public var resizeInfo: RedshiftClientTypes.ResizeInfo?
        /// A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.
        public var restoreStatus: RedshiftClientTypes.RestoreStatus?
        /// A unique identifier for the cluster snapshot schedule.
        public var snapshotScheduleIdentifier: Swift.String?
        /// The current state of the cluster snapshot schedule.
        public var snapshotScheduleState: RedshiftClientTypes.ScheduleState?
        /// The list of tags for the cluster.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The total storage capacity of the cluster in megabytes.
        public var totalStorageCapacityInMegaBytes: Swift.Int?
        /// The identifier of the VPC the cluster is in, if the cluster is in a VPC.
        public var vpcId: Swift.String?
        /// A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.
        public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

        public init(
            allowVersionUpgrade: Swift.Bool? = nil,
            aquaConfiguration: RedshiftClientTypes.AquaConfiguration? = nil,
            automatedSnapshotRetentionPeriod: Swift.Int? = nil,
            availabilityZone: Swift.String? = nil,
            availabilityZoneRelocationStatus: Swift.String? = nil,
            clusterAvailabilityStatus: Swift.String? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterNamespaceArn: Swift.String? = nil,
            clusterNodes: [RedshiftClientTypes.ClusterNode]? = nil,
            clusterParameterGroups: [RedshiftClientTypes.ClusterParameterGroupStatus]? = nil,
            clusterPublicKey: Swift.String? = nil,
            clusterRevisionNumber: Swift.String? = nil,
            clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroupMembership]? = nil,
            clusterSnapshotCopyStatus: RedshiftClientTypes.ClusterSnapshotCopyStatus? = nil,
            clusterStatus: Swift.String? = nil,
            clusterSubnetGroupName: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            customDomainCertificateArn: Swift.String? = nil,
            customDomainCertificateExpiryDate: ClientRuntime.Date? = nil,
            customDomainName: Swift.String? = nil,
            dataTransferProgress: RedshiftClientTypes.DataTransferProgress? = nil,
            dbName: Swift.String? = nil,
            defaultIamRoleArn: Swift.String? = nil,
            deferredMaintenanceWindows: [RedshiftClientTypes.DeferredMaintenanceWindow]? = nil,
            elasticIpStatus: RedshiftClientTypes.ElasticIpStatus? = nil,
            elasticResizeNumberOfNodeOptions: Swift.String? = nil,
            encrypted: Swift.Bool? = nil,
            endpoint: RedshiftClientTypes.Endpoint? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            expectedNextSnapshotScheduleTime: ClientRuntime.Date? = nil,
            expectedNextSnapshotScheduleTimeStatus: Swift.String? = nil,
            hsmStatus: RedshiftClientTypes.HsmStatus? = nil,
            iamRoles: [RedshiftClientTypes.ClusterIamRole]? = nil,
            ipAddressType: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterPasswordSecretArn: Swift.String? = nil,
            masterPasswordSecretKmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            modifyStatus: Swift.String? = nil,
            multiAZ: Swift.String? = nil,
            multiAZSecondary: RedshiftClientTypes.SecondaryClusterInfo? = nil,
            nextMaintenanceWindowStartTime: ClientRuntime.Date? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            pendingActions: [Swift.String]? = nil,
            pendingModifiedValues: RedshiftClientTypes.PendingModifiedValues? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            reservedNodeExchangeStatus: RedshiftClientTypes.ReservedNodeExchangeStatus? = nil,
            resizeInfo: RedshiftClientTypes.ResizeInfo? = nil,
            restoreStatus: RedshiftClientTypes.RestoreStatus? = nil,
            snapshotScheduleIdentifier: Swift.String? = nil,
            snapshotScheduleState: RedshiftClientTypes.ScheduleState? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalStorageCapacityInMegaBytes: Swift.Int? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.allowVersionUpgrade = allowVersionUpgrade
            self.aquaConfiguration = aquaConfiguration
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.availabilityZone = availabilityZone
            self.availabilityZoneRelocationStatus = availabilityZoneRelocationStatus
            self.clusterAvailabilityStatus = clusterAvailabilityStatus
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterNamespaceArn = clusterNamespaceArn
            self.clusterNodes = clusterNodes
            self.clusterParameterGroups = clusterParameterGroups
            self.clusterPublicKey = clusterPublicKey
            self.clusterRevisionNumber = clusterRevisionNumber
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.clusterStatus = clusterStatus
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.clusterVersion = clusterVersion
            self.customDomainCertificateArn = customDomainCertificateArn
            self.customDomainCertificateExpiryDate = customDomainCertificateExpiryDate
            self.customDomainName = customDomainName
            self.dataTransferProgress = dataTransferProgress
            self.dbName = dbName
            self.defaultIamRoleArn = defaultIamRoleArn
            self.deferredMaintenanceWindows = deferredMaintenanceWindows
            self.elasticIpStatus = elasticIpStatus
            self.elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions
            self.encrypted = encrypted
            self.endpoint = endpoint
            self.enhancedVpcRouting = enhancedVpcRouting
            self.expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime
            self.expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus
            self.hsmStatus = hsmStatus
            self.iamRoles = iamRoles
            self.ipAddressType = ipAddressType
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterPasswordSecretArn = masterPasswordSecretArn
            self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
            self.masterUsername = masterUsername
            self.modifyStatus = modifyStatus
            self.multiAZ = multiAZ
            self.multiAZSecondary = multiAZSecondary
            self.nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.pendingActions = pendingActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.reservedNodeExchangeStatus = reservedNodeExchangeStatus
            self.resizeInfo = resizeInfo
            self.restoreStatus = restoreStatus
            self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
            self.snapshotScheduleState = snapshotScheduleState
            self.tags = tags
            self.totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytes
            self.vpcId = vpcId
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension ClusterAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The account already has a cluster with the given identifier.
public struct ClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterAssociatedToSchedule: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case scheduleAssociationState = "ScheduleAssociationState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let scheduleAssociationState = scheduleAssociationState {
            try container.encode(scheduleAssociationState, forKey: ClientRuntime.Key("ScheduleAssociationState"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterAssociatedToSchedule, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterAssociatedToSchedule()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.scheduleAssociationState = try reader["ScheduleAssociationState"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    ///
    public struct ClusterAssociatedToSchedule: Swift.Equatable {
        ///
        public var clusterIdentifier: Swift.String?
        ///
        public var scheduleAssociationState: RedshiftClientTypes.ScheduleState?

        public init(
            clusterIdentifier: Swift.String? = nil,
            scheduleAssociationState: RedshiftClientTypes.ScheduleState? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.scheduleAssociationState = scheduleAssociationState
        }
    }

}

extension RedshiftClientTypes.ClusterDbRevision: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case currentDatabaseRevision = "CurrentDatabaseRevision"
        case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        case revisionTargets = "RevisionTargets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let currentDatabaseRevision = currentDatabaseRevision {
            try container.encode(currentDatabaseRevision, forKey: ClientRuntime.Key("CurrentDatabaseRevision"))
        }
        if let databaseRevisionReleaseDate = databaseRevisionReleaseDate {
            try container.encodeTimestamp(databaseRevisionReleaseDate, format: .dateTime, forKey: ClientRuntime.Key("DatabaseRevisionReleaseDate"))
        }
        if let revisionTargets = revisionTargets {
            if !revisionTargets.isEmpty {
                var revisionTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevisionTargets"))
                for (index0, revisiontarget0) in revisionTargets.enumerated() {
                    try revisionTargetsContainer.encode(revisiontarget0, forKey: ClientRuntime.Key("RevisionTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var revisionTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevisionTargets"))
                try revisionTargetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterDbRevision, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterDbRevision()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.currentDatabaseRevision = try reader["CurrentDatabaseRevision"].readIfPresent()
            value.databaseRevisionReleaseDate = try reader["DatabaseRevisionReleaseDate"].readTimestampIfPresent(format: .dateTime)
            value.revisionTargets = try reader["RevisionTargets"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RevisionTarget.readingClosure, memberNodeInfo: "RevisionTarget", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a ClusterDbRevision.
    public struct ClusterDbRevision: Swift.Equatable {
        /// The unique identifier of the cluster.
        public var clusterIdentifier: Swift.String?
        /// A string representing the current cluster version.
        public var currentDatabaseRevision: Swift.String?
        /// The date on which the database revision was released.
        public var databaseRevisionReleaseDate: ClientRuntime.Date?
        /// A list of RevisionTarget objects, where each object describes the database revision that a cluster can be updated to.
        public var revisionTargets: [RedshiftClientTypes.RevisionTarget]?

        public init(
            clusterIdentifier: Swift.String? = nil,
            currentDatabaseRevision: Swift.String? = nil,
            databaseRevisionReleaseDate: ClientRuntime.Date? = nil,
            revisionTargets: [RedshiftClientTypes.RevisionTarget]? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.currentDatabaseRevision = currentDatabaseRevision
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
            self.revisionTargets = revisionTargets
        }
    }

}

extension RedshiftClientTypes.ClusterIamRole: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyStatus = "ApplyStatus"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applyStatus = applyStatus {
            try container.encode(applyStatus, forKey: ClientRuntime.Key("ApplyStatus"))
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterIamRole, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterIamRole()
            value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
            value.applyStatus = try reader["ApplyStatus"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// An Identity and Access Management (IAM) role that can be used by the associated Amazon Redshift cluster to access other Amazon Web Services services.
    public struct ClusterIamRole: Swift.Equatable {
        /// A value that describes the status of the IAM role's association with an Amazon Redshift cluster. The following are possible statuses and descriptions.
        ///
        /// * in-sync: The role is available for use by the cluster.
        ///
        /// * adding: The role is in the process of being associated with the cluster.
        ///
        /// * removing: The role is in the process of being disassociated with the cluster.
        public var applyStatus: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role, for example, arn:aws:iam::123456789012:role/RedshiftCopyUnload.
        public var iamRoleArn: Swift.String?

        public init(
            applyStatus: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.applyStatus = applyStatus
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension RedshiftClientTypes.ClusterNode: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeRole = "NodeRole"
        case privateIPAddress = "PrivateIPAddress"
        case publicIPAddress = "PublicIPAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeRole = nodeRole {
            try container.encode(nodeRole, forKey: ClientRuntime.Key("NodeRole"))
        }
        if let privateIPAddress = privateIPAddress {
            try container.encode(privateIPAddress, forKey: ClientRuntime.Key("PrivateIPAddress"))
        }
        if let publicIPAddress = publicIPAddress {
            try container.encode(publicIPAddress, forKey: ClientRuntime.Key("PublicIPAddress"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterNode, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterNode()
            value.nodeRole = try reader["NodeRole"].readIfPresent()
            value.privateIPAddress = try reader["PrivateIPAddress"].readIfPresent()
            value.publicIPAddress = try reader["PublicIPAddress"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The identifier of a node in a cluster.
    public struct ClusterNode: Swift.Equatable {
        /// Whether the node is a leader node or a compute node.
        public var nodeRole: Swift.String?
        /// The private IP address of a node within a cluster.
        public var privateIPAddress: Swift.String?
        /// The public IP address of a node within a cluster.
        public var publicIPAddress: Swift.String?

        public init(
            nodeRole: Swift.String? = nil,
            privateIPAddress: Swift.String? = nil,
            publicIPAddress: Swift.String? = nil
        )
        {
            self.nodeRole = nodeRole
            self.privateIPAddress = privateIPAddress
            self.publicIPAddress = publicIPAddress
        }
    }

}

extension ClusterNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The ClusterIdentifier parameter does not refer to an existing cluster.
public struct ClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterOnLatestRevisionFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterOnLatestRevisionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Cluster is already on the latest database revision.
public struct ClusterOnLatestRevisionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterOnLatestRevision" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterParameterGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case parameterGroupFamily = "ParameterGroupFamily"
        case parameterGroupName = "ParameterGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterParameterGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterParameterGroup()
            value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
            value.parameterGroupFamily = try reader["ParameterGroupFamily"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a parameter group.
    public struct ClusterParameterGroup: Swift.Equatable {
        /// The description of the parameter group.
        public var description: Swift.String?
        /// The name of the cluster parameter group family that this cluster parameter group is compatible with.
        public var parameterGroupFamily: Swift.String?
        /// The name of the cluster parameter group.
        public var parameterGroupName: Swift.String?
        /// The list of tags for the cluster parameter group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            description: Swift.String? = nil,
            parameterGroupFamily: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.parameterGroupFamily = parameterGroupFamily
            self.parameterGroupName = parameterGroupName
            self.tags = tags
        }
    }

}

extension ClusterParameterGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterParameterGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A cluster parameter group with the same name already exists.
public struct ClusterParameterGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterParameterGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The parameter group name does not refer to an existing parameter group.
public struct ClusterParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterParameterGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterParameterGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of cluster parameter groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterParameterGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterParameterGroupStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterStatusList = "ClusterParameterStatusList"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterGroupName = "ParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterParameterStatusList = clusterParameterStatusList {
            if !clusterParameterStatusList.isEmpty {
                var clusterParameterStatusListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterStatusList"))
                for (index0, clusterparameterstatus0) in clusterParameterStatusList.enumerated() {
                    try clusterParameterStatusListContainer.encode(clusterparameterstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterParameterStatusListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterStatusList"))
                try clusterParameterStatusListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterParameterGroupStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterParameterGroupStatus()
            value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
            value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
            value.clusterParameterStatusList = try reader["ClusterParameterStatusList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterParameterStatus.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a parameter group.
    public struct ClusterParameterGroupStatus: Swift.Equatable {
        /// The list of parameter statuses. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide.
        public var clusterParameterStatusList: [RedshiftClientTypes.ClusterParameterStatus]?
        /// The status of parameter updates.
        public var parameterApplyStatus: Swift.String?
        /// The name of the cluster parameter group.
        public var parameterGroupName: Swift.String?

        public init(
            clusterParameterStatusList: [RedshiftClientTypes.ClusterParameterStatus]? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil
        )
        {
            self.clusterParameterStatusList = clusterParameterStatusList
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterGroupName = parameterGroupName
        }
    }

}

extension RedshiftClientTypes.ClusterParameterStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterApplyErrorDescription = "ParameterApplyErrorDescription"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterName = "ParameterName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterApplyErrorDescription = parameterApplyErrorDescription {
            try container.encode(parameterApplyErrorDescription, forKey: ClientRuntime.Key("ParameterApplyErrorDescription"))
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterParameterStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterParameterStatus()
            value.parameterName = try reader["ParameterName"].readIfPresent()
            value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
            value.parameterApplyErrorDescription = try reader["ParameterApplyErrorDescription"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a parameter group.
    public struct ClusterParameterStatus: Swift.Equatable {
        /// The error that prevented the parameter from being applied to the database.
        public var parameterApplyErrorDescription: Swift.String?
        /// The status of the parameter that indicates whether the parameter is in sync with the database, waiting for a cluster reboot, or encountered an error when being applied. The following are possible statuses and descriptions.
        ///
        /// * in-sync: The parameter value is in sync with the database.
        ///
        /// * pending-reboot: The parameter value will be applied after the cluster reboots.
        ///
        /// * applying: The parameter value is being applied to the database.
        ///
        /// * invalid-parameter: Cannot apply the parameter value because it has an invalid value or syntax.
        ///
        /// * apply-deferred: The parameter contains static property changes. The changes are deferred until the cluster reboots.
        ///
        /// * apply-error: Cannot connect to the cluster. The parameter change will be applied after the cluster reboots.
        ///
        /// * unknown-error: Cannot apply the parameter change right now. The change will be applied after the cluster reboots.
        public var parameterApplyStatus: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?

        public init(
            parameterApplyErrorDescription: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterName: Swift.String? = nil
        )
        {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterName = parameterName
        }
    }

}

extension ClusterQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would exceed the allowed number of cluster instances for this account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterSecurityGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case description = "Description"
        case ec2SecurityGroups = "EC2SecurityGroups"
        case ipRanges = "IPRanges"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let ec2SecurityGroups = ec2SecurityGroups {
            if !ec2SecurityGroups.isEmpty {
                var ec2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
                for (index0, ec2securitygroup0) in ec2SecurityGroups.enumerated() {
                    try ec2SecurityGroupsContainer.encode(ec2securitygroup0, forKey: ClientRuntime.Key("EC2SecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ec2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
                try ec2SecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipRanges = ipRanges {
            if !ipRanges.isEmpty {
                var ipRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IPRanges"))
                for (index0, iprange0) in ipRanges.enumerated() {
                    try ipRangesContainer.encode(iprange0, forKey: ClientRuntime.Key("IPRange.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ipRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IPRanges"))
                try ipRangesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterSecurityGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterSecurityGroup()
            value.clusterSecurityGroupName = try reader["ClusterSecurityGroupName"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.ec2SecurityGroups = try reader["EC2SecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EC2SecurityGroup.readingClosure, memberNodeInfo: "EC2SecurityGroup", isFlattened: false)
            value.ipRanges = try reader["IPRanges"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IPRange.readingClosure, memberNodeInfo: "IPRange", isFlattened: false)
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a security group.
    public struct ClusterSecurityGroup: Swift.Equatable {
        /// The name of the cluster security group to which the operation was applied.
        public var clusterSecurityGroupName: Swift.String?
        /// A description of the security group.
        public var description: Swift.String?
        /// A list of EC2 security groups that are permitted to access clusters associated with this cluster security group.
        public var ec2SecurityGroups: [RedshiftClientTypes.EC2SecurityGroup]?
        /// A list of IP ranges (CIDR blocks) that are permitted to access clusters associated with this cluster security group.
        public var ipRanges: [RedshiftClientTypes.IPRange]?
        /// The list of tags for the cluster security group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            clusterSecurityGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            ec2SecurityGroups: [RedshiftClientTypes.EC2SecurityGroup]? = nil,
            ipRanges: [RedshiftClientTypes.IPRange]? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.description = description
            self.ec2SecurityGroups = ec2SecurityGroups
            self.ipRanges = ipRanges
            self.tags = tags
        }
    }

}

extension ClusterSecurityGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSecurityGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A cluster security group with the same name already exists.
public struct ClusterSecurityGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSecurityGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterSecurityGroupMembership: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterSecurityGroupMembership, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterSecurityGroupMembership()
            value.clusterSecurityGroupName = try reader["ClusterSecurityGroupName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a cluster security group.
    public struct ClusterSecurityGroupMembership: Swift.Equatable {
        /// The name of the cluster security group.
        public var clusterSecurityGroupName: Swift.String?
        /// The status of the cluster security group.
        public var status: Swift.String?

        public init(
            clusterSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.status = status
        }
    }

}

extension ClusterSecurityGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSecurityGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster security group name does not refer to an existing cluster security group.
public struct ClusterSecurityGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSecurityGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterSecurityGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSecurityGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of cluster security groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSecurityGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QuotaExceeded.ClusterSecurityGroup" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterSnapshotAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The value specified as a snapshot identifier is already used by an existing snapshot.
public struct ClusterSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterSnapshotCopyStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationRegion = "DestinationRegion"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case retentionPeriod = "RetentionPeriod"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationRegion = destinationRegion {
            try container.encode(destinationRegion, forKey: ClientRuntime.Key("DestinationRegion"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let retentionPeriod = retentionPeriod {
            try container.encode(retentionPeriod, forKey: ClientRuntime.Key("RetentionPeriod"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterSnapshotCopyStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterSnapshotCopyStatus()
            value.destinationRegion = try reader["DestinationRegion"].readIfPresent()
            value.retentionPeriod = try reader["RetentionPeriod"].readIfPresent()
            value.manualSnapshotRetentionPeriod = try reader["ManualSnapshotRetentionPeriod"].readIfPresent()
            value.snapshotCopyGrantName = try reader["SnapshotCopyGrantName"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Returns the destination region and retention period that are configured for cross-region snapshot copy.
    public struct ClusterSnapshotCopyStatus: Swift.Equatable {
        /// The destination region that snapshots are automatically copied to when cross-region snapshot copy is enabled.
        public var destinationRegion: Swift.String?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region.
        public var retentionPeriod: Swift.Int?
        /// The name of the snapshot copy grant.
        public var snapshotCopyGrantName: Swift.String?

        public init(
            destinationRegion: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            retentionPeriod: Swift.Int? = nil,
            snapshotCopyGrantName: Swift.String? = nil
        )
        {
            self.destinationRegion = destinationRegion
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }
    }

}

extension ClusterSnapshotNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The snapshot identifier does not refer to an existing cluster snapshot.
public struct ClusterSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterSnapshotQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in the user exceeding the allowed number of cluster snapshots.
public struct ClusterSnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterSubnetGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case description = "Description"
        case subnetGroupStatus = "SubnetGroupStatus"
        case subnets = "Subnets"
        case supportedClusterIpAddressTypes = "SupportedClusterIpAddressTypes"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let subnetGroupStatus = subnetGroupStatus {
            try container.encode(subnetGroupStatus, forKey: ClientRuntime.Key("SubnetGroupStatus"))
        }
        if let subnets = subnets {
            if !subnets.isEmpty {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                for (index0, subnet0) in subnets.enumerated() {
                    try subnetsContainer.encode(subnet0, forKey: ClientRuntime.Key("Subnet.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                try subnetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedClusterIpAddressTypes = supportedClusterIpAddressTypes {
            if !supportedClusterIpAddressTypes.isEmpty {
                var supportedClusterIpAddressTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedClusterIpAddressTypes"))
                for (index0, string0) in supportedClusterIpAddressTypes.enumerated() {
                    try supportedClusterIpAddressTypesContainer.encode(string0, forKey: ClientRuntime.Key("item.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedClusterIpAddressTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedClusterIpAddressTypes"))
                try supportedClusterIpAddressTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterSubnetGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterSubnetGroup()
            value.clusterSubnetGroupName = try reader["ClusterSubnetGroupName"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.subnetGroupStatus = try reader["SubnetGroupStatus"].readIfPresent()
            value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Subnet.readingClosure, memberNodeInfo: "Subnet", isFlattened: false)
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.supportedClusterIpAddressTypes = try reader["SupportedClusterIpAddressTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "item", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a subnet group.
    public struct ClusterSubnetGroup: Swift.Equatable {
        /// The name of the cluster subnet group.
        public var clusterSubnetGroupName: Swift.String?
        /// The description of the cluster subnet group.
        public var description: Swift.String?
        /// The status of the cluster subnet group. Possible values are Complete, Incomplete and Invalid.
        public var subnetGroupStatus: Swift.String?
        /// A list of the VPC [Subnet] elements.
        public var subnets: [RedshiftClientTypes.Subnet]?
        /// The IP address types supported by this cluster subnet group. Possible values are ipv4 and dualstack.
        public var supportedClusterIpAddressTypes: [Swift.String]?
        /// The list of tags for the cluster subnet group.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The VPC ID of the cluster subnet group.
        public var vpcId: Swift.String?

        public init(
            clusterSubnetGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            subnetGroupStatus: Swift.String? = nil,
            subnets: [RedshiftClientTypes.Subnet]? = nil,
            supportedClusterIpAddressTypes: [Swift.String]? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.supportedClusterIpAddressTypes = supportedClusterIpAddressTypes
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

extension ClusterSubnetGroupAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSubnetGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A ClusterSubnetGroupName is already used by an existing cluster subnet group.
public struct ClusterSubnetGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterSubnetGroupNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSubnetGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster subnet group name does not refer to an existing cluster subnet group.
public struct ClusterSubnetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterSubnetGroupQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSubnetGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in user exceeding the allowed number of cluster subnet groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSubnetGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ClusterSubnetQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ClusterSubnetQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would result in user exceeding the allowed number of subnets in a cluster subnet groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSubnetQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ClusterVersion: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterGroupFamily = "ClusterParameterGroupFamily"
        case clusterVersion = "ClusterVersion"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterParameterGroupFamily = clusterParameterGroupFamily {
            try container.encode(clusterParameterGroupFamily, forKey: ClientRuntime.Key("ClusterParameterGroupFamily"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ClusterVersion, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ClusterVersion()
            value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
            value.clusterParameterGroupFamily = try reader["ClusterParameterGroupFamily"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a cluster version, including the parameter group family and description of the version.
    public struct ClusterVersion: Swift.Equatable {
        /// The name of the cluster parameter group family for the cluster.
        public var clusterParameterGroupFamily: Swift.String?
        /// The version number used by the cluster.
        public var clusterVersion: Swift.String?
        /// The description of the cluster version.
        public var description: Swift.String?

        public init(
            clusterParameterGroupFamily: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.clusterVersion = clusterVersion
            self.description = description
        }
    }

}

extension ConflictPolicyUpdateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ConflictPolicyUpdateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is a conflict while updating the resource policy.
public struct ConflictPolicyUpdateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictPolicyUpdateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CopyClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case sourceSnapshotClusterIdentifier = "SourceSnapshotClusterIdentifier"
        case sourceSnapshotIdentifier = "SourceSnapshotIdentifier"
        case targetSnapshotIdentifier = "TargetSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier {
            try container.encode(sourceSnapshotClusterIdentifier, forKey: ClientRuntime.Key("SourceSnapshotClusterIdentifier"))
        }
        if let sourceSnapshotIdentifier = sourceSnapshotIdentifier {
            try container.encode(sourceSnapshotIdentifier, forKey: ClientRuntime.Key("SourceSnapshotIdentifier"))
        }
        if let targetSnapshotIdentifier = targetSnapshotIdentifier {
            try container.encode(targetSnapshotIdentifier, forKey: ClientRuntime.Key("TargetSnapshotIdentifier"))
        }
        try container.encode("CopyClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyClusterSnapshotInput {

    static func urlPathProvider(_ value: CopyClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CopyClusterSnapshotInput: Swift.Equatable {
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints:
    ///
    /// * Must be the identifier for a valid cluster.
    public var sourceSnapshotClusterIdentifier: Swift.String?
    /// The identifier for the source snapshot. Constraints:
    ///
    /// * Must be the identifier for a valid automated snapshot whose state is available.
    /// This member is required.
    public var sourceSnapshotIdentifier: Swift.String?
    /// The identifier given to the new manual snapshot. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for the Amazon Web Services account that is making the request.
    /// This member is required.
    public var targetSnapshotIdentifier: Swift.String?

    public init(
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        sourceSnapshotClusterIdentifier: Swift.String? = nil,
        sourceSnapshotIdentifier: Swift.String? = nil,
        targetSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier
        self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
        self.targetSnapshotIdentifier = targetSnapshotIdentifier
    }
}

extension CopyClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CopyClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CopyClusterSnapshotResult"]
            var value = CopyClusterSnapshotOutput()
            value.snapshot = try reader["Snapshot"].readIfPresent(readingClosure: RedshiftClientTypes.Snapshot.readingClosure)
            return value
        }
    }
}

public struct CopyClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

enum CopyClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotAlreadyExists": return try await ClusterSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotQuotaExceeded": return try await ClusterSnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CopyToRegionDisabledFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CopyToRegionDisabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Cross-region snapshot copy was temporarily disabled. Try your request again.
public struct CopyToRegionDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CopyToRegionDisabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CreateAuthenticationProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileContent = authenticationProfileContent {
            try container.encode(authenticationProfileContent, forKey: ClientRuntime.Key("AuthenticationProfileContent"))
        }
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("CreateAuthenticationProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateAuthenticationProfileInput {

    static func urlPathProvider(_ value: CreateAuthenticationProfileInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateAuthenticationProfileInput: Swift.Equatable {
    /// The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
    /// This member is required.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile to be created.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

extension CreateAuthenticationProfileOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateAuthenticationProfileOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateAuthenticationProfileResult"]
            var value = CreateAuthenticationProfileOutput()
            value.authenticationProfileContent = try reader["AuthenticationProfileContent"].readIfPresent()
            value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
            return value
        }
    }
}

public struct CreateAuthenticationProfileOutput: Swift.Equatable {
    /// The content of the authentication profile in JSON format.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile that was created.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

enum CreateAuthenticationProfileOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthenticationProfileAlreadyExistsFault": return try await AuthenticationProfileAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AuthenticationProfileQuotaExceededFault": return try await AuthenticationProfileQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateClusterInput(additionalInfo: \(Swift.String(describing: additionalInfo)), allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), aquaConfigurationStatus: \(Swift.String(describing: aquaConfigurationStatus)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneRelocation: \(Swift.String(describing: availabilityZoneRelocation)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterParameterGroupName: \(Swift.String(describing: clusterParameterGroupName)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterSubnetGroupName: \(Swift.String(describing: clusterSubnetGroupName)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), dbName: \(Swift.String(describing: dbName)), defaultIamRoleArn: \(Swift.String(describing: defaultIamRoleArn)), elasticIp: \(Swift.String(describing: elasticIp)), encrypted: \(Swift.String(describing: encrypted)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), iamRoles: \(Swift.String(describing: iamRoles)), ipAddressType: \(Swift.String(describing: ipAddressType)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), loadSampleData: \(Swift.String(describing: loadSampleData)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manageMasterPassword: \(Swift.String(describing: manageMasterPassword)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterPasswordSecretKmsKeyId: \(Swift.String(describing: masterPasswordSecretKmsKeyId)), masterUsername: \(Swift.String(describing: masterUsername)), multiAZ: \(Swift.String(describing: multiAZ)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), port: \(Swift.String(describing: port)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), redshiftIdcApplicationArn: \(Swift.String(describing: redshiftIdcApplicationArn)), snapshotScheduleIdentifier: \(Swift.String(describing: snapshotScheduleIdentifier)), tags: \(Swift.String(describing: tags)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension CreateClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case dbName = "DBName"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case iamRoles = "IamRoles"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case loadSampleData = "LoadSampleData"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manageMasterPassword = "ManageMasterPassword"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUserPassword = "MasterUserPassword"
        case masterUsername = "MasterUsername"
        case multiAZ = "MultiAZ"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalInfo = additionalInfo {
            try container.encode(additionalInfo, forKey: ClientRuntime.Key("AdditionalInfo"))
        }
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: ClientRuntime.Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: ClientRuntime.Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, string0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let iamRoles = iamRoles {
            if !iamRoles.isEmpty {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                for (index0, string0) in iamRoles.enumerated() {
                    try iamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                try iamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let loadSampleData = loadSampleData {
            try container.encode(loadSampleData, forKey: ClientRuntime.Key("LoadSampleData"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manageMasterPassword = manageMasterPassword {
            try container.encode(manageMasterPassword, forKey: ClientRuntime.Key("ManageMasterPassword"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: ClientRuntime.Key("SnapshotScheduleIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterInput: Swift.Equatable {
    /// Reserved.
    public var additionalInfo: Swift.String?
    /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster. Default: true
    public var allowVersionUpgrade: Swift.Bool?
    /// This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: 1 Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint. Example: us-east-2d Constraint: The specified Availability Zone must be in the same region as the current endpoint.
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is created.
    public var availabilityZoneRelocation: Swift.Bool?
    /// A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    ///
    ///
    /// Example: myexamplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to [Working with Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var clusterParameterGroupName: Swift.String?
    /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift.
    public var clusterSecurityGroups: [Swift.String]?
    /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
    public var clusterSubnetGroupName: Swift.String?
    /// The type of the cluster. When cluster type is specified as
    ///
    /// * single-node, the NumberOfNodes parameter is not required.
    ///
    /// * multi-node, the NumberOfNodes parameter is required.
    ///
    ///
    /// Valid Values: multi-node | single-node Default: multi-node
    public var clusterType: Swift.String?
    /// The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. Constraints: Only version 1.0 is currently available. Example: 1.0
    public var clusterVersion: Swift.String?
    /// The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to [Create a Database](https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html) in the Amazon Redshift Database Developer Guide. Default: dev Constraints:
    ///
    /// * Must contain 1 to 64 alphanumeric characters.
    ///
    /// * Must contain only lowercase letters.
    ///
    /// * Cannot be a word that is reserved by the service. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
    public var defaultIamRoleArn: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on. For more information about provisioning clusters in EC2-VPC, go to [Supported Platforms to Launch Your Cluster](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms) in the Amazon Redshift Cluster Management Guide.
    public var elasticIp: Swift.String?
    /// If true, the data in the cluster is encrypted at rest. Default: false
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to [Quotas and limits](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRoles: [Swift.String]?
    /// The IP address types that the cluster supports. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
    public var kmsKeyId: Swift.String?
    /// A flag that specifies whether to load sample data once the cluster is created.
    public var loadSampleData: Swift.String?
    /// An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the current track.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage this cluster's admin credentials. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
    public var manageMasterPassword: Swift.Bool?
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// The password associated with the admin user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Constraints:
    ///
    /// * Must be between 8 and 64 characters in length.
    ///
    /// * Must contain at least one uppercase letter.
    ///
    /// * Must contain at least one lowercase letter.
    ///
    /// * Must contain one number.
    ///
    /// * Can be any printable ASCII character (ASCII code 33-126) except ' (single quote), " (double quote), \, /, or @.
    public var masterUserPassword: Swift.String?
    /// The user name associated with the admin user account for the cluster that is being created. Constraints:
    ///
    /// * Must be 1 - 128 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * The first character must be a letter.
    ///
    /// * Must not contain a colon (:) or a slash (/).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var masterUsername: Swift.String?
    /// If true, Amazon Redshift will deploy the cluster in two Availability Zones (AZ).
    public var multiAZ: Swift.Bool?
    /// The node type to be provisioned for the cluster. For information about node types, go to [ Working with Clusters](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes) in the Amazon Redshift Cluster Management Guide. Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
    /// This member is required.
    public var nodeType: Swift.String?
    /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. For information about determining how many nodes you need, go to [ Working with Clusters](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes) in the Amazon Redshift Cluster Management Guide. If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster. Default: 1 Constraints: Value must be at least 1 and no more than 100.
    public var numberOfNodes: Swift.Int?
    /// The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default: 5439 Valid Values: 1150-65535
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see [Maintenance Windows](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows) in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network.
    public var publiclyAccessible: Swift.Bool?
    /// The Amazon resource name (ARN) of the Amazon Redshift IAM Identity Center application.
    public var redshiftIdcApplicationArn: Swift.String?
    /// A unique identifier for the snapshot schedule.
    public var snapshotScheduleIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        additionalInfo: Swift.String? = nil,
        allowVersionUpgrade: Swift.Bool? = nil,
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterSubnetGroupName: Swift.String? = nil,
        clusterType: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        dbName: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        iamRoles: [Swift.String]? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        loadSampleData: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil,
        snapshotScheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.allowVersionUpgrade = allowVersionUpgrade
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.clusterType = clusterType
        self.clusterVersion = clusterVersion
        self.dbName = dbName
        self.defaultIamRoleArn = defaultIamRoleArn
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.iamRoles = iamRoles
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.loadSampleData = loadSampleData
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.multiAZ = multiAZ
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
        self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateClusterResult"]
            var value = CreateClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct CreateClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum CreateClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterAlreadyExists": return try await ClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterQuotaExceeded": return try await ClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSubnetGroupStateFault": return try await InvalidClusterSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterTrack": return try await InvalidClusterTrackFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidElasticIpFault": return try await InvalidElasticIpFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "Ipv6CidrBlockNotFoundFault": return try await Ipv6CidrBlockNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case parameterGroupFamily = "ParameterGroupFamily"
        case parameterGroupName = "ParameterGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterParameterGroupInput {

    static func urlPathProvider(_ value: CreateClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterParameterGroupInput: Swift.Equatable {
    /// A description of the parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters. To get a list of valid parameter group family names, you can call [DescribeClusterParameterGroups]. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your Amazon Web Services account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0".
    /// This member is required.
    public var parameterGroupFamily: Swift.String?
    /// The name of the cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique withing your Amazon Web Services account.
    ///
    ///
    /// This value is stored as a lower-case string.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        parameterGroupFamily: Swift.String? = nil,
        parameterGroupName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.parameterGroupFamily = parameterGroupFamily
        self.parameterGroupName = parameterGroupName
        self.tags = tags
    }
}

extension CreateClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateClusterParameterGroupResult"]
            var value = CreateClusterParameterGroupOutput()
            value.clusterParameterGroup = try reader["ClusterParameterGroup"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterParameterGroup.readingClosure)
            return value
        }
    }
}

public struct CreateClusterParameterGroupOutput: Swift.Equatable {
    /// Describes a parameter group.
    public var clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup?

    public init(
        clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup? = nil
    )
    {
        self.clusterParameterGroup = clusterParameterGroup
    }
}

enum CreateClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterParameterGroupAlreadyExists": return try await ClusterParameterGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterParameterGroupQuotaExceeded": return try await ClusterParameterGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateClusterSecurityGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case description = "Description"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterSecurityGroupInput {

    static func urlPathProvider(_ value: CreateClusterSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterSecurityGroupInput: Swift.Equatable {
    /// The name for the security group. Amazon Redshift stores the value as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 alphanumeric characters or hyphens.
    ///
    /// * Must not be "Default".
    ///
    /// * Must be unique for all security groups that are created by your Amazon Web Services account.
    ///
    ///
    /// Example: examplesecuritygroup
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// A description for the security group.
    /// This member is required.
    public var description: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterSecurityGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.description = description
        self.tags = tags
    }
}

extension CreateClusterSecurityGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateClusterSecurityGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateClusterSecurityGroupResult"]
            var value = CreateClusterSecurityGroupOutput()
            value.clusterSecurityGroup = try reader["ClusterSecurityGroup"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterSecurityGroup.readingClosure)
            return value
        }
    }
}

public struct CreateClusterSecurityGroupOutput: Swift.Equatable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

enum CreateClusterSecurityGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSecurityGroupAlreadyExists": return try await ClusterSecurityGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "QuotaExceeded.ClusterSecurityGroup": return try await ClusterSecurityGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case snapshotIdentifier = "SnapshotIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterSnapshotInput {

    static func urlPathProvider(_ value: CreateClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterSnapshotInput: Swift.Equatable {
    /// The cluster identifier for which you want a snapshot.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account. Constraints:
    ///
    /// * Cannot be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifier = snapshotIdentifier
        self.tags = tags
    }
}

extension CreateClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateClusterSnapshotResult"]
            var value = CreateClusterSnapshotOutput()
            value.snapshot = try reader["Snapshot"].readIfPresent(readingClosure: RedshiftClientTypes.Snapshot.readingClosure)
            return value
        }
    }
}

public struct CreateClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

enum CreateClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotAlreadyExists": return try await ClusterSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotQuotaExceeded": return try await ClusterSnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateClusterSubnetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case description = "Description"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                for (index0, string0) in subnetIds.enumerated() {
                    try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterSubnetGroupInput {

    static func urlPathProvider(_ value: CreateClusterSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterSubnetGroupInput: Swift.Equatable {
    /// The name for the subnet group. Amazon Redshift stores the value as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 alphanumeric characters or hyphens.
    ///
    /// * Must not be "Default".
    ///
    /// * Must be unique for all subnet groups that are created by your Amazon Web Services account.
    ///
    ///
    /// Example: examplesubnetgroup
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?
    /// A description for the subnet group.
    /// This member is required.
    public var description: Swift.String?
    /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.description = description
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension CreateClusterSubnetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateClusterSubnetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateClusterSubnetGroupResult"]
            var value = CreateClusterSubnetGroupOutput()
            value.clusterSubnetGroup = try reader["ClusterSubnetGroup"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterSubnetGroup.readingClosure)
            return value
        }
    }
}

public struct CreateClusterSubnetGroupOutput: Swift.Equatable {
    /// Describes a subnet group.
    public var clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?

    public init(
        clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup? = nil
    )
    {
        self.clusterSubnetGroup = clusterSubnetGroup
    }
}

enum CreateClusterSubnetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSubnetGroupAlreadyExists": return try await ClusterSubnetGroupAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSubnetGroupQuotaExceeded": return try await ClusterSubnetGroupQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSubnetQuotaExceededFault": return try await ClusterSubnetQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateCustomDomainAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        try container.encode("CreateCustomDomainAssociation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCustomDomainAssociationInput {

    static func urlPathProvider(_ value: CreateCustomDomainAssociationInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateCustomDomainAssociationInput: Swift.Equatable {
    /// The cluster identifier that the custom domain is associated with.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The certificate Amazon Resource Name (ARN) for the custom domain name association.
    /// This member is required.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for a custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

extension CreateCustomDomainAssociationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateCustomDomainAssociationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateCustomDomainAssociationResult"]
            var value = CreateCustomDomainAssociationOutput()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.customDomainCertExpiryTime = try reader["CustomDomainCertExpiryTime"].readIfPresent()
            value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
            value.customDomainName = try reader["CustomDomainName"].readIfPresent()
            return value
        }
    }
}

public struct CreateCustomDomainAssociationOutput: Swift.Equatable {
    /// The identifier of the cluster that the custom domain is associated with.
    public var clusterIdentifier: Swift.String?
    /// The expiration time for the certificate for the custom domain.
    public var customDomainCertExpiryTime: Swift.String?
    /// The Amazon Resource Name (ARN) for the certificate associated with the custom domain name.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for the association result.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertExpiryTime: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertExpiryTime = customDomainCertExpiryTime
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

enum CreateCustomDomainAssociationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case endpointName = "EndpointName"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let subnetGroupName = subnetGroupName {
            try container.encode(subnetGroupName, forKey: ClientRuntime.Key("SubnetGroupName"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateEndpointAccessInput {

    static func urlPathProvider(_ value: CreateEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateEndpointAccessInput: Swift.Equatable {
    /// The cluster identifier of the cluster to access.
    public var clusterIdentifier: Swift.String?
    /// The Redshift-managed VPC endpoint name. An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
    public var resourceOwner: Swift.String?
    /// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
    /// This member is required.
    public var subnetGroupName: Swift.String?
    /// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.endpointName = endpointName
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateEndpointAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateEndpointAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateEndpointAccessResult"]
            var value = CreateEndpointAccessOutput()
            value.address = try reader["Address"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.endpointName = try reader["EndpointName"].readIfPresent()
            value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
            value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
            value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(readingClosure: RedshiftClientTypes.VpcEndpoint.readingClosure)
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
            return value
        }
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct CreateEndpointAccessOutput: Swift.Equatable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: ClientRuntime.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

enum CreateEndpointAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccessToClusterDenied": return try await AccessToClusterDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointAlreadyExists": return try await EndpointAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointsPerAuthorizationLimitExceeded": return try await EndpointsPerAuthorizationLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointsPerClusterLimitExceeded": return try await EndpointsPerClusterLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateEventSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case eventCategories = "EventCategories"
        case severity = "Severity"
        case snsTopicArn = "SnsTopicArn"
        case sourceIds = "SourceIds"
        case sourceType = "SourceType"
        case subscriptionName = "SubscriptionName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIds = sourceIds {
            if !sourceIds.isEmpty {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                for (index0, string0) in sourceIds.enumerated() {
                    try sourceIdsContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                try sourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateEventSubscriptionInput {

    static func urlPathProvider(_ value: CreateEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateEventSubscriptionInput: Swift.Equatable {
    /// A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    /// This member is required.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the event subscription to be created. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var subscriptionName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}

extension CreateEventSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateEventSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateEventSubscriptionResult"]
            var value = CreateEventSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RedshiftClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct CreateEventSubscriptionOutput: Swift.Equatable {
    /// Describes event subscriptions.
    public var eventSubscription: RedshiftClientTypes.EventSubscription?

    public init(
        eventSubscription: RedshiftClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum CreateEventSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "EventSubscriptionQuotaExceeded": return try await EventSubscriptionQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSInvalidTopic": return try await SNSInvalidTopicFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSNoAuthorization": return try await SNSNoAuthorizationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSTopicArnNotFound": return try await SNSTopicArnNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SourceNotFound": return try await SourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionAlreadyExist": return try await SubscriptionAlreadyExistFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionCategoryNotFound": return try await SubscriptionCategoryNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionEventIdNotFound": return try await SubscriptionEventIdNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionSeverityNotFound": return try await SubscriptionSeverityNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateHsmClientCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateHsmClientCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateHsmClientCertificateInput {

    static func urlPathProvider(_ value: CreateHsmClientCertificateInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateHsmClientCertificateInput: Swift.Equatable {
    /// The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
    /// This member is required.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.tags = tags
    }
}

extension CreateHsmClientCertificateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateHsmClientCertificateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateHsmClientCertificateResult"]
            var value = CreateHsmClientCertificateOutput()
            value.hsmClientCertificate = try reader["HsmClientCertificate"].readIfPresent(readingClosure: RedshiftClientTypes.HsmClientCertificate.readingClosure)
            return value
        }
    }
}

public struct CreateHsmClientCertificateOutput: Swift.Equatable {
    /// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
    public var hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate?

    public init(
        hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate? = nil
    )
    {
        self.hsmClientCertificate = hsmClientCertificate
    }
}

enum CreateHsmClientCertificateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HsmClientCertificateAlreadyExistsFault": return try await HsmClientCertificateAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmClientCertificateQuotaExceededFault": return try await HsmClientCertificateQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateHsmConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case hsmIpAddress = "HsmIpAddress"
        case hsmPartitionName = "HsmPartitionName"
        case hsmPartitionPassword = "HsmPartitionPassword"
        case hsmServerPublicCertificate = "HsmServerPublicCertificate"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let hsmIpAddress = hsmIpAddress {
            try container.encode(hsmIpAddress, forKey: ClientRuntime.Key("HsmIpAddress"))
        }
        if let hsmPartitionName = hsmPartitionName {
            try container.encode(hsmPartitionName, forKey: ClientRuntime.Key("HsmPartitionName"))
        }
        if let hsmPartitionPassword = hsmPartitionPassword {
            try container.encode(hsmPartitionPassword, forKey: ClientRuntime.Key("HsmPartitionPassword"))
        }
        if let hsmServerPublicCertificate = hsmServerPublicCertificate {
            try container.encode(hsmServerPublicCertificate, forKey: ClientRuntime.Key("HsmServerPublicCertificate"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateHsmConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateHsmConfigurationInput {

    static func urlPathProvider(_ value: CreateHsmConfigurationInput) -> Swift.String? {
        return "/"
    }
}

///
public struct CreateHsmConfigurationInput: Swift.Equatable {
    /// A text description of the HSM configuration to be created.
    /// This member is required.
    public var description: Swift.String?
    /// The identifier to be assigned to the new Amazon Redshift HSM configuration.
    /// This member is required.
    public var hsmConfigurationIdentifier: Swift.String?
    /// The IP address that the Amazon Redshift cluster must use to access the HSM.
    /// This member is required.
    public var hsmIpAddress: Swift.String?
    /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
    /// This member is required.
    public var hsmPartitionName: Swift.String?
    /// The password required to access the HSM partition.
    /// This member is required.
    public var hsmPartitionPassword: Swift.String?
    /// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
    /// This member is required.
    public var hsmServerPublicCertificate: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        hsmIpAddress: Swift.String? = nil,
        hsmPartitionName: Swift.String? = nil,
        hsmPartitionPassword: Swift.String? = nil,
        hsmServerPublicCertificate: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.hsmIpAddress = hsmIpAddress
        self.hsmPartitionName = hsmPartitionName
        self.hsmPartitionPassword = hsmPartitionPassword
        self.hsmServerPublicCertificate = hsmServerPublicCertificate
        self.tags = tags
    }
}

extension CreateHsmConfigurationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateHsmConfigurationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateHsmConfigurationResult"]
            var value = CreateHsmConfigurationOutput()
            value.hsmConfiguration = try reader["HsmConfiguration"].readIfPresent(readingClosure: RedshiftClientTypes.HsmConfiguration.readingClosure)
            return value
        }
    }
}

public struct CreateHsmConfigurationOutput: Swift.Equatable {
    /// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
    public var hsmConfiguration: RedshiftClientTypes.HsmConfiguration?

    public init(
        hsmConfiguration: RedshiftClientTypes.HsmConfiguration? = nil
    )
    {
        self.hsmConfiguration = hsmConfiguration
    }
}

enum CreateHsmConfigurationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HsmConfigurationAlreadyExistsFault": return try await HsmConfigurationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmConfigurationQuotaExceededFault": return try await HsmConfigurationQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateRedshiftIdcApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedTokenIssuerList = "AuthorizedTokenIssuerList"
        case iamRoleArn = "IamRoleArn"
        case idcDisplayName = "IdcDisplayName"
        case idcInstanceArn = "IdcInstanceArn"
        case identityNamespace = "IdentityNamespace"
        case redshiftIdcApplicationName = "RedshiftIdcApplicationName"
        case serviceIntegrations = "ServiceIntegrations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedTokenIssuerList = authorizedTokenIssuerList {
            if !authorizedTokenIssuerList.isEmpty {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                for (index0, authorizedtokenissuer0) in authorizedTokenIssuerList.enumerated() {
                    try authorizedTokenIssuerListContainer.encode(authorizedtokenissuer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                try authorizedTokenIssuerListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let idcDisplayName = idcDisplayName {
            try container.encode(idcDisplayName, forKey: ClientRuntime.Key("IdcDisplayName"))
        }
        if let idcInstanceArn = idcInstanceArn {
            try container.encode(idcInstanceArn, forKey: ClientRuntime.Key("IdcInstanceArn"))
        }
        if let identityNamespace = identityNamespace {
            try container.encode(identityNamespace, forKey: ClientRuntime.Key("IdentityNamespace"))
        }
        if let redshiftIdcApplicationName = redshiftIdcApplicationName {
            try container.encode(redshiftIdcApplicationName, forKey: ClientRuntime.Key("RedshiftIdcApplicationName"))
        }
        if let serviceIntegrations = serviceIntegrations {
            if !serviceIntegrations.isEmpty {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                for (index0, serviceintegrationsunion0) in serviceIntegrations.enumerated() {
                    try serviceIntegrationsContainer.encode(serviceintegrationsunion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                try serviceIntegrationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateRedshiftIdcApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateRedshiftIdcApplicationInput {

    static func urlPathProvider(_ value: CreateRedshiftIdcApplicationInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateRedshiftIdcApplicationInput: Swift.Equatable {
    /// The token issuer list for the Amazon Redshift IAM Identity Center application instance.
    public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    /// The IAM role ARN for the Amazon Redshift IAM Identity Center application instance. It has the required permissions to be assumed and invoke the IDC Identity Center API.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// The display name for the Amazon Redshift IAM Identity Center application instance. It appears in the console.
    /// This member is required.
    public var idcDisplayName: Swift.String?
    /// The Amazon resource name (ARN) of the IAM Identity Center instance where Amazon Redshift creates a new managed application.
    /// This member is required.
    public var idcInstanceArn: Swift.String?
    /// The namespace for the Amazon Redshift IAM Identity Center application instance. It determines which managed application verifies the connection token.
    public var identityNamespace: Swift.String?
    /// The name of the Redshift application in IAM Identity Center.
    /// This member is required.
    public var redshiftIdcApplicationName: Swift.String?
    /// A collection of service integrations for the Redshift IAM Identity Center application.
    public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

    public init(
        authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
        iamRoleArn: Swift.String? = nil,
        idcDisplayName: Swift.String? = nil,
        idcInstanceArn: Swift.String? = nil,
        identityNamespace: Swift.String? = nil,
        redshiftIdcApplicationName: Swift.String? = nil,
        serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
    )
    {
        self.authorizedTokenIssuerList = authorizedTokenIssuerList
        self.iamRoleArn = iamRoleArn
        self.idcDisplayName = idcDisplayName
        self.idcInstanceArn = idcInstanceArn
        self.identityNamespace = identityNamespace
        self.redshiftIdcApplicationName = redshiftIdcApplicationName
        self.serviceIntegrations = serviceIntegrations
    }
}

extension CreateRedshiftIdcApplicationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateRedshiftIdcApplicationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateRedshiftIdcApplicationResult"]
            var value = CreateRedshiftIdcApplicationOutput()
            value.redshiftIdcApplication = try reader["RedshiftIdcApplication"].readIfPresent(readingClosure: RedshiftClientTypes.RedshiftIdcApplication.readingClosure)
            return value
        }
    }
}

public struct CreateRedshiftIdcApplicationOutput: Swift.Equatable {
    /// Contains properties for the Redshift IDC application.
    public var redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?

    public init(
        redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication? = nil
    )
    {
        self.redshiftIdcApplication = redshiftIdcApplication
    }
}

enum CreateRedshiftIdcApplicationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RedshiftIdcApplicationAlreadyExists": return try await RedshiftIdcApplicationAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RedshiftIdcApplicationQuotaExceeded": return try await RedshiftIdcApplicationQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateScheduledActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enable = "Enable"
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetAction = "TargetAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enable = enable {
            try container.encode(enable, forKey: ClientRuntime.Key("Enable"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let iamRole = iamRole {
            try container.encode(iamRole, forKey: ClientRuntime.Key("IamRole"))
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
        if let scheduledActionDescription = scheduledActionDescription {
            try container.encode(scheduledActionDescription, forKey: ClientRuntime.Key("ScheduledActionDescription"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let targetAction = targetAction {
            try container.encode(targetAction, forKey: ClientRuntime.Key("TargetAction"))
        }
        try container.encode("CreateScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateScheduledActionInput {

    static func urlPathProvider(_ value: CreateScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateScheduledActionInput: Swift.Equatable {
    /// If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about state of the scheduled action, see [ScheduledAction].
    public var enable: Swift.Bool?
    /// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var iamRole: Swift.String?
    /// The schedule in at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var startTime: ClientRuntime.Date?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        enable: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}

extension CreateScheduledActionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateScheduledActionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateScheduledActionResult"]
            var value = CreateScheduledActionOutput()
            value.endTime = try reader["EndTime"].readTimestampIfPresent(format: .dateTime)
            value.iamRole = try reader["IamRole"].readIfPresent()
            value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyXML.timestampReadingClosure(format: .dateTime), memberNodeInfo: "ScheduledActionTime", isFlattened: false)
            value.schedule = try reader["Schedule"].readIfPresent()
            value.scheduledActionDescription = try reader["ScheduledActionDescription"].readIfPresent()
            value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.state = try reader["State"].readIfPresent()
            value.targetAction = try reader["TargetAction"].readIfPresent(readingClosure: RedshiftClientTypes.ScheduledActionType.readingClosure)
            return value
        }
    }
}

/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
public struct CreateScheduledActionOutput: Swift.Equatable {
    /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRole: Swift.String?
    /// List of times when the scheduled action will run.
    public var nextInvocations: [ClientRuntime.Date]?
    /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
    public var startTime: ClientRuntime.Date?
    /// The state of the scheduled action. For example, DISABLED.
    public var state: RedshiftClientTypes.ScheduledActionState?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ds2.8xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        state: RedshiftClientTypes.ScheduledActionState? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.endTime = endTime
        self.iamRole = iamRole
        self.nextInvocations = nextInvocations
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.state = state
        self.targetAction = targetAction
    }
}

enum CreateScheduledActionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidScheduledAction": return try await InvalidScheduledActionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSchedule": return try await InvalidScheduleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ScheduledActionAlreadyExists": return try await ScheduledActionAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ScheduledActionQuotaExceeded": return try await ScheduledActionQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ScheduledActionTypeUnsupported": return try await ScheduledActionTypeUnsupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateSnapshotCopyGrantInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateSnapshotCopyGrant", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateSnapshotCopyGrantInput {

    static func urlPathProvider(_ value: CreateSnapshotCopyGrantInput) -> Swift.String? {
        return "/"
    }
}

/// The result of the CreateSnapshotCopyGrant action.
public struct CreateSnapshotCopyGrantInput: Swift.Equatable {
    /// The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
    public var kmsKeyId: Swift.String?
    /// The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    /// This member is required.
    public var snapshotCopyGrantName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        kmsKeyId: Swift.String? = nil,
        snapshotCopyGrantName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.snapshotCopyGrantName = snapshotCopyGrantName
        self.tags = tags
    }
}

extension CreateSnapshotCopyGrantOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateSnapshotCopyGrantOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateSnapshotCopyGrantResult"]
            var value = CreateSnapshotCopyGrantOutput()
            value.snapshotCopyGrant = try reader["SnapshotCopyGrant"].readIfPresent(readingClosure: RedshiftClientTypes.SnapshotCopyGrant.readingClosure)
            return value
        }
    }
}

public struct CreateSnapshotCopyGrantOutput: Swift.Equatable {
    /// The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region. For more information about managing snapshot copy grants, go to [Amazon Redshift Database Encryption](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html) in the Amazon Redshift Cluster Management Guide.
    public var snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant?

    public init(
        snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant? = nil
    )
    {
        self.snapshotCopyGrant = snapshotCopyGrant
    }
}

enum CreateSnapshotCopyGrantOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyGrantAlreadyExistsFault": return try await SnapshotCopyGrantAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyGrantQuotaExceededFault": return try await SnapshotCopyGrantQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateSnapshotScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case nextInvocations = "NextInvocations"
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleDescription = "ScheduleDescription"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let nextInvocations = nextInvocations {
            try container.encode(nextInvocations, forKey: ClientRuntime.Key("NextInvocations"))
        }
        if let scheduleDefinitions = scheduleDefinitions {
            if !scheduleDefinitions.isEmpty {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                for (index0, string0) in scheduleDefinitions.enumerated() {
                    try scheduleDefinitionsContainer.encode(string0, forKey: ClientRuntime.Key("ScheduleDefinition.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                try scheduleDefinitionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleDescription = scheduleDescription {
            try container.encode(scheduleDescription, forKey: ClientRuntime.Key("ScheduleDescription"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateSnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateSnapshotScheduleInput {

    static func urlPathProvider(_ value: CreateSnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateSnapshotScheduleInput: Swift.Equatable {
    ///
    public var dryRun: Swift.Bool?
    ///
    public var nextInvocations: Swift.Int?
    /// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)".
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the snapshot schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags you can use to search for the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        dryRun: Swift.Bool? = nil,
        nextInvocations: Swift.Int? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.dryRun = dryRun
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

extension CreateSnapshotScheduleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateSnapshotScheduleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateSnapshotScheduleResult"]
            var value = CreateSnapshotScheduleOutput()
            value.associatedClusterCount = try reader["AssociatedClusterCount"].readIfPresent()
            value.associatedClusters = try reader["AssociatedClusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterAssociatedToSchedule.readingClosure, memberNodeInfo: "ClusterAssociatedToSchedule", isFlattened: false)
            value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyXML.timestampReadingClosure(format: .dateTime), memberNodeInfo: "SnapshotTime", isFlattened: false)
            value.scheduleDefinitions = try reader["ScheduleDefinitions"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "ScheduleDefinition", isFlattened: false)
            value.scheduleDescription = try reader["ScheduleDescription"].readIfPresent()
            value.scheduleIdentifier = try reader["ScheduleIdentifier"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
public struct CreateSnapshotScheduleOutput: Swift.Equatable {
    /// The number of clusters associated with the schedule.
    public var associatedClusterCount: Swift.Int?
    /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
    public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
    ///
    public var nextInvocations: [ClientRuntime.Date]?
    /// A list of ScheduleDefinitions.
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for the schedule.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags describing the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        associatedClusterCount: Swift.Int? = nil,
        associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.associatedClusterCount = associatedClusterCount
        self.associatedClusters = associatedClusters
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

enum CreateSnapshotScheduleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidSchedule": return try await InvalidScheduleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ScheduleDefinitionTypeUnsupported": return try await ScheduleDefinitionTypeUnsupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleAlreadyExists": return try await SnapshotScheduleAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleQuotaExceeded": return try await SnapshotScheduleQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTagsInput {

    static func urlPathProvider(_ value: CreateTagsInput) -> Swift.String? {
        return "/"
    }
}

/// Contains the output from the CreateTags action.
public struct CreateTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    /// This member is required.
    public var resourceName: Swift.String?
    /// One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter Key and the corresponding value is passed in with the parameter Value. The Key and Value parameters are separated by a comma (,). Separate multiple tags with a space. For example, --tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0".
    /// This member is required.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        resourceName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

extension CreateTagsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateTagsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CreateTagsOutput()
        }
    }
}

public struct CreateTagsOutput: Swift.Equatable {

    public init() { }
}

enum CreateTagsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateUsageLimitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amount = amount {
            try container.encode(amount, forKey: ClientRuntime.Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: ClientRuntime.Key("BreachAction"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: ClientRuntime.Key("FeatureType"))
        }
        if let limitType = limitType {
            try container.encode(limitType, forKey: ClientRuntime.Key("LimitType"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateUsageLimit", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateUsageLimitInput {

    static func urlPathProvider(_ value: CreateUsageLimitInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateUsageLimitInput: Swift.Equatable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
    /// This member is required.
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. The default is log. For more information about this parameter, see [UsageLimit].
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster that you want to limit usage.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature that you want to limit.
    /// This member is required.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned.
    /// This member is required.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
    }
}

extension CreateUsageLimitOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateUsageLimitOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateUsageLimitResult"]
            var value = CreateUsageLimitOutput()
            value.amount = try reader["Amount"].readIfPresent()
            value.breachAction = try reader["BreachAction"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.featureType = try reader["FeatureType"].readIfPresent()
            value.limitType = try reader["LimitType"].readIfPresent()
            value.period = try reader["Period"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.usageLimitId = try reader["UsageLimitId"].readIfPresent()
            return value
        }
    }
}

/// Describes a usage limit object for a cluster.
public struct CreateUsageLimitOutput: Swift.Equatable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
    ///
    /// * log - To log an event in a system table. The default is log.
    ///
    /// * emit-metric - To emit CloudWatch metrics.
    ///
    /// * disable - To disable the feature until the next usage period begins.
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster with a usage limit.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature to which the limit applies.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The identifier of the usage limit.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
        self.usageLimitId = usageLimitId
    }
}

enum CreateUsageLimitOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidUsageLimit": return try await InvalidUsageLimitFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UsageLimitAlreadyExists": return try await UsageLimitAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CustomCnameAssociationFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomCnameAssociationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An error occurred when an attempt was made to change the custom domain association.
public struct CustomCnameAssociationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomCnameAssociationFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CustomDomainAssociationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CustomDomainAssociationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An error occurred. The custom domain name couldn't be found.
public struct CustomDomainAssociationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomDomainAssociationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.DataShare: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers {
            try container.encode(allowPubliclyAccessibleConsumers, forKey: ClientRuntime.Key("AllowPubliclyAccessibleConsumers"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        if let dataShareAssociations = dataShareAssociations {
            if !dataShareAssociations.isEmpty {
                var dataShareAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DataShareAssociations"))
                for (index0, datashareassociation0) in dataShareAssociations.enumerated() {
                    try dataShareAssociationsContainer.encode(datashareassociation0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dataShareAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DataShareAssociations"))
                try dataShareAssociationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let managedBy = managedBy {
            try container.encode(managedBy, forKey: ClientRuntime.Key("ManagedBy"))
        }
        if let producerArn = producerArn {
            try container.encode(producerArn, forKey: ClientRuntime.Key("ProducerArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.DataShare, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.DataShare()
            value.dataShareArn = try reader["DataShareArn"].readIfPresent()
            value.producerArn = try reader["ProducerArn"].readIfPresent()
            value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
            value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedBy = try reader["ManagedBy"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    public struct DataShare: Swift.Equatable {
        /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
        public var allowPubliclyAccessibleConsumers: Swift.Bool?
        /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
        public var dataShareArn: Swift.String?
        /// A value that specifies when the datashare has an association between producer and data consumers.
        public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
        /// The identifier of a datashare to show its managing entity.
        public var managedBy: Swift.String?
        /// The Amazon Resource Name (ARN) of the producer.
        public var producerArn: Swift.String?

        public init(
            allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
            dataShareArn: Swift.String? = nil,
            dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
            managedBy: Swift.String? = nil,
            producerArn: Swift.String? = nil
        )
        {
            self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
            self.dataShareArn = dataShareArn
            self.dataShareAssociations = dataShareAssociations
            self.managedBy = managedBy
            self.producerArn = producerArn
        }
    }

}

extension RedshiftClientTypes.DataShareAssociation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerAcceptedWrites = "ConsumerAcceptedWrites"
        case consumerIdentifier = "ConsumerIdentifier"
        case consumerRegion = "ConsumerRegion"
        case createdDate = "CreatedDate"
        case producerAllowedWrites = "ProducerAllowedWrites"
        case status = "Status"
        case statusChangeDate = "StatusChangeDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerAcceptedWrites = consumerAcceptedWrites {
            try container.encode(consumerAcceptedWrites, forKey: ClientRuntime.Key("ConsumerAcceptedWrites"))
        }
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let createdDate = createdDate {
            try container.encodeTimestamp(createdDate, format: .dateTime, forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let producerAllowedWrites = producerAllowedWrites {
            try container.encode(producerAllowedWrites, forKey: ClientRuntime.Key("ProducerAllowedWrites"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusChangeDate = statusChangeDate {
            try container.encodeTimestamp(statusChangeDate, format: .dateTime, forKey: ClientRuntime.Key("StatusChangeDate"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.DataShareAssociation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.DataShareAssociation()
            value.consumerIdentifier = try reader["ConsumerIdentifier"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.consumerRegion = try reader["ConsumerRegion"].readIfPresent()
            value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: .dateTime)
            value.statusChangeDate = try reader["StatusChangeDate"].readTimestampIfPresent(format: .dateTime)
            value.producerAllowedWrites = try reader["ProducerAllowedWrites"].readIfPresent()
            value.consumerAcceptedWrites = try reader["ConsumerAcceptedWrites"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The association of a datashare from a producer account with a data consumer.
    public struct DataShareAssociation: Swift.Equatable {
        /// Specifies whether write operations were allowed during data share association.
        public var consumerAcceptedWrites: Swift.Bool?
        /// The name of the consumer accounts that have an association with a producer datashare.
        public var consumerIdentifier: Swift.String?
        /// The Amazon Web Services Region of the consumer accounts that have an association with a producer datashare.
        public var consumerRegion: Swift.String?
        /// The creation date of the datashare that is associated.
        public var createdDate: ClientRuntime.Date?
        /// Specifies whether write operations were allowed during data share authorization.
        public var producerAllowedWrites: Swift.Bool?
        /// The status of the datashare that is associated.
        public var status: RedshiftClientTypes.DataShareStatus?
        /// The status change data of the datashare that is associated.
        public var statusChangeDate: ClientRuntime.Date?

        public init(
            consumerAcceptedWrites: Swift.Bool? = nil,
            consumerIdentifier: Swift.String? = nil,
            consumerRegion: Swift.String? = nil,
            createdDate: ClientRuntime.Date? = nil,
            producerAllowedWrites: Swift.Bool? = nil,
            status: RedshiftClientTypes.DataShareStatus? = nil,
            statusChangeDate: ClientRuntime.Date? = nil
        )
        {
            self.consumerAcceptedWrites = consumerAcceptedWrites
            self.consumerIdentifier = consumerIdentifier
            self.consumerRegion = consumerRegion
            self.createdDate = createdDate
            self.producerAllowedWrites = producerAllowedWrites
            self.status = status
            self.statusChangeDate = statusChangeDate
        }
    }

}

extension RedshiftClientTypes {
    public enum DataShareStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case authorized
        case available
        case deauthorized
        case pendingAuthorization
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatus] {
            return [
                .active,
                .authorized,
                .available,
                .deauthorized,
                .pendingAuthorization,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .authorized: return "AUTHORIZED"
            case .available: return "AVAILABLE"
            case .deauthorized: return "DEAUTHORIZED"
            case .pendingAuthorization: return "PENDING_AUTHORIZATION"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataShareStatus(rawValue: rawValue) ?? DataShareStatus.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum DataShareStatusForConsumer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case available
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatusForConsumer] {
            return [
                .active,
                .available,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .available: return "AVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataShareStatusForConsumer(rawValue: rawValue) ?? DataShareStatusForConsumer.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum DataShareStatusForProducer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case authorized
        case deauthorized
        case pendingAuthorization
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatusForProducer] {
            return [
                .active,
                .authorized,
                .deauthorized,
                .pendingAuthorization,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .authorized: return "AUTHORIZED"
            case .deauthorized: return "DEAUTHORIZED"
            case .pendingAuthorization: return "PENDING_AUTHORIZATION"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataShareStatusForProducer(rawValue: rawValue) ?? DataShareStatusForProducer.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.DataTransferProgress: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentRateInMegaBytesPerSecond = "CurrentRateInMegaBytesPerSecond"
        case dataTransferredInMegaBytes = "DataTransferredInMegaBytes"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case status = "Status"
        case totalDataInMegaBytes = "TotalDataInMegaBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond {
            try container.encode(currentRateInMegaBytesPerSecond, forKey: ClientRuntime.Key("CurrentRateInMegaBytesPerSecond"))
        }
        if let dataTransferredInMegaBytes = dataTransferredInMegaBytes {
            try container.encode(dataTransferredInMegaBytes, forKey: ClientRuntime.Key("DataTransferredInMegaBytes"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: ClientRuntime.Key("ElapsedTimeInSeconds"))
        }
        if let estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds {
            try container.encode(estimatedTimeToCompletionInSeconds, forKey: ClientRuntime.Key("EstimatedTimeToCompletionInSeconds"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let totalDataInMegaBytes = totalDataInMegaBytes {
            try container.encode(totalDataInMegaBytes, forKey: ClientRuntime.Key("TotalDataInMegaBytes"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.DataTransferProgress, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.DataTransferProgress()
            value.status = try reader["Status"].readIfPresent()
            value.currentRateInMegaBytesPerSecond = try reader["CurrentRateInMegaBytesPerSecond"].readIfPresent()
            value.totalDataInMegaBytes = try reader["TotalDataInMegaBytes"].readIfPresent()
            value.dataTransferredInMegaBytes = try reader["DataTransferredInMegaBytes"].readIfPresent()
            value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
            value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a cluster while it is in the process of resizing with an incremental resize.
    public struct DataTransferProgress: Swift.Equatable {
        /// Describes the data transfer rate in MB's per second.
        public var currentRateInMegaBytesPerSecond: Swift.Double?
        /// Describes the total amount of data that has been transfered in MB's.
        public var dataTransferredInMegaBytes: Swift.Int?
        /// Describes the number of seconds that have elapsed during the data transfer.
        public var elapsedTimeInSeconds: Swift.Int?
        /// Describes the estimated number of seconds remaining to complete the transfer.
        public var estimatedTimeToCompletionInSeconds: Swift.Int?
        /// Describes the status of the cluster. While the transfer is in progress the status is transferringdata.
        public var status: Swift.String?
        /// Describes the total amount of data to be transfered in megabytes.
        public var totalDataInMegaBytes: Swift.Int?

        public init(
            currentRateInMegaBytesPerSecond: Swift.Double? = nil,
            dataTransferredInMegaBytes: Swift.Int? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
            status: Swift.String? = nil,
            totalDataInMegaBytes: Swift.Int? = nil
        )
        {
            self.currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond
            self.dataTransferredInMegaBytes = dataTransferredInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.status = status
            self.totalDataInMegaBytes = totalDataInMegaBytes
        }
    }

}

extension DeauthorizeDataShareInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerIdentifier = "ConsumerIdentifier"
        case dataShareArn = "DataShareArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("DeauthorizeDataShare", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeauthorizeDataShareInput {

    static func urlPathProvider(_ value: DeauthorizeDataShareInput) -> Swift.String? {
        return "/"
    }
}

public struct DeauthorizeDataShareInput: Swift.Equatable {
    /// The identifier of the data consumer that is to have authorization removed from the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
    /// This member is required.
    public var consumerIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare to remove authorization from.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        consumerIdentifier: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.consumerIdentifier = consumerIdentifier
        self.dataShareArn = dataShareArn
    }
}

extension DeauthorizeDataShareOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeauthorizeDataShareOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeauthorizeDataShareResult"]
            var value = DeauthorizeDataShareOutput()
            value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
            value.dataShareArn = try reader["DataShareArn"].readIfPresent()
            value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedBy = try reader["ManagedBy"].readIfPresent()
            value.producerArn = try reader["ProducerArn"].readIfPresent()
            return value
        }
    }
}

public struct DeauthorizeDataShareOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

enum DeauthorizeDataShareOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDataShareFault": return try await InvalidDataShareFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.DefaultClusterParameters: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case parameterGroupFamily = "ParameterGroupFamily"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.DefaultClusterParameters, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.DefaultClusterParameters()
            value.parameterGroupFamily = try reader["ParameterGroupFamily"].readIfPresent()
            value.marker = try reader["Marker"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Parameter.readingClosure, memberNodeInfo: "Parameter", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the default cluster parameters for a parameter group family.
    public struct DefaultClusterParameters: Swift.Equatable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
        public var marker: Swift.String?
        /// The name of the cluster parameter group family to which the engine default parameters apply.
        public var parameterGroupFamily: Swift.String?
        /// The list of cluster default parameters.
        public var parameters: [RedshiftClientTypes.Parameter]?

        public init(
            marker: Swift.String? = nil,
            parameterGroupFamily: Swift.String? = nil,
            parameters: [RedshiftClientTypes.Parameter]? = nil
        )
        {
            self.marker = marker
            self.parameterGroupFamily = parameterGroupFamily
            self.parameters = parameters
        }
    }

}

extension RedshiftClientTypes.DeferredMaintenanceWindow: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deferMaintenanceEndTime = deferMaintenanceEndTime {
            try container.encodeTimestamp(deferMaintenanceEndTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceEndTime"))
        }
        if let deferMaintenanceIdentifier = deferMaintenanceIdentifier {
            try container.encode(deferMaintenanceIdentifier, forKey: ClientRuntime.Key("DeferMaintenanceIdentifier"))
        }
        if let deferMaintenanceStartTime = deferMaintenanceStartTime {
            try container.encodeTimestamp(deferMaintenanceStartTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceStartTime"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.DeferredMaintenanceWindow, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.DeferredMaintenanceWindow()
            value.deferMaintenanceIdentifier = try reader["DeferMaintenanceIdentifier"].readIfPresent()
            value.deferMaintenanceStartTime = try reader["DeferMaintenanceStartTime"].readTimestampIfPresent(format: .dateTime)
            value.deferMaintenanceEndTime = try reader["DeferMaintenanceEndTime"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a deferred maintenance window
    public struct DeferredMaintenanceWindow: Swift.Equatable {
        /// A timestamp for the end of the time period when we defer maintenance.
        public var deferMaintenanceEndTime: ClientRuntime.Date?
        /// A unique identifier for the maintenance window.
        public var deferMaintenanceIdentifier: Swift.String?
        /// A timestamp for the beginning of the time period when we defer maintenance.
        public var deferMaintenanceStartTime: ClientRuntime.Date?

        public init(
            deferMaintenanceEndTime: ClientRuntime.Date? = nil,
            deferMaintenanceIdentifier: Swift.String? = nil,
            deferMaintenanceStartTime: ClientRuntime.Date? = nil
        )
        {
            self.deferMaintenanceEndTime = deferMaintenanceEndTime
            self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
            self.deferMaintenanceStartTime = deferMaintenanceStartTime
        }
    }

}

extension DeleteAuthenticationProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("DeleteAuthenticationProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAuthenticationProfileInput {

    static func urlPathProvider(_ value: DeleteAuthenticationProfileInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteAuthenticationProfileInput: Swift.Equatable {
    /// The name of the authentication profile to delete.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

extension DeleteAuthenticationProfileOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteAuthenticationProfileOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteAuthenticationProfileResult"]
            var value = DeleteAuthenticationProfileOutput()
            value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
            return value
        }
    }
}

public struct DeleteAuthenticationProfileOutput: Swift.Equatable {
    /// The name of the authentication profile that was deleted.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

enum DeleteAuthenticationProfileOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthenticationProfileNotFoundFault": return try await AuthenticationProfileNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case finalClusterSnapshotIdentifier = "FinalClusterSnapshotIdentifier"
        case finalClusterSnapshotRetentionPeriod = "FinalClusterSnapshotRetentionPeriod"
        case skipFinalClusterSnapshot = "SkipFinalClusterSnapshot"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier {
            try container.encode(finalClusterSnapshotIdentifier, forKey: ClientRuntime.Key("FinalClusterSnapshotIdentifier"))
        }
        if let finalClusterSnapshotRetentionPeriod = finalClusterSnapshotRetentionPeriod {
            try container.encode(finalClusterSnapshotRetentionPeriod, forKey: ClientRuntime.Key("FinalClusterSnapshotRetentionPeriod"))
        }
        if let skipFinalClusterSnapshot = skipFinalClusterSnapshot {
            try container.encode(skipFinalClusterSnapshot, forKey: ClientRuntime.Key("SkipFinalClusterSnapshot"))
        }
        try container.encode("DeleteCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterInput: Swift.Equatable {
    /// The identifier of the cluster to be deleted. Constraints:
    ///
    /// * Must contain lowercase characters.
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, SkipFinalClusterSnapshot must be false. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var finalClusterSnapshotIdentifier: Swift.String?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var finalClusterSnapshotRetentionPeriod: Swift.Int?
    /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is not created. If false, a final cluster snapshot is created before the cluster is deleted. The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot is false. Default: false
    public var skipFinalClusterSnapshot: Swift.Bool?

    public init(
        clusterIdentifier: Swift.String? = nil,
        finalClusterSnapshotIdentifier: Swift.String? = nil,
        finalClusterSnapshotRetentionPeriod: Swift.Int? = nil,
        skipFinalClusterSnapshot: Swift.Bool? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier
        self.finalClusterSnapshotRetentionPeriod = finalClusterSnapshotRetentionPeriod
        self.skipFinalClusterSnapshot = skipFinalClusterSnapshot
    }
}

extension DeleteClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteClusterResult"]
            var value = DeleteClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct DeleteClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum DeleteClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotAlreadyExists": return try await ClusterSnapshotAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotQuotaExceeded": return try await ClusterSnapshotQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        try container.encode("DeleteClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterParameterGroupInput {

    static func urlPathProvider(_ value: DeleteClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterParameterGroupInput: Swift.Equatable {
    /// The name of the parameter group to be deleted. Constraints:
    ///
    /// * Must be the name of an existing cluster parameter group.
    ///
    /// * Cannot delete a default cluster parameter group.
    /// This member is required.
    public var parameterGroupName: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
    }
}

extension DeleteClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteClusterParameterGroupOutput()
        }
    }
}

public struct DeleteClusterParameterGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterParameterGroupState": return try await InvalidClusterParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteClusterSecurityGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        try container.encode("DeleteClusterSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterSecurityGroupInput {

    static func urlPathProvider(_ value: DeleteClusterSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterSecurityGroupInput: Swift.Equatable {
    /// The name of the cluster security group to be deleted.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?

    public init(
        clusterSecurityGroupName: Swift.String? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
    }
}

extension DeleteClusterSecurityGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteClusterSecurityGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteClusterSecurityGroupOutput()
        }
    }
}

public struct DeleteClusterSecurityGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteClusterSecurityGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("DeleteClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterSnapshotInput {

    static func urlPathProvider(_ value: DeleteClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterSnapshotInput: Swift.Equatable {
    /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
    public var snapshotClusterIdentifier: Swift.String?
    /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available, failed, or cancelled state.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?

    public init(
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension RedshiftClientTypes.DeleteClusterSnapshotMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.DeleteClusterSnapshotMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.DeleteClusterSnapshotMessage()
            value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
            value.snapshotClusterIdentifier = try reader["SnapshotClusterIdentifier"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    ///
    public struct DeleteClusterSnapshotMessage: Swift.Equatable {
        /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
        public var snapshotClusterIdentifier: Swift.String?
        /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available, failed, or cancelled state.
        /// This member is required.
        public var snapshotIdentifier: Swift.String?

        public init(
            snapshotClusterIdentifier: Swift.String? = nil,
            snapshotIdentifier: Swift.String? = nil
        )
        {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }
    }

}

extension DeleteClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteClusterSnapshotResult"]
            var value = DeleteClusterSnapshotOutput()
            value.snapshot = try reader["Snapshot"].readIfPresent(readingClosure: RedshiftClientTypes.Snapshot.readingClosure)
            return value
        }
    }
}

public struct DeleteClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

enum DeleteClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteClusterSubnetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        try container.encode("DeleteClusterSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterSubnetGroupInput {

    static func urlPathProvider(_ value: DeleteClusterSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterSubnetGroupInput: Swift.Equatable {
    /// The name of the cluster subnet group name to be deleted.
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?

    public init(
        clusterSubnetGroupName: Swift.String? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
    }
}

extension DeleteClusterSubnetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteClusterSubnetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteClusterSubnetGroupOutput()
        }
    }
}

public struct DeleteClusterSubnetGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteClusterSubnetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSubnetGroupStateFault": return try await InvalidClusterSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSubnetStateFault": return try await InvalidClusterSubnetStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteCustomDomainAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        try container.encode("DeleteCustomDomainAssociation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCustomDomainAssociationInput {

    static func urlPathProvider(_ value: DeleteCustomDomainAssociationInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteCustomDomainAssociationInput: Swift.Equatable {
    /// The identifier of the cluster to delete a custom domain association for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
    }
}

extension DeleteCustomDomainAssociationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteCustomDomainAssociationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteCustomDomainAssociationOutput()
        }
    }
}

public struct DeleteCustomDomainAssociationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteCustomDomainAssociationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomDomainAssociationNotFoundFault": return try await CustomDomainAssociationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        try container.encode("DeleteEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteEndpointAccessInput {

    static func urlPathProvider(_ value: DeleteEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteEndpointAccessInput: Swift.Equatable {
    /// The Redshift-managed VPC endpoint to delete.
    /// This member is required.
    public var endpointName: Swift.String?

    public init(
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

extension DeleteEndpointAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteEndpointAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteEndpointAccessResult"]
            var value = DeleteEndpointAccessOutput()
            value.address = try reader["Address"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.endpointName = try reader["EndpointName"].readIfPresent()
            value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
            value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
            value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(readingClosure: RedshiftClientTypes.VpcEndpoint.readingClosure)
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
            return value
        }
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct DeleteEndpointAccessOutput: Swift.Equatable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: ClientRuntime.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

enum DeleteEndpointAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointNotFound": return try await EndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidEndpointState": return try await InvalidEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteEventSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("DeleteEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteEventSubscriptionInput {

    static func urlPathProvider(_ value: DeleteEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteEventSubscriptionInput: Swift.Equatable {
    /// The name of the Amazon Redshift event notification subscription to be deleted.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        subscriptionName: Swift.String? = nil
    )
    {
        self.subscriptionName = subscriptionName
    }
}

extension DeleteEventSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteEventSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteEventSubscriptionOutput()
        }
    }
}

public struct DeleteEventSubscriptionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteEventSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidSubscriptionStateFault": return try await InvalidSubscriptionStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteHsmClientCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        try container.encode("DeleteHsmClientCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteHsmClientCertificateInput {

    static func urlPathProvider(_ value: DeleteHsmClientCertificateInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteHsmClientCertificateInput: Swift.Equatable {
    /// The identifier of the HSM client certificate to be deleted.
    /// This member is required.
    public var hsmClientCertificateIdentifier: Swift.String?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
    }
}

extension DeleteHsmClientCertificateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteHsmClientCertificateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteHsmClientCertificateOutput()
        }
    }
}

public struct DeleteHsmClientCertificateOutput: Swift.Equatable {

    public init() { }
}

enum DeleteHsmClientCertificateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidHsmClientCertificateStateFault": return try await InvalidHsmClientCertificateStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteHsmConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        try container.encode("DeleteHsmConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteHsmConfigurationInput {

    static func urlPathProvider(_ value: DeleteHsmConfigurationInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DeleteHsmConfigurationInput: Swift.Equatable {
    /// The identifier of the Amazon Redshift HSM configuration to be deleted.
    /// This member is required.
    public var hsmConfigurationIdentifier: Swift.String?

    public init(
        hsmConfigurationIdentifier: Swift.String? = nil
    )
    {
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
    }
}

extension DeleteHsmConfigurationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteHsmConfigurationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteHsmConfigurationOutput()
        }
    }
}

public struct DeleteHsmConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteHsmConfigurationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidHsmConfigurationStateFault": return try await InvalidHsmConfigurationStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeletePartnerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        try container.encode("DeletePartner", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeletePartnerInput {

    static func urlPathProvider(_ value: DeletePartnerInput) -> Swift.String? {
        return "/"
    }
}

public struct DeletePartnerInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster that receives data from the partner.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database that receives data from the partner.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    /// This member is required.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

extension DeletePartnerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeletePartnerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeletePartnerResult"]
            var value = DeletePartnerOutput()
            value.databaseName = try reader["DatabaseName"].readIfPresent()
            value.partnerName = try reader["PartnerName"].readIfPresent()
            return value
        }
    }
}

public struct DeletePartnerOutput: Swift.Equatable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

enum DeletePartnerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "PartnerNotFound": return try await PartnerNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteRedshiftIdcApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        try container.encode("DeleteRedshiftIdcApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteRedshiftIdcApplicationInput {

    static func urlPathProvider(_ value: DeleteRedshiftIdcApplicationInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteRedshiftIdcApplicationInput: Swift.Equatable {
    /// The ARN for a deleted Amazon Redshift IAM Identity Center application.
    /// This member is required.
    public var redshiftIdcApplicationArn: Swift.String?

    public init(
        redshiftIdcApplicationArn: Swift.String? = nil
    )
    {
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
    }
}

extension DeleteRedshiftIdcApplicationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteRedshiftIdcApplicationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteRedshiftIdcApplicationOutput()
        }
    }
}

public struct DeleteRedshiftIdcApplicationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteRedshiftIdcApplicationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("DeleteResourcePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is deleted.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension DeleteResourcePolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteResourcePolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteResourcePolicyOutput()
        }
    }
}

public struct DeleteResourcePolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteResourcePolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteScheduledActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledActionName = "ScheduledActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        try container.encode("DeleteScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteScheduledActionInput {

    static func urlPathProvider(_ value: DeleteScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteScheduledActionInput: Swift.Equatable {
    /// The name of the scheduled action to delete.
    /// This member is required.
    public var scheduledActionName: Swift.String?

    public init(
        scheduledActionName: Swift.String? = nil
    )
    {
        self.scheduledActionName = scheduledActionName
    }
}

extension DeleteScheduledActionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteScheduledActionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteScheduledActionOutput()
        }
    }
}

public struct DeleteScheduledActionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteScheduledActionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ScheduledActionNotFound": return try await ScheduledActionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteSnapshotCopyGrantInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        try container.encode("DeleteSnapshotCopyGrant", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSnapshotCopyGrantInput {

    static func urlPathProvider(_ value: DeleteSnapshotCopyGrantInput) -> Swift.String? {
        return "/"
    }
}

/// The result of the DeleteSnapshotCopyGrant action.
public struct DeleteSnapshotCopyGrantInput: Swift.Equatable {
    /// The name of the snapshot copy grant to delete.
    /// This member is required.
    public var snapshotCopyGrantName: Swift.String?

    public init(
        snapshotCopyGrantName: Swift.String? = nil
    )
    {
        self.snapshotCopyGrantName = snapshotCopyGrantName
    }
}

extension DeleteSnapshotCopyGrantOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteSnapshotCopyGrantOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteSnapshotCopyGrantOutput()
        }
    }
}

public struct DeleteSnapshotCopyGrantOutput: Swift.Equatable {

    public init() { }
}

enum DeleteSnapshotCopyGrantOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidSnapshotCopyGrantStateFault": return try await InvalidSnapshotCopyGrantStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyGrantNotFoundFault": return try await SnapshotCopyGrantNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteSnapshotScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleIdentifier = "ScheduleIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        try container.encode("DeleteSnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSnapshotScheduleInput {

    static func urlPathProvider(_ value: DeleteSnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteSnapshotScheduleInput: Swift.Equatable {
    /// A unique identifier of the snapshot schedule to delete.
    /// This member is required.
    public var scheduleIdentifier: Swift.String?

    public init(
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.scheduleIdentifier = scheduleIdentifier
    }
}

extension DeleteSnapshotScheduleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteSnapshotScheduleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteSnapshotScheduleOutput()
        }
    }
}

public struct DeleteSnapshotScheduleOutput: Swift.Equatable {

    public init() { }
}

enum DeleteSnapshotScheduleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidClusterSnapshotScheduleState": return try await InvalidClusterSnapshotScheduleStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeleteTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTagsInput {

    static func urlPathProvider(_ value: DeleteTagsInput) -> Swift.String? {
        return "/"
    }
}

/// Contains the output from the DeleteTags action.
public struct DeleteTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key that you want to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

extension DeleteTagsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteTagsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteTagsOutput()
        }
    }
}

public struct DeleteTagsOutput: Swift.Equatable {

    public init() { }
}

enum DeleteTagsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteUsageLimitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case usageLimitId = "UsageLimitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
        try container.encode("DeleteUsageLimit", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUsageLimitInput {

    static func urlPathProvider(_ value: DeleteUsageLimitInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteUsageLimitInput: Swift.Equatable {
    /// The identifier of the usage limit to delete.
    /// This member is required.
    public var usageLimitId: Swift.String?

    public init(
        usageLimitId: Swift.String? = nil
    )
    {
        self.usageLimitId = usageLimitId
    }
}

extension DeleteUsageLimitOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteUsageLimitOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteUsageLimitOutput()
        }
    }
}

public struct DeleteUsageLimitOutput: Swift.Equatable {

    public init() { }
}

enum DeleteUsageLimitOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UsageLimitNotFound": return try await UsageLimitNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DependentServiceAccessDeniedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DependentServiceAccessDeniedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A dependent service denied access for the integration.
public struct DependentServiceAccessDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceAccessDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DependentServiceRequestThrottlingFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DependentServiceRequestThrottlingFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request cannot be completed because a dependent service is throttling requests made by Amazon Redshift on your behalf. Wait and retry the request.
public struct DependentServiceRequestThrottlingFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceRequestThrottlingFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DependentServiceUnavailableFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DependentServiceUnavailableFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Your request cannot be completed because a dependent internal service is temporarily unavailable. Wait 30 to 60 seconds and try again.
public struct DependentServiceUnavailableFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceUnavailableFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DescribeAccountAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                for (index0, string0) in attributeNames.enumerated() {
                    try attributeNamesContainer.encode(string0, forKey: ClientRuntime.Key("AttributeName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                try attributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeAccountAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountAttributesInput {

    static func urlPathProvider(_ value: DescribeAccountAttributesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeAccountAttributesInput: Swift.Equatable {
    /// A list of attribute names.
    public var attributeNames: [Swift.String]?

    public init(
        attributeNames: [Swift.String]? = nil
    )
    {
        self.attributeNames = attributeNames
    }
}

extension DescribeAccountAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeAccountAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeAccountAttributesResult"]
            var value = DescribeAccountAttributesOutput()
            value.accountAttributes = try reader["AccountAttributes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AccountAttribute.readingClosure, memberNodeInfo: "AccountAttribute", isFlattened: false)
            return value
        }
    }
}

public struct DescribeAccountAttributesOutput: Swift.Equatable {
    /// A list of attributes assigned to an account.
    public var accountAttributes: [RedshiftClientTypes.AccountAttribute]?

    public init(
        accountAttributes: [RedshiftClientTypes.AccountAttribute]? = nil
    )
    {
        self.accountAttributes = accountAttributes
    }
}

enum DescribeAccountAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeAuthenticationProfilesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("DescribeAuthenticationProfiles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAuthenticationProfilesInput {

    static func urlPathProvider(_ value: DescribeAuthenticationProfilesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeAuthenticationProfilesInput: Swift.Equatable {
    /// The name of the authentication profile to describe. If not specified then all authentication profiles owned by the account are listed.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

extension DescribeAuthenticationProfilesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeAuthenticationProfilesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeAuthenticationProfilesResult"]
            var value = DescribeAuthenticationProfilesOutput()
            value.authenticationProfiles = try reader["AuthenticationProfiles"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AuthenticationProfile.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeAuthenticationProfilesOutput: Swift.Equatable {
    /// The list of authentication profiles.
    public var authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]?

    public init(
        authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]? = nil
    )
    {
        self.authenticationProfiles = authenticationProfiles
    }
}

enum DescribeAuthenticationProfilesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthenticationProfileNotFoundFault": return try await AuthenticationProfileNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterDbRevisionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeClusterDbRevisions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterDbRevisionsInput {

    static func urlPathProvider(_ value: DescribeClusterDbRevisionsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeClusterDbRevisionsInput: Swift.Equatable {
    /// A unique identifier for a cluster whose ClusterDbRevisions you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
    public var clusterIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a DescribeClusterDbRevisions request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. Constraints: You can specify either the ClusterIdentifier parameter, or the marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeClusterDbRevisionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterDbRevisionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterDbRevisionsResult"]
            var value = DescribeClusterDbRevisionsOutput()
            value.clusterDbRevisions = try reader["ClusterDbRevisions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterDbRevision.readingClosure, memberNodeInfo: "ClusterDbRevision", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeClusterDbRevisionsOutput: Swift.Equatable {
    /// A list of revisions.
    public var clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]?
    /// A string representing the starting point for the next set of revisions. If a value is returned in a response, you can retrieve the next set of revisions by providing the value in the marker parameter and retrying the command. If the marker field is empty, all revisions have already been returned.
    public var marker: Swift.String?

    public init(
        clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterDbRevisions = clusterDbRevisions
        self.marker = marker
    }
}

enum DescribeClusterDbRevisionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterParameterGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case parameterGroupName = "ParameterGroupName"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterParameterGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeClusterParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterParameterGroupsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterParameterGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
    public var parameterGroupName: Swift.String?
    /// A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupName = parameterGroupName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeClusterParameterGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterParameterGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterParameterGroupsResult"]
            var value = DescribeClusterParameterGroupsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.parameterGroups = try reader["ParameterGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterParameterGroup.readingClosure, memberNodeInfo: "ClusterParameterGroup", isFlattened: false)
            return value
        }
    }
}

/// Contains the output from the [DescribeClusterParameterGroups] action.
public struct DescribeClusterParameterGroupsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [ClusterParameterGroup] instances. Each instance describes one cluster parameter group.
    public var parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]?

    public init(
        marker: Swift.String? = nil,
        parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]? = nil
    )
    {
        self.marker = marker
        self.parameterGroups = parameterGroups
    }
}

enum DescribeClusterParameterGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case parameterGroupName = "ParameterGroupName"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        try container.encode("DescribeClusterParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterParametersInput {

    static func urlPathProvider(_ value: DescribeClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterParametersInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterParameters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of a cluster parameter group for which to return details.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// The parameter types to return. Specify user to show parameters that are different form the default. Similarly, specify engine-default to show parameters that are the same as the default parameter group. Default: All parameter types returned. Valid Values: user | engine-default
    public var source: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupName: Swift.String? = nil,
        source: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupName = parameterGroupName
        self.source = source
    }
}

extension DescribeClusterParametersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterParametersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterParametersResult"]
            var value = DescribeClusterParametersOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Parameter.readingClosure, memberNodeInfo: "Parameter", isFlattened: false)
            return value
        }
    }
}

/// Contains the output from the [DescribeClusterParameters] action.
public struct DescribeClusterParametersOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [Parameter] instances. Each instance lists the parameters of one cluster parameter group.
    public var parameters: [RedshiftClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

enum DescribeClusterParametersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterSecurityGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterSecurityGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterSecurityGroupsInput {

    static func urlPathProvider(_ value: DescribeClusterSecurityGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterSecurityGroupsInput: Swift.Equatable {
    /// The name of a cluster security group for which you are requesting details. You must specify either the Marker parameter or a ClusterSecurityGroupName parameter, but not both. Example: securitygroup1
    public var clusterSecurityGroupName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSecurityGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You must specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterSecurityGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeClusterSecurityGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterSecurityGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterSecurityGroupsResult"]
            var value = DescribeClusterSecurityGroupsOutput()
            value.clusterSecurityGroups = try reader["ClusterSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterSecurityGroup.readingClosure, memberNodeInfo: "ClusterSecurityGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

///
public struct DescribeClusterSecurityGroupsOutput: Swift.Equatable {
    /// A list of [ClusterSecurityGroup] instances.
    public var clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterSecurityGroups = clusterSecurityGroups
        self.marker = marker
    }
}

enum DescribeClusterSecurityGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterSnapshotsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterExists = "ClusterExists"
        case clusterIdentifier = "ClusterIdentifier"
        case endTime = "EndTime"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case ownerAccount = "OwnerAccount"
        case snapshotArn = "SnapshotArn"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotType = "SnapshotType"
        case sortingEntities = "SortingEntities"
        case startTime = "StartTime"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterExists = clusterExists {
            try container.encode(clusterExists, forKey: ClientRuntime.Key("ClusterExists"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let sortingEntities = sortingEntities {
            if !sortingEntities.isEmpty {
                var sortingEntitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SortingEntities"))
                for (index0, snapshotsortingentity0) in sortingEntities.enumerated() {
                    try sortingEntitiesContainer.encode(snapshotsortingentity0, forKey: ClientRuntime.Key("SnapshotSortingEntity.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sortingEntitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SortingEntities"))
                try sortingEntitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterSnapshotsInput {

    static func urlPathProvider(_ value: DescribeClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterSnapshotsInput: Swift.Equatable {
    /// A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows:
    ///
    /// * If ClusterExists is set to true, ClusterIdentifier is required.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier is specified for a deleted cluster, snapshots associated with that cluster are returned.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier is specified for an existing cluster, no snapshots are returned.
    public var clusterExists: Swift.Bool?
    /// The identifier of the cluster which generated the requested snapshots.
    public var clusterIdentifier: Swift.String?
    /// A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2012-07-16T18:00:00Z
    public var endTime: ClientRuntime.Date?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSnapshots] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your Amazon Web Services account, or do not specify the parameter.
    public var ownerAccount: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to describe cluster snapshots.
    public var snapshotArn: Swift.String?
    /// The snapshot identifier of the snapshot about which to return information.
    public var snapshotIdentifier: Swift.String?
    /// The type of snapshots for which you are requesting information. By default, snapshots of all types are returned. Valid Values: automated | manual
    public var snapshotType: Swift.String?
    ///
    public var sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]?
    /// A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2012-07-16T18:00:00Z
    public var startTime: ClientRuntime.Date?
    /// A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterExists: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        snapshotType: Swift.String? = nil,
        sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]? = nil,
        startTime: ClientRuntime.Date? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterExists = clusterExists
        self.clusterIdentifier = clusterIdentifier
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotArn = snapshotArn
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotType = snapshotType
        self.sortingEntities = sortingEntities
        self.startTime = startTime
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeClusterSnapshotsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterSnapshotsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterSnapshotsResult"]
            var value = DescribeClusterSnapshotsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.snapshots = try reader["Snapshots"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Snapshot.readingClosure, memberNodeInfo: "Snapshot", isFlattened: false)
            return value
        }
    }
}

/// Contains the output from the [DescribeClusterSnapshots] action.
public struct DescribeClusterSnapshotsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [Snapshot] instances.
    public var snapshots: [RedshiftClientTypes.Snapshot]?

    public init(
        marker: Swift.String? = nil,
        snapshots: [RedshiftClientTypes.Snapshot]? = nil
    )
    {
        self.marker = marker
        self.snapshots = snapshots
    }
}

enum DescribeClusterSnapshotsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterSubnetGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterSubnetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterSubnetGroupsInput {

    static func urlPathProvider(_ value: DescribeClusterSubnetGroupsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterSubnetGroupsInput: Swift.Equatable {
    /// The name of the cluster subnet group for which information is requested.
    public var clusterSubnetGroupName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSubnetGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeClusterSubnetGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterSubnetGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterSubnetGroupsResult"]
            var value = DescribeClusterSubnetGroupsOutput()
            value.clusterSubnetGroups = try reader["ClusterSubnetGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterSubnetGroup.readingClosure, memberNodeInfo: "ClusterSubnetGroup", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the output from the [DescribeClusterSubnetGroups] action.
public struct DescribeClusterSubnetGroupsOutput: Swift.Equatable {
    /// A list of [ClusterSubnetGroup] instances.
    public var clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterSubnetGroups = clusterSubnetGroups
        self.marker = marker
    }
}

enum DescribeClusterSubnetGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterTracksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceTrackName = "MaintenanceTrackName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeClusterTracks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterTracksInput {

    static func urlPathProvider(_ value: DescribeClusterTracksInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeClusterTracksInput: Swift.Equatable {
    /// The name of the maintenance track.
    public var maintenanceTrackName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterTracks request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// An integer value for the maximum number of maintenance tracks to return.
    public var maxRecords: Swift.Int?

    public init(
        maintenanceTrackName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.maintenanceTrackName = maintenanceTrackName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeClusterTracksOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterTracksOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterTracksResult"]
            var value = DescribeClusterTracksOutput()
            value.maintenanceTracks = try reader["MaintenanceTracks"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.MaintenanceTrack.readingClosure, memberNodeInfo: "MaintenanceTrack", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeClusterTracksOutput: Swift.Equatable {
    /// A list of maintenance tracks output by the DescribeClusterTracks operation.
    public var maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]?
    /// The starting point to return a set of response tracklist records. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.maintenanceTracks = maintenanceTracks
        self.marker = marker
    }
}

enum DescribeClusterTracksOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidClusterTrack": return try await InvalidClusterTrackFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClusterVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterGroupFamily = "ClusterParameterGroupFamily"
        case clusterVersion = "ClusterVersion"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterParameterGroupFamily = clusterParameterGroupFamily {
            try container.encode(clusterParameterGroupFamily, forKey: ClientRuntime.Key("ClusterParameterGroupFamily"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeClusterVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterVersionsInput {

    static func urlPathProvider(_ value: DescribeClusterVersionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterVersionsInput: Swift.Equatable {
    /// The name of a specific cluster parameter group family to return details for. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var clusterParameterGroupFamily: Swift.String?
    /// The specific cluster version to return. Example: 1.0
    public var clusterVersion: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterVersions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        clusterParameterGroupFamily: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.clusterParameterGroupFamily = clusterParameterGroupFamily
        self.clusterVersion = clusterVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeClusterVersionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClusterVersionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClusterVersionsResult"]
            var value = DescribeClusterVersionsOutput()
            value.clusterVersions = try reader["ClusterVersions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterVersion.readingClosure, memberNodeInfo: "ClusterVersion", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the output from the [DescribeClusterVersions] action.
public struct DescribeClusterVersionsOutput: Swift.Equatable {
    /// A list of Version elements.
    public var clusterVersions: [RedshiftClientTypes.ClusterVersion]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterVersions: [RedshiftClientTypes.ClusterVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterVersions = clusterVersions
        self.marker = marker
    }
}

enum DescribeClusterVersionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeClustersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClustersInput {

    static func urlPathProvider(_ value: DescribeClustersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeClustersInput: Swift.Equatable {
    /// The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive. The default is that all clusters defined for an account are returned.
    public var clusterIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the ClusterIdentifier parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeClustersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeClustersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeClustersResult"]
            var value = DescribeClustersOutput()
            value.clusters = try reader["Clusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Cluster.readingClosure, memberNodeInfo: "Cluster", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

/// Contains the output from the [DescribeClusters] action.
public struct DescribeClustersOutput: Swift.Equatable {
    /// A list of Cluster objects, where each object describes one cluster.
    public var clusters: [RedshiftClientTypes.Cluster]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusters: [RedshiftClientTypes.Cluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.marker = marker
    }
}

enum DescribeClustersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeCustomDomainAssociationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCustomDomainAssociations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCustomDomainAssociationsInput {

    static func urlPathProvider(_ value: DescribeCustomDomainAssociationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeCustomDomainAssociationsInput: Swift.Equatable {
    /// The certificate Amazon Resource Name (ARN) for the custom domain association.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for the custom domain association.
    public var customDomainName: Swift.String?
    /// The marker for the custom domain association.
    public var marker: Swift.String?
    /// The maximum records setting for the associated custom domain.
    public var maxRecords: Swift.Int?

    public init(
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCustomDomainAssociationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeCustomDomainAssociationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeCustomDomainAssociationsResult"]
            var value = DescribeCustomDomainAssociationsOutput()
            value.associations = try reader["Associations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Association.readingClosure, memberNodeInfo: "Association", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeCustomDomainAssociationsOutput: Swift.Equatable {
    /// The associations for the custom domain.
    public var associations: [RedshiftClientTypes.Association]?
    /// The marker for the custom domain association.
    public var marker: Swift.String?

    public init(
        associations: [RedshiftClientTypes.Association]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.associations = associations
        self.marker = marker
    }
}

enum DescribeCustomDomainAssociationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CustomDomainAssociationNotFoundFault": return try await CustomDomainAssociationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDataSharesForConsumerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerArn = "ConsumerArn"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerArn = consumerArn {
            try container.encode(consumerArn, forKey: ClientRuntime.Key("ConsumerArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("DescribeDataSharesForConsumer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDataSharesForConsumerInput {

    static func urlPathProvider(_ value: DescribeDataSharesForConsumerInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDataSharesForConsumerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the consumer that returns in the list of datashares.
    public var consumerArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForConsumer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// An identifier giving the status of a datashare in the consumer cluster. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
    public var status: RedshiftClientTypes.DataShareStatusForConsumer?

    public init(
        consumerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        status: RedshiftClientTypes.DataShareStatusForConsumer? = nil
    )
    {
        self.consumerArn = consumerArn
        self.marker = marker
        self.maxRecords = maxRecords
        self.status = status
    }
}

extension DescribeDataSharesForConsumerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDataSharesForConsumerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDataSharesForConsumerResult"]
            var value = DescribeDataSharesForConsumerOutput()
            value.dataShares = try reader["DataShares"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShare.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDataSharesForConsumerOutput: Swift.Equatable {
    /// Shows the results of datashares available for consumers.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForConsumer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

enum DescribeDataSharesForConsumerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidNamespaceFault": return try await InvalidNamespaceFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDataSharesForProducerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case producerArn = "ProducerArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let producerArn = producerArn {
            try container.encode(producerArn, forKey: ClientRuntime.Key("ProducerArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("DescribeDataSharesForProducer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDataSharesForProducerInput {

    static func urlPathProvider(_ value: DescribeDataSharesForProducerInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDataSharesForProducerInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForProducer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the producer that returns in the list of datashares.
    public var producerArn: Swift.String?
    /// An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
    public var status: RedshiftClientTypes.DataShareStatusForProducer?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        producerArn: Swift.String? = nil,
        status: RedshiftClientTypes.DataShareStatusForProducer? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.producerArn = producerArn
        self.status = status
    }
}

extension DescribeDataSharesForProducerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDataSharesForProducerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDataSharesForProducerResult"]
            var value = DescribeDataSharesForProducerOutput()
            value.dataShares = try reader["DataShares"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShare.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDataSharesForProducerOutput: Swift.Equatable {
    /// Shows the results of datashares available for producers.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForProducer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

enum DescribeDataSharesForProducerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidNamespaceFault": return try await InvalidNamespaceFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDataSharesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShareArn = "DataShareArn"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDataShares", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDataSharesInput {

    static func urlPathProvider(_ value: DescribeDataSharesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeDataSharesInput: Swift.Equatable {
    /// The identifier of the datashare to describe details of.
    public var dataShareArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataShares] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?

    public init(
        dataShareArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dataShareArn = dataShareArn
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeDataSharesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDataSharesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDataSharesResult"]
            var value = DescribeDataSharesOutput()
            value.dataShares = try reader["DataShares"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShare.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeDataSharesOutput: Swift.Equatable {
    /// The results returned from describing datashares.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataShares] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

enum DescribeDataSharesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDataShareFault": return try await InvalidDataShareFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeDefaultClusterParametersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case parameterGroupFamily = "ParameterGroupFamily"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        try container.encode("DescribeDefaultClusterParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDefaultClusterParametersInput {

    static func urlPathProvider(_ value: DescribeDefaultClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeDefaultClusterParametersInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDefaultClusterParameters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the cluster parameter group family.
    /// This member is required.
    public var parameterGroupFamily: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupFamily: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupFamily = parameterGroupFamily
    }
}

extension DescribeDefaultClusterParametersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeDefaultClusterParametersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeDefaultClusterParametersResult"]
            var value = DescribeDefaultClusterParametersOutput()
            value.defaultClusterParameters = try reader["DefaultClusterParameters"].readIfPresent(readingClosure: RedshiftClientTypes.DefaultClusterParameters.readingClosure)
            return value
        }
    }
}

public struct DescribeDefaultClusterParametersOutput: Swift.Equatable {
    /// Describes the default cluster parameters for a parameter group family.
    public var defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters?

    public init(
        defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters? = nil
    )
    {
        self.defaultClusterParameters = defaultClusterParameters
    }
}

enum DescribeDefaultClusterParametersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case endpointName = "EndpointName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case resourceOwner = "ResourceOwner"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        try container.encode("DescribeEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEndpointAccessInput {

    static func urlPathProvider(_ value: DescribeEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointAccessInput: Swift.Equatable {
    /// The cluster identifier associated with the described endpoint.
    public var clusterIdentifier: Swift.String?
    /// The name of the endpoint to be described.
    public var endpointName: Swift.String?
    /// An optional pagination token provided by a previous DescribeEndpointAccess request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a Marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The virtual private cloud (VPC) identifier with access to the cluster.
    public var vpcId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.endpointName = endpointName
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceOwner = resourceOwner
        self.vpcId = vpcId
    }
}

extension DescribeEndpointAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEndpointAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEndpointAccessResult"]
            var value = DescribeEndpointAccessOutput()
            value.endpointAccessList = try reader["EndpointAccessList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EndpointAccess.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeEndpointAccessOutput: Swift.Equatable {
    /// The list of endpoints with access to the cluster.
    public var endpointAccessList: [RedshiftClientTypes.EndpointAccess]?
    /// An optional pagination token provided by a previous DescribeEndpointAccess request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?

    public init(
        endpointAccessList: [RedshiftClientTypes.EndpointAccess]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.endpointAccessList = endpointAccessList
        self.marker = marker
    }
}

enum DescribeEndpointAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointNotFound": return try await EndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEndpointAuthorizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case clusterIdentifier = "ClusterIdentifier"
        case grantee = "Grantee"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let grantee = grantee {
            try container.encode(grantee, forKey: ClientRuntime.Key("Grantee"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeEndpointAuthorization", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEndpointAuthorizationInput {

    static func urlPathProvider(_ value: DescribeEndpointAuthorizationInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointAuthorizationInput: Swift.Equatable {
    /// The Amazon Web Services account ID of either the cluster owner (grantor) or grantee. If Grantee parameter is true, then the Account value is of the grantor.
    public var account: Swift.String?
    /// The cluster identifier of the cluster to access.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to check authorization from a grantor or grantee point of view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If false (default), checks authorization from a grantor point of view.
    public var grantee: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeEndpointAuthorization request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a Marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        grantee: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.grantee = grantee
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeEndpointAuthorizationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEndpointAuthorizationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEndpointAuthorizationResult"]
            var value = DescribeEndpointAuthorizationOutput()
            value.endpointAuthorizationList = try reader["EndpointAuthorizationList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EndpointAuthorization.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeEndpointAuthorizationOutput: Swift.Equatable {
    /// The authorizations to an endpoint.
    public var endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]?
    /// An optional pagination token provided by a previous DescribeEndpointAuthorization request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?

    public init(
        endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.endpointAuthorizationList = endpointAuthorizationList
        self.marker = marker
    }
}

enum DescribeEndpointAuthorizationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEventCategoriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        try container.encode("DescribeEventCategories", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventCategoriesInput {

    static func urlPathProvider(_ value: DescribeEventCategoriesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventCategoriesInput: Swift.Equatable {
    /// The source type, such as cluster or parameter group, to which the described event categories apply. Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.
    public var sourceType: Swift.String?

    public init(
        sourceType: Swift.String? = nil
    )
    {
        self.sourceType = sourceType
    }
}

extension DescribeEventCategoriesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEventCategoriesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEventCategoriesResult"]
            var value = DescribeEventCategoriesOutput()
            value.eventCategoriesMapList = try reader["EventCategoriesMapList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EventCategoriesMap.readingClosure, memberNodeInfo: "EventCategoriesMap", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeEventCategoriesOutput: Swift.Equatable {
    /// A list of event categories descriptions.
    public var eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]?

    public init(
        eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]? = nil
    )
    {
        self.eventCategoriesMapList = eventCategoriesMapList
    }
}

enum DescribeEventCategoriesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEventSubscriptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case subscriptionName = "SubscriptionName"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeEventSubscriptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventSubscriptionsInput {

    static func urlPathProvider(_ value: DescribeEventSubscriptionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventSubscriptionsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the Amazon Redshift event notification subscription to be described.
    public var subscriptionName: Swift.String?
    /// A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        subscriptionName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.subscriptionName = subscriptionName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeEventSubscriptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEventSubscriptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEventSubscriptionsResult"]
            var value = DescribeEventSubscriptionsOutput()
            value.eventSubscriptionsList = try reader["EventSubscriptionsList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EventSubscription.readingClosure, memberNodeInfo: "EventSubscription", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

///
public struct DescribeEventSubscriptionsOutput: Swift.Equatable {
    /// A list of event subscriptions.
    public var eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.eventSubscriptionsList = eventSubscriptionsList
        self.marker = marker
    }
}

enum DescribeEventSubscriptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case endTime = "EndTime"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        try container.encode("DescribeEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventsInput {

    static func urlPathProvider(_ value: DescribeEventsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventsInput: Swift.Equatable {
    /// The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned. Default: 60
    public var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var endTime: ClientRuntime.Date?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeEvents] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.
    ///
    /// * Specify a cluster identifier when SourceType is cluster.
    ///
    /// * Specify a cluster security group name when SourceType is cluster-security-group.
    ///
    /// * Specify a cluster parameter group name when SourceType is cluster-parameter-group.
    ///
    /// * Specify a cluster snapshot identifier when SourceType is cluster-snapshot.
    public var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be provided.
    ///
    /// * Specify cluster when SourceIdentifier is a cluster identifier.
    ///
    /// * Specify cluster-security-group when SourceIdentifier is a cluster security group name.
    ///
    /// * Specify cluster-parameter-group when SourceIdentifier is a cluster parameter group name.
    ///
    /// * Specify cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.
    public var sourceType: RedshiftClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var startTime: ClientRuntime.Date?

    public init(
        duration: Swift.Int? = nil,
        endTime: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: RedshiftClientTypes.SourceType? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension DescribeEventsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeEventsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeEventsResult"]
            var value = DescribeEventsOutput()
            value.events = try reader["Events"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Event.readingClosure, memberNodeInfo: "Event", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

///
public struct DescribeEventsOutput: Swift.Equatable {
    /// A list of Event instances.
    public var events: [RedshiftClientTypes.Event]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        events: [RedshiftClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

enum DescribeEventsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeHsmClientCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeHsmClientCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeHsmClientCertificatesInput {

    static func urlPathProvider(_ value: DescribeHsmClientCertificatesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeHsmClientCertificatesInput: Swift.Equatable {
    /// The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your Amazon Web Services account.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeHsmClientCertificates] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeHsmClientCertificatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeHsmClientCertificatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeHsmClientCertificatesResult"]
            var value = DescribeHsmClientCertificatesOutput()
            value.hsmClientCertificates = try reader["HsmClientCertificates"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.HsmClientCertificate.readingClosure, memberNodeInfo: "HsmClientCertificate", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

///
public struct DescribeHsmClientCertificatesOutput: Swift.Equatable {
    /// A list of the identifiers for one or more HSM client certificates used by Amazon Redshift clusters to store and retrieve database encryption keys in an HSM.
    public var hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hsmClientCertificates = hsmClientCertificates
        self.marker = marker
    }
}

enum DescribeHsmClientCertificatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeHsmConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeHsmConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeHsmConfigurationsInput {

    static func urlPathProvider(_ value: DescribeHsmConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeHsmConfigurationsInput: Swift.Equatable {
    /// The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your Amazon Web Services account.
    public var hsmConfigurationIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeHsmConfigurations] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        hsmConfigurationIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeHsmConfigurationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeHsmConfigurationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeHsmConfigurationsResult"]
            var value = DescribeHsmConfigurationsOutput()
            value.hsmConfigurations = try reader["HsmConfigurations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.HsmConfiguration.readingClosure, memberNodeInfo: "HsmConfiguration", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

///
public struct DescribeHsmConfigurationsOutput: Swift.Equatable {
    /// A list of HsmConfiguration objects.
    public var hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hsmConfigurations = hsmConfigurations
        self.marker = marker
    }
}

enum DescribeHsmConfigurationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeInboundIntegrationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationArn = "IntegrationArn"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let integrationArn = integrationArn {
            try container.encode(integrationArn, forKey: ClientRuntime.Key("IntegrationArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
        try container.encode("DescribeInboundIntegrations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeInboundIntegrationsInput {

    static func urlPathProvider(_ value: DescribeInboundIntegrationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeInboundIntegrationsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inbound integration.
    public var integrationArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeInboundIntegrations] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the target of an inbound integration.
    public var targetArn: Swift.String?

    public init(
        integrationArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.integrationArn = integrationArn
        self.marker = marker
        self.maxRecords = maxRecords
        self.targetArn = targetArn
    }
}

extension DescribeInboundIntegrationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeInboundIntegrationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeInboundIntegrationsResult"]
            var value = DescribeInboundIntegrationsOutput()
            value.inboundIntegrations = try reader["InboundIntegrations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.InboundIntegration.readingClosure, memberNodeInfo: "InboundIntegration", isFlattened: false)
            value.marker = try reader["Marker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeInboundIntegrationsOutput: Swift.Equatable {
    /// A list of [InboundIntegration] instances.
    public var inboundIntegrations: [RedshiftClientTypes.InboundIntegration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        inboundIntegrations: [RedshiftClientTypes.InboundIntegration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.inboundIntegrations = inboundIntegrations
        self.marker = marker
    }
}

enum DescribeInboundIntegrationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidNamespaceFault": return try await InvalidNamespaceFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeLoggingStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DescribeLoggingStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLoggingStatusInput {

    static func urlPathProvider(_ value: DescribeLoggingStatusInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeLoggingStatusInput: Swift.Equatable {
    /// The identifier of the cluster from which to get the logging status. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension DescribeLoggingStatusOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeLoggingStatusOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeLoggingStatusResult"]
            var value = DescribeLoggingStatusOutput()
            value.bucketName = try reader["BucketName"].readIfPresent()
            value.lastFailureMessage = try reader["LastFailureMessage"].readIfPresent()
            value.lastFailureTime = try reader["LastFailureTime"].readTimestampIfPresent(format: .dateTime)
            value.lastSuccessfulDeliveryTime = try reader["LastSuccessfulDeliveryTime"].readTimestampIfPresent(format: .dateTime)
            value.logDestinationType = try reader["LogDestinationType"].readIfPresent()
            value.logExports = try reader["LogExports"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent()
            value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
            return value
        }
    }
}

/// Describes the status of logging for a cluster.
public struct DescribeLoggingStatusOutput: Swift.Equatable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: ClientRuntime.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: ClientRuntime.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: ClientRuntime.Date? = nil,
        lastSuccessfulDeliveryTime: ClientRuntime.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

enum DescribeLoggingStatusOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeNodeConfigurationOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case clusterIdentifier = "ClusterIdentifier"
        case filters = "Filter"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case ownerAccount = "OwnerAccount"
        case snapshotArn = "SnapshotArn"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                for (index0, nodeconfigurationoptionsfilter0) in filters.enumerated() {
                    try filtersContainer.encode(nodeconfigurationoptionsfilter0, forKey: ClientRuntime.Key("NodeConfigurationOptionsFilter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("DescribeNodeConfigurationOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeNodeConfigurationOptionsInput {

    static func urlPathProvider(_ value: DescribeNodeConfigurationOptionsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeNodeConfigurationOptionsInput: Swift.Equatable {
    /// The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster.
    /// This member is required.
    public var actionType: RedshiftClientTypes.ActionType?
    /// The identifier of the cluster to evaluate for possible node configurations.
    public var clusterIdentifier: Swift.String?
    /// A set of name, operator, and value items to filter the results.
    public var filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeNodeConfigurationOptions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 500 Constraints: minimum 100, maximum 500.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    public var ownerAccount: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to describe node configuration.
    public var snapshotArn: Swift.String?
    /// The identifier of the snapshot to evaluate for possible node configurations.
    public var snapshotIdentifier: Swift.String?

    public init(
        actionType: RedshiftClientTypes.ActionType? = nil,
        clusterIdentifier: Swift.String? = nil,
        filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.clusterIdentifier = clusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotArn = snapshotArn
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension DescribeNodeConfigurationOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeNodeConfigurationOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeNodeConfigurationOptionsResult"]
            var value = DescribeNodeConfigurationOptionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.nodeConfigurationOptionList = try reader["NodeConfigurationOptionList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.NodeConfigurationOption.readingClosure, memberNodeInfo: "NodeConfigurationOption", isFlattened: false)
            return value
        }
    }
}

public struct DescribeNodeConfigurationOptionsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of valid node configurations.
    public var nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]?

    public init(
        marker: Swift.String? = nil,
        nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]? = nil
    )
    {
        self.marker = marker
        self.nodeConfigurationOptionList = nodeConfigurationOptionList
    }
}

enum DescribeNodeConfigurationOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccessToSnapshotDenied": return try await AccessToSnapshotDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeOrderableClusterOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterVersion = "ClusterVersion"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case nodeType = "NodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        try container.encode("DescribeOrderableClusterOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeOrderableClusterOptionsInput {

    static func urlPathProvider(_ value: DescribeOrderableClusterOptionsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeOrderableClusterOptionsInput: Swift.Equatable {
    /// The version filter value. Specify this parameter to show only the available offerings matching the specified version. Default: All versions. Constraints: Must be one of the version returned from [DescribeClusterVersions].
    public var clusterVersion: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeOrderableClusterOptions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
    public var nodeType: Swift.String?

    public init(
        clusterVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nodeType: Swift.String? = nil
    )
    {
        self.clusterVersion = clusterVersion
        self.marker = marker
        self.maxRecords = maxRecords
        self.nodeType = nodeType
    }
}

extension DescribeOrderableClusterOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeOrderableClusterOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeOrderableClusterOptionsResult"]
            var value = DescribeOrderableClusterOptionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.orderableClusterOptions = try reader["OrderableClusterOptions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.OrderableClusterOption.readingClosure, memberNodeInfo: "OrderableClusterOption", isFlattened: false)
            return value
        }
    }
}

/// Contains the output from the [DescribeOrderableClusterOptions] action.
public struct DescribeOrderableClusterOptionsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// An OrderableClusterOption structure containing information about orderable options for the cluster.
    public var orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]?

    public init(
        marker: Swift.String? = nil,
        orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]? = nil
    )
    {
        self.marker = marker
        self.orderableClusterOptions = orderableClusterOptions
    }
}

enum DescribeOrderableClusterOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribePartnersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        try container.encode("DescribePartners", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePartnersInput {

    static func urlPathProvider(_ value: DescribePartnersInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribePartnersInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster whose partner integration is being described.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.
    public var databaseName: Swift.String?
    /// The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

extension DescribePartnersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribePartnersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribePartnersResult"]
            var value = DescribePartnersOutput()
            value.partnerIntegrationInfoList = try reader["PartnerIntegrationInfoList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.PartnerIntegrationInfo.readingClosure, memberNodeInfo: "PartnerIntegrationInfo", isFlattened: false)
            return value
        }
    }
}

public struct DescribePartnersOutput: Swift.Equatable {
    /// A list of partner integrations.
    public var partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]?

    public init(
        partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]? = nil
    )
    {
        self.partnerIntegrationInfoList = partnerIntegrationInfoList
    }
}

enum DescribePartnersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeRedshiftIdcApplicationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        try container.encode("DescribeRedshiftIdcApplications", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeRedshiftIdcApplicationsInput {

    static func urlPathProvider(_ value: DescribeRedshiftIdcApplicationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeRedshiftIdcApplicationsInput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    public var redshiftIdcApplicationArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
    }
}

extension DescribeRedshiftIdcApplicationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeRedshiftIdcApplicationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeRedshiftIdcApplicationsResult"]
            var value = DescribeRedshiftIdcApplicationsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.redshiftIdcApplications = try reader["RedshiftIdcApplications"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RedshiftIdcApplication.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeRedshiftIdcApplicationsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The list of Amazon Redshift IAM Identity Center applications.
    public var redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]?

    public init(
        marker: Swift.String? = nil,
        redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]? = nil
    )
    {
        self.marker = marker
        self.redshiftIdcApplications = redshiftIdcApplications
    }
}

enum DescribeRedshiftIdcApplicationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReservedNodeExchangeStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeExchangeRequestId = "ReservedNodeExchangeRequestId"
        case reservedNodeId = "ReservedNodeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeExchangeRequestId = reservedNodeExchangeRequestId {
            try container.encode(reservedNodeExchangeRequestId, forKey: ClientRuntime.Key("ReservedNodeExchangeRequestId"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        try container.encode("DescribeReservedNodeExchangeStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedNodeExchangeStatusInput {

    static func urlPathProvider(_ value: DescribeReservedNodeExchangeStatusInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeReservedNodeExchangeStatusInput: Swift.Equatable {
    /// An optional pagination token provided by a previous DescribeReservedNodeExchangeStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a Marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The identifier of the reserved-node exchange request.
    public var reservedNodeExchangeRequestId: Swift.String?
    /// The identifier of the source reserved node in a reserved-node exchange request.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeExchangeRequestId: Swift.String? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeExchangeRequestId = reservedNodeExchangeRequestId
        self.reservedNodeId = reservedNodeId
    }
}

extension DescribeReservedNodeExchangeStatusOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReservedNodeExchangeStatusOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReservedNodeExchangeStatusResult"]
            var value = DescribeReservedNodeExchangeStatusOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedNodeExchangeStatusDetails = try reader["ReservedNodeExchangeStatusDetails"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeExchangeStatus.readingClosure, memberNodeInfo: "ReservedNodeExchangeStatus", isFlattened: false)
            return value
        }
    }
}

public struct DescribeReservedNodeExchangeStatusOutput: Swift.Equatable {
    /// A pagination token provided by a previous DescribeReservedNodeExchangeStatus request.
    public var marker: Swift.String?
    /// The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.
    public var reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeExchangeStatusDetails = reservedNodeExchangeStatusDetails
    }
}

enum DescribeReservedNodeExchangeStatusOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ReservedNodeExchangeNotFond": return try await ReservedNodeExchangeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReservedNodeOfferingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        try container.encode("DescribeReservedNodeOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedNodeOfferingsInput {

    static func urlPathProvider(_ value: DescribeReservedNodeOfferingsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeReservedNodeOfferingsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeReservedNodeOfferings] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The unique identifier for the offering.
    public var reservedNodeOfferingId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeOfferingId = reservedNodeOfferingId
    }
}

extension DescribeReservedNodeOfferingsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReservedNodeOfferingsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReservedNodeOfferingsResult"]
            var value = DescribeReservedNodeOfferingsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedNodeOfferings = try reader["ReservedNodeOfferings"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeOffering.readingClosure, memberNodeInfo: "ReservedNodeOffering", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeReservedNodeOfferingsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of ReservedNodeOffering objects.
    public var reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeOfferings = reservedNodeOfferings
    }
}

enum DescribeReservedNodeOfferingsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeReservedNodesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeId = "ReservedNodeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        try container.encode("DescribeReservedNodes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedNodesInput {

    static func urlPathProvider(_ value: DescribeReservedNodesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeReservedNodesInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeReservedNodes] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// Identifier for the node reservation.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeId = reservedNodeId
    }
}

extension DescribeReservedNodesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeReservedNodesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeReservedNodesResult"]
            var value = DescribeReservedNodesOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedNodes = try reader["ReservedNodes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNode.readingClosure, memberNodeInfo: "ReservedNode", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeReservedNodesOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The list of ReservedNode objects.
    public var reservedNodes: [RedshiftClientTypes.ReservedNode]?

    public init(
        marker: Swift.String? = nil,
        reservedNodes: [RedshiftClientTypes.ReservedNode]? = nil
    )
    {
        self.marker = marker
        self.reservedNodes = reservedNodes
    }
}

enum DescribeReservedNodesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeResizeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DescribeResize", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeResizeInput {

    static func urlPathProvider(_ value: DescribeResizeInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeResizeInput: Swift.Equatable {
    /// The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive. By default, resize operations for all clusters defined for an Amazon Web Services account are returned.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension DescribeResizeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeResizeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeResizeResult"]
            var value = DescribeResizeOutput()
            value.avgResizeRateInMegaBytesPerSecond = try reader["AvgResizeRateInMegaBytesPerSecond"].readIfPresent()
            value.dataTransferProgressPercent = try reader["DataTransferProgressPercent"].readIfPresent()
            value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
            value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
            value.importTablesCompleted = try reader["ImportTablesCompleted"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.importTablesInProgress = try reader["ImportTablesInProgress"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.importTablesNotStarted = try reader["ImportTablesNotStarted"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.message = try reader["Message"].readIfPresent()
            value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
            value.resizeType = try reader["ResizeType"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.targetClusterType = try reader["TargetClusterType"].readIfPresent()
            value.targetEncryptionType = try reader["TargetEncryptionType"].readIfPresent()
            value.targetNodeType = try reader["TargetNodeType"].readIfPresent()
            value.targetNumberOfNodes = try reader["TargetNumberOfNodes"].readIfPresent()
            value.totalResizeDataInMegaBytes = try reader["TotalResizeDataInMegaBytes"].readIfPresent()
            return value
        }
    }
}

/// Describes the result of a cluster resize operation.
public struct DescribeResizeOutput: Swift.Equatable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init(
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}

enum DescribeResizeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResizeNotFound": return try await ResizeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeScheduledActionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
        case endTime = "EndTime"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetActionType = "TargetActionType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let active = active {
            try container.encode(active, forKey: ClientRuntime.Key("Active"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, scheduledactionfilter0) in filters.enumerated() {
                    try filtersContainer.encode(scheduledactionfilter0, forKey: ClientRuntime.Key("ScheduledActionFilter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let targetActionType = targetActionType {
            try container.encode(targetActionType, forKey: ClientRuntime.Key("TargetActionType"))
        }
        try container.encode("DescribeScheduledActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeScheduledActionsInput {

    static func urlPathProvider(_ value: DescribeScheduledActionsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeScheduledActionsInput: Swift.Equatable {
    /// If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions.
    public var active: Swift.Bool?
    /// The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
    public var endTime: ClientRuntime.Date?
    /// List of scheduled action filters.
    public var filters: [RedshiftClientTypes.ScheduledActionFilter]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeScheduledActions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the scheduled action to retrieve.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
    public var startTime: ClientRuntime.Date?
    /// The type of the scheduled actions to retrieve.
    public var targetActionType: RedshiftClientTypes.ScheduledActionTypeValues?

    public init(
        active: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        filters: [RedshiftClientTypes.ScheduledActionFilter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetActionType: RedshiftClientTypes.ScheduledActionTypeValues? = nil
    )
    {
        self.active = active
        self.endTime = endTime
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetActionType = targetActionType
    }
}

extension DescribeScheduledActionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeScheduledActionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeScheduledActionsResult"]
            var value = DescribeScheduledActionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.scheduledActions = try reader["ScheduledActions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ScheduledAction.readingClosure, memberNodeInfo: "ScheduledAction", isFlattened: false)
            return value
        }
    }
}

public struct DescribeScheduledActionsOutput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeScheduledActions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// List of retrieved scheduled actions.
    public var scheduledActions: [RedshiftClientTypes.ScheduledAction]?

    public init(
        marker: Swift.String? = nil,
        scheduledActions: [RedshiftClientTypes.ScheduledAction]? = nil
    )
    {
        self.marker = marker
        self.scheduledActions = scheduledActions
    }
}

enum DescribeScheduledActionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ScheduledActionNotFound": return try await ScheduledActionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeSnapshotCopyGrantsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeSnapshotCopyGrants", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSnapshotCopyGrantsInput {

    static func urlPathProvider(_ value: DescribeSnapshotCopyGrantsInput) -> Swift.String? {
        return "/"
    }
}

/// The result of the DescribeSnapshotCopyGrants action.
public struct DescribeSnapshotCopyGrantsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the snapshot copy grant.
    public var snapshotCopyGrantName: Swift.String?
    /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotCopyGrantName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotCopyGrantName = snapshotCopyGrantName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeSnapshotCopyGrantsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeSnapshotCopyGrantsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeSnapshotCopyGrantsResult"]
            var value = DescribeSnapshotCopyGrantsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.snapshotCopyGrants = try reader["SnapshotCopyGrants"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotCopyGrant.readingClosure, memberNodeInfo: "SnapshotCopyGrant", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeSnapshotCopyGrantsOutput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The list of SnapshotCopyGrant objects.
    public var snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]?

    public init(
        marker: Swift.String? = nil,
        snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]? = nil
    )
    {
        self.marker = marker
        self.snapshotCopyGrants = snapshotCopyGrants
    }
}

enum DescribeSnapshotCopyGrantsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyGrantNotFoundFault": return try await SnapshotCopyGrantNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeSnapshotSchedulesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeSnapshotSchedules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSnapshotSchedulesInput {

    static func urlPathProvider(_ value: DescribeSnapshotSchedulesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeSnapshotSchedulesInput: Swift.Equatable {
    /// The unique identifier for the cluster whose snapshot schedules you want to view.
    public var clusterIdentifier: Swift.String?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// A unique identifier for a snapshot schedule.
    public var scheduleIdentifier: Swift.String?
    /// The key value for a snapshot schedule tag.
    public var tagKeys: [Swift.String]?
    /// The value corresponding to the key of the snapshot schedule tag.
    public var tagValues: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.scheduleIdentifier = scheduleIdentifier
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeSnapshotSchedulesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeSnapshotSchedulesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeSnapshotSchedulesResult"]
            var value = DescribeSnapshotSchedulesOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.snapshotSchedules = try reader["SnapshotSchedules"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotSchedule.readingClosure, memberNodeInfo: "SnapshotSchedule", isFlattened: false)
            return value
        }
    }
}

public struct DescribeSnapshotSchedulesOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of SnapshotSchedules.
    public var snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]?

    public init(
        marker: Swift.String? = nil,
        snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]? = nil
    )
    {
        self.marker = marker
        self.snapshotSchedules = snapshotSchedules
    }
}

enum DescribeSnapshotSchedulesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStorageInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeStorage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStorageInput {

    static func urlPathProvider(_ value: DescribeStorageInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeStorageInput: Swift.Equatable {

    public init() { }
}

extension DescribeStorageOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStorageOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStorageResult"]
            var value = DescribeStorageOutput()
            value.totalBackupSizeInMegaBytes = try reader["TotalBackupSizeInMegaBytes"].readIfPresent()
            value.totalProvisionedStorageInMegaBytes = try reader["TotalProvisionedStorageInMegaBytes"].readIfPresent()
            return value
        }
    }
}

public struct DescribeStorageOutput: Swift.Equatable {
    /// The total amount of storage currently used for snapshots.
    public var totalBackupSizeInMegaBytes: Swift.Double?
    /// The total amount of storage currently provisioned.
    public var totalProvisionedStorageInMegaBytes: Swift.Double?

    public init(
        totalBackupSizeInMegaBytes: Swift.Double? = nil,
        totalProvisionedStorageInMegaBytes: Swift.Double? = nil
    )
    {
        self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
        self.totalProvisionedStorageInMegaBytes = totalProvisionedStorageInMegaBytes
    }
}

enum DescribeStorageOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTableRestoreStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tableRestoreRequestId = "TableRestoreRequestId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tableRestoreRequestId = tableRestoreRequestId {
            try container.encode(tableRestoreRequestId, forKey: ClientRuntime.Key("TableRestoreRequestId"))
        }
        try container.encode("DescribeTableRestoreStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTableRestoreStatusInput {

    static func urlPathProvider(_ value: DescribeTableRestoreStatusInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeTableRestoreStatusInput: Swift.Equatable {
    /// The Amazon Redshift cluster that the table is being restored to.
    public var clusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous DescribeTableRestoreStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The identifier of the table restore request to return status for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus returns the status of all in-progress table restore requests.
    public var tableRestoreRequestId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tableRestoreRequestId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tableRestoreRequestId = tableRestoreRequestId
    }
}

extension DescribeTableRestoreStatusOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTableRestoreStatusOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTableRestoreStatusResult"]
            var value = DescribeTableRestoreStatusOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.tableRestoreStatusDetails = try reader["TableRestoreStatusDetails"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.TableRestoreStatus.readingClosure, memberNodeInfo: "TableRestoreStatus", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeTableRestoreStatusOutput: Swift.Equatable {
    /// A pagination token that can be used in a subsequent [DescribeTableRestoreStatus] request.
    public var marker: Swift.String?
    /// A list of status details for one or more table restore requests.
    public var tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]?

    public init(
        marker: Swift.String? = nil,
        tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]? = nil
    )
    {
        self.marker = marker
        self.tableRestoreStatusDetails = tableRestoreStatusDetails
    }
}

enum DescribeTableRestoreStatusOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TableRestoreNotFoundFault": return try await TableRestoreNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTagsInput {

    static func urlPathProvider(_ value: DescribeTagsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DescribeTagsInput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    public var resourceName: Swift.String?
    /// The type of resource with which you want to view tags. Valid resource types are:
    ///
    /// * Cluster
    ///
    /// * CIDR/IP
    ///
    /// * EC2 security group
    ///
    /// * Snapshot
    ///
    /// * Cluster security group
    ///
    /// * Subnet group
    ///
    /// * HSM connection
    ///
    /// * HSM certificate
    ///
    /// * Parameter group
    ///
    /// * Snapshot copy grant
    ///
    ///
    /// For more information about Amazon Redshift resource types and constructing ARNs, go to [Specifying Policy Elements: Actions, Effects, Resources, and Principals](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions) in the Amazon Redshift Cluster Management Guide.
    public var resourceType: Swift.String?
    /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceName = resourceName
        self.resourceType = resourceType
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension DescribeTagsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTagsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTagsResult"]
            var value = DescribeTagsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.taggedResources = try reader["TaggedResources"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.TaggedResource.readingClosure, memberNodeInfo: "TaggedResource", isFlattened: false)
            return value
        }
    }
}

///
public struct DescribeTagsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of tags with their associated resources.
    public var taggedResources: [RedshiftClientTypes.TaggedResource]?

    public init(
        marker: Swift.String? = nil,
        taggedResources: [RedshiftClientTypes.TaggedResource]? = nil
    )
    {
        self.marker = marker
        self.taggedResources = taggedResources
    }
}

enum DescribeTagsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeUsageLimitsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
        case usageLimitId = "UsageLimitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: ClientRuntime.Key("FeatureType"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
        try container.encode("DescribeUsageLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeUsageLimitsInput {

    static func urlPathProvider(_ value: DescribeUsageLimitsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeUsageLimitsInput: Swift.Equatable {
    /// The identifier of the cluster for which you want to describe usage limits.
    public var clusterIdentifier: Swift.String?
    /// The feature type for which you want to describe usage limits.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeUsageLimits] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching usage limit objects that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the usage limit objects have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching usage limit objects that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the usage limit objects that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?
    /// The identifier of the usage limit to describe.
    public var usageLimitId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
        self.usageLimitId = usageLimitId
    }
}

extension DescribeUsageLimitsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeUsageLimitsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeUsageLimitsResult"]
            var value = DescribeUsageLimitsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.usageLimits = try reader["UsageLimits"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.UsageLimit.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeUsageLimitsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// Contains the output from the [DescribeUsageLimits] action.
    public var usageLimits: [RedshiftClientTypes.UsageLimit]?

    public init(
        marker: Swift.String? = nil,
        usageLimits: [RedshiftClientTypes.UsageLimit]? = nil
    )
    {
        self.marker = marker
        self.usageLimits = usageLimits
    }
}

enum DescribeUsageLimitsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DisableLoggingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DisableLogging", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableLoggingInput {

    static func urlPathProvider(_ value: DisableLoggingInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DisableLoggingInput: Swift.Equatable {
    /// The identifier of the cluster on which logging is to be stopped. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension DisableLoggingOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DisableLoggingOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DisableLoggingResult"]
            var value = DisableLoggingOutput()
            value.bucketName = try reader["BucketName"].readIfPresent()
            value.lastFailureMessage = try reader["LastFailureMessage"].readIfPresent()
            value.lastFailureTime = try reader["LastFailureTime"].readTimestampIfPresent(format: .dateTime)
            value.lastSuccessfulDeliveryTime = try reader["LastSuccessfulDeliveryTime"].readTimestampIfPresent(format: .dateTime)
            value.logDestinationType = try reader["LogDestinationType"].readIfPresent()
            value.logExports = try reader["LogExports"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent()
            value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
            return value
        }
    }
}

/// Describes the status of logging for a cluster.
public struct DisableLoggingOutput: Swift.Equatable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: ClientRuntime.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: ClientRuntime.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: ClientRuntime.Date? = nil,
        lastSuccessfulDeliveryTime: ClientRuntime.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

enum DisableLoggingOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DisableSnapshotCopyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DisableSnapshotCopy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableSnapshotCopyInput {

    static func urlPathProvider(_ value: DisableSnapshotCopyInput) -> Swift.String? {
        return "/"
    }
}

///
public struct DisableSnapshotCopyInput: Swift.Equatable {
    /// The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension DisableSnapshotCopyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DisableSnapshotCopyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DisableSnapshotCopyResult"]
            var value = DisableSnapshotCopyOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct DisableSnapshotCopyOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum DisableSnapshotCopyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyAlreadyDisabledFault": return try await SnapshotCopyAlreadyDisabledFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DisassociateDataShareConsumerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerArn = "ConsumerArn"
        case consumerRegion = "ConsumerRegion"
        case dataShareArn = "DataShareArn"
        case disassociateEntireAccount = "DisassociateEntireAccount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerArn = consumerArn {
            try container.encode(consumerArn, forKey: ClientRuntime.Key("ConsumerArn"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        if let disassociateEntireAccount = disassociateEntireAccount {
            try container.encode(disassociateEntireAccount, forKey: ClientRuntime.Key("DisassociateEntireAccount"))
        }
        try container.encode("DisassociateDataShareConsumer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisassociateDataShareConsumerInput {

    static func urlPathProvider(_ value: DisassociateDataShareConsumerInput) -> Swift.String? {
        return "/"
    }
}

public struct DisassociateDataShareConsumerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.
    public var consumerArn: Swift.String?
    /// From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.
    public var consumerRegion: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare to remove association for.
    /// This member is required.
    public var dataShareArn: Swift.String?
    /// A value that specifies whether association for the datashare is removed from the entire account.
    public var disassociateEntireAccount: Swift.Bool?

    public init(
        consumerArn: Swift.String? = nil,
        consumerRegion: Swift.String? = nil,
        dataShareArn: Swift.String? = nil,
        disassociateEntireAccount: Swift.Bool? = nil
    )
    {
        self.consumerArn = consumerArn
        self.consumerRegion = consumerRegion
        self.dataShareArn = dataShareArn
        self.disassociateEntireAccount = disassociateEntireAccount
    }
}

extension DisassociateDataShareConsumerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DisassociateDataShareConsumerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DisassociateDataShareConsumerResult"]
            var value = DisassociateDataShareConsumerOutput()
            value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
            value.dataShareArn = try reader["DataShareArn"].readIfPresent()
            value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedBy = try reader["ManagedBy"].readIfPresent()
            value.producerArn = try reader["ProducerArn"].readIfPresent()
            return value
        }
    }
}

public struct DisassociateDataShareConsumerOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

enum DisassociateDataShareConsumerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDataShareFault": return try await InvalidDataShareFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidNamespaceFault": return try await InvalidNamespaceFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.EC2SecurityGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.EC2SecurityGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.EC2SecurityGroup()
            value.status = try reader["Status"].readIfPresent()
            value.ec2SecurityGroupName = try reader["EC2SecurityGroupName"].readIfPresent()
            value.ec2SecurityGroupOwnerId = try reader["EC2SecurityGroupOwnerId"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an Amazon EC2 security group.
    public struct EC2SecurityGroup: Swift.Equatable {
        /// The name of the EC2 Security Group.
        public var ec2SecurityGroupName: Swift.String?
        /// The Amazon Web Services account ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field.
        public var ec2SecurityGroupOwnerId: Swift.String?
        /// The status of the EC2 security group.
        public var status: Swift.String?
        /// The list of tags for the EC2 security group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            ec2SecurityGroupName: Swift.String? = nil,
            ec2SecurityGroupOwnerId: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.ec2SecurityGroupName = ec2SecurityGroupName
            self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
            self.status = status
            self.tags = tags
        }
    }

}

extension RedshiftClientTypes.ElasticIpStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticIp = "ElasticIp"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ElasticIpStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ElasticIpStatus()
            value.elasticIp = try reader["ElasticIp"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of the elastic IP (EIP) address.
    public struct ElasticIpStatus: Swift.Equatable {
        /// The elastic IP (EIP) address for the cluster.
        public var elasticIp: Swift.String?
        /// The status of the elastic IP (EIP) address.
        public var status: Swift.String?

        public init(
            elasticIp: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.elasticIp = elasticIp
            self.status = status
        }
    }

}

extension EnableLoggingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case clusterIdentifier = "ClusterIdentifier"
        case logDestinationType = "LogDestinationType"
        case logExports = "LogExports"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: ClientRuntime.Key("BucketName"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let logDestinationType = logDestinationType {
            try container.encode(logDestinationType, forKey: ClientRuntime.Key("LogDestinationType"))
        }
        if let logExports = logExports {
            if !logExports.isEmpty {
                var logExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogExports"))
                for (index0, string0) in logExports.enumerated() {
                    try logExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogExports"))
                try logExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try container.encode(s3KeyPrefix, forKey: ClientRuntime.Key("S3KeyPrefix"))
        }
        try container.encode("EnableLogging", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableLoggingInput {

    static func urlPathProvider(_ value: EnableLoggingInput) -> Swift.String? {
        return "/"
    }
}

///
public struct EnableLoggingInput: Swift.Equatable {
    /// The name of an existing S3 bucket where the log files are to be stored. Constraints:
    ///
    /// * Must be in the same region as the cluster
    ///
    /// * The cluster must have read bucket and put object permissions
    public var bucketName: Swift.String?
    /// The identifier of the cluster on which logging is to be started. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// The prefix applied to the log file names. Constraints:
    ///
    /// * Cannot exceed 512 characters
    ///
    /// * Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:
    ///
    /// * x00 to x20
    ///
    /// * x22
    ///
    /// * x27
    ///
    /// * x5c
    ///
    /// * x7f or larger
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.clusterIdentifier = clusterIdentifier
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.s3KeyPrefix = s3KeyPrefix
    }
}

extension EnableLoggingOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<EnableLoggingOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["EnableLoggingResult"]
            var value = EnableLoggingOutput()
            value.bucketName = try reader["BucketName"].readIfPresent()
            value.lastFailureMessage = try reader["LastFailureMessage"].readIfPresent()
            value.lastFailureTime = try reader["LastFailureTime"].readTimestampIfPresent(format: .dateTime)
            value.lastSuccessfulDeliveryTime = try reader["LastSuccessfulDeliveryTime"].readTimestampIfPresent(format: .dateTime)
            value.logDestinationType = try reader["LogDestinationType"].readIfPresent()
            value.logExports = try reader["LogExports"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent()
            value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
            return value
        }
    }
}

/// Describes the status of logging for a cluster.
public struct EnableLoggingOutput: Swift.Equatable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: ClientRuntime.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: ClientRuntime.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: ClientRuntime.Date? = nil,
        lastSuccessfulDeliveryTime: ClientRuntime.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

enum EnableLoggingOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "BucketNotFoundFault": return try await BucketNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientS3BucketPolicyFault": return try await InsufficientS3BucketPolicyFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3BucketNameFault": return try await InvalidS3BucketNameFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidS3KeyPrefixFault": return try await InvalidS3KeyPrefixFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension EnableSnapshotCopyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case destinationRegion = "DestinationRegion"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case retentionPeriod = "RetentionPeriod"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let destinationRegion = destinationRegion {
            try container.encode(destinationRegion, forKey: ClientRuntime.Key("DestinationRegion"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let retentionPeriod = retentionPeriod {
            try container.encode(retentionPeriod, forKey: ClientRuntime.Key("RetentionPeriod"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        try container.encode("EnableSnapshotCopy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableSnapshotCopyInput {

    static func urlPathProvider(_ value: EnableSnapshotCopyInput) -> Swift.String? {
        return "/"
    }
}

///
public struct EnableSnapshotCopyInput: Swift.Equatable {
    /// The unique identifier of the source cluster to copy snapshots from. Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The destination Amazon Web Services Region that you want to copy snapshots to. Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region) in the Amazon Web Services General Reference.
    /// This member is required.
    public var destinationRegion: Swift.String?
    /// The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Default: 7. Constraints: Must be at least 1 and no more than 35.
    public var retentionPeriod: Swift.Int?
    /// The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.
    public var snapshotCopyGrantName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        destinationRegion: Swift.String? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        retentionPeriod: Swift.Int? = nil,
        snapshotCopyGrantName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.destinationRegion = destinationRegion
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.retentionPeriod = retentionPeriod
        self.snapshotCopyGrantName = snapshotCopyGrantName
    }
}

extension EnableSnapshotCopyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<EnableSnapshotCopyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["EnableSnapshotCopyResult"]
            var value = EnableSnapshotCopyOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct EnableSnapshotCopyOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum EnableSnapshotCopyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CopyToRegionDisabledFault": return try await CopyToRegionDisabledFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IncompatibleOrderableOptions": return try await IncompatibleOrderableOptions.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyAlreadyEnabledFault": return try await SnapshotCopyAlreadyEnabledFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyGrantNotFoundFault": return try await SnapshotCopyGrantNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnknownSnapshotCopyRegionFault": return try await UnknownSnapshotCopyRegionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.Endpoint: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case port = "Port"
        case vpcEndpoints = "VpcEndpoints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let vpcEndpoints = vpcEndpoints {
            if !vpcEndpoints.isEmpty {
                var vpcEndpointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcEndpoints"))
                for (index0, vpcendpoint0) in vpcEndpoints.enumerated() {
                    try vpcEndpointsContainer.encode(vpcendpoint0, forKey: ClientRuntime.Key("VpcEndpoint.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcEndpointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcEndpoints"))
                try vpcEndpointsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Endpoint, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Endpoint()
            value.address = try reader["Address"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.vpcEndpoints = try reader["VpcEndpoints"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcEndpoint.readingClosure, memberNodeInfo: "VpcEndpoint", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a connection endpoint.
    public struct Endpoint: Swift.Equatable {
        /// The DNS address of the Cluster.
        public var address: Swift.String?
        /// The port that the database engine is listening on.
        public var port: Swift.Int?
        /// Describes a connection endpoint.
        public var vpcEndpoints: [RedshiftClientTypes.VpcEndpoint]?

        public init(
            address: Swift.String? = nil,
            port: Swift.Int? = nil,
            vpcEndpoints: [RedshiftClientTypes.VpcEndpoint]? = nil
        )
        {
            self.address = address
            self.port = port
            self.vpcEndpoints = vpcEndpoints
        }
    }

}

extension RedshiftClientTypes.EndpointAccess: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case clusterIdentifier = "ClusterIdentifier"
        case endpointCreateTime = "EndpointCreateTime"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case port = "Port"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcEndpoint = "VpcEndpoint"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endpointCreateTime = endpointCreateTime {
            try container.encodeTimestamp(endpointCreateTime, format: .dateTime, forKey: ClientRuntime.Key("EndpointCreateTime"))
        }
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let endpointStatus = endpointStatus {
            try container.encode(endpointStatus, forKey: ClientRuntime.Key("EndpointStatus"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let subnetGroupName = subnetGroupName {
            try container.encode(subnetGroupName, forKey: ClientRuntime.Key("SubnetGroupName"))
        }
        if let vpcEndpoint = vpcEndpoint {
            try container.encode(vpcEndpoint, forKey: ClientRuntime.Key("VpcEndpoint"))
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            if !vpcSecurityGroups.isEmpty {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                    try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                try vpcSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.EndpointAccess, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.EndpointAccess()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
            value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
            value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
            value.endpointName = try reader["EndpointName"].readIfPresent()
            value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.port = try reader["Port"].readIfPresent()
            value.address = try reader["Address"].readIfPresent()
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
            value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(readingClosure: RedshiftClientTypes.VpcEndpoint.readingClosure)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a Redshift-managed VPC endpoint.
    public struct EndpointAccess: Swift.Equatable {
        /// The DNS address of the endpoint.
        public var address: Swift.String?
        /// The cluster identifier of the cluster associated with the endpoint.
        public var clusterIdentifier: Swift.String?
        /// The time (UTC) that the endpoint was created.
        public var endpointCreateTime: ClientRuntime.Date?
        /// The name of the endpoint.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        public var endpointStatus: Swift.String?
        /// The port number on which the cluster accepts incoming connections.
        public var port: Swift.Int?
        /// The Amazon Web Services account ID of the owner of the cluster.
        public var resourceOwner: Swift.String?
        /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
        public var subnetGroupName: Swift.String?
        /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
        public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
        /// The security groups associated with the endpoint.
        public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

        public init(
            address: Swift.String? = nil,
            clusterIdentifier: Swift.String? = nil,
            endpointCreateTime: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            port: Swift.Int? = nil,
            resourceOwner: Swift.String? = nil,
            subnetGroupName: Swift.String? = nil,
            vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
            vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.address = address
            self.clusterIdentifier = clusterIdentifier
            self.endpointCreateTime = endpointCreateTime
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.port = port
            self.resourceOwner = resourceOwner
            self.subnetGroupName = subnetGroupName
            self.vpcEndpoint = vpcEndpoint
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension EndpointAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The account already has a Redshift-managed VPC endpoint with the given identifier.
public struct EndpointAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.EndpointAuthorization: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAllVPCs = "AllowedAllVPCs"
        case allowedVPCs = "AllowedVPCs"
        case authorizeTime = "AuthorizeTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterStatus = "ClusterStatus"
        case endpointCount = "EndpointCount"
        case grantee = "Grantee"
        case grantor = "Grantor"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedAllVPCs = allowedAllVPCs {
            try container.encode(allowedAllVPCs, forKey: ClientRuntime.Key("AllowedAllVPCs"))
        }
        if let allowedVPCs = allowedVPCs {
            if !allowedVPCs.isEmpty {
                var allowedVPCsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedVPCs"))
                for (index0, string0) in allowedVPCs.enumerated() {
                    try allowedVPCsContainer.encode(string0, forKey: ClientRuntime.Key("VpcIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var allowedVPCsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedVPCs"))
                try allowedVPCsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let authorizeTime = authorizeTime {
            try container.encodeTimestamp(authorizeTime, format: .dateTime, forKey: ClientRuntime.Key("AuthorizeTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterStatus = clusterStatus {
            try container.encode(clusterStatus, forKey: ClientRuntime.Key("ClusterStatus"))
        }
        if let endpointCount = endpointCount {
            try container.encode(endpointCount, forKey: ClientRuntime.Key("EndpointCount"))
        }
        if let grantee = grantee {
            try container.encode(grantee, forKey: ClientRuntime.Key("Grantee"))
        }
        if let grantor = grantor {
            try container.encode(grantor, forKey: ClientRuntime.Key("Grantor"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.EndpointAuthorization, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.EndpointAuthorization()
            value.grantor = try reader["Grantor"].readIfPresent()
            value.grantee = try reader["Grantee"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.authorizeTime = try reader["AuthorizeTime"].readTimestampIfPresent(format: .dateTime)
            value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.allowedAllVPCs = try reader["AllowedAllVPCs"].readIfPresent()
            value.allowedVPCs = try reader["AllowedVPCs"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "VpcIdentifier", isFlattened: false)
            value.endpointCount = try reader["EndpointCount"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
    public struct EndpointAuthorization: Swift.Equatable {
        /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
        public var allowedAllVPCs: Swift.Bool?
        /// The VPCs allowed access to the cluster.
        public var allowedVPCs: [Swift.String]?
        /// The time (UTC) when the authorization was created.
        public var authorizeTime: ClientRuntime.Date?
        /// The cluster identifier.
        public var clusterIdentifier: Swift.String?
        /// The status of the cluster.
        public var clusterStatus: Swift.String?
        /// The number of Redshift-managed VPC endpoints created for the authorization.
        public var endpointCount: Swift.Int?
        /// The Amazon Web Services account ID of the grantee of the cluster.
        public var grantee: Swift.String?
        /// The Amazon Web Services account ID of the cluster owner.
        public var grantor: Swift.String?
        /// The status of the authorization action.
        public var status: RedshiftClientTypes.AuthorizationStatus?

        public init(
            allowedAllVPCs: Swift.Bool? = nil,
            allowedVPCs: [Swift.String]? = nil,
            authorizeTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterStatus: Swift.String? = nil,
            endpointCount: Swift.Int? = nil,
            grantee: Swift.String? = nil,
            grantor: Swift.String? = nil,
            status: RedshiftClientTypes.AuthorizationStatus? = nil
        )
        {
            self.allowedAllVPCs = allowedAllVPCs
            self.allowedVPCs = allowedVPCs
            self.authorizeTime = authorizeTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterStatus = clusterStatus
            self.endpointCount = endpointCount
            self.grantee = grantee
            self.grantor = grantor
            self.status = status
        }
    }

}

extension EndpointAuthorizationAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointAuthorizationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The authorization already exists for this endpoint.
public struct EndpointAuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EndpointAuthorizationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointAuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The authorization for this endpoint can't be found.
public struct EndpointAuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EndpointAuthorizationsPerClusterLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointAuthorizationsPerClusterLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The number of endpoint authorizations per cluster has exceeded its limit.
public struct EndpointAuthorizationsPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationsPerClusterLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EndpointNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The endpoint name doesn't refer to an existing endpoint.
public struct EndpointNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EndpointsPerAuthorizationLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointsPerAuthorizationLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The number of Redshift-managed VPC endpoints per authorization has exceeded its limit.
public struct EndpointsPerAuthorizationLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointsPerAuthorizationLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EndpointsPerClusterLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EndpointsPerClusterLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The number of Redshift-managed VPC endpoints per cluster has exceeded its limit.
public struct EndpointsPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointsPerClusterLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.Event: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case eventCategories = "EventCategories"
        case eventId = "EventId"
        case message = "Message"
        case severity = "Severity"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let date = date {
            try container.encodeTimestamp(date, format: .dateTime, forKey: ClientRuntime.Key("Date"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Event, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Event()
            value.sourceIdentifier = try reader["SourceIdentifier"].readIfPresent()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.message = try reader["Message"].readIfPresent()
            value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "EventCategory", isFlattened: false)
            value.severity = try reader["Severity"].readIfPresent()
            value.date = try reader["Date"].readTimestampIfPresent(format: .dateTime)
            value.eventId = try reader["EventId"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an event.
    public struct Event: Swift.Equatable {
        /// The date and time of the event.
        public var date: ClientRuntime.Date?
        /// A list of the event categories. Values: Configuration, Management, Monitoring, Security, Pending
        public var eventCategories: [Swift.String]?
        /// The identifier of the event.
        public var eventId: Swift.String?
        /// The text of this event.
        public var message: Swift.String?
        /// The severity of the event. Values: ERROR, INFO
        public var severity: Swift.String?
        /// The identifier for the source of the event.
        public var sourceIdentifier: Swift.String?
        /// The source type for this event.
        public var sourceType: RedshiftClientTypes.SourceType?

        public init(
            date: ClientRuntime.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            eventId: Swift.String? = nil,
            message: Swift.String? = nil,
            severity: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: RedshiftClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.eventCategories = eventCategories
            self.eventId = eventId
            self.message = message
            self.severity = severity
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }

}

extension RedshiftClientTypes.EventCategoriesMap: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let events = events {
            if !events.isEmpty {
                var eventsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Events"))
                for (index0, eventinfomap0) in events.enumerated() {
                    try eventsContainer.encode(eventinfomap0, forKey: ClientRuntime.Key("EventInfoMap.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Events"))
                try eventsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.EventCategoriesMap, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.EventCategoriesMap()
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.events = try reader["Events"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EventInfoMap.readingClosure, memberNodeInfo: "EventInfoMap", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes event categories.
    public struct EventCategoriesMap: Swift.Equatable {
        /// The events in the event category.
        public var events: [RedshiftClientTypes.EventInfoMap]?
        /// The source type, such as cluster or cluster-snapshot, that the returned categories belong to.
        public var sourceType: Swift.String?

        public init(
            events: [RedshiftClientTypes.EventInfoMap]? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.events = events
            self.sourceType = sourceType
        }
    }

}

extension RedshiftClientTypes.EventInfoMap: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventCategories = "EventCategories"
        case eventDescription = "EventDescription"
        case eventId = "EventId"
        case severity = "Severity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let eventDescription = eventDescription {
            try container.encode(eventDescription, forKey: ClientRuntime.Key("EventDescription"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.EventInfoMap, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.EventInfoMap()
            value.eventId = try reader["EventId"].readIfPresent()
            value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "EventCategory", isFlattened: false)
            value.eventDescription = try reader["EventDescription"].readIfPresent()
            value.severity = try reader["Severity"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes event information.
    public struct EventInfoMap: Swift.Equatable {
        /// The category of an Amazon Redshift event.
        public var eventCategories: [Swift.String]?
        /// The description of an Amazon Redshift event.
        public var eventDescription: Swift.String?
        /// The identifier of an Amazon Redshift event.
        public var eventId: Swift.String?
        /// The severity of the event. Values: ERROR, INFO
        public var severity: Swift.String?

        public init(
            eventCategories: [Swift.String]? = nil,
            eventDescription: Swift.String? = nil,
            eventId: Swift.String? = nil,
            severity: Swift.String? = nil
        )
        {
            self.eventCategories = eventCategories
            self.eventDescription = eventDescription
            self.eventId = eventId
            self.severity = severity
        }
    }

}

extension RedshiftClientTypes.EventSubscription: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case custSubscriptionId = "CustSubscriptionId"
        case customerAwsId = "CustomerAwsId"
        case enabled = "Enabled"
        case eventCategoriesList = "EventCategoriesList"
        case severity = "Severity"
        case snsTopicArn = "SnsTopicArn"
        case sourceIdsList = "SourceIdsList"
        case sourceType = "SourceType"
        case status = "Status"
        case subscriptionCreationTime = "SubscriptionCreationTime"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let custSubscriptionId = custSubscriptionId {
            try container.encode(custSubscriptionId, forKey: ClientRuntime.Key("CustSubscriptionId"))
        }
        if let customerAwsId = customerAwsId {
            try container.encode(customerAwsId, forKey: ClientRuntime.Key("CustomerAwsId"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategoriesList = eventCategoriesList {
            if !eventCategoriesList.isEmpty {
                var eventCategoriesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategoriesList"))
                for (index0, string0) in eventCategoriesList.enumerated() {
                    try eventCategoriesListContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategoriesList"))
                try eventCategoriesListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIdsList = sourceIdsList {
            if !sourceIdsList.isEmpty {
                var sourceIdsListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIdsList"))
                for (index0, string0) in sourceIdsList.enumerated() {
                    try sourceIdsListContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIdsList"))
                try sourceIdsListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let subscriptionCreationTime = subscriptionCreationTime {
            try container.encodeTimestamp(subscriptionCreationTime, format: .dateTime, forKey: ClientRuntime.Key("SubscriptionCreationTime"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.EventSubscription, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.EventSubscription()
            value.customerAwsId = try reader["CustomerAwsId"].readIfPresent()
            value.custSubscriptionId = try reader["CustSubscriptionId"].readIfPresent()
            value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.subscriptionCreationTime = try reader["SubscriptionCreationTime"].readTimestampIfPresent(format: .dateTime)
            value.sourceType = try reader["SourceType"].readIfPresent()
            value.sourceIdsList = try reader["SourceIdsList"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "SourceId", isFlattened: false)
            value.eventCategoriesList = try reader["EventCategoriesList"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "EventCategory", isFlattened: false)
            value.severity = try reader["Severity"].readIfPresent()
            value.enabled = try reader["Enabled"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes event subscriptions.
    public struct EventSubscription: Swift.Equatable {
        /// The name of the Amazon Redshift event notification subscription.
        public var custSubscriptionId: Swift.String?
        /// The Amazon Web Services account associated with the Amazon Redshift event notification subscription.
        public var customerAwsId: Swift.String?
        /// A boolean value indicating whether the subscription is enabled; true indicates that the subscription is enabled.
        public var enabled: Swift.Bool?
        /// The list of Amazon Redshift event categories specified in the event notification subscription. Values: Configuration, Management, Monitoring, Security, Pending
        public var eventCategoriesList: [Swift.String]?
        /// The event severity specified in the Amazon Redshift event notification subscription. Values: ERROR, INFO
        public var severity: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.
        public var snsTopicArn: Swift.String?
        /// A list of the sources that publish events to the Amazon Redshift event notification subscription.
        public var sourceIdsList: [Swift.String]?
        /// The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action.
        public var sourceType: Swift.String?
        /// The status of the Amazon Redshift event notification subscription. Constraints:
        ///
        /// * Can be one of the following: active | no-permission | topic-not-exist
        ///
        /// * The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public var status: Swift.String?
        /// The date and time the Amazon Redshift event notification subscription was created.
        public var subscriptionCreationTime: ClientRuntime.Date?
        /// The list of tags for the event subscription.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            custSubscriptionId: Swift.String? = nil,
            customerAwsId: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            eventCategoriesList: [Swift.String]? = nil,
            severity: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            sourceIdsList: [Swift.String]? = nil,
            sourceType: Swift.String? = nil,
            status: Swift.String? = nil,
            subscriptionCreationTime: ClientRuntime.Date? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.custSubscriptionId = custSubscriptionId
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.eventCategoriesList = eventCategoriesList
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
            self.tags = tags
        }
    }

}

extension EventSubscriptionQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = EventSubscriptionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The request would exceed the allowed number of event subscriptions for this account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct EventSubscriptionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventSubscriptionQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FailoverPrimaryComputeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("FailoverPrimaryCompute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension FailoverPrimaryComputeInput {

    static func urlPathProvider(_ value: FailoverPrimaryComputeInput) -> Swift.String? {
        return "/"
    }
}

public struct FailoverPrimaryComputeInput: Swift.Equatable {
    /// The unique identifier of the cluster for which the primary compute unit will be failed over to another Availability Zone.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension FailoverPrimaryComputeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<FailoverPrimaryComputeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["FailoverPrimaryComputeResult"]
            var value = FailoverPrimaryComputeOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct FailoverPrimaryComputeOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum FailoverPrimaryComputeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetClusterCredentialsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoCreate = "AutoCreate"
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
        case dbGroups = "DbGroups"
        case dbName = "DbName"
        case dbUser = "DbUser"
        case durationSeconds = "DurationSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoCreate = autoCreate {
            try container.encode(autoCreate, forKey: ClientRuntime.Key("AutoCreate"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let dbGroups = dbGroups {
            if !dbGroups.isEmpty {
                var dbGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DbGroups"))
                for (index0, string0) in dbGroups.enumerated() {
                    try dbGroupsContainer.encode(string0, forKey: ClientRuntime.Key("DbGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DbGroups"))
                try dbGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DbName"))
        }
        if let dbUser = dbUser {
            try container.encode(dbUser, forKey: ClientRuntime.Key("DbUser"))
        }
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: ClientRuntime.Key("DurationSeconds"))
        }
        try container.encode("GetClusterCredentials", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetClusterCredentialsInput {

    static func urlPathProvider(_ value: GetClusterCredentialsInput) -> Swift.String? {
        return "/"
    }
}

/// The request parameters to get cluster credentials.
public struct GetClusterCredentialsInput: Swift.Equatable {
    /// Create a database user with the name specified for the user named in DbUser if one does not exist.
    public var autoCreate: Swift.Bool?
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the cluster credentials.
    public var customDomainName: Swift.String?
    /// A list of the names of existing database groups that the user named in DbUser will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC. Database group name constraints
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbGroups: [Swift.String]?
    /// The name of a database that DbUser is authorized to log on to. If DbName is not specified, DbUser can log on to any existing database. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The name of a database user. If a user name matching DbUser exists in the database, the temporary user credentials have the same permissions as the existing user. If DbUser doesn't exist in the database and Autocreate is True, a new user is created using the value for DbUser with PUBLIC permissions. If a database user matching the value for DbUser doesn't exist and Autocreate is False, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database. For more information, see [CREATE USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html) in the Amazon Redshift Database Developer Guide. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var dbUser: Swift.String?
    /// The number of seconds until the returned temporary password expires. Constraint: minimum 900, maximum 3600. Default: 900
    public var durationSeconds: Swift.Int?

    public init(
        autoCreate: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        dbGroups: [Swift.String]? = nil,
        dbName: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.autoCreate = autoCreate
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
        self.dbGroups = dbGroups
        self.dbName = dbName
        self.dbUser = dbUser
        self.durationSeconds = durationSeconds
    }
}

extension GetClusterCredentialsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetClusterCredentialsOutput(dbUser: \(Swift.String(describing: dbUser)), expiration: \(Swift.String(describing: expiration)), dbPassword: \"CONTENT_REDACTED\")"}
}

extension GetClusterCredentialsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetClusterCredentialsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetClusterCredentialsResult"]
            var value = GetClusterCredentialsOutput()
            value.dbPassword = try reader["DbPassword"].readIfPresent()
            value.dbUser = try reader["DbUser"].readIfPresent()
            value.expiration = try reader["Expiration"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

/// Temporary credentials with authorization to log on to an Amazon Redshift database.
public struct GetClusterCredentialsOutput: Swift.Equatable {
    /// A temporary password that authorizes the user name returned by DbUser to log on to the database DbName.
    public var dbPassword: Swift.String?
    /// A database user name that is authorized to log on to the database DbName using the password DbPassword. If the specified DbUser exists in the database, the new user name has the same database permissions as the the user named in DbUser. By default, the user is added to PUBLIC. If the DbGroups parameter is specifed, DbUser is added to the listed groups for any sessions created using these credentials.
    public var dbUser: Swift.String?
    /// The date and time the password in DbPassword expires.
    public var expiration: ClientRuntime.Date?

    public init(
        dbPassword: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        expiration: ClientRuntime.Date? = nil
    )
    {
        self.dbPassword = dbPassword
        self.dbUser = dbUser
        self.expiration = expiration
    }
}

enum GetClusterCredentialsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetClusterCredentialsWithIAMInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
        case dbName = "DbName"
        case durationSeconds = "DurationSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DbName"))
        }
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: ClientRuntime.Key("DurationSeconds"))
        }
        try container.encode("GetClusterCredentialsWithIAM", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetClusterCredentialsWithIAMInput {

    static func urlPathProvider(_ value: GetClusterCredentialsWithIAMInput) -> Swift.String? {
        return "/"
    }
}

public struct GetClusterCredentialsWithIAMInput: Swift.Equatable {
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the IAM message cluster credentials.
    public var customDomainName: Swift.String?
    /// The name of the database for which you are requesting credentials. If the database name is specified, the IAM policy must allow access to the resource dbname for the specified database name. If the database name is not specified, access to all databases is allowed.
    public var dbName: Swift.String?
    /// The number of seconds until the returned temporary password expires. Range: 900-3600. Default: 900.
    public var durationSeconds: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        dbName: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
        self.dbName = dbName
        self.durationSeconds = durationSeconds
    }
}

extension GetClusterCredentialsWithIAMOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetClusterCredentialsWithIAMOutput(dbUser: \(Swift.String(describing: dbUser)), expiration: \(Swift.String(describing: expiration)), nextRefreshTime: \(Swift.String(describing: nextRefreshTime)), dbPassword: \"CONTENT_REDACTED\")"}
}

extension GetClusterCredentialsWithIAMOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetClusterCredentialsWithIAMOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetClusterCredentialsWithIAMResult"]
            var value = GetClusterCredentialsWithIAMOutput()
            value.dbPassword = try reader["DbPassword"].readIfPresent()
            value.dbUser = try reader["DbUser"].readIfPresent()
            value.expiration = try reader["Expiration"].readTimestampIfPresent(format: .dateTime)
            value.nextRefreshTime = try reader["NextRefreshTime"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

public struct GetClusterCredentialsWithIAMOutput: Swift.Equatable {
    /// A temporary password that you provide when you connect to a database.
    public var dbPassword: Swift.String?
    /// A database user name that you provide when you connect to a database. The database user is mapped 1:1 to the source IAM identity.
    public var dbUser: Swift.String?
    /// The time (UTC) when the temporary password expires. After this timestamp, a log in with the temporary password fails.
    public var expiration: ClientRuntime.Date?
    /// Reserved for future use.
    public var nextRefreshTime: ClientRuntime.Date?

    public init(
        dbPassword: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        expiration: ClientRuntime.Date? = nil,
        nextRefreshTime: ClientRuntime.Date? = nil
    )
    {
        self.dbPassword = dbPassword
        self.dbUser = dbUser
        self.expiration = expiration
        self.nextRefreshTime = nextRefreshTime
    }
}

enum GetClusterCredentialsWithIAMOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetReservedNodeExchangeConfigurationOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("GetReservedNodeExchangeConfigurationOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetReservedNodeExchangeConfigurationOptionsInput {

    static func urlPathProvider(_ value: GetReservedNodeExchangeConfigurationOptionsInput) -> Swift.String? {
        return "/"
    }
}

public struct GetReservedNodeExchangeConfigurationOptionsInput: Swift.Equatable {
    /// The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.
    /// This member is required.
    public var actionType: RedshiftClientTypes.ReservedNodeExchangeActionType?
    /// The identifier for the cluster that is the source for a reserved-node exchange.
    public var clusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous GetReservedNodeExchangeConfigurationOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a Marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The identifier for the snapshot that is the source for the reserved-node exchange.
    public var snapshotIdentifier: Swift.String?

    public init(
        actionType: RedshiftClientTypes.ReservedNodeExchangeActionType? = nil,
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension GetReservedNodeExchangeConfigurationOptionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetReservedNodeExchangeConfigurationOptionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetReservedNodeExchangeConfigurationOptionsResult"]
            var value = GetReservedNodeExchangeConfigurationOptionsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedNodeConfigurationOptionList = try reader["ReservedNodeConfigurationOptionList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeConfigurationOption.readingClosure, memberNodeInfo: "ReservedNodeConfigurationOption", isFlattened: false)
            return value
        }
    }
}

public struct GetReservedNodeExchangeConfigurationOptionsOutput: Swift.Equatable {
    /// A pagination token provided by a previous GetReservedNodeExchangeConfigurationOptions request.
    public var marker: Swift.String?
    /// the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.
    public var reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeConfigurationOptionList = reservedNodeConfigurationOptionList
    }
}

enum GetReservedNodeExchangeConfigurationOptionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetReservedNodeExchangeOfferingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeId = "ReservedNodeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        try container.encode("GetReservedNodeExchangeOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetReservedNodeExchangeOfferingsInput {

    static func urlPathProvider(_ value: GetReservedNodeExchangeOfferingsInput) -> Swift.String? {
        return "/"
    }
}

///
public struct GetReservedNodeExchangeOfferingsInput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of ReservedNodeOfferings.
    public var marker: Swift.String?
    /// An integer setting the maximum number of ReservedNodeOfferings to retrieve.
    public var maxRecords: Swift.Int?
    /// A string representing the node identifier for the DC1 Reserved Node to be exchanged.
    /// This member is required.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeId = reservedNodeId
    }
}

extension GetReservedNodeExchangeOfferingsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetReservedNodeExchangeOfferingsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetReservedNodeExchangeOfferingsResult"]
            var value = GetReservedNodeExchangeOfferingsOutput()
            value.marker = try reader["Marker"].readIfPresent()
            value.reservedNodeOfferings = try reader["ReservedNodeOfferings"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeOffering.readingClosure, memberNodeInfo: "ReservedNodeOffering", isFlattened: false)
            return value
        }
    }
}

public struct GetReservedNodeExchangeOfferingsOutput: Swift.Equatable {
    /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a GetReservedNodeExchangeOfferings request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request.
    public var marker: Swift.String?
    /// Returns an array of [ReservedNodeOffering] objects.
    public var reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeOfferings = reservedNodeOfferings
    }
}

enum GetReservedNodeExchangeOfferingsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("GetResourcePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

public struct GetResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is fetched.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension GetResourcePolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetResourcePolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetResourcePolicyResult"]
            var value = GetResourcePolicyOutput()
            value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent(readingClosure: RedshiftClientTypes.ResourcePolicy.readingClosure)
            return value
        }
    }
}

public struct GetResourcePolicyOutput: Swift.Equatable {
    /// The content of the resource policy.
    public var resourcePolicy: RedshiftClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: RedshiftClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

enum GetResourcePolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidPolicyFault": return try await InvalidPolicyFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.HsmClientCertificate: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmClientCertificatePublicKey = "HsmClientCertificatePublicKey"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmClientCertificatePublicKey = hsmClientCertificatePublicKey {
            try container.encode(hsmClientCertificatePublicKey, forKey: ClientRuntime.Key("HsmClientCertificatePublicKey"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.HsmClientCertificate, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.HsmClientCertificate()
            value.hsmClientCertificateIdentifier = try reader["HsmClientCertificateIdentifier"].readIfPresent()
            value.hsmClientCertificatePublicKey = try reader["HsmClientCertificatePublicKey"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
    public struct HsmClientCertificate: Swift.Equatable {
        /// The identifier of the HSM client certificate.
        public var hsmClientCertificateIdentifier: Swift.String?
        /// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
        public var hsmClientCertificatePublicKey: Swift.String?
        /// The list of tags for the HSM client certificate.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmClientCertificatePublicKey: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmClientCertificatePublicKey = hsmClientCertificatePublicKey
            self.tags = tags
        }
    }

}

extension HsmClientCertificateAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HsmClientCertificateAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is already an existing Amazon Redshift HSM client certificate with the specified identifier.
public struct HsmClientCertificateAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HsmClientCertificateNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HsmClientCertificateNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is no Amazon Redshift HSM client certificate with the specified identifier.
public struct HsmClientCertificateNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HsmClientCertificateQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HsmClientCertificateQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota for HSM client certificates has been reached. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct HsmClientCertificateQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.HsmConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case hsmIpAddress = "HsmIpAddress"
        case hsmPartitionName = "HsmPartitionName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let hsmIpAddress = hsmIpAddress {
            try container.encode(hsmIpAddress, forKey: ClientRuntime.Key("HsmIpAddress"))
        }
        if let hsmPartitionName = hsmPartitionName {
            try container.encode(hsmPartitionName, forKey: ClientRuntime.Key("HsmPartitionName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.HsmConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.HsmConfiguration()
            value.hsmConfigurationIdentifier = try reader["HsmConfigurationIdentifier"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.hsmIpAddress = try reader["HsmIpAddress"].readIfPresent()
            value.hsmPartitionName = try reader["HsmPartitionName"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
    public struct HsmConfiguration: Swift.Equatable {
        /// A text description of the HSM configuration.
        public var description: Swift.String?
        /// The name of the Amazon Redshift HSM configuration.
        public var hsmConfigurationIdentifier: Swift.String?
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public var hsmIpAddress: Swift.String?
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public var hsmPartitionName: Swift.String?
        /// The list of tags for the HSM configuration.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            description: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            hsmIpAddress: Swift.String? = nil,
            hsmPartitionName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.hsmIpAddress = hsmIpAddress
            self.hsmPartitionName = hsmPartitionName
            self.tags = tags
        }
    }

}

extension HsmConfigurationAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HsmConfigurationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is already an existing Amazon Redshift HSM configuration with the specified identifier.
public struct HsmConfigurationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HsmConfigurationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HsmConfigurationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is no Amazon Redshift HSM configuration with the specified identifier.
public struct HsmConfigurationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension HsmConfigurationQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HsmConfigurationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota for HSM configurations has been reached. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct HsmConfigurationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.HsmStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.HsmStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.HsmStatus()
            value.hsmClientCertificateIdentifier = try reader["HsmClientCertificateIdentifier"].readIfPresent()
            value.hsmConfigurationIdentifier = try reader["HsmConfigurationIdentifier"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of changes to HSM settings.
    public struct HsmStatus: Swift.Equatable {
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public var hsmClientCertificateIdentifier: Swift.String?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public var hsmConfigurationIdentifier: Swift.String?
        /// Reports whether the Amazon Redshift cluster has finished applying any HSM settings changes specified in a modify cluster command. Values: active, applying
        public var status: Swift.String?

        public init(
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.status = status
        }
    }

}

extension RedshiftClientTypes.IPRange: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.IPRange, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.IPRange()
            value.status = try reader["Status"].readIfPresent()
            value.cidrip = try reader["CIDRIP"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an IP range used in a security group.
    public struct IPRange: Swift.Equatable {
        /// The IP range in Classless Inter-Domain Routing (CIDR) notation.
        public var cidrip: Swift.String?
        /// The status of the IP range, for example, "authorized".
        public var status: Swift.String?
        /// The list of tags for the IP range.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            cidrip: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.cidrip = cidrip
            self.status = status
            self.tags = tags
        }
    }

}

extension InProgressTableRestoreQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InProgressTableRestoreQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have exceeded the allowed number of table restore requests. Wait for your current table restore requests to complete before making a new request.
public struct InProgressTableRestoreQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InProgressTableRestoreQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.InboundIntegration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "CreateTime"
        case errors = "Errors"
        case integrationArn = "IntegrationArn"
        case sourceArn = "SourceArn"
        case status = "Status"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let errors = errors {
            if !errors.isEmpty {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Errors"))
                for (index0, integrationerror0) in errors.enumerated() {
                    try errorsContainer.encode(integrationerror0, forKey: ClientRuntime.Key("IntegrationError.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Errors"))
                try errorsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let integrationArn = integrationArn {
            try container.encode(integrationArn, forKey: ClientRuntime.Key("IntegrationArn"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.InboundIntegration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.InboundIntegration()
            value.integrationArn = try reader["IntegrationArn"].readIfPresent()
            value.sourceArn = try reader["SourceArn"].readIfPresent()
            value.targetArn = try reader["TargetArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IntegrationError.readingClosure, memberNodeInfo: "IntegrationError", isFlattened: false)
            value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The content of an inbound integration.
    public struct InboundIntegration: Swift.Equatable {
        /// The creation time of an inbound integration.
        public var createTime: ClientRuntime.Date?
        /// The outstanding errors of an inbound integration. Each item is an "IntegrationError". This is null if there is no error.
        public var errors: [RedshiftClientTypes.IntegrationError]?
        /// The Amazon Resource Name (ARN) of an inbound integration.
        public var integrationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the source of an inbound integration.
        public var sourceArn: Swift.String?
        /// The status of an inbound integration.
        public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
        /// The Amazon Resource Name (ARN) of the target of an inbound integration.
        public var targetArn: Swift.String?

        public init(
            createTime: ClientRuntime.Date? = nil,
            errors: [RedshiftClientTypes.IntegrationError]? = nil,
            integrationArn: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.createTime = createTime
            self.errors = errors
            self.integrationArn = integrationArn
            self.sourceArn = sourceArn
            self.status = status
            self.targetArn = targetArn
        }
    }

}

extension IncompatibleOrderableOptions {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IncompatibleOrderableOptions()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified options are incompatible.
public struct IncompatibleOrderableOptions: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleOrderableOptions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InsufficientClusterCapacityFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The number of nodes specified exceeds the allotted capacity of the cluster.
public struct InsufficientClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientClusterCapacity" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InsufficientS3BucketPolicyFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientS3BucketPolicyFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster does not have read bucket or put object permissions on the S3 bucket specified when enabling logging.
public struct InsufficientS3BucketPolicyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientS3BucketPolicyFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.IntegrationError: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.IntegrationError, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.IntegrationError()
            value.errorCode = try reader["ErrorCode"].readIfPresent()
            value.errorMessage = try reader["ErrorMessage"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The error of an inbound integration.
    public struct IntegrationError: Swift.Equatable {
        /// The error code of an inbound integration error.
        /// This member is required.
        public var errorCode: Swift.String?
        /// The error message of an inbound integration error.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension IntegrationNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IntegrationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The integration can't be found.
public struct IntegrationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidAuthenticationProfileRequestFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidAuthenticationProfileRequestFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The authentication profile request is not valid. The profile name can't be null or empty. The authentication profile API operation must be available in the Amazon Web Services Region.
public struct InvalidAuthenticationProfileRequestFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAuthenticationProfileRequestFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidAuthorizationStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidAuthorizationStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The status of the authorization is not valid.
public struct InvalidAuthorizationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAuthorizationState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterParameterGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterParameterGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster parameter group action can not be completed because another task is in progress that involves the parameter group. Wait a few moments and try the operation again.
public struct InvalidClusterParameterGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterParameterGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterSecurityGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterSecurityGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The state of the cluster security group is not available.
public struct InvalidClusterSecurityGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSecurityGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterSnapshotScheduleStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterSnapshotScheduleStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster snapshot schedule state is not valid.
public struct InvalidClusterSnapshotScheduleStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSnapshotScheduleState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterSnapshotStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified cluster snapshot is not in the available state, or other accounts are authorized to access the snapshot.
public struct InvalidClusterSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSnapshotState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified cluster is not in the available state.
public struct InvalidClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterSubnetGroupStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterSubnetGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster subnet group cannot be deleted because it is in use.
public struct InvalidClusterSubnetGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSubnetGroupStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterSubnetStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterSubnetStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The state of the subnet is invalid.
public struct InvalidClusterSubnetStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSubnetStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidClusterTrackFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidClusterTrackFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The provided cluster track name is not valid.
public struct InvalidClusterTrackFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterTrack" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDataShareFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidDataShareFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is an error with the datashare.
public struct InvalidDataShareFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDataShareFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidElasticIpFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidElasticIpFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The Elastic IP (EIP) is invalid or cannot be found.
public struct InvalidElasticIpFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidElasticIpFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidEndpointStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidEndpointStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The status of the endpoint is not valid.
public struct InvalidEndpointStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEndpointState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidHsmClientCertificateStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidHsmClientCertificateStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified HSM client certificate is not in the available state, or it is still in use by one or more Amazon Redshift clusters.
public struct InvalidHsmClientCertificateStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHsmClientCertificateStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidHsmConfigurationStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidHsmConfigurationStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified HSM configuration is not in the available state, or it is still in use by one or more Amazon Redshift clusters.
public struct InvalidHsmConfigurationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHsmConfigurationStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidNamespaceFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidNamespaceFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The namespace isn't valid because the namespace doesn't exist. Provide a valid namespace.
public struct InvalidNamespaceFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNamespaceFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidPolicyFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidPolicyFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The resource policy isn't valid.
public struct InvalidPolicyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicyFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidReservedNodeStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidReservedNodeStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the Reserved Node being exchanged is not in an active state.
public struct InvalidReservedNodeStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidReservedNodeState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRestoreFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidRestoreFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The restore is invalid.
public struct InvalidRestoreFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRestore" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRetentionPeriodFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidRetentionPeriodFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The retention period specified is either in the past or is not a valid value. The value must be either -1 or an integer between 1 and 3,653.
public struct InvalidRetentionPeriodFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRetentionPeriodFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidS3BucketNameFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidS3BucketNameFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The S3 bucket name is invalid. For more information about naming rules, go to [Bucket Restrictions and Limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html) in the Amazon Simple Storage Service (S3) Developer Guide.
public struct InvalidS3BucketNameFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3BucketNameFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidS3KeyPrefixFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidS3KeyPrefixFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The string specified for the logging S3 key prefix does not comply with the documented constraints.
public struct InvalidS3KeyPrefixFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3KeyPrefixFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidScheduleFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidScheduleFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The schedule you submitted isn't valid.
public struct InvalidScheduleFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSchedule" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidScheduledActionFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidScheduledActionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The scheduled action is not valid.
public struct InvalidScheduledActionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidScheduledAction" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSnapshotCopyGrantStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSnapshotCopyGrantStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The snapshot copy grant can't be deleted because it is used by one or more clusters.
public struct InvalidSnapshotCopyGrantStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSnapshotCopyGrantStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSubnet {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSubnet()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested subnet is not valid, or not all of the subnets are in the same VPC.
public struct InvalidSubnet: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSubscriptionStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSubscriptionStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The subscription request is invalid because it is a duplicate request. This subscription request is already in progress.
public struct InvalidSubscriptionStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubscriptionStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidTableRestoreArgumentFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidTableRestoreArgumentFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The value specified for the sourceDatabaseName, sourceSchemaName, or sourceTableName parameter, or a combination of these, doesn't exist in the snapshot.
public struct InvalidTableRestoreArgumentFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTableRestoreArgument" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidTagFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidTagFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The tag is invalid.
public struct InvalidTagFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidUsageLimitFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidUsageLimitFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The usage limit is not valid.
public struct InvalidUsageLimitFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUsageLimit" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidVPCNetworkStateFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidVPCNetworkStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster subnet group does not cover all Availability Zones.
public struct InvalidVPCNetworkStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidVPCNetworkStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension Ipv6CidrBlockNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = Ipv6CidrBlockNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There are no subnets in your VPC with associated IPv6 CIDR blocks. To use dual-stack mode, associate an IPv6 CIDR block with each subnet in your VPC.
public struct Ipv6CidrBlockNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Ipv6CidrBlockNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.LakeFormationQuery: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorization = "Authorization"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorization = authorization {
            try container.encode(authorization, forKey: ClientRuntime.Key("Authorization"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.LakeFormationQuery, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.LakeFormationQuery()
            value.authorization = try reader["Authorization"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The Lake Formation scope.
    public struct LakeFormationQuery: Swift.Equatable {
        /// Determines whether the query scope is enabled or disabled.
        /// This member is required.
        public var authorization: RedshiftClientTypes.ServiceAuthorization?

        public init(
            authorization: RedshiftClientTypes.ServiceAuthorization? = nil
        )
        {
            self.authorization = authorization
        }
    }

}

extension RedshiftClientTypes.LakeFormationScopeUnion: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lakeformationquery = "LakeFormationQuery"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .lakeformationquery(lakeformationquery):
                try container.encode(lakeformationquery, forKey: .lakeformationquery)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.LakeFormationScopeUnion, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            let name = reader.children.first?.nodeInfo.name
            switch name {
                case "LakeFormationQuery":
                    return .lakeformationquery(try reader["LakeFormationQuery"].read(readingClosure: RedshiftClientTypes.LakeFormationQuery.readingClosure))
                default:
                    return .sdkUnknown(name ?? "")
            }
        }
    }
}

extension RedshiftClientTypes {
    /// A list of scopes set up for Lake Formation integration.
    public enum LakeFormationScopeUnion: Swift.Equatable {
        /// The Lake Formation scope.
        case lakeformationquery(RedshiftClientTypes.LakeFormationQuery)
        case sdkUnknown(Swift.String)
    }

}

extension LimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = LimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The encryption key has exceeded its grant limit in Amazon Web Services KMS.
public struct LimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum LogDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatch
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDestinationType] {
            return [
                .cloudwatch,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatch: return "cloudwatch"
            case .s3: return "s3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogDestinationType(rawValue: rawValue) ?? LogDestinationType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.MaintenanceTrack: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseVersion = "DatabaseVersion"
        case maintenanceTrackName = "MaintenanceTrackName"
        case updateTargets = "UpdateTargets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseVersion = databaseVersion {
            try container.encode(databaseVersion, forKey: ClientRuntime.Key("DatabaseVersion"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let updateTargets = updateTargets {
            if !updateTargets.isEmpty {
                var updateTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UpdateTargets"))
                for (index0, updatetarget0) in updateTargets.enumerated() {
                    try updateTargetsContainer.encode(updatetarget0, forKey: ClientRuntime.Key("UpdateTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var updateTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UpdateTargets"))
                try updateTargetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.MaintenanceTrack, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.MaintenanceTrack()
            value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
            value.databaseVersion = try reader["DatabaseVersion"].readIfPresent()
            value.updateTargets = try reader["UpdateTargets"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.UpdateTarget.readingClosure, memberNodeInfo: "UpdateTarget", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Defines a maintenance track that determines which Amazon Redshift version to apply during a maintenance window. If the value for MaintenanceTrack is current, the cluster is updated to the most recently certified maintenance release. If the value is trailing, the cluster is updated to the previously certified maintenance release.
    public struct MaintenanceTrack: Swift.Equatable {
        /// The version number for the cluster release.
        public var databaseVersion: Swift.String?
        /// The name of the maintenance track. Possible values are current and trailing.
        public var maintenanceTrackName: Swift.String?
        /// An array of [UpdateTarget] objects to update with the maintenance track.
        public var updateTargets: [RedshiftClientTypes.UpdateTarget]?

        public init(
            databaseVersion: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            updateTargets: [RedshiftClientTypes.UpdateTarget]? = nil
        )
        {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.updateTargets = updateTargets
        }
    }

}

extension RedshiftClientTypes {
    public enum Mode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case highPerformance
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .highPerformance,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .highPerformance: return "high-performance"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mode(rawValue: rawValue) ?? Mode.sdkUnknown(rawValue)
        }
    }
}

extension ModifyAquaConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("ModifyAquaConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyAquaConfigurationInput {

    static func urlPathProvider(_ value: ModifyAquaConfigurationInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyAquaConfigurationInput: Swift.Equatable {
    /// This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The identifier of the cluster to be modified.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.clusterIdentifier = clusterIdentifier
    }
}

extension ModifyAquaConfigurationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyAquaConfigurationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyAquaConfigurationResult"]
            var value = ModifyAquaConfigurationOutput()
            value.aquaConfiguration = try reader["AquaConfiguration"].readIfPresent(readingClosure: RedshiftClientTypes.AquaConfiguration.readingClosure)
            return value
        }
    }
}

public struct ModifyAquaConfigurationOutput: Swift.Equatable {
    /// This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfiguration: RedshiftClientTypes.AquaConfiguration?

    public init(
        aquaConfiguration: RedshiftClientTypes.AquaConfiguration? = nil
    )
    {
        self.aquaConfiguration = aquaConfiguration
    }
}

enum ModifyAquaConfigurationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyAuthenticationProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileContent = authenticationProfileContent {
            try container.encode(authenticationProfileContent, forKey: ClientRuntime.Key("AuthenticationProfileContent"))
        }
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("ModifyAuthenticationProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyAuthenticationProfileInput {

    static func urlPathProvider(_ value: ModifyAuthenticationProfileInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyAuthenticationProfileInput: Swift.Equatable {
    /// The new content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
    /// This member is required.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile to replace.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

extension ModifyAuthenticationProfileOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyAuthenticationProfileOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyAuthenticationProfileResult"]
            var value = ModifyAuthenticationProfileOutput()
            value.authenticationProfileContent = try reader["AuthenticationProfileContent"].readIfPresent()
            value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
            return value
        }
    }
}

public struct ModifyAuthenticationProfileOutput: Swift.Equatable {
    /// The updated content of the authentication profile in JSON format.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile that was replaced.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

enum ModifyAuthenticationProfileOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthenticationProfileNotFoundFault": return try await AuthenticationProfileNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AuthenticationProfileQuotaExceededFault": return try await AuthenticationProfileQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterDbRevisionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case revisionTarget = "RevisionTarget"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let revisionTarget = revisionTarget {
            try container.encode(revisionTarget, forKey: ClientRuntime.Key("RevisionTarget"))
        }
        try container.encode("ModifyClusterDbRevision", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterDbRevisionInput {

    static func urlPathProvider(_ value: ModifyClusterDbRevisionInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyClusterDbRevisionInput: Swift.Equatable {
    /// The unique identifier of a cluster whose database revision you want to modify. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The identifier of the database revision. You can retrieve this value from the response to the [DescribeClusterDbRevisions] request.
    /// This member is required.
    public var revisionTarget: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        revisionTarget: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.revisionTarget = revisionTarget
    }
}

extension ModifyClusterDbRevisionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterDbRevisionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterDbRevisionResult"]
            var value = ModifyClusterDbRevisionOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ModifyClusterDbRevisionOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ModifyClusterDbRevisionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterOnLatestRevision": return try await ClusterOnLatestRevisionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterIamRolesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addIamRoles = "AddIamRoles"
        case clusterIdentifier = "ClusterIdentifier"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case removeIamRoles = "RemoveIamRoles"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addIamRoles = addIamRoles {
            if !addIamRoles.isEmpty {
                var addIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddIamRoles"))
                for (index0, string0) in addIamRoles.enumerated() {
                    try addIamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var addIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddIamRoles"))
                try addIamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let removeIamRoles = removeIamRoles {
            if !removeIamRoles.isEmpty {
                var removeIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveIamRoles"))
                for (index0, string0) in removeIamRoles.enumerated() {
                    try removeIamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var removeIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveIamRoles"))
                try removeIamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyClusterIamRoles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterIamRolesInput {

    static func urlPathProvider(_ value: ModifyClusterIamRolesInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyClusterIamRolesInput: Swift.Equatable {
    /// Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format.
    public var addIamRoles: [Swift.String]?
    /// The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified.
    public var defaultIamRoleArn: Swift.String?
    /// Zero or more IAM roles in ARN format to disassociate from the cluster.
    public var removeIamRoles: [Swift.String]?

    public init(
        addIamRoles: [Swift.String]? = nil,
        clusterIdentifier: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        removeIamRoles: [Swift.String]? = nil
    )
    {
        self.addIamRoles = addIamRoles
        self.clusterIdentifier = clusterIdentifier
        self.defaultIamRoleArn = defaultIamRoleArn
        self.removeIamRoles = removeIamRoles
    }
}

extension ModifyClusterIamRolesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterIamRolesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterIamRolesResult"]
            var value = ModifyClusterIamRolesOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ModifyClusterIamRolesOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ModifyClusterIamRolesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModifyClusterInput(allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneRelocation: \(Swift.String(describing: availabilityZoneRelocation)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterParameterGroupName: \(Swift.String(describing: clusterParameterGroupName)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), elasticIp: \(Swift.String(describing: elasticIp)), encrypted: \(Swift.String(describing: encrypted)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), ipAddressType: \(Swift.String(describing: ipAddressType)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manageMasterPassword: \(Swift.String(describing: manageMasterPassword)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterPasswordSecretKmsKeyId: \(Swift.String(describing: masterPasswordSecretKmsKeyId)), multiAZ: \(Swift.String(describing: multiAZ)), newClusterIdentifier: \(Swift.String(describing: newClusterIdentifier)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), port: \(Swift.String(describing: port)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension ModifyClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manageMasterPassword = "ManageMasterPassword"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUserPassword = "MasterUserPassword"
        case multiAZ = "MultiAZ"
        case newClusterIdentifier = "NewClusterIdentifier"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: ClientRuntime.Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: ClientRuntime.Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, string0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manageMasterPassword = manageMasterPassword {
            try container.encode(manageMasterPassword, forKey: ClientRuntime.Key("ManageMasterPassword"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let newClusterIdentifier = newClusterIdentifier {
            try container.encode(newClusterIdentifier, forKey: ClientRuntime.Key("NewClusterIdentifier"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterInput {

    static func urlPathProvider(_ value: ModifyClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyClusterInput: Swift.Equatable {
    /// If true, major version upgrades will be applied automatically to the cluster during the maintenance window. Default: false
    public var allowVersionUpgrade: Swift.Bool?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: Uses existing setting. Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The option to initiate relocation for an Amazon Redshift cluster to the target Availability Zone.
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
    public var availabilityZoneRelocation: Swift.Bool?
    /// The unique identifier of the cluster to be modified. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use [RebootCluster]. Default: Uses existing setting. Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.
    public var clusterParameterGroupName: Swift.String?
    /// A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible. Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var clusterSecurityGroups: [Swift.String]?
    /// The new cluster type. When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use [DescribeResize] to track the progress of the resize request. Valid Values:  multi-node | single-node
    public var clusterType: Swift.String?
    /// The new version number of the Amazon Redshift engine to upgrade to. For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide. Example: 1.0
    public var clusterVersion: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to [Supported Platforms to Launch Your Cluster](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms) in the Amazon Redshift Cluster Management Guide.
    public var elasticIp: Swift.String?
    /// Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the KmsKeyId parameter, we encrypt the cluster with the provided KmsKeyId. If you don't provide a KmsKeyId, we encrypt with the default key. If the value is not encrypted (false), then the cluster is decrypted.
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// The IP address types that the cluster supports. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
    public var kmsKeyId: Swift.String?
    /// The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage this cluster's admin credentials. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
    public var manageMasterPassword: Swift.Bool?
    /// The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// The new password for the cluster admin user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response. You can't use MasterUserPassword if ManageMasterPassword is true. Operations never return the password, so this operation provides a way to regain access to the admin user account for a cluster if the password is lost. Default: Uses existing setting. Constraints:
    ///
    /// * Must be between 8 and 64 characters in length.
    ///
    /// * Must contain at least one uppercase letter.
    ///
    /// * Must contain at least one lowercase letter.
    ///
    /// * Must contain one number.
    ///
    /// * Can be any printable ASCII character (ASCII code 33-126) except ' (single quote), " (double quote), \, /, or @.
    public var masterUserPassword: Swift.String?
    /// If true and the cluster is currently only deployed in a single Availability Zone, the cluster will be modified to be deployed in two Availability Zones.
    public var multiAZ: Swift.Bool?
    /// The new identifier for the cluster. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    ///
    ///
    /// Example: examplecluster
    public var newClusterIdentifier: Swift.String?
    /// The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter. For more information about resizing clusters, go to [Resizing Clusters in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html) in the Amazon Redshift Cluster Management Guide. Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
    public var nodeType: Swift.String?
    /// The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter. For more information about resizing clusters, go to [Resizing Clusters in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html) in the Amazon Redshift Cluster Management Guide. Valid Values: Integer greater than 0.
    public var numberOfNodes: Swift.Int?
    /// The option to change the port of an Amazon Redshift cluster.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage. This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
    public var publiclyAccessible: Swift.Bool?
    /// A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allowVersionUpgrade: Swift.Bool? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterType: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        newClusterIdentifier: Swift.String? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allowVersionUpgrade = allowVersionUpgrade
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterType = clusterType
        self.clusterVersion = clusterVersion
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.masterUserPassword = masterUserPassword
        self.multiAZ = multiAZ
        self.newClusterIdentifier = newClusterIdentifier
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyClusterMaintenanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case deferMaintenance = "DeferMaintenance"
        case deferMaintenanceDuration = "DeferMaintenanceDuration"
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let deferMaintenance = deferMaintenance {
            try container.encode(deferMaintenance, forKey: ClientRuntime.Key("DeferMaintenance"))
        }
        if let deferMaintenanceDuration = deferMaintenanceDuration {
            try container.encode(deferMaintenanceDuration, forKey: ClientRuntime.Key("DeferMaintenanceDuration"))
        }
        if let deferMaintenanceEndTime = deferMaintenanceEndTime {
            try container.encodeTimestamp(deferMaintenanceEndTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceEndTime"))
        }
        if let deferMaintenanceIdentifier = deferMaintenanceIdentifier {
            try container.encode(deferMaintenanceIdentifier, forKey: ClientRuntime.Key("DeferMaintenanceIdentifier"))
        }
        if let deferMaintenanceStartTime = deferMaintenanceStartTime {
            try container.encodeTimestamp(deferMaintenanceStartTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceStartTime"))
        }
        try container.encode("ModifyClusterMaintenance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterMaintenanceInput {

    static func urlPathProvider(_ value: ModifyClusterMaintenanceInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyClusterMaintenanceInput: Swift.Equatable {
    /// A unique identifier for the cluster.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A boolean indicating whether to enable the deferred maintenance window.
    public var deferMaintenance: Swift.Bool?
    /// An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
    public var deferMaintenanceDuration: Swift.Int?
    /// A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
    public var deferMaintenanceEndTime: ClientRuntime.Date?
    /// A unique identifier for the deferred maintenance window.
    public var deferMaintenanceIdentifier: Swift.String?
    /// A timestamp indicating the start time for the deferred maintenance window.
    public var deferMaintenanceStartTime: ClientRuntime.Date?

    public init(
        clusterIdentifier: Swift.String? = nil,
        deferMaintenance: Swift.Bool? = nil,
        deferMaintenanceDuration: Swift.Int? = nil,
        deferMaintenanceEndTime: ClientRuntime.Date? = nil,
        deferMaintenanceIdentifier: Swift.String? = nil,
        deferMaintenanceStartTime: ClientRuntime.Date? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.deferMaintenance = deferMaintenance
        self.deferMaintenanceDuration = deferMaintenanceDuration
        self.deferMaintenanceEndTime = deferMaintenanceEndTime
        self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
        self.deferMaintenanceStartTime = deferMaintenanceStartTime
    }
}

extension ModifyClusterMaintenanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterMaintenanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterMaintenanceResult"]
            var value = ModifyClusterMaintenanceOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ModifyClusterMaintenanceOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ModifyClusterMaintenanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterResult"]
            var value = ModifyClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ModifyClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ModifyClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterAlreadyExists": return try await ClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterTrack": return try await InvalidClusterTrackFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidElasticIpFault": return try await InvalidElasticIpFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "Ipv6CidrBlockNotFoundFault": return try await Ipv6CidrBlockNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TableLimitExceeded": return try await TableLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOptionFault": return try await UnsupportedOptionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterParameterGroupInput {

    static func urlPathProvider(_ value: ModifyClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

/// Describes a modify cluster parameter group operation.
public struct ModifyClusterParameterGroupInput: Swift.Equatable {
    /// The name of the parameter group to be modified.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request. For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional. For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.
    /// This member is required.
    public var parameters: [RedshiftClientTypes.Parameter]?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameters = parameters
    }
}

extension ModifyClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterParameterGroupResult"]
            var value = ModifyClusterParameterGroupOutput()
            value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
            value.parameterGroupStatus = try reader["ParameterGroupStatus"].readIfPresent()
            return value
        }
    }
}

///
public struct ModifyClusterParameterGroupOutput: Swift.Equatable {
    /// The name of the cluster parameter group.
    public var parameterGroupName: Swift.String?
    /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
    public var parameterGroupStatus: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameterGroupStatus: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameterGroupStatus = parameterGroupStatus
    }
}

enum ModifyClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterParameterGroupState": return try await InvalidClusterParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force = "Force"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("ModifyClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterSnapshotInput {

    static func urlPathProvider(_ value: ModifyClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyClusterSnapshotInput: Swift.Equatable {
    /// A Boolean option to override an exception if the retention period has already passed.
    public var force: Swift.Bool?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The identifier of the snapshot whose setting you want to modify.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?

    public init(
        force: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.force = force
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension ModifyClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterSnapshotResult"]
            var value = ModifyClusterSnapshotOutput()
            value.snapshot = try reader["Snapshot"].readIfPresent(readingClosure: RedshiftClientTypes.Snapshot.readingClosure)
            return value
        }
    }
}

public struct ModifyClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

enum ModifyClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterSnapshotScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case disassociateSchedule = "DisassociateSchedule"
        case scheduleIdentifier = "ScheduleIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let disassociateSchedule = disassociateSchedule {
            try container.encode(disassociateSchedule, forKey: ClientRuntime.Key("DisassociateSchedule"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        try container.encode("ModifyClusterSnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterSnapshotScheduleInput {

    static func urlPathProvider(_ value: ModifyClusterSnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyClusterSnapshotScheduleInput: Swift.Equatable {
    /// A unique identifier for the cluster whose snapshot schedule you want to modify.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
    public var disassociateSchedule: Swift.Bool?
    /// A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
    public var scheduleIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        disassociateSchedule: Swift.Bool? = nil,
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.disassociateSchedule = disassociateSchedule
        self.scheduleIdentifier = scheduleIdentifier
    }
}

extension ModifyClusterSnapshotScheduleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterSnapshotScheduleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return ModifyClusterSnapshotScheduleOutput()
        }
    }
}

public struct ModifyClusterSnapshotScheduleOutput: Swift.Equatable {

    public init() { }
}

enum ModifyClusterSnapshotScheduleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotScheduleState": return try await InvalidClusterSnapshotScheduleStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyClusterSubnetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case description = "Description"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                for (index0, string0) in subnetIds.enumerated() {
                    try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyClusterSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterSubnetGroupInput {

    static func urlPathProvider(_ value: ModifyClusterSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyClusterSubnetGroupInput: Swift.Equatable {
    /// The name of the subnet group to be modified.
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?
    /// A text description of the subnet group to be modified.
    public var description: Swift.String?
    /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
    /// This member is required.
    public var subnetIds: [Swift.String]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.description = description
        self.subnetIds = subnetIds
    }
}

extension ModifyClusterSubnetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyClusterSubnetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyClusterSubnetGroupResult"]
            var value = ModifyClusterSubnetGroupOutput()
            value.clusterSubnetGroup = try reader["ClusterSubnetGroup"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterSubnetGroup.readingClosure)
            return value
        }
    }
}

public struct ModifyClusterSubnetGroupOutput: Swift.Equatable {
    /// Describes a subnet group.
    public var clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?

    public init(
        clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup? = nil
    )
    {
        self.clusterSubnetGroup = clusterSubnetGroup
    }
}

enum ModifyClusterSubnetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSubnetQuotaExceededFault": return try await ClusterSubnetQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubnetAlreadyInUse": return try await SubnetAlreadyInUse.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyCustomDomainAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        try container.encode("ModifyCustomDomainAssociation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCustomDomainAssociationInput {

    static func urlPathProvider(_ value: ModifyCustomDomainAssociationInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyCustomDomainAssociationInput: Swift.Equatable {
    /// The identifier of the cluster to change a custom domain association for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The certificate Amazon Resource Name (ARN) for the changed custom domain association.
    /// This member is required.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for a changed custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

extension ModifyCustomDomainAssociationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyCustomDomainAssociationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyCustomDomainAssociationResult"]
            var value = ModifyCustomDomainAssociationOutput()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.customDomainCertExpiryTime = try reader["CustomDomainCertExpiryTime"].readIfPresent()
            value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
            value.customDomainName = try reader["CustomDomainName"].readIfPresent()
            return value
        }
    }
}

public struct ModifyCustomDomainAssociationOutput: Swift.Equatable {
    /// The identifier of the cluster associated with the result for the changed custom domain association.
    public var clusterIdentifier: Swift.String?
    /// The certificate expiration time associated with the result for the changed custom domain association.
    public var customDomainCertExpiryTime: Swift.String?
    /// The certificate Amazon Resource Name (ARN) associated with the result for the changed custom domain association.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name associated with the result for the changed custom domain association.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertExpiryTime: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertExpiryTime = customDomainCertExpiryTime
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

enum ModifyCustomDomainAssociationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CustomDomainAssociationNotFoundFault": return try await CustomDomainAssociationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyEndpointAccessInput {

    static func urlPathProvider(_ value: ModifyEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyEndpointAccessInput: Swift.Equatable {
    /// The endpoint to be modified.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The complete list of VPC security groups associated with the endpoint after the endpoint is modified.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        endpointName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.endpointName = endpointName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyEndpointAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyEndpointAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyEndpointAccessResult"]
            var value = ModifyEndpointAccessOutput()
            value.address = try reader["Address"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.endpointName = try reader["EndpointName"].readIfPresent()
            value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
            value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
            value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(readingClosure: RedshiftClientTypes.VpcEndpoint.readingClosure)
            value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.readingClosure, memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
            return value
        }
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct ModifyEndpointAccessOutput: Swift.Equatable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: ClientRuntime.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

enum ModifyEndpointAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointNotFound": return try await EndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidEndpointState": return try await InvalidEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyEventSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case eventCategories = "EventCategories"
        case severity = "Severity"
        case snsTopicArn = "SnsTopicArn"
        case sourceIds = "SourceIds"
        case sourceType = "SourceType"
        case subscriptionName = "SubscriptionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIds = sourceIds {
            if !sourceIds.isEmpty {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                for (index0, string0) in sourceIds.enumerated() {
                    try sourceIdsContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                try sourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("ModifyEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyEventSubscriptionInput {

    static func urlPathProvider(_ value: ModifyEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifyEventSubscriptionInput: Swift.Equatable {
    /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the modified Amazon Redshift event notification subscription.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
    }
}

extension ModifyEventSubscriptionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyEventSubscriptionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyEventSubscriptionResult"]
            var value = ModifyEventSubscriptionOutput()
            value.eventSubscription = try reader["EventSubscription"].readIfPresent(readingClosure: RedshiftClientTypes.EventSubscription.readingClosure)
            return value
        }
    }
}

public struct ModifyEventSubscriptionOutput: Swift.Equatable {
    /// Describes event subscriptions.
    public var eventSubscription: RedshiftClientTypes.EventSubscription?

    public init(
        eventSubscription: RedshiftClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

enum ModifyEventSubscriptionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidSubscriptionStateFault": return try await InvalidSubscriptionStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSInvalidTopic": return try await SNSInvalidTopicFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSNoAuthorization": return try await SNSNoAuthorizationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SNSTopicArnNotFound": return try await SNSTopicArnNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SourceNotFound": return try await SourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionCategoryNotFound": return try await SubscriptionCategoryNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionEventIdNotFound": return try await SubscriptionEventIdNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionNotFound": return try await SubscriptionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubscriptionSeverityNotFound": return try await SubscriptionSeverityNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyRedshiftIdcApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedTokenIssuerList = "AuthorizedTokenIssuerList"
        case iamRoleArn = "IamRoleArn"
        case idcDisplayName = "IdcDisplayName"
        case identityNamespace = "IdentityNamespace"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
        case serviceIntegrations = "ServiceIntegrations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedTokenIssuerList = authorizedTokenIssuerList {
            if !authorizedTokenIssuerList.isEmpty {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                for (index0, authorizedtokenissuer0) in authorizedTokenIssuerList.enumerated() {
                    try authorizedTokenIssuerListContainer.encode(authorizedtokenissuer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                try authorizedTokenIssuerListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let idcDisplayName = idcDisplayName {
            try container.encode(idcDisplayName, forKey: ClientRuntime.Key("IdcDisplayName"))
        }
        if let identityNamespace = identityNamespace {
            try container.encode(identityNamespace, forKey: ClientRuntime.Key("IdentityNamespace"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        if let serviceIntegrations = serviceIntegrations {
            if !serviceIntegrations.isEmpty {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                for (index0, serviceintegrationsunion0) in serviceIntegrations.enumerated() {
                    try serviceIntegrationsContainer.encode(serviceintegrationsunion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                try serviceIntegrationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyRedshiftIdcApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyRedshiftIdcApplicationInput {

    static func urlPathProvider(_ value: ModifyRedshiftIdcApplicationInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyRedshiftIdcApplicationInput: Swift.Equatable {
    /// The authorized token issuer list for the Amazon Redshift IAM Identity Center application to change.
    public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    /// The IAM role ARN associated with the Amazon Redshift IAM Identity Center application to change. It has the required permissions to be assumed and invoke the IDC Identity Center API.
    public var iamRoleArn: Swift.String?
    /// The display name for the Amazon Redshift IAM Identity Center application to change. It appears on the console.
    public var idcDisplayName: Swift.String?
    /// The namespace for the Amazon Redshift IAM Identity Center application to change. It determines which managed application verifies the connection token.
    public var identityNamespace: Swift.String?
    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    /// This member is required.
    public var redshiftIdcApplicationArn: Swift.String?
    /// A collection of service integrations associated with the application.
    public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

    public init(
        authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
        iamRoleArn: Swift.String? = nil,
        idcDisplayName: Swift.String? = nil,
        identityNamespace: Swift.String? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil,
        serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
    )
    {
        self.authorizedTokenIssuerList = authorizedTokenIssuerList
        self.iamRoleArn = iamRoleArn
        self.idcDisplayName = idcDisplayName
        self.identityNamespace = identityNamespace
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
        self.serviceIntegrations = serviceIntegrations
    }
}

extension ModifyRedshiftIdcApplicationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyRedshiftIdcApplicationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyRedshiftIdcApplicationResult"]
            var value = ModifyRedshiftIdcApplicationOutput()
            value.redshiftIdcApplication = try reader["RedshiftIdcApplication"].readIfPresent(readingClosure: RedshiftClientTypes.RedshiftIdcApplication.readingClosure)
            return value
        }
    }
}

public struct ModifyRedshiftIdcApplicationOutput: Swift.Equatable {
    /// Contains properties for the Redshift IDC application.
    public var redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?

    public init(
        redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication? = nil
    )
    {
        self.redshiftIdcApplication = redshiftIdcApplication
    }
}

enum ModifyRedshiftIdcApplicationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyScheduledActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enable = "Enable"
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetAction = "TargetAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enable = enable {
            try container.encode(enable, forKey: ClientRuntime.Key("Enable"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let iamRole = iamRole {
            try container.encode(iamRole, forKey: ClientRuntime.Key("IamRole"))
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
        if let scheduledActionDescription = scheduledActionDescription {
            try container.encode(scheduledActionDescription, forKey: ClientRuntime.Key("ScheduledActionDescription"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let targetAction = targetAction {
            try container.encode(targetAction, forKey: ClientRuntime.Key("TargetAction"))
        }
        try container.encode("ModifyScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyScheduledActionInput {

    static func urlPathProvider(_ value: ModifyScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyScheduledActionInput: Swift.Equatable {
    /// A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled.
    public var enable: Swift.Bool?
    /// A modified end time of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var endTime: ClientRuntime.Date?
    /// A different IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    public var iamRole: Swift.String?
    /// A modified schedule in either at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    public var schedule: Swift.String?
    /// A modified description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action to modify.
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// A modified start time of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var startTime: ClientRuntime.Date?
    /// A modified JSON format of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        enable: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}

extension ModifyScheduledActionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyScheduledActionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyScheduledActionResult"]
            var value = ModifyScheduledActionOutput()
            value.endTime = try reader["EndTime"].readTimestampIfPresent(format: .dateTime)
            value.iamRole = try reader["IamRole"].readIfPresent()
            value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyXML.timestampReadingClosure(format: .dateTime), memberNodeInfo: "ScheduledActionTime", isFlattened: false)
            value.schedule = try reader["Schedule"].readIfPresent()
            value.scheduledActionDescription = try reader["ScheduledActionDescription"].readIfPresent()
            value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.state = try reader["State"].readIfPresent()
            value.targetAction = try reader["TargetAction"].readIfPresent(readingClosure: RedshiftClientTypes.ScheduledActionType.readingClosure)
            return value
        }
    }
}

/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
public struct ModifyScheduledActionOutput: Swift.Equatable {
    /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRole: Swift.String?
    /// List of times when the scheduled action will run.
    public var nextInvocations: [ClientRuntime.Date]?
    /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
    public var startTime: ClientRuntime.Date?
    /// The state of the scheduled action. For example, DISABLED.
    public var state: RedshiftClientTypes.ScheduledActionState?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ds2.8xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        state: RedshiftClientTypes.ScheduledActionState? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.endTime = endTime
        self.iamRole = iamRole
        self.nextInvocations = nextInvocations
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.state = state
        self.targetAction = targetAction
    }
}

enum ModifyScheduledActionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidScheduledAction": return try await InvalidScheduledActionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSchedule": return try await InvalidScheduleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ScheduledActionNotFound": return try await ScheduledActionNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ScheduledActionTypeUnsupported": return try await ScheduledActionTypeUnsupportedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifySnapshotCopyRetentionPeriodInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case manual = "Manual"
        case retentionPeriod = "RetentionPeriod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let manual = manual {
            try container.encode(manual, forKey: ClientRuntime.Key("Manual"))
        }
        if let retentionPeriod = retentionPeriod {
            try container.encode(retentionPeriod, forKey: ClientRuntime.Key("RetentionPeriod"))
        }
        try container.encode("ModifySnapshotCopyRetentionPeriod", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifySnapshotCopyRetentionPeriodInput {

    static func urlPathProvider(_ value: ModifySnapshotCopyRetentionPeriodInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ModifySnapshotCopyRetentionPeriodInput: Swift.Equatable {
    /// The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination Amazon Web Services Region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
    public var manual: Swift.Bool?
    /// The number of days to retain automated snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this only changes the retention period of copied automated snapshots. If you decrease the retention period for automated snapshots that are copied to a destination Amazon Web Services Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination Amazon Web Services Region and that fall outside of the new retention period. Constraints: Must be at least 1 and no more than 35 for automated snapshots. If you specify the manual option, only newly copied manual snapshots will have the new retention period. If you specify the value of -1 newly copied manual snapshots are retained indefinitely. Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.
    /// This member is required.
    public var retentionPeriod: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        manual: Swift.Bool? = nil,
        retentionPeriod: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.manual = manual
        self.retentionPeriod = retentionPeriod
    }
}

extension ModifySnapshotCopyRetentionPeriodOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifySnapshotCopyRetentionPeriodOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifySnapshotCopyRetentionPeriodResult"]
            var value = ModifySnapshotCopyRetentionPeriodOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ModifySnapshotCopyRetentionPeriodOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ModifySnapshotCopyRetentionPeriodOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotCopyDisabledFault": return try await SnapshotCopyDisabledFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifySnapshotScheduleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleIdentifier = "ScheduleIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scheduleDefinitions = scheduleDefinitions {
            if !scheduleDefinitions.isEmpty {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                for (index0, string0) in scheduleDefinitions.enumerated() {
                    try scheduleDefinitionsContainer.encode(string0, forKey: ClientRuntime.Key("ScheduleDefinition.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                try scheduleDefinitionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        try container.encode("ModifySnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifySnapshotScheduleInput {

    static func urlPathProvider(_ value: ModifySnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifySnapshotScheduleInput: Swift.Equatable {
    /// An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
    /// This member is required.
    public var scheduleDefinitions: [Swift.String]?
    /// A unique alphanumeric identifier of the schedule to modify.
    /// This member is required.
    public var scheduleIdentifier: Swift.String?

    public init(
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleIdentifier = scheduleIdentifier
    }
}

extension ModifySnapshotScheduleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifySnapshotScheduleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifySnapshotScheduleResult"]
            var value = ModifySnapshotScheduleOutput()
            value.associatedClusterCount = try reader["AssociatedClusterCount"].readIfPresent()
            value.associatedClusters = try reader["AssociatedClusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterAssociatedToSchedule.readingClosure, memberNodeInfo: "ClusterAssociatedToSchedule", isFlattened: false)
            value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyXML.timestampReadingClosure(format: .dateTime), memberNodeInfo: "SnapshotTime", isFlattened: false)
            value.scheduleDefinitions = try reader["ScheduleDefinitions"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "ScheduleDefinition", isFlattened: false)
            value.scheduleDescription = try reader["ScheduleDescription"].readIfPresent()
            value.scheduleIdentifier = try reader["ScheduleIdentifier"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
public struct ModifySnapshotScheduleOutput: Swift.Equatable {
    /// The number of clusters associated with the schedule.
    public var associatedClusterCount: Swift.Int?
    /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
    public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
    ///
    public var nextInvocations: [ClientRuntime.Date]?
    /// A list of ScheduleDefinitions.
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for the schedule.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags describing the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        associatedClusterCount: Swift.Int? = nil,
        associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.associatedClusterCount = associatedClusterCount
        self.associatedClusters = associatedClusters
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

enum ModifySnapshotScheduleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidSchedule": return try await InvalidScheduleFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleUpdateInProgress": return try await SnapshotScheduleUpdateInProgressFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyUsageLimitInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case usageLimitId = "UsageLimitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amount = amount {
            try container.encode(amount, forKey: ClientRuntime.Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: ClientRuntime.Key("BreachAction"))
        }
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
        try container.encode("ModifyUsageLimit", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyUsageLimitInput {

    static func urlPathProvider(_ value: ModifyUsageLimitInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyUsageLimitInput: Swift.Equatable {
    /// The new limit amount. For more information about this parameter, see [UsageLimit].
    public var amount: Swift.Int?
    /// The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see [UsageLimit].
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the usage limit to modify.
    /// This member is required.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.usageLimitId = usageLimitId
    }
}

extension ModifyUsageLimitOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyUsageLimitOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyUsageLimitResult"]
            var value = ModifyUsageLimitOutput()
            value.amount = try reader["Amount"].readIfPresent()
            value.breachAction = try reader["BreachAction"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.featureType = try reader["FeatureType"].readIfPresent()
            value.limitType = try reader["LimitType"].readIfPresent()
            value.period = try reader["Period"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.usageLimitId = try reader["UsageLimitId"].readIfPresent()
            return value
        }
    }
}

/// Describes a usage limit object for a cluster.
public struct ModifyUsageLimitOutput: Swift.Equatable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
    ///
    /// * log - To log an event in a system table. The default is log.
    ///
    /// * emit-metric - To emit CloudWatch metrics.
    ///
    /// * disable - To disable the feature until the next usage period begins.
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster with a usage limit.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature to which the limit applies.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The identifier of the usage limit.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
        self.usageLimitId = usageLimitId
    }
}

enum ModifyUsageLimitOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidUsageLimit": return try await InvalidUsageLimitFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UsageLimitNotFound": return try await UsageLimitNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.NetworkInterface: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case ipv6Address = "Ipv6Address"
        case networkInterfaceId = "NetworkInterfaceId"
        case privateIpAddress = "PrivateIpAddress"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let ipv6Address = ipv6Address {
            try container.encode(ipv6Address, forKey: ClientRuntime.Key("Ipv6Address"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: ClientRuntime.Key("PrivateIpAddress"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.NetworkInterface, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.NetworkInterface()
            value.networkInterfaceId = try reader["NetworkInterfaceId"].readIfPresent()
            value.subnetId = try reader["SubnetId"].readIfPresent()
            value.privateIpAddress = try reader["PrivateIpAddress"].readIfPresent()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.ipv6Address = try reader["Ipv6Address"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a network interface.
    public struct NetworkInterface: Swift.Equatable {
        /// The Availability Zone.
        public var availabilityZone: Swift.String?
        /// The IPv6 address of the network interface within the subnet.
        public var ipv6Address: Swift.String?
        /// The network interface identifier.
        public var networkInterfaceId: Swift.String?
        /// The IPv4 address of the network interface within the subnet.
        public var privateIpAddress: Swift.String?
        /// The subnet identifier.
        public var subnetId: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.ipv6Address = ipv6Address
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
        }
    }

}

extension RedshiftClientTypes.NodeConfigurationOption: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimatedDiskUtilizationPercent = "EstimatedDiskUtilizationPercent"
        case mode = "Mode"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercent {
            try container.encode(estimatedDiskUtilizationPercent, forKey: ClientRuntime.Key("EstimatedDiskUtilizationPercent"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.NodeConfigurationOption, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.NodeConfigurationOption()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
            value.estimatedDiskUtilizationPercent = try reader["EstimatedDiskUtilizationPercent"].readIfPresent()
            value.mode = try reader["Mode"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A list of node configurations.
    public struct NodeConfigurationOption: Swift.Equatable {
        /// The estimated disk utilizaton percentage.
        public var estimatedDiskUtilizationPercent: Swift.Double?
        /// The category of the node configuration recommendation.
        public var mode: RedshiftClientTypes.Mode?
        /// The node type, such as, "ds2.8xlarge".
        public var nodeType: Swift.String?
        /// The number of nodes.
        public var numberOfNodes: Swift.Int?

        public init(
            estimatedDiskUtilizationPercent: Swift.Double? = nil,
            mode: RedshiftClientTypes.Mode? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil
        )
        {
            self.estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercent
            self.mode = mode
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
        }
    }

}

extension RedshiftClientTypes.NodeConfigurationOptionsFilter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case values = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let `operator` = `operator` {
            try container.encode(`operator`, forKey: ClientRuntime.Key("Operator"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                for (index0, string0) in values.enumerated() {
                    try valuesContainer.encode(string0, forKey: ClientRuntime.Key("item.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.NodeConfigurationOptionsFilter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.NodeConfigurationOptionsFilter()
            value.name = try reader["Name"].readIfPresent()
            value.`operator` = try reader["Operator"].readIfPresent()
            value.values = try reader["Value"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "item", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A set of elements to filter the returned node configurations.
    public struct NodeConfigurationOptionsFilter: Swift.Equatable {
        /// The name of the element to filter.
        public var name: RedshiftClientTypes.NodeConfigurationOptionsFilterName?
        /// The filter operator. If filter Name is NodeType only the 'in' operator is supported. Provide one value to evaluate for 'eq', 'lt', 'le', 'gt', and 'ge'. Provide two values to evaluate for 'between'. Provide a list of values for 'in'.
        public var `operator`: RedshiftClientTypes.OperatorType?
        /// List of values. Compare Name using Operator to Values. If filter Name is NumberOfNodes, then values can range from 0 to 200. If filter Name is EstimatedDiskUtilizationPercent, then values can range from 0 to 100. For example, filter NumberOfNodes (name) GT (operator) 3 (values).
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.NodeConfigurationOptionsFilterName? = nil,
            `operator`: RedshiftClientTypes.OperatorType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension RedshiftClientTypes {
    public enum NodeConfigurationOptionsFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case estimatedDiskUtilizationPercent
        case mode
        case nodeType
        case numNodes
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeConfigurationOptionsFilterName] {
            return [
                .estimatedDiskUtilizationPercent,
                .mode,
                .nodeType,
                .numNodes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .estimatedDiskUtilizationPercent: return "EstimatedDiskUtilizationPercent"
            case .mode: return "Mode"
            case .nodeType: return "NodeType"
            case .numNodes: return "NumberOfNodes"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeConfigurationOptionsFilterName(rawValue: rawValue) ?? NodeConfigurationOptionsFilterName.sdkUnknown(rawValue)
        }
    }
}

extension NumberOfNodesPerClusterLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = NumberOfNodesPerClusterLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The operation would exceed the number of nodes allowed for a cluster.
public struct NumberOfNodesPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NumberOfNodesPerClusterLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NumberOfNodesQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = NumberOfNodesQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The operation would exceed the number of nodes allotted to the account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct NumberOfNodesQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NumberOfNodesQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum OperatorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case between
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatorType] {
            return [
                .between,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .between: return "between"
            case .eq: return "eq"
            case .ge: return "ge"
            case .gt: return "gt"
            case .in: return "in"
            case .le: return "le"
            case .lt: return "lt"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperatorType(rawValue: rawValue) ?? OperatorType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.OrderableClusterOption: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case nodeType = "NodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, availabilityzone0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(availabilityzone0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.OrderableClusterOption, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.OrderableClusterOption()
            value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
            value.clusterType = try reader["ClusterType"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AvailabilityZone.readingClosure, memberNodeInfo: "AvailabilityZone", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an orderable cluster option.
    public struct OrderableClusterOption: Swift.Equatable {
        /// A list of availability zones for the orderable cluster.
        public var availabilityZones: [RedshiftClientTypes.AvailabilityZone]?
        /// The cluster type, for example multi-node.
        public var clusterType: Swift.String?
        /// The version of the orderable cluster.
        public var clusterVersion: Swift.String?
        /// The node type for the orderable cluster.
        public var nodeType: Swift.String?

        public init(
            availabilityZones: [RedshiftClientTypes.AvailabilityZone]? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            nodeType: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
        }
    }

}

extension RedshiftClientTypes.Parameter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case applyType = "ApplyType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let applyType = applyType {
            try container.encode(applyType, forKey: ClientRuntime.Key("ApplyType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isModifiable = isModifiable {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Parameter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Parameter()
            value.parameterName = try reader["ParameterName"].readIfPresent()
            value.parameterValue = try reader["ParameterValue"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.source = try reader["Source"].readIfPresent()
            value.dataType = try reader["DataType"].readIfPresent()
            value.allowedValues = try reader["AllowedValues"].readIfPresent()
            value.applyType = try reader["ApplyType"].readIfPresent()
            value.isModifiable = try reader["IsModifiable"].readIfPresent()
            value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a parameter in a cluster parameter group.
    public struct Parameter: Swift.Equatable {
        /// The valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide.
        public var applyType: RedshiftClientTypes.ParameterApplyType?
        /// The data type of the parameter.
        public var dataType: Swift.String?
        /// A description of the parameter.
        public var description: Swift.String?
        /// If true, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The value of the parameter. If ParameterName is wlm_json_configuration, then the maximum size of ParameterValue is 8000 characters.
        public var parameterValue: Swift.String?
        /// The source of the parameter value, such as "engine-default" or "user".
        public var source: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyType: RedshiftClientTypes.ParameterApplyType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }
    }

}

extension RedshiftClientTypes {
    public enum ParameterApplyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterApplyType] {
            return [
                .dynamic,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "dynamic"
            case .static: return "static"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterApplyType(rawValue: rawValue) ?? ParameterApplyType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.PartnerIntegrationInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdAt = createdAt {
            try container.encodeTimestamp(createdAt, format: .dateTime, forKey: ClientRuntime.Key("CreatedAt"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        if let updatedAt = updatedAt {
            try container.encodeTimestamp(updatedAt, format: .dateTime, forKey: ClientRuntime.Key("UpdatedAt"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.PartnerIntegrationInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.PartnerIntegrationInfo()
            value.databaseName = try reader["DatabaseName"].readIfPresent()
            value.partnerName = try reader["PartnerName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusMessage = try reader["StatusMessage"].readIfPresent()
            value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: .dateTime)
            value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a partner integration.
    public struct PartnerIntegrationInfo: Swift.Equatable {
        /// The date (UTC) that the partner integration was created.
        public var createdAt: ClientRuntime.Date?
        /// The name of the database that receives data from a partner.
        public var databaseName: Swift.String?
        /// The name of the partner.
        public var partnerName: Swift.String?
        /// The partner integration status.
        public var status: RedshiftClientTypes.PartnerIntegrationStatus?
        /// The status message provided by the partner.
        public var statusMessage: Swift.String?
        /// The date (UTC) that the partner integration status was last updated by the partner.
        public var updatedAt: ClientRuntime.Date?

        public init(
            createdAt: ClientRuntime.Date? = nil,
            databaseName: Swift.String? = nil,
            partnerName: Swift.String? = nil,
            status: RedshiftClientTypes.PartnerIntegrationStatus? = nil,
            statusMessage: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.databaseName = databaseName
            self.partnerName = partnerName
            self.status = status
            self.statusMessage = statusMessage
            self.updatedAt = updatedAt
        }
    }

}

extension RedshiftClientTypes {
    public enum PartnerIntegrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case connectionfailure
        case inactive
        case runtimefailure
        case sdkUnknown(Swift.String)

        public static var allCases: [PartnerIntegrationStatus] {
            return [
                .active,
                .connectionfailure,
                .inactive,
                .runtimefailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .connectionfailure: return "ConnectionFailure"
            case .inactive: return "Inactive"
            case .runtimefailure: return "RuntimeFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PartnerIntegrationStatus(rawValue: rawValue) ?? PartnerIntegrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension PartnerNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = PartnerNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The name of the partner was not found.
public struct PartnerNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PartnerNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PauseClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("PauseCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PauseClusterInput {

    static func urlPathProvider(_ value: PauseClusterInput) -> Swift.String? {
        return "/"
    }
}

/// Describes a pause cluster operation. For example, a scheduled action to run the PauseCluster API operation.
public struct PauseClusterInput: Swift.Equatable {
    /// The identifier of the cluster to be paused.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension RedshiftClientTypes.PauseClusterMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.PauseClusterMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.PauseClusterMessage()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a pause cluster operation. For example, a scheduled action to run the PauseCluster API operation.
    public struct PauseClusterMessage: Swift.Equatable {
        /// The identifier of the cluster to be paused.
        /// This member is required.
        public var clusterIdentifier: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
        }
    }

}

extension PauseClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PauseClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PauseClusterResult"]
            var value = PauseClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct PauseClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum PauseClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.PendingModifiedValues: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case encryptionType = "EncryptionType"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case maintenanceTrackName = "MaintenanceTrackName"
        case masterUserPassword = "MasterUserPassword"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case publiclyAccessible = "PubliclyAccessible"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let encryptionType = encryptionType {
            try container.encode(encryptionType, forKey: ClientRuntime.Key("EncryptionType"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.PendingModifiedValues, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.PendingModifiedValues()
            value.masterUserPassword = try reader["MasterUserPassword"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
            value.clusterType = try reader["ClusterType"].readIfPresent()
            value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
            value.automatedSnapshotRetentionPeriod = try reader["AutomatedSnapshotRetentionPeriod"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
            value.enhancedVpcRouting = try reader["EnhancedVpcRouting"].readIfPresent()
            value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
            value.encryptionType = try reader["EncryptionType"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes.PendingModifiedValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PendingModifiedValues(automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), encryptionType: \(Swift.String(describing: encryptionType)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension RedshiftClientTypes {
    /// Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.
    public struct PendingModifiedValues: Swift.Equatable {
        /// The pending or in-progress change of the automated snapshot retention period.
        public var automatedSnapshotRetentionPeriod: Swift.Int?
        /// The pending or in-progress change of the new identifier for the cluster.
        public var clusterIdentifier: Swift.String?
        /// The pending or in-progress change of the cluster type.
        public var clusterType: Swift.String?
        /// The pending or in-progress change of the service version.
        public var clusterVersion: Swift.String?
        /// The encryption type for a cluster. Possible values are: KMS and None.
        public var encryptionType: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The name of the maintenance track that the cluster will change to during the next maintenance window.
        public var maintenanceTrackName: Swift.String?
        /// The pending or in-progress change of the admin user password for the cluster.
        public var masterUserPassword: Swift.String?
        /// The pending or in-progress change of the cluster's node type.
        public var nodeType: Swift.String?
        /// The pending or in-progress change of the number of nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// The pending or in-progress change of the ability to connect to the cluster from the public network.
        public var publiclyAccessible: Swift.Bool?

        public init(
            automatedSnapshotRetentionPeriod: Swift.Int? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            encryptionType: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            maintenanceTrackName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            publiclyAccessible: Swift.Bool? = nil
        )
        {
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.encryptionType = encryptionType
            self.enhancedVpcRouting = enhancedVpcRouting
            self.maintenanceTrackName = maintenanceTrackName
            self.masterUserPassword = masterUserPassword
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.publiclyAccessible = publiclyAccessible
        }
    }

}

extension PurchaseReservedNodeOfferingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeCount = "NodeCount"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeCount = nodeCount {
            try container.encode(nodeCount, forKey: ClientRuntime.Key("NodeCount"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        try container.encode("PurchaseReservedNodeOffering", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PurchaseReservedNodeOfferingInput {

    static func urlPathProvider(_ value: PurchaseReservedNodeOfferingInput) -> Swift.String? {
        return "/"
    }
}

///
public struct PurchaseReservedNodeOfferingInput: Swift.Equatable {
    /// The number of reserved nodes that you want to purchase. Default: 1
    public var nodeCount: Swift.Int?
    /// The unique identifier of the reserved node offering you want to purchase.
    /// This member is required.
    public var reservedNodeOfferingId: Swift.String?

    public init(
        nodeCount: Swift.Int? = nil,
        reservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.nodeCount = nodeCount
        self.reservedNodeOfferingId = reservedNodeOfferingId
    }
}

extension PurchaseReservedNodeOfferingOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PurchaseReservedNodeOfferingOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PurchaseReservedNodeOfferingResult"]
            var value = PurchaseReservedNodeOfferingOutput()
            value.reservedNode = try reader["ReservedNode"].readIfPresent(readingClosure: RedshiftClientTypes.ReservedNode.readingClosure)
            return value
        }
    }
}

public struct PurchaseReservedNodeOfferingOutput: Swift.Equatable {
    /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
    public var reservedNode: RedshiftClientTypes.ReservedNode?

    public init(
        reservedNode: RedshiftClientTypes.ReservedNode? = nil
    )
    {
        self.reservedNode = reservedNode
    }
}

enum PurchaseReservedNodeOfferingOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeQuotaExceeded": return try await ReservedNodeQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("PutResourcePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// The content of the resource policy being updated.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is updated.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

extension PutResourcePolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PutResourcePolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PutResourcePolicyResult"]
            var value = PutResourcePolicyOutput()
            value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent(readingClosure: RedshiftClientTypes.ResourcePolicy.readingClosure)
            return value
        }
    }
}

public struct PutResourcePolicyOutput: Swift.Equatable {
    /// The content of the updated resource policy.
    public var resourcePolicy: RedshiftClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: RedshiftClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

enum PutResourcePolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConflictPolicyUpdateFault": return try await ConflictPolicyUpdateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidPolicyFault": return try await InvalidPolicyFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceNotFoundFault": return try await ResourceNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RebootClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("RebootCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebootClusterInput {

    static func urlPathProvider(_ value: RebootClusterInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RebootClusterInput: Swift.Equatable {
    /// The cluster identifier.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension RebootClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RebootClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RebootClusterResult"]
            var value = RebootClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct RebootClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum RebootClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.RecurringCharge: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let recurringChargeAmount = recurringChargeAmount {
            try container.encode(recurringChargeAmount, forKey: ClientRuntime.Key("RecurringChargeAmount"))
        }
        if let recurringChargeFrequency = recurringChargeFrequency {
            try container.encode(recurringChargeFrequency, forKey: ClientRuntime.Key("RecurringChargeFrequency"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.RecurringCharge, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.RecurringCharge()
            value.recurringChargeAmount = try reader["RecurringChargeAmount"].readIfPresent()
            value.recurringChargeFrequency = try reader["RecurringChargeFrequency"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a recurring charge.
    public struct RecurringCharge: Swift.Equatable {
        /// The amount charged per the period of time specified by the recurring charge frequency.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency at which the recurring charge amount is applied.
        public var recurringChargeFrequency: Swift.String?

        public init(
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

public enum RedshiftClientTypes {}

extension RedshiftClientTypes.RedshiftIdcApplication: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedTokenIssuerList = "AuthorizedTokenIssuerList"
        case iamRoleArn = "IamRoleArn"
        case idcDisplayName = "IdcDisplayName"
        case idcInstanceArn = "IdcInstanceArn"
        case idcManagedApplicationArn = "IdcManagedApplicationArn"
        case idcOnboardStatus = "IdcOnboardStatus"
        case identityNamespace = "IdentityNamespace"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
        case redshiftIdcApplicationName = "RedshiftIdcApplicationName"
        case serviceIntegrations = "ServiceIntegrations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedTokenIssuerList = authorizedTokenIssuerList {
            if !authorizedTokenIssuerList.isEmpty {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                for (index0, authorizedtokenissuer0) in authorizedTokenIssuerList.enumerated() {
                    try authorizedTokenIssuerListContainer.encode(authorizedtokenissuer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                try authorizedTokenIssuerListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let idcDisplayName = idcDisplayName {
            try container.encode(idcDisplayName, forKey: ClientRuntime.Key("IdcDisplayName"))
        }
        if let idcInstanceArn = idcInstanceArn {
            try container.encode(idcInstanceArn, forKey: ClientRuntime.Key("IdcInstanceArn"))
        }
        if let idcManagedApplicationArn = idcManagedApplicationArn {
            try container.encode(idcManagedApplicationArn, forKey: ClientRuntime.Key("IdcManagedApplicationArn"))
        }
        if let idcOnboardStatus = idcOnboardStatus {
            try container.encode(idcOnboardStatus, forKey: ClientRuntime.Key("IdcOnboardStatus"))
        }
        if let identityNamespace = identityNamespace {
            try container.encode(identityNamespace, forKey: ClientRuntime.Key("IdentityNamespace"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        if let redshiftIdcApplicationName = redshiftIdcApplicationName {
            try container.encode(redshiftIdcApplicationName, forKey: ClientRuntime.Key("RedshiftIdcApplicationName"))
        }
        if let serviceIntegrations = serviceIntegrations {
            if !serviceIntegrations.isEmpty {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                for (index0, serviceintegrationsunion0) in serviceIntegrations.enumerated() {
                    try serviceIntegrationsContainer.encode(serviceintegrationsunion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                try serviceIntegrationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.RedshiftIdcApplication, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.RedshiftIdcApplication()
            value.idcInstanceArn = try reader["IdcInstanceArn"].readIfPresent()
            value.redshiftIdcApplicationName = try reader["RedshiftIdcApplicationName"].readIfPresent()
            value.redshiftIdcApplicationArn = try reader["RedshiftIdcApplicationArn"].readIfPresent()
            value.identityNamespace = try reader["IdentityNamespace"].readIfPresent()
            value.idcDisplayName = try reader["IdcDisplayName"].readIfPresent()
            value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
            value.idcManagedApplicationArn = try reader["IdcManagedApplicationArn"].readIfPresent()
            value.idcOnboardStatus = try reader["IdcOnboardStatus"].readIfPresent()
            value.authorizedTokenIssuerList = try reader["AuthorizedTokenIssuerList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AuthorizedTokenIssuer.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.serviceIntegrations = try reader["ServiceIntegrations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ServiceIntegrationsUnion.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Contains properties for the Redshift IDC application.
    public struct RedshiftIdcApplication: Swift.Equatable {
        /// The authorized token issuer list for the Amazon Redshift IAM Identity Center application.
        public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
        /// The ARN for the Amazon Redshift IAM Identity Center application. It has the required permissions to be assumed and invoke the IDC Identity Center API.
        public var iamRoleArn: Swift.String?
        /// The display name for the Amazon Redshift IAM Identity Center application. It appears on the console.
        public var idcDisplayName: Swift.String?
        /// The ARN for the IAM Identity Center instance that Redshift integrates with.
        public var idcInstanceArn: Swift.String?
        /// The ARN for the Amazon Redshift IAM Identity Center application.
        public var idcManagedApplicationArn: Swift.String?
        /// The onboarding status for the Amazon Redshift IAM Identity Center application.
        public var idcOnboardStatus: Swift.String?
        /// The identity namespace for the Amazon Redshift IAM Identity Center application. It determines which managed application verifies the connection token.
        public var identityNamespace: Swift.String?
        /// The ARN for the Redshift application that integrates with IAM Identity Center.
        public var redshiftIdcApplicationArn: Swift.String?
        /// The name of the Redshift application in IAM Identity Center.
        public var redshiftIdcApplicationName: Swift.String?
        /// A list of service integrations for the Redshift IAM Identity Center application.
        public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

        public init(
            authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
            iamRoleArn: Swift.String? = nil,
            idcDisplayName: Swift.String? = nil,
            idcInstanceArn: Swift.String? = nil,
            idcManagedApplicationArn: Swift.String? = nil,
            idcOnboardStatus: Swift.String? = nil,
            identityNamespace: Swift.String? = nil,
            redshiftIdcApplicationArn: Swift.String? = nil,
            redshiftIdcApplicationName: Swift.String? = nil,
            serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
        )
        {
            self.authorizedTokenIssuerList = authorizedTokenIssuerList
            self.iamRoleArn = iamRoleArn
            self.idcDisplayName = idcDisplayName
            self.idcInstanceArn = idcInstanceArn
            self.idcManagedApplicationArn = idcManagedApplicationArn
            self.idcOnboardStatus = idcOnboardStatus
            self.identityNamespace = identityNamespace
            self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
            self.redshiftIdcApplicationName = redshiftIdcApplicationName
            self.serviceIntegrations = serviceIntegrations
        }
    }

}

extension RedshiftIdcApplicationAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RedshiftIdcApplicationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The application you attempted to add already exists.
public struct RedshiftIdcApplicationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftIdcApplicationNotExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RedshiftIdcApplicationNotExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The application you attempted to find doesn't exist.
public struct RedshiftIdcApplicationNotExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationNotExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftIdcApplicationQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RedshiftIdcApplicationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The maximum number of Redshift IAM Identity Center applications was exceeded.
public struct RedshiftIdcApplicationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RejectDataShareInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShareArn = "DataShareArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("RejectDataShare", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RejectDataShareInput {

    static func urlPathProvider(_ value: RejectDataShareInput) -> Swift.String? {
        return "/"
    }
}

public struct RejectDataShareInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the datashare to reject.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        dataShareArn: Swift.String? = nil
    )
    {
        self.dataShareArn = dataShareArn
    }
}

extension RejectDataShareOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RejectDataShareOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RejectDataShareResult"]
            var value = RejectDataShareOutput()
            value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
            value.dataShareArn = try reader["DataShareArn"].readIfPresent()
            value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedBy = try reader["ManagedBy"].readIfPresent()
            value.producerArn = try reader["ProducerArn"].readIfPresent()
            return value
        }
    }
}

public struct RejectDataShareOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

enum RejectDataShareOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidDataShareFault": return try await InvalidDataShareFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.ReservedNode: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case nodeCount = "NodeCount"
        case nodeType = "NodeType"
        case offeringType = "OfferingType"
        case recurringCharges = "RecurringCharges"
        case reservedNodeId = "ReservedNodeId"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
        case reservedNodeOfferingType = "ReservedNodeOfferingType"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let nodeCount = nodeCount {
            try container.encode(nodeCount, forKey: ClientRuntime.Key("NodeCount"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                try recurringChargesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        if let reservedNodeOfferingType = reservedNodeOfferingType {
            try container.encode(reservedNodeOfferingType, forKey: ClientRuntime.Key("ReservedNodeOfferingType"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ReservedNode, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ReservedNode()
            value.reservedNodeId = try reader["ReservedNodeId"].readIfPresent()
            value.reservedNodeOfferingId = try reader["ReservedNodeOfferingId"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.duration = try reader["Duration"].readIfPresent()
            value.fixedPrice = try reader["FixedPrice"].readIfPresent()
            value.usagePrice = try reader["UsagePrice"].readIfPresent()
            value.currencyCode = try reader["CurrencyCode"].readIfPresent()
            value.nodeCount = try reader["NodeCount"].readIfPresent()
            value.state = try reader["State"].readIfPresent()
            value.offeringType = try reader["OfferingType"].readIfPresent()
            value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RecurringCharge.readingClosure, memberNodeInfo: "RecurringCharge", isFlattened: false)
            value.reservedNodeOfferingType = try reader["ReservedNodeOfferingType"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
    public struct ReservedNode: Swift.Equatable {
        /// The currency code for the reserved cluster.
        public var currencyCode: Swift.String?
        /// The duration of the node reservation in seconds.
        public var duration: Swift.Int?
        /// The fixed cost Amazon Redshift charges you for this reserved node.
        public var fixedPrice: Swift.Double?
        /// The number of reserved compute nodes.
        public var nodeCount: Swift.Int?
        /// The node type of the reserved node.
        public var nodeType: Swift.String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public var offeringType: Swift.String?
        /// The recurring charges for the reserved node.
        public var recurringCharges: [RedshiftClientTypes.RecurringCharge]?
        /// The unique identifier for the reservation.
        public var reservedNodeId: Swift.String?
        /// The identifier for the reserved node offering.
        public var reservedNodeOfferingId: Swift.String?
        ///
        public var reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType?
        /// The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.
        public var startTime: ClientRuntime.Date?
        /// The state of the reserved compute node. Possible Values:
        ///
        /// * pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.
        ///
        /// * active-This reserved node is owned by the caller and is available for use.
        ///
        /// * payment-failed-Payment failed for the purchase attempt.
        ///
        /// * retired-The reserved node is no longer available.
        ///
        /// * exchanging-The owner is exchanging the reserved node for another reserved node.
        public var state: Swift.String?
        /// The hourly rate Amazon Redshift charges you for this reserved node.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            nodeCount: Swift.Int? = nil,
            nodeType: Swift.String? = nil,
            offeringType: Swift.String? = nil,
            recurringCharges: [RedshiftClientTypes.RecurringCharge]? = nil,
            reservedNodeId: Swift.String? = nil,
            reservedNodeOfferingId: Swift.String? = nil,
            reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.nodeCount = nodeCount
            self.nodeType = nodeType
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.reservedNodeId = reservedNodeId
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedNodeAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedNodeAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// User already has a reservation with the given identifier.
public struct ReservedNodeAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ReservedNodeAlreadyMigratedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedNodeAlreadyMigratedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Indicates that the reserved node has already been exchanged.
public struct ReservedNodeAlreadyMigratedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeAlreadyMigrated" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ReservedNodeConfigurationOption: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceReservedNode = "SourceReservedNode"
        case targetReservedNodeCount = "TargetReservedNodeCount"
        case targetReservedNodeOffering = "TargetReservedNodeOffering"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceReservedNode = sourceReservedNode {
            try container.encode(sourceReservedNode, forKey: ClientRuntime.Key("SourceReservedNode"))
        }
        if let targetReservedNodeCount = targetReservedNodeCount {
            try container.encode(targetReservedNodeCount, forKey: ClientRuntime.Key("TargetReservedNodeCount"))
        }
        if let targetReservedNodeOffering = targetReservedNodeOffering {
            try container.encode(targetReservedNodeOffering, forKey: ClientRuntime.Key("TargetReservedNodeOffering"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ReservedNodeConfigurationOption, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ReservedNodeConfigurationOption()
            value.sourceReservedNode = try reader["SourceReservedNode"].readIfPresent(readingClosure: RedshiftClientTypes.ReservedNode.readingClosure)
            value.targetReservedNodeCount = try reader["TargetReservedNodeCount"].readIfPresent()
            value.targetReservedNodeOffering = try reader["TargetReservedNodeOffering"].readIfPresent(readingClosure: RedshiftClientTypes.ReservedNodeOffering.readingClosure)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Details for a reserved-node exchange. Examples include the node type for a reserved node, the price for a node, the node's state, and other details.
    public struct ReservedNodeConfigurationOption: Swift.Equatable {
        /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
        public var sourceReservedNode: RedshiftClientTypes.ReservedNode?
        /// The target reserved-node count.
        public var targetReservedNodeCount: Swift.Int?
        /// Describes a reserved node offering.
        public var targetReservedNodeOffering: RedshiftClientTypes.ReservedNodeOffering?

        public init(
            sourceReservedNode: RedshiftClientTypes.ReservedNode? = nil,
            targetReservedNodeCount: Swift.Int? = nil,
            targetReservedNodeOffering: RedshiftClientTypes.ReservedNodeOffering? = nil
        )
        {
            self.sourceReservedNode = sourceReservedNode
            self.targetReservedNodeCount = targetReservedNodeCount
            self.targetReservedNodeOffering = targetReservedNodeOffering
        }
    }

}

extension RedshiftClientTypes {
    public enum ReservedNodeExchangeActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resizeCluster
        case restoreCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeExchangeActionType] {
            return [
                .resizeCluster,
                .restoreCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resizeCluster: return "resize-cluster"
            case .restoreCluster: return "restore-cluster"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedNodeExchangeActionType(rawValue: rawValue) ?? ReservedNodeExchangeActionType.sdkUnknown(rawValue)
        }
    }
}

extension ReservedNodeExchangeNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedNodeExchangeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The reserved-node exchange status wasn't found.
public struct ReservedNodeExchangeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeExchangeNotFond" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ReservedNodeExchangeStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestTime = "RequestTime"
        case reservedNodeExchangeRequestId = "ReservedNodeExchangeRequestId"
        case sourceReservedNodeCount = "SourceReservedNodeCount"
        case sourceReservedNodeId = "SourceReservedNodeId"
        case sourceReservedNodeType = "SourceReservedNodeType"
        case status = "Status"
        case targetReservedNodeCount = "TargetReservedNodeCount"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
        case targetReservedNodeType = "TargetReservedNodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let requestTime = requestTime {
            try container.encodeTimestamp(requestTime, format: .dateTime, forKey: ClientRuntime.Key("RequestTime"))
        }
        if let reservedNodeExchangeRequestId = reservedNodeExchangeRequestId {
            try container.encode(reservedNodeExchangeRequestId, forKey: ClientRuntime.Key("ReservedNodeExchangeRequestId"))
        }
        if let sourceReservedNodeCount = sourceReservedNodeCount {
            try container.encode(sourceReservedNodeCount, forKey: ClientRuntime.Key("SourceReservedNodeCount"))
        }
        if let sourceReservedNodeId = sourceReservedNodeId {
            try container.encode(sourceReservedNodeId, forKey: ClientRuntime.Key("SourceReservedNodeId"))
        }
        if let sourceReservedNodeType = sourceReservedNodeType {
            try container.encode(sourceReservedNodeType, forKey: ClientRuntime.Key("SourceReservedNodeType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetReservedNodeCount = targetReservedNodeCount {
            try container.encode(targetReservedNodeCount, forKey: ClientRuntime.Key("TargetReservedNodeCount"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        if let targetReservedNodeType = targetReservedNodeType {
            try container.encode(targetReservedNodeType, forKey: ClientRuntime.Key("TargetReservedNodeType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ReservedNodeExchangeStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ReservedNodeExchangeStatus()
            value.reservedNodeExchangeRequestId = try reader["ReservedNodeExchangeRequestId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.requestTime = try reader["RequestTime"].readTimestampIfPresent(format: .dateTime)
            value.sourceReservedNodeId = try reader["SourceReservedNodeId"].readIfPresent()
            value.sourceReservedNodeType = try reader["SourceReservedNodeType"].readIfPresent()
            value.sourceReservedNodeCount = try reader["SourceReservedNodeCount"].readIfPresent()
            value.targetReservedNodeOfferingId = try reader["TargetReservedNodeOfferingId"].readIfPresent()
            value.targetReservedNodeType = try reader["TargetReservedNodeType"].readIfPresent()
            value.targetReservedNodeCount = try reader["TargetReservedNodeCount"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Reserved-node status details, such as the source reserved-node identifier, the target reserved-node identifier, the node type, the node count, and other details.
    public struct ReservedNodeExchangeStatus: Swift.Equatable {
        /// A date and time that indicate when the reserved-node exchange was requested.
        public var requestTime: ClientRuntime.Date?
        /// The identifier of the reserved-node exchange request.
        public var reservedNodeExchangeRequestId: Swift.String?
        /// The source reserved-node count in the cluster.
        public var sourceReservedNodeCount: Swift.Int?
        /// The identifier of the source reserved node.
        public var sourceReservedNodeId: Swift.String?
        /// The source reserved-node type, for example ds2.xlarge.
        public var sourceReservedNodeType: Swift.String?
        /// The status of the reserved-node exchange request. Statuses include in-progress and requested.
        public var status: RedshiftClientTypes.ReservedNodeExchangeStatusType?
        /// The count of target reserved nodes in the cluster.
        public var targetReservedNodeCount: Swift.Int?
        /// The identifier of the target reserved node offering.
        public var targetReservedNodeOfferingId: Swift.String?
        /// The node type of the target reserved node, for example ra3.4xlarge.
        public var targetReservedNodeType: Swift.String?

        public init(
            requestTime: ClientRuntime.Date? = nil,
            reservedNodeExchangeRequestId: Swift.String? = nil,
            sourceReservedNodeCount: Swift.Int? = nil,
            sourceReservedNodeId: Swift.String? = nil,
            sourceReservedNodeType: Swift.String? = nil,
            status: RedshiftClientTypes.ReservedNodeExchangeStatusType? = nil,
            targetReservedNodeCount: Swift.Int? = nil,
            targetReservedNodeOfferingId: Swift.String? = nil,
            targetReservedNodeType: Swift.String? = nil
        )
        {
            self.requestTime = requestTime
            self.reservedNodeExchangeRequestId = reservedNodeExchangeRequestId
            self.sourceReservedNodeCount = sourceReservedNodeCount
            self.sourceReservedNodeId = sourceReservedNodeId
            self.sourceReservedNodeType = sourceReservedNodeType
            self.status = status
            self.targetReservedNodeCount = targetReservedNodeCount
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
            self.targetReservedNodeType = targetReservedNodeType
        }
    }

}

extension RedshiftClientTypes {
    public enum ReservedNodeExchangeStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case requested
        case retrying
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeExchangeStatusType] {
            return [
                .failed,
                .inProgress,
                .pending,
                .requested,
                .retrying,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .requested: return "REQUESTED"
            case .retrying: return "RETRYING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedNodeExchangeStatusType(rawValue: rawValue) ?? ReservedNodeExchangeStatusType.sdkUnknown(rawValue)
        }
    }
}

extension ReservedNodeNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedNodeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified reserved compute node not found.
public struct ReservedNodeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ReservedNodeOffering: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case nodeType = "NodeType"
        case offeringType = "OfferingType"
        case recurringCharges = "RecurringCharges"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
        case reservedNodeOfferingType = "ReservedNodeOfferingType"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                try recurringChargesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        if let reservedNodeOfferingType = reservedNodeOfferingType {
            try container.encode(reservedNodeOfferingType, forKey: ClientRuntime.Key("ReservedNodeOfferingType"))
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ReservedNodeOffering, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ReservedNodeOffering()
            value.reservedNodeOfferingId = try reader["ReservedNodeOfferingId"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.duration = try reader["Duration"].readIfPresent()
            value.fixedPrice = try reader["FixedPrice"].readIfPresent()
            value.usagePrice = try reader["UsagePrice"].readIfPresent()
            value.currencyCode = try reader["CurrencyCode"].readIfPresent()
            value.offeringType = try reader["OfferingType"].readIfPresent()
            value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RecurringCharge.readingClosure, memberNodeInfo: "RecurringCharge", isFlattened: false)
            value.reservedNodeOfferingType = try reader["ReservedNodeOfferingType"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a reserved node offering.
    public struct ReservedNodeOffering: Swift.Equatable {
        /// The currency code for the compute nodes offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the node.
        public var duration: Swift.Int?
        /// The upfront fixed charge you will pay to purchase the specific reserved node offering.
        public var fixedPrice: Swift.Double?
        /// The node type offered by the reserved node offering.
        public var nodeType: Swift.String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public var offeringType: Swift.String?
        /// The charge to your account regardless of whether you are creating any clusters using the node offering. Recurring charges are only in effect for heavy-utilization reserved nodes.
        public var recurringCharges: [RedshiftClientTypes.RecurringCharge]?
        /// The offering identifier.
        public var reservedNodeOfferingId: Swift.String?
        ///
        public var reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType?
        /// The rate you are charged for each hour the cluster that is using the offering is running.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            nodeType: Swift.String? = nil,
            offeringType: Swift.String? = nil,
            recurringCharges: [RedshiftClientTypes.RecurringCharge]? = nil,
            reservedNodeOfferingId: Swift.String? = nil,
            reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.nodeType = nodeType
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedNodeOfferingNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedNodeOfferingNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Specified offering does not exist.
public struct ReservedNodeOfferingNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeOfferingNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum ReservedNodeOfferingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case regular
        case upgradable
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeOfferingType] {
            return [
                .regular,
                .upgradable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .regular: return "Regular"
            case .upgradable: return "Upgradable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedNodeOfferingType(rawValue: rawValue) ?? ReservedNodeOfferingType.sdkUnknown(rawValue)
        }
    }
}

extension ReservedNodeQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ReservedNodeQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Request would exceed the user's compute node quota. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ReservedNodeQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResetClusterParameterGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameters = "Parameters"
        case resetAllParameters = "ResetAllParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resetAllParameters = resetAllParameters {
            try container.encode(resetAllParameters, forKey: ClientRuntime.Key("ResetAllParameters"))
        }
        try container.encode("ResetClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResetClusterParameterGroupInput {

    static func urlPathProvider(_ value: ResetClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

///
public struct ResetClusterParameterGroupInput: Swift.Equatable {
    /// The name of the cluster parameter group to be reset.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// An array of names of parameters to be reset. If ResetAllParameters option is not used, then at least one parameter name must be supplied. Constraints: A maximum of 20 parameters can be reset in a single request.
    public var parameters: [RedshiftClientTypes.Parameter]?
    /// If true, all parameters in the specified parameter group will be reset to their default values. Default: true
    public var resetAllParameters: Swift.Bool?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

extension ResetClusterParameterGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ResetClusterParameterGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ResetClusterParameterGroupResult"]
            var value = ResetClusterParameterGroupOutput()
            value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
            value.parameterGroupStatus = try reader["ParameterGroupStatus"].readIfPresent()
            return value
        }
    }
}

///
public struct ResetClusterParameterGroupOutput: Swift.Equatable {
    /// The name of the cluster parameter group.
    public var parameterGroupName: Swift.String?
    /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
    public var parameterGroupStatus: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameterGroupStatus: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameterGroupStatus = parameterGroupStatus
    }
}

enum ResetClusterParameterGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterParameterGroupState": return try await InvalidClusterParameterGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ResizeClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classic = "Classic"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case reservedNodeId = "ReservedNodeId"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let classic = classic {
            try container.encode(classic, forKey: ClientRuntime.Key("Classic"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        try container.encode("ResizeCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResizeClusterInput {

    static func urlPathProvider(_ value: ResizeClusterInput) -> Swift.String? {
        return "/"
    }
}

/// Describes a resize cluster operation. For example, a scheduled action to run the ResizeCluster API operation.
public struct ResizeClusterInput: Swift.Equatable {
    /// A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false, the resize type is elastic.
    public var classic: Swift.Bool?
    /// The unique identifier for the cluster to resize.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The new cluster type for the specified cluster.
    public var clusterType: Swift.String?
    /// The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
    public var nodeType: Swift.String?
    /// The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
    public var numberOfNodes: Swift.Int?
    /// The identifier of the reserved node.
    public var reservedNodeId: Swift.String?
    /// The identifier of the target reserved node offering.
    public var targetReservedNodeOfferingId: Swift.String?

    public init(
        classic: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterType: Swift.String? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.classic = classic
        self.clusterIdentifier = clusterIdentifier
        self.clusterType = clusterType
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.reservedNodeId = reservedNodeId
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
    }
}

extension RedshiftClientTypes.ResizeClusterMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classic = "Classic"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case reservedNodeId = "ReservedNodeId"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let classic = classic {
            try container.encode(classic, forKey: ClientRuntime.Key("Classic"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ResizeClusterMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ResizeClusterMessage()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.clusterType = try reader["ClusterType"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
            value.classic = try reader["Classic"].readIfPresent()
            value.reservedNodeId = try reader["ReservedNodeId"].readIfPresent()
            value.targetReservedNodeOfferingId = try reader["TargetReservedNodeOfferingId"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a resize cluster operation. For example, a scheduled action to run the ResizeCluster API operation.
    public struct ResizeClusterMessage: Swift.Equatable {
        /// A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false, the resize type is elastic.
        public var classic: Swift.Bool?
        /// The unique identifier for the cluster to resize.
        /// This member is required.
        public var clusterIdentifier: Swift.String?
        /// The new cluster type for the specified cluster.
        public var clusterType: Swift.String?
        /// The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
        public var nodeType: Swift.String?
        /// The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
        public var numberOfNodes: Swift.Int?
        /// The identifier of the reserved node.
        public var reservedNodeId: Swift.String?
        /// The identifier of the target reserved node offering.
        public var targetReservedNodeOfferingId: Swift.String?

        public init(
            classic: Swift.Bool? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            reservedNodeId: Swift.String? = nil,
            targetReservedNodeOfferingId: Swift.String? = nil
        )
        {
            self.classic = classic
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.reservedNodeId = reservedNodeId
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
        }
    }

}

extension ResizeClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ResizeClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ResizeClusterResult"]
            var value = ResizeClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ResizeClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ResizeClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOptionFault": return try await UnsupportedOptionFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.ResizeInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCancelResize = "AllowCancelResize"
        case resizeType = "ResizeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowCancelResize = allowCancelResize {
            try container.encode(allowCancelResize, forKey: ClientRuntime.Key("AllowCancelResize"))
        }
        if let resizeType = resizeType {
            try container.encode(resizeType, forKey: ClientRuntime.Key("ResizeType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ResizeInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ResizeInfo()
            value.resizeType = try reader["ResizeType"].readIfPresent()
            value.allowCancelResize = try reader["AllowCancelResize"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a resize operation.
    public struct ResizeInfo: Swift.Equatable {
        /// A boolean value indicating if the resize operation can be cancelled.
        public var allowCancelResize: Swift.Bool?
        /// Returns the value ClassicResize.
        public var resizeType: Swift.String?

        public init(
            allowCancelResize: Swift.Bool? = nil,
            resizeType: Swift.String? = nil
        )
        {
            self.allowCancelResize = allowCancelResize
            self.resizeType = resizeType
        }
    }

}

extension ResizeNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResizeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A resize operation for the specified cluster is not found.
public struct ResizeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResizeNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResourceNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The resource could not be found.
public struct ResourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ResourcePolicy: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ResourcePolicy, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ResourcePolicy()
            value.resourceArn = try reader["ResourceArn"].readIfPresent()
            value.policy = try reader["Policy"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The policy that is attached to a resource.
    public struct ResourcePolicy: Swift.Equatable {
        /// The content of a resource policy.
        public var policy: Swift.String?
        /// The resources that a policy is attached to.
        public var resourceArn: Swift.String?

        public init(
            policy: Swift.String? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.policy = policy
            self.resourceArn = resourceArn
        }
    }

}

extension RestoreFromClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case iamRoles = "IamRoles"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manageMasterPassword = "ManageMasterPassword"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case multiAZ = "MultiAZ"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case ownerAccount = "OwnerAccount"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case reservedNodeId = "ReservedNodeId"
        case snapshotArn = "SnapshotArn"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalInfo = additionalInfo {
            try container.encode(additionalInfo, forKey: ClientRuntime.Key("AdditionalInfo"))
        }
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: ClientRuntime.Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: ClientRuntime.Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, string0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let iamRoles = iamRoles {
            if !iamRoles.isEmpty {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                for (index0, string0) in iamRoles.enumerated() {
                    try iamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                try iamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manageMasterPassword = manageMasterPassword {
            try container.encode(manageMasterPassword, forKey: ClientRuntime.Key("ManageMasterPassword"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: ClientRuntime.Key("SnapshotScheduleIdentifier"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreFromClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreFromClusterSnapshotInput {

    static func urlPathProvider(_ value: RestoreFromClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RestoreFromClusterSnapshotInput: Swift.Equatable {
    /// Reserved.
    public var additionalInfo: Swift.String?
    /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default: true
    public var allowVersionUpgrade: Swift.Bool?
    /// This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: The value selected for the cluster from which the snapshot was taken. Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The Amazon EC2 Availability Zone in which to restore the cluster. Default: A random, system-chosen Availability Zone. Example: us-east-2a
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.
    public var availabilityZoneRelocation: Swift.Bool?
    /// The identifier of the cluster that will be created from restoring the snapshot. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to [Working with Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html). Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var clusterParameterGroupName: Swift.String?
    /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift. Cluster security groups only apply to clusters outside of VPCs.
    public var clusterSecurityGroups: [Swift.String]?
    /// The name of the subnet group where you want to cluster restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.
    public var clusterSubnetGroupName: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.
    public var defaultIamRoleArn: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.
    public var elasticIp: Swift.String?
    /// Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to [Quotas and limits](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRoles: [Swift.String]?
    /// The IP address type for the cluster. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.
    public var kmsKeyId: Swift.String?
    /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage the restored cluster's admin credentials. If ManageMasterPassword is false or not set, Amazon Redshift uses the admin credentials the cluster had at the time the snapshot was taken.
    public var manageMasterPassword: Swift.Bool?
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// If true, the snapshot will be restored to a cluster deployed in two Availability Zones.
    public var multiAZ: Swift.Bool?
    /// The node type that the restored cluster will be provisioned with. Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see [ About Clusters and Nodes](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes) in the Amazon Redshift Cluster Management Guide.
    public var nodeType: Swift.String?
    /// The number of nodes specified when provisioning the restored cluster.
    public var numberOfNodes: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    public var ownerAccount: Swift.String?
    /// The port number on which the cluster accepts connections. Default: The same port as the original cluster. Constraints: Must be between 1115 and 65535.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see [Maintenance Windows](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows) in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network.
    public var publiclyAccessible: Swift.Bool?
    /// The identifier of the target reserved node offering.
    public var reservedNodeId: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You must specify this parameter or snapshotIdentifier, but not both.
    public var snapshotArn: Swift.String?
    /// The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You must specify this parameter or snapshotArn, but not both. Example: my-snapshot-id
    public var snapshotIdentifier: Swift.String?
    /// A unique identifier for the snapshot schedule.
    public var snapshotScheduleIdentifier: Swift.String?
    /// The identifier of the target reserved node offering.
    public var targetReservedNodeOfferingId: Swift.String?
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster. VPC security groups only apply to clusters in VPCs.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        additionalInfo: Swift.String? = nil,
        allowVersionUpgrade: Swift.Bool? = nil,
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterSubnetGroupName: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        iamRoles: [Swift.String]? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        reservedNodeId: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        snapshotScheduleIdentifier: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.allowVersionUpgrade = allowVersionUpgrade
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.defaultIamRoleArn = defaultIamRoleArn
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.iamRoles = iamRoles
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.multiAZ = multiAZ
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.ownerAccount = ownerAccount
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.reservedNodeId = reservedNodeId
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension RestoreFromClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreFromClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreFromClusterSnapshotResult"]
            var value = RestoreFromClusterSnapshotOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct RestoreFromClusterSnapshotOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum RestoreFromClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccessToSnapshotDenied": return try await AccessToSnapshotDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterAlreadyExists": return try await ClusterAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterQuotaExceeded": return try await ClusterQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSubnetGroupStateFault": return try await InvalidClusterSubnetGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterTrack": return try await InvalidClusterTrackFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidElasticIpFault": return try await InvalidElasticIpFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidRestore": return try await InvalidRestoreFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnet.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTagFault": return try await InvalidTagFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "Ipv6CidrBlockNotFoundFault": return try await Ipv6CidrBlockNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededFault": return try await LimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TagLimitExceededFault": return try await TagLimitExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedOperation": return try await UnauthorizedOperation.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.RestoreStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentRestoreRateInMegaBytesPerSecond = "CurrentRestoreRateInMegaBytesPerSecond"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case snapshotSizeInMegaBytes = "SnapshotSizeInMegaBytes"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond {
            try container.encode(currentRestoreRateInMegaBytesPerSecond, forKey: ClientRuntime.Key("CurrentRestoreRateInMegaBytesPerSecond"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: ClientRuntime.Key("ElapsedTimeInSeconds"))
        }
        if let estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds {
            try container.encode(estimatedTimeToCompletionInSeconds, forKey: ClientRuntime.Key("EstimatedTimeToCompletionInSeconds"))
        }
        if let progressInMegaBytes = progressInMegaBytes {
            try container.encode(progressInMegaBytes, forKey: ClientRuntime.Key("ProgressInMegaBytes"))
        }
        if let snapshotSizeInMegaBytes = snapshotSizeInMegaBytes {
            try container.encode(snapshotSizeInMegaBytes, forKey: ClientRuntime.Key("SnapshotSizeInMegaBytes"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.RestoreStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.RestoreStatus()
            value.status = try reader["Status"].readIfPresent()
            value.currentRestoreRateInMegaBytesPerSecond = try reader["CurrentRestoreRateInMegaBytesPerSecond"].readIfPresent()
            value.snapshotSizeInMegaBytes = try reader["SnapshotSizeInMegaBytes"].readIfPresent()
            value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
            value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
            value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
    public struct RestoreStatus: Swift.Equatable {
        /// The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 and DS2 node types.
        public var currentRestoreRateInMegaBytesPerSecond: Swift.Double?
        /// The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 and DS2 node types.
        public var elapsedTimeInSeconds: Swift.Int?
        /// The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 and DS2 node types.
        public var estimatedTimeToCompletionInSeconds: Swift.Int?
        /// The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 and DS2 node types.
        public var progressInMegaBytes: Swift.Int?
        /// The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 and DS2 node types.
        public var snapshotSizeInMegaBytes: Swift.Int?
        /// The status of the restore action. Returns starting, restoring, completed, or failed.
        public var status: Swift.String?

        public init(
            currentRestoreRateInMegaBytesPerSecond: Swift.Double? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
            progressInMegaBytes: Swift.Int? = nil,
            snapshotSizeInMegaBytes: Swift.Int? = nil,
            status: Swift.String? = nil
        )
        {
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.status = status
        }
    }

}

extension RestoreTableFromClusterSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case enableCaseSensitiveIdentifier = "EnableCaseSensitiveIdentifier"
        case newTableName = "NewTableName"
        case snapshotIdentifier = "SnapshotIdentifier"
        case sourceDatabaseName = "SourceDatabaseName"
        case sourceSchemaName = "SourceSchemaName"
        case sourceTableName = "SourceTableName"
        case targetDatabaseName = "TargetDatabaseName"
        case targetSchemaName = "TargetSchemaName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let enableCaseSensitiveIdentifier = enableCaseSensitiveIdentifier {
            try container.encode(enableCaseSensitiveIdentifier, forKey: ClientRuntime.Key("EnableCaseSensitiveIdentifier"))
        }
        if let newTableName = newTableName {
            try container.encode(newTableName, forKey: ClientRuntime.Key("NewTableName"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let sourceDatabaseName = sourceDatabaseName {
            try container.encode(sourceDatabaseName, forKey: ClientRuntime.Key("SourceDatabaseName"))
        }
        if let sourceSchemaName = sourceSchemaName {
            try container.encode(sourceSchemaName, forKey: ClientRuntime.Key("SourceSchemaName"))
        }
        if let sourceTableName = sourceTableName {
            try container.encode(sourceTableName, forKey: ClientRuntime.Key("SourceTableName"))
        }
        if let targetDatabaseName = targetDatabaseName {
            try container.encode(targetDatabaseName, forKey: ClientRuntime.Key("TargetDatabaseName"))
        }
        if let targetSchemaName = targetSchemaName {
            try container.encode(targetSchemaName, forKey: ClientRuntime.Key("TargetSchemaName"))
        }
        try container.encode("RestoreTableFromClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreTableFromClusterSnapshotInput {

    static func urlPathProvider(_ value: RestoreTableFromClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RestoreTableFromClusterSnapshotInput: Swift.Equatable {
    /// The identifier of the Amazon Redshift cluster to restore the table to.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false (default), the names are not case sensitive.
    public var enableCaseSensitiveIdentifier: Swift.Bool?
    /// The name of the table to create as a result of the current request.
    /// This member is required.
    public var newTableName: Swift.String?
    /// The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the ClusterIdentifier parameter.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// The name of the source database that contains the table to restore from.
    /// This member is required.
    public var sourceDatabaseName: Swift.String?
    /// The name of the source schema that contains the table to restore from. If you do not specify a SourceSchemaName value, the default is public.
    public var sourceSchemaName: Swift.String?
    /// The name of the source table to restore from.
    /// This member is required.
    public var sourceTableName: Swift.String?
    /// The name of the database to restore the table to.
    public var targetDatabaseName: Swift.String?
    /// The name of the schema to restore the table to.
    public var targetSchemaName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        enableCaseSensitiveIdentifier: Swift.Bool? = nil,
        newTableName: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        sourceDatabaseName: Swift.String? = nil,
        sourceSchemaName: Swift.String? = nil,
        sourceTableName: Swift.String? = nil,
        targetDatabaseName: Swift.String? = nil,
        targetSchemaName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.enableCaseSensitiveIdentifier = enableCaseSensitiveIdentifier
        self.newTableName = newTableName
        self.snapshotIdentifier = snapshotIdentifier
        self.sourceDatabaseName = sourceDatabaseName
        self.sourceSchemaName = sourceSchemaName
        self.sourceTableName = sourceTableName
        self.targetDatabaseName = targetDatabaseName
        self.targetSchemaName = targetSchemaName
    }
}

extension RestoreTableFromClusterSnapshotOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RestoreTableFromClusterSnapshotOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RestoreTableFromClusterSnapshotResult"]
            var value = RestoreTableFromClusterSnapshotOutput()
            value.tableRestoreStatus = try reader["TableRestoreStatus"].readIfPresent(readingClosure: RedshiftClientTypes.TableRestoreStatus.readingClosure)
            return value
        }
    }
}

public struct RestoreTableFromClusterSnapshotOutput: Swift.Equatable {
    /// Describes the status of a [RestoreTableFromClusterSnapshot] operation.
    public var tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus?

    public init(
        tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus? = nil
    )
    {
        self.tableRestoreStatus = tableRestoreStatus
    }
}

enum RestoreTableFromClusterSnapshotOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InProgressTableRestoreQuotaExceededFault": return try await InProgressTableRestoreQuotaExceededFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTableRestoreArgument": return try await InvalidTableRestoreArgumentFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ResumeClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("ResumeCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResumeClusterInput {

    static func urlPathProvider(_ value: ResumeClusterInput) -> Swift.String? {
        return "/"
    }
}

/// Describes a resume cluster operation. For example, a scheduled action to run the ResumeCluster API operation.
public struct ResumeClusterInput: Swift.Equatable {
    /// The identifier of the cluster to be resumed.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension RedshiftClientTypes.ResumeClusterMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ResumeClusterMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ResumeClusterMessage()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a resume cluster operation. For example, a scheduled action to run the ResumeCluster API operation.
    public struct ResumeClusterMessage: Swift.Equatable {
        /// The identifier of the cluster to be resumed.
        /// This member is required.
        public var clusterIdentifier: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
        }
    }

}

extension ResumeClusterOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ResumeClusterOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ResumeClusterResult"]
            var value = ResumeClusterOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct ResumeClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum ResumeClusterOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.RevisionTarget: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseRevision = "DatabaseRevision"
        case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseRevision = databaseRevision {
            try container.encode(databaseRevision, forKey: ClientRuntime.Key("DatabaseRevision"))
        }
        if let databaseRevisionReleaseDate = databaseRevisionReleaseDate {
            try container.encodeTimestamp(databaseRevisionReleaseDate, format: .dateTime, forKey: ClientRuntime.Key("DatabaseRevisionReleaseDate"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.RevisionTarget, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.RevisionTarget()
            value.databaseRevision = try reader["DatabaseRevision"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.databaseRevisionReleaseDate = try reader["DatabaseRevisionReleaseDate"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a RevisionTarget.
    public struct RevisionTarget: Swift.Equatable {
        /// A unique string that identifies the version to update the cluster to. You can use this value in [ModifyClusterDbRevision].
        public var databaseRevision: Swift.String?
        /// The date on which the database revision was released.
        public var databaseRevisionReleaseDate: ClientRuntime.Date?
        /// A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding [ClusterDbRevision].
        public var description: Swift.String?

        public init(
            databaseRevision: Swift.String? = nil,
            databaseRevisionReleaseDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.databaseRevision = databaseRevision
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
            self.description = description
        }
    }

}

extension RevokeClusterSecurityGroupIngressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("RevokeClusterSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeClusterSecurityGroupIngressInput {

    static func urlPathProvider(_ value: RevokeClusterSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RevokeClusterSecurityGroupIngressInput: Swift.Equatable {
    /// The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified, EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided.
    public var cidrip: Swift.String?
    /// The name of the security Group from which to revoke the ingress rule.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// The name of the EC2 Security Group whose access is to be revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be provided and CIDRIP cannot be provided.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified, EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided. Example: 111122223333
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        clusterSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

extension RevokeClusterSecurityGroupIngressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RevokeClusterSecurityGroupIngressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RevokeClusterSecurityGroupIngressResult"]
            var value = RevokeClusterSecurityGroupIngressOutput()
            value.clusterSecurityGroup = try reader["ClusterSecurityGroup"].readIfPresent(readingClosure: RedshiftClientTypes.ClusterSecurityGroup.readingClosure)
            return value
        }
    }
}

public struct RevokeClusterSecurityGroupIngressOutput: Swift.Equatable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

enum RevokeClusterSecurityGroupIngressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RevokeEndpointAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case clusterIdentifier = "ClusterIdentifier"
        case force = "Force"
        case vpcIds = "VpcIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let vpcIds = vpcIds {
            if !vpcIds.isEmpty {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                for (index0, string0) in vpcIds.enumerated() {
                    try vpcIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                try vpcIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RevokeEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeEndpointAccessInput {

    static func urlPathProvider(_ value: RevokeEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct RevokeEndpointAccessInput: Swift.Equatable {
    /// The Amazon Web Services account ID whose access is to be revoked.
    public var account: Swift.String?
    /// The cluster to revoke access from.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
    public var force: Swift.Bool?
    /// The virtual private cloud (VPC) identifiers for which access is to be revoked.
    public var vpcIds: [Swift.String]?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        force: Swift.Bool? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.force = force
        self.vpcIds = vpcIds
    }
}

extension RevokeEndpointAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RevokeEndpointAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RevokeEndpointAccessResult"]
            var value = RevokeEndpointAccessOutput()
            value.allowedAllVPCs = try reader["AllowedAllVPCs"].readIfPresent()
            value.allowedVPCs = try reader["AllowedVPCs"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "VpcIdentifier", isFlattened: false)
            value.authorizeTime = try reader["AuthorizeTime"].readTimestampIfPresent(format: .dateTime)
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
            value.endpointCount = try reader["EndpointCount"].readIfPresent()
            value.grantee = try reader["Grantee"].readIfPresent()
            value.grantor = try reader["Grantor"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
public struct RevokeEndpointAccessOutput: Swift.Equatable {
    /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
    public var allowedAllVPCs: Swift.Bool?
    /// The VPCs allowed access to the cluster.
    public var allowedVPCs: [Swift.String]?
    /// The time (UTC) when the authorization was created.
    public var authorizeTime: ClientRuntime.Date?
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The status of the cluster.
    public var clusterStatus: Swift.String?
    /// The number of Redshift-managed VPC endpoints created for the authorization.
    public var endpointCount: Swift.Int?
    /// The Amazon Web Services account ID of the grantee of the cluster.
    public var grantee: Swift.String?
    /// The Amazon Web Services account ID of the cluster owner.
    public var grantor: Swift.String?
    /// The status of the authorization action.
    public var status: RedshiftClientTypes.AuthorizationStatus?

    public init(
        allowedAllVPCs: Swift.Bool? = nil,
        allowedVPCs: [Swift.String]? = nil,
        authorizeTime: ClientRuntime.Date? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterStatus: Swift.String? = nil,
        endpointCount: Swift.Int? = nil,
        grantee: Swift.String? = nil,
        grantor: Swift.String? = nil,
        status: RedshiftClientTypes.AuthorizationStatus? = nil
    )
    {
        self.allowedAllVPCs = allowedAllVPCs
        self.allowedVPCs = allowedVPCs
        self.authorizeTime = authorizeTime
        self.clusterIdentifier = clusterIdentifier
        self.clusterStatus = clusterStatus
        self.endpointCount = endpointCount
        self.grantee = grantee
        self.grantor = grantor
        self.status = status
    }
}

enum RevokeEndpointAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointAuthorizationNotFound": return try await EndpointAuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "EndpointNotFound": return try await EndpointNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidAuthorizationState": return try await InvalidAuthorizationStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidEndpointState": return try await InvalidEndpointStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RevokeSnapshotAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountWithRestoreAccess = "AccountWithRestoreAccess"
        case snapshotArn = "SnapshotArn"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountWithRestoreAccess = accountWithRestoreAccess {
            try container.encode(accountWithRestoreAccess, forKey: ClientRuntime.Key("AccountWithRestoreAccess"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("RevokeSnapshotAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeSnapshotAccessInput {

    static func urlPathProvider(_ value: RevokeSnapshotAccessInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RevokeSnapshotAccessInput: Swift.Equatable {
    /// The identifier of the Amazon Web Services account that can no longer restore the specified snapshot.
    /// This member is required.
    public var accountWithRestoreAccess: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to revoke access.
    public var snapshotArn: Swift.String?
    /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The identifier of the snapshot that the account can no longer access.
    public var snapshotIdentifier: Swift.String?

    public init(
        accountWithRestoreAccess: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.accountWithRestoreAccess = accountWithRestoreAccess
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension RevokeSnapshotAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RevokeSnapshotAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RevokeSnapshotAccessResult"]
            var value = RevokeSnapshotAccessOutput()
            value.snapshot = try reader["Snapshot"].readIfPresent(readingClosure: RedshiftClientTypes.Snapshot.readingClosure)
            return value
        }
    }
}

public struct RevokeSnapshotAccessOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

enum RevokeSnapshotAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AccessToSnapshotDenied": return try await AccessToSnapshotDeniedFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AuthorizationNotFound": return try await AuthorizationNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RotateEncryptionKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("RotateEncryptionKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RotateEncryptionKeyInput {

    static func urlPathProvider(_ value: RotateEncryptionKeyInput) -> Swift.String? {
        return "/"
    }
}

///
public struct RotateEncryptionKeyInput: Swift.Equatable {
    /// The unique identifier of the cluster that you want to rotate the encryption keys for. Constraints: Must be the name of valid cluster that has encryption enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension RotateEncryptionKeyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RotateEncryptionKeyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RotateEncryptionKeyResult"]
            var value = RotateEncryptionKeyOutput()
            value.cluster = try reader["Cluster"].readIfPresent(readingClosure: RedshiftClientTypes.Cluster.readingClosure)
            return value
        }
    }
}

public struct RotateEncryptionKeyOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

enum RotateEncryptionKeyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidClusterState": return try await InvalidClusterStateFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SNSInvalidTopicFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SNSInvalidTopicFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Amazon SNS has responded that there is a problem with the specified Amazon SNS topic.
public struct SNSInvalidTopicFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSInvalidTopic" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SNSNoAuthorizationFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SNSNoAuthorizationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You do not have permission to publish to the specified Amazon SNS topic.
public struct SNSNoAuthorizationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSNoAuthorization" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SNSTopicArnNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SNSTopicArnNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An Amazon SNS topic with the specified Amazon Resource Name (ARN) does not exist.
public struct SNSTopicArnNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSTopicArnNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ScheduleDefinitionTypeUnsupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ScheduleDefinitionTypeUnsupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The definition you submitted is not supported.
public struct ScheduleDefinitionTypeUnsupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduleDefinitionTypeUnsupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum ScheduleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case failed
        case modifying
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleState] {
            return [
                .active,
                .failed,
                .modifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .failed: return "FAILED"
            case .modifying: return "MODIFYING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleState(rawValue: rawValue) ?? ScheduleState.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.ScheduledAction: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case nextInvocations = "NextInvocations"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case state = "State"
        case targetAction = "TargetAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let iamRole = iamRole {
            try container.encode(iamRole, forKey: ClientRuntime.Key("IamRole"))
        }
        if let nextInvocations = nextInvocations {
            if !nextInvocations.isEmpty {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                for (index0, tstamp0) in nextInvocations.enumerated() {
                    try nextInvocationsContainer.encodeTimestamp(tstamp0, format: .dateTime, forKey: ClientRuntime.Key("ScheduledActionTime.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                try nextInvocationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
        if let scheduledActionDescription = scheduledActionDescription {
            try container.encode(scheduledActionDescription, forKey: ClientRuntime.Key("ScheduledActionDescription"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let targetAction = targetAction {
            try container.encode(targetAction, forKey: ClientRuntime.Key("TargetAction"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ScheduledAction, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ScheduledAction()
            value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
            value.targetAction = try reader["TargetAction"].readIfPresent(readingClosure: RedshiftClientTypes.ScheduledActionType.readingClosure)
            value.schedule = try reader["Schedule"].readIfPresent()
            value.iamRole = try reader["IamRole"].readIfPresent()
            value.scheduledActionDescription = try reader["ScheduledActionDescription"].readIfPresent()
            value.state = try reader["State"].readIfPresent()
            value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyXML.timestampReadingClosure(format: .dateTime), memberNodeInfo: "ScheduledActionTime", isFlattened: false)
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.endTime = try reader["EndTime"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
    public struct ScheduledAction: Swift.Equatable {
        /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
        public var endTime: ClientRuntime.Date?
        /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
        public var iamRole: Swift.String?
        /// List of times when the scheduled action will run.
        public var nextInvocations: [ClientRuntime.Date]?
        /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
        public var schedule: Swift.String?
        /// The description of the scheduled action.
        public var scheduledActionDescription: Swift.String?
        /// The name of the scheduled action.
        public var scheduledActionName: Swift.String?
        /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
        public var startTime: ClientRuntime.Date?
        /// The state of the scheduled action. For example, DISABLED.
        public var state: RedshiftClientTypes.ScheduledActionState?
        /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ds2.8xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
        public var targetAction: RedshiftClientTypes.ScheduledActionType?

        public init(
            endTime: ClientRuntime.Date? = nil,
            iamRole: Swift.String? = nil,
            nextInvocations: [ClientRuntime.Date]? = nil,
            schedule: Swift.String? = nil,
            scheduledActionDescription: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: RedshiftClientTypes.ScheduledActionState? = nil,
            targetAction: RedshiftClientTypes.ScheduledActionType? = nil
        )
        {
            self.endTime = endTime
            self.iamRole = iamRole
            self.nextInvocations = nextInvocations
            self.schedule = schedule
            self.scheduledActionDescription = scheduledActionDescription
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.state = state
            self.targetAction = targetAction
        }
    }

}

extension ScheduledActionAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ScheduledActionAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The scheduled action already exists.
public struct ScheduledActionAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.ScheduledActionFilter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, string0) in values.enumerated() {
                    try valuesContainer.encode(string0, forKey: ClientRuntime.Key("item.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ScheduledActionFilter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ScheduledActionFilter()
            value.name = try reader["Name"].readIfPresent()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "item", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A set of elements to filter the returned scheduled actions.
    public struct ScheduledActionFilter: Swift.Equatable {
        /// The type of element to filter.
        /// This member is required.
        public var name: RedshiftClientTypes.ScheduledActionFilterName?
        /// List of values. Compare if the value (of type defined by Name) equals an item in the list of scheduled actions.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.ScheduledActionFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension RedshiftClientTypes {
    public enum ScheduledActionFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clusterIdentifier
        case iamRole
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionFilterName] {
            return [
                .clusterIdentifier,
                .iamRole,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clusterIdentifier: return "cluster-identifier"
            case .iamRole: return "iam-role"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledActionFilterName(rawValue: rawValue) ?? ScheduledActionFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ScheduledActionNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ScheduledActionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The scheduled action cannot be found.
public struct ScheduledActionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ScheduledActionQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ScheduledActionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota for scheduled actions exceeded.
public struct ScheduledActionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum ScheduledActionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionState] {
            return [
                .active,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledActionState(rawValue: rawValue) ?? ScheduledActionState.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.ScheduledActionType: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pauseCluster = "PauseCluster"
        case resizeCluster = "ResizeCluster"
        case resumeCluster = "ResumeCluster"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let pauseCluster = pauseCluster {
            try container.encode(pauseCluster, forKey: ClientRuntime.Key("PauseCluster"))
        }
        if let resizeCluster = resizeCluster {
            try container.encode(resizeCluster, forKey: ClientRuntime.Key("ResizeCluster"))
        }
        if let resumeCluster = resumeCluster {
            try container.encode(resumeCluster, forKey: ClientRuntime.Key("ResumeCluster"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ScheduledActionType, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.ScheduledActionType()
            value.resizeCluster = try reader["ResizeCluster"].readIfPresent(readingClosure: RedshiftClientTypes.ResizeClusterMessage.readingClosure)
            value.pauseCluster = try reader["PauseCluster"].readIfPresent(readingClosure: RedshiftClientTypes.PauseClusterMessage.readingClosure)
            value.resumeCluster = try reader["ResumeCluster"].readIfPresent(readingClosure: RedshiftClientTypes.ResumeClusterMessage.readingClosure)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler.
    public struct ScheduledActionType: Swift.Equatable {
        /// An action that runs a PauseCluster API operation.
        public var pauseCluster: RedshiftClientTypes.PauseClusterMessage?
        /// An action that runs a ResizeCluster API operation.
        public var resizeCluster: RedshiftClientTypes.ResizeClusterMessage?
        /// An action that runs a ResumeCluster API operation.
        public var resumeCluster: RedshiftClientTypes.ResumeClusterMessage?

        public init(
            pauseCluster: RedshiftClientTypes.PauseClusterMessage? = nil,
            resizeCluster: RedshiftClientTypes.ResizeClusterMessage? = nil,
            resumeCluster: RedshiftClientTypes.ResumeClusterMessage? = nil
        )
        {
            self.pauseCluster = pauseCluster
            self.resizeCluster = resizeCluster
            self.resumeCluster = resumeCluster
        }
    }

}

extension ScheduledActionTypeUnsupportedFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ScheduledActionTypeUnsupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The action type specified for a scheduled action is not supported.
public struct ScheduledActionTypeUnsupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionTypeUnsupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum ScheduledActionTypeValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pauseCluster
        case resizeCluster
        case resumeCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionTypeValues] {
            return [
                .pauseCluster,
                .resizeCluster,
                .resumeCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pauseCluster: return "PauseCluster"
            case .resizeCluster: return "ResizeCluster"
            case .resumeCluster: return "ResumeCluster"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledActionTypeValues(rawValue: rawValue) ?? ScheduledActionTypeValues.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.SecondaryClusterInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case clusterNodes = "ClusterNodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let clusterNodes = clusterNodes {
            if !clusterNodes.isEmpty {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                for (index0, clusternode0) in clusterNodes.enumerated() {
                    try clusterNodesContainer.encode(clusternode0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                try clusterNodesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SecondaryClusterInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SecondaryClusterInfo()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.clusterNodes = try reader["ClusterNodes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterNode.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The AvailabilityZone and ClusterNodes information of the secondary compute unit.
    public struct SecondaryClusterInfo: Swift.Equatable {
        /// The name of the Availability Zone in which the secondary compute unit of the cluster is located.
        public var availabilityZone: Swift.String?
        /// The nodes in the secondary compute unit.
        public var clusterNodes: [RedshiftClientTypes.ClusterNode]?

        public init(
            availabilityZone: Swift.String? = nil,
            clusterNodes: [RedshiftClientTypes.ClusterNode]? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.clusterNodes = clusterNodes
        }
    }

}

extension RedshiftClientTypes {
    public enum ServiceAuthorization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceAuthorization] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceAuthorization(rawValue: rawValue) ?? ServiceAuthorization.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.ServiceIntegrationsUnion: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lakeformation = "LakeFormation"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .lakeformation(lakeformation):
                var lakeformationContainer = container.nestedUnkeyedContainer(forKey: .lakeformation)
                for lakeformationscopeunion0 in lakeformation {
                    try lakeformationContainer.encode(lakeformationscopeunion0)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.ServiceIntegrationsUnion, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            let name = reader.children.first?.nodeInfo.name
            switch name {
                case "LakeFormation":
                    return .lakeformation(try reader["LakeFormation"].readList(memberReadingClosure: RedshiftClientTypes.LakeFormationScopeUnion.readingClosure, memberNodeInfo: "member", isFlattened: false))
                default:
                    return .sdkUnknown(name ?? "")
            }
        }
    }
}

extension RedshiftClientTypes {
    /// A list of service integrations.
    public enum ServiceIntegrationsUnion: Swift.Equatable {
        /// A list of scopes set up for Lake Formation integration.
        case lakeformation([RedshiftClientTypes.LakeFormationScopeUnion])
        case sdkUnknown(Swift.String)
    }

}

extension RedshiftClientTypes.Snapshot: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountsWithRestoreAccess = "AccountsWithRestoreAccess"
        case actualIncrementalBackupSizeInMegaBytes = "ActualIncrementalBackupSizeInMegaBytes"
        case availabilityZone = "AvailabilityZone"
        case backupProgressInMegaBytes = "BackupProgressInMegaBytes"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterVersion = "ClusterVersion"
        case currentBackupRateInMegaBytesPerSecond = "CurrentBackupRateInMegaBytesPerSecond"
        case dbName = "DBName"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case encrypted = "Encrypted"
        case encryptedWithHSM = "EncryptedWithHSM"
        case engineFullVersion = "EngineFullVersion"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case estimatedSecondsToCompletion = "EstimatedSecondsToCompletion"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRemainingDays = "ManualSnapshotRemainingDays"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretArn = "MasterPasswordSecretArn"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case ownerAccount = "OwnerAccount"
        case port = "Port"
        case restorableNodeTypes = "RestorableNodeTypes"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotRetentionStartTime = "SnapshotRetentionStartTime"
        case snapshotType = "SnapshotType"
        case sourceRegion = "SourceRegion"
        case status = "Status"
        case tags = "Tags"
        case totalBackupSizeInMegaBytes = "TotalBackupSizeInMegaBytes"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountsWithRestoreAccess = accountsWithRestoreAccess {
            if !accountsWithRestoreAccess.isEmpty {
                var accountsWithRestoreAccessContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AccountsWithRestoreAccess"))
                for (index0, accountwithrestoreaccess0) in accountsWithRestoreAccess.enumerated() {
                    try accountsWithRestoreAccessContainer.encode(accountwithrestoreaccess0, forKey: ClientRuntime.Key("AccountWithRestoreAccess.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsWithRestoreAccessContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AccountsWithRestoreAccess"))
                try accountsWithRestoreAccessContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes {
            try container.encode(actualIncrementalBackupSizeInMegaBytes, forKey: ClientRuntime.Key("ActualIncrementalBackupSizeInMegaBytes"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let backupProgressInMegaBytes = backupProgressInMegaBytes {
            try container.encode(backupProgressInMegaBytes, forKey: ClientRuntime.Key("BackupProgressInMegaBytes"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond {
            try container.encode(currentBackupRateInMegaBytesPerSecond, forKey: ClientRuntime.Key("CurrentBackupRateInMegaBytesPerSecond"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: ClientRuntime.Key("ElapsedTimeInSeconds"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let encryptedWithHSM = encryptedWithHSM {
            try container.encode(encryptedWithHSM, forKey: ClientRuntime.Key("EncryptedWithHSM"))
        }
        if let engineFullVersion = engineFullVersion {
            try container.encode(engineFullVersion, forKey: ClientRuntime.Key("EngineFullVersion"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let estimatedSecondsToCompletion = estimatedSecondsToCompletion {
            try container.encode(estimatedSecondsToCompletion, forKey: ClientRuntime.Key("EstimatedSecondsToCompletion"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manualSnapshotRemainingDays = manualSnapshotRemainingDays {
            try container.encode(manualSnapshotRemainingDays, forKey: ClientRuntime.Key("ManualSnapshotRemainingDays"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretArn = masterPasswordSecretArn {
            try container.encode(masterPasswordSecretArn, forKey: ClientRuntime.Key("MasterPasswordSecretArn"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let restorableNodeTypes = restorableNodeTypes {
            if !restorableNodeTypes.isEmpty {
                var restorableNodeTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RestorableNodeTypes"))
                for (index0, string0) in restorableNodeTypes.enumerated() {
                    try restorableNodeTypesContainer.encode(string0, forKey: ClientRuntime.Key("NodeType.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var restorableNodeTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RestorableNodeTypes"))
                try restorableNodeTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encodeTimestamp(snapshotCreateTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotCreateTime"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let snapshotRetentionStartTime = snapshotRetentionStartTime {
            try container.encodeTimestamp(snapshotRetentionStartTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotRetentionStartTime"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let sourceRegion = sourceRegion {
            try container.encode(sourceRegion, forKey: ClientRuntime.Key("SourceRegion"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes {
            try container.encode(totalBackupSizeInMegaBytes, forKey: ClientRuntime.Key("TotalBackupSizeInMegaBytes"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Snapshot, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Snapshot()
            value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.snapshotCreateTime = try reader["SnapshotCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.status = try reader["Status"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: .dateTime)
            value.masterUsername = try reader["MasterUsername"].readIfPresent()
            value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
            value.engineFullVersion = try reader["EngineFullVersion"].readIfPresent()
            value.snapshotType = try reader["SnapshotType"].readIfPresent()
            value.nodeType = try reader["NodeType"].readIfPresent()
            value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
            value.dbName = try reader["DBName"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.encrypted = try reader["Encrypted"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.encryptedWithHSM = try reader["EncryptedWithHSM"].readIfPresent()
            value.accountsWithRestoreAccess = try reader["AccountsWithRestoreAccess"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AccountWithRestoreAccess.readingClosure, memberNodeInfo: "AccountWithRestoreAccess", isFlattened: false)
            value.ownerAccount = try reader["OwnerAccount"].readIfPresent()
            value.totalBackupSizeInMegaBytes = try reader["TotalBackupSizeInMegaBytes"].readIfPresent()
            value.actualIncrementalBackupSizeInMegaBytes = try reader["ActualIncrementalBackupSizeInMegaBytes"].readIfPresent()
            value.backupProgressInMegaBytes = try reader["BackupProgressInMegaBytes"].readIfPresent()
            value.currentBackupRateInMegaBytesPerSecond = try reader["CurrentBackupRateInMegaBytesPerSecond"].readIfPresent()
            value.estimatedSecondsToCompletion = try reader["EstimatedSecondsToCompletion"].readIfPresent()
            value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
            value.sourceRegion = try reader["SourceRegion"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.restorableNodeTypes = try reader["RestorableNodeTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "NodeType", isFlattened: false)
            value.enhancedVpcRouting = try reader["EnhancedVpcRouting"].readIfPresent()
            value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
            value.manualSnapshotRetentionPeriod = try reader["ManualSnapshotRetentionPeriod"].readIfPresent()
            value.manualSnapshotRemainingDays = try reader["ManualSnapshotRemainingDays"].readIfPresent()
            value.snapshotRetentionStartTime = try reader["SnapshotRetentionStartTime"].readTimestampIfPresent(format: .dateTime)
            value.masterPasswordSecretArn = try reader["MasterPasswordSecretArn"].readIfPresent()
            value.masterPasswordSecretKmsKeyId = try reader["MasterPasswordSecretKmsKeyId"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a snapshot.
    public struct Snapshot: Swift.Equatable {
        /// A list of the Amazon Web Services accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner.
        public var accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]?
        /// The size of the incremental backup.
        public var actualIncrementalBackupSizeInMegaBytes: Swift.Double?
        /// The Availability Zone in which the cluster was created.
        public var availabilityZone: Swift.String?
        /// The number of megabytes that have been transferred to the snapshot backup.
        public var backupProgressInMegaBytes: Swift.Double?
        /// The time (UTC) when the cluster was originally created.
        public var clusterCreateTime: ClientRuntime.Date?
        /// The identifier of the cluster for which the snapshot was taken.
        public var clusterIdentifier: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup.
        public var currentBackupRateInMegaBytesPerSecond: Swift.Double?
        /// The name of the database that was created when the cluster was created.
        public var dbName: Swift.String?
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        public var elapsedTimeInSeconds: Swift.Int?
        /// If true, the data in the snapshot is encrypted at rest.
        public var encrypted: Swift.Bool?
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        public var encryptedWithHSM: Swift.Bool?
        /// The cluster version of the cluster used to create the snapshot. For example, 1.0.15503.
        public var engineFullVersion: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup.
        public var estimatedSecondsToCompletion: Swift.Int?
        /// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the snapshot.
        public var maintenanceTrackName: Swift.String?
        /// The number of days until a manual snapshot will pass its retention period.
        public var manualSnapshotRemainingDays: Swift.Int?
        /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
        public var masterPasswordSecretArn: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret.
        public var masterPasswordSecretKmsKeyId: Swift.String?
        /// The admin user name for the cluster.
        public var masterUsername: Swift.String?
        /// The node type of the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        public var ownerAccount: Swift.String?
        /// The port that the cluster is listening on.
        public var port: Swift.Int?
        /// The list of node types that this cluster snapshot is able to restore into.
        public var restorableNodeTypes: [Swift.String]?
        /// The time (in UTC format) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        public var snapshotCreateTime: ClientRuntime.Date?
        /// The snapshot identifier that is provided in the request.
        public var snapshotIdentifier: Swift.String?
        /// A timestamp representing the start of the retention period for the snapshot.
        public var snapshotRetentionStartTime: ClientRuntime.Date?
        /// The snapshot type. Snapshots created using [CreateClusterSnapshot] and [CopyClusterSnapshot] are of type "manual".
        public var snapshotType: Swift.String?
        /// The source region from which the snapshot was copied.
        public var sourceRegion: Swift.String?
        /// The snapshot status. The value of the status depends on the API operation used:
        ///
        /// * [CreateClusterSnapshot] and [CopyClusterSnapshot] returns status as "creating".
        ///
        /// * [DescribeClusterSnapshots] returns status as "creating", "available", "final snapshot", or "failed".
        ///
        /// * [DeleteClusterSnapshot] returns status as "deleted".
        public var status: Swift.String?
        /// The list of tags for the cluster snapshot.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The size of the complete set of backup data that would be used to restore the cluster.
        public var totalBackupSizeInMegaBytes: Swift.Double?
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        public var vpcId: Swift.String?

        public init(
            accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]? = nil,
            actualIncrementalBackupSizeInMegaBytes: Swift.Double? = nil,
            availabilityZone: Swift.String? = nil,
            backupProgressInMegaBytes: Swift.Double? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            currentBackupRateInMegaBytesPerSecond: Swift.Double? = nil,
            dbName: Swift.String? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            encrypted: Swift.Bool? = nil,
            encryptedWithHSM: Swift.Bool? = nil,
            engineFullVersion: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            estimatedSecondsToCompletion: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRemainingDays: Swift.Int? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterPasswordSecretArn: Swift.String? = nil,
            masterPasswordSecretKmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            ownerAccount: Swift.String? = nil,
            port: Swift.Int? = nil,
            restorableNodeTypes: [Swift.String]? = nil,
            snapshotCreateTime: ClientRuntime.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            snapshotRetentionStartTime: ClientRuntime.Date? = nil,
            snapshotType: Swift.String? = nil,
            sourceRegion: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalBackupSizeInMegaBytes: Swift.Double? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.availabilityZone = availabilityZone
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterVersion = clusterVersion
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.dbName = dbName
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.encrypted = encrypted
            self.encryptedWithHSM = encryptedWithHSM
            self.engineFullVersion = engineFullVersion
            self.enhancedVpcRouting = enhancedVpcRouting
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRemainingDays = manualSnapshotRemainingDays
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterPasswordSecretArn = masterPasswordSecretArn
            self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
            self.masterUsername = masterUsername
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.ownerAccount = ownerAccount
            self.port = port
            self.restorableNodeTypes = restorableNodeTypes
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotRetentionStartTime = snapshotRetentionStartTime
            self.snapshotType = snapshotType
            self.sourceRegion = sourceRegion
            self.status = status
            self.tags = tags
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.vpcId = vpcId
        }
    }

}

extension RedshiftClientTypes {
    public enum SnapshotAttributeToSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createTime
        case sourceType
        case totalSize
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotAttributeToSortBy] {
            return [
                .createTime,
                .sourceType,
                .totalSize,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createTime: return "CREATE_TIME"
            case .sourceType: return "SOURCE_TYPE"
            case .totalSize: return "TOTAL_SIZE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SnapshotAttributeToSortBy(rawValue: rawValue) ?? SnapshotAttributeToSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SnapshotCopyAlreadyDisabledFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotCopyAlreadyDisabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster already has cross-region snapshot copy disabled.
public struct SnapshotCopyAlreadyDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyAlreadyDisabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotCopyAlreadyEnabledFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotCopyAlreadyEnabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The cluster already has cross-region snapshot copy enabled.
public struct SnapshotCopyAlreadyEnabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyAlreadyEnabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotCopyDisabledFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotCopyDisabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Cross-region snapshot copy was temporarily disabled. Try your request again.
public struct SnapshotCopyDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyDisabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.SnapshotCopyGrant: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SnapshotCopyGrant, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SnapshotCopyGrant()
            value.snapshotCopyGrantName = try reader["SnapshotCopyGrantName"].readIfPresent()
            value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region. For more information about managing snapshot copy grants, go to [Amazon Redshift Database Encryption](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html) in the Amazon Redshift Cluster Management Guide.
    public struct SnapshotCopyGrant: Swift.Equatable {
        /// The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.
        public var kmsKeyId: Swift.String?
        /// The name of the snapshot copy grant.
        public var snapshotCopyGrantName: Swift.String?
        /// A list of tag instances.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            kmsKeyId: Swift.String? = nil,
            snapshotCopyGrantName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
        }
    }

}

extension SnapshotCopyGrantAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotCopyGrantAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The snapshot copy grant can't be created because a grant with the same name already exists.
public struct SnapshotCopyGrantAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotCopyGrantNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotCopyGrantNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified snapshot copy grant can't be found. Make sure that the name is typed correctly and that the grant exists in the destination region.
public struct SnapshotCopyGrantNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotCopyGrantQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotCopyGrantQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The Amazon Web Services account has exceeded the maximum number of snapshot copy grants in this region.
public struct SnapshotCopyGrantQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.SnapshotErrorMessage: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureCode = "FailureCode"
        case failureReason = "FailureReason"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureCode = failureCode {
            try container.encode(failureCode, forKey: ClientRuntime.Key("FailureCode"))
        }
        if let failureReason = failureReason {
            try container.encode(failureReason, forKey: ClientRuntime.Key("FailureReason"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SnapshotErrorMessage, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SnapshotErrorMessage()
            value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
            value.snapshotClusterIdentifier = try reader["SnapshotClusterIdentifier"].readIfPresent()
            value.failureCode = try reader["FailureCode"].readIfPresent()
            value.failureReason = try reader["FailureReason"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the errors returned by a snapshot.
    public struct SnapshotErrorMessage: Swift.Equatable {
        /// The failure code for the error.
        public var failureCode: Swift.String?
        /// The text message describing the error.
        public var failureReason: Swift.String?
        /// A unique identifier for the cluster.
        public var snapshotClusterIdentifier: Swift.String?
        /// A unique identifier for the snapshot returning the error.
        public var snapshotIdentifier: Swift.String?

        public init(
            failureCode: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            snapshotClusterIdentifier: Swift.String? = nil,
            snapshotIdentifier: Swift.String? = nil
        )
        {
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }
    }

}

extension RedshiftClientTypes.SnapshotSchedule: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedClusterCount = "AssociatedClusterCount"
        case associatedClusters = "AssociatedClusters"
        case nextInvocations = "NextInvocations"
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleDescription = "ScheduleDescription"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatedClusterCount = associatedClusterCount {
            try container.encode(associatedClusterCount, forKey: ClientRuntime.Key("AssociatedClusterCount"))
        }
        if let associatedClusters = associatedClusters {
            if !associatedClusters.isEmpty {
                var associatedClustersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedClusters"))
                for (index0, clusterassociatedtoschedule0) in associatedClusters.enumerated() {
                    try associatedClustersContainer.encode(clusterassociatedtoschedule0, forKey: ClientRuntime.Key("ClusterAssociatedToSchedule.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var associatedClustersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedClusters"))
                try associatedClustersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let nextInvocations = nextInvocations {
            if !nextInvocations.isEmpty {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                for (index0, tstamp0) in nextInvocations.enumerated() {
                    try nextInvocationsContainer.encodeTimestamp(tstamp0, format: .dateTime, forKey: ClientRuntime.Key("SnapshotTime.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                try nextInvocationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleDefinitions = scheduleDefinitions {
            if !scheduleDefinitions.isEmpty {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                for (index0, string0) in scheduleDefinitions.enumerated() {
                    try scheduleDefinitionsContainer.encode(string0, forKey: ClientRuntime.Key("ScheduleDefinition.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                try scheduleDefinitionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleDescription = scheduleDescription {
            try container.encode(scheduleDescription, forKey: ClientRuntime.Key("ScheduleDescription"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SnapshotSchedule, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SnapshotSchedule()
            value.scheduleDefinitions = try reader["ScheduleDefinitions"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "ScheduleDefinition", isFlattened: false)
            value.scheduleIdentifier = try reader["ScheduleIdentifier"].readIfPresent()
            value.scheduleDescription = try reader["ScheduleDescription"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyXML.timestampReadingClosure(format: .dateTime), memberNodeInfo: "SnapshotTime", isFlattened: false)
            value.associatedClusterCount = try reader["AssociatedClusterCount"].readIfPresent()
            value.associatedClusters = try reader["AssociatedClusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterAssociatedToSchedule.readingClosure, memberNodeInfo: "ClusterAssociatedToSchedule", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
    public struct SnapshotSchedule: Swift.Equatable {
        /// The number of clusters associated with the schedule.
        public var associatedClusterCount: Swift.Int?
        /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
        public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
        ///
        public var nextInvocations: [ClientRuntime.Date]?
        /// A list of ScheduleDefinitions.
        public var scheduleDefinitions: [Swift.String]?
        /// The description of the schedule.
        public var scheduleDescription: Swift.String?
        /// A unique identifier for the schedule.
        public var scheduleIdentifier: Swift.String?
        /// An optional set of tags describing the schedule.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            associatedClusterCount: Swift.Int? = nil,
            associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
            nextInvocations: [ClientRuntime.Date]? = nil,
            scheduleDefinitions: [Swift.String]? = nil,
            scheduleDescription: Swift.String? = nil,
            scheduleIdentifier: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.associatedClusterCount = associatedClusterCount
            self.associatedClusters = associatedClusters
            self.nextInvocations = nextInvocations
            self.scheduleDefinitions = scheduleDefinitions
            self.scheduleDescription = scheduleDescription
            self.scheduleIdentifier = scheduleIdentifier
            self.tags = tags
        }
    }

}

extension SnapshotScheduleAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotScheduleAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified snapshot schedule already exists.
public struct SnapshotScheduleAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotScheduleNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotScheduleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// We could not find the specified snapshot schedule.
public struct SnapshotScheduleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotScheduleQuotaExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotScheduleQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have exceeded the quota of snapshot schedules.
public struct SnapshotScheduleQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SnapshotScheduleUpdateInProgressFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SnapshotScheduleUpdateInProgressFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified snapshot schedule is already being updated.
public struct SnapshotScheduleUpdateInProgressFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleUpdateInProgress" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.SnapshotSortingEntity: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let sortOrder = sortOrder {
            try container.encode(sortOrder, forKey: ClientRuntime.Key("SortOrder"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SnapshotSortingEntity, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SnapshotSortingEntity()
            value.attribute = try reader["Attribute"].readIfPresent()
            value.sortOrder = try reader["SortOrder"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a sorting entity
    public struct SnapshotSortingEntity: Swift.Equatable {
        /// The category for sorting the snapshots.
        /// This member is required.
        public var attribute: RedshiftClientTypes.SnapshotAttributeToSortBy?
        /// The order for listing the attributes.
        public var sortOrder: RedshiftClientTypes.SortByOrder?

        public init(
            attribute: RedshiftClientTypes.SnapshotAttributeToSortBy? = nil,
            sortOrder: RedshiftClientTypes.SortByOrder? = nil
        )
        {
            self.attribute = attribute
            self.sortOrder = sortOrder
        }
    }

}

extension RedshiftClientTypes {
    public enum SortByOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortByOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASC"
            case .descending: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortByOrder(rawValue: rawValue) ?? SortByOrder.sdkUnknown(rawValue)
        }
    }
}

extension SourceNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified Amazon Redshift event source could not be found.
public struct SourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cluster
        case clusterParameterGroup
        case clusterSecurityGroup
        case clusterSnapshot
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .cluster,
                .clusterParameterGroup,
                .clusterSecurityGroup,
                .clusterSnapshot,
                .scheduledAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "cluster"
            case .clusterParameterGroup: return "cluster-parameter-group"
            case .clusterSecurityGroup: return "cluster-security-group"
            case .clusterSnapshot: return "cluster-snapshot"
            case .scheduledAction: return "scheduled-action"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.Subnet: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetIdentifier = "SubnetIdentifier"
        case subnetStatus = "SubnetStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subnetAvailabilityZone = subnetAvailabilityZone {
            try container.encode(subnetAvailabilityZone, forKey: ClientRuntime.Key("SubnetAvailabilityZone"))
        }
        if let subnetIdentifier = subnetIdentifier {
            try container.encode(subnetIdentifier, forKey: ClientRuntime.Key("SubnetIdentifier"))
        }
        if let subnetStatus = subnetStatus {
            try container.encode(subnetStatus, forKey: ClientRuntime.Key("SubnetStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Subnet, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Subnet()
            value.subnetIdentifier = try reader["SubnetIdentifier"].readIfPresent()
            value.subnetAvailabilityZone = try reader["SubnetAvailabilityZone"].readIfPresent(readingClosure: RedshiftClientTypes.AvailabilityZone.readingClosure)
            value.subnetStatus = try reader["SubnetStatus"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a subnet.
    public struct Subnet: Swift.Equatable {
        ///
        public var subnetAvailabilityZone: RedshiftClientTypes.AvailabilityZone?
        /// The identifier of the subnet.
        public var subnetIdentifier: Swift.String?
        /// The status of the subnet.
        public var subnetStatus: Swift.String?

        public init(
            subnetAvailabilityZone: RedshiftClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetStatus: Swift.String? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetStatus = subnetStatus
        }
    }

}

extension SubnetAlreadyInUse {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubnetAlreadyInUse()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A specified subnet is already in use by another cluster.
public struct SubnetAlreadyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetAlreadyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionAlreadyExistFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionAlreadyExistFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// There is already an existing event notification subscription with the specified name.
public struct SubscriptionAlreadyExistFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionAlreadyExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionCategoryNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionCategoryNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The value specified for the event category was not one of the allowed values, or it specified a category that does not apply to the specified source type. The allowed values are Configuration, Management, Monitoring, and Security.
public struct SubscriptionCategoryNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionCategoryNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionEventIdNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionEventIdNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An Amazon Redshift event with the specified event ID does not exist.
public struct SubscriptionEventIdNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionEventIdNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An Amazon Redshift event notification subscription with the specified name does not exist.
public struct SubscriptionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SubscriptionSeverityNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubscriptionSeverityNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The value specified for the event severity was not one of the allowed values, or it specified a severity that does not apply to the specified source type. The allowed values are ERROR and INFO.
public struct SubscriptionSeverityNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionSeverityNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.SupportedOperation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationName = "OperationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let operationName = operationName {
            try container.encode(operationName, forKey: ClientRuntime.Key("OperationName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SupportedOperation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SupportedOperation()
            value.operationName = try reader["OperationName"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the operations that are allowed on a maintenance track.
    public struct SupportedOperation: Swift.Equatable {
        /// A list of the supported operations.
        public var operationName: Swift.String?

        public init(
            operationName: Swift.String? = nil
        )
        {
            self.operationName = operationName
        }
    }

}

extension RedshiftClientTypes.SupportedPlatform: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.SupportedPlatform, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.SupportedPlatform()
            value.name = try reader["Name"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A list of supported platforms for orderable clusters.
    public struct SupportedPlatform: Swift.Equatable {
        ///
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension TableLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TableLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The number of tables in the cluster exceeds the limit for the requested new cluster node type.
public struct TableLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TableRestoreNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TableRestoreNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified TableRestoreRequestId value was not found.
public struct TableRestoreNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableRestoreNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.TableRestoreStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case message = "Message"
        case newTableName = "NewTableName"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case requestTime = "RequestTime"
        case snapshotIdentifier = "SnapshotIdentifier"
        case sourceDatabaseName = "SourceDatabaseName"
        case sourceSchemaName = "SourceSchemaName"
        case sourceTableName = "SourceTableName"
        case status = "Status"
        case tableRestoreRequestId = "TableRestoreRequestId"
        case targetDatabaseName = "TargetDatabaseName"
        case targetSchemaName = "TargetSchemaName"
        case totalDataInMegaBytes = "TotalDataInMegaBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let newTableName = newTableName {
            try container.encode(newTableName, forKey: ClientRuntime.Key("NewTableName"))
        }
        if let progressInMegaBytes = progressInMegaBytes {
            try container.encode(progressInMegaBytes, forKey: ClientRuntime.Key("ProgressInMegaBytes"))
        }
        if let requestTime = requestTime {
            try container.encodeTimestamp(requestTime, format: .dateTime, forKey: ClientRuntime.Key("RequestTime"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let sourceDatabaseName = sourceDatabaseName {
            try container.encode(sourceDatabaseName, forKey: ClientRuntime.Key("SourceDatabaseName"))
        }
        if let sourceSchemaName = sourceSchemaName {
            try container.encode(sourceSchemaName, forKey: ClientRuntime.Key("SourceSchemaName"))
        }
        if let sourceTableName = sourceTableName {
            try container.encode(sourceTableName, forKey: ClientRuntime.Key("SourceTableName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tableRestoreRequestId = tableRestoreRequestId {
            try container.encode(tableRestoreRequestId, forKey: ClientRuntime.Key("TableRestoreRequestId"))
        }
        if let targetDatabaseName = targetDatabaseName {
            try container.encode(targetDatabaseName, forKey: ClientRuntime.Key("TargetDatabaseName"))
        }
        if let targetSchemaName = targetSchemaName {
            try container.encode(targetSchemaName, forKey: ClientRuntime.Key("TargetSchemaName"))
        }
        if let totalDataInMegaBytes = totalDataInMegaBytes {
            try container.encode(totalDataInMegaBytes, forKey: ClientRuntime.Key("TotalDataInMegaBytes"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.TableRestoreStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.TableRestoreStatus()
            value.tableRestoreRequestId = try reader["TableRestoreRequestId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.message = try reader["Message"].readIfPresent()
            value.requestTime = try reader["RequestTime"].readTimestampIfPresent(format: .dateTime)
            value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
            value.totalDataInMegaBytes = try reader["TotalDataInMegaBytes"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
            value.sourceDatabaseName = try reader["SourceDatabaseName"].readIfPresent()
            value.sourceSchemaName = try reader["SourceSchemaName"].readIfPresent()
            value.sourceTableName = try reader["SourceTableName"].readIfPresent()
            value.targetDatabaseName = try reader["TargetDatabaseName"].readIfPresent()
            value.targetSchemaName = try reader["TargetSchemaName"].readIfPresent()
            value.newTableName = try reader["NewTableName"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a [RestoreTableFromClusterSnapshot] operation.
    public struct TableRestoreStatus: Swift.Equatable {
        /// The identifier of the Amazon Redshift cluster that the table is being restored to.
        public var clusterIdentifier: Swift.String?
        /// A description of the status of the table restore request. Status values include SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS.
        public var message: Swift.String?
        /// The name of the table to create as a result of the table restore request.
        public var newTableName: Swift.String?
        /// The amount of data restored to the new table so far, in megabytes (MB).
        public var progressInMegaBytes: Swift.Int?
        /// The time that the table restore request was made, in Universal Coordinated Time (UTC).
        public var requestTime: ClientRuntime.Date?
        /// The identifier of the snapshot that the table is being restored from.
        public var snapshotIdentifier: Swift.String?
        /// The name of the source database that contains the table being restored.
        public var sourceDatabaseName: Swift.String?
        /// The name of the source schema that contains the table being restored.
        public var sourceSchemaName: Swift.String?
        /// The name of the source table being restored.
        public var sourceTableName: Swift.String?
        /// A value that describes the current state of the table restore request. Valid Values: SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS
        public var status: RedshiftClientTypes.TableRestoreStatusType?
        /// The unique identifier for the table restore request.
        public var tableRestoreRequestId: Swift.String?
        /// The name of the database to restore the table to.
        public var targetDatabaseName: Swift.String?
        /// The name of the schema to restore the table to.
        public var targetSchemaName: Swift.String?
        /// The total amount of data to restore to the new table, in megabytes (MB).
        public var totalDataInMegaBytes: Swift.Int?

        public init(
            clusterIdentifier: Swift.String? = nil,
            message: Swift.String? = nil,
            newTableName: Swift.String? = nil,
            progressInMegaBytes: Swift.Int? = nil,
            requestTime: ClientRuntime.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            sourceDatabaseName: Swift.String? = nil,
            sourceSchemaName: Swift.String? = nil,
            sourceTableName: Swift.String? = nil,
            status: RedshiftClientTypes.TableRestoreStatusType? = nil,
            tableRestoreRequestId: Swift.String? = nil,
            targetDatabaseName: Swift.String? = nil,
            targetSchemaName: Swift.String? = nil,
            totalDataInMegaBytes: Swift.Int? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.message = message
            self.newTableName = newTableName
            self.progressInMegaBytes = progressInMegaBytes
            self.requestTime = requestTime
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceSchemaName = sourceSchemaName
            self.sourceTableName = sourceTableName
            self.status = status
            self.tableRestoreRequestId = tableRestoreRequestId
            self.targetDatabaseName = targetDatabaseName
            self.targetSchemaName = targetSchemaName
            self.totalDataInMegaBytes = totalDataInMegaBytes
        }
    }

}

extension RedshiftClientTypes {
    public enum TableRestoreStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case failed
        case inProgress
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [TableRestoreStatusType] {
            return [
                .canceled,
                .failed,
                .inProgress,
                .pending,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TableRestoreStatusType(rawValue: rawValue) ?? TableRestoreStatusType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.Tag: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.Tag, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.Tag()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A tag consisting of a name/value pair for a resource.
    public struct Tag: Swift.Equatable {
        /// The key, or name, for the resource tag.
        public var key: Swift.String?
        /// The value for the resource tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagLimitExceededFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TagLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You have exceeded the number of tags allowed.
public struct TagLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagLimitExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes.TaggedResource: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case tag = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let tag = tag {
            try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.TaggedResource, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.TaggedResource()
            value.tag = try reader["Tag"].readIfPresent(readingClosure: RedshiftClientTypes.Tag.readingClosure)
            value.resourceName = try reader["ResourceName"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A tag and its associated resource.
    public struct TaggedResource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) with which the tag is associated, for example: arn:aws:redshift:us-east-2:123456789:cluster:t1.
        public var resourceName: Swift.String?
        /// The type of resource with which the tag is associated. Valid resource types are:
        ///
        /// * Cluster
        ///
        /// * CIDR/IP
        ///
        /// * EC2 security group
        ///
        /// * Snapshot
        ///
        /// * Cluster security group
        ///
        /// * Subnet group
        ///
        /// * HSM connection
        ///
        /// * HSM certificate
        ///
        /// * Parameter group
        ///
        ///
        /// For more information about Amazon Redshift resource types and constructing ARNs, go to [Constructing an Amazon Redshift Amazon Resource Name (ARN)](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions) in the Amazon Redshift Cluster Management Guide.
        public var resourceType: Swift.String?
        /// The tag for the resource.
        public var tag: RedshiftClientTypes.Tag?

        public init(
            resourceName: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            tag: RedshiftClientTypes.Tag? = nil
        )
        {
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.tag = tag
        }
    }

}

extension UnauthorizedOperation {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnauthorizedOperation()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Your account is not authorized to perform the requested operation.
public struct UnauthorizedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedOperation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UnauthorizedPartnerIntegrationFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnauthorizedPartnerIntegrationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The partner integration is not authorized.
public struct UnauthorizedPartnerIntegrationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedPartnerIntegration" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UnknownSnapshotCopyRegionFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnknownSnapshotCopyRegionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified region is incorrect or does not exist.
public struct UnknownSnapshotCopyRegionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnknownSnapshotCopyRegionFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UnsupportedOperationFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnsupportedOperationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested operation isn't supported.
public struct UnsupportedOperationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UnsupportedOptionFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnsupportedOptionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A request option was specified that is not supported.
public struct UnsupportedOptionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOptionFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UpdatePartnerStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        try container.encode("UpdatePartnerStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdatePartnerStatusInput {

    static func urlPathProvider(_ value: UpdatePartnerStatusInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdatePartnerStatusInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster whose partner integration status is being updated.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database whose partner integration status is being updated.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner whose integration status is being updated.
    /// This member is required.
    public var partnerName: Swift.String?
    /// The value of the updated status.
    /// This member is required.
    public var status: RedshiftClientTypes.PartnerIntegrationStatus?
    /// The status message provided by the partner.
    public var statusMessage: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        status: RedshiftClientTypes.PartnerIntegrationStatus? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
        self.status = status
        self.statusMessage = statusMessage
    }
}

extension UpdatePartnerStatusOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdatePartnerStatusOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["UpdatePartnerStatusResult"]
            var value = UpdatePartnerStatusOutput()
            value.databaseName = try reader["DatabaseName"].readIfPresent()
            value.partnerName = try reader["PartnerName"].readIfPresent()
            return value
        }
    }
}

public struct UpdatePartnerStatusOutput: Swift.Equatable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

enum UpdatePartnerStatusOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ClusterNotFound": return try await ClusterNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "PartnerNotFound": return try await PartnerNotFoundFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedOperation": return try await UnsupportedOperationFault.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RedshiftClientTypes.UpdateTarget: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseVersion = "DatabaseVersion"
        case maintenanceTrackName = "MaintenanceTrackName"
        case supportedOperations = "SupportedOperations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseVersion = databaseVersion {
            try container.encode(databaseVersion, forKey: ClientRuntime.Key("DatabaseVersion"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let supportedOperations = supportedOperations {
            if !supportedOperations.isEmpty {
                var supportedOperationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedOperations"))
                for (index0, supportedoperation0) in supportedOperations.enumerated() {
                    try supportedOperationsContainer.encode(supportedoperation0, forKey: ClientRuntime.Key("SupportedOperation.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedOperationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedOperations"))
                try supportedOperationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.UpdateTarget, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.UpdateTarget()
            value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
            value.databaseVersion = try reader["DatabaseVersion"].readIfPresent()
            value.supportedOperations = try reader["SupportedOperations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SupportedOperation.readingClosure, memberNodeInfo: "SupportedOperation", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// A maintenance track that you can switch the current track to.
    public struct UpdateTarget: Swift.Equatable {
        /// The cluster version for the new maintenance track.
        public var databaseVersion: Swift.String?
        /// The name of the new maintenance track.
        public var maintenanceTrackName: Swift.String?
        /// A list of operations supported by the maintenance track.
        public var supportedOperations: [RedshiftClientTypes.SupportedOperation]?

        public init(
            databaseVersion: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            supportedOperations: [RedshiftClientTypes.SupportedOperation]? = nil
        )
        {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.supportedOperations = supportedOperations
        }
    }

}

extension RedshiftClientTypes.UsageLimit: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
        case usageLimitId = "UsageLimitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amount = amount {
            try container.encode(amount, forKey: ClientRuntime.Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: ClientRuntime.Key("BreachAction"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: ClientRuntime.Key("FeatureType"))
        }
        if let limitType = limitType {
            try container.encode(limitType, forKey: ClientRuntime.Key("LimitType"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.UsageLimit, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.UsageLimit()
            value.usageLimitId = try reader["UsageLimitId"].readIfPresent()
            value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
            value.featureType = try reader["FeatureType"].readIfPresent()
            value.limitType = try reader["LimitType"].readIfPresent()
            value.amount = try reader["Amount"].readIfPresent()
            value.period = try reader["Period"].readIfPresent()
            value.breachAction = try reader["BreachAction"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.readingClosure, memberNodeInfo: "Tag", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a usage limit object for a cluster.
    public struct UsageLimit: Swift.Equatable {
        /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
        public var amount: Swift.Int?
        /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
        ///
        /// * log - To log an event in a system table. The default is log.
        ///
        /// * emit-metric - To emit CloudWatch metrics.
        ///
        /// * disable - To disable the feature until the next usage period begins.
        public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
        /// The identifier of the cluster with a usage limit.
        public var clusterIdentifier: Swift.String?
        /// The Amazon Redshift feature to which the limit applies.
        public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
        /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
        public var limitType: RedshiftClientTypes.UsageLimitLimitType?
        /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
        public var period: RedshiftClientTypes.UsageLimitPeriod?
        /// A list of tag instances.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The identifier of the usage limit.
        public var usageLimitId: Swift.String?

        public init(
            amount: Swift.Int? = nil,
            breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
            clusterIdentifier: Swift.String? = nil,
            featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
            limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
            period: RedshiftClientTypes.UsageLimitPeriod? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            usageLimitId: Swift.String? = nil
        )
        {
            self.amount = amount
            self.breachAction = breachAction
            self.clusterIdentifier = clusterIdentifier
            self.featureType = featureType
            self.limitType = limitType
            self.period = period
            self.tags = tags
            self.usageLimitId = usageLimitId
        }
    }

}

extension UsageLimitAlreadyExistsFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UsageLimitAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The usage limit already exists.
public struct UsageLimitAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsageLimitAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitBreachAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disable
        case emitMetric
        case log
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitBreachAction] {
            return [
                .disable,
                .emitMetric,
                .log,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disable: return "disable"
            case .emitMetric: return "emit-metric"
            case .log: return "log"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitBreachAction(rawValue: rawValue) ?? UsageLimitBreachAction.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitFeatureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case concurrencyScaling
        case crossRegionDatasharing
        case spectrum
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitFeatureType] {
            return [
                .concurrencyScaling,
                .crossRegionDatasharing,
                .spectrum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .concurrencyScaling: return "concurrency-scaling"
            case .crossRegionDatasharing: return "cross-region-datasharing"
            case .spectrum: return "spectrum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitFeatureType(rawValue: rawValue) ?? UsageLimitFeatureType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitLimitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dataScanned
        case time
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitLimitType] {
            return [
                .dataScanned,
                .time,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dataScanned: return "data-scanned"
            case .time: return "time"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitLimitType(rawValue: rawValue) ?? UsageLimitLimitType.sdkUnknown(rawValue)
        }
    }
}

extension UsageLimitNotFoundFault {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UsageLimitNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The usage limit identifier can't be found.
public struct UsageLimitNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsageLimitNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitPeriod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case daily
        case monthly
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitPeriod] {
            return [
                .daily,
                .monthly,
                .weekly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .daily: return "daily"
            case .monthly: return "monthly"
            case .weekly: return "weekly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitPeriod(rawValue: rawValue) ?? UsageLimitPeriod.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.VpcEndpoint: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInterfaces = "NetworkInterfaces"
        case vpcEndpointId = "VpcEndpointId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let networkInterfaces = networkInterfaces {
            if !networkInterfaces.isEmpty {
                var networkInterfacesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkInterfaces"))
                for (index0, networkinterface0) in networkInterfaces.enumerated() {
                    try networkInterfacesContainer.encode(networkinterface0, forKey: ClientRuntime.Key("NetworkInterface.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var networkInterfacesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkInterfaces"))
                try networkInterfacesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: ClientRuntime.Key("VpcEndpointId"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.VpcEndpoint, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.VpcEndpoint()
            value.vpcEndpointId = try reader["VpcEndpointId"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.networkInterfaces = try reader["NetworkInterfaces"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.NetworkInterface.readingClosure, memberNodeInfo: "NetworkInterface", isFlattened: false)
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public struct VpcEndpoint: Swift.Equatable {
        /// One or more network interfaces of the endpoint. Also known as an interface endpoint.
        public var networkInterfaces: [RedshiftClientTypes.NetworkInterface]?
        /// The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
        public var vpcEndpointId: Swift.String?
        /// The VPC identifier that the endpoint is associated.
        public var vpcId: Swift.String?

        public init(
            networkInterfaces: [RedshiftClientTypes.NetworkInterface]? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.networkInterfaces = networkInterfaces
            self.vpcEndpointId = vpcEndpointId
            self.vpcId = vpcId
        }
    }

}

extension RedshiftClientTypes.VpcSecurityGroupMembership: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case vpcSecurityGroupId = "VpcSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let vpcSecurityGroupId = vpcSecurityGroupId {
            try container.encode(vpcSecurityGroupId, forKey: ClientRuntime.Key("VpcSecurityGroupId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<RedshiftClientTypes.VpcSecurityGroupMembership, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = RedshiftClientTypes.VpcSecurityGroupMembership()
            value.vpcSecurityGroupId = try reader["VpcSecurityGroupId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the members of a VPC security group.
    public struct VpcSecurityGroupMembership: Swift.Equatable {
        /// The status of the VPC security group.
        public var status: Swift.String?
        /// The identifier of the VPC security group.
        public var vpcSecurityGroupId: Swift.String?

        public init(
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }

}

extension RedshiftClientTypes {
    public enum ZeroETLIntegrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case modifying
        case needsAttention
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [ZeroETLIntegrationStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .modifying,
                .needsAttention,
                .syncing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .failed: return "failed"
            case .modifying: return "modifying"
            case .needsAttention: return "needs_attention"
            case .syncing: return "syncing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ZeroETLIntegrationStatus(rawValue: rawValue) ?? ZeroETLIntegrationStatus.sdkUnknown(rawValue)
        }
    }
}
