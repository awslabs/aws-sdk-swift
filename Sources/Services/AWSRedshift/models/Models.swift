// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AcceptReservedNodeExchangeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        try container.encode("AcceptReservedNodeExchange", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AcceptReservedNodeExchangeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AcceptReservedNodeExchangeInput: Swift.Equatable {
    /// A string representing the node identifier of the DC1 Reserved Node to be exchanged.
    /// This member is required.
    public var reservedNodeId: Swift.String?
    /// The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling [GetReservedNodeExchangeOfferings]
    /// This member is required.
    public var targetReservedNodeOfferingId: Swift.String?

    public init(
        reservedNodeId: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.reservedNodeId = reservedNodeId
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
    }
}

struct AcceptReservedNodeExchangeInputBody: Swift.Equatable {
    let reservedNodeId: Swift.String?
    let targetReservedNodeOfferingId: Swift.String?
}

extension AcceptReservedNodeExchangeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservedNodeId = "ReservedNodeId"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let targetReservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeOfferingId)
        targetReservedNodeOfferingId = targetReservedNodeOfferingIdDecoded
    }
}

extension AcceptReservedNodeExchangeOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AcceptReservedNodeExchangeOutputBody = try responseDecoder.decode(responseBody: data)
            self.exchangedReservedNode = output.exchangedReservedNode
        } else {
            self.exchangedReservedNode = nil
        }
    }
}

public struct AcceptReservedNodeExchangeOutput: Swift.Equatable {
    ///
    public var exchangedReservedNode: RedshiftClientTypes.ReservedNode?

    public init(
        exchangedReservedNode: RedshiftClientTypes.ReservedNode? = nil
    )
    {
        self.exchangedReservedNode = exchangedReservedNode
    }
}

struct AcceptReservedNodeExchangeOutputBody: Swift.Equatable {
    let exchangedReservedNode: RedshiftClientTypes.ReservedNode?
}

extension AcceptReservedNodeExchangeOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exchangedReservedNode = "ExchangedReservedNode"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AcceptReservedNodeExchangeResult"))
        let exchangedReservedNodeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNode.self, forKey: .exchangedReservedNode)
        exchangedReservedNode = exchangedReservedNodeDecoded
    }
}

enum AcceptReservedNodeExchangeOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension AccessToClusterDeniedFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AccessToClusterDeniedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You are not authorized to access the cluster.
public struct AccessToClusterDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessToClusterDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessToClusterDeniedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessToClusterDeniedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AccessToSnapshotDeniedFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AccessToSnapshotDeniedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The owner of the specified snapshot has not authorized your account to access the snapshot.
public struct AccessToSnapshotDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessToSnapshotDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessToSnapshotDeniedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessToSnapshotDeniedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.AccountAttribute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeValues = "AttributeValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeName = attributeName {
            try container.encode(attributeName, forKey: ClientRuntime.Key("AttributeName"))
        }
        if let attributeValues = attributeValues {
            if !attributeValues.isEmpty {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                for (index0, attributevaluetarget0) in attributeValues.enumerated() {
                    try attributeValuesContainer.encode(attributevaluetarget0, forKey: ClientRuntime.Key("AttributeValueTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeValues"))
                try attributeValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        if containerValues.contains(.attributeValues) {
            struct KeyVal0{struct AttributeValueTarget{}}
            let attributeValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AttributeValueTarget>.CodingKeys.self, forKey: .attributeValues)
            if let attributeValuesWrappedContainer = attributeValuesWrappedContainer {
                let attributeValuesContainer = try attributeValuesWrappedContainer.decodeIfPresent([RedshiftClientTypes.AttributeValueTarget].self, forKey: .member)
                var attributeValuesBuffer:[RedshiftClientTypes.AttributeValueTarget]? = nil
                if let attributeValuesContainer = attributeValuesContainer {
                    attributeValuesBuffer = [RedshiftClientTypes.AttributeValueTarget]()
                    for structureContainer0 in attributeValuesContainer {
                        attributeValuesBuffer?.append(structureContainer0)
                    }
                }
                attributeValues = attributeValuesBuffer
            } else {
                attributeValues = []
            }
        } else {
            attributeValues = nil
        }
    }
}

extension RedshiftClientTypes {
    /// A name value pair that describes an aspect of an account.
    public struct AccountAttribute: Swift.Equatable {
        /// The name of the attribute.
        public var attributeName: Swift.String?
        /// A list of attribute values.
        public var attributeValues: [RedshiftClientTypes.AttributeValueTarget]?

        public init(
            attributeName: Swift.String? = nil,
            attributeValues: [RedshiftClientTypes.AttributeValueTarget]? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }
    }

}

extension RedshiftClientTypes.AccountWithRestoreAccess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAlias = "AccountAlias"
        case accountId = "AccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountAlias = accountAlias {
            try container.encode(accountAlias, forKey: ClientRuntime.Key("AccountAlias"))
        }
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let accountAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountAlias)
        accountAlias = accountAliasDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes an Amazon Web Services account authorized to restore a snapshot.
    public struct AccountWithRestoreAccess: Swift.Equatable {
        /// The identifier of an Amazon Web Services support account authorized to restore a snapshot. For Amazon Web Services Support, the identifier is amazon-redshift-support.
        public var accountAlias: Swift.String?
        /// The identifier of an Amazon Web Services account authorized to restore a snapshot.
        public var accountId: Swift.String?

        public init(
            accountAlias: Swift.String? = nil,
            accountId: Swift.String? = nil
        )
        {
            self.accountAlias = accountAlias
            self.accountId = accountId
        }
    }

}

extension RedshiftClientTypes {
    public enum ActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case recommendNodeConfig
        case resizeCluster
        case restoreCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .recommendNodeConfig,
                .resizeCluster,
                .restoreCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .recommendNodeConfig: return "recommend-node-config"
            case .resizeCluster: return "resize-cluster"
            case .restoreCluster: return "restore-cluster"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionType(rawValue: rawValue) ?? ActionType.sdkUnknown(rawValue)
        }
    }
}

extension AddPartnerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        try container.encode("AddPartner", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddPartnerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddPartnerInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster that receives data from the partner.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database that receives data from the partner.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    /// This member is required.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

struct AddPartnerInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let clusterIdentifier: Swift.String?
    let databaseName: Swift.String?
    let partnerName: Swift.String?
}

extension AddPartnerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
    }
}

extension AddPartnerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AddPartnerOutputBody = try responseDecoder.decode(responseBody: data)
            self.databaseName = output.databaseName
            self.partnerName = output.partnerName
        } else {
            self.databaseName = nil
            self.partnerName = nil
        }
    }
}

public struct AddPartnerOutput: Swift.Equatable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

struct AddPartnerOutputBody: Swift.Equatable {
    let databaseName: Swift.String?
    let partnerName: Swift.String?
}

extension AddPartnerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AddPartnerResult"))
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
    }
}

enum AddPartnerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "PartnerNotFound": return try await PartnerNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.AquaConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case aquaStatus = "AquaStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let aquaStatus = aquaStatus {
            try container.encode(aquaStatus, forKey: ClientRuntime.Key("AquaStatus"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aquaStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaStatus.self, forKey: .aquaStatus)
        aquaStatus = aquaStatusDecoded
        let aquaConfigurationStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfigurationStatus.self, forKey: .aquaConfigurationStatus)
        aquaConfigurationStatus = aquaConfigurationStatusDecoded
    }
}

extension RedshiftClientTypes {
    /// The operation that uses this structure is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public struct AquaConfiguration: Swift.Equatable {
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaStatus: RedshiftClientTypes.AquaStatus?

        public init(
            aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
            aquaStatus: RedshiftClientTypes.AquaStatus? = nil
        )
        {
            self.aquaConfigurationStatus = aquaConfigurationStatus
            self.aquaStatus = aquaStatus
        }
    }

}

extension RedshiftClientTypes {
    public enum AquaConfigurationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AquaConfigurationStatus] {
            return [
                .auto,
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "auto"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AquaConfigurationStatus(rawValue: rawValue) ?? AquaConfigurationStatus.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum AquaStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applying
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AquaStatus] {
            return [
                .applying,
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applying: return "applying"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AquaStatus(rawValue: rawValue) ?? AquaStatus.sdkUnknown(rawValue)
        }
    }
}

extension AssociateDataShareConsumerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowWrites = allowWrites {
            try container.encode(allowWrites, forKey: ClientRuntime.Key("AllowWrites"))
        }
        if let associateEntireAccount = associateEntireAccount {
            try container.encode(associateEntireAccount, forKey: ClientRuntime.Key("AssociateEntireAccount"))
        }
        if let consumerArn = consumerArn {
            try container.encode(consumerArn, forKey: ClientRuntime.Key("ConsumerArn"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("AssociateDataShareConsumer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AssociateDataShareConsumerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateDataShareConsumerInput: Swift.Equatable {
    /// If set to true, allows write operations for a datashare.
    public var allowWrites: Swift.Bool?
    /// A value that specifies whether the datashare is associated with the entire account.
    public var associateEntireAccount: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the consumer that is associated with the datashare.
    public var consumerArn: Swift.String?
    /// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified Amazon Web Services Region.
    public var consumerRegion: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        allowWrites: Swift.Bool? = nil,
        associateEntireAccount: Swift.Bool? = nil,
        consumerArn: Swift.String? = nil,
        consumerRegion: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.allowWrites = allowWrites
        self.associateEntireAccount = associateEntireAccount
        self.consumerArn = consumerArn
        self.consumerRegion = consumerRegion
        self.dataShareArn = dataShareArn
    }
}

struct AssociateDataShareConsumerInputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let associateEntireAccount: Swift.Bool?
    let consumerArn: Swift.String?
    let consumerRegion: Swift.String?
    let allowWrites: Swift.Bool?
}

extension AssociateDataShareConsumerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowWrites = "AllowWrites"
        case associateEntireAccount = "AssociateEntireAccount"
        case consumerArn = "ConsumerArn"
        case consumerRegion = "ConsumerRegion"
        case dataShareArn = "DataShareArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let associateEntireAccountDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .associateEntireAccount)
        associateEntireAccount = associateEntireAccountDecoded
        let consumerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerArn)
        consumerArn = consumerArnDecoded
        let consumerRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerRegion)
        consumerRegion = consumerRegionDecoded
        let allowWritesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowWrites)
        allowWrites = allowWritesDecoded
    }
}

extension AssociateDataShareConsumerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AssociateDataShareConsumerOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowPubliclyAccessibleConsumers = output.allowPubliclyAccessibleConsumers
            self.dataShareArn = output.dataShareArn
            self.dataShareAssociations = output.dataShareAssociations
            self.managedBy = output.managedBy
            self.producerArn = output.producerArn
        } else {
            self.allowPubliclyAccessibleConsumers = nil
            self.dataShareArn = nil
            self.dataShareAssociations = nil
            self.managedBy = nil
            self.producerArn = nil
        }
    }
}

public struct AssociateDataShareConsumerOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

struct AssociateDataShareConsumerOutputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let producerArn: Swift.String?
    let allowPubliclyAccessibleConsumers: Swift.Bool?
    let dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    let managedBy: Swift.String?
}

extension AssociateDataShareConsumerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AssociateDataShareConsumerResult"))
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}

enum AssociateDataShareConsumerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidDataShareFault": return try await InvalidDataShareFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidNamespaceFault": return try await InvalidNamespaceFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.Association: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAssociations = "CertificateAssociations"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainCertificateExpiryDate = "CustomDomainCertificateExpiryDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateAssociations = certificateAssociations {
            if !certificateAssociations.isEmpty {
                var certificateAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CertificateAssociations"))
                for (index0, certificateassociation0) in certificateAssociations.enumerated() {
                    try certificateAssociationsContainer.encode(certificateassociation0, forKey: ClientRuntime.Key("CertificateAssociation.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificateAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CertificateAssociations"))
                try certificateAssociationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainCertificateExpiryDate = customDomainCertificateExpiryDate {
            try container.encodeTimestamp(customDomainCertificateExpiryDate, format: .dateTime, forKey: ClientRuntime.Key("CustomDomainCertificateExpiryDate"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let customDomainCertificateExpiryDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .customDomainCertificateExpiryDate)
        customDomainCertificateExpiryDate = customDomainCertificateExpiryDateDecoded
        if containerValues.contains(.certificateAssociations) {
            struct KeyVal0{struct CertificateAssociation{}}
            let certificateAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CertificateAssociation>.CodingKeys.self, forKey: .certificateAssociations)
            if let certificateAssociationsWrappedContainer = certificateAssociationsWrappedContainer {
                let certificateAssociationsContainer = try certificateAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.CertificateAssociation].self, forKey: .member)
                var certificateAssociationsBuffer:[RedshiftClientTypes.CertificateAssociation]? = nil
                if let certificateAssociationsContainer = certificateAssociationsContainer {
                    certificateAssociationsBuffer = [RedshiftClientTypes.CertificateAssociation]()
                    for structureContainer0 in certificateAssociationsContainer {
                        certificateAssociationsBuffer?.append(structureContainer0)
                    }
                }
                certificateAssociations = certificateAssociationsBuffer
            } else {
                certificateAssociations = []
            }
        } else {
            certificateAssociations = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Contains information about the custom domain name association.
    public struct Association: Swift.Equatable {
        /// A list of all associated clusters and domain names tied to a specific certificate.
        public var certificateAssociations: [RedshiftClientTypes.CertificateAssociation]?
        /// The Amazon Resource Name (ARN) for the certificate associated with the custom domain.
        public var customDomainCertificateArn: Swift.String?
        /// The expiration date for the certificate.
        public var customDomainCertificateExpiryDate: ClientRuntime.Date?

        public init(
            certificateAssociations: [RedshiftClientTypes.CertificateAssociation]? = nil,
            customDomainCertificateArn: Swift.String? = nil,
            customDomainCertificateExpiryDate: ClientRuntime.Date? = nil
        )
        {
            self.certificateAssociations = certificateAssociations
            self.customDomainCertificateArn = customDomainCertificateArn
            self.customDomainCertificateExpiryDate = customDomainCertificateExpiryDate
        }
    }

}

extension RedshiftClientTypes.AttributeValueTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeValue = "AttributeValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeValue = attributeValue {
            try container.encode(attributeValue, forKey: ClientRuntime.Key("AttributeValue"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeValue)
        attributeValue = attributeValueDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes an attribute value.
    public struct AttributeValueTarget: Swift.Equatable {
        /// The value of the attribute.
        public var attributeValue: Swift.String?

        public init(
            attributeValue: Swift.String? = nil
        )
        {
            self.attributeValue = attributeValue
        }
    }

}

extension RedshiftClientTypes.AuthenticationProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileContent = authenticationProfileContent {
            try container.encode(authenticationProfileContent, forKey: ClientRuntime.Key("AuthenticationProfileContent"))
        }
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
        let authenticationProfileContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileContent)
        authenticationProfileContent = authenticationProfileContentDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes an authentication profile.
    public struct AuthenticationProfile: Swift.Equatable {
        /// The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
        public var authenticationProfileContent: Swift.String?
        /// The name of the authentication profile.
        public var authenticationProfileName: Swift.String?

        public init(
            authenticationProfileContent: Swift.String? = nil,
            authenticationProfileName: Swift.String? = nil
        )
        {
            self.authenticationProfileContent = authenticationProfileContent
            self.authenticationProfileName = authenticationProfileName
        }
    }

}

extension AuthenticationProfileAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AuthenticationProfileAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The authentication profile already exists.
public struct AuthenticationProfileAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AuthenticationProfileAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthenticationProfileAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthenticationProfileNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AuthenticationProfileNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The authentication profile can't be found.
public struct AuthenticationProfileNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AuthenticationProfileNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthenticationProfileNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthenticationProfileQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AuthenticationProfileQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The size or number of authentication profiles has exceeded the quota. The maximum length of the JSON string and maximum number of authentication profiles is determined by a quota for your account.
public struct AuthenticationProfileQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AuthenticationProfileQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthenticationProfileQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthorizationAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AuthorizationAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified CIDR block or EC2 security group is already authorized for the specified cluster security group.
public struct AuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AuthorizationAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthorizationAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthorizationNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AuthorizationNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified CIDR IP range or EC2 security group is not authorized for the specified cluster security group.
public struct AuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AuthorizationNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthorizationNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthorizationQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AuthorizationQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The authorization quota for the cluster security group has been reached.
public struct AuthorizationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AuthorizationQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthorizationQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum AuthorizationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authorized
        case revoking
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthorizationStatus] {
            return [
                .authorized,
                .revoking,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authorized: return "Authorized"
            case .revoking: return "Revoking"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthorizationStatus(rawValue: rawValue) ?? AuthorizationStatus.sdkUnknown(rawValue)
        }
    }
}

extension AuthorizeClusterSecurityGroupIngressInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("AuthorizeClusterSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeClusterSecurityGroupIngressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct AuthorizeClusterSecurityGroupIngressInput: Swift.Equatable {
    /// The IP range to be added the Amazon Redshift security group.
    public var cidrip: Swift.String?
    /// The name of the security group to which the ingress rule is added.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// The EC2 security group to be added the Amazon Redshift security group.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the security group specified by the EC2SecurityGroupName parameter. The Amazon Web Services Access Key ID is not an acceptable value. Example: 111122223333
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        clusterSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

struct AuthorizeClusterSecurityGroupIngressInputBody: Swift.Equatable {
    let clusterSecurityGroupName: Swift.String?
    let cidrip: Swift.String?
    let ec2SecurityGroupName: Swift.String?
    let ec2SecurityGroupOwnerId: Swift.String?
}

extension AuthorizeClusterSecurityGroupIngressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let cidripDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrip)
        cidrip = cidripDecoded
        let ec2SecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SecurityGroupName)
        ec2SecurityGroupName = ec2SecurityGroupNameDecoded
        let ec2SecurityGroupOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SecurityGroupOwnerId)
        ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerIdDecoded
    }
}

extension AuthorizeClusterSecurityGroupIngressOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AuthorizeClusterSecurityGroupIngressOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSecurityGroup = output.clusterSecurityGroup
        } else {
            self.clusterSecurityGroup = nil
        }
    }
}

public struct AuthorizeClusterSecurityGroupIngressOutput: Swift.Equatable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

struct AuthorizeClusterSecurityGroupIngressOutputBody: Swift.Equatable {
    let clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?
}

extension AuthorizeClusterSecurityGroupIngressOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroup = "ClusterSecurityGroup"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AuthorizeClusterSecurityGroupIngressResult"))
        let clusterSecurityGroupDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterSecurityGroup.self, forKey: .clusterSecurityGroup)
        clusterSecurityGroup = clusterSecurityGroupDecoded
    }
}

enum AuthorizeClusterSecurityGroupIngressOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthorizationAlreadyExists": return try await AuthorizationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AuthorizationQuotaExceeded": return try await AuthorizationQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension AuthorizeDataShareInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowWrites = allowWrites {
            try container.encode(allowWrites, forKey: ClientRuntime.Key("AllowWrites"))
        }
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("AuthorizeDataShare", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeDataShareInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AuthorizeDataShareInput: Swift.Equatable {
    /// If set to true, allows write operations for a datashare.
    public var allowWrites: Swift.Bool?
    /// The identifier of the data consumer that is authorized to access the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
    /// This member is required.
    public var consumerIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        allowWrites: Swift.Bool? = nil,
        consumerIdentifier: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.allowWrites = allowWrites
        self.consumerIdentifier = consumerIdentifier
        self.dataShareArn = dataShareArn
    }
}

struct AuthorizeDataShareInputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let consumerIdentifier: Swift.String?
    let allowWrites: Swift.Bool?
}

extension AuthorizeDataShareInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowWrites = "AllowWrites"
        case consumerIdentifier = "ConsumerIdentifier"
        case dataShareArn = "DataShareArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let consumerIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerIdentifier)
        consumerIdentifier = consumerIdentifierDecoded
        let allowWritesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowWrites)
        allowWrites = allowWritesDecoded
    }
}

extension AuthorizeDataShareOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AuthorizeDataShareOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowPubliclyAccessibleConsumers = output.allowPubliclyAccessibleConsumers
            self.dataShareArn = output.dataShareArn
            self.dataShareAssociations = output.dataShareAssociations
            self.managedBy = output.managedBy
            self.producerArn = output.producerArn
        } else {
            self.allowPubliclyAccessibleConsumers = nil
            self.dataShareArn = nil
            self.dataShareAssociations = nil
            self.managedBy = nil
            self.producerArn = nil
        }
    }
}

public struct AuthorizeDataShareOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

struct AuthorizeDataShareOutputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let producerArn: Swift.String?
    let allowPubliclyAccessibleConsumers: Swift.Bool?
    let dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    let managedBy: Swift.String?
}

extension AuthorizeDataShareOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AuthorizeDataShareResult"))
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}

enum AuthorizeDataShareOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidDataShareFault": return try await InvalidDataShareFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension AuthorizeEndpointAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let vpcIds = vpcIds {
            if !vpcIds.isEmpty {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                for (index0, string0) in vpcIds.enumerated() {
                    try vpcIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                try vpcIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AuthorizeEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AuthorizeEndpointAccessInput: Swift.Equatable {
    /// The Amazon Web Services account ID to grant access to.
    /// This member is required.
    public var account: Swift.String?
    /// The cluster identifier of the cluster to grant access to.
    public var clusterIdentifier: Swift.String?
    /// The virtual private cloud (VPC) identifiers to grant access to.
    public var vpcIds: [Swift.String]?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.vpcIds = vpcIds
    }
}

struct AuthorizeEndpointAccessInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let account: Swift.String?
    let vpcIds: [Swift.String]?
}

extension AuthorizeEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case clusterIdentifier = "ClusterIdentifier"
        case vpcIds = "VpcIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        if containerValues.contains(.vpcIds) {
            struct KeyVal0{struct VpcIdentifier{}}
            let vpcIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcIdentifier>.CodingKeys.self, forKey: .vpcIds)
            if let vpcIdsWrappedContainer = vpcIdsWrappedContainer {
                let vpcIdsContainer = try vpcIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcIdsBuffer:[Swift.String]? = nil
                if let vpcIdsContainer = vpcIdsContainer {
                    vpcIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcIdsContainer {
                        vpcIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcIds = vpcIdsBuffer
            } else {
                vpcIds = []
            }
        } else {
            vpcIds = nil
        }
    }
}

extension AuthorizeEndpointAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AuthorizeEndpointAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowedAllVPCs = output.allowedAllVPCs
            self.allowedVPCs = output.allowedVPCs
            self.authorizeTime = output.authorizeTime
            self.clusterIdentifier = output.clusterIdentifier
            self.clusterStatus = output.clusterStatus
            self.endpointCount = output.endpointCount
            self.grantee = output.grantee
            self.grantor = output.grantor
            self.status = output.status
        } else {
            self.allowedAllVPCs = nil
            self.allowedVPCs = nil
            self.authorizeTime = nil
            self.clusterIdentifier = nil
            self.clusterStatus = nil
            self.endpointCount = nil
            self.grantee = nil
            self.grantor = nil
            self.status = nil
        }
    }
}

/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
public struct AuthorizeEndpointAccessOutput: Swift.Equatable {
    /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
    public var allowedAllVPCs: Swift.Bool?
    /// The VPCs allowed access to the cluster.
    public var allowedVPCs: [Swift.String]?
    /// The time (UTC) when the authorization was created.
    public var authorizeTime: ClientRuntime.Date?
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The status of the cluster.
    public var clusterStatus: Swift.String?
    /// The number of Redshift-managed VPC endpoints created for the authorization.
    public var endpointCount: Swift.Int?
    /// The Amazon Web Services account ID of the grantee of the cluster.
    public var grantee: Swift.String?
    /// The Amazon Web Services account ID of the cluster owner.
    public var grantor: Swift.String?
    /// The status of the authorization action.
    public var status: RedshiftClientTypes.AuthorizationStatus?

    public init(
        allowedAllVPCs: Swift.Bool? = nil,
        allowedVPCs: [Swift.String]? = nil,
        authorizeTime: ClientRuntime.Date? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterStatus: Swift.String? = nil,
        endpointCount: Swift.Int? = nil,
        grantee: Swift.String? = nil,
        grantor: Swift.String? = nil,
        status: RedshiftClientTypes.AuthorizationStatus? = nil
    )
    {
        self.allowedAllVPCs = allowedAllVPCs
        self.allowedVPCs = allowedVPCs
        self.authorizeTime = authorizeTime
        self.clusterIdentifier = clusterIdentifier
        self.clusterStatus = clusterStatus
        self.endpointCount = endpointCount
        self.grantee = grantee
        self.grantor = grantor
        self.status = status
    }
}

struct AuthorizeEndpointAccessOutputBody: Swift.Equatable {
    let grantor: Swift.String?
    let grantee: Swift.String?
    let clusterIdentifier: Swift.String?
    let authorizeTime: ClientRuntime.Date?
    let clusterStatus: Swift.String?
    let status: RedshiftClientTypes.AuthorizationStatus?
    let allowedAllVPCs: Swift.Bool?
    let allowedVPCs: [Swift.String]?
    let endpointCount: Swift.Int?
}

extension AuthorizeEndpointAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAllVPCs = "AllowedAllVPCs"
        case allowedVPCs = "AllowedVPCs"
        case authorizeTime = "AuthorizeTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterStatus = "ClusterStatus"
        case endpointCount = "EndpointCount"
        case grantee = "Grantee"
        case grantor = "Grantor"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AuthorizeEndpointAccessResult"))
        let grantorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantor)
        grantor = grantorDecoded
        let granteeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantee)
        grantee = granteeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let authorizeTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .authorizeTime)
        authorizeTime = authorizeTimeDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AuthorizationStatus.self, forKey: .status)
        status = statusDecoded
        let allowedAllVPCsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedAllVPCs)
        allowedAllVPCs = allowedAllVPCsDecoded
        if containerValues.contains(.allowedVPCs) {
            struct KeyVal0{struct VpcIdentifier{}}
            let allowedVPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcIdentifier>.CodingKeys.self, forKey: .allowedVPCs)
            if let allowedVPCsWrappedContainer = allowedVPCsWrappedContainer {
                let allowedVPCsContainer = try allowedVPCsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allowedVPCsBuffer:[Swift.String]? = nil
                if let allowedVPCsContainer = allowedVPCsContainer {
                    allowedVPCsBuffer = [Swift.String]()
                    for stringContainer0 in allowedVPCsContainer {
                        allowedVPCsBuffer?.append(stringContainer0)
                    }
                }
                allowedVPCs = allowedVPCsBuffer
            } else {
                allowedVPCs = []
            }
        } else {
            allowedVPCs = nil
        }
        let endpointCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endpointCount)
        endpointCount = endpointCountDecoded
    }
}

enum AuthorizeEndpointAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointAuthorizationAlreadyExists": return try await EndpointAuthorizationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointAuthorizationsPerClusterLimitExceeded": return try await EndpointAuthorizationsPerClusterLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidAuthorizationState": return try await InvalidAuthorizationStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension AuthorizeSnapshotAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountWithRestoreAccess = accountWithRestoreAccess {
            try container.encode(accountWithRestoreAccess, forKey: ClientRuntime.Key("AccountWithRestoreAccess"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("AuthorizeSnapshotAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeSnapshotAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct AuthorizeSnapshotAccessInput: Swift.Equatable {
    /// The identifier of the Amazon Web Services account authorized to restore the specified snapshot. To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.
    /// This member is required.
    public var accountWithRestoreAccess: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot to authorize access to.
    public var snapshotArn: Swift.String?
    /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The identifier of the snapshot the account is authorized to restore.
    public var snapshotIdentifier: Swift.String?

    public init(
        accountWithRestoreAccess: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.accountWithRestoreAccess = accountWithRestoreAccess
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

struct AuthorizeSnapshotAccessInputBody: Swift.Equatable {
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let snapshotClusterIdentifier: Swift.String?
    let accountWithRestoreAccess: Swift.String?
}

extension AuthorizeSnapshotAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountWithRestoreAccess = "AccountWithRestoreAccess"
        case snapshotArn = "SnapshotArn"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let snapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotClusterIdentifier)
        snapshotClusterIdentifier = snapshotClusterIdentifierDecoded
        let accountWithRestoreAccessDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountWithRestoreAccess)
        accountWithRestoreAccess = accountWithRestoreAccessDecoded
    }
}

extension AuthorizeSnapshotAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AuthorizeSnapshotAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct AuthorizeSnapshotAccessOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct AuthorizeSnapshotAccessOutputBody: Swift.Equatable {
    let snapshot: RedshiftClientTypes.Snapshot?
}

extension AuthorizeSnapshotAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AuthorizeSnapshotAccessResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

enum AuthorizeSnapshotAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthorizationAlreadyExists": return try await AuthorizationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AuthorizationQuotaExceeded": return try await AuthorizationQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.AuthorizedTokenIssuer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedAudiencesList = "AuthorizedAudiencesList"
        case trustedTokenIssuerArn = "TrustedTokenIssuerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedAudiencesList = authorizedAudiencesList {
            if !authorizedAudiencesList.isEmpty {
                var authorizedAudiencesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedAudiencesList"))
                for (index0, string0) in authorizedAudiencesList.enumerated() {
                    try authorizedAudiencesListContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedAudiencesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedAudiencesList"))
                try authorizedAudiencesListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trustedTokenIssuerArn = trustedTokenIssuerArn {
            try container.encode(trustedTokenIssuerArn, forKey: ClientRuntime.Key("TrustedTokenIssuerArn"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustedTokenIssuerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustedTokenIssuerArn)
        trustedTokenIssuerArn = trustedTokenIssuerArnDecoded
        if containerValues.contains(.authorizedAudiencesList) {
            struct KeyVal0{struct member{}}
            let authorizedAudiencesListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .authorizedAudiencesList)
            if let authorizedAudiencesListWrappedContainer = authorizedAudiencesListWrappedContainer {
                let authorizedAudiencesListContainer = try authorizedAudiencesListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var authorizedAudiencesListBuffer:[Swift.String]? = nil
                if let authorizedAudiencesListContainer = authorizedAudiencesListContainer {
                    authorizedAudiencesListBuffer = [Swift.String]()
                    for stringContainer0 in authorizedAudiencesListContainer {
                        authorizedAudiencesListBuffer?.append(stringContainer0)
                    }
                }
                authorizedAudiencesList = authorizedAudiencesListBuffer
            } else {
                authorizedAudiencesList = []
            }
        } else {
            authorizedAudiencesList = nil
        }
    }
}

extension RedshiftClientTypes {
    /// The authorized token issuer for the Amazon Redshift IAM Identity Center application.
    public struct AuthorizedTokenIssuer: Swift.Equatable {
        /// The list of audiences for the authorized token issuer for integrating Amazon Redshift with IDC Identity Center.
        public var authorizedAudiencesList: [Swift.String]?
        /// The ARN for the authorized token issuer for integrating Amazon Redshift with IDC Identity Center.
        public var trustedTokenIssuerArn: Swift.String?

        public init(
            authorizedAudiencesList: [Swift.String]? = nil,
            trustedTokenIssuerArn: Swift.String? = nil
        )
        {
            self.authorizedAudiencesList = authorizedAudiencesList
            self.trustedTokenIssuerArn = trustedTokenIssuerArn
        }
    }

}

extension RedshiftClientTypes.AvailabilityZone: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case supportedPlatforms = "SupportedPlatforms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let supportedPlatforms = supportedPlatforms {
            if !supportedPlatforms.isEmpty {
                var supportedPlatformsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedPlatforms"))
                for (index0, supportedplatform0) in supportedPlatforms.enumerated() {
                    try supportedPlatformsContainer.encode(supportedplatform0, forKey: ClientRuntime.Key("SupportedPlatform.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedPlatformsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedPlatforms"))
                try supportedPlatformsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.supportedPlatforms) {
            struct KeyVal0{struct SupportedPlatform{}}
            let supportedPlatformsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SupportedPlatform>.CodingKeys.self, forKey: .supportedPlatforms)
            if let supportedPlatformsWrappedContainer = supportedPlatformsWrappedContainer {
                let supportedPlatformsContainer = try supportedPlatformsWrappedContainer.decodeIfPresent([RedshiftClientTypes.SupportedPlatform].self, forKey: .member)
                var supportedPlatformsBuffer:[RedshiftClientTypes.SupportedPlatform]? = nil
                if let supportedPlatformsContainer = supportedPlatformsContainer {
                    supportedPlatformsBuffer = [RedshiftClientTypes.SupportedPlatform]()
                    for structureContainer0 in supportedPlatformsContainer {
                        supportedPlatformsBuffer?.append(structureContainer0)
                    }
                }
                supportedPlatforms = supportedPlatformsBuffer
            } else {
                supportedPlatforms = []
            }
        } else {
            supportedPlatforms = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an availability zone.
    public struct AvailabilityZone: Swift.Equatable {
        /// The name of the availability zone.
        public var name: Swift.String?
        ///
        public var supportedPlatforms: [RedshiftClientTypes.SupportedPlatform]?

        public init(
            name: Swift.String? = nil,
            supportedPlatforms: [RedshiftClientTypes.SupportedPlatform]? = nil
        )
        {
            self.name = name
            self.supportedPlatforms = supportedPlatforms
        }
    }

}

extension BatchDeleteClusterSnapshotsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let identifiers = identifiers {
            if !identifiers.isEmpty {
                var identifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identifiers"))
                for (index0, deleteclustersnapshotmessage0) in identifiers.enumerated() {
                    try identifiersContainer.encode(deleteclustersnapshotmessage0, forKey: ClientRuntime.Key("DeleteClusterSnapshotMessage.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var identifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Identifiers"))
                try identifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchDeleteClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchDeleteClusterSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDeleteClusterSnapshotsInput: Swift.Equatable {
    /// A list of identifiers for the snapshots that you want to delete.
    /// This member is required.
    public var identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]?

    public init(
        identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]? = nil
    )
    {
        self.identifiers = identifiers
    }
}

struct BatchDeleteClusterSnapshotsInputBody: Swift.Equatable {
    let identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]?
}

extension BatchDeleteClusterSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifiers = "Identifiers"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.identifiers) {
            struct KeyVal0{struct DeleteClusterSnapshotMessage{}}
            let identifiersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DeleteClusterSnapshotMessage>.CodingKeys.self, forKey: .identifiers)
            if let identifiersWrappedContainer = identifiersWrappedContainer {
                let identifiersContainer = try identifiersWrappedContainer.decodeIfPresent([RedshiftClientTypes.DeleteClusterSnapshotMessage].self, forKey: .member)
                var identifiersBuffer:[RedshiftClientTypes.DeleteClusterSnapshotMessage]? = nil
                if let identifiersContainer = identifiersContainer {
                    identifiersBuffer = [RedshiftClientTypes.DeleteClusterSnapshotMessage]()
                    for structureContainer0 in identifiersContainer {
                        identifiersBuffer?.append(structureContainer0)
                    }
                }
                identifiers = identifiersBuffer
            } else {
                identifiers = []
            }
        } else {
            identifiers = nil
        }
    }
}

extension BatchDeleteClusterSnapshotsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: BatchDeleteClusterSnapshotsOutputBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.resources = output.resources
        } else {
            self.errors = nil
            self.resources = nil
        }
    }
}

public struct BatchDeleteClusterSnapshotsOutput: Swift.Equatable {
    /// A list of any errors returned.
    public var errors: [RedshiftClientTypes.SnapshotErrorMessage]?
    /// A list of the snapshot identifiers that were deleted.
    public var resources: [Swift.String]?

    public init(
        errors: [RedshiftClientTypes.SnapshotErrorMessage]? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.resources = resources
    }
}

struct BatchDeleteClusterSnapshotsOutputBody: Swift.Equatable {
    let resources: [Swift.String]?
    let errors: [RedshiftClientTypes.SnapshotErrorMessage]?
}

extension BatchDeleteClusterSnapshotsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case resources = "Resources"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchDeleteClusterSnapshotsResult"))
        if containerValues.contains(.resources) {
            struct KeyVal0{struct String{}}
            let resourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.String>.CodingKeys.self, forKey: .resources)
            if let resourcesWrappedContainer = resourcesWrappedContainer {
                let resourcesContainer = try resourcesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourcesBuffer:[Swift.String]? = nil
                if let resourcesContainer = resourcesContainer {
                    resourcesBuffer = [Swift.String]()
                    for stringContainer0 in resourcesContainer {
                        resourcesBuffer?.append(stringContainer0)
                    }
                }
                resources = resourcesBuffer
            } else {
                resources = []
            }
        } else {
            resources = nil
        }
        if containerValues.contains(.errors) {
            struct KeyVal0{struct SnapshotErrorMessage{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotErrorMessage>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotErrorMessage].self, forKey: .member)
                var errorsBuffer:[RedshiftClientTypes.SnapshotErrorMessage]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [RedshiftClientTypes.SnapshotErrorMessage]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}

enum BatchDeleteClusterSnapshotsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "BatchDeleteRequestSizeExceeded": return try await BatchDeleteRequestSizeExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension BatchDeleteRequestSizeExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<BatchDeleteRequestSizeExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number for a batch delete of snapshots has been reached. The limit is 100.
public struct BatchDeleteRequestSizeExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchDeleteRequestSizeExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct BatchDeleteRequestSizeExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension BatchDeleteRequestSizeExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchModifyClusterSnapshotsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let snapshotIdentifierList = snapshotIdentifierList {
            if !snapshotIdentifierList.isEmpty {
                var snapshotIdentifierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SnapshotIdentifierList"))
                for (index0, string0) in snapshotIdentifierList.enumerated() {
                    try snapshotIdentifierListContainer.encode(string0, forKey: ClientRuntime.Key("String.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var snapshotIdentifierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SnapshotIdentifierList"))
                try snapshotIdentifierListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchModifyClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchModifyClusterSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchModifyClusterSnapshotsInput: Swift.Equatable {
    /// A boolean value indicating whether to override an exception if the retention period has passed.
    public var force: Swift.Bool?
    /// The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely. The number must be either -1 or an integer between 1 and 3,653. If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// A list of snapshot identifiers you want to modify.
    /// This member is required.
    public var snapshotIdentifierList: [Swift.String]?

    public init(
        force: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifierList: [Swift.String]? = nil
    )
    {
        self.force = force
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifierList = snapshotIdentifierList
    }
}

struct BatchModifyClusterSnapshotsInputBody: Swift.Equatable {
    let snapshotIdentifierList: [Swift.String]?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let force: Swift.Bool?
}

extension BatchModifyClusterSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force = "Force"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case snapshotIdentifierList = "SnapshotIdentifierList"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.snapshotIdentifierList) {
            struct KeyVal0{struct String{}}
            let snapshotIdentifierListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.String>.CodingKeys.self, forKey: .snapshotIdentifierList)
            if let snapshotIdentifierListWrappedContainer = snapshotIdentifierListWrappedContainer {
                let snapshotIdentifierListContainer = try snapshotIdentifierListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var snapshotIdentifierListBuffer:[Swift.String]? = nil
                if let snapshotIdentifierListContainer = snapshotIdentifierListContainer {
                    snapshotIdentifierListBuffer = [Swift.String]()
                    for stringContainer0 in snapshotIdentifierListContainer {
                        snapshotIdentifierListBuffer?.append(stringContainer0)
                    }
                }
                snapshotIdentifierList = snapshotIdentifierListBuffer
            } else {
                snapshotIdentifierList = []
            }
        } else {
            snapshotIdentifierList = nil
        }
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension BatchModifyClusterSnapshotsLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<BatchModifyClusterSnapshotsLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number for snapshot identifiers has been reached. The limit is 100.
public struct BatchModifyClusterSnapshotsLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchModifyClusterSnapshotsLimitExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct BatchModifyClusterSnapshotsLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension BatchModifyClusterSnapshotsLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchModifyClusterSnapshotsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: BatchModifyClusterSnapshotsOutputBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.resources = output.resources
        } else {
            self.errors = nil
            self.resources = nil
        }
    }
}

public struct BatchModifyClusterSnapshotsOutput: Swift.Equatable {
    /// A list of any errors returned.
    public var errors: [RedshiftClientTypes.SnapshotErrorMessage]?
    /// A list of the snapshots that were modified.
    public var resources: [Swift.String]?

    public init(
        errors: [RedshiftClientTypes.SnapshotErrorMessage]? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.resources = resources
    }
}

struct BatchModifyClusterSnapshotsOutputBody: Swift.Equatable {
    let resources: [Swift.String]?
    let errors: [RedshiftClientTypes.SnapshotErrorMessage]?
}

extension BatchModifyClusterSnapshotsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case resources = "Resources"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchModifyClusterSnapshotsResult"))
        if containerValues.contains(.resources) {
            struct KeyVal0{struct String{}}
            let resourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.String>.CodingKeys.self, forKey: .resources)
            if let resourcesWrappedContainer = resourcesWrappedContainer {
                let resourcesContainer = try resourcesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourcesBuffer:[Swift.String]? = nil
                if let resourcesContainer = resourcesContainer {
                    resourcesBuffer = [Swift.String]()
                    for stringContainer0 in resourcesContainer {
                        resourcesBuffer?.append(stringContainer0)
                    }
                }
                resources = resourcesBuffer
            } else {
                resources = []
            }
        } else {
            resources = nil
        }
        if containerValues.contains(.errors) {
            struct KeyVal0{struct SnapshotErrorMessage{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotErrorMessage>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotErrorMessage].self, forKey: .member)
                var errorsBuffer:[RedshiftClientTypes.SnapshotErrorMessage]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [RedshiftClientTypes.SnapshotErrorMessage]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}

enum BatchModifyClusterSnapshotsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "BatchModifyClusterSnapshotsLimitExceededFault": return try await BatchModifyClusterSnapshotsLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension BucketNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<BucketNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Could not find the specified S3 bucket.
public struct BucketNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BucketNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct BucketNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension BucketNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CancelResizeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("CancelResize", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelResizeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelResizeInput: Swift.Equatable {
    /// The unique identifier for the cluster that you want to cancel a resize operation for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct CancelResizeInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension CancelResizeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension CancelResizeOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CancelResizeOutputBody = try responseDecoder.decode(responseBody: data)
            self.avgResizeRateInMegaBytesPerSecond = output.avgResizeRateInMegaBytesPerSecond
            self.dataTransferProgressPercent = output.dataTransferProgressPercent
            self.elapsedTimeInSeconds = output.elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = output.estimatedTimeToCompletionInSeconds
            self.importTablesCompleted = output.importTablesCompleted
            self.importTablesInProgress = output.importTablesInProgress
            self.importTablesNotStarted = output.importTablesNotStarted
            self.message = output.message
            self.progressInMegaBytes = output.progressInMegaBytes
            self.resizeType = output.resizeType
            self.status = output.status
            self.targetClusterType = output.targetClusterType
            self.targetEncryptionType = output.targetEncryptionType
            self.targetNodeType = output.targetNodeType
            self.targetNumberOfNodes = output.targetNumberOfNodes
            self.totalResizeDataInMegaBytes = output.totalResizeDataInMegaBytes
        } else {
            self.avgResizeRateInMegaBytesPerSecond = nil
            self.dataTransferProgressPercent = nil
            self.elapsedTimeInSeconds = nil
            self.estimatedTimeToCompletionInSeconds = nil
            self.importTablesCompleted = nil
            self.importTablesInProgress = nil
            self.importTablesNotStarted = nil
            self.message = nil
            self.progressInMegaBytes = nil
            self.resizeType = nil
            self.status = nil
            self.targetClusterType = nil
            self.targetEncryptionType = nil
            self.targetNodeType = nil
            self.targetNumberOfNodes = nil
            self.totalResizeDataInMegaBytes = nil
        }
    }
}

/// Describes the result of a cluster resize operation.
public struct CancelResizeOutput: Swift.Equatable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init(
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}

struct CancelResizeOutputBody: Swift.Equatable {
    let targetNodeType: Swift.String?
    let targetNumberOfNodes: Swift.Int?
    let targetClusterType: Swift.String?
    let status: Swift.String?
    let importTablesCompleted: [Swift.String]?
    let importTablesInProgress: [Swift.String]?
    let importTablesNotStarted: [Swift.String]?
    let avgResizeRateInMegaBytesPerSecond: Swift.Double?
    let totalResizeDataInMegaBytes: Swift.Int?
    let progressInMegaBytes: Swift.Int?
    let elapsedTimeInSeconds: Swift.Int?
    let estimatedTimeToCompletionInSeconds: Swift.Int?
    let resizeType: Swift.String?
    let message: Swift.String?
    let targetEncryptionType: Swift.String?
    let dataTransferProgressPercent: Swift.Double?
}

extension CancelResizeOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case avgResizeRateInMegaBytesPerSecond = "AvgResizeRateInMegaBytesPerSecond"
        case dataTransferProgressPercent = "DataTransferProgressPercent"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case importTablesCompleted = "ImportTablesCompleted"
        case importTablesInProgress = "ImportTablesInProgress"
        case importTablesNotStarted = "ImportTablesNotStarted"
        case message = "Message"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case resizeType = "ResizeType"
        case status = "Status"
        case targetClusterType = "TargetClusterType"
        case targetEncryptionType = "TargetEncryptionType"
        case targetNodeType = "TargetNodeType"
        case targetNumberOfNodes = "TargetNumberOfNodes"
        case totalResizeDataInMegaBytes = "TotalResizeDataInMegaBytes"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CancelResizeResult"))
        let targetNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetNodeType)
        targetNodeType = targetNodeTypeDecoded
        let targetNumberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetNumberOfNodes)
        targetNumberOfNodes = targetNumberOfNodesDecoded
        let targetClusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetClusterType)
        targetClusterType = targetClusterTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.importTablesCompleted) {
            struct KeyVal0{struct member{}}
            let importTablesCompletedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .importTablesCompleted)
            if let importTablesCompletedWrappedContainer = importTablesCompletedWrappedContainer {
                let importTablesCompletedContainer = try importTablesCompletedWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importTablesCompletedBuffer:[Swift.String]? = nil
                if let importTablesCompletedContainer = importTablesCompletedContainer {
                    importTablesCompletedBuffer = [Swift.String]()
                    for stringContainer0 in importTablesCompletedContainer {
                        importTablesCompletedBuffer?.append(stringContainer0)
                    }
                }
                importTablesCompleted = importTablesCompletedBuffer
            } else {
                importTablesCompleted = []
            }
        } else {
            importTablesCompleted = nil
        }
        if containerValues.contains(.importTablesInProgress) {
            struct KeyVal0{struct member{}}
            let importTablesInProgressWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .importTablesInProgress)
            if let importTablesInProgressWrappedContainer = importTablesInProgressWrappedContainer {
                let importTablesInProgressContainer = try importTablesInProgressWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importTablesInProgressBuffer:[Swift.String]? = nil
                if let importTablesInProgressContainer = importTablesInProgressContainer {
                    importTablesInProgressBuffer = [Swift.String]()
                    for stringContainer0 in importTablesInProgressContainer {
                        importTablesInProgressBuffer?.append(stringContainer0)
                    }
                }
                importTablesInProgress = importTablesInProgressBuffer
            } else {
                importTablesInProgress = []
            }
        } else {
            importTablesInProgress = nil
        }
        if containerValues.contains(.importTablesNotStarted) {
            struct KeyVal0{struct member{}}
            let importTablesNotStartedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .importTablesNotStarted)
            if let importTablesNotStartedWrappedContainer = importTablesNotStartedWrappedContainer {
                let importTablesNotStartedContainer = try importTablesNotStartedWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importTablesNotStartedBuffer:[Swift.String]? = nil
                if let importTablesNotStartedContainer = importTablesNotStartedContainer {
                    importTablesNotStartedBuffer = [Swift.String]()
                    for stringContainer0 in importTablesNotStartedContainer {
                        importTablesNotStartedBuffer?.append(stringContainer0)
                    }
                }
                importTablesNotStarted = importTablesNotStartedBuffer
            } else {
                importTablesNotStarted = []
            }
        } else {
            importTablesNotStarted = nil
        }
        let avgResizeRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .avgResizeRateInMegaBytesPerSecond)
        avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecondDecoded
        let totalResizeDataInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalResizeDataInMegaBytes)
        totalResizeDataInMegaBytes = totalResizeDataInMegaBytesDecoded
        let progressInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressInMegaBytes)
        progressInMegaBytes = progressInMegaBytesDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
        let resizeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resizeType)
        resizeType = resizeTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let targetEncryptionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetEncryptionType)
        targetEncryptionType = targetEncryptionTypeDecoded
        let dataTransferProgressPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dataTransferProgressPercent)
        dataTransferProgressPercent = dataTransferProgressPercentDecoded
    }
}

enum CancelResizeOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResizeNotFound": return try await ResizeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.CertificateAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RedshiftClientTypes {
    /// A cluster ID and custom domain name tied to a specific certificate. These are typically returned in a list.
    public struct CertificateAssociation: Swift.Equatable {
        /// The cluster identifier for the certificate association.
        public var clusterIdentifier: Swift.String?
        /// The custom domain name for the certificate association.
        public var customDomainName: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil,
            customDomainName: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.customDomainName = customDomainName
        }
    }

}

extension RedshiftClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfiguration = "AquaConfiguration"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocationStatus = "AvailabilityZoneRelocationStatus"
        case clusterAvailabilityStatus = "ClusterAvailabilityStatus"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterNamespaceArn = "ClusterNamespaceArn"
        case clusterNodes = "ClusterNodes"
        case clusterParameterGroups = "ClusterParameterGroups"
        case clusterPublicKey = "ClusterPublicKey"
        case clusterRevisionNumber = "ClusterRevisionNumber"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSnapshotCopyStatus = "ClusterSnapshotCopyStatus"
        case clusterStatus = "ClusterStatus"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterVersion = "ClusterVersion"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainCertificateExpiryDate = "CustomDomainCertificateExpiryDate"
        case customDomainName = "CustomDomainName"
        case dbName = "DBName"
        case dataTransferProgress = "DataTransferProgress"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case deferredMaintenanceWindows = "DeferredMaintenanceWindows"
        case elasticIpStatus = "ElasticIpStatus"
        case elasticResizeNumberOfNodeOptions = "ElasticResizeNumberOfNodeOptions"
        case encrypted = "Encrypted"
        case endpoint = "Endpoint"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case expectedNextSnapshotScheduleTime = "ExpectedNextSnapshotScheduleTime"
        case expectedNextSnapshotScheduleTimeStatus = "ExpectedNextSnapshotScheduleTimeStatus"
        case hsmStatus = "HsmStatus"
        case iamRoles = "IamRoles"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretArn = "MasterPasswordSecretArn"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case modifyStatus = "ModifyStatus"
        case multiAZ = "MultiAZ"
        case multiAZSecondary = "MultiAZSecondary"
        case nextMaintenanceWindowStartTime = "NextMaintenanceWindowStartTime"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case pendingActions = "PendingActions"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case reservedNodeExchangeStatus = "ReservedNodeExchangeStatus"
        case resizeInfo = "ResizeInfo"
        case restoreStatus = "RestoreStatus"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case snapshotScheduleState = "SnapshotScheduleState"
        case tags = "Tags"
        case totalStorageCapacityInMegaBytes = "TotalStorageCapacityInMegaBytes"
        case vpcId = "VpcId"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let aquaConfiguration = aquaConfiguration {
            try container.encode(aquaConfiguration, forKey: ClientRuntime.Key("AquaConfiguration"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocationStatus = availabilityZoneRelocationStatus {
            try container.encode(availabilityZoneRelocationStatus, forKey: ClientRuntime.Key("AvailabilityZoneRelocationStatus"))
        }
        if let clusterAvailabilityStatus = clusterAvailabilityStatus {
            try container.encode(clusterAvailabilityStatus, forKey: ClientRuntime.Key("ClusterAvailabilityStatus"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterNamespaceArn = clusterNamespaceArn {
            try container.encode(clusterNamespaceArn, forKey: ClientRuntime.Key("ClusterNamespaceArn"))
        }
        if let clusterNodes = clusterNodes {
            if !clusterNodes.isEmpty {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                for (index0, clusternode0) in clusterNodes.enumerated() {
                    try clusterNodesContainer.encode(clusternode0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                try clusterNodesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterParameterGroups = clusterParameterGroups {
            if !clusterParameterGroups.isEmpty {
                var clusterParameterGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterGroups"))
                for (index0, clusterparametergroupstatus0) in clusterParameterGroups.enumerated() {
                    try clusterParameterGroupsContainer.encode(clusterparametergroupstatus0, forKey: ClientRuntime.Key("ClusterParameterGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterParameterGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterGroups"))
                try clusterParameterGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterPublicKey = clusterPublicKey {
            try container.encode(clusterPublicKey, forKey: ClientRuntime.Key("ClusterPublicKey"))
        }
        if let clusterRevisionNumber = clusterRevisionNumber {
            try container.encode(clusterRevisionNumber, forKey: ClientRuntime.Key("ClusterRevisionNumber"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, clustersecuritygroupmembership0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(clustersecuritygroupmembership0, forKey: ClientRuntime.Key("ClusterSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterSnapshotCopyStatus = clusterSnapshotCopyStatus {
            try container.encode(clusterSnapshotCopyStatus, forKey: ClientRuntime.Key("ClusterSnapshotCopyStatus"))
        }
        if let clusterStatus = clusterStatus {
            try container.encode(clusterStatus, forKey: ClientRuntime.Key("ClusterStatus"))
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainCertificateExpiryDate = customDomainCertificateExpiryDate {
            try container.encodeTimestamp(customDomainCertificateExpiryDate, format: .dateTime, forKey: ClientRuntime.Key("CustomDomainCertificateExpiryDate"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let dataTransferProgress = dataTransferProgress {
            try container.encode(dataTransferProgress, forKey: ClientRuntime.Key("DataTransferProgress"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let deferredMaintenanceWindows = deferredMaintenanceWindows {
            if !deferredMaintenanceWindows.isEmpty {
                var deferredMaintenanceWindowsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeferredMaintenanceWindows"))
                for (index0, deferredmaintenancewindow0) in deferredMaintenanceWindows.enumerated() {
                    try deferredMaintenanceWindowsContainer.encode(deferredmaintenancewindow0, forKey: ClientRuntime.Key("DeferredMaintenanceWindow.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var deferredMaintenanceWindowsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DeferredMaintenanceWindows"))
                try deferredMaintenanceWindowsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let elasticIpStatus = elasticIpStatus {
            try container.encode(elasticIpStatus, forKey: ClientRuntime.Key("ElasticIpStatus"))
        }
        if let elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions {
            try container.encode(elasticResizeNumberOfNodeOptions, forKey: ClientRuntime.Key("ElasticResizeNumberOfNodeOptions"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime {
            try container.encodeTimestamp(expectedNextSnapshotScheduleTime, format: .dateTime, forKey: ClientRuntime.Key("ExpectedNextSnapshotScheduleTime"))
        }
        if let expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus {
            try container.encode(expectedNextSnapshotScheduleTimeStatus, forKey: ClientRuntime.Key("ExpectedNextSnapshotScheduleTimeStatus"))
        }
        if let hsmStatus = hsmStatus {
            try container.encode(hsmStatus, forKey: ClientRuntime.Key("HsmStatus"))
        }
        if let iamRoles = iamRoles {
            if !iamRoles.isEmpty {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                for (index0, clusteriamrole0) in iamRoles.enumerated() {
                    try iamRolesContainer.encode(clusteriamrole0, forKey: ClientRuntime.Key("ClusterIamRole.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                try iamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretArn = masterPasswordSecretArn {
            try container.encode(masterPasswordSecretArn, forKey: ClientRuntime.Key("MasterPasswordSecretArn"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let modifyStatus = modifyStatus {
            try container.encode(modifyStatus, forKey: ClientRuntime.Key("ModifyStatus"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let multiAZSecondary = multiAZSecondary {
            try container.encode(multiAZSecondary, forKey: ClientRuntime.Key("MultiAZSecondary"))
        }
        if let nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime {
            try container.encodeTimestamp(nextMaintenanceWindowStartTime, format: .dateTime, forKey: ClientRuntime.Key("NextMaintenanceWindowStartTime"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let pendingActions = pendingActions {
            if !pendingActions.isEmpty {
                var pendingActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PendingActions"))
                for (index0, string0) in pendingActions.enumerated() {
                    try pendingActionsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var pendingActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PendingActions"))
                try pendingActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let reservedNodeExchangeStatus = reservedNodeExchangeStatus {
            try container.encode(reservedNodeExchangeStatus, forKey: ClientRuntime.Key("ReservedNodeExchangeStatus"))
        }
        if let resizeInfo = resizeInfo {
            try container.encode(resizeInfo, forKey: ClientRuntime.Key("ResizeInfo"))
        }
        if let restoreStatus = restoreStatus {
            try container.encode(restoreStatus, forKey: ClientRuntime.Key("RestoreStatus"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: ClientRuntime.Key("SnapshotScheduleIdentifier"))
        }
        if let snapshotScheduleState = snapshotScheduleState {
            try container.encode(snapshotScheduleState, forKey: ClientRuntime.Key("SnapshotScheduleState"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytes {
            try container.encode(totalStorageCapacityInMegaBytes, forKey: ClientRuntime.Key("TotalStorageCapacityInMegaBytes"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            if !vpcSecurityGroups.isEmpty {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                    try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                try vpcSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let clusterAvailabilityStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterAvailabilityStatus)
        clusterAvailabilityStatus = clusterAvailabilityStatusDecoded
        let modifyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modifyStatus)
        modifyStatus = modifyStatusDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let clusterCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroup{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroup>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterSecurityGroupMembership].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[RedshiftClientTypes.ClusterSecurityGroupMembership]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [RedshiftClientTypes.ClusterSecurityGroupMembership]()
                    for structureContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [RedshiftClientTypes.VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        if containerValues.contains(.clusterParameterGroups) {
            struct KeyVal0{struct ClusterParameterGroup{}}
            let clusterParameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterParameterGroup>.CodingKeys.self, forKey: .clusterParameterGroups)
            if let clusterParameterGroupsWrappedContainer = clusterParameterGroupsWrappedContainer {
                let clusterParameterGroupsContainer = try clusterParameterGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterParameterGroupStatus].self, forKey: .member)
                var clusterParameterGroupsBuffer:[RedshiftClientTypes.ClusterParameterGroupStatus]? = nil
                if let clusterParameterGroupsContainer = clusterParameterGroupsContainer {
                    clusterParameterGroupsBuffer = [RedshiftClientTypes.ClusterParameterGroupStatus]()
                    for structureContainer0 in clusterParameterGroupsContainer {
                        clusterParameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterParameterGroups = clusterParameterGroupsBuffer
            } else {
                clusterParameterGroups = []
            }
        } else {
            clusterParameterGroups = nil
        }
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.PendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let allowVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let restoreStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.RestoreStatus.self, forKey: .restoreStatus)
        restoreStatus = restoreStatusDecoded
        let dataTransferProgressDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.DataTransferProgress.self, forKey: .dataTransferProgress)
        dataTransferProgress = dataTransferProgressDecoded
        let hsmStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.HsmStatus.self, forKey: .hsmStatus)
        hsmStatus = hsmStatusDecoded
        let clusterSnapshotCopyStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterSnapshotCopyStatus.self, forKey: .clusterSnapshotCopyStatus)
        clusterSnapshotCopyStatus = clusterSnapshotCopyStatusDecoded
        let clusterPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterPublicKey)
        clusterPublicKey = clusterPublicKeyDecoded
        if containerValues.contains(.clusterNodes) {
            struct KeyVal0{struct member{}}
            let clusterNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .clusterNodes)
            if let clusterNodesWrappedContainer = clusterNodesWrappedContainer {
                let clusterNodesContainer = try clusterNodesWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterNode].self, forKey: .member)
                var clusterNodesBuffer:[RedshiftClientTypes.ClusterNode]? = nil
                if let clusterNodesContainer = clusterNodesContainer {
                    clusterNodesBuffer = [RedshiftClientTypes.ClusterNode]()
                    for structureContainer0 in clusterNodesContainer {
                        clusterNodesBuffer?.append(structureContainer0)
                    }
                }
                clusterNodes = clusterNodesBuffer
            } else {
                clusterNodes = []
            }
        } else {
            clusterNodes = nil
        }
        let elasticIpStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ElasticIpStatus.self, forKey: .elasticIpStatus)
        elasticIpStatus = elasticIpStatusDecoded
        let clusterRevisionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterRevisionNumber)
        clusterRevisionNumber = clusterRevisionNumberDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        if containerValues.contains(.iamRoles) {
            struct KeyVal0{struct ClusterIamRole{}}
            let iamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterIamRole>.CodingKeys.self, forKey: .iamRoles)
            if let iamRolesWrappedContainer = iamRolesWrappedContainer {
                let iamRolesContainer = try iamRolesWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterIamRole].self, forKey: .member)
                var iamRolesBuffer:[RedshiftClientTypes.ClusterIamRole]? = nil
                if let iamRolesContainer = iamRolesContainer {
                    iamRolesBuffer = [RedshiftClientTypes.ClusterIamRole]()
                    for structureContainer0 in iamRolesContainer {
                        iamRolesBuffer?.append(structureContainer0)
                    }
                }
                iamRoles = iamRolesBuffer
            } else {
                iamRoles = []
            }
        } else {
            iamRoles = nil
        }
        if containerValues.contains(.pendingActions) {
            struct KeyVal0{struct member{}}
            let pendingActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .pendingActions)
            if let pendingActionsWrappedContainer = pendingActionsWrappedContainer {
                let pendingActionsContainer = try pendingActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var pendingActionsBuffer:[Swift.String]? = nil
                if let pendingActionsContainer = pendingActionsContainer {
                    pendingActionsBuffer = [Swift.String]()
                    for stringContainer0 in pendingActionsContainer {
                        pendingActionsBuffer?.append(stringContainer0)
                    }
                }
                pendingActions = pendingActionsBuffer
            } else {
                pendingActions = []
            }
        } else {
            pendingActions = nil
        }
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let elasticResizeNumberOfNodeOptionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticResizeNumberOfNodeOptions)
        elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptionsDecoded
        if containerValues.contains(.deferredMaintenanceWindows) {
            struct KeyVal0{struct DeferredMaintenanceWindow{}}
            let deferredMaintenanceWindowsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DeferredMaintenanceWindow>.CodingKeys.self, forKey: .deferredMaintenanceWindows)
            if let deferredMaintenanceWindowsWrappedContainer = deferredMaintenanceWindowsWrappedContainer {
                let deferredMaintenanceWindowsContainer = try deferredMaintenanceWindowsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DeferredMaintenanceWindow].self, forKey: .member)
                var deferredMaintenanceWindowsBuffer:[RedshiftClientTypes.DeferredMaintenanceWindow]? = nil
                if let deferredMaintenanceWindowsContainer = deferredMaintenanceWindowsContainer {
                    deferredMaintenanceWindowsBuffer = [RedshiftClientTypes.DeferredMaintenanceWindow]()
                    for structureContainer0 in deferredMaintenanceWindowsContainer {
                        deferredMaintenanceWindowsBuffer?.append(structureContainer0)
                    }
                }
                deferredMaintenanceWindows = deferredMaintenanceWindowsBuffer
            } else {
                deferredMaintenanceWindows = []
            }
        } else {
            deferredMaintenanceWindows = nil
        }
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let snapshotScheduleStateDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduleState.self, forKey: .snapshotScheduleState)
        snapshotScheduleState = snapshotScheduleStateDecoded
        let expectedNextSnapshotScheduleTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .expectedNextSnapshotScheduleTime)
        expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTimeDecoded
        let expectedNextSnapshotScheduleTimeStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedNextSnapshotScheduleTimeStatus)
        expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatusDecoded
        let nextMaintenanceWindowStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .nextMaintenanceWindowStartTime)
        nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTimeDecoded
        let resizeInfoDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ResizeInfo.self, forKey: .resizeInfo)
        resizeInfo = resizeInfoDecoded
        let availabilityZoneRelocationStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneRelocationStatus)
        availabilityZoneRelocationStatus = availabilityZoneRelocationStatusDecoded
        let clusterNamespaceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterNamespaceArn)
        clusterNamespaceArn = clusterNamespaceArnDecoded
        let totalStorageCapacityInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalStorageCapacityInMegaBytes)
        totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytesDecoded
        let aquaConfigurationDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfiguration.self, forKey: .aquaConfiguration)
        aquaConfiguration = aquaConfigurationDecoded
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
        let reservedNodeExchangeStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeExchangeStatus.self, forKey: .reservedNodeExchangeStatus)
        reservedNodeExchangeStatus = reservedNodeExchangeStatusDecoded
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let customDomainCertificateExpiryDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .customDomainCertificateExpiryDate)
        customDomainCertificateExpiryDate = customDomainCertificateExpiryDateDecoded
        let masterPasswordSecretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretArn)
        masterPasswordSecretArn = masterPasswordSecretArnDecoded
        let masterPasswordSecretKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretKmsKeyId)
        masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let multiAZSecondaryDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.SecondaryClusterInfo.self, forKey: .multiAZSecondary)
        multiAZSecondary = multiAZSecondaryDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a cluster.
    public struct Cluster: Swift.Equatable {
        /// A boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window.
        public var allowVersionUpgrade: Swift.Bool?
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaConfiguration: RedshiftClientTypes.AquaConfiguration?
        /// The number of days that automatic cluster snapshots are retained.
        public var automatedSnapshotRetentionPeriod: Swift.Int?
        /// The name of the Availability Zone in which the cluster is located.
        public var availabilityZone: Swift.String?
        /// Describes the status of the Availability Zone relocation operation.
        public var availabilityZoneRelocationStatus: Swift.String?
        /// The availability status of the cluster for queries. Possible values are the following:
        ///
        /// * Available - The cluster is available for queries.
        ///
        /// * Unavailable - The cluster is not available for queries.
        ///
        /// * Maintenance - The cluster is intermittently available for queries due to maintenance activities.
        ///
        /// * Modifying - The cluster is intermittently available for queries due to changes that modify the cluster.
        ///
        /// * Failed - The cluster failed and is not available for queries.
        public var clusterAvailabilityStatus: Swift.String?
        /// The date and time that the cluster was created.
        public var clusterCreateTime: ClientRuntime.Date?
        /// The unique identifier of the cluster.
        public var clusterIdentifier: Swift.String?
        /// The namespace Amazon Resource Name (ARN) of the cluster.
        public var clusterNamespaceArn: Swift.String?
        /// The nodes in the cluster.
        public var clusterNodes: [RedshiftClientTypes.ClusterNode]?
        /// The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.
        public var clusterParameterGroups: [RedshiftClientTypes.ClusterParameterGroupStatus]?
        /// The public key for the cluster.
        public var clusterPublicKey: Swift.String?
        /// The specific revision number of the database in the cluster.
        public var clusterRevisionNumber: Swift.String?
        /// A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements. Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter.
        public var clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroupMembership]?
        /// A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
        public var clusterSnapshotCopyStatus: RedshiftClientTypes.ClusterSnapshotCopyStatus?
        /// The current state of the cluster. Possible values are the following:
        ///
        /// * available
        ///
        /// * available, prep-for-resize
        ///
        /// * available, resize-cleanup
        ///
        /// * cancelling-resize
        ///
        /// * creating
        ///
        /// * deleting
        ///
        /// * final-snapshot
        ///
        /// * hardware-failure
        ///
        /// * incompatible-hsm
        ///
        /// * incompatible-network
        ///
        /// * incompatible-parameters
        ///
        /// * incompatible-restore
        ///
        /// * modifying
        ///
        /// * paused
        ///
        /// * rebooting
        ///
        /// * renaming
        ///
        /// * resizing
        ///
        /// * rotating-keys
        ///
        /// * storage-full
        ///
        /// * updating-hsm
        public var clusterStatus: Swift.String?
        /// The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.
        public var clusterSubnetGroupName: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The certificate Amazon Resource Name (ARN) for the custom domain name.
        public var customDomainCertificateArn: Swift.String?
        /// The expiration date for the certificate associated with the custom domain name.
        public var customDomainCertificateExpiryDate: ClientRuntime.Date?
        /// The custom domain name associated with the cluster.
        public var customDomainName: Swift.String?
        ///
        public var dataTransferProgress: RedshiftClientTypes.DataTransferProgress?
        /// The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default.
        public var dbName: Swift.String?
        /// The Amazon Resource Name (ARN) for the IAM role set as default for the cluster.
        public var defaultIamRoleArn: Swift.String?
        /// Describes a group of DeferredMaintenanceWindow objects.
        public var deferredMaintenanceWindows: [RedshiftClientTypes.DeferredMaintenanceWindow]?
        /// The status of the elastic IP (EIP) address.
        public var elasticIpStatus: RedshiftClientTypes.ElasticIpStatus?
        /// The number of nodes that you can resize the cluster to with the elastic resize method.
        public var elasticResizeNumberOfNodeOptions: Swift.String?
        /// A boolean value that, if true, indicates that data in the cluster is encrypted at rest.
        public var encrypted: Swift.Bool?
        /// The connection endpoint.
        public var endpoint: RedshiftClientTypes.Endpoint?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The date and time when the next snapshot is expected to be taken for clusters with a valid snapshot schedule and backups enabled.
        public var expectedNextSnapshotScheduleTime: ClientRuntime.Date?
        /// The status of next expected snapshot for clusters having a valid snapshot schedule and backups enabled. Possible values are the following:
        ///
        /// * OnTrack - The next snapshot is expected to be taken on time.
        ///
        /// * Pending - The next snapshot is pending to be taken.
        public var expectedNextSnapshotScheduleTimeStatus: Swift.String?
        /// A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command. Values: active, applying
        public var hsmStatus: RedshiftClientTypes.HsmStatus?
        /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.
        public var iamRoles: [RedshiftClientTypes.ClusterIamRole]?
        /// The IP address type for the cluster. Possible values are ipv4 and dualstack.
        public var ipAddressType: Swift.String?
        /// The Key Management Service (KMS) key ID of the encryption key used to encrypt data in the cluster.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the cluster.
        public var maintenanceTrackName: Swift.String?
        /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
        public var masterPasswordSecretArn: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret.
        public var masterPasswordSecretKmsKeyId: Swift.String?
        /// The admin user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter.
        public var masterUsername: Swift.String?
        /// The status of a modify operation, if any, initiated for the cluster.
        public var modifyStatus: Swift.String?
        /// A boolean value that, if true, indicates that the cluster is deployed in two Availability Zones.
        public var multiAZ: Swift.String?
        /// The secondary compute unit of a cluster, if Multi-AZ deployment is turned on.
        public var multiAZSecondary: RedshiftClientTypes.SecondaryClusterInfo?
        /// The date and time in UTC when system maintenance can begin.
        public var nextMaintenanceWindowStartTime: ClientRuntime.Date?
        /// The node type for the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of compute nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// Cluster operations that are waiting to be started.
        public var pendingActions: [Swift.String]?
        /// A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.
        public var pendingModifiedValues: RedshiftClientTypes.PendingModifiedValues?
        /// The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
        public var preferredMaintenanceWindow: Swift.String?
        /// A boolean value that, if true, indicates that the cluster can be accessed from a public network.
        public var publiclyAccessible: Swift.Bool?
        /// The status of the reserved-node exchange request. Statuses include in-progress and requested.
        public var reservedNodeExchangeStatus: RedshiftClientTypes.ReservedNodeExchangeStatus?
        /// Returns the following:
        ///
        /// * AllowCancelResize: a boolean value indicating if the resize operation can be cancelled.
        ///
        /// * ResizeType: Returns ClassicResize
        public var resizeInfo: RedshiftClientTypes.ResizeInfo?
        /// A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.
        public var restoreStatus: RedshiftClientTypes.RestoreStatus?
        /// A unique identifier for the cluster snapshot schedule.
        public var snapshotScheduleIdentifier: Swift.String?
        /// The current state of the cluster snapshot schedule.
        public var snapshotScheduleState: RedshiftClientTypes.ScheduleState?
        /// The list of tags for the cluster.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The total storage capacity of the cluster in megabytes.
        public var totalStorageCapacityInMegaBytes: Swift.Int?
        /// The identifier of the VPC the cluster is in, if the cluster is in a VPC.
        public var vpcId: Swift.String?
        /// A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.
        public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

        public init(
            allowVersionUpgrade: Swift.Bool? = nil,
            aquaConfiguration: RedshiftClientTypes.AquaConfiguration? = nil,
            automatedSnapshotRetentionPeriod: Swift.Int? = nil,
            availabilityZone: Swift.String? = nil,
            availabilityZoneRelocationStatus: Swift.String? = nil,
            clusterAvailabilityStatus: Swift.String? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterNamespaceArn: Swift.String? = nil,
            clusterNodes: [RedshiftClientTypes.ClusterNode]? = nil,
            clusterParameterGroups: [RedshiftClientTypes.ClusterParameterGroupStatus]? = nil,
            clusterPublicKey: Swift.String? = nil,
            clusterRevisionNumber: Swift.String? = nil,
            clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroupMembership]? = nil,
            clusterSnapshotCopyStatus: RedshiftClientTypes.ClusterSnapshotCopyStatus? = nil,
            clusterStatus: Swift.String? = nil,
            clusterSubnetGroupName: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            customDomainCertificateArn: Swift.String? = nil,
            customDomainCertificateExpiryDate: ClientRuntime.Date? = nil,
            customDomainName: Swift.String? = nil,
            dataTransferProgress: RedshiftClientTypes.DataTransferProgress? = nil,
            dbName: Swift.String? = nil,
            defaultIamRoleArn: Swift.String? = nil,
            deferredMaintenanceWindows: [RedshiftClientTypes.DeferredMaintenanceWindow]? = nil,
            elasticIpStatus: RedshiftClientTypes.ElasticIpStatus? = nil,
            elasticResizeNumberOfNodeOptions: Swift.String? = nil,
            encrypted: Swift.Bool? = nil,
            endpoint: RedshiftClientTypes.Endpoint? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            expectedNextSnapshotScheduleTime: ClientRuntime.Date? = nil,
            expectedNextSnapshotScheduleTimeStatus: Swift.String? = nil,
            hsmStatus: RedshiftClientTypes.HsmStatus? = nil,
            iamRoles: [RedshiftClientTypes.ClusterIamRole]? = nil,
            ipAddressType: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterPasswordSecretArn: Swift.String? = nil,
            masterPasswordSecretKmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            modifyStatus: Swift.String? = nil,
            multiAZ: Swift.String? = nil,
            multiAZSecondary: RedshiftClientTypes.SecondaryClusterInfo? = nil,
            nextMaintenanceWindowStartTime: ClientRuntime.Date? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            pendingActions: [Swift.String]? = nil,
            pendingModifiedValues: RedshiftClientTypes.PendingModifiedValues? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            reservedNodeExchangeStatus: RedshiftClientTypes.ReservedNodeExchangeStatus? = nil,
            resizeInfo: RedshiftClientTypes.ResizeInfo? = nil,
            restoreStatus: RedshiftClientTypes.RestoreStatus? = nil,
            snapshotScheduleIdentifier: Swift.String? = nil,
            snapshotScheduleState: RedshiftClientTypes.ScheduleState? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalStorageCapacityInMegaBytes: Swift.Int? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.allowVersionUpgrade = allowVersionUpgrade
            self.aquaConfiguration = aquaConfiguration
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.availabilityZone = availabilityZone
            self.availabilityZoneRelocationStatus = availabilityZoneRelocationStatus
            self.clusterAvailabilityStatus = clusterAvailabilityStatus
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterNamespaceArn = clusterNamespaceArn
            self.clusterNodes = clusterNodes
            self.clusterParameterGroups = clusterParameterGroups
            self.clusterPublicKey = clusterPublicKey
            self.clusterRevisionNumber = clusterRevisionNumber
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.clusterStatus = clusterStatus
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.clusterVersion = clusterVersion
            self.customDomainCertificateArn = customDomainCertificateArn
            self.customDomainCertificateExpiryDate = customDomainCertificateExpiryDate
            self.customDomainName = customDomainName
            self.dataTransferProgress = dataTransferProgress
            self.dbName = dbName
            self.defaultIamRoleArn = defaultIamRoleArn
            self.deferredMaintenanceWindows = deferredMaintenanceWindows
            self.elasticIpStatus = elasticIpStatus
            self.elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions
            self.encrypted = encrypted
            self.endpoint = endpoint
            self.enhancedVpcRouting = enhancedVpcRouting
            self.expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime
            self.expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus
            self.hsmStatus = hsmStatus
            self.iamRoles = iamRoles
            self.ipAddressType = ipAddressType
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterPasswordSecretArn = masterPasswordSecretArn
            self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
            self.masterUsername = masterUsername
            self.modifyStatus = modifyStatus
            self.multiAZ = multiAZ
            self.multiAZSecondary = multiAZSecondary
            self.nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.pendingActions = pendingActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.reservedNodeExchangeStatus = reservedNodeExchangeStatus
            self.resizeInfo = resizeInfo
            self.restoreStatus = restoreStatus
            self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
            self.snapshotScheduleState = snapshotScheduleState
            self.tags = tags
            self.totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytes
            self.vpcId = vpcId
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension ClusterAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The account already has a cluster with the given identifier.
public struct ClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterAssociatedToSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case scheduleAssociationState = "ScheduleAssociationState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let scheduleAssociationState = scheduleAssociationState {
            try container.encode(scheduleAssociationState, forKey: ClientRuntime.Key("ScheduleAssociationState"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let scheduleAssociationStateDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduleState.self, forKey: .scheduleAssociationState)
        scheduleAssociationState = scheduleAssociationStateDecoded
    }
}

extension RedshiftClientTypes {
    ///
    public struct ClusterAssociatedToSchedule: Swift.Equatable {
        ///
        public var clusterIdentifier: Swift.String?
        ///
        public var scheduleAssociationState: RedshiftClientTypes.ScheduleState?

        public init(
            clusterIdentifier: Swift.String? = nil,
            scheduleAssociationState: RedshiftClientTypes.ScheduleState? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.scheduleAssociationState = scheduleAssociationState
        }
    }

}

extension RedshiftClientTypes.ClusterDbRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case currentDatabaseRevision = "CurrentDatabaseRevision"
        case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        case revisionTargets = "RevisionTargets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let currentDatabaseRevision = currentDatabaseRevision {
            try container.encode(currentDatabaseRevision, forKey: ClientRuntime.Key("CurrentDatabaseRevision"))
        }
        if let databaseRevisionReleaseDate = databaseRevisionReleaseDate {
            try container.encodeTimestamp(databaseRevisionReleaseDate, format: .dateTime, forKey: ClientRuntime.Key("DatabaseRevisionReleaseDate"))
        }
        if let revisionTargets = revisionTargets {
            if !revisionTargets.isEmpty {
                var revisionTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevisionTargets"))
                for (index0, revisiontarget0) in revisionTargets.enumerated() {
                    try revisionTargetsContainer.encode(revisiontarget0, forKey: ClientRuntime.Key("RevisionTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var revisionTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevisionTargets"))
                try revisionTargetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let currentDatabaseRevisionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentDatabaseRevision)
        currentDatabaseRevision = currentDatabaseRevisionDecoded
        let databaseRevisionReleaseDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .databaseRevisionReleaseDate)
        databaseRevisionReleaseDate = databaseRevisionReleaseDateDecoded
        if containerValues.contains(.revisionTargets) {
            struct KeyVal0{struct RevisionTarget{}}
            let revisionTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RevisionTarget>.CodingKeys.self, forKey: .revisionTargets)
            if let revisionTargetsWrappedContainer = revisionTargetsWrappedContainer {
                let revisionTargetsContainer = try revisionTargetsWrappedContainer.decodeIfPresent([RedshiftClientTypes.RevisionTarget].self, forKey: .member)
                var revisionTargetsBuffer:[RedshiftClientTypes.RevisionTarget]? = nil
                if let revisionTargetsContainer = revisionTargetsContainer {
                    revisionTargetsBuffer = [RedshiftClientTypes.RevisionTarget]()
                    for structureContainer0 in revisionTargetsContainer {
                        revisionTargetsBuffer?.append(structureContainer0)
                    }
                }
                revisionTargets = revisionTargetsBuffer
            } else {
                revisionTargets = []
            }
        } else {
            revisionTargets = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a ClusterDbRevision.
    public struct ClusterDbRevision: Swift.Equatable {
        /// The unique identifier of the cluster.
        public var clusterIdentifier: Swift.String?
        /// A string representing the current cluster version.
        public var currentDatabaseRevision: Swift.String?
        /// The date on which the database revision was released.
        public var databaseRevisionReleaseDate: ClientRuntime.Date?
        /// A list of RevisionTarget objects, where each object describes the database revision that a cluster can be updated to.
        public var revisionTargets: [RedshiftClientTypes.RevisionTarget]?

        public init(
            clusterIdentifier: Swift.String? = nil,
            currentDatabaseRevision: Swift.String? = nil,
            databaseRevisionReleaseDate: ClientRuntime.Date? = nil,
            revisionTargets: [RedshiftClientTypes.RevisionTarget]? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.currentDatabaseRevision = currentDatabaseRevision
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
            self.revisionTargets = revisionTargets
        }
    }

}

extension RedshiftClientTypes.ClusterIamRole: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyStatus = "ApplyStatus"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applyStatus = applyStatus {
            try container.encode(applyStatus, forKey: ClientRuntime.Key("ApplyStatus"))
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let applyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applyStatus)
        applyStatus = applyStatusDecoded
    }
}

extension RedshiftClientTypes {
    /// An Identity and Access Management (IAM) role that can be used by the associated Amazon Redshift cluster to access other Amazon Web Services services.
    public struct ClusterIamRole: Swift.Equatable {
        /// A value that describes the status of the IAM role's association with an Amazon Redshift cluster. The following are possible statuses and descriptions.
        ///
        /// * in-sync: The role is available for use by the cluster.
        ///
        /// * adding: The role is in the process of being associated with the cluster.
        ///
        /// * removing: The role is in the process of being disassociated with the cluster.
        public var applyStatus: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role, for example, arn:aws:iam::123456789012:role/RedshiftCopyUnload.
        public var iamRoleArn: Swift.String?

        public init(
            applyStatus: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.applyStatus = applyStatus
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension RedshiftClientTypes.ClusterNode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeRole = "NodeRole"
        case privateIPAddress = "PrivateIPAddress"
        case publicIPAddress = "PublicIPAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeRole = nodeRole {
            try container.encode(nodeRole, forKey: ClientRuntime.Key("NodeRole"))
        }
        if let privateIPAddress = privateIPAddress {
            try container.encode(privateIPAddress, forKey: ClientRuntime.Key("PrivateIPAddress"))
        }
        if let publicIPAddress = publicIPAddress {
            try container.encode(publicIPAddress, forKey: ClientRuntime.Key("PublicIPAddress"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let privateIPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIPAddress)
        privateIPAddress = privateIPAddressDecoded
        let publicIPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIPAddress)
        publicIPAddress = publicIPAddressDecoded
    }
}

extension RedshiftClientTypes {
    /// The identifier of a node in a cluster.
    public struct ClusterNode: Swift.Equatable {
        /// Whether the node is a leader node or a compute node.
        public var nodeRole: Swift.String?
        /// The private IP address of a node within a cluster.
        public var privateIPAddress: Swift.String?
        /// The public IP address of a node within a cluster.
        public var publicIPAddress: Swift.String?

        public init(
            nodeRole: Swift.String? = nil,
            privateIPAddress: Swift.String? = nil,
            publicIPAddress: Swift.String? = nil
        )
        {
            self.nodeRole = nodeRole
            self.privateIPAddress = privateIPAddress
            self.publicIPAddress = publicIPAddress
        }
    }

}

extension ClusterNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The ClusterIdentifier parameter does not refer to an existing cluster.
public struct ClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterOnLatestRevisionFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterOnLatestRevisionFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cluster is already on the latest database revision.
public struct ClusterOnLatestRevisionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterOnLatestRevision" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterOnLatestRevisionFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterOnLatestRevisionFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterParameterGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case parameterGroupFamily = "ParameterGroupFamily"
        case parameterGroupName = "ParameterGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupFamily)
        parameterGroupFamily = parameterGroupFamilyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a parameter group.
    public struct ClusterParameterGroup: Swift.Equatable {
        /// The description of the parameter group.
        public var description: Swift.String?
        /// The name of the cluster parameter group family that this cluster parameter group is compatible with.
        public var parameterGroupFamily: Swift.String?
        /// The name of the cluster parameter group.
        public var parameterGroupName: Swift.String?
        /// The list of tags for the cluster parameter group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            description: Swift.String? = nil,
            parameterGroupFamily: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.parameterGroupFamily = parameterGroupFamily
            self.parameterGroupName = parameterGroupName
            self.tags = tags
        }
    }

}

extension ClusterParameterGroupAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterParameterGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A cluster parameter group with the same name already exists.
public struct ClusterParameterGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterParameterGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterParameterGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterParameterGroupNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterParameterGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The parameter group name does not refer to an existing parameter group.
public struct ClusterParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterParameterGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterParameterGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterParameterGroupQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterParameterGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would result in the user exceeding the allowed number of cluster parameter groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterParameterGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterParameterGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterParameterGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterParameterGroupStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterStatusList = "ClusterParameterStatusList"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterGroupName = "ParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterParameterStatusList = clusterParameterStatusList {
            if !clusterParameterStatusList.isEmpty {
                var clusterParameterStatusListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterStatusList"))
                for (index0, clusterparameterstatus0) in clusterParameterStatusList.enumerated() {
                    try clusterParameterStatusListContainer.encode(clusterparameterstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterParameterStatusListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterParameterStatusList"))
                try clusterParameterStatusListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        if containerValues.contains(.clusterParameterStatusList) {
            struct KeyVal0{struct member{}}
            let clusterParameterStatusListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .clusterParameterStatusList)
            if let clusterParameterStatusListWrappedContainer = clusterParameterStatusListWrappedContainer {
                let clusterParameterStatusListContainer = try clusterParameterStatusListWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterParameterStatus].self, forKey: .member)
                var clusterParameterStatusListBuffer:[RedshiftClientTypes.ClusterParameterStatus]? = nil
                if let clusterParameterStatusListContainer = clusterParameterStatusListContainer {
                    clusterParameterStatusListBuffer = [RedshiftClientTypes.ClusterParameterStatus]()
                    for structureContainer0 in clusterParameterStatusListContainer {
                        clusterParameterStatusListBuffer?.append(structureContainer0)
                    }
                }
                clusterParameterStatusList = clusterParameterStatusListBuffer
            } else {
                clusterParameterStatusList = []
            }
        } else {
            clusterParameterStatusList = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a parameter group.
    public struct ClusterParameterGroupStatus: Swift.Equatable {
        /// The list of parameter statuses. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide.
        public var clusterParameterStatusList: [RedshiftClientTypes.ClusterParameterStatus]?
        /// The status of parameter updates.
        public var parameterApplyStatus: Swift.String?
        /// The name of the cluster parameter group.
        public var parameterGroupName: Swift.String?

        public init(
            clusterParameterStatusList: [RedshiftClientTypes.ClusterParameterStatus]? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil
        )
        {
            self.clusterParameterStatusList = clusterParameterStatusList
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterGroupName = parameterGroupName
        }
    }

}

extension RedshiftClientTypes.ClusterParameterStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterApplyErrorDescription = "ParameterApplyErrorDescription"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterName = "ParameterName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterApplyErrorDescription = parameterApplyErrorDescription {
            try container.encode(parameterApplyErrorDescription, forKey: ClientRuntime.Key("ParameterApplyErrorDescription"))
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let parameterApplyErrorDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyErrorDescription)
        parameterApplyErrorDescription = parameterApplyErrorDescriptionDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a parameter group.
    public struct ClusterParameterStatus: Swift.Equatable {
        /// The error that prevented the parameter from being applied to the database.
        public var parameterApplyErrorDescription: Swift.String?
        /// The status of the parameter that indicates whether the parameter is in sync with the database, waiting for a cluster reboot, or encountered an error when being applied. The following are possible statuses and descriptions.
        ///
        /// * in-sync: The parameter value is in sync with the database.
        ///
        /// * pending-reboot: The parameter value will be applied after the cluster reboots.
        ///
        /// * applying: The parameter value is being applied to the database.
        ///
        /// * invalid-parameter: Cannot apply the parameter value because it has an invalid value or syntax.
        ///
        /// * apply-deferred: The parameter contains static property changes. The changes are deferred until the cluster reboots.
        ///
        /// * apply-error: Cannot connect to the cluster. The parameter change will be applied after the cluster reboots.
        ///
        /// * unknown-error: Cannot apply the parameter change right now. The change will be applied after the cluster reboots.
        public var parameterApplyStatus: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?

        public init(
            parameterApplyErrorDescription: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterName: Swift.String? = nil
        )
        {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterName = parameterName
        }
    }

}

extension ClusterQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would exceed the allowed number of cluster instances for this account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterSecurityGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case description = "Description"
        case ec2SecurityGroups = "EC2SecurityGroups"
        case ipRanges = "IPRanges"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let ec2SecurityGroups = ec2SecurityGroups {
            if !ec2SecurityGroups.isEmpty {
                var ec2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
                for (index0, ec2securitygroup0) in ec2SecurityGroups.enumerated() {
                    try ec2SecurityGroupsContainer.encode(ec2securitygroup0, forKey: ClientRuntime.Key("EC2SecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ec2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
                try ec2SecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipRanges = ipRanges {
            if !ipRanges.isEmpty {
                var ipRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IPRanges"))
                for (index0, iprange0) in ipRanges.enumerated() {
                    try ipRangesContainer.encode(iprange0, forKey: ClientRuntime.Key("IPRange.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ipRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IPRanges"))
                try ipRangesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.ec2SecurityGroups) {
            struct KeyVal0{struct EC2SecurityGroup{}}
            let ec2SecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EC2SecurityGroup>.CodingKeys.self, forKey: .ec2SecurityGroups)
            if let ec2SecurityGroupsWrappedContainer = ec2SecurityGroupsWrappedContainer {
                let ec2SecurityGroupsContainer = try ec2SecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.EC2SecurityGroup].self, forKey: .member)
                var ec2SecurityGroupsBuffer:[RedshiftClientTypes.EC2SecurityGroup]? = nil
                if let ec2SecurityGroupsContainer = ec2SecurityGroupsContainer {
                    ec2SecurityGroupsBuffer = [RedshiftClientTypes.EC2SecurityGroup]()
                    for structureContainer0 in ec2SecurityGroupsContainer {
                        ec2SecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                ec2SecurityGroups = ec2SecurityGroupsBuffer
            } else {
                ec2SecurityGroups = []
            }
        } else {
            ec2SecurityGroups = nil
        }
        if containerValues.contains(.ipRanges) {
            struct KeyVal0{struct IPRange{}}
            let ipRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IPRange>.CodingKeys.self, forKey: .ipRanges)
            if let ipRangesWrappedContainer = ipRangesWrappedContainer {
                let ipRangesContainer = try ipRangesWrappedContainer.decodeIfPresent([RedshiftClientTypes.IPRange].self, forKey: .member)
                var ipRangesBuffer:[RedshiftClientTypes.IPRange]? = nil
                if let ipRangesContainer = ipRangesContainer {
                    ipRangesBuffer = [RedshiftClientTypes.IPRange]()
                    for structureContainer0 in ipRangesContainer {
                        ipRangesBuffer?.append(structureContainer0)
                    }
                }
                ipRanges = ipRangesBuffer
            } else {
                ipRanges = []
            }
        } else {
            ipRanges = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a security group.
    public struct ClusterSecurityGroup: Swift.Equatable {
        /// The name of the cluster security group to which the operation was applied.
        public var clusterSecurityGroupName: Swift.String?
        /// A description of the security group.
        public var description: Swift.String?
        /// A list of EC2 security groups that are permitted to access clusters associated with this cluster security group.
        public var ec2SecurityGroups: [RedshiftClientTypes.EC2SecurityGroup]?
        /// A list of IP ranges (CIDR blocks) that are permitted to access clusters associated with this cluster security group.
        public var ipRanges: [RedshiftClientTypes.IPRange]?
        /// The list of tags for the cluster security group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            clusterSecurityGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            ec2SecurityGroups: [RedshiftClientTypes.EC2SecurityGroup]? = nil,
            ipRanges: [RedshiftClientTypes.IPRange]? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.description = description
            self.ec2SecurityGroups = ec2SecurityGroups
            self.ipRanges = ipRanges
            self.tags = tags
        }
    }

}

extension ClusterSecurityGroupAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSecurityGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A cluster security group with the same name already exists.
public struct ClusterSecurityGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSecurityGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSecurityGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSecurityGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterSecurityGroupMembership: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a cluster security group.
    public struct ClusterSecurityGroupMembership: Swift.Equatable {
        /// The name of the cluster security group.
        public var clusterSecurityGroupName: Swift.String?
        /// The status of the cluster security group.
        public var status: Swift.String?

        public init(
            clusterSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.status = status
        }
    }

}

extension ClusterSecurityGroupNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSecurityGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster security group name does not refer to an existing cluster security group.
public struct ClusterSecurityGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSecurityGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSecurityGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSecurityGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterSecurityGroupQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSecurityGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would result in the user exceeding the allowed number of cluster security groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSecurityGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QuotaExceeded.ClusterSecurityGroup" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSecurityGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSecurityGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterSnapshotAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSnapshotAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The value specified as a snapshot identifier is already used by an existing snapshot.
public struct ClusterSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSnapshotAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSnapshotAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterSnapshotCopyStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationRegion = "DestinationRegion"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case retentionPeriod = "RetentionPeriod"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationRegion = destinationRegion {
            try container.encode(destinationRegion, forKey: ClientRuntime.Key("DestinationRegion"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let retentionPeriod = retentionPeriod {
            try container.encode(retentionPeriod, forKey: ClientRuntime.Key("RetentionPeriod"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationRegion)
        destinationRegion = destinationRegionDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
    }
}

extension RedshiftClientTypes {
    /// Returns the destination region and retention period that are configured for cross-region snapshot copy.
    public struct ClusterSnapshotCopyStatus: Swift.Equatable {
        /// The destination region that snapshots are automatically copied to when cross-region snapshot copy is enabled.
        public var destinationRegion: Swift.String?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region.
        public var retentionPeriod: Swift.Int?
        /// The name of the snapshot copy grant.
        public var snapshotCopyGrantName: Swift.String?

        public init(
            destinationRegion: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            retentionPeriod: Swift.Int? = nil,
            snapshotCopyGrantName: Swift.String? = nil
        )
        {
            self.destinationRegion = destinationRegion
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }
    }

}

extension ClusterSnapshotNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSnapshotNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The snapshot identifier does not refer to an existing cluster snapshot.
public struct ClusterSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSnapshotNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSnapshotNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterSnapshotQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSnapshotQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would result in the user exceeding the allowed number of cluster snapshots.
public struct ClusterSnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSnapshotQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSnapshotQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterSubnetGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case description = "Description"
        case subnetGroupStatus = "SubnetGroupStatus"
        case subnets = "Subnets"
        case supportedClusterIpAddressTypes = "SupportedClusterIpAddressTypes"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let subnetGroupStatus = subnetGroupStatus {
            try container.encode(subnetGroupStatus, forKey: ClientRuntime.Key("SubnetGroupStatus"))
        }
        if let subnets = subnets {
            if !subnets.isEmpty {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                for (index0, subnet0) in subnets.enumerated() {
                    try subnetsContainer.encode(subnet0, forKey: ClientRuntime.Key("Subnet.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                try subnetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedClusterIpAddressTypes = supportedClusterIpAddressTypes {
            if !supportedClusterIpAddressTypes.isEmpty {
                var supportedClusterIpAddressTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedClusterIpAddressTypes"))
                for (index0, string0) in supportedClusterIpAddressTypes.enumerated() {
                    try supportedClusterIpAddressTypesContainer.encode(string0, forKey: ClientRuntime.Key("item.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedClusterIpAddressTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedClusterIpAddressTypes"))
                try supportedClusterIpAddressTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupStatus)
        subnetGroupStatus = subnetGroupStatusDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct Subnet{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Subnet>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Subnet].self, forKey: .member)
                var subnetsBuffer:[RedshiftClientTypes.Subnet]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [RedshiftClientTypes.Subnet]()
                    for structureContainer0 in subnetsContainer {
                        subnetsBuffer?.append(structureContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.supportedClusterIpAddressTypes) {
            struct KeyVal0{struct item{}}
            let supportedClusterIpAddressTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .supportedClusterIpAddressTypes)
            if let supportedClusterIpAddressTypesWrappedContainer = supportedClusterIpAddressTypesWrappedContainer {
                let supportedClusterIpAddressTypesContainer = try supportedClusterIpAddressTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedClusterIpAddressTypesBuffer:[Swift.String]? = nil
                if let supportedClusterIpAddressTypesContainer = supportedClusterIpAddressTypesContainer {
                    supportedClusterIpAddressTypesBuffer = [Swift.String]()
                    for stringContainer0 in supportedClusterIpAddressTypesContainer {
                        supportedClusterIpAddressTypesBuffer?.append(stringContainer0)
                    }
                }
                supportedClusterIpAddressTypes = supportedClusterIpAddressTypesBuffer
            } else {
                supportedClusterIpAddressTypes = []
            }
        } else {
            supportedClusterIpAddressTypes = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a subnet group.
    public struct ClusterSubnetGroup: Swift.Equatable {
        /// The name of the cluster subnet group.
        public var clusterSubnetGroupName: Swift.String?
        /// The description of the cluster subnet group.
        public var description: Swift.String?
        /// The status of the cluster subnet group. Possible values are Complete, Incomplete and Invalid.
        public var subnetGroupStatus: Swift.String?
        /// A list of the VPC [Subnet] elements.
        public var subnets: [RedshiftClientTypes.Subnet]?
        /// The IP address types supported by this cluster subnet group. Possible values are ipv4 and dualstack.
        public var supportedClusterIpAddressTypes: [Swift.String]?
        /// The list of tags for the cluster subnet group.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The VPC ID of the cluster subnet group.
        public var vpcId: Swift.String?

        public init(
            clusterSubnetGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            subnetGroupStatus: Swift.String? = nil,
            subnets: [RedshiftClientTypes.Subnet]? = nil,
            supportedClusterIpAddressTypes: [Swift.String]? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.supportedClusterIpAddressTypes = supportedClusterIpAddressTypes
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

extension ClusterSubnetGroupAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSubnetGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A ClusterSubnetGroupName is already used by an existing cluster subnet group.
public struct ClusterSubnetGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSubnetGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSubnetGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterSubnetGroupNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSubnetGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster subnet group name does not refer to an existing cluster subnet group.
public struct ClusterSubnetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSubnetGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSubnetGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterSubnetGroupQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSubnetGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would result in user exceeding the allowed number of cluster subnet groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSubnetGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSubnetGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSubnetGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterSubnetQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterSubnetQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would result in user exceeding the allowed number of subnets in a cluster subnet groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSubnetQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ClusterSubnetQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterSubnetQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ClusterVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterGroupFamily = "ClusterParameterGroupFamily"
        case clusterVersion = "ClusterVersion"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterParameterGroupFamily = clusterParameterGroupFamily {
            try container.encode(clusterParameterGroupFamily, forKey: ClientRuntime.Key("ClusterParameterGroupFamily"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let clusterParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterParameterGroupFamily)
        clusterParameterGroupFamily = clusterParameterGroupFamilyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a cluster version, including the parameter group family and description of the version.
    public struct ClusterVersion: Swift.Equatable {
        /// The name of the cluster parameter group family for the cluster.
        public var clusterParameterGroupFamily: Swift.String?
        /// The version number used by the cluster.
        public var clusterVersion: Swift.String?
        /// The description of the cluster version.
        public var description: Swift.String?

        public init(
            clusterParameterGroupFamily: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.clusterVersion = clusterVersion
            self.description = description
        }
    }

}

extension ConflictPolicyUpdateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ConflictPolicyUpdateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is a conflict while updating the resource policy.
public struct ConflictPolicyUpdateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictPolicyUpdateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ConflictPolicyUpdateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictPolicyUpdateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CopyClusterSnapshotInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier {
            try container.encode(sourceSnapshotClusterIdentifier, forKey: ClientRuntime.Key("SourceSnapshotClusterIdentifier"))
        }
        if let sourceSnapshotIdentifier = sourceSnapshotIdentifier {
            try container.encode(sourceSnapshotIdentifier, forKey: ClientRuntime.Key("SourceSnapshotIdentifier"))
        }
        if let targetSnapshotIdentifier = targetSnapshotIdentifier {
            try container.encode(targetSnapshotIdentifier, forKey: ClientRuntime.Key("TargetSnapshotIdentifier"))
        }
        try container.encode("CopyClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopyClusterSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CopyClusterSnapshotInput: Swift.Equatable {
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints:
    ///
    /// * Must be the identifier for a valid cluster.
    public var sourceSnapshotClusterIdentifier: Swift.String?
    /// The identifier for the source snapshot. Constraints:
    ///
    /// * Must be the identifier for a valid automated snapshot whose state is available.
    /// This member is required.
    public var sourceSnapshotIdentifier: Swift.String?
    /// The identifier given to the new manual snapshot. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for the Amazon Web Services account that is making the request.
    /// This member is required.
    public var targetSnapshotIdentifier: Swift.String?

    public init(
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        sourceSnapshotClusterIdentifier: Swift.String? = nil,
        sourceSnapshotIdentifier: Swift.String? = nil,
        targetSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier
        self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
        self.targetSnapshotIdentifier = targetSnapshotIdentifier
    }
}

struct CopyClusterSnapshotInputBody: Swift.Equatable {
    let sourceSnapshotIdentifier: Swift.String?
    let sourceSnapshotClusterIdentifier: Swift.String?
    let targetSnapshotIdentifier: Swift.String?
    let manualSnapshotRetentionPeriod: Swift.Int?
}

extension CopyClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case sourceSnapshotClusterIdentifier = "SourceSnapshotClusterIdentifier"
        case sourceSnapshotIdentifier = "SourceSnapshotIdentifier"
        case targetSnapshotIdentifier = "TargetSnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotIdentifier)
        sourceSnapshotIdentifier = sourceSnapshotIdentifierDecoded
        let sourceSnapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotClusterIdentifier)
        sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifierDecoded
        let targetSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetSnapshotIdentifier)
        targetSnapshotIdentifier = targetSnapshotIdentifierDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
    }
}

extension CopyClusterSnapshotOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CopyClusterSnapshotOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CopyClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CopyClusterSnapshotOutputBody: Swift.Equatable {
    let snapshot: RedshiftClientTypes.Snapshot?
}

extension CopyClusterSnapshotOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CopyClusterSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

enum CopyClusterSnapshotOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotAlreadyExists": return try await ClusterSnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotQuotaExceeded": return try await ClusterSnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CopyToRegionDisabledFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CopyToRegionDisabledFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cross-region snapshot copy was temporarily disabled. Try your request again.
public struct CopyToRegionDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CopyToRegionDisabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct CopyToRegionDisabledFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CopyToRegionDisabledFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateAuthenticationProfileInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileContent = authenticationProfileContent {
            try container.encode(authenticationProfileContent, forKey: ClientRuntime.Key("AuthenticationProfileContent"))
        }
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("CreateAuthenticationProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateAuthenticationProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAuthenticationProfileInput: Swift.Equatable {
    /// The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
    /// This member is required.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile to be created.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

struct CreateAuthenticationProfileInputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
    let authenticationProfileContent: Swift.String?
}

extension CreateAuthenticationProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
        let authenticationProfileContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileContent)
        authenticationProfileContent = authenticationProfileContentDecoded
    }
}

extension CreateAuthenticationProfileOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateAuthenticationProfileOutputBody = try responseDecoder.decode(responseBody: data)
            self.authenticationProfileContent = output.authenticationProfileContent
            self.authenticationProfileName = output.authenticationProfileName
        } else {
            self.authenticationProfileContent = nil
            self.authenticationProfileName = nil
        }
    }
}

public struct CreateAuthenticationProfileOutput: Swift.Equatable {
    /// The content of the authentication profile in JSON format.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile that was created.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

struct CreateAuthenticationProfileOutputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
    let authenticationProfileContent: Swift.String?
}

extension CreateAuthenticationProfileOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateAuthenticationProfileResult"))
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
        let authenticationProfileContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileContent)
        authenticationProfileContent = authenticationProfileContentDecoded
    }
}

enum CreateAuthenticationProfileOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthenticationProfileAlreadyExistsFault": return try await AuthenticationProfileAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AuthenticationProfileQuotaExceededFault": return try await AuthenticationProfileQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateClusterInput(additionalInfo: \(Swift.String(describing: additionalInfo)), allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), aquaConfigurationStatus: \(Swift.String(describing: aquaConfigurationStatus)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneRelocation: \(Swift.String(describing: availabilityZoneRelocation)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterParameterGroupName: \(Swift.String(describing: clusterParameterGroupName)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterSubnetGroupName: \(Swift.String(describing: clusterSubnetGroupName)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), dbName: \(Swift.String(describing: dbName)), defaultIamRoleArn: \(Swift.String(describing: defaultIamRoleArn)), elasticIp: \(Swift.String(describing: elasticIp)), encrypted: \(Swift.String(describing: encrypted)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), iamRoles: \(Swift.String(describing: iamRoles)), ipAddressType: \(Swift.String(describing: ipAddressType)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), loadSampleData: \(Swift.String(describing: loadSampleData)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manageMasterPassword: \(Swift.String(describing: manageMasterPassword)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterPasswordSecretKmsKeyId: \(Swift.String(describing: masterPasswordSecretKmsKeyId)), masterUsername: \(Swift.String(describing: masterUsername)), multiAZ: \(Swift.String(describing: multiAZ)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), port: \(Swift.String(describing: port)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), redshiftIdcApplicationArn: \(Swift.String(describing: redshiftIdcApplicationArn)), snapshotScheduleIdentifier: \(Swift.String(describing: snapshotScheduleIdentifier)), tags: \(Swift.String(describing: tags)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension CreateClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalInfo = additionalInfo {
            try container.encode(additionalInfo, forKey: ClientRuntime.Key("AdditionalInfo"))
        }
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: ClientRuntime.Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: ClientRuntime.Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, string0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let iamRoles = iamRoles {
            if !iamRoles.isEmpty {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                for (index0, string0) in iamRoles.enumerated() {
                    try iamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                try iamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let loadSampleData = loadSampleData {
            try container.encode(loadSampleData, forKey: ClientRuntime.Key("LoadSampleData"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manageMasterPassword = manageMasterPassword {
            try container.encode(manageMasterPassword, forKey: ClientRuntime.Key("ManageMasterPassword"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: ClientRuntime.Key("SnapshotScheduleIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterInput: Swift.Equatable {
    /// Reserved.
    public var additionalInfo: Swift.String?
    /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster. Default: true
    public var allowVersionUpgrade: Swift.Bool?
    /// This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: 1 Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint. Example: us-east-2d Constraint: The specified Availability Zone must be in the same region as the current endpoint.
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is created.
    public var availabilityZoneRelocation: Swift.Bool?
    /// A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    ///
    ///
    /// Example: myexamplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to [Working with Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var clusterParameterGroupName: Swift.String?
    /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift.
    public var clusterSecurityGroups: [Swift.String]?
    /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
    public var clusterSubnetGroupName: Swift.String?
    /// The type of the cluster. When cluster type is specified as
    ///
    /// * single-node, the NumberOfNodes parameter is not required.
    ///
    /// * multi-node, the NumberOfNodes parameter is required.
    ///
    ///
    /// Valid Values: multi-node | single-node Default: multi-node
    public var clusterType: Swift.String?
    /// The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. Constraints: Only version 1.0 is currently available. Example: 1.0
    public var clusterVersion: Swift.String?
    /// The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to [Create a Database](https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html) in the Amazon Redshift Database Developer Guide. Default: dev Constraints:
    ///
    /// * Must contain 1 to 64 alphanumeric characters.
    ///
    /// * Must contain only lowercase letters.
    ///
    /// * Cannot be a word that is reserved by the service. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
    public var defaultIamRoleArn: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on. For more information about provisioning clusters in EC2-VPC, go to [Supported Platforms to Launch Your Cluster](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms) in the Amazon Redshift Cluster Management Guide.
    public var elasticIp: Swift.String?
    /// If true, the data in the cluster is encrypted at rest. Default: false
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to [Quotas and limits](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRoles: [Swift.String]?
    /// The IP address types that the cluster supports. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
    public var kmsKeyId: Swift.String?
    /// A flag that specifies whether to load sample data once the cluster is created.
    public var loadSampleData: Swift.String?
    /// An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the current track.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage this cluster's admin credentials. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
    public var manageMasterPassword: Swift.Bool?
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// The password associated with the admin user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Constraints:
    ///
    /// * Must be between 8 and 64 characters in length.
    ///
    /// * Must contain at least one uppercase letter.
    ///
    /// * Must contain at least one lowercase letter.
    ///
    /// * Must contain one number.
    ///
    /// * Can be any printable ASCII character (ASCII code 33-126) except ' (single quote), " (double quote), \, /, or @.
    public var masterUserPassword: Swift.String?
    /// The user name associated with the admin user account for the cluster that is being created. Constraints:
    ///
    /// * Must be 1 - 128 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * The first character must be a letter.
    ///
    /// * Must not contain a colon (:) or a slash (/).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var masterUsername: Swift.String?
    /// If true, Amazon Redshift will deploy the cluster in two Availability Zones (AZ).
    public var multiAZ: Swift.Bool?
    /// The node type to be provisioned for the cluster. For information about node types, go to [ Working with Clusters](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes) in the Amazon Redshift Cluster Management Guide. Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
    /// This member is required.
    public var nodeType: Swift.String?
    /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. For information about determining how many nodes you need, go to [ Working with Clusters](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes) in the Amazon Redshift Cluster Management Guide. If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster. Default: 1 Constraints: Value must be at least 1 and no more than 100.
    public var numberOfNodes: Swift.Int?
    /// The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default: 5439 Valid Values: 1150-65535
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see [Maintenance Windows](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows) in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network.
    public var publiclyAccessible: Swift.Bool?
    /// The Amazon resource name (ARN) of the Amazon Redshift IAM Identity Center application.
    public var redshiftIdcApplicationArn: Swift.String?
    /// A unique identifier for the snapshot schedule.
    public var snapshotScheduleIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        additionalInfo: Swift.String? = nil,
        allowVersionUpgrade: Swift.Bool? = nil,
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterSubnetGroupName: Swift.String? = nil,
        clusterType: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        dbName: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        iamRoles: [Swift.String]? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        loadSampleData: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil,
        snapshotScheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.allowVersionUpgrade = allowVersionUpgrade
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.clusterType = clusterType
        self.clusterVersion = clusterVersion
        self.dbName = dbName
        self.defaultIamRoleArn = defaultIamRoleArn
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.iamRoles = iamRoles
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.loadSampleData = loadSampleData
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.multiAZ = multiAZ
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
        self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

struct CreateClusterInputBody: Swift.Equatable {
    let dbName: Swift.String?
    let clusterIdentifier: Swift.String?
    let clusterType: Swift.String?
    let nodeType: Swift.String?
    let masterUsername: Swift.String?
    let masterUserPassword: Swift.String?
    let clusterSecurityGroups: [Swift.String]?
    let vpcSecurityGroupIds: [Swift.String]?
    let clusterSubnetGroupName: Swift.String?
    let availabilityZone: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let clusterParameterGroupName: Swift.String?
    let automatedSnapshotRetentionPeriod: Swift.Int?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let port: Swift.Int?
    let clusterVersion: Swift.String?
    let allowVersionUpgrade: Swift.Bool?
    let numberOfNodes: Swift.Int?
    let publiclyAccessible: Swift.Bool?
    let encrypted: Swift.Bool?
    let hsmClientCertificateIdentifier: Swift.String?
    let hsmConfigurationIdentifier: Swift.String?
    let elasticIp: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
    let kmsKeyId: Swift.String?
    let enhancedVpcRouting: Swift.Bool?
    let additionalInfo: Swift.String?
    let iamRoles: [Swift.String]?
    let maintenanceTrackName: Swift.String?
    let snapshotScheduleIdentifier: Swift.String?
    let availabilityZoneRelocation: Swift.Bool?
    let aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    let defaultIamRoleArn: Swift.String?
    let loadSampleData: Swift.String?
    let manageMasterPassword: Swift.Bool?
    let masterPasswordSecretKmsKeyId: Swift.String?
    let ipAddressType: Swift.String?
    let multiAZ: Swift.Bool?
    let redshiftIdcApplicationArn: Swift.String?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case dbName = "DBName"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case iamRoles = "IamRoles"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case loadSampleData = "LoadSampleData"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manageMasterPassword = "ManageMasterPassword"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUserPassword = "MasterUserPassword"
        case masterUsername = "MasterUsername"
        case multiAZ = "MultiAZ"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroupName{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroupName>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[Swift.String]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let clusterParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterParameterGroupName)
        clusterParameterGroupName = clusterParameterGroupNameDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let allowVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let elasticIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        if containerValues.contains(.iamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let iamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .iamRoles)
            if let iamRolesWrappedContainer = iamRolesWrappedContainer {
                let iamRolesContainer = try iamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var iamRolesBuffer:[Swift.String]? = nil
                if let iamRolesContainer = iamRolesContainer {
                    iamRolesBuffer = [Swift.String]()
                    for stringContainer0 in iamRolesContainer {
                        iamRolesBuffer?.append(stringContainer0)
                    }
                }
                iamRoles = iamRolesBuffer
            } else {
                iamRoles = []
            }
        } else {
            iamRoles = nil
        }
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let availabilityZoneRelocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .availabilityZoneRelocation)
        availabilityZoneRelocation = availabilityZoneRelocationDecoded
        let aquaConfigurationStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfigurationStatus.self, forKey: .aquaConfigurationStatus)
        aquaConfigurationStatus = aquaConfigurationStatusDecoded
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
        let loadSampleDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadSampleData)
        loadSampleData = loadSampleDataDecoded
        let manageMasterPasswordDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .manageMasterPassword)
        manageMasterPassword = manageMasterPasswordDecoded
        let masterPasswordSecretKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretKmsKeyId)
        masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let redshiftIdcApplicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationArn)
        redshiftIdcApplicationArn = redshiftIdcApplicationArnDecoded
    }
}

extension CreateClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct CreateClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct CreateClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension CreateClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum CreateClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterAlreadyExists": return try await ClusterAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterQuotaExceeded": return try await ClusterQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSubnetGroupStateFault": return try await InvalidClusterSubnetGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterTrack": return try await InvalidClusterTrackFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidElasticIpFault": return try await InvalidElasticIpFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidSubnet": return try await InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "Ipv6CidrBlockNotFoundFault": return try await Ipv6CidrBlockNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateClusterParameterGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterParameterGroupInput: Swift.Equatable {
    /// A description of the parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters. To get a list of valid parameter group family names, you can call [DescribeClusterParameterGroups]. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your Amazon Web Services account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0".
    /// This member is required.
    public var parameterGroupFamily: Swift.String?
    /// The name of the cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique withing your Amazon Web Services account.
    ///
    ///
    /// This value is stored as a lower-case string.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        parameterGroupFamily: Swift.String? = nil,
        parameterGroupName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.parameterGroupFamily = parameterGroupFamily
        self.parameterGroupName = parameterGroupName
        self.tags = tags
    }
}

struct CreateClusterParameterGroupInputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let parameterGroupFamily: Swift.String?
    let description: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateClusterParameterGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case parameterGroupFamily = "ParameterGroupFamily"
        case parameterGroupName = "ParameterGroupName"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupFamily)
        parameterGroupFamily = parameterGroupFamilyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateClusterParameterGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateClusterParameterGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterParameterGroup = output.clusterParameterGroup
        } else {
            self.clusterParameterGroup = nil
        }
    }
}

public struct CreateClusterParameterGroupOutput: Swift.Equatable {
    /// Describes a parameter group.
    public var clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup?

    public init(
        clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup? = nil
    )
    {
        self.clusterParameterGroup = clusterParameterGroup
    }
}

struct CreateClusterParameterGroupOutputBody: Swift.Equatable {
    let clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup?
}

extension CreateClusterParameterGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterGroup = "ClusterParameterGroup"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateClusterParameterGroupResult"))
        let clusterParameterGroupDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterParameterGroup.self, forKey: .clusterParameterGroup)
        clusterParameterGroup = clusterParameterGroupDecoded
    }
}

enum CreateClusterParameterGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterParameterGroupAlreadyExists": return try await ClusterParameterGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterParameterGroupQuotaExceeded": return try await ClusterParameterGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateClusterSecurityGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterSecurityGroupInput: Swift.Equatable {
    /// The name for the security group. Amazon Redshift stores the value as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 alphanumeric characters or hyphens.
    ///
    /// * Must not be "Default".
    ///
    /// * Must be unique for all security groups that are created by your Amazon Web Services account.
    ///
    ///
    /// Example: examplesecuritygroup
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// A description for the security group.
    /// This member is required.
    public var description: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterSecurityGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.description = description
        self.tags = tags
    }
}

struct CreateClusterSecurityGroupInputBody: Swift.Equatable {
    let clusterSecurityGroupName: Swift.String?
    let description: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateClusterSecurityGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case description = "Description"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateClusterSecurityGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateClusterSecurityGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSecurityGroup = output.clusterSecurityGroup
        } else {
            self.clusterSecurityGroup = nil
        }
    }
}

public struct CreateClusterSecurityGroupOutput: Swift.Equatable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

struct CreateClusterSecurityGroupOutputBody: Swift.Equatable {
    let clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?
}

extension CreateClusterSecurityGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroup = "ClusterSecurityGroup"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateClusterSecurityGroupResult"))
        let clusterSecurityGroupDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterSecurityGroup.self, forKey: .clusterSecurityGroup)
        clusterSecurityGroup = clusterSecurityGroupDecoded
    }
}

enum CreateClusterSecurityGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSecurityGroupAlreadyExists": return try await ClusterSecurityGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "QuotaExceeded.ClusterSecurityGroup": return try await ClusterSecurityGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateClusterSnapshotInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterSnapshotInput: Swift.Equatable {
    /// The cluster identifier for which you want a snapshot.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account. Constraints:
    ///
    /// * Cannot be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifier = snapshotIdentifier
        self.tags = tags
    }
}

struct CreateClusterSnapshotInputBody: Swift.Equatable {
    let snapshotIdentifier: Swift.String?
    let clusterIdentifier: Swift.String?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case snapshotIdentifier = "SnapshotIdentifier"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateClusterSnapshotOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateClusterSnapshotOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CreateClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CreateClusterSnapshotOutputBody: Swift.Equatable {
    let snapshot: RedshiftClientTypes.Snapshot?
}

extension CreateClusterSnapshotOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateClusterSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

enum CreateClusterSnapshotOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotAlreadyExists": return try await ClusterSnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotQuotaExceeded": return try await ClusterSnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateClusterSubnetGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                for (index0, string0) in subnetIds.enumerated() {
                    try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateClusterSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateClusterSubnetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateClusterSubnetGroupInput: Swift.Equatable {
    /// The name for the subnet group. Amazon Redshift stores the value as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 alphanumeric characters or hyphens.
    ///
    /// * Must not be "Default".
    ///
    /// * Must be unique for all subnet groups that are created by your Amazon Web Services account.
    ///
    ///
    /// Example: examplesubnetgroup
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?
    /// A description for the subnet group.
    /// This member is required.
    public var description: Swift.String?
    /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.description = description
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

struct CreateClusterSubnetGroupInputBody: Swift.Equatable {
    let clusterSubnetGroupName: Swift.String?
    let description: Swift.String?
    let subnetIds: [Swift.String]?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateClusterSubnetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case description = "Description"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.subnetIds) {
            struct KeyVal0{struct SubnetIdentifier{}}
            let subnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SubnetIdentifier>.CodingKeys.self, forKey: .subnetIds)
            if let subnetIdsWrappedContainer = subnetIdsWrappedContainer {
                let subnetIdsContainer = try subnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var subnetIdsBuffer:[Swift.String]? = nil
                if let subnetIdsContainer = subnetIdsContainer {
                    subnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in subnetIdsContainer {
                        subnetIdsBuffer?.append(stringContainer0)
                    }
                }
                subnetIds = subnetIdsBuffer
            } else {
                subnetIds = []
            }
        } else {
            subnetIds = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateClusterSubnetGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateClusterSubnetGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSubnetGroup = output.clusterSubnetGroup
        } else {
            self.clusterSubnetGroup = nil
        }
    }
}

public struct CreateClusterSubnetGroupOutput: Swift.Equatable {
    /// Describes a subnet group.
    public var clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?

    public init(
        clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup? = nil
    )
    {
        self.clusterSubnetGroup = clusterSubnetGroup
    }
}

struct CreateClusterSubnetGroupOutputBody: Swift.Equatable {
    let clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?
}

extension CreateClusterSubnetGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroup = "ClusterSubnetGroup"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateClusterSubnetGroupResult"))
        let clusterSubnetGroupDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterSubnetGroup.self, forKey: .clusterSubnetGroup)
        clusterSubnetGroup = clusterSubnetGroupDecoded
    }
}

enum CreateClusterSubnetGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSubnetGroupAlreadyExists": return try await ClusterSubnetGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSubnetGroupQuotaExceeded": return try await ClusterSubnetGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSubnetQuotaExceededFault": return try await ClusterSubnetQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidSubnet": return try await InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateCustomDomainAssociationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        try container.encode("CreateCustomDomainAssociation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCustomDomainAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateCustomDomainAssociationInput: Swift.Equatable {
    /// The cluster identifier that the custom domain is associated with.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The certificate Amazon Resource Name (ARN) for the custom domain name association.
    /// This member is required.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for a custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

struct CreateCustomDomainAssociationInputBody: Swift.Equatable {
    let customDomainName: Swift.String?
    let customDomainCertificateArn: Swift.String?
    let clusterIdentifier: Swift.String?
}

extension CreateCustomDomainAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension CreateCustomDomainAssociationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateCustomDomainAssociationOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterIdentifier = output.clusterIdentifier
            self.customDomainCertExpiryTime = output.customDomainCertExpiryTime
            self.customDomainCertificateArn = output.customDomainCertificateArn
            self.customDomainName = output.customDomainName
        } else {
            self.clusterIdentifier = nil
            self.customDomainCertExpiryTime = nil
            self.customDomainCertificateArn = nil
            self.customDomainName = nil
        }
    }
}

public struct CreateCustomDomainAssociationOutput: Swift.Equatable {
    /// The identifier of the cluster that the custom domain is associated with.
    public var clusterIdentifier: Swift.String?
    /// The expiration time for the certificate for the custom domain.
    public var customDomainCertExpiryTime: Swift.String?
    /// The Amazon Resource Name (ARN) for the certificate associated with the custom domain name.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for the association result.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertExpiryTime: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertExpiryTime = customDomainCertExpiryTime
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

struct CreateCustomDomainAssociationOutputBody: Swift.Equatable {
    let customDomainName: Swift.String?
    let customDomainCertificateArn: Swift.String?
    let clusterIdentifier: Swift.String?
    let customDomainCertExpiryTime: Swift.String?
}

extension CreateCustomDomainAssociationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainCertExpiryTime = "CustomDomainCertExpiryTime"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateCustomDomainAssociationResult"))
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let customDomainCertExpiryTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertExpiryTime)
        customDomainCertExpiryTime = customDomainCertExpiryTimeDecoded
    }
}

enum CreateCustomDomainAssociationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateEndpointAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let subnetGroupName = subnetGroupName {
            try container.encode(subnetGroupName, forKey: ClientRuntime.Key("SubnetGroupName"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEndpointAccessInput: Swift.Equatable {
    /// The cluster identifier of the cluster to access.
    public var clusterIdentifier: Swift.String?
    /// The Redshift-managed VPC endpoint name. An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
    public var resourceOwner: Swift.String?
    /// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
    /// This member is required.
    public var subnetGroupName: Swift.String?
    /// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.endpointName = endpointName
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

struct CreateEndpointAccessInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let resourceOwner: Swift.String?
    let endpointName: Swift.String?
    let subnetGroupName: Swift.String?
    let vpcSecurityGroupIds: [Swift.String]?
}

extension CreateEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case endpointName = "EndpointName"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
    }
}

extension CreateEndpointAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateEndpointAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.address = output.address
            self.clusterIdentifier = output.clusterIdentifier
            self.endpointCreateTime = output.endpointCreateTime
            self.endpointName = output.endpointName
            self.endpointStatus = output.endpointStatus
            self.port = output.port
            self.resourceOwner = output.resourceOwner
            self.subnetGroupName = output.subnetGroupName
            self.vpcEndpoint = output.vpcEndpoint
            self.vpcSecurityGroups = output.vpcSecurityGroups
        } else {
            self.address = nil
            self.clusterIdentifier = nil
            self.endpointCreateTime = nil
            self.endpointName = nil
            self.endpointStatus = nil
            self.port = nil
            self.resourceOwner = nil
            self.subnetGroupName = nil
            self.vpcEndpoint = nil
            self.vpcSecurityGroups = nil
        }
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct CreateEndpointAccessOutput: Swift.Equatable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: ClientRuntime.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

struct CreateEndpointAccessOutputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let resourceOwner: Swift.String?
    let subnetGroupName: Swift.String?
    let endpointStatus: Swift.String?
    let endpointName: Swift.String?
    let endpointCreateTime: ClientRuntime.Date?
    let port: Swift.Int?
    let address: Swift.String?
    let vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?
    let vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
}

extension CreateEndpointAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case clusterIdentifier = "ClusterIdentifier"
        case endpointCreateTime = "EndpointCreateTime"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case port = "Port"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcEndpoint = "VpcEndpoint"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateEndpointAccessResult"))
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endpointCreateTime)
        endpointCreateTime = endpointCreateTimeDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [RedshiftClientTypes.VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

enum CreateEndpointAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AccessToClusterDenied": return try await AccessToClusterDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointAlreadyExists": return try await EndpointAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointsPerAuthorizationLimitExceeded": return try await EndpointsPerAuthorizationLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointsPerClusterLimitExceeded": return try await EndpointsPerClusterLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateEventSubscriptionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIds = sourceIds {
            if !sourceIds.isEmpty {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                for (index0, string0) in sourceIds.enumerated() {
                    try sourceIdsContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                try sourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateEventSubscriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateEventSubscriptionInput: Swift.Equatable {
    /// A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    /// This member is required.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the event subscription to be created. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var subscriptionName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}

struct CreateEventSubscriptionInputBody: Swift.Equatable {
    let subscriptionName: Swift.String?
    let snsTopicArn: Swift.String?
    let sourceType: Swift.String?
    let sourceIds: [Swift.String]?
    let eventCategories: [Swift.String]?
    let severity: Swift.String?
    let enabled: Swift.Bool?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateEventSubscriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case eventCategories = "EventCategories"
        case severity = "Severity"
        case snsTopicArn = "SnsTopicArn"
        case sourceIds = "SourceIds"
        case sourceType = "SourceType"
        case subscriptionName = "SubscriptionName"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionName)
        subscriptionName = subscriptionNameDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        if containerValues.contains(.sourceIds) {
            struct KeyVal0{struct SourceId{}}
            let sourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SourceId>.CodingKeys.self, forKey: .sourceIds)
            if let sourceIdsWrappedContainer = sourceIdsWrappedContainer {
                let sourceIdsContainer = try sourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var sourceIdsBuffer:[Swift.String]? = nil
                if let sourceIdsContainer = sourceIdsContainer {
                    sourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in sourceIdsContainer {
                        sourceIdsBuffer?.append(stringContainer0)
                    }
                }
                sourceIds = sourceIdsBuffer
            } else {
                sourceIds = []
            }
        } else {
            sourceIds = nil
        }
        if containerValues.contains(.eventCategories) {
            struct KeyVal0{struct EventCategory{}}
            let eventCategoriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventCategory>.CodingKeys.self, forKey: .eventCategories)
            if let eventCategoriesWrappedContainer = eventCategoriesWrappedContainer {
                let eventCategoriesContainer = try eventCategoriesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var eventCategoriesBuffer:[Swift.String]? = nil
                if let eventCategoriesContainer = eventCategoriesContainer {
                    eventCategoriesBuffer = [Swift.String]()
                    for stringContainer0 in eventCategoriesContainer {
                        eventCategoriesBuffer?.append(stringContainer0)
                    }
                }
                eventCategories = eventCategoriesBuffer
            } else {
                eventCategories = []
            }
        } else {
            eventCategories = nil
        }
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateEventSubscriptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateEventSubscriptionOutputBody = try responseDecoder.decode(responseBody: data)
            self.eventSubscription = output.eventSubscription
        } else {
            self.eventSubscription = nil
        }
    }
}

public struct CreateEventSubscriptionOutput: Swift.Equatable {
    /// Describes event subscriptions.
    public var eventSubscription: RedshiftClientTypes.EventSubscription?

    public init(
        eventSubscription: RedshiftClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

struct CreateEventSubscriptionOutputBody: Swift.Equatable {
    let eventSubscription: RedshiftClientTypes.EventSubscription?
}

extension CreateEventSubscriptionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSubscription = "EventSubscription"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateEventSubscriptionResult"))
        let eventSubscriptionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.EventSubscription.self, forKey: .eventSubscription)
        eventSubscription = eventSubscriptionDecoded
    }
}

enum CreateEventSubscriptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "EventSubscriptionQuotaExceeded": return try await EventSubscriptionQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SNSInvalidTopic": return try await SNSInvalidTopicFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SNSNoAuthorization": return try await SNSNoAuthorizationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SNSTopicArnNotFound": return try await SNSTopicArnNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SourceNotFound": return try await SourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionAlreadyExist": return try await SubscriptionAlreadyExistFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionCategoryNotFound": return try await SubscriptionCategoryNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionEventIdNotFound": return try await SubscriptionEventIdNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionSeverityNotFound": return try await SubscriptionSeverityNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateHsmClientCertificateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateHsmClientCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateHsmClientCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateHsmClientCertificateInput: Swift.Equatable {
    /// The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
    /// This member is required.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.tags = tags
    }
}

struct CreateHsmClientCertificateInputBody: Swift.Equatable {
    let hsmClientCertificateIdentifier: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateHsmClientCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateHsmClientCertificateOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateHsmClientCertificateOutputBody = try responseDecoder.decode(responseBody: data)
            self.hsmClientCertificate = output.hsmClientCertificate
        } else {
            self.hsmClientCertificate = nil
        }
    }
}

public struct CreateHsmClientCertificateOutput: Swift.Equatable {
    /// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
    public var hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate?

    public init(
        hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate? = nil
    )
    {
        self.hsmClientCertificate = hsmClientCertificate
    }
}

struct CreateHsmClientCertificateOutputBody: Swift.Equatable {
    let hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate?
}

extension CreateHsmClientCertificateOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificate = "HsmClientCertificate"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateHsmClientCertificateResult"))
        let hsmClientCertificateDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.HsmClientCertificate.self, forKey: .hsmClientCertificate)
        hsmClientCertificate = hsmClientCertificateDecoded
    }
}

enum CreateHsmClientCertificateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "HsmClientCertificateAlreadyExistsFault": return try await HsmClientCertificateAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmClientCertificateQuotaExceededFault": return try await HsmClientCertificateQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateHsmConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let hsmIpAddress = hsmIpAddress {
            try container.encode(hsmIpAddress, forKey: ClientRuntime.Key("HsmIpAddress"))
        }
        if let hsmPartitionName = hsmPartitionName {
            try container.encode(hsmPartitionName, forKey: ClientRuntime.Key("HsmPartitionName"))
        }
        if let hsmPartitionPassword = hsmPartitionPassword {
            try container.encode(hsmPartitionPassword, forKey: ClientRuntime.Key("HsmPartitionPassword"))
        }
        if let hsmServerPublicCertificate = hsmServerPublicCertificate {
            try container.encode(hsmServerPublicCertificate, forKey: ClientRuntime.Key("HsmServerPublicCertificate"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateHsmConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateHsmConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct CreateHsmConfigurationInput: Swift.Equatable {
    /// A text description of the HSM configuration to be created.
    /// This member is required.
    public var description: Swift.String?
    /// The identifier to be assigned to the new Amazon Redshift HSM configuration.
    /// This member is required.
    public var hsmConfigurationIdentifier: Swift.String?
    /// The IP address that the Amazon Redshift cluster must use to access the HSM.
    /// This member is required.
    public var hsmIpAddress: Swift.String?
    /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
    /// This member is required.
    public var hsmPartitionName: Swift.String?
    /// The password required to access the HSM partition.
    /// This member is required.
    public var hsmPartitionPassword: Swift.String?
    /// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
    /// This member is required.
    public var hsmServerPublicCertificate: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        hsmIpAddress: Swift.String? = nil,
        hsmPartitionName: Swift.String? = nil,
        hsmPartitionPassword: Swift.String? = nil,
        hsmServerPublicCertificate: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.hsmIpAddress = hsmIpAddress
        self.hsmPartitionName = hsmPartitionName
        self.hsmPartitionPassword = hsmPartitionPassword
        self.hsmServerPublicCertificate = hsmServerPublicCertificate
        self.tags = tags
    }
}

struct CreateHsmConfigurationInputBody: Swift.Equatable {
    let hsmConfigurationIdentifier: Swift.String?
    let description: Swift.String?
    let hsmIpAddress: Swift.String?
    let hsmPartitionName: Swift.String?
    let hsmPartitionPassword: Swift.String?
    let hsmServerPublicCertificate: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateHsmConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case hsmIpAddress = "HsmIpAddress"
        case hsmPartitionName = "HsmPartitionName"
        case hsmPartitionPassword = "HsmPartitionPassword"
        case hsmServerPublicCertificate = "HsmServerPublicCertificate"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let hsmIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmIpAddress)
        hsmIpAddress = hsmIpAddressDecoded
        let hsmPartitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmPartitionName)
        hsmPartitionName = hsmPartitionNameDecoded
        let hsmPartitionPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmPartitionPassword)
        hsmPartitionPassword = hsmPartitionPasswordDecoded
        let hsmServerPublicCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmServerPublicCertificate)
        hsmServerPublicCertificate = hsmServerPublicCertificateDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateHsmConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateHsmConfigurationOutputBody = try responseDecoder.decode(responseBody: data)
            self.hsmConfiguration = output.hsmConfiguration
        } else {
            self.hsmConfiguration = nil
        }
    }
}

public struct CreateHsmConfigurationOutput: Swift.Equatable {
    /// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
    public var hsmConfiguration: RedshiftClientTypes.HsmConfiguration?

    public init(
        hsmConfiguration: RedshiftClientTypes.HsmConfiguration? = nil
    )
    {
        self.hsmConfiguration = hsmConfiguration
    }
}

struct CreateHsmConfigurationOutputBody: Swift.Equatable {
    let hsmConfiguration: RedshiftClientTypes.HsmConfiguration?
}

extension CreateHsmConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfiguration = "HsmConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateHsmConfigurationResult"))
        let hsmConfigurationDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.HsmConfiguration.self, forKey: .hsmConfiguration)
        hsmConfiguration = hsmConfigurationDecoded
    }
}

enum CreateHsmConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "HsmConfigurationAlreadyExistsFault": return try await HsmConfigurationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmConfigurationQuotaExceededFault": return try await HsmConfigurationQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateRedshiftIdcApplicationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedTokenIssuerList = authorizedTokenIssuerList {
            if !authorizedTokenIssuerList.isEmpty {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                for (index0, authorizedtokenissuer0) in authorizedTokenIssuerList.enumerated() {
                    try authorizedTokenIssuerListContainer.encode(authorizedtokenissuer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                try authorizedTokenIssuerListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let idcDisplayName = idcDisplayName {
            try container.encode(idcDisplayName, forKey: ClientRuntime.Key("IdcDisplayName"))
        }
        if let idcInstanceArn = idcInstanceArn {
            try container.encode(idcInstanceArn, forKey: ClientRuntime.Key("IdcInstanceArn"))
        }
        if let identityNamespace = identityNamespace {
            try container.encode(identityNamespace, forKey: ClientRuntime.Key("IdentityNamespace"))
        }
        if let redshiftIdcApplicationName = redshiftIdcApplicationName {
            try container.encode(redshiftIdcApplicationName, forKey: ClientRuntime.Key("RedshiftIdcApplicationName"))
        }
        if let serviceIntegrations = serviceIntegrations {
            if !serviceIntegrations.isEmpty {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                for (index0, serviceintegrationsunion0) in serviceIntegrations.enumerated() {
                    try serviceIntegrationsContainer.encode(serviceintegrationsunion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                try serviceIntegrationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateRedshiftIdcApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateRedshiftIdcApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRedshiftIdcApplicationInput: Swift.Equatable {
    /// The token issuer list for the Amazon Redshift IAM Identity Center application instance.
    public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    /// The IAM role ARN for the Amazon Redshift IAM Identity Center application instance. It has the required permissions to be assumed and invoke the IDC Identity Center API.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// The display name for the Amazon Redshift IAM Identity Center application instance. It appears in the console.
    /// This member is required.
    public var idcDisplayName: Swift.String?
    /// The Amazon resource name (ARN) of the IAM Identity Center instance where Amazon Redshift creates a new managed application.
    /// This member is required.
    public var idcInstanceArn: Swift.String?
    /// The namespace for the Amazon Redshift IAM Identity Center application instance. It determines which managed application verifies the connection token.
    public var identityNamespace: Swift.String?
    /// The name of the Redshift application in IAM Identity Center.
    /// This member is required.
    public var redshiftIdcApplicationName: Swift.String?
    /// A collection of service integrations for the Redshift IAM Identity Center application.
    public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

    public init(
        authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
        iamRoleArn: Swift.String? = nil,
        idcDisplayName: Swift.String? = nil,
        idcInstanceArn: Swift.String? = nil,
        identityNamespace: Swift.String? = nil,
        redshiftIdcApplicationName: Swift.String? = nil,
        serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
    )
    {
        self.authorizedTokenIssuerList = authorizedTokenIssuerList
        self.iamRoleArn = iamRoleArn
        self.idcDisplayName = idcDisplayName
        self.idcInstanceArn = idcInstanceArn
        self.identityNamespace = identityNamespace
        self.redshiftIdcApplicationName = redshiftIdcApplicationName
        self.serviceIntegrations = serviceIntegrations
    }
}

struct CreateRedshiftIdcApplicationInputBody: Swift.Equatable {
    let idcInstanceArn: Swift.String?
    let redshiftIdcApplicationName: Swift.String?
    let identityNamespace: Swift.String?
    let idcDisplayName: Swift.String?
    let iamRoleArn: Swift.String?
    let authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    let serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?
}

extension CreateRedshiftIdcApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedTokenIssuerList = "AuthorizedTokenIssuerList"
        case iamRoleArn = "IamRoleArn"
        case idcDisplayName = "IdcDisplayName"
        case idcInstanceArn = "IdcInstanceArn"
        case identityNamespace = "IdentityNamespace"
        case redshiftIdcApplicationName = "RedshiftIdcApplicationName"
        case serviceIntegrations = "ServiceIntegrations"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idcInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcInstanceArn)
        idcInstanceArn = idcInstanceArnDecoded
        let redshiftIdcApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationName)
        redshiftIdcApplicationName = redshiftIdcApplicationNameDecoded
        let identityNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityNamespace)
        identityNamespace = identityNamespaceDecoded
        let idcDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcDisplayName)
        idcDisplayName = idcDisplayNameDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        if containerValues.contains(.authorizedTokenIssuerList) {
            struct KeyVal0{struct member{}}
            let authorizedTokenIssuerListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .authorizedTokenIssuerList)
            if let authorizedTokenIssuerListWrappedContainer = authorizedTokenIssuerListWrappedContainer {
                let authorizedTokenIssuerListContainer = try authorizedTokenIssuerListWrappedContainer.decodeIfPresent([RedshiftClientTypes.AuthorizedTokenIssuer].self, forKey: .member)
                var authorizedTokenIssuerListBuffer:[RedshiftClientTypes.AuthorizedTokenIssuer]? = nil
                if let authorizedTokenIssuerListContainer = authorizedTokenIssuerListContainer {
                    authorizedTokenIssuerListBuffer = [RedshiftClientTypes.AuthorizedTokenIssuer]()
                    for structureContainer0 in authorizedTokenIssuerListContainer {
                        authorizedTokenIssuerListBuffer?.append(structureContainer0)
                    }
                }
                authorizedTokenIssuerList = authorizedTokenIssuerListBuffer
            } else {
                authorizedTokenIssuerList = []
            }
        } else {
            authorizedTokenIssuerList = nil
        }
        if containerValues.contains(.serviceIntegrations) {
            struct KeyVal0{struct member{}}
            let serviceIntegrationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceIntegrations)
            if let serviceIntegrationsWrappedContainer = serviceIntegrationsWrappedContainer {
                let serviceIntegrationsContainer = try serviceIntegrationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ServiceIntegrationsUnion].self, forKey: .member)
                var serviceIntegrationsBuffer:[RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
                if let serviceIntegrationsContainer = serviceIntegrationsContainer {
                    serviceIntegrationsBuffer = [RedshiftClientTypes.ServiceIntegrationsUnion]()
                    for unionContainer0 in serviceIntegrationsContainer {
                        serviceIntegrationsBuffer?.append(unionContainer0)
                    }
                }
                serviceIntegrations = serviceIntegrationsBuffer
            } else {
                serviceIntegrations = []
            }
        } else {
            serviceIntegrations = nil
        }
    }
}

extension CreateRedshiftIdcApplicationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateRedshiftIdcApplicationOutputBody = try responseDecoder.decode(responseBody: data)
            self.redshiftIdcApplication = output.redshiftIdcApplication
        } else {
            self.redshiftIdcApplication = nil
        }
    }
}

public struct CreateRedshiftIdcApplicationOutput: Swift.Equatable {
    /// Contains properties for the Redshift IDC application.
    public var redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?

    public init(
        redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication? = nil
    )
    {
        self.redshiftIdcApplication = redshiftIdcApplication
    }
}

struct CreateRedshiftIdcApplicationOutputBody: Swift.Equatable {
    let redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?
}

extension CreateRedshiftIdcApplicationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case redshiftIdcApplication = "RedshiftIdcApplication"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateRedshiftIdcApplicationResult"))
        let redshiftIdcApplicationDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.RedshiftIdcApplication.self, forKey: .redshiftIdcApplication)
        redshiftIdcApplication = redshiftIdcApplicationDecoded
    }
}

enum CreateRedshiftIdcApplicationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "RedshiftIdcApplicationAlreadyExists": return try await RedshiftIdcApplicationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "RedshiftIdcApplicationQuotaExceeded": return try await RedshiftIdcApplicationQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateScheduledActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enable = enable {
            try container.encode(enable, forKey: ClientRuntime.Key("Enable"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let iamRole = iamRole {
            try container.encode(iamRole, forKey: ClientRuntime.Key("IamRole"))
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
        if let scheduledActionDescription = scheduledActionDescription {
            try container.encode(scheduledActionDescription, forKey: ClientRuntime.Key("ScheduledActionDescription"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let targetAction = targetAction {
            try container.encode(targetAction, forKey: ClientRuntime.Key("TargetAction"))
        }
        try container.encode("CreateScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateScheduledActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateScheduledActionInput: Swift.Equatable {
    /// If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about state of the scheduled action, see [ScheduledAction].
    public var enable: Swift.Bool?
    /// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var iamRole: Swift.String?
    /// The schedule in at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var startTime: ClientRuntime.Date?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        enable: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}

struct CreateScheduledActionInputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
    let targetAction: RedshiftClientTypes.ScheduledActionType?
    let schedule: Swift.String?
    let iamRole: Swift.String?
    let scheduledActionDescription: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let enable: Swift.Bool?
}

extension CreateScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enable = "Enable"
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetAction = "TargetAction"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionType.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let scheduledActionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionDescription)
        scheduledActionDescription = scheduledActionDescriptionDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let enableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enable)
        enable = enableDecoded
    }
}

extension CreateScheduledActionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateScheduledActionOutputBody = try responseDecoder.decode(responseBody: data)
            self.endTime = output.endTime
            self.iamRole = output.iamRole
            self.nextInvocations = output.nextInvocations
            self.schedule = output.schedule
            self.scheduledActionDescription = output.scheduledActionDescription
            self.scheduledActionName = output.scheduledActionName
            self.startTime = output.startTime
            self.state = output.state
            self.targetAction = output.targetAction
        } else {
            self.endTime = nil
            self.iamRole = nil
            self.nextInvocations = nil
            self.schedule = nil
            self.scheduledActionDescription = nil
            self.scheduledActionName = nil
            self.startTime = nil
            self.state = nil
            self.targetAction = nil
        }
    }
}

/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
public struct CreateScheduledActionOutput: Swift.Equatable {
    /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRole: Swift.String?
    /// List of times when the scheduled action will run.
    public var nextInvocations: [ClientRuntime.Date]?
    /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
    public var startTime: ClientRuntime.Date?
    /// The state of the scheduled action. For example, DISABLED.
    public var state: RedshiftClientTypes.ScheduledActionState?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ds2.8xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        state: RedshiftClientTypes.ScheduledActionState? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.endTime = endTime
        self.iamRole = iamRole
        self.nextInvocations = nextInvocations
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.state = state
        self.targetAction = targetAction
    }
}

struct CreateScheduledActionOutputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
    let targetAction: RedshiftClientTypes.ScheduledActionType?
    let schedule: Swift.String?
    let iamRole: Swift.String?
    let scheduledActionDescription: Swift.String?
    let state: RedshiftClientTypes.ScheduledActionState?
    let nextInvocations: [ClientRuntime.Date]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
}

extension CreateScheduledActionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case nextInvocations = "NextInvocations"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case state = "State"
        case targetAction = "TargetAction"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateScheduledActionResult"))
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionType.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let scheduledActionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionDescription)
        scheduledActionDescription = scheduledActionDescriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionState.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.nextInvocations) {
            struct KeyVal0{struct ScheduledActionTime{}}
            let nextInvocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduledActionTime>.CodingKeys.self, forKey: .nextInvocations)
            if let nextInvocationsWrappedContainer = nextInvocationsWrappedContainer {
                let nextInvocationsContainer = try nextInvocationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nextInvocationsBuffer:[ClientRuntime.Date]? = nil
                if let nextInvocationsContainer = nextInvocationsContainer {
                    nextInvocationsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in nextInvocationsContainer {
                        try nextInvocationsBuffer?.append(nextInvocationsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                nextInvocations = nextInvocationsBuffer
            } else {
                nextInvocations = []
            }
        } else {
            nextInvocations = nil
        }
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

enum CreateScheduledActionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidScheduledAction": return try await InvalidScheduledActionFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidSchedule": return try await InvalidScheduleFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ScheduledActionAlreadyExists": return try await ScheduledActionAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ScheduledActionQuotaExceeded": return try await ScheduledActionQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ScheduledActionTypeUnsupported": return try await ScheduledActionTypeUnsupportedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateSnapshotCopyGrantInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateSnapshotCopyGrant", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateSnapshotCopyGrantInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The result of the CreateSnapshotCopyGrant action.
public struct CreateSnapshotCopyGrantInput: Swift.Equatable {
    /// The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
    public var kmsKeyId: Swift.String?
    /// The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    /// This member is required.
    public var snapshotCopyGrantName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        kmsKeyId: Swift.String? = nil,
        snapshotCopyGrantName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.snapshotCopyGrantName = snapshotCopyGrantName
        self.tags = tags
    }
}

struct CreateSnapshotCopyGrantInputBody: Swift.Equatable {
    let snapshotCopyGrantName: Swift.String?
    let kmsKeyId: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateSnapshotCopyGrantInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateSnapshotCopyGrantOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateSnapshotCopyGrantOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshotCopyGrant = output.snapshotCopyGrant
        } else {
            self.snapshotCopyGrant = nil
        }
    }
}

public struct CreateSnapshotCopyGrantOutput: Swift.Equatable {
    /// The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region. For more information about managing snapshot copy grants, go to [Amazon Redshift Database Encryption](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html) in the Amazon Redshift Cluster Management Guide.
    public var snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant?

    public init(
        snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant? = nil
    )
    {
        self.snapshotCopyGrant = snapshotCopyGrant
    }
}

struct CreateSnapshotCopyGrantOutputBody: Swift.Equatable {
    let snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant?
}

extension CreateSnapshotCopyGrantOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotCopyGrant = "SnapshotCopyGrant"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateSnapshotCopyGrantResult"))
        let snapshotCopyGrantDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.SnapshotCopyGrant.self, forKey: .snapshotCopyGrant)
        snapshotCopyGrant = snapshotCopyGrantDecoded
    }
}

enum CreateSnapshotCopyGrantOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyGrantAlreadyExistsFault": return try await SnapshotCopyGrantAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyGrantQuotaExceededFault": return try await SnapshotCopyGrantQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateSnapshotScheduleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dryRun = dryRun {
            try container.encode(dryRun, forKey: ClientRuntime.Key("DryRun"))
        }
        if let nextInvocations = nextInvocations {
            try container.encode(nextInvocations, forKey: ClientRuntime.Key("NextInvocations"))
        }
        if let scheduleDefinitions = scheduleDefinitions {
            if !scheduleDefinitions.isEmpty {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                for (index0, string0) in scheduleDefinitions.enumerated() {
                    try scheduleDefinitionsContainer.encode(string0, forKey: ClientRuntime.Key("ScheduleDefinition.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                try scheduleDefinitionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleDescription = scheduleDescription {
            try container.encode(scheduleDescription, forKey: ClientRuntime.Key("ScheduleDescription"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateSnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateSnapshotScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateSnapshotScheduleInput: Swift.Equatable {
    ///
    public var dryRun: Swift.Bool?
    ///
    public var nextInvocations: Swift.Int?
    /// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)".
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the snapshot schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags you can use to search for the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        dryRun: Swift.Bool? = nil,
        nextInvocations: Swift.Int? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.dryRun = dryRun
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

struct CreateSnapshotScheduleInputBody: Swift.Equatable {
    let scheduleDefinitions: [Swift.String]?
    let scheduleIdentifier: Swift.String?
    let scheduleDescription: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
    let dryRun: Swift.Bool?
    let nextInvocations: Swift.Int?
}

extension CreateSnapshotScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dryRun = "DryRun"
        case nextInvocations = "NextInvocations"
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleDescription = "ScheduleDescription"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.scheduleDefinitions) {
            struct KeyVal0{struct ScheduleDefinition{}}
            let scheduleDefinitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduleDefinition>.CodingKeys.self, forKey: .scheduleDefinitions)
            if let scheduleDefinitionsWrappedContainer = scheduleDefinitionsWrappedContainer {
                let scheduleDefinitionsContainer = try scheduleDefinitionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduleDefinitionsBuffer:[Swift.String]? = nil
                if let scheduleDefinitionsContainer = scheduleDefinitionsContainer {
                    scheduleDefinitionsBuffer = [Swift.String]()
                    for stringContainer0 in scheduleDefinitionsContainer {
                        scheduleDefinitionsBuffer?.append(stringContainer0)
                    }
                }
                scheduleDefinitions = scheduleDefinitionsBuffer
            } else {
                scheduleDefinitions = []
            }
        } else {
            scheduleDefinitions = nil
        }
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        let scheduleDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleDescription)
        scheduleDescription = scheduleDescriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun)
        dryRun = dryRunDecoded
        let nextInvocationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nextInvocations)
        nextInvocations = nextInvocationsDecoded
    }
}

extension CreateSnapshotScheduleOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateSnapshotScheduleOutputBody = try responseDecoder.decode(responseBody: data)
            self.associatedClusterCount = output.associatedClusterCount
            self.associatedClusters = output.associatedClusters
            self.nextInvocations = output.nextInvocations
            self.scheduleDefinitions = output.scheduleDefinitions
            self.scheduleDescription = output.scheduleDescription
            self.scheduleIdentifier = output.scheduleIdentifier
            self.tags = output.tags
        } else {
            self.associatedClusterCount = nil
            self.associatedClusters = nil
            self.nextInvocations = nil
            self.scheduleDefinitions = nil
            self.scheduleDescription = nil
            self.scheduleIdentifier = nil
            self.tags = nil
        }
    }
}

/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
public struct CreateSnapshotScheduleOutput: Swift.Equatable {
    /// The number of clusters associated with the schedule.
    public var associatedClusterCount: Swift.Int?
    /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
    public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
    ///
    public var nextInvocations: [ClientRuntime.Date]?
    /// A list of ScheduleDefinitions.
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for the schedule.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags describing the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        associatedClusterCount: Swift.Int? = nil,
        associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.associatedClusterCount = associatedClusterCount
        self.associatedClusters = associatedClusters
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

struct CreateSnapshotScheduleOutputBody: Swift.Equatable {
    let scheduleDefinitions: [Swift.String]?
    let scheduleIdentifier: Swift.String?
    let scheduleDescription: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
    let nextInvocations: [ClientRuntime.Date]?
    let associatedClusterCount: Swift.Int?
    let associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
}

extension CreateSnapshotScheduleOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedClusterCount = "AssociatedClusterCount"
        case associatedClusters = "AssociatedClusters"
        case nextInvocations = "NextInvocations"
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleDescription = "ScheduleDescription"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateSnapshotScheduleResult"))
        if containerValues.contains(.scheduleDefinitions) {
            struct KeyVal0{struct ScheduleDefinition{}}
            let scheduleDefinitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduleDefinition>.CodingKeys.self, forKey: .scheduleDefinitions)
            if let scheduleDefinitionsWrappedContainer = scheduleDefinitionsWrappedContainer {
                let scheduleDefinitionsContainer = try scheduleDefinitionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduleDefinitionsBuffer:[Swift.String]? = nil
                if let scheduleDefinitionsContainer = scheduleDefinitionsContainer {
                    scheduleDefinitionsBuffer = [Swift.String]()
                    for stringContainer0 in scheduleDefinitionsContainer {
                        scheduleDefinitionsBuffer?.append(stringContainer0)
                    }
                }
                scheduleDefinitions = scheduleDefinitionsBuffer
            } else {
                scheduleDefinitions = []
            }
        } else {
            scheduleDefinitions = nil
        }
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        let scheduleDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleDescription)
        scheduleDescription = scheduleDescriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.nextInvocations) {
            struct KeyVal0{struct SnapshotTime{}}
            let nextInvocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotTime>.CodingKeys.self, forKey: .nextInvocations)
            if let nextInvocationsWrappedContainer = nextInvocationsWrappedContainer {
                let nextInvocationsContainer = try nextInvocationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nextInvocationsBuffer:[ClientRuntime.Date]? = nil
                if let nextInvocationsContainer = nextInvocationsContainer {
                    nextInvocationsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in nextInvocationsContainer {
                        try nextInvocationsBuffer?.append(nextInvocationsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                nextInvocations = nextInvocationsBuffer
            } else {
                nextInvocations = []
            }
        } else {
            nextInvocations = nil
        }
        let associatedClusterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .associatedClusterCount)
        associatedClusterCount = associatedClusterCountDecoded
        if containerValues.contains(.associatedClusters) {
            struct KeyVal0{struct ClusterAssociatedToSchedule{}}
            let associatedClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterAssociatedToSchedule>.CodingKeys.self, forKey: .associatedClusters)
            if let associatedClustersWrappedContainer = associatedClustersWrappedContainer {
                let associatedClustersContainer = try associatedClustersWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterAssociatedToSchedule].self, forKey: .member)
                var associatedClustersBuffer:[RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil
                if let associatedClustersContainer = associatedClustersContainer {
                    associatedClustersBuffer = [RedshiftClientTypes.ClusterAssociatedToSchedule]()
                    for structureContainer0 in associatedClustersContainer {
                        associatedClustersBuffer?.append(structureContainer0)
                    }
                }
                associatedClusters = associatedClustersBuffer
            } else {
                associatedClusters = []
            }
        } else {
            associatedClusters = nil
        }
    }
}

enum CreateSnapshotScheduleOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidSchedule": return try await InvalidScheduleFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ScheduleDefinitionTypeUnsupported": return try await ScheduleDefinitionTypeUnsupportedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleAlreadyExists": return try await SnapshotScheduleAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleQuotaExceeded": return try await SnapshotScheduleQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Contains the output from the CreateTags action.
public struct CreateTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    /// This member is required.
    public var resourceName: Swift.String?
    /// One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter Key and the corresponding value is passed in with the parameter Value. The Key and Value parameters are separated by a comma (,). Separate multiple tags with a space. For example, --tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0".
    /// This member is required.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        resourceName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

struct CreateTagsInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateTagsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CreateTagsOutput: Swift.Equatable {

    public init() { }
}

enum CreateTagsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResourceNotFoundFault": return try await ResourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CreateUsageLimitInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amount = amount {
            try container.encode(amount, forKey: ClientRuntime.Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: ClientRuntime.Key("BreachAction"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: ClientRuntime.Key("FeatureType"))
        }
        if let limitType = limitType {
            try container.encode(limitType, forKey: ClientRuntime.Key("LimitType"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateUsageLimit", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateUsageLimitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUsageLimitInput: Swift.Equatable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
    /// This member is required.
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. The default is log. For more information about this parameter, see [UsageLimit].
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster that you want to limit usage.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature that you want to limit.
    /// This member is required.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned.
    /// This member is required.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
    }
}

struct CreateUsageLimitInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let featureType: RedshiftClientTypes.UsageLimitFeatureType?
    let limitType: RedshiftClientTypes.UsageLimitLimitType?
    let amount: Swift.Int?
    let period: RedshiftClientTypes.UsageLimitPeriod?
    let breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateUsageLimitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitFeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
        let limitTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitLimitType.self, forKey: .limitType)
        limitType = limitTypeDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CreateUsageLimitOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateUsageLimitOutputBody = try responseDecoder.decode(responseBody: data)
            self.amount = output.amount
            self.breachAction = output.breachAction
            self.clusterIdentifier = output.clusterIdentifier
            self.featureType = output.featureType
            self.limitType = output.limitType
            self.period = output.period
            self.tags = output.tags
            self.usageLimitId = output.usageLimitId
        } else {
            self.amount = nil
            self.breachAction = nil
            self.clusterIdentifier = nil
            self.featureType = nil
            self.limitType = nil
            self.period = nil
            self.tags = nil
            self.usageLimitId = nil
        }
    }
}

/// Describes a usage limit object for a cluster.
public struct CreateUsageLimitOutput: Swift.Equatable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
    ///
    /// * log - To log an event in a system table. The default is log.
    ///
    /// * emit-metric - To emit CloudWatch metrics.
    ///
    /// * disable - To disable the feature until the next usage period begins.
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster with a usage limit.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature to which the limit applies.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The identifier of the usage limit.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
        self.usageLimitId = usageLimitId
    }
}

struct CreateUsageLimitOutputBody: Swift.Equatable {
    let usageLimitId: Swift.String?
    let clusterIdentifier: Swift.String?
    let featureType: RedshiftClientTypes.UsageLimitFeatureType?
    let limitType: RedshiftClientTypes.UsageLimitLimitType?
    let amount: Swift.Int?
    let period: RedshiftClientTypes.UsageLimitPeriod?
    let breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    let tags: [RedshiftClientTypes.Tag]?
}

extension CreateUsageLimitOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
        case usageLimitId = "UsageLimitId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateUsageLimitResult"))
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitFeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
        let limitTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitLimitType.self, forKey: .limitType)
        limitType = limitTypeDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

enum CreateUsageLimitOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidUsageLimit": return try await InvalidUsageLimitFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UsageLimitAlreadyExists": return try await UsageLimitAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension CustomCnameAssociationFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CustomCnameAssociationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An error occurred when an attempt was made to change the custom domain association.
public struct CustomCnameAssociationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomCnameAssociationFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct CustomCnameAssociationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomCnameAssociationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CustomDomainAssociationNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CustomDomainAssociationNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An error occurred. The custom domain name couldn't be found.
public struct CustomDomainAssociationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomDomainAssociationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct CustomDomainAssociationNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CustomDomainAssociationNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.DataShare: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers {
            try container.encode(allowPubliclyAccessibleConsumers, forKey: ClientRuntime.Key("AllowPubliclyAccessibleConsumers"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        if let dataShareAssociations = dataShareAssociations {
            if !dataShareAssociations.isEmpty {
                var dataShareAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DataShareAssociations"))
                for (index0, datashareassociation0) in dataShareAssociations.enumerated() {
                    try dataShareAssociationsContainer.encode(datashareassociation0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dataShareAssociationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DataShareAssociations"))
                try dataShareAssociationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let managedBy = managedBy {
            try container.encode(managedBy, forKey: ClientRuntime.Key("ManagedBy"))
        }
        if let producerArn = producerArn {
            try container.encode(producerArn, forKey: ClientRuntime.Key("ProducerArn"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}

extension RedshiftClientTypes {
    public struct DataShare: Swift.Equatable {
        /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
        public var allowPubliclyAccessibleConsumers: Swift.Bool?
        /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
        public var dataShareArn: Swift.String?
        /// A value that specifies when the datashare has an association between producer and data consumers.
        public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
        /// The identifier of a datashare to show its managing entity.
        public var managedBy: Swift.String?
        /// The Amazon Resource Name (ARN) of the producer.
        public var producerArn: Swift.String?

        public init(
            allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
            dataShareArn: Swift.String? = nil,
            dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
            managedBy: Swift.String? = nil,
            producerArn: Swift.String? = nil
        )
        {
            self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
            self.dataShareArn = dataShareArn
            self.dataShareAssociations = dataShareAssociations
            self.managedBy = managedBy
            self.producerArn = producerArn
        }
    }

}

extension RedshiftClientTypes.DataShareAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerAcceptedWrites = "ConsumerAcceptedWrites"
        case consumerIdentifier = "ConsumerIdentifier"
        case consumerRegion = "ConsumerRegion"
        case createdDate = "CreatedDate"
        case producerAllowedWrites = "ProducerAllowedWrites"
        case status = "Status"
        case statusChangeDate = "StatusChangeDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerAcceptedWrites = consumerAcceptedWrites {
            try container.encode(consumerAcceptedWrites, forKey: ClientRuntime.Key("ConsumerAcceptedWrites"))
        }
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let createdDate = createdDate {
            try container.encodeTimestamp(createdDate, format: .dateTime, forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let producerAllowedWrites = producerAllowedWrites {
            try container.encode(producerAllowedWrites, forKey: ClientRuntime.Key("ProducerAllowedWrites"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusChangeDate = statusChangeDate {
            try container.encodeTimestamp(statusChangeDate, format: .dateTime, forKey: ClientRuntime.Key("StatusChangeDate"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerIdentifier)
        consumerIdentifier = consumerIdentifierDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.DataShareStatus.self, forKey: .status)
        status = statusDecoded
        let consumerRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerRegion)
        consumerRegion = consumerRegionDecoded
        let createdDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdDate)
        createdDate = createdDateDecoded
        let statusChangeDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .statusChangeDate)
        statusChangeDate = statusChangeDateDecoded
        let producerAllowedWritesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .producerAllowedWrites)
        producerAllowedWrites = producerAllowedWritesDecoded
        let consumerAcceptedWritesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consumerAcceptedWrites)
        consumerAcceptedWrites = consumerAcceptedWritesDecoded
    }
}

extension RedshiftClientTypes {
    /// The association of a datashare from a producer account with a data consumer.
    public struct DataShareAssociation: Swift.Equatable {
        /// Specifies whether write operations were allowed during data share association.
        public var consumerAcceptedWrites: Swift.Bool?
        /// The name of the consumer accounts that have an association with a producer datashare.
        public var consumerIdentifier: Swift.String?
        /// The Amazon Web Services Region of the consumer accounts that have an association with a producer datashare.
        public var consumerRegion: Swift.String?
        /// The creation date of the datashare that is associated.
        public var createdDate: ClientRuntime.Date?
        /// Specifies whether write operations were allowed during data share authorization.
        public var producerAllowedWrites: Swift.Bool?
        /// The status of the datashare that is associated.
        public var status: RedshiftClientTypes.DataShareStatus?
        /// The status change data of the datashare that is associated.
        public var statusChangeDate: ClientRuntime.Date?

        public init(
            consumerAcceptedWrites: Swift.Bool? = nil,
            consumerIdentifier: Swift.String? = nil,
            consumerRegion: Swift.String? = nil,
            createdDate: ClientRuntime.Date? = nil,
            producerAllowedWrites: Swift.Bool? = nil,
            status: RedshiftClientTypes.DataShareStatus? = nil,
            statusChangeDate: ClientRuntime.Date? = nil
        )
        {
            self.consumerAcceptedWrites = consumerAcceptedWrites
            self.consumerIdentifier = consumerIdentifier
            self.consumerRegion = consumerRegion
            self.createdDate = createdDate
            self.producerAllowedWrites = producerAllowedWrites
            self.status = status
            self.statusChangeDate = statusChangeDate
        }
    }

}

extension RedshiftClientTypes {
    public enum DataShareStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case authorized
        case available
        case deauthorized
        case pendingAuthorization
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatus] {
            return [
                .active,
                .authorized,
                .available,
                .deauthorized,
                .pendingAuthorization,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .authorized: return "AUTHORIZED"
            case .available: return "AVAILABLE"
            case .deauthorized: return "DEAUTHORIZED"
            case .pendingAuthorization: return "PENDING_AUTHORIZATION"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataShareStatus(rawValue: rawValue) ?? DataShareStatus.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum DataShareStatusForConsumer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case available
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatusForConsumer] {
            return [
                .active,
                .available,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .available: return "AVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataShareStatusForConsumer(rawValue: rawValue) ?? DataShareStatusForConsumer.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum DataShareStatusForProducer: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case authorized
        case deauthorized
        case pendingAuthorization
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatusForProducer] {
            return [
                .active,
                .authorized,
                .deauthorized,
                .pendingAuthorization,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .authorized: return "AUTHORIZED"
            case .deauthorized: return "DEAUTHORIZED"
            case .pendingAuthorization: return "PENDING_AUTHORIZATION"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataShareStatusForProducer(rawValue: rawValue) ?? DataShareStatusForProducer.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.DataTransferProgress: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentRateInMegaBytesPerSecond = "CurrentRateInMegaBytesPerSecond"
        case dataTransferredInMegaBytes = "DataTransferredInMegaBytes"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case status = "Status"
        case totalDataInMegaBytes = "TotalDataInMegaBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond {
            try container.encode(currentRateInMegaBytesPerSecond, forKey: ClientRuntime.Key("CurrentRateInMegaBytesPerSecond"))
        }
        if let dataTransferredInMegaBytes = dataTransferredInMegaBytes {
            try container.encode(dataTransferredInMegaBytes, forKey: ClientRuntime.Key("DataTransferredInMegaBytes"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: ClientRuntime.Key("ElapsedTimeInSeconds"))
        }
        if let estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds {
            try container.encode(estimatedTimeToCompletionInSeconds, forKey: ClientRuntime.Key("EstimatedTimeToCompletionInSeconds"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let totalDataInMegaBytes = totalDataInMegaBytes {
            try container.encode(totalDataInMegaBytes, forKey: ClientRuntime.Key("TotalDataInMegaBytes"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let currentRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .currentRateInMegaBytesPerSecond)
        currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecondDecoded
        let totalDataInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalDataInMegaBytes)
        totalDataInMegaBytes = totalDataInMegaBytesDecoded
        let dataTransferredInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataTransferredInMegaBytes)
        dataTransferredInMegaBytes = dataTransferredInMegaBytesDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a cluster while it is in the process of resizing with an incremental resize.
    public struct DataTransferProgress: Swift.Equatable {
        /// Describes the data transfer rate in MB's per second.
        public var currentRateInMegaBytesPerSecond: Swift.Double?
        /// Describes the total amount of data that has been transfered in MB's.
        public var dataTransferredInMegaBytes: Swift.Int?
        /// Describes the number of seconds that have elapsed during the data transfer.
        public var elapsedTimeInSeconds: Swift.Int?
        /// Describes the estimated number of seconds remaining to complete the transfer.
        public var estimatedTimeToCompletionInSeconds: Swift.Int?
        /// Describes the status of the cluster. While the transfer is in progress the status is transferringdata.
        public var status: Swift.String?
        /// Describes the total amount of data to be transfered in megabytes.
        public var totalDataInMegaBytes: Swift.Int?

        public init(
            currentRateInMegaBytesPerSecond: Swift.Double? = nil,
            dataTransferredInMegaBytes: Swift.Int? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
            status: Swift.String? = nil,
            totalDataInMegaBytes: Swift.Int? = nil
        )
        {
            self.currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond
            self.dataTransferredInMegaBytes = dataTransferredInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.status = status
            self.totalDataInMegaBytes = totalDataInMegaBytes
        }
    }

}

extension DeauthorizeDataShareInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("DeauthorizeDataShare", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeauthorizeDataShareInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeauthorizeDataShareInput: Swift.Equatable {
    /// The identifier of the data consumer that is to have authorization removed from the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
    /// This member is required.
    public var consumerIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare to remove authorization from.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        consumerIdentifier: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.consumerIdentifier = consumerIdentifier
        self.dataShareArn = dataShareArn
    }
}

struct DeauthorizeDataShareInputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let consumerIdentifier: Swift.String?
}

extension DeauthorizeDataShareInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerIdentifier = "ConsumerIdentifier"
        case dataShareArn = "DataShareArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let consumerIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerIdentifier)
        consumerIdentifier = consumerIdentifierDecoded
    }
}

extension DeauthorizeDataShareOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeauthorizeDataShareOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowPubliclyAccessibleConsumers = output.allowPubliclyAccessibleConsumers
            self.dataShareArn = output.dataShareArn
            self.dataShareAssociations = output.dataShareAssociations
            self.managedBy = output.managedBy
            self.producerArn = output.producerArn
        } else {
            self.allowPubliclyAccessibleConsumers = nil
            self.dataShareArn = nil
            self.dataShareAssociations = nil
            self.managedBy = nil
            self.producerArn = nil
        }
    }
}

public struct DeauthorizeDataShareOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

struct DeauthorizeDataShareOutputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let producerArn: Swift.String?
    let allowPubliclyAccessibleConsumers: Swift.Bool?
    let dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    let managedBy: Swift.String?
}

extension DeauthorizeDataShareOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeauthorizeDataShareResult"))
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}

enum DeauthorizeDataShareOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidDataShareFault": return try await InvalidDataShareFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.DefaultClusterParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case parameterGroupFamily = "ParameterGroupFamily"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupFamily)
        parameterGroupFamily = parameterGroupFamilyDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([RedshiftClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[RedshiftClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [RedshiftClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes the default cluster parameters for a parameter group family.
    public struct DefaultClusterParameters: Swift.Equatable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
        public var marker: Swift.String?
        /// The name of the cluster parameter group family to which the engine default parameters apply.
        public var parameterGroupFamily: Swift.String?
        /// The list of cluster default parameters.
        public var parameters: [RedshiftClientTypes.Parameter]?

        public init(
            marker: Swift.String? = nil,
            parameterGroupFamily: Swift.String? = nil,
            parameters: [RedshiftClientTypes.Parameter]? = nil
        )
        {
            self.marker = marker
            self.parameterGroupFamily = parameterGroupFamily
            self.parameters = parameters
        }
    }

}

extension RedshiftClientTypes.DeferredMaintenanceWindow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deferMaintenanceEndTime = deferMaintenanceEndTime {
            try container.encodeTimestamp(deferMaintenanceEndTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceEndTime"))
        }
        if let deferMaintenanceIdentifier = deferMaintenanceIdentifier {
            try container.encode(deferMaintenanceIdentifier, forKey: ClientRuntime.Key("DeferMaintenanceIdentifier"))
        }
        if let deferMaintenanceStartTime = deferMaintenanceStartTime {
            try container.encodeTimestamp(deferMaintenanceStartTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceStartTime"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deferMaintenanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceIdentifier)
        deferMaintenanceIdentifier = deferMaintenanceIdentifierDecoded
        let deferMaintenanceStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deferMaintenanceStartTime)
        deferMaintenanceStartTime = deferMaintenanceStartTimeDecoded
        let deferMaintenanceEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deferMaintenanceEndTime)
        deferMaintenanceEndTime = deferMaintenanceEndTimeDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a deferred maintenance window
    public struct DeferredMaintenanceWindow: Swift.Equatable {
        /// A timestamp for the end of the time period when we defer maintenance.
        public var deferMaintenanceEndTime: ClientRuntime.Date?
        /// A unique identifier for the maintenance window.
        public var deferMaintenanceIdentifier: Swift.String?
        /// A timestamp for the beginning of the time period when we defer maintenance.
        public var deferMaintenanceStartTime: ClientRuntime.Date?

        public init(
            deferMaintenanceEndTime: ClientRuntime.Date? = nil,
            deferMaintenanceIdentifier: Swift.String? = nil,
            deferMaintenanceStartTime: ClientRuntime.Date? = nil
        )
        {
            self.deferMaintenanceEndTime = deferMaintenanceEndTime
            self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
            self.deferMaintenanceStartTime = deferMaintenanceStartTime
        }
    }

}

extension DeleteAuthenticationProfileInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("DeleteAuthenticationProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAuthenticationProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAuthenticationProfileInput: Swift.Equatable {
    /// The name of the authentication profile to delete.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

struct DeleteAuthenticationProfileInputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
}

extension DeleteAuthenticationProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
    }
}

extension DeleteAuthenticationProfileOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteAuthenticationProfileOutputBody = try responseDecoder.decode(responseBody: data)
            self.authenticationProfileName = output.authenticationProfileName
        } else {
            self.authenticationProfileName = nil
        }
    }
}

public struct DeleteAuthenticationProfileOutput: Swift.Equatable {
    /// The name of the authentication profile that was deleted.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

struct DeleteAuthenticationProfileOutputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
}

extension DeleteAuthenticationProfileOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteAuthenticationProfileResult"))
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
    }
}

enum DeleteAuthenticationProfileOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthenticationProfileNotFoundFault": return try await AuthenticationProfileNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier {
            try container.encode(finalClusterSnapshotIdentifier, forKey: ClientRuntime.Key("FinalClusterSnapshotIdentifier"))
        }
        if let finalClusterSnapshotRetentionPeriod = finalClusterSnapshotRetentionPeriod {
            try container.encode(finalClusterSnapshotRetentionPeriod, forKey: ClientRuntime.Key("FinalClusterSnapshotRetentionPeriod"))
        }
        if let skipFinalClusterSnapshot = skipFinalClusterSnapshot {
            try container.encode(skipFinalClusterSnapshot, forKey: ClientRuntime.Key("SkipFinalClusterSnapshot"))
        }
        try container.encode("DeleteCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterInput: Swift.Equatable {
    /// The identifier of the cluster to be deleted. Constraints:
    ///
    /// * Must contain lowercase characters.
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, SkipFinalClusterSnapshot must be false. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var finalClusterSnapshotIdentifier: Swift.String?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var finalClusterSnapshotRetentionPeriod: Swift.Int?
    /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is not created. If false, a final cluster snapshot is created before the cluster is deleted. The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot is false. Default: false
    public var skipFinalClusterSnapshot: Swift.Bool?

    public init(
        clusterIdentifier: Swift.String? = nil,
        finalClusterSnapshotIdentifier: Swift.String? = nil,
        finalClusterSnapshotRetentionPeriod: Swift.Int? = nil,
        skipFinalClusterSnapshot: Swift.Bool? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier
        self.finalClusterSnapshotRetentionPeriod = finalClusterSnapshotRetentionPeriod
        self.skipFinalClusterSnapshot = skipFinalClusterSnapshot
    }
}

struct DeleteClusterInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let skipFinalClusterSnapshot: Swift.Bool?
    let finalClusterSnapshotIdentifier: Swift.String?
    let finalClusterSnapshotRetentionPeriod: Swift.Int?
}

extension DeleteClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case finalClusterSnapshotIdentifier = "FinalClusterSnapshotIdentifier"
        case finalClusterSnapshotRetentionPeriod = "FinalClusterSnapshotRetentionPeriod"
        case skipFinalClusterSnapshot = "SkipFinalClusterSnapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let skipFinalClusterSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalClusterSnapshot)
        skipFinalClusterSnapshot = skipFinalClusterSnapshotDecoded
        let finalClusterSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalClusterSnapshotIdentifier)
        finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifierDecoded
        let finalClusterSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .finalClusterSnapshotRetentionPeriod)
        finalClusterSnapshotRetentionPeriod = finalClusterSnapshotRetentionPeriodDecoded
    }
}

extension DeleteClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DeleteClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DeleteClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension DeleteClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum DeleteClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotAlreadyExists": return try await ClusterSnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotQuotaExceeded": return try await ClusterSnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteClusterParameterGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        try container.encode("DeleteClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterParameterGroupInput: Swift.Equatable {
    /// The name of the parameter group to be deleted. Constraints:
    ///
    /// * Must be the name of an existing cluster parameter group.
    ///
    /// * Cannot delete a default cluster parameter group.
    /// This member is required.
    public var parameterGroupName: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
    }
}

struct DeleteClusterParameterGroupInputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
}

extension DeleteClusterParameterGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
    }
}

extension DeleteClusterParameterGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteClusterParameterGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteClusterParameterGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterParameterGroupState": return try await InvalidClusterParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteClusterSecurityGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        try container.encode("DeleteClusterSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterSecurityGroupInput: Swift.Equatable {
    /// The name of the cluster security group to be deleted.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?

    public init(
        clusterSecurityGroupName: Swift.String? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
    }
}

struct DeleteClusterSecurityGroupInputBody: Swift.Equatable {
    let clusterSecurityGroupName: Swift.String?
}

extension DeleteClusterSecurityGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
    }
}

extension DeleteClusterSecurityGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteClusterSecurityGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteClusterSecurityGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteClusterSnapshotInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("DeleteClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterSnapshotInput: Swift.Equatable {
    /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
    public var snapshotClusterIdentifier: Swift.String?
    /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available, failed, or cancelled state.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?

    public init(
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

struct DeleteClusterSnapshotInputBody: Swift.Equatable {
    let snapshotIdentifier: Swift.String?
    let snapshotClusterIdentifier: Swift.String?
}

extension DeleteClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotClusterIdentifier)
        snapshotClusterIdentifier = snapshotClusterIdentifierDecoded
    }
}

extension RedshiftClientTypes.DeleteClusterSnapshotMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotClusterIdentifier)
        snapshotClusterIdentifier = snapshotClusterIdentifierDecoded
    }
}

extension RedshiftClientTypes {
    ///
    public struct DeleteClusterSnapshotMessage: Swift.Equatable {
        /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
        public var snapshotClusterIdentifier: Swift.String?
        /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available, failed, or cancelled state.
        /// This member is required.
        public var snapshotIdentifier: Swift.String?

        public init(
            snapshotClusterIdentifier: Swift.String? = nil,
            snapshotIdentifier: Swift.String? = nil
        )
        {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }
    }

}

extension DeleteClusterSnapshotOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteClusterSnapshotOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct DeleteClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct DeleteClusterSnapshotOutputBody: Swift.Equatable {
    let snapshot: RedshiftClientTypes.Snapshot?
}

extension DeleteClusterSnapshotOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteClusterSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

enum DeleteClusterSnapshotOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteClusterSubnetGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        try container.encode("DeleteClusterSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteClusterSubnetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteClusterSubnetGroupInput: Swift.Equatable {
    /// The name of the cluster subnet group name to be deleted.
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?

    public init(
        clusterSubnetGroupName: Swift.String? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
    }
}

struct DeleteClusterSubnetGroupInputBody: Swift.Equatable {
    let clusterSubnetGroupName: Swift.String?
}

extension DeleteClusterSubnetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
    }
}

extension DeleteClusterSubnetGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteClusterSubnetGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteClusterSubnetGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSubnetGroupStateFault": return try await InvalidClusterSubnetGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSubnetStateFault": return try await InvalidClusterSubnetStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteCustomDomainAssociationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        try container.encode("DeleteCustomDomainAssociation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCustomDomainAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteCustomDomainAssociationInput: Swift.Equatable {
    /// The identifier of the cluster to delete a custom domain association for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
    }
}

struct DeleteCustomDomainAssociationInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let customDomainName: Swift.String?
}

extension DeleteCustomDomainAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
    }
}

extension DeleteCustomDomainAssociationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteCustomDomainAssociationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteCustomDomainAssociationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CustomDomainAssociationNotFoundFault": return try await CustomDomainAssociationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteEndpointAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        try container.encode("DeleteEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteEndpointAccessInput: Swift.Equatable {
    /// The Redshift-managed VPC endpoint to delete.
    /// This member is required.
    public var endpointName: Swift.String?

    public init(
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

struct DeleteEndpointAccessInputBody: Swift.Equatable {
    let endpointName: Swift.String?
}

extension DeleteEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
    }
}

extension DeleteEndpointAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteEndpointAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.address = output.address
            self.clusterIdentifier = output.clusterIdentifier
            self.endpointCreateTime = output.endpointCreateTime
            self.endpointName = output.endpointName
            self.endpointStatus = output.endpointStatus
            self.port = output.port
            self.resourceOwner = output.resourceOwner
            self.subnetGroupName = output.subnetGroupName
            self.vpcEndpoint = output.vpcEndpoint
            self.vpcSecurityGroups = output.vpcSecurityGroups
        } else {
            self.address = nil
            self.clusterIdentifier = nil
            self.endpointCreateTime = nil
            self.endpointName = nil
            self.endpointStatus = nil
            self.port = nil
            self.resourceOwner = nil
            self.subnetGroupName = nil
            self.vpcEndpoint = nil
            self.vpcSecurityGroups = nil
        }
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct DeleteEndpointAccessOutput: Swift.Equatable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: ClientRuntime.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

struct DeleteEndpointAccessOutputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let resourceOwner: Swift.String?
    let subnetGroupName: Swift.String?
    let endpointStatus: Swift.String?
    let endpointName: Swift.String?
    let endpointCreateTime: ClientRuntime.Date?
    let port: Swift.Int?
    let address: Swift.String?
    let vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?
    let vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
}

extension DeleteEndpointAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case clusterIdentifier = "ClusterIdentifier"
        case endpointCreateTime = "EndpointCreateTime"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case port = "Port"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcEndpoint = "VpcEndpoint"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteEndpointAccessResult"))
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endpointCreateTime)
        endpointCreateTime = endpointCreateTimeDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [RedshiftClientTypes.VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

enum DeleteEndpointAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointNotFound": return try await EndpointNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidEndpointState": return try await InvalidEndpointStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteEventSubscriptionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("DeleteEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteEventSubscriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteEventSubscriptionInput: Swift.Equatable {
    /// The name of the Amazon Redshift event notification subscription to be deleted.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        subscriptionName: Swift.String? = nil
    )
    {
        self.subscriptionName = subscriptionName
    }
}

struct DeleteEventSubscriptionInputBody: Swift.Equatable {
    let subscriptionName: Swift.String?
}

extension DeleteEventSubscriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subscriptionName = "SubscriptionName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionName)
        subscriptionName = subscriptionNameDecoded
    }
}

extension DeleteEventSubscriptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteEventSubscriptionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteEventSubscriptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidSubscriptionStateFault": return try await InvalidSubscriptionStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionNotFound": return try await SubscriptionNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteHsmClientCertificateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        try container.encode("DeleteHsmClientCertificate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteHsmClientCertificateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteHsmClientCertificateInput: Swift.Equatable {
    /// The identifier of the HSM client certificate to be deleted.
    /// This member is required.
    public var hsmClientCertificateIdentifier: Swift.String?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
    }
}

struct DeleteHsmClientCertificateInputBody: Swift.Equatable {
    let hsmClientCertificateIdentifier: Swift.String?
}

extension DeleteHsmClientCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
    }
}

extension DeleteHsmClientCertificateOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteHsmClientCertificateOutput: Swift.Equatable {

    public init() { }
}

enum DeleteHsmClientCertificateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidHsmClientCertificateStateFault": return try await InvalidHsmClientCertificateStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteHsmConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        try container.encode("DeleteHsmConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteHsmConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DeleteHsmConfigurationInput: Swift.Equatable {
    /// The identifier of the Amazon Redshift HSM configuration to be deleted.
    /// This member is required.
    public var hsmConfigurationIdentifier: Swift.String?

    public init(
        hsmConfigurationIdentifier: Swift.String? = nil
    )
    {
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
    }
}

struct DeleteHsmConfigurationInputBody: Swift.Equatable {
    let hsmConfigurationIdentifier: Swift.String?
}

extension DeleteHsmConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
    }
}

extension DeleteHsmConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteHsmConfigurationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteHsmConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidHsmConfigurationStateFault": return try await InvalidHsmConfigurationStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeletePartnerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        try container.encode("DeletePartner", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeletePartnerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePartnerInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster that receives data from the partner.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database that receives data from the partner.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    /// This member is required.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

struct DeletePartnerInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let clusterIdentifier: Swift.String?
    let databaseName: Swift.String?
    let partnerName: Swift.String?
}

extension DeletePartnerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
    }
}

extension DeletePartnerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeletePartnerOutputBody = try responseDecoder.decode(responseBody: data)
            self.databaseName = output.databaseName
            self.partnerName = output.partnerName
        } else {
            self.databaseName = nil
            self.partnerName = nil
        }
    }
}

public struct DeletePartnerOutput: Swift.Equatable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

struct DeletePartnerOutputBody: Swift.Equatable {
    let databaseName: Swift.String?
    let partnerName: Swift.String?
}

extension DeletePartnerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeletePartnerResult"))
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
    }
}

enum DeletePartnerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "PartnerNotFound": return try await PartnerNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteRedshiftIdcApplicationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        try container.encode("DeleteRedshiftIdcApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteRedshiftIdcApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRedshiftIdcApplicationInput: Swift.Equatable {
    /// The ARN for a deleted Amazon Redshift IAM Identity Center application.
    /// This member is required.
    public var redshiftIdcApplicationArn: Swift.String?

    public init(
        redshiftIdcApplicationArn: Swift.String? = nil
    )
    {
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
    }
}

struct DeleteRedshiftIdcApplicationInputBody: Swift.Equatable {
    let redshiftIdcApplicationArn: Swift.String?
}

extension DeleteRedshiftIdcApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftIdcApplicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationArn)
        redshiftIdcApplicationArn = redshiftIdcApplicationArnDecoded
    }
}

extension DeleteRedshiftIdcApplicationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteRedshiftIdcApplicationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteRedshiftIdcApplicationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("DeleteResourcePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is deleted.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteResourcePolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ResourceNotFoundFault": return try await ResourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteScheduledActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        try container.encode("DeleteScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteScheduledActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteScheduledActionInput: Swift.Equatable {
    /// The name of the scheduled action to delete.
    /// This member is required.
    public var scheduledActionName: Swift.String?

    public init(
        scheduledActionName: Swift.String? = nil
    )
    {
        self.scheduledActionName = scheduledActionName
    }
}

struct DeleteScheduledActionInputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
}

extension DeleteScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledActionName = "ScheduledActionName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
    }
}

extension DeleteScheduledActionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteScheduledActionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteScheduledActionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ScheduledActionNotFound": return try await ScheduledActionNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteSnapshotCopyGrantInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        try container.encode("DeleteSnapshotCopyGrant", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSnapshotCopyGrantInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The result of the DeleteSnapshotCopyGrant action.
public struct DeleteSnapshotCopyGrantInput: Swift.Equatable {
    /// The name of the snapshot copy grant to delete.
    /// This member is required.
    public var snapshotCopyGrantName: Swift.String?

    public init(
        snapshotCopyGrantName: Swift.String? = nil
    )
    {
        self.snapshotCopyGrantName = snapshotCopyGrantName
    }
}

struct DeleteSnapshotCopyGrantInputBody: Swift.Equatable {
    let snapshotCopyGrantName: Swift.String?
}

extension DeleteSnapshotCopyGrantInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
    }
}

extension DeleteSnapshotCopyGrantOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteSnapshotCopyGrantOutput: Swift.Equatable {

    public init() { }
}

enum DeleteSnapshotCopyGrantOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidSnapshotCopyGrantStateFault": return try await InvalidSnapshotCopyGrantStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyGrantNotFoundFault": return try await SnapshotCopyGrantNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteSnapshotScheduleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        try container.encode("DeleteSnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSnapshotScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSnapshotScheduleInput: Swift.Equatable {
    /// A unique identifier of the snapshot schedule to delete.
    /// This member is required.
    public var scheduleIdentifier: Swift.String?

    public init(
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.scheduleIdentifier = scheduleIdentifier
    }
}

struct DeleteSnapshotScheduleInputBody: Swift.Equatable {
    let scheduleIdentifier: Swift.String?
}

extension DeleteSnapshotScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleIdentifier = "ScheduleIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
    }
}

extension DeleteSnapshotScheduleOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteSnapshotScheduleOutput: Swift.Equatable {

    public init() { }
}

enum DeleteSnapshotScheduleOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidClusterSnapshotScheduleState": return try await InvalidClusterSnapshotScheduleStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeleteTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Contains the output from the DeleteTags action.
public struct DeleteTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key that you want to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

struct DeleteTagsInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let tagKeys: [Swift.String]?
}

extension DeleteTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case tagKeys = "TagKeys"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
    }
}

extension DeleteTagsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteTagsOutput: Swift.Equatable {

    public init() { }
}

enum DeleteTagsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResourceNotFoundFault": return try await ResourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DeleteUsageLimitInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
        try container.encode("DeleteUsageLimit", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUsageLimitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUsageLimitInput: Swift.Equatable {
    /// The identifier of the usage limit to delete.
    /// This member is required.
    public var usageLimitId: Swift.String?

    public init(
        usageLimitId: Swift.String? = nil
    )
    {
        self.usageLimitId = usageLimitId
    }
}

struct DeleteUsageLimitInputBody: Swift.Equatable {
    let usageLimitId: Swift.String?
}

extension DeleteUsageLimitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case usageLimitId = "UsageLimitId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
    }
}

extension DeleteUsageLimitOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteUsageLimitOutput: Swift.Equatable {

    public init() { }
}

enum DeleteUsageLimitOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UsageLimitNotFound": return try await UsageLimitNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DependentServiceAccessDeniedFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<DependentServiceAccessDeniedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A dependent service denied access for the integration.
public struct DependentServiceAccessDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceAccessDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct DependentServiceAccessDeniedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DependentServiceAccessDeniedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DependentServiceRequestThrottlingFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<DependentServiceRequestThrottlingFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request cannot be completed because a dependent service is throttling requests made by Amazon Redshift on your behalf. Wait and retry the request.
public struct DependentServiceRequestThrottlingFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceRequestThrottlingFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct DependentServiceRequestThrottlingFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DependentServiceRequestThrottlingFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DependentServiceUnavailableFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<DependentServiceUnavailableFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request cannot be completed because a dependent internal service is temporarily unavailable. Wait 30 to 60 seconds and try again.
public struct DependentServiceUnavailableFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceUnavailableFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct DependentServiceUnavailableFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DependentServiceUnavailableFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DescribeAccountAttributesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                for (index0, string0) in attributeNames.enumerated() {
                    try attributeNamesContainer.encode(string0, forKey: ClientRuntime.Key("AttributeName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributeNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AttributeNames"))
                try attributeNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeAccountAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAccountAttributesInput: Swift.Equatable {
    /// A list of attribute names.
    public var attributeNames: [Swift.String]?

    public init(
        attributeNames: [Swift.String]? = nil
    )
    {
        self.attributeNames = attributeNames
    }
}

struct DescribeAccountAttributesInputBody: Swift.Equatable {
    let attributeNames: [Swift.String]?
}

extension DescribeAccountAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.attributeNames) {
            struct KeyVal0{struct AttributeName{}}
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AttributeName>.CodingKeys.self, forKey: .attributeNames)
            if let attributeNamesWrappedContainer = attributeNamesWrappedContainer {
                let attributeNamesContainer = try attributeNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var attributeNamesBuffer:[Swift.String]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [Swift.String]()
                    for stringContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(stringContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
    }
}

extension DescribeAccountAttributesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeAccountAttributesOutputBody = try responseDecoder.decode(responseBody: data)
            self.accountAttributes = output.accountAttributes
        } else {
            self.accountAttributes = nil
        }
    }
}

public struct DescribeAccountAttributesOutput: Swift.Equatable {
    /// A list of attributes assigned to an account.
    public var accountAttributes: [RedshiftClientTypes.AccountAttribute]?

    public init(
        accountAttributes: [RedshiftClientTypes.AccountAttribute]? = nil
    )
    {
        self.accountAttributes = accountAttributes
    }
}

struct DescribeAccountAttributesOutputBody: Swift.Equatable {
    let accountAttributes: [RedshiftClientTypes.AccountAttribute]?
}

extension DescribeAccountAttributesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAttributes = "AccountAttributes"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountAttributesResult"))
        if containerValues.contains(.accountAttributes) {
            struct KeyVal0{struct AccountAttribute{}}
            let accountAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AccountAttribute>.CodingKeys.self, forKey: .accountAttributes)
            if let accountAttributesWrappedContainer = accountAttributesWrappedContainer {
                let accountAttributesContainer = try accountAttributesWrappedContainer.decodeIfPresent([RedshiftClientTypes.AccountAttribute].self, forKey: .member)
                var accountAttributesBuffer:[RedshiftClientTypes.AccountAttribute]? = nil
                if let accountAttributesContainer = accountAttributesContainer {
                    accountAttributesBuffer = [RedshiftClientTypes.AccountAttribute]()
                    for structureContainer0 in accountAttributesContainer {
                        accountAttributesBuffer?.append(structureContainer0)
                    }
                }
                accountAttributes = accountAttributesBuffer
            } else {
                accountAttributes = []
            }
        } else {
            accountAttributes = nil
        }
    }
}

enum DescribeAccountAttributesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeAuthenticationProfilesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("DescribeAuthenticationProfiles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAuthenticationProfilesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAuthenticationProfilesInput: Swift.Equatable {
    /// The name of the authentication profile to describe. If not specified then all authentication profiles owned by the account are listed.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

struct DescribeAuthenticationProfilesInputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
}

extension DescribeAuthenticationProfilesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
    }
}

extension DescribeAuthenticationProfilesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeAuthenticationProfilesOutputBody = try responseDecoder.decode(responseBody: data)
            self.authenticationProfiles = output.authenticationProfiles
        } else {
            self.authenticationProfiles = nil
        }
    }
}

public struct DescribeAuthenticationProfilesOutput: Swift.Equatable {
    /// The list of authentication profiles.
    public var authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]?

    public init(
        authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]? = nil
    )
    {
        self.authenticationProfiles = authenticationProfiles
    }
}

struct DescribeAuthenticationProfilesOutputBody: Swift.Equatable {
    let authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]?
}

extension DescribeAuthenticationProfilesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfiles = "AuthenticationProfiles"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAuthenticationProfilesResult"))
        if containerValues.contains(.authenticationProfiles) {
            struct KeyVal0{struct member{}}
            let authenticationProfilesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .authenticationProfiles)
            if let authenticationProfilesWrappedContainer = authenticationProfilesWrappedContainer {
                let authenticationProfilesContainer = try authenticationProfilesWrappedContainer.decodeIfPresent([RedshiftClientTypes.AuthenticationProfile].self, forKey: .member)
                var authenticationProfilesBuffer:[RedshiftClientTypes.AuthenticationProfile]? = nil
                if let authenticationProfilesContainer = authenticationProfilesContainer {
                    authenticationProfilesBuffer = [RedshiftClientTypes.AuthenticationProfile]()
                    for structureContainer0 in authenticationProfilesContainer {
                        authenticationProfilesBuffer?.append(structureContainer0)
                    }
                }
                authenticationProfiles = authenticationProfilesBuffer
            } else {
                authenticationProfiles = []
            }
        } else {
            authenticationProfiles = nil
        }
    }
}

enum DescribeAuthenticationProfilesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthenticationProfileNotFoundFault": return try await AuthenticationProfileNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterDbRevisionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeClusterDbRevisions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterDbRevisionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeClusterDbRevisionsInput: Swift.Equatable {
    /// A unique identifier for a cluster whose ClusterDbRevisions you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
    public var clusterIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a DescribeClusterDbRevisions request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. Constraints: You can specify either the ClusterIdentifier parameter, or the marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

struct DescribeClusterDbRevisionsInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeClusterDbRevisionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeClusterDbRevisionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterDbRevisionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterDbRevisions = output.clusterDbRevisions
            self.marker = output.marker
        } else {
            self.clusterDbRevisions = nil
            self.marker = nil
        }
    }
}

public struct DescribeClusterDbRevisionsOutput: Swift.Equatable {
    /// A list of revisions.
    public var clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]?
    /// A string representing the starting point for the next set of revisions. If a value is returned in a response, you can retrieve the next set of revisions by providing the value in the marker parameter and retrying the command. If the marker field is empty, all revisions have already been returned.
    public var marker: Swift.String?

    public init(
        clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterDbRevisions = clusterDbRevisions
        self.marker = marker
    }
}

struct DescribeClusterDbRevisionsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]?
}

extension DescribeClusterDbRevisionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterDbRevisions = "ClusterDbRevisions"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterDbRevisionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterDbRevisions) {
            struct KeyVal0{struct ClusterDbRevision{}}
            let clusterDbRevisionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterDbRevision>.CodingKeys.self, forKey: .clusterDbRevisions)
            if let clusterDbRevisionsWrappedContainer = clusterDbRevisionsWrappedContainer {
                let clusterDbRevisionsContainer = try clusterDbRevisionsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterDbRevision].self, forKey: .member)
                var clusterDbRevisionsBuffer:[RedshiftClientTypes.ClusterDbRevision]? = nil
                if let clusterDbRevisionsContainer = clusterDbRevisionsContainer {
                    clusterDbRevisionsBuffer = [RedshiftClientTypes.ClusterDbRevision]()
                    for structureContainer0 in clusterDbRevisionsContainer {
                        clusterDbRevisionsBuffer?.append(structureContainer0)
                    }
                }
                clusterDbRevisions = clusterDbRevisionsBuffer
            } else {
                clusterDbRevisions = []
            }
        } else {
            clusterDbRevisions = nil
        }
    }
}

enum DescribeClusterDbRevisionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterParameterGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterParameterGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterParameterGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterParameterGroupsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterParameterGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
    public var parameterGroupName: Swift.String?
    /// A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupName = parameterGroupName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeClusterParameterGroupsInputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeClusterParameterGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case parameterGroupName = "ParameterGroupName"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeClusterParameterGroupsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterParameterGroupsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.parameterGroups = output.parameterGroups
        } else {
            self.marker = nil
            self.parameterGroups = nil
        }
    }
}

/// Contains the output from the [DescribeClusterParameterGroups] action.
public struct DescribeClusterParameterGroupsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [ClusterParameterGroup] instances. Each instance describes one cluster parameter group.
    public var parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]?

    public init(
        marker: Swift.String? = nil,
        parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]? = nil
    )
    {
        self.marker = marker
        self.parameterGroups = parameterGroups
    }
}

struct DescribeClusterParameterGroupsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]?
}

extension DescribeClusterParameterGroupsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case parameterGroups = "ParameterGroups"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterParameterGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameterGroups) {
            struct KeyVal0{struct ClusterParameterGroup{}}
            let parameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterParameterGroup>.CodingKeys.self, forKey: .parameterGroups)
            if let parameterGroupsWrappedContainer = parameterGroupsWrappedContainer {
                let parameterGroupsContainer = try parameterGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterParameterGroup].self, forKey: .member)
                var parameterGroupsBuffer:[RedshiftClientTypes.ClusterParameterGroup]? = nil
                if let parameterGroupsContainer = parameterGroupsContainer {
                    parameterGroupsBuffer = [RedshiftClientTypes.ClusterParameterGroup]()
                    for structureContainer0 in parameterGroupsContainer {
                        parameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                parameterGroups = parameterGroupsBuffer
            } else {
                parameterGroups = []
            }
        } else {
            parameterGroups = nil
        }
    }
}

enum DescribeClusterParameterGroupsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterParametersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        try container.encode("DescribeClusterParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterParametersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterParametersInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterParameters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of a cluster parameter group for which to return details.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// The parameter types to return. Specify user to show parameters that are different form the default. Similarly, specify engine-default to show parameters that are the same as the default parameter group. Default: All parameter types returned. Valid Values: user | engine-default
    public var source: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupName: Swift.String? = nil,
        source: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupName = parameterGroupName
        self.source = source
    }
}

struct DescribeClusterParametersInputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let source: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeClusterParametersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case parameterGroupName = "ParameterGroupName"
        case source = "Source"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeClusterParametersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterParametersOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.parameters = output.parameters
        } else {
            self.marker = nil
            self.parameters = nil
        }
    }
}

/// Contains the output from the [DescribeClusterParameters] action.
public struct DescribeClusterParametersOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [Parameter] instances. Each instance lists the parameters of one cluster parameter group.
    public var parameters: [RedshiftClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

struct DescribeClusterParametersOutputBody: Swift.Equatable {
    let parameters: [RedshiftClientTypes.Parameter]?
    let marker: Swift.String?
}

extension DescribeClusterParametersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterParametersResult"))
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([RedshiftClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[RedshiftClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [RedshiftClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeClusterParametersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterSecurityGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterSecurityGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterSecurityGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterSecurityGroupsInput: Swift.Equatable {
    /// The name of a cluster security group for which you are requesting details. You must specify either the Marker parameter or a ClusterSecurityGroupName parameter, but not both. Example: securitygroup1
    public var clusterSecurityGroupName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSecurityGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You must specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterSecurityGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeClusterSecurityGroupsInputBody: Swift.Equatable {
    let clusterSecurityGroupName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeClusterSecurityGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeClusterSecurityGroupsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterSecurityGroupsOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSecurityGroups = output.clusterSecurityGroups
            self.marker = output.marker
        } else {
            self.clusterSecurityGroups = nil
            self.marker = nil
        }
    }
}

///
public struct DescribeClusterSecurityGroupsOutput: Swift.Equatable {
    /// A list of [ClusterSecurityGroup] instances.
    public var clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterSecurityGroups = clusterSecurityGroups
        self.marker = marker
    }
}

struct DescribeClusterSecurityGroupsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]?
}

extension DescribeClusterSecurityGroupsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterSecurityGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroup{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroup>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterSecurityGroup].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[RedshiftClientTypes.ClusterSecurityGroup]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [RedshiftClientTypes.ClusterSecurityGroup]()
                    for structureContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
    }
}

enum DescribeClusterSecurityGroupsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterSnapshotsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterExists = clusterExists {
            try container.encode(clusterExists, forKey: ClientRuntime.Key("ClusterExists"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let sortingEntities = sortingEntities {
            if !sortingEntities.isEmpty {
                var sortingEntitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SortingEntities"))
                for (index0, snapshotsortingentity0) in sortingEntities.enumerated() {
                    try sortingEntitiesContainer.encode(snapshotsortingentity0, forKey: ClientRuntime.Key("SnapshotSortingEntity.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sortingEntitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SortingEntities"))
                try sortingEntitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterSnapshotsInput: Swift.Equatable {
    /// A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows:
    ///
    /// * If ClusterExists is set to true, ClusterIdentifier is required.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier is specified for a deleted cluster, snapshots associated with that cluster are returned.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier is specified for an existing cluster, no snapshots are returned.
    public var clusterExists: Swift.Bool?
    /// The identifier of the cluster which generated the requested snapshots.
    public var clusterIdentifier: Swift.String?
    /// A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2012-07-16T18:00:00Z
    public var endTime: ClientRuntime.Date?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSnapshots] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your Amazon Web Services account, or do not specify the parameter.
    public var ownerAccount: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to describe cluster snapshots.
    public var snapshotArn: Swift.String?
    /// The snapshot identifier of the snapshot about which to return information.
    public var snapshotIdentifier: Swift.String?
    /// The type of snapshots for which you are requesting information. By default, snapshots of all types are returned. Valid Values: automated | manual
    public var snapshotType: Swift.String?
    ///
    public var sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]?
    /// A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2012-07-16T18:00:00Z
    public var startTime: ClientRuntime.Date?
    /// A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterExists: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        snapshotType: Swift.String? = nil,
        sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]? = nil,
        startTime: ClientRuntime.Date? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterExists = clusterExists
        self.clusterIdentifier = clusterIdentifier
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotArn = snapshotArn
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotType = snapshotType
        self.sortingEntities = sortingEntities
        self.startTime = startTime
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeClusterSnapshotsInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let snapshotType: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let ownerAccount: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
    let clusterExists: Swift.Bool?
    let sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]?
}

extension DescribeClusterSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterExists = "ClusterExists"
        case clusterIdentifier = "ClusterIdentifier"
        case endTime = "EndTime"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case ownerAccount = "OwnerAccount"
        case snapshotArn = "SnapshotArn"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotType = "SnapshotType"
        case sortingEntities = "SortingEntities"
        case startTime = "StartTime"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let snapshotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotType)
        snapshotType = snapshotTypeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
        let clusterExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .clusterExists)
        clusterExists = clusterExistsDecoded
        if containerValues.contains(.sortingEntities) {
            struct KeyVal0{struct SnapshotSortingEntity{}}
            let sortingEntitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotSortingEntity>.CodingKeys.self, forKey: .sortingEntities)
            if let sortingEntitiesWrappedContainer = sortingEntitiesWrappedContainer {
                let sortingEntitiesContainer = try sortingEntitiesWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotSortingEntity].self, forKey: .member)
                var sortingEntitiesBuffer:[RedshiftClientTypes.SnapshotSortingEntity]? = nil
                if let sortingEntitiesContainer = sortingEntitiesContainer {
                    sortingEntitiesBuffer = [RedshiftClientTypes.SnapshotSortingEntity]()
                    for structureContainer0 in sortingEntitiesContainer {
                        sortingEntitiesBuffer?.append(structureContainer0)
                    }
                }
                sortingEntities = sortingEntitiesBuffer
            } else {
                sortingEntities = []
            }
        } else {
            sortingEntities = nil
        }
    }
}

extension DescribeClusterSnapshotsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterSnapshotsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.snapshots = output.snapshots
        } else {
            self.marker = nil
            self.snapshots = nil
        }
    }
}

/// Contains the output from the [DescribeClusterSnapshots] action.
public struct DescribeClusterSnapshotsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [Snapshot] instances.
    public var snapshots: [RedshiftClientTypes.Snapshot]?

    public init(
        marker: Swift.String? = nil,
        snapshots: [RedshiftClientTypes.Snapshot]? = nil
    )
    {
        self.marker = marker
        self.snapshots = snapshots
    }
}

struct DescribeClusterSnapshotsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let snapshots: [RedshiftClientTypes.Snapshot]?
}

extension DescribeClusterSnapshotsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshots = "Snapshots"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterSnapshotsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.snapshots) {
            struct KeyVal0{struct Snapshot{}}
            let snapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Snapshot>.CodingKeys.self, forKey: .snapshots)
            if let snapshotsWrappedContainer = snapshotsWrappedContainer {
                let snapshotsContainer = try snapshotsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Snapshot].self, forKey: .member)
                var snapshotsBuffer:[RedshiftClientTypes.Snapshot]? = nil
                if let snapshotsContainer = snapshotsContainer {
                    snapshotsBuffer = [RedshiftClientTypes.Snapshot]()
                    for structureContainer0 in snapshotsContainer {
                        snapshotsBuffer?.append(structureContainer0)
                    }
                }
                snapshots = snapshotsBuffer
            } else {
                snapshots = []
            }
        } else {
            snapshots = nil
        }
    }
}

enum DescribeClusterSnapshotsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterSubnetGroupsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusterSubnetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterSubnetGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterSubnetGroupsInput: Swift.Equatable {
    /// The name of the cluster subnet group for which information is requested.
    public var clusterSubnetGroupName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSubnetGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeClusterSubnetGroupsInputBody: Swift.Equatable {
    let clusterSubnetGroupName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeClusterSubnetGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeClusterSubnetGroupsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterSubnetGroupsOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSubnetGroups = output.clusterSubnetGroups
            self.marker = output.marker
        } else {
            self.clusterSubnetGroups = nil
            self.marker = nil
        }
    }
}

/// Contains the output from the [DescribeClusterSubnetGroups] action.
public struct DescribeClusterSubnetGroupsOutput: Swift.Equatable {
    /// A list of [ClusterSubnetGroup] instances.
    public var clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterSubnetGroups = clusterSubnetGroups
        self.marker = marker
    }
}

struct DescribeClusterSubnetGroupsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]?
}

extension DescribeClusterSubnetGroupsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroups = "ClusterSubnetGroups"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterSubnetGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterSubnetGroups) {
            struct KeyVal0{struct ClusterSubnetGroup{}}
            let clusterSubnetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSubnetGroup>.CodingKeys.self, forKey: .clusterSubnetGroups)
            if let clusterSubnetGroupsWrappedContainer = clusterSubnetGroupsWrappedContainer {
                let clusterSubnetGroupsContainer = try clusterSubnetGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterSubnetGroup].self, forKey: .member)
                var clusterSubnetGroupsBuffer:[RedshiftClientTypes.ClusterSubnetGroup]? = nil
                if let clusterSubnetGroupsContainer = clusterSubnetGroupsContainer {
                    clusterSubnetGroupsBuffer = [RedshiftClientTypes.ClusterSubnetGroup]()
                    for structureContainer0 in clusterSubnetGroupsContainer {
                        clusterSubnetGroupsBuffer?.append(structureContainer0)
                    }
                }
                clusterSubnetGroups = clusterSubnetGroupsBuffer
            } else {
                clusterSubnetGroups = []
            }
        } else {
            clusterSubnetGroups = nil
        }
    }
}

enum DescribeClusterSubnetGroupsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterTracksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeClusterTracks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterTracksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeClusterTracksInput: Swift.Equatable {
    /// The name of the maintenance track.
    public var maintenanceTrackName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterTracks request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// An integer value for the maximum number of maintenance tracks to return.
    public var maxRecords: Swift.Int?

    public init(
        maintenanceTrackName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.maintenanceTrackName = maintenanceTrackName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

struct DescribeClusterTracksInputBody: Swift.Equatable {
    let maintenanceTrackName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeClusterTracksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceTrackName = "MaintenanceTrackName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeClusterTracksOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterTracksOutputBody = try responseDecoder.decode(responseBody: data)
            self.maintenanceTracks = output.maintenanceTracks
            self.marker = output.marker
        } else {
            self.maintenanceTracks = nil
            self.marker = nil
        }
    }
}

public struct DescribeClusterTracksOutput: Swift.Equatable {
    /// A list of maintenance tracks output by the DescribeClusterTracks operation.
    public var maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]?
    /// The starting point to return a set of response tracklist records. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.maintenanceTracks = maintenanceTracks
        self.marker = marker
    }
}

struct DescribeClusterTracksOutputBody: Swift.Equatable {
    let maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]?
    let marker: Swift.String?
}

extension DescribeClusterTracksOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceTracks = "MaintenanceTracks"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterTracksResult"))
        if containerValues.contains(.maintenanceTracks) {
            struct KeyVal0{struct MaintenanceTrack{}}
            let maintenanceTracksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MaintenanceTrack>.CodingKeys.self, forKey: .maintenanceTracks)
            if let maintenanceTracksWrappedContainer = maintenanceTracksWrappedContainer {
                let maintenanceTracksContainer = try maintenanceTracksWrappedContainer.decodeIfPresent([RedshiftClientTypes.MaintenanceTrack].self, forKey: .member)
                var maintenanceTracksBuffer:[RedshiftClientTypes.MaintenanceTrack]? = nil
                if let maintenanceTracksContainer = maintenanceTracksContainer {
                    maintenanceTracksBuffer = [RedshiftClientTypes.MaintenanceTrack]()
                    for structureContainer0 in maintenanceTracksContainer {
                        maintenanceTracksBuffer?.append(structureContainer0)
                    }
                }
                maintenanceTracks = maintenanceTracksBuffer
            } else {
                maintenanceTracks = []
            }
        } else {
            maintenanceTracks = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeClusterTracksOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidClusterTrack": return try await InvalidClusterTrackFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClusterVersionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterParameterGroupFamily = clusterParameterGroupFamily {
            try container.encode(clusterParameterGroupFamily, forKey: ClientRuntime.Key("ClusterParameterGroupFamily"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeClusterVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClusterVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClusterVersionsInput: Swift.Equatable {
    /// The name of a specific cluster parameter group family to return details for. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var clusterParameterGroupFamily: Swift.String?
    /// The specific cluster version to return. Example: 1.0
    public var clusterVersion: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterVersions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        clusterParameterGroupFamily: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.clusterParameterGroupFamily = clusterParameterGroupFamily
        self.clusterVersion = clusterVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

struct DescribeClusterVersionsInputBody: Swift.Equatable {
    let clusterVersion: Swift.String?
    let clusterParameterGroupFamily: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeClusterVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterGroupFamily = "ClusterParameterGroupFamily"
        case clusterVersion = "ClusterVersion"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let clusterParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterParameterGroupFamily)
        clusterParameterGroupFamily = clusterParameterGroupFamilyDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeClusterVersionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClusterVersionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterVersions = output.clusterVersions
            self.marker = output.marker
        } else {
            self.clusterVersions = nil
            self.marker = nil
        }
    }
}

/// Contains the output from the [DescribeClusterVersions] action.
public struct DescribeClusterVersionsOutput: Swift.Equatable {
    /// A list of Version elements.
    public var clusterVersions: [RedshiftClientTypes.ClusterVersion]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterVersions: [RedshiftClientTypes.ClusterVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterVersions = clusterVersions
        self.marker = marker
    }
}

struct DescribeClusterVersionsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let clusterVersions: [RedshiftClientTypes.ClusterVersion]?
}

extension DescribeClusterVersionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterVersions = "ClusterVersions"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterVersionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterVersions) {
            struct KeyVal0{struct ClusterVersion{}}
            let clusterVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterVersion>.CodingKeys.self, forKey: .clusterVersions)
            if let clusterVersionsWrappedContainer = clusterVersionsWrappedContainer {
                let clusterVersionsContainer = try clusterVersionsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterVersion].self, forKey: .member)
                var clusterVersionsBuffer:[RedshiftClientTypes.ClusterVersion]? = nil
                if let clusterVersionsContainer = clusterVersionsContainer {
                    clusterVersionsBuffer = [RedshiftClientTypes.ClusterVersion]()
                    for structureContainer0 in clusterVersionsContainer {
                        clusterVersionsBuffer?.append(structureContainer0)
                    }
                }
                clusterVersions = clusterVersionsBuffer
            } else {
                clusterVersions = []
            }
        } else {
            clusterVersions = nil
        }
    }
}

enum DescribeClusterVersionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeClustersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeClusters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeClustersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeClustersInput: Swift.Equatable {
    /// The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive. The default is that all clusters defined for an account are returned.
    public var clusterIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the ClusterIdentifier parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeClustersInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeClustersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeClustersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeClustersOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusters = output.clusters
            self.marker = output.marker
        } else {
            self.clusters = nil
            self.marker = nil
        }
    }
}

/// Contains the output from the [DescribeClusters] action.
public struct DescribeClustersOutput: Swift.Equatable {
    /// A list of Cluster objects, where each object describes one cluster.
    public var clusters: [RedshiftClientTypes.Cluster]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusters: [RedshiftClientTypes.Cluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.marker = marker
    }
}

struct DescribeClustersOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let clusters: [RedshiftClientTypes.Cluster]?
}

extension DescribeClustersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusters = "Clusters"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusters) {
            struct KeyVal0{struct Cluster{}}
            let clustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Cluster>.CodingKeys.self, forKey: .clusters)
            if let clustersWrappedContainer = clustersWrappedContainer {
                let clustersContainer = try clustersWrappedContainer.decodeIfPresent([RedshiftClientTypes.Cluster].self, forKey: .member)
                var clustersBuffer:[RedshiftClientTypes.Cluster]? = nil
                if let clustersContainer = clustersContainer {
                    clustersBuffer = [RedshiftClientTypes.Cluster]()
                    for structureContainer0 in clustersContainer {
                        clustersBuffer?.append(structureContainer0)
                    }
                }
                clusters = clustersBuffer
            } else {
                clusters = []
            }
        } else {
            clusters = nil
        }
    }
}

enum DescribeClustersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeCustomDomainAssociationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCustomDomainAssociations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCustomDomainAssociationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeCustomDomainAssociationsInput: Swift.Equatable {
    /// The certificate Amazon Resource Name (ARN) for the custom domain association.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for the custom domain association.
    public var customDomainName: Swift.String?
    /// The marker for the custom domain association.
    public var marker: Swift.String?
    /// The maximum records setting for the associated custom domain.
    public var maxRecords: Swift.Int?

    public init(
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

struct DescribeCustomDomainAssociationsInputBody: Swift.Equatable {
    let customDomainName: Swift.String?
    let customDomainCertificateArn: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeCustomDomainAssociationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeCustomDomainAssociationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeCustomDomainAssociationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.associations = output.associations
            self.marker = output.marker
        } else {
            self.associations = nil
            self.marker = nil
        }
    }
}

public struct DescribeCustomDomainAssociationsOutput: Swift.Equatable {
    /// The associations for the custom domain.
    public var associations: [RedshiftClientTypes.Association]?
    /// The marker for the custom domain association.
    public var marker: Swift.String?

    public init(
        associations: [RedshiftClientTypes.Association]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.associations = associations
        self.marker = marker
    }
}

struct DescribeCustomDomainAssociationsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let associations: [RedshiftClientTypes.Association]?
}

extension DescribeCustomDomainAssociationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associations = "Associations"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCustomDomainAssociationsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.associations) {
            struct KeyVal0{struct Association{}}
            let associationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Association>.CodingKeys.self, forKey: .associations)
            if let associationsWrappedContainer = associationsWrappedContainer {
                let associationsContainer = try associationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Association].self, forKey: .member)
                var associationsBuffer:[RedshiftClientTypes.Association]? = nil
                if let associationsContainer = associationsContainer {
                    associationsBuffer = [RedshiftClientTypes.Association]()
                    for structureContainer0 in associationsContainer {
                        associationsBuffer?.append(structureContainer0)
                    }
                }
                associations = associationsBuffer
            } else {
                associations = []
            }
        } else {
            associations = nil
        }
    }
}

enum DescribeCustomDomainAssociationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "CustomDomainAssociationNotFoundFault": return try await CustomDomainAssociationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeDataSharesForConsumerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerArn = consumerArn {
            try container.encode(consumerArn, forKey: ClientRuntime.Key("ConsumerArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("DescribeDataSharesForConsumer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDataSharesForConsumerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataSharesForConsumerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the consumer that returns in the list of datashares.
    public var consumerArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForConsumer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// An identifier giving the status of a datashare in the consumer cluster. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
    public var status: RedshiftClientTypes.DataShareStatusForConsumer?

    public init(
        consumerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        status: RedshiftClientTypes.DataShareStatusForConsumer? = nil
    )
    {
        self.consumerArn = consumerArn
        self.marker = marker
        self.maxRecords = maxRecords
        self.status = status
    }
}

struct DescribeDataSharesForConsumerInputBody: Swift.Equatable {
    let consumerArn: Swift.String?
    let status: RedshiftClientTypes.DataShareStatusForConsumer?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeDataSharesForConsumerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerArn = "ConsumerArn"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerArn)
        consumerArn = consumerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.DataShareStatusForConsumer.self, forKey: .status)
        status = statusDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeDataSharesForConsumerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDataSharesForConsumerOutputBody = try responseDecoder.decode(responseBody: data)
            self.dataShares = output.dataShares
            self.marker = output.marker
        } else {
            self.dataShares = nil
            self.marker = nil
        }
    }
}

public struct DescribeDataSharesForConsumerOutput: Swift.Equatable {
    /// Shows the results of datashares available for consumers.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForConsumer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

struct DescribeDataSharesForConsumerOutputBody: Swift.Equatable {
    let dataShares: [RedshiftClientTypes.DataShare]?
    let marker: Swift.String?
}

extension DescribeDataSharesForConsumerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShares = "DataShares"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDataSharesForConsumerResult"))
        if containerValues.contains(.dataShares) {
            struct KeyVal0{struct member{}}
            let dataSharesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShares)
            if let dataSharesWrappedContainer = dataSharesWrappedContainer {
                let dataSharesContainer = try dataSharesWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShare].self, forKey: .member)
                var dataSharesBuffer:[RedshiftClientTypes.DataShare]? = nil
                if let dataSharesContainer = dataSharesContainer {
                    dataSharesBuffer = [RedshiftClientTypes.DataShare]()
                    for structureContainer0 in dataSharesContainer {
                        dataSharesBuffer?.append(structureContainer0)
                    }
                }
                dataShares = dataSharesBuffer
            } else {
                dataShares = []
            }
        } else {
            dataShares = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeDataSharesForConsumerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidNamespaceFault": return try await InvalidNamespaceFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeDataSharesForProducerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let producerArn = producerArn {
            try container.encode(producerArn, forKey: ClientRuntime.Key("ProducerArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("DescribeDataSharesForProducer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDataSharesForProducerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataSharesForProducerInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForProducer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the producer that returns in the list of datashares.
    public var producerArn: Swift.String?
    /// An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
    public var status: RedshiftClientTypes.DataShareStatusForProducer?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        producerArn: Swift.String? = nil,
        status: RedshiftClientTypes.DataShareStatusForProducer? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.producerArn = producerArn
        self.status = status
    }
}

struct DescribeDataSharesForProducerInputBody: Swift.Equatable {
    let producerArn: Swift.String?
    let status: RedshiftClientTypes.DataShareStatusForProducer?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeDataSharesForProducerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case producerArn = "ProducerArn"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.DataShareStatusForProducer.self, forKey: .status)
        status = statusDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeDataSharesForProducerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDataSharesForProducerOutputBody = try responseDecoder.decode(responseBody: data)
            self.dataShares = output.dataShares
            self.marker = output.marker
        } else {
            self.dataShares = nil
            self.marker = nil
        }
    }
}

public struct DescribeDataSharesForProducerOutput: Swift.Equatable {
    /// Shows the results of datashares available for producers.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForProducer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

struct DescribeDataSharesForProducerOutputBody: Swift.Equatable {
    let dataShares: [RedshiftClientTypes.DataShare]?
    let marker: Swift.String?
}

extension DescribeDataSharesForProducerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShares = "DataShares"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDataSharesForProducerResult"))
        if containerValues.contains(.dataShares) {
            struct KeyVal0{struct member{}}
            let dataSharesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShares)
            if let dataSharesWrappedContainer = dataSharesWrappedContainer {
                let dataSharesContainer = try dataSharesWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShare].self, forKey: .member)
                var dataSharesBuffer:[RedshiftClientTypes.DataShare]? = nil
                if let dataSharesContainer = dataSharesContainer {
                    dataSharesBuffer = [RedshiftClientTypes.DataShare]()
                    for structureContainer0 in dataSharesContainer {
                        dataSharesBuffer?.append(structureContainer0)
                    }
                }
                dataShares = dataSharesBuffer
            } else {
                dataShares = []
            }
        } else {
            dataShares = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeDataSharesForProducerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidNamespaceFault": return try await InvalidNamespaceFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeDataSharesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeDataShares", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDataSharesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataSharesInput: Swift.Equatable {
    /// The identifier of the datashare to describe details of.
    public var dataShareArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataShares] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?

    public init(
        dataShareArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dataShareArn = dataShareArn
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

struct DescribeDataSharesInputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeDataSharesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShareArn = "DataShareArn"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeDataSharesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDataSharesOutputBody = try responseDecoder.decode(responseBody: data)
            self.dataShares = output.dataShares
            self.marker = output.marker
        } else {
            self.dataShares = nil
            self.marker = nil
        }
    }
}

public struct DescribeDataSharesOutput: Swift.Equatable {
    /// The results returned from describing datashares.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataShares] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

struct DescribeDataSharesOutputBody: Swift.Equatable {
    let dataShares: [RedshiftClientTypes.DataShare]?
    let marker: Swift.String?
}

extension DescribeDataSharesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShares = "DataShares"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDataSharesResult"))
        if containerValues.contains(.dataShares) {
            struct KeyVal0{struct member{}}
            let dataSharesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShares)
            if let dataSharesWrappedContainer = dataSharesWrappedContainer {
                let dataSharesContainer = try dataSharesWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShare].self, forKey: .member)
                var dataSharesBuffer:[RedshiftClientTypes.DataShare]? = nil
                if let dataSharesContainer = dataSharesContainer {
                    dataSharesBuffer = [RedshiftClientTypes.DataShare]()
                    for structureContainer0 in dataSharesContainer {
                        dataSharesBuffer?.append(structureContainer0)
                    }
                }
                dataShares = dataSharesBuffer
            } else {
                dataShares = []
            }
        } else {
            dataShares = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeDataSharesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidDataShareFault": return try await InvalidDataShareFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeDefaultClusterParametersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let parameterGroupFamily = parameterGroupFamily {
            try container.encode(parameterGroupFamily, forKey: ClientRuntime.Key("ParameterGroupFamily"))
        }
        try container.encode("DescribeDefaultClusterParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeDefaultClusterParametersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeDefaultClusterParametersInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDefaultClusterParameters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the cluster parameter group family.
    /// This member is required.
    public var parameterGroupFamily: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupFamily: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupFamily = parameterGroupFamily
    }
}

struct DescribeDefaultClusterParametersInputBody: Swift.Equatable {
    let parameterGroupFamily: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeDefaultClusterParametersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case parameterGroupFamily = "ParameterGroupFamily"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupFamily)
        parameterGroupFamily = parameterGroupFamilyDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeDefaultClusterParametersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDefaultClusterParametersOutputBody = try responseDecoder.decode(responseBody: data)
            self.defaultClusterParameters = output.defaultClusterParameters
        } else {
            self.defaultClusterParameters = nil
        }
    }
}

public struct DescribeDefaultClusterParametersOutput: Swift.Equatable {
    /// Describes the default cluster parameters for a parameter group family.
    public var defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters?

    public init(
        defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters? = nil
    )
    {
        self.defaultClusterParameters = defaultClusterParameters
    }
}

struct DescribeDefaultClusterParametersOutputBody: Swift.Equatable {
    let defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters?
}

extension DescribeDefaultClusterParametersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultClusterParameters = "DefaultClusterParameters"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDefaultClusterParametersResult"))
        let defaultClusterParametersDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.DefaultClusterParameters.self, forKey: .defaultClusterParameters)
        defaultClusterParameters = defaultClusterParametersDecoded
    }
}

enum DescribeDefaultClusterParametersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeEndpointAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        try container.encode("DescribeEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointAccessInput: Swift.Equatable {
    /// The cluster identifier associated with the described endpoint.
    public var clusterIdentifier: Swift.String?
    /// The name of the endpoint to be described.
    public var endpointName: Swift.String?
    /// An optional pagination token provided by a previous DescribeEndpointAccess request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a Marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The virtual private cloud (VPC) identifier with access to the cluster.
    public var vpcId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.endpointName = endpointName
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceOwner = resourceOwner
        self.vpcId = vpcId
    }
}

struct DescribeEndpointAccessInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let resourceOwner: Swift.String?
    let endpointName: Swift.String?
    let vpcId: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case endpointName = "EndpointName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case resourceOwner = "ResourceOwner"
        case vpcId = "VpcId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeEndpointAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeEndpointAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.endpointAccessList = output.endpointAccessList
            self.marker = output.marker
        } else {
            self.endpointAccessList = nil
            self.marker = nil
        }
    }
}

public struct DescribeEndpointAccessOutput: Swift.Equatable {
    /// The list of endpoints with access to the cluster.
    public var endpointAccessList: [RedshiftClientTypes.EndpointAccess]?
    /// An optional pagination token provided by a previous DescribeEndpointAccess request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?

    public init(
        endpointAccessList: [RedshiftClientTypes.EndpointAccess]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.endpointAccessList = endpointAccessList
        self.marker = marker
    }
}

struct DescribeEndpointAccessOutputBody: Swift.Equatable {
    let endpointAccessList: [RedshiftClientTypes.EndpointAccess]?
    let marker: Swift.String?
}

extension DescribeEndpointAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointAccessList = "EndpointAccessList"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEndpointAccessResult"))
        if containerValues.contains(.endpointAccessList) {
            struct KeyVal0{struct member{}}
            let endpointAccessListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .endpointAccessList)
            if let endpointAccessListWrappedContainer = endpointAccessListWrappedContainer {
                let endpointAccessListContainer = try endpointAccessListWrappedContainer.decodeIfPresent([RedshiftClientTypes.EndpointAccess].self, forKey: .member)
                var endpointAccessListBuffer:[RedshiftClientTypes.EndpointAccess]? = nil
                if let endpointAccessListContainer = endpointAccessListContainer {
                    endpointAccessListBuffer = [RedshiftClientTypes.EndpointAccess]()
                    for structureContainer0 in endpointAccessListContainer {
                        endpointAccessListBuffer?.append(structureContainer0)
                    }
                }
                endpointAccessList = endpointAccessListBuffer
            } else {
                endpointAccessList = []
            }
        } else {
            endpointAccessList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeEndpointAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointNotFound": return try await EndpointNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeEndpointAuthorizationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let grantee = grantee {
            try container.encode(grantee, forKey: ClientRuntime.Key("Grantee"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeEndpointAuthorization", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEndpointAuthorizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointAuthorizationInput: Swift.Equatable {
    /// The Amazon Web Services account ID of either the cluster owner (grantor) or grantee. If Grantee parameter is true, then the Account value is of the grantor.
    public var account: Swift.String?
    /// The cluster identifier of the cluster to access.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to check authorization from a grantor or grantee point of view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If false (default), checks authorization from a grantor point of view.
    public var grantee: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeEndpointAuthorization request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a Marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        grantee: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.grantee = grantee
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

struct DescribeEndpointAuthorizationInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let account: Swift.String?
    let grantee: Swift.Bool?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeEndpointAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case clusterIdentifier = "ClusterIdentifier"
        case grantee = "Grantee"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let granteeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .grantee)
        grantee = granteeDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeEndpointAuthorizationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeEndpointAuthorizationOutputBody = try responseDecoder.decode(responseBody: data)
            self.endpointAuthorizationList = output.endpointAuthorizationList
            self.marker = output.marker
        } else {
            self.endpointAuthorizationList = nil
            self.marker = nil
        }
    }
}

public struct DescribeEndpointAuthorizationOutput: Swift.Equatable {
    /// The authorizations to an endpoint.
    public var endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]?
    /// An optional pagination token provided by a previous DescribeEndpointAuthorization request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?

    public init(
        endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.endpointAuthorizationList = endpointAuthorizationList
        self.marker = marker
    }
}

struct DescribeEndpointAuthorizationOutputBody: Swift.Equatable {
    let endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]?
    let marker: Swift.String?
}

extension DescribeEndpointAuthorizationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointAuthorizationList = "EndpointAuthorizationList"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEndpointAuthorizationResult"))
        if containerValues.contains(.endpointAuthorizationList) {
            struct KeyVal0{struct member{}}
            let endpointAuthorizationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .endpointAuthorizationList)
            if let endpointAuthorizationListWrappedContainer = endpointAuthorizationListWrappedContainer {
                let endpointAuthorizationListContainer = try endpointAuthorizationListWrappedContainer.decodeIfPresent([RedshiftClientTypes.EndpointAuthorization].self, forKey: .member)
                var endpointAuthorizationListBuffer:[RedshiftClientTypes.EndpointAuthorization]? = nil
                if let endpointAuthorizationListContainer = endpointAuthorizationListContainer {
                    endpointAuthorizationListBuffer = [RedshiftClientTypes.EndpointAuthorization]()
                    for structureContainer0 in endpointAuthorizationListContainer {
                        endpointAuthorizationListBuffer?.append(structureContainer0)
                    }
                }
                endpointAuthorizationList = endpointAuthorizationListBuffer
            } else {
                endpointAuthorizationList = []
            }
        } else {
            endpointAuthorizationList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeEndpointAuthorizationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeEventCategoriesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        try container.encode("DescribeEventCategories", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventCategoriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventCategoriesInput: Swift.Equatable {
    /// The source type, such as cluster or parameter group, to which the described event categories apply. Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.
    public var sourceType: Swift.String?

    public init(
        sourceType: Swift.String? = nil
    )
    {
        self.sourceType = sourceType
    }
}

struct DescribeEventCategoriesInputBody: Swift.Equatable {
    let sourceType: Swift.String?
}

extension DescribeEventCategoriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceType = "SourceType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}

extension DescribeEventCategoriesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeEventCategoriesOutputBody = try responseDecoder.decode(responseBody: data)
            self.eventCategoriesMapList = output.eventCategoriesMapList
        } else {
            self.eventCategoriesMapList = nil
        }
    }
}

///
public struct DescribeEventCategoriesOutput: Swift.Equatable {
    /// A list of event categories descriptions.
    public var eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]?

    public init(
        eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]? = nil
    )
    {
        self.eventCategoriesMapList = eventCategoriesMapList
    }
}

struct DescribeEventCategoriesOutputBody: Swift.Equatable {
    let eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]?
}

extension DescribeEventCategoriesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventCategoriesMapList = "EventCategoriesMapList"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEventCategoriesResult"))
        if containerValues.contains(.eventCategoriesMapList) {
            struct KeyVal0{struct EventCategoriesMap{}}
            let eventCategoriesMapListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventCategoriesMap>.CodingKeys.self, forKey: .eventCategoriesMapList)
            if let eventCategoriesMapListWrappedContainer = eventCategoriesMapListWrappedContainer {
                let eventCategoriesMapListContainer = try eventCategoriesMapListWrappedContainer.decodeIfPresent([RedshiftClientTypes.EventCategoriesMap].self, forKey: .member)
                var eventCategoriesMapListBuffer:[RedshiftClientTypes.EventCategoriesMap]? = nil
                if let eventCategoriesMapListContainer = eventCategoriesMapListContainer {
                    eventCategoriesMapListBuffer = [RedshiftClientTypes.EventCategoriesMap]()
                    for structureContainer0 in eventCategoriesMapListContainer {
                        eventCategoriesMapListBuffer?.append(structureContainer0)
                    }
                }
                eventCategoriesMapList = eventCategoriesMapListBuffer
            } else {
                eventCategoriesMapList = []
            }
        } else {
            eventCategoriesMapList = nil
        }
    }
}

enum DescribeEventCategoriesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeEventSubscriptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeEventSubscriptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventSubscriptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventSubscriptionsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the Amazon Redshift event notification subscription to be described.
    public var subscriptionName: Swift.String?
    /// A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        subscriptionName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.subscriptionName = subscriptionName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeEventSubscriptionsInputBody: Swift.Equatable {
    let subscriptionName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeEventSubscriptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case subscriptionName = "SubscriptionName"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionName)
        subscriptionName = subscriptionNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeEventSubscriptionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeEventSubscriptionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.eventSubscriptionsList = output.eventSubscriptionsList
            self.marker = output.marker
        } else {
            self.eventSubscriptionsList = nil
            self.marker = nil
        }
    }
}

///
public struct DescribeEventSubscriptionsOutput: Swift.Equatable {
    /// A list of event subscriptions.
    public var eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.eventSubscriptionsList = eventSubscriptionsList
        self.marker = marker
    }
}

struct DescribeEventSubscriptionsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]?
}

extension DescribeEventSubscriptionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSubscriptionsList = "EventSubscriptionsList"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEventSubscriptionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.eventSubscriptionsList) {
            struct KeyVal0{struct EventSubscription{}}
            let eventSubscriptionsListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventSubscription>.CodingKeys.self, forKey: .eventSubscriptionsList)
            if let eventSubscriptionsListWrappedContainer = eventSubscriptionsListWrappedContainer {
                let eventSubscriptionsListContainer = try eventSubscriptionsListWrappedContainer.decodeIfPresent([RedshiftClientTypes.EventSubscription].self, forKey: .member)
                var eventSubscriptionsListBuffer:[RedshiftClientTypes.EventSubscription]? = nil
                if let eventSubscriptionsListContainer = eventSubscriptionsListContainer {
                    eventSubscriptionsListBuffer = [RedshiftClientTypes.EventSubscription]()
                    for structureContainer0 in eventSubscriptionsListContainer {
                        eventSubscriptionsListBuffer?.append(structureContainer0)
                    }
                }
                eventSubscriptionsList = eventSubscriptionsListBuffer
            } else {
                eventSubscriptionsList = []
            }
        } else {
            eventSubscriptionsList = nil
        }
    }
}

enum DescribeEventSubscriptionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionNotFound": return try await SubscriptionNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeEventsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        try container.encode("DescribeEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeEventsInput: Swift.Equatable {
    /// The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned. Default: 60
    public var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var endTime: ClientRuntime.Date?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeEvents] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.
    ///
    /// * Specify a cluster identifier when SourceType is cluster.
    ///
    /// * Specify a cluster security group name when SourceType is cluster-security-group.
    ///
    /// * Specify a cluster parameter group name when SourceType is cluster-parameter-group.
    ///
    /// * Specify a cluster snapshot identifier when SourceType is cluster-snapshot.
    public var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be provided.
    ///
    /// * Specify cluster when SourceIdentifier is a cluster identifier.
    ///
    /// * Specify cluster-security-group when SourceIdentifier is a cluster security group name.
    ///
    /// * Specify cluster-parameter-group when SourceIdentifier is a cluster parameter group name.
    ///
    /// * Specify cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.
    public var sourceType: RedshiftClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var startTime: ClientRuntime.Date?

    public init(
        duration: Swift.Int? = nil,
        endTime: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: RedshiftClientTypes.SourceType? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

struct DescribeEventsInputBody: Swift.Equatable {
    let sourceIdentifier: Swift.String?
    let sourceType: RedshiftClientTypes.SourceType?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let duration: Swift.Int?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case endTime = "EndTime"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
        case startTime = "StartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeEventsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeEventsOutputBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.marker = output.marker
        } else {
            self.events = nil
            self.marker = nil
        }
    }
}

///
public struct DescribeEventsOutput: Swift.Equatable {
    /// A list of Event instances.
    public var events: [RedshiftClientTypes.Event]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        events: [RedshiftClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

struct DescribeEventsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let events: [RedshiftClientTypes.Event]?
}

extension DescribeEventsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEventsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.events) {
            struct KeyVal0{struct Event{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Event>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Event].self, forKey: .member)
                var eventsBuffer:[RedshiftClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [RedshiftClientTypes.Event]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
    }
}

enum DescribeEventsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeHsmClientCertificatesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeHsmClientCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeHsmClientCertificatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeHsmClientCertificatesInput: Swift.Equatable {
    /// The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your Amazon Web Services account.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeHsmClientCertificates] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeHsmClientCertificatesInputBody: Swift.Equatable {
    let hsmClientCertificateIdentifier: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeHsmClientCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeHsmClientCertificatesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeHsmClientCertificatesOutputBody = try responseDecoder.decode(responseBody: data)
            self.hsmClientCertificates = output.hsmClientCertificates
            self.marker = output.marker
        } else {
            self.hsmClientCertificates = nil
            self.marker = nil
        }
    }
}

///
public struct DescribeHsmClientCertificatesOutput: Swift.Equatable {
    /// A list of the identifiers for one or more HSM client certificates used by Amazon Redshift clusters to store and retrieve database encryption keys in an HSM.
    public var hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hsmClientCertificates = hsmClientCertificates
        self.marker = marker
    }
}

struct DescribeHsmClientCertificatesOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]?
}

extension DescribeHsmClientCertificatesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificates = "HsmClientCertificates"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeHsmClientCertificatesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.hsmClientCertificates) {
            struct KeyVal0{struct HsmClientCertificate{}}
            let hsmClientCertificatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HsmClientCertificate>.CodingKeys.self, forKey: .hsmClientCertificates)
            if let hsmClientCertificatesWrappedContainer = hsmClientCertificatesWrappedContainer {
                let hsmClientCertificatesContainer = try hsmClientCertificatesWrappedContainer.decodeIfPresent([RedshiftClientTypes.HsmClientCertificate].self, forKey: .member)
                var hsmClientCertificatesBuffer:[RedshiftClientTypes.HsmClientCertificate]? = nil
                if let hsmClientCertificatesContainer = hsmClientCertificatesContainer {
                    hsmClientCertificatesBuffer = [RedshiftClientTypes.HsmClientCertificate]()
                    for structureContainer0 in hsmClientCertificatesContainer {
                        hsmClientCertificatesBuffer?.append(structureContainer0)
                    }
                }
                hsmClientCertificates = hsmClientCertificatesBuffer
            } else {
                hsmClientCertificates = []
            }
        } else {
            hsmClientCertificates = nil
        }
    }
}

enum DescribeHsmClientCertificatesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeHsmConfigurationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeHsmConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeHsmConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeHsmConfigurationsInput: Swift.Equatable {
    /// The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your Amazon Web Services account.
    public var hsmConfigurationIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeHsmConfigurations] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        hsmConfigurationIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeHsmConfigurationsInputBody: Swift.Equatable {
    let hsmConfigurationIdentifier: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeHsmConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeHsmConfigurationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeHsmConfigurationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.hsmConfigurations = output.hsmConfigurations
            self.marker = output.marker
        } else {
            self.hsmConfigurations = nil
            self.marker = nil
        }
    }
}

///
public struct DescribeHsmConfigurationsOutput: Swift.Equatable {
    /// A list of HsmConfiguration objects.
    public var hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hsmConfigurations = hsmConfigurations
        self.marker = marker
    }
}

struct DescribeHsmConfigurationsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]?
}

extension DescribeHsmConfigurationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfigurations = "HsmConfigurations"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeHsmConfigurationsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.hsmConfigurations) {
            struct KeyVal0{struct HsmConfiguration{}}
            let hsmConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HsmConfiguration>.CodingKeys.self, forKey: .hsmConfigurations)
            if let hsmConfigurationsWrappedContainer = hsmConfigurationsWrappedContainer {
                let hsmConfigurationsContainer = try hsmConfigurationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.HsmConfiguration].self, forKey: .member)
                var hsmConfigurationsBuffer:[RedshiftClientTypes.HsmConfiguration]? = nil
                if let hsmConfigurationsContainer = hsmConfigurationsContainer {
                    hsmConfigurationsBuffer = [RedshiftClientTypes.HsmConfiguration]()
                    for structureContainer0 in hsmConfigurationsContainer {
                        hsmConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                hsmConfigurations = hsmConfigurationsBuffer
            } else {
                hsmConfigurations = []
            }
        } else {
            hsmConfigurations = nil
        }
    }
}

enum DescribeHsmConfigurationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeInboundIntegrationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let integrationArn = integrationArn {
            try container.encode(integrationArn, forKey: ClientRuntime.Key("IntegrationArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
        try container.encode("DescribeInboundIntegrations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeInboundIntegrationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInboundIntegrationsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inbound integration.
    public var integrationArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeInboundIntegrations] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the target of an inbound integration.
    public var targetArn: Swift.String?

    public init(
        integrationArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.integrationArn = integrationArn
        self.marker = marker
        self.maxRecords = maxRecords
        self.targetArn = targetArn
    }
}

struct DescribeInboundIntegrationsInputBody: Swift.Equatable {
    let integrationArn: Swift.String?
    let targetArn: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeInboundIntegrationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationArn = "IntegrationArn"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case targetArn = "TargetArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationArn)
        integrationArn = integrationArnDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeInboundIntegrationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeInboundIntegrationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.inboundIntegrations = output.inboundIntegrations
            self.marker = output.marker
        } else {
            self.inboundIntegrations = nil
            self.marker = nil
        }
    }
}

public struct DescribeInboundIntegrationsOutput: Swift.Equatable {
    /// A list of [InboundIntegration] instances.
    public var inboundIntegrations: [RedshiftClientTypes.InboundIntegration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        inboundIntegrations: [RedshiftClientTypes.InboundIntegration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.inboundIntegrations = inboundIntegrations
        self.marker = marker
    }
}

struct DescribeInboundIntegrationsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let inboundIntegrations: [RedshiftClientTypes.InboundIntegration]?
}

extension DescribeInboundIntegrationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inboundIntegrations = "InboundIntegrations"
        case marker = "Marker"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInboundIntegrationsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.inboundIntegrations) {
            struct KeyVal0{struct InboundIntegration{}}
            let inboundIntegrationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.InboundIntegration>.CodingKeys.self, forKey: .inboundIntegrations)
            if let inboundIntegrationsWrappedContainer = inboundIntegrationsWrappedContainer {
                let inboundIntegrationsContainer = try inboundIntegrationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.InboundIntegration].self, forKey: .member)
                var inboundIntegrationsBuffer:[RedshiftClientTypes.InboundIntegration]? = nil
                if let inboundIntegrationsContainer = inboundIntegrationsContainer {
                    inboundIntegrationsBuffer = [RedshiftClientTypes.InboundIntegration]()
                    for structureContainer0 in inboundIntegrationsContainer {
                        inboundIntegrationsBuffer?.append(structureContainer0)
                    }
                }
                inboundIntegrations = inboundIntegrationsBuffer
            } else {
                inboundIntegrations = []
            }
        } else {
            inboundIntegrations = nil
        }
    }
}

enum DescribeInboundIntegrationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "IntegrationNotFoundFault": return try await IntegrationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidNamespaceFault": return try await InvalidNamespaceFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeLoggingStatusInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DescribeLoggingStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLoggingStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeLoggingStatusInput: Swift.Equatable {
    /// The identifier of the cluster from which to get the logging status. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct DescribeLoggingStatusInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension DescribeLoggingStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension DescribeLoggingStatusOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLoggingStatusOutputBody = try responseDecoder.decode(responseBody: data)
            self.bucketName = output.bucketName
            self.lastFailureMessage = output.lastFailureMessage
            self.lastFailureTime = output.lastFailureTime
            self.lastSuccessfulDeliveryTime = output.lastSuccessfulDeliveryTime
            self.logDestinationType = output.logDestinationType
            self.logExports = output.logExports
            self.loggingEnabled = output.loggingEnabled
            self.s3KeyPrefix = output.s3KeyPrefix
        } else {
            self.bucketName = nil
            self.lastFailureMessage = nil
            self.lastFailureTime = nil
            self.lastSuccessfulDeliveryTime = nil
            self.logDestinationType = nil
            self.logExports = nil
            self.loggingEnabled = nil
            self.s3KeyPrefix = nil
        }
    }
}

/// Describes the status of logging for a cluster.
public struct DescribeLoggingStatusOutput: Swift.Equatable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: ClientRuntime.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: ClientRuntime.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: ClientRuntime.Date? = nil,
        lastSuccessfulDeliveryTime: ClientRuntime.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

struct DescribeLoggingStatusOutputBody: Swift.Equatable {
    let loggingEnabled: Swift.Bool?
    let bucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let lastSuccessfulDeliveryTime: ClientRuntime.Date?
    let lastFailureTime: ClientRuntime.Date?
    let lastFailureMessage: Swift.String?
    let logDestinationType: RedshiftClientTypes.LogDestinationType?
    let logExports: [Swift.String]?
}

extension DescribeLoggingStatusOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case lastFailureMessage = "LastFailureMessage"
        case lastFailureTime = "LastFailureTime"
        case lastSuccessfulDeliveryTime = "LastSuccessfulDeliveryTime"
        case logDestinationType = "LogDestinationType"
        case logExports = "LogExports"
        case loggingEnabled = "LoggingEnabled"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLoggingStatusResult"))
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let lastSuccessfulDeliveryTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastSuccessfulDeliveryTime)
        lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTimeDecoded
        let lastFailureTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastFailureTime)
        lastFailureTime = lastFailureTimeDecoded
        let lastFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureMessage)
        lastFailureMessage = lastFailureMessageDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        if containerValues.contains(.logExports) {
            struct KeyVal0{struct member{}}
            let logExportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logExports)
            if let logExportsWrappedContainer = logExportsWrappedContainer {
                let logExportsContainer = try logExportsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logExportsBuffer:[Swift.String]? = nil
                if let logExportsContainer = logExportsContainer {
                    logExportsBuffer = [Swift.String]()
                    for stringContainer0 in logExportsContainer {
                        logExportsBuffer?.append(stringContainer0)
                    }
                }
                logExports = logExportsBuffer
            } else {
                logExports = []
            }
        } else {
            logExports = nil
        }
    }
}

enum DescribeLoggingStatusOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeNodeConfigurationOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                for (index0, nodeconfigurationoptionsfilter0) in filters.enumerated() {
                    try filtersContainer.encode(nodeconfigurationoptionsfilter0, forKey: ClientRuntime.Key("NodeConfigurationOptionsFilter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filter"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("DescribeNodeConfigurationOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeNodeConfigurationOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeNodeConfigurationOptionsInput: Swift.Equatable {
    /// The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster.
    /// This member is required.
    public var actionType: RedshiftClientTypes.ActionType?
    /// The identifier of the cluster to evaluate for possible node configurations.
    public var clusterIdentifier: Swift.String?
    /// A set of name, operator, and value items to filter the results.
    public var filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeNodeConfigurationOptions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 500 Constraints: minimum 100, maximum 500.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    public var ownerAccount: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to describe node configuration.
    public var snapshotArn: Swift.String?
    /// The identifier of the snapshot to evaluate for possible node configurations.
    public var snapshotIdentifier: Swift.String?

    public init(
        actionType: RedshiftClientTypes.ActionType? = nil,
        clusterIdentifier: Swift.String? = nil,
        filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.clusterIdentifier = clusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotArn = snapshotArn
        self.snapshotIdentifier = snapshotIdentifier
    }
}

struct DescribeNodeConfigurationOptionsInputBody: Swift.Equatable {
    let actionType: RedshiftClientTypes.ActionType?
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let ownerAccount: Swift.String?
    let filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]?
    let marker: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeNodeConfigurationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case clusterIdentifier = "ClusterIdentifier"
        case filters = "Filter"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case ownerAccount = "OwnerAccount"
        case snapshotArn = "SnapshotArn"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct NodeConfigurationOptionsFilter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeConfigurationOptionsFilter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([RedshiftClientTypes.NodeConfigurationOptionsFilter].self, forKey: .member)
                var filtersBuffer:[RedshiftClientTypes.NodeConfigurationOptionsFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [RedshiftClientTypes.NodeConfigurationOptionsFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeNodeConfigurationOptionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeNodeConfigurationOptionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.nodeConfigurationOptionList = output.nodeConfigurationOptionList
        } else {
            self.marker = nil
            self.nodeConfigurationOptionList = nil
        }
    }
}

public struct DescribeNodeConfigurationOptionsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of valid node configurations.
    public var nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]?

    public init(
        marker: Swift.String? = nil,
        nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]? = nil
    )
    {
        self.marker = marker
        self.nodeConfigurationOptionList = nodeConfigurationOptionList
    }
}

struct DescribeNodeConfigurationOptionsOutputBody: Swift.Equatable {
    let nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]?
    let marker: Swift.String?
}

extension DescribeNodeConfigurationOptionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case nodeConfigurationOptionList = "NodeConfigurationOptionList"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeNodeConfigurationOptionsResult"))
        if containerValues.contains(.nodeConfigurationOptionList) {
            struct KeyVal0{struct NodeConfigurationOption{}}
            let nodeConfigurationOptionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeConfigurationOption>.CodingKeys.self, forKey: .nodeConfigurationOptionList)
            if let nodeConfigurationOptionListWrappedContainer = nodeConfigurationOptionListWrappedContainer {
                let nodeConfigurationOptionListContainer = try nodeConfigurationOptionListWrappedContainer.decodeIfPresent([RedshiftClientTypes.NodeConfigurationOption].self, forKey: .member)
                var nodeConfigurationOptionListBuffer:[RedshiftClientTypes.NodeConfigurationOption]? = nil
                if let nodeConfigurationOptionListContainer = nodeConfigurationOptionListContainer {
                    nodeConfigurationOptionListBuffer = [RedshiftClientTypes.NodeConfigurationOption]()
                    for structureContainer0 in nodeConfigurationOptionListContainer {
                        nodeConfigurationOptionListBuffer?.append(structureContainer0)
                    }
                }
                nodeConfigurationOptionList = nodeConfigurationOptionListBuffer
            } else {
                nodeConfigurationOptionList = []
            }
        } else {
            nodeConfigurationOptionList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeNodeConfigurationOptionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AccessToSnapshotDenied": return try await AccessToSnapshotDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeOrderableClusterOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        try container.encode("DescribeOrderableClusterOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeOrderableClusterOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeOrderableClusterOptionsInput: Swift.Equatable {
    /// The version filter value. Specify this parameter to show only the available offerings matching the specified version. Default: All versions. Constraints: Must be one of the version returned from [DescribeClusterVersions].
    public var clusterVersion: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeOrderableClusterOptions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
    public var nodeType: Swift.String?

    public init(
        clusterVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nodeType: Swift.String? = nil
    )
    {
        self.clusterVersion = clusterVersion
        self.marker = marker
        self.maxRecords = maxRecords
        self.nodeType = nodeType
    }
}

struct DescribeOrderableClusterOptionsInputBody: Swift.Equatable {
    let clusterVersion: Swift.String?
    let nodeType: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeOrderableClusterOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterVersion = "ClusterVersion"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case nodeType = "NodeType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeOrderableClusterOptionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeOrderableClusterOptionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.orderableClusterOptions = output.orderableClusterOptions
        } else {
            self.marker = nil
            self.orderableClusterOptions = nil
        }
    }
}

/// Contains the output from the [DescribeOrderableClusterOptions] action.
public struct DescribeOrderableClusterOptionsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// An OrderableClusterOption structure containing information about orderable options for the cluster.
    public var orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]?

    public init(
        marker: Swift.String? = nil,
        orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]? = nil
    )
    {
        self.marker = marker
        self.orderableClusterOptions = orderableClusterOptions
    }
}

struct DescribeOrderableClusterOptionsOutputBody: Swift.Equatable {
    let orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]?
    let marker: Swift.String?
}

extension DescribeOrderableClusterOptionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case orderableClusterOptions = "OrderableClusterOptions"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeOrderableClusterOptionsResult"))
        if containerValues.contains(.orderableClusterOptions) {
            struct KeyVal0{struct OrderableClusterOption{}}
            let orderableClusterOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OrderableClusterOption>.CodingKeys.self, forKey: .orderableClusterOptions)
            if let orderableClusterOptionsWrappedContainer = orderableClusterOptionsWrappedContainer {
                let orderableClusterOptionsContainer = try orderableClusterOptionsWrappedContainer.decodeIfPresent([RedshiftClientTypes.OrderableClusterOption].self, forKey: .member)
                var orderableClusterOptionsBuffer:[RedshiftClientTypes.OrderableClusterOption]? = nil
                if let orderableClusterOptionsContainer = orderableClusterOptionsContainer {
                    orderableClusterOptionsBuffer = [RedshiftClientTypes.OrderableClusterOption]()
                    for structureContainer0 in orderableClusterOptionsContainer {
                        orderableClusterOptionsBuffer?.append(structureContainer0)
                    }
                }
                orderableClusterOptions = orderableClusterOptionsBuffer
            } else {
                orderableClusterOptions = []
            }
        } else {
            orderableClusterOptions = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeOrderableClusterOptionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribePartnersInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        try container.encode("DescribePartners", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePartnersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePartnersInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster whose partner integration is being described.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.
    public var databaseName: Swift.String?
    /// The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

struct DescribePartnersInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let clusterIdentifier: Swift.String?
    let databaseName: Swift.String?
    let partnerName: Swift.String?
}

extension DescribePartnersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
    }
}

extension DescribePartnersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribePartnersOutputBody = try responseDecoder.decode(responseBody: data)
            self.partnerIntegrationInfoList = output.partnerIntegrationInfoList
        } else {
            self.partnerIntegrationInfoList = nil
        }
    }
}

public struct DescribePartnersOutput: Swift.Equatable {
    /// A list of partner integrations.
    public var partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]?

    public init(
        partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]? = nil
    )
    {
        self.partnerIntegrationInfoList = partnerIntegrationInfoList
    }
}

struct DescribePartnersOutputBody: Swift.Equatable {
    let partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]?
}

extension DescribePartnersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partnerIntegrationInfoList = "PartnerIntegrationInfoList"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribePartnersResult"))
        if containerValues.contains(.partnerIntegrationInfoList) {
            struct KeyVal0{struct PartnerIntegrationInfo{}}
            let partnerIntegrationInfoListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PartnerIntegrationInfo>.CodingKeys.self, forKey: .partnerIntegrationInfoList)
            if let partnerIntegrationInfoListWrappedContainer = partnerIntegrationInfoListWrappedContainer {
                let partnerIntegrationInfoListContainer = try partnerIntegrationInfoListWrappedContainer.decodeIfPresent([RedshiftClientTypes.PartnerIntegrationInfo].self, forKey: .member)
                var partnerIntegrationInfoListBuffer:[RedshiftClientTypes.PartnerIntegrationInfo]? = nil
                if let partnerIntegrationInfoListContainer = partnerIntegrationInfoListContainer {
                    partnerIntegrationInfoListBuffer = [RedshiftClientTypes.PartnerIntegrationInfo]()
                    for structureContainer0 in partnerIntegrationInfoListContainer {
                        partnerIntegrationInfoListBuffer?.append(structureContainer0)
                    }
                }
                partnerIntegrationInfoList = partnerIntegrationInfoListBuffer
            } else {
                partnerIntegrationInfoList = []
            }
        } else {
            partnerIntegrationInfoList = nil
        }
    }
}

enum DescribePartnersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeRedshiftIdcApplicationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        try container.encode("DescribeRedshiftIdcApplications", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeRedshiftIdcApplicationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRedshiftIdcApplicationsInput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    public var redshiftIdcApplicationArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
    }
}

struct DescribeRedshiftIdcApplicationsInputBody: Swift.Equatable {
    let redshiftIdcApplicationArn: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeRedshiftIdcApplicationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftIdcApplicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationArn)
        redshiftIdcApplicationArn = redshiftIdcApplicationArnDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeRedshiftIdcApplicationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeRedshiftIdcApplicationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.redshiftIdcApplications = output.redshiftIdcApplications
        } else {
            self.marker = nil
            self.redshiftIdcApplications = nil
        }
    }
}

public struct DescribeRedshiftIdcApplicationsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The list of Amazon Redshift IAM Identity Center applications.
    public var redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]?

    public init(
        marker: Swift.String? = nil,
        redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]? = nil
    )
    {
        self.marker = marker
        self.redshiftIdcApplications = redshiftIdcApplications
    }
}

struct DescribeRedshiftIdcApplicationsOutputBody: Swift.Equatable {
    let redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]?
    let marker: Swift.String?
}

extension DescribeRedshiftIdcApplicationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case redshiftIdcApplications = "RedshiftIdcApplications"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeRedshiftIdcApplicationsResult"))
        if containerValues.contains(.redshiftIdcApplications) {
            struct KeyVal0{struct member{}}
            let redshiftIdcApplicationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .redshiftIdcApplications)
            if let redshiftIdcApplicationsWrappedContainer = redshiftIdcApplicationsWrappedContainer {
                let redshiftIdcApplicationsContainer = try redshiftIdcApplicationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.RedshiftIdcApplication].self, forKey: .member)
                var redshiftIdcApplicationsBuffer:[RedshiftClientTypes.RedshiftIdcApplication]? = nil
                if let redshiftIdcApplicationsContainer = redshiftIdcApplicationsContainer {
                    redshiftIdcApplicationsBuffer = [RedshiftClientTypes.RedshiftIdcApplication]()
                    for structureContainer0 in redshiftIdcApplicationsContainer {
                        redshiftIdcApplicationsBuffer?.append(structureContainer0)
                    }
                }
                redshiftIdcApplications = redshiftIdcApplicationsBuffer
            } else {
                redshiftIdcApplications = []
            }
        } else {
            redshiftIdcApplications = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeRedshiftIdcApplicationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeReservedNodeExchangeStatusInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeExchangeRequestId = reservedNodeExchangeRequestId {
            try container.encode(reservedNodeExchangeRequestId, forKey: ClientRuntime.Key("ReservedNodeExchangeRequestId"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        try container.encode("DescribeReservedNodeExchangeStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedNodeExchangeStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeReservedNodeExchangeStatusInput: Swift.Equatable {
    /// An optional pagination token provided by a previous DescribeReservedNodeExchangeStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a Marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The identifier of the reserved-node exchange request.
    public var reservedNodeExchangeRequestId: Swift.String?
    /// The identifier of the source reserved node in a reserved-node exchange request.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeExchangeRequestId: Swift.String? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeExchangeRequestId = reservedNodeExchangeRequestId
        self.reservedNodeId = reservedNodeId
    }
}

struct DescribeReservedNodeExchangeStatusInputBody: Swift.Equatable {
    let reservedNodeId: Swift.String?
    let reservedNodeExchangeRequestId: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeReservedNodeExchangeStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeExchangeRequestId = "ReservedNodeExchangeRequestId"
        case reservedNodeId = "ReservedNodeId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let reservedNodeExchangeRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeExchangeRequestId)
        reservedNodeExchangeRequestId = reservedNodeExchangeRequestIdDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeReservedNodeExchangeStatusOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeReservedNodeExchangeStatusOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedNodeExchangeStatusDetails = output.reservedNodeExchangeStatusDetails
        } else {
            self.marker = nil
            self.reservedNodeExchangeStatusDetails = nil
        }
    }
}

public struct DescribeReservedNodeExchangeStatusOutput: Swift.Equatable {
    /// A pagination token provided by a previous DescribeReservedNodeExchangeStatus request.
    public var marker: Swift.String?
    /// The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.
    public var reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeExchangeStatusDetails = reservedNodeExchangeStatusDetails
    }
}

struct DescribeReservedNodeExchangeStatusOutputBody: Swift.Equatable {
    let reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]?
    let marker: Swift.String?
}

extension DescribeReservedNodeExchangeStatusOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeExchangeStatusDetails = "ReservedNodeExchangeStatusDetails"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedNodeExchangeStatusResult"))
        if containerValues.contains(.reservedNodeExchangeStatusDetails) {
            struct KeyVal0{struct ReservedNodeExchangeStatus{}}
            let reservedNodeExchangeStatusDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeExchangeStatus>.CodingKeys.self, forKey: .reservedNodeExchangeStatusDetails)
            if let reservedNodeExchangeStatusDetailsWrappedContainer = reservedNodeExchangeStatusDetailsWrappedContainer {
                let reservedNodeExchangeStatusDetailsContainer = try reservedNodeExchangeStatusDetailsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeExchangeStatus].self, forKey: .member)
                var reservedNodeExchangeStatusDetailsBuffer:[RedshiftClientTypes.ReservedNodeExchangeStatus]? = nil
                if let reservedNodeExchangeStatusDetailsContainer = reservedNodeExchangeStatusDetailsContainer {
                    reservedNodeExchangeStatusDetailsBuffer = [RedshiftClientTypes.ReservedNodeExchangeStatus]()
                    for structureContainer0 in reservedNodeExchangeStatusDetailsContainer {
                        reservedNodeExchangeStatusDetailsBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeExchangeStatusDetails = reservedNodeExchangeStatusDetailsBuffer
            } else {
                reservedNodeExchangeStatusDetails = []
            }
        } else {
            reservedNodeExchangeStatusDetails = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeReservedNodeExchangeStatusOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ReservedNodeExchangeNotFond": return try await ReservedNodeExchangeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeReservedNodeOfferingsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        try container.encode("DescribeReservedNodeOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedNodeOfferingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeReservedNodeOfferingsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeReservedNodeOfferings] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The unique identifier for the offering.
    public var reservedNodeOfferingId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeOfferingId = reservedNodeOfferingId
    }
}

struct DescribeReservedNodeOfferingsInputBody: Swift.Equatable {
    let reservedNodeOfferingId: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeReservedNodeOfferingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeOfferingId)
        reservedNodeOfferingId = reservedNodeOfferingIdDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeReservedNodeOfferingsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeReservedNodeOfferingsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedNodeOfferings = output.reservedNodeOfferings
        } else {
            self.marker = nil
            self.reservedNodeOfferings = nil
        }
    }
}

///
public struct DescribeReservedNodeOfferingsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of ReservedNodeOffering objects.
    public var reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeOfferings = reservedNodeOfferings
    }
}

struct DescribeReservedNodeOfferingsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?
}

extension DescribeReservedNodeOfferingsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeOfferings = "ReservedNodeOfferings"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedNodeOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodeOfferings) {
            struct KeyVal0{struct ReservedNodeOffering{}}
            let reservedNodeOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeOffering>.CodingKeys.self, forKey: .reservedNodeOfferings)
            if let reservedNodeOfferingsWrappedContainer = reservedNodeOfferingsWrappedContainer {
                let reservedNodeOfferingsContainer = try reservedNodeOfferingsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeOffering].self, forKey: .member)
                var reservedNodeOfferingsBuffer:[RedshiftClientTypes.ReservedNodeOffering]? = nil
                if let reservedNodeOfferingsContainer = reservedNodeOfferingsContainer {
                    reservedNodeOfferingsBuffer = [RedshiftClientTypes.ReservedNodeOffering]()
                    for structureContainer0 in reservedNodeOfferingsContainer {
                        reservedNodeOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeOfferings = reservedNodeOfferingsBuffer
            } else {
                reservedNodeOfferings = []
            }
        } else {
            reservedNodeOfferings = nil
        }
    }
}

enum DescribeReservedNodeOfferingsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeReservedNodesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        try container.encode("DescribeReservedNodes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedNodesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeReservedNodesInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeReservedNodes] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// Identifier for the node reservation.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeId = reservedNodeId
    }
}

struct DescribeReservedNodesInputBody: Swift.Equatable {
    let reservedNodeId: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeReservedNodesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeId = "ReservedNodeId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeReservedNodesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeReservedNodesOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedNodes = output.reservedNodes
        } else {
            self.marker = nil
            self.reservedNodes = nil
        }
    }
}

///
public struct DescribeReservedNodesOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The list of ReservedNode objects.
    public var reservedNodes: [RedshiftClientTypes.ReservedNode]?

    public init(
        marker: Swift.String? = nil,
        reservedNodes: [RedshiftClientTypes.ReservedNode]? = nil
    )
    {
        self.marker = marker
        self.reservedNodes = reservedNodes
    }
}

struct DescribeReservedNodesOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedNodes: [RedshiftClientTypes.ReservedNode]?
}

extension DescribeReservedNodesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodes = "ReservedNodes"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedNodesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodes) {
            struct KeyVal0{struct ReservedNode{}}
            let reservedNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNode>.CodingKeys.self, forKey: .reservedNodes)
            if let reservedNodesWrappedContainer = reservedNodesWrappedContainer {
                let reservedNodesContainer = try reservedNodesWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNode].self, forKey: .member)
                var reservedNodesBuffer:[RedshiftClientTypes.ReservedNode]? = nil
                if let reservedNodesContainer = reservedNodesContainer {
                    reservedNodesBuffer = [RedshiftClientTypes.ReservedNode]()
                    for structureContainer0 in reservedNodesContainer {
                        reservedNodesBuffer?.append(structureContainer0)
                    }
                }
                reservedNodes = reservedNodesBuffer
            } else {
                reservedNodes = []
            }
        } else {
            reservedNodes = nil
        }
    }
}

enum DescribeReservedNodesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeResizeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DescribeResize", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeResizeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeResizeInput: Swift.Equatable {
    /// The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive. By default, resize operations for all clusters defined for an Amazon Web Services account are returned.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct DescribeResizeInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension DescribeResizeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension DescribeResizeOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeResizeOutputBody = try responseDecoder.decode(responseBody: data)
            self.avgResizeRateInMegaBytesPerSecond = output.avgResizeRateInMegaBytesPerSecond
            self.dataTransferProgressPercent = output.dataTransferProgressPercent
            self.elapsedTimeInSeconds = output.elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = output.estimatedTimeToCompletionInSeconds
            self.importTablesCompleted = output.importTablesCompleted
            self.importTablesInProgress = output.importTablesInProgress
            self.importTablesNotStarted = output.importTablesNotStarted
            self.message = output.message
            self.progressInMegaBytes = output.progressInMegaBytes
            self.resizeType = output.resizeType
            self.status = output.status
            self.targetClusterType = output.targetClusterType
            self.targetEncryptionType = output.targetEncryptionType
            self.targetNodeType = output.targetNodeType
            self.targetNumberOfNodes = output.targetNumberOfNodes
            self.totalResizeDataInMegaBytes = output.totalResizeDataInMegaBytes
        } else {
            self.avgResizeRateInMegaBytesPerSecond = nil
            self.dataTransferProgressPercent = nil
            self.elapsedTimeInSeconds = nil
            self.estimatedTimeToCompletionInSeconds = nil
            self.importTablesCompleted = nil
            self.importTablesInProgress = nil
            self.importTablesNotStarted = nil
            self.message = nil
            self.progressInMegaBytes = nil
            self.resizeType = nil
            self.status = nil
            self.targetClusterType = nil
            self.targetEncryptionType = nil
            self.targetNodeType = nil
            self.targetNumberOfNodes = nil
            self.totalResizeDataInMegaBytes = nil
        }
    }
}

/// Describes the result of a cluster resize operation.
public struct DescribeResizeOutput: Swift.Equatable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init(
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}

struct DescribeResizeOutputBody: Swift.Equatable {
    let targetNodeType: Swift.String?
    let targetNumberOfNodes: Swift.Int?
    let targetClusterType: Swift.String?
    let status: Swift.String?
    let importTablesCompleted: [Swift.String]?
    let importTablesInProgress: [Swift.String]?
    let importTablesNotStarted: [Swift.String]?
    let avgResizeRateInMegaBytesPerSecond: Swift.Double?
    let totalResizeDataInMegaBytes: Swift.Int?
    let progressInMegaBytes: Swift.Int?
    let elapsedTimeInSeconds: Swift.Int?
    let estimatedTimeToCompletionInSeconds: Swift.Int?
    let resizeType: Swift.String?
    let message: Swift.String?
    let targetEncryptionType: Swift.String?
    let dataTransferProgressPercent: Swift.Double?
}

extension DescribeResizeOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case avgResizeRateInMegaBytesPerSecond = "AvgResizeRateInMegaBytesPerSecond"
        case dataTransferProgressPercent = "DataTransferProgressPercent"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case importTablesCompleted = "ImportTablesCompleted"
        case importTablesInProgress = "ImportTablesInProgress"
        case importTablesNotStarted = "ImportTablesNotStarted"
        case message = "Message"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case resizeType = "ResizeType"
        case status = "Status"
        case targetClusterType = "TargetClusterType"
        case targetEncryptionType = "TargetEncryptionType"
        case targetNodeType = "TargetNodeType"
        case targetNumberOfNodes = "TargetNumberOfNodes"
        case totalResizeDataInMegaBytes = "TotalResizeDataInMegaBytes"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeResizeResult"))
        let targetNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetNodeType)
        targetNodeType = targetNodeTypeDecoded
        let targetNumberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetNumberOfNodes)
        targetNumberOfNodes = targetNumberOfNodesDecoded
        let targetClusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetClusterType)
        targetClusterType = targetClusterTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.importTablesCompleted) {
            struct KeyVal0{struct member{}}
            let importTablesCompletedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .importTablesCompleted)
            if let importTablesCompletedWrappedContainer = importTablesCompletedWrappedContainer {
                let importTablesCompletedContainer = try importTablesCompletedWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importTablesCompletedBuffer:[Swift.String]? = nil
                if let importTablesCompletedContainer = importTablesCompletedContainer {
                    importTablesCompletedBuffer = [Swift.String]()
                    for stringContainer0 in importTablesCompletedContainer {
                        importTablesCompletedBuffer?.append(stringContainer0)
                    }
                }
                importTablesCompleted = importTablesCompletedBuffer
            } else {
                importTablesCompleted = []
            }
        } else {
            importTablesCompleted = nil
        }
        if containerValues.contains(.importTablesInProgress) {
            struct KeyVal0{struct member{}}
            let importTablesInProgressWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .importTablesInProgress)
            if let importTablesInProgressWrappedContainer = importTablesInProgressWrappedContainer {
                let importTablesInProgressContainer = try importTablesInProgressWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importTablesInProgressBuffer:[Swift.String]? = nil
                if let importTablesInProgressContainer = importTablesInProgressContainer {
                    importTablesInProgressBuffer = [Swift.String]()
                    for stringContainer0 in importTablesInProgressContainer {
                        importTablesInProgressBuffer?.append(stringContainer0)
                    }
                }
                importTablesInProgress = importTablesInProgressBuffer
            } else {
                importTablesInProgress = []
            }
        } else {
            importTablesInProgress = nil
        }
        if containerValues.contains(.importTablesNotStarted) {
            struct KeyVal0{struct member{}}
            let importTablesNotStartedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .importTablesNotStarted)
            if let importTablesNotStartedWrappedContainer = importTablesNotStartedWrappedContainer {
                let importTablesNotStartedContainer = try importTablesNotStartedWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importTablesNotStartedBuffer:[Swift.String]? = nil
                if let importTablesNotStartedContainer = importTablesNotStartedContainer {
                    importTablesNotStartedBuffer = [Swift.String]()
                    for stringContainer0 in importTablesNotStartedContainer {
                        importTablesNotStartedBuffer?.append(stringContainer0)
                    }
                }
                importTablesNotStarted = importTablesNotStartedBuffer
            } else {
                importTablesNotStarted = []
            }
        } else {
            importTablesNotStarted = nil
        }
        let avgResizeRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .avgResizeRateInMegaBytesPerSecond)
        avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecondDecoded
        let totalResizeDataInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalResizeDataInMegaBytes)
        totalResizeDataInMegaBytes = totalResizeDataInMegaBytesDecoded
        let progressInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressInMegaBytes)
        progressInMegaBytes = progressInMegaBytesDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
        let resizeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resizeType)
        resizeType = resizeTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let targetEncryptionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetEncryptionType)
        targetEncryptionType = targetEncryptionTypeDecoded
        let dataTransferProgressPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dataTransferProgressPercent)
        dataTransferProgressPercent = dataTransferProgressPercentDecoded
    }
}

enum DescribeResizeOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResizeNotFound": return try await ResizeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeScheduledActionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let active = active {
            try container.encode(active, forKey: ClientRuntime.Key("Active"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, scheduledactionfilter0) in filters.enumerated() {
                    try filtersContainer.encode(scheduledactionfilter0, forKey: ClientRuntime.Key("ScheduledActionFilter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let targetActionType = targetActionType {
            try container.encode(targetActionType, forKey: ClientRuntime.Key("TargetActionType"))
        }
        try container.encode("DescribeScheduledActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeScheduledActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeScheduledActionsInput: Swift.Equatable {
    /// If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions.
    public var active: Swift.Bool?
    /// The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
    public var endTime: ClientRuntime.Date?
    /// List of scheduled action filters.
    public var filters: [RedshiftClientTypes.ScheduledActionFilter]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeScheduledActions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the scheduled action to retrieve.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
    public var startTime: ClientRuntime.Date?
    /// The type of the scheduled actions to retrieve.
    public var targetActionType: RedshiftClientTypes.ScheduledActionTypeValues?

    public init(
        active: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        filters: [RedshiftClientTypes.ScheduledActionFilter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetActionType: RedshiftClientTypes.ScheduledActionTypeValues? = nil
    )
    {
        self.active = active
        self.endTime = endTime
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetActionType = targetActionType
    }
}

struct DescribeScheduledActionsInputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
    let targetActionType: RedshiftClientTypes.ScheduledActionTypeValues?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let active: Swift.Bool?
    let filters: [RedshiftClientTypes.ScheduledActionFilter]?
    let marker: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeScheduledActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
        case endTime = "EndTime"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetActionType = "TargetActionType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionTypeValues.self, forKey: .targetActionType)
        targetActionType = targetActionTypeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct ScheduledActionFilter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduledActionFilter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([RedshiftClientTypes.ScheduledActionFilter].self, forKey: .member)
                var filtersBuffer:[RedshiftClientTypes.ScheduledActionFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [RedshiftClientTypes.ScheduledActionFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeScheduledActionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeScheduledActionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.scheduledActions = output.scheduledActions
        } else {
            self.marker = nil
            self.scheduledActions = nil
        }
    }
}

public struct DescribeScheduledActionsOutput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeScheduledActions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// List of retrieved scheduled actions.
    public var scheduledActions: [RedshiftClientTypes.ScheduledAction]?

    public init(
        marker: Swift.String? = nil,
        scheduledActions: [RedshiftClientTypes.ScheduledAction]? = nil
    )
    {
        self.marker = marker
        self.scheduledActions = scheduledActions
    }
}

struct DescribeScheduledActionsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let scheduledActions: [RedshiftClientTypes.ScheduledAction]?
}

extension DescribeScheduledActionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case scheduledActions = "ScheduledActions"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScheduledActionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.scheduledActions) {
            struct KeyVal0{struct ScheduledAction{}}
            let scheduledActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduledAction>.CodingKeys.self, forKey: .scheduledActions)
            if let scheduledActionsWrappedContainer = scheduledActionsWrappedContainer {
                let scheduledActionsContainer = try scheduledActionsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ScheduledAction].self, forKey: .member)
                var scheduledActionsBuffer:[RedshiftClientTypes.ScheduledAction]? = nil
                if let scheduledActionsContainer = scheduledActionsContainer {
                    scheduledActionsBuffer = [RedshiftClientTypes.ScheduledAction]()
                    for structureContainer0 in scheduledActionsContainer {
                        scheduledActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledActions = scheduledActionsBuffer
            } else {
                scheduledActions = []
            }
        } else {
            scheduledActions = nil
        }
    }
}

enum DescribeScheduledActionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ScheduledActionNotFound": return try await ScheduledActionNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeSnapshotCopyGrantsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeSnapshotCopyGrants", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSnapshotCopyGrantsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The result of the DescribeSnapshotCopyGrants action.
public struct DescribeSnapshotCopyGrantsInput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the snapshot copy grant.
    public var snapshotCopyGrantName: Swift.String?
    /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotCopyGrantName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotCopyGrantName = snapshotCopyGrantName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeSnapshotCopyGrantsInputBody: Swift.Equatable {
    let snapshotCopyGrantName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeSnapshotCopyGrantsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeSnapshotCopyGrantsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeSnapshotCopyGrantsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.snapshotCopyGrants = output.snapshotCopyGrants
        } else {
            self.marker = nil
            self.snapshotCopyGrants = nil
        }
    }
}

///
public struct DescribeSnapshotCopyGrantsOutput: Swift.Equatable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The list of SnapshotCopyGrant objects.
    public var snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]?

    public init(
        marker: Swift.String? = nil,
        snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]? = nil
    )
    {
        self.marker = marker
        self.snapshotCopyGrants = snapshotCopyGrants
    }
}

struct DescribeSnapshotCopyGrantsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]?
}

extension DescribeSnapshotCopyGrantsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshotCopyGrants = "SnapshotCopyGrants"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSnapshotCopyGrantsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.snapshotCopyGrants) {
            struct KeyVal0{struct SnapshotCopyGrant{}}
            let snapshotCopyGrantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotCopyGrant>.CodingKeys.self, forKey: .snapshotCopyGrants)
            if let snapshotCopyGrantsWrappedContainer = snapshotCopyGrantsWrappedContainer {
                let snapshotCopyGrantsContainer = try snapshotCopyGrantsWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotCopyGrant].self, forKey: .member)
                var snapshotCopyGrantsBuffer:[RedshiftClientTypes.SnapshotCopyGrant]? = nil
                if let snapshotCopyGrantsContainer = snapshotCopyGrantsContainer {
                    snapshotCopyGrantsBuffer = [RedshiftClientTypes.SnapshotCopyGrant]()
                    for structureContainer0 in snapshotCopyGrantsContainer {
                        snapshotCopyGrantsBuffer?.append(structureContainer0)
                    }
                }
                snapshotCopyGrants = snapshotCopyGrantsBuffer
            } else {
                snapshotCopyGrants = []
            }
        } else {
            snapshotCopyGrants = nil
        }
    }
}

enum DescribeSnapshotCopyGrantsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyGrantNotFoundFault": return try await SnapshotCopyGrantNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeSnapshotSchedulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeSnapshotSchedules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSnapshotSchedulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSnapshotSchedulesInput: Swift.Equatable {
    /// The unique identifier for the cluster whose snapshot schedules you want to view.
    public var clusterIdentifier: Swift.String?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// A unique identifier for a snapshot schedule.
    public var scheduleIdentifier: Swift.String?
    /// The key value for a snapshot schedule tag.
    public var tagKeys: [Swift.String]?
    /// The value corresponding to the key of the snapshot schedule tag.
    public var tagValues: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.scheduleIdentifier = scheduleIdentifier
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeSnapshotSchedulesInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let scheduleIdentifier: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
    let marker: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeSnapshotSchedulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}

extension DescribeSnapshotSchedulesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeSnapshotSchedulesOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.snapshotSchedules = output.snapshotSchedules
        } else {
            self.marker = nil
            self.snapshotSchedules = nil
        }
    }
}

public struct DescribeSnapshotSchedulesOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of SnapshotSchedules.
    public var snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]?

    public init(
        marker: Swift.String? = nil,
        snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]? = nil
    )
    {
        self.marker = marker
        self.snapshotSchedules = snapshotSchedules
    }
}

struct DescribeSnapshotSchedulesOutputBody: Swift.Equatable {
    let snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]?
    let marker: Swift.String?
}

extension DescribeSnapshotSchedulesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshotSchedules = "SnapshotSchedules"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSnapshotSchedulesResult"))
        if containerValues.contains(.snapshotSchedules) {
            struct KeyVal0{struct SnapshotSchedule{}}
            let snapshotSchedulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotSchedule>.CodingKeys.self, forKey: .snapshotSchedules)
            if let snapshotSchedulesWrappedContainer = snapshotSchedulesWrappedContainer {
                let snapshotSchedulesContainer = try snapshotSchedulesWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotSchedule].self, forKey: .member)
                var snapshotSchedulesBuffer:[RedshiftClientTypes.SnapshotSchedule]? = nil
                if let snapshotSchedulesContainer = snapshotSchedulesContainer {
                    snapshotSchedulesBuffer = [RedshiftClientTypes.SnapshotSchedule]()
                    for structureContainer0 in snapshotSchedulesContainer {
                        snapshotSchedulesBuffer?.append(structureContainer0)
                    }
                }
                snapshotSchedules = snapshotSchedulesBuffer
            } else {
                snapshotSchedules = []
            }
        } else {
            snapshotSchedules = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeSnapshotSchedulesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeStorageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeStorage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStorageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStorageInput: Swift.Equatable {

    public init() { }
}

extension DescribeStorageOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStorageOutputBody = try responseDecoder.decode(responseBody: data)
            self.totalBackupSizeInMegaBytes = output.totalBackupSizeInMegaBytes
            self.totalProvisionedStorageInMegaBytes = output.totalProvisionedStorageInMegaBytes
        } else {
            self.totalBackupSizeInMegaBytes = nil
            self.totalProvisionedStorageInMegaBytes = nil
        }
    }
}

public struct DescribeStorageOutput: Swift.Equatable {
    /// The total amount of storage currently used for snapshots.
    public var totalBackupSizeInMegaBytes: Swift.Double?
    /// The total amount of storage currently provisioned.
    public var totalProvisionedStorageInMegaBytes: Swift.Double?

    public init(
        totalBackupSizeInMegaBytes: Swift.Double? = nil,
        totalProvisionedStorageInMegaBytes: Swift.Double? = nil
    )
    {
        self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
        self.totalProvisionedStorageInMegaBytes = totalProvisionedStorageInMegaBytes
    }
}

struct DescribeStorageOutputBody: Swift.Equatable {
    let totalBackupSizeInMegaBytes: Swift.Double?
    let totalProvisionedStorageInMegaBytes: Swift.Double?
}

extension DescribeStorageOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case totalBackupSizeInMegaBytes = "TotalBackupSizeInMegaBytes"
        case totalProvisionedStorageInMegaBytes = "TotalProvisionedStorageInMegaBytes"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStorageResult"))
        let totalBackupSizeInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .totalBackupSizeInMegaBytes)
        totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytesDecoded
        let totalProvisionedStorageInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .totalProvisionedStorageInMegaBytes)
        totalProvisionedStorageInMegaBytes = totalProvisionedStorageInMegaBytesDecoded
    }
}

enum DescribeStorageOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeTableRestoreStatusInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tableRestoreRequestId = tableRestoreRequestId {
            try container.encode(tableRestoreRequestId, forKey: ClientRuntime.Key("TableRestoreRequestId"))
        }
        try container.encode("DescribeTableRestoreStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTableRestoreStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeTableRestoreStatusInput: Swift.Equatable {
    /// The Amazon Redshift cluster that the table is being restored to.
    public var clusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous DescribeTableRestoreStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The identifier of the table restore request to return status for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus returns the status of all in-progress table restore requests.
    public var tableRestoreRequestId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tableRestoreRequestId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tableRestoreRequestId = tableRestoreRequestId
    }
}

struct DescribeTableRestoreStatusInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let tableRestoreRequestId: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeTableRestoreStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tableRestoreRequestId = "TableRestoreRequestId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let tableRestoreRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableRestoreRequestId)
        tableRestoreRequestId = tableRestoreRequestIdDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeTableRestoreStatusOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeTableRestoreStatusOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.tableRestoreStatusDetails = output.tableRestoreStatusDetails
        } else {
            self.marker = nil
            self.tableRestoreStatusDetails = nil
        }
    }
}

///
public struct DescribeTableRestoreStatusOutput: Swift.Equatable {
    /// A pagination token that can be used in a subsequent [DescribeTableRestoreStatus] request.
    public var marker: Swift.String?
    /// A list of status details for one or more table restore requests.
    public var tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]?

    public init(
        marker: Swift.String? = nil,
        tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]? = nil
    )
    {
        self.marker = marker
        self.tableRestoreStatusDetails = tableRestoreStatusDetails
    }
}

struct DescribeTableRestoreStatusOutputBody: Swift.Equatable {
    let tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]?
    let marker: Swift.String?
}

extension DescribeTableRestoreStatusOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case tableRestoreStatusDetails = "TableRestoreStatusDetails"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTableRestoreStatusResult"))
        if containerValues.contains(.tableRestoreStatusDetails) {
            struct KeyVal0{struct TableRestoreStatus{}}
            let tableRestoreStatusDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TableRestoreStatus>.CodingKeys.self, forKey: .tableRestoreStatusDetails)
            if let tableRestoreStatusDetailsWrappedContainer = tableRestoreStatusDetailsWrappedContainer {
                let tableRestoreStatusDetailsContainer = try tableRestoreStatusDetailsWrappedContainer.decodeIfPresent([RedshiftClientTypes.TableRestoreStatus].self, forKey: .member)
                var tableRestoreStatusDetailsBuffer:[RedshiftClientTypes.TableRestoreStatus]? = nil
                if let tableRestoreStatusDetailsContainer = tableRestoreStatusDetailsContainer {
                    tableRestoreStatusDetailsBuffer = [RedshiftClientTypes.TableRestoreStatus]()
                    for structureContainer0 in tableRestoreStatusDetailsContainer {
                        tableRestoreStatusDetailsBuffer?.append(structureContainer0)
                    }
                }
                tableRestoreStatusDetails = tableRestoreStatusDetailsBuffer
            } else {
                tableRestoreStatusDetails = []
            }
        } else {
            tableRestoreStatusDetails = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeTableRestoreStatusOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TableRestoreNotFoundFault": return try await TableRestoreNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeTagsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DescribeTagsInput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    public var resourceName: Swift.String?
    /// The type of resource with which you want to view tags. Valid resource types are:
    ///
    /// * Cluster
    ///
    /// * CIDR/IP
    ///
    /// * EC2 security group
    ///
    /// * Snapshot
    ///
    /// * Cluster security group
    ///
    /// * Subnet group
    ///
    /// * HSM connection
    ///
    /// * HSM certificate
    ///
    /// * Parameter group
    ///
    /// * Snapshot copy grant
    ///
    ///
    /// For more information about Amazon Redshift resource types and constructing ARNs, go to [Specifying Policy Elements: Actions, Effects, Resources, and Principals](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions) in the Amazon Redshift Cluster Management Guide.
    public var resourceType: Swift.String?
    /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceName = resourceName
        self.resourceType = resourceType
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

struct DescribeTagsInputBody: Swift.Equatable {
    let resourceName: Swift.String?
    let resourceType: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeTagsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeTagsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.taggedResources = output.taggedResources
        } else {
            self.marker = nil
            self.taggedResources = nil
        }
    }
}

///
public struct DescribeTagsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of tags with their associated resources.
    public var taggedResources: [RedshiftClientTypes.TaggedResource]?

    public init(
        marker: Swift.String? = nil,
        taggedResources: [RedshiftClientTypes.TaggedResource]? = nil
    )
    {
        self.marker = marker
        self.taggedResources = taggedResources
    }
}

struct DescribeTagsOutputBody: Swift.Equatable {
    let taggedResources: [RedshiftClientTypes.TaggedResource]?
    let marker: Swift.String?
}

extension DescribeTagsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case taggedResources = "TaggedResources"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTagsResult"))
        if containerValues.contains(.taggedResources) {
            struct KeyVal0{struct TaggedResource{}}
            let taggedResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TaggedResource>.CodingKeys.self, forKey: .taggedResources)
            if let taggedResourcesWrappedContainer = taggedResourcesWrappedContainer {
                let taggedResourcesContainer = try taggedResourcesWrappedContainer.decodeIfPresent([RedshiftClientTypes.TaggedResource].self, forKey: .member)
                var taggedResourcesBuffer:[RedshiftClientTypes.TaggedResource]? = nil
                if let taggedResourcesContainer = taggedResourcesContainer {
                    taggedResourcesBuffer = [RedshiftClientTypes.TaggedResource]()
                    for structureContainer0 in taggedResourcesContainer {
                        taggedResourcesBuffer?.append(structureContainer0)
                    }
                }
                taggedResources = taggedResourcesBuffer
            } else {
                taggedResources = []
            }
        } else {
            taggedResources = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeTagsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResourceNotFoundFault": return try await ResourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DescribeUsageLimitsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: ClientRuntime.Key("FeatureType"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, string0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("TagKey.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagValues = tagValues {
            if !tagValues.isEmpty {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                for (index0, string0) in tagValues.enumerated() {
                    try tagValuesContainer.encode(string0, forKey: ClientRuntime.Key("TagValue.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagValues"))
                try tagValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
        try container.encode("DescribeUsageLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeUsageLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeUsageLimitsInput: Swift.Equatable {
    /// The identifier of the cluster for which you want to describe usage limits.
    public var clusterIdentifier: Swift.String?
    /// The feature type for which you want to describe usage limits.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeUsageLimits] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching usage limit objects that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the usage limit objects have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching usage limit objects that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the usage limit objects that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?
    /// The identifier of the usage limit to describe.
    public var usageLimitId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
        self.usageLimitId = usageLimitId
    }
}

struct DescribeUsageLimitsInputBody: Swift.Equatable {
    let usageLimitId: Swift.String?
    let clusterIdentifier: Swift.String?
    let featureType: RedshiftClientTypes.UsageLimitFeatureType?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeUsageLimitsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
        case usageLimitId = "UsageLimitId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitFeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}

extension DescribeUsageLimitsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeUsageLimitsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.usageLimits = output.usageLimits
        } else {
            self.marker = nil
            self.usageLimits = nil
        }
    }
}

public struct DescribeUsageLimitsOutput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// Contains the output from the [DescribeUsageLimits] action.
    public var usageLimits: [RedshiftClientTypes.UsageLimit]?

    public init(
        marker: Swift.String? = nil,
        usageLimits: [RedshiftClientTypes.UsageLimit]? = nil
    )
    {
        self.marker = marker
        self.usageLimits = usageLimits
    }
}

struct DescribeUsageLimitsOutputBody: Swift.Equatable {
    let usageLimits: [RedshiftClientTypes.UsageLimit]?
    let marker: Swift.String?
}

extension DescribeUsageLimitsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case usageLimits = "UsageLimits"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUsageLimitsResult"))
        if containerValues.contains(.usageLimits) {
            struct KeyVal0{struct member{}}
            let usageLimitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .usageLimits)
            if let usageLimitsWrappedContainer = usageLimitsWrappedContainer {
                let usageLimitsContainer = try usageLimitsWrappedContainer.decodeIfPresent([RedshiftClientTypes.UsageLimit].self, forKey: .member)
                var usageLimitsBuffer:[RedshiftClientTypes.UsageLimit]? = nil
                if let usageLimitsContainer = usageLimitsContainer {
                    usageLimitsBuffer = [RedshiftClientTypes.UsageLimit]()
                    for structureContainer0 in usageLimitsContainer {
                        usageLimitsBuffer?.append(structureContainer0)
                    }
                }
                usageLimits = usageLimitsBuffer
            } else {
                usageLimits = []
            }
        } else {
            usageLimits = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

enum DescribeUsageLimitsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DisableLoggingInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DisableLogging", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableLoggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DisableLoggingInput: Swift.Equatable {
    /// The identifier of the cluster on which logging is to be stopped. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct DisableLoggingInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension DisableLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension DisableLoggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DisableLoggingOutputBody = try responseDecoder.decode(responseBody: data)
            self.bucketName = output.bucketName
            self.lastFailureMessage = output.lastFailureMessage
            self.lastFailureTime = output.lastFailureTime
            self.lastSuccessfulDeliveryTime = output.lastSuccessfulDeliveryTime
            self.logDestinationType = output.logDestinationType
            self.logExports = output.logExports
            self.loggingEnabled = output.loggingEnabled
            self.s3KeyPrefix = output.s3KeyPrefix
        } else {
            self.bucketName = nil
            self.lastFailureMessage = nil
            self.lastFailureTime = nil
            self.lastSuccessfulDeliveryTime = nil
            self.logDestinationType = nil
            self.logExports = nil
            self.loggingEnabled = nil
            self.s3KeyPrefix = nil
        }
    }
}

/// Describes the status of logging for a cluster.
public struct DisableLoggingOutput: Swift.Equatable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: ClientRuntime.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: ClientRuntime.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: ClientRuntime.Date? = nil,
        lastSuccessfulDeliveryTime: ClientRuntime.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

struct DisableLoggingOutputBody: Swift.Equatable {
    let loggingEnabled: Swift.Bool?
    let bucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let lastSuccessfulDeliveryTime: ClientRuntime.Date?
    let lastFailureTime: ClientRuntime.Date?
    let lastFailureMessage: Swift.String?
    let logDestinationType: RedshiftClientTypes.LogDestinationType?
    let logExports: [Swift.String]?
}

extension DisableLoggingOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case lastFailureMessage = "LastFailureMessage"
        case lastFailureTime = "LastFailureTime"
        case lastSuccessfulDeliveryTime = "LastSuccessfulDeliveryTime"
        case logDestinationType = "LogDestinationType"
        case logExports = "LogExports"
        case loggingEnabled = "LoggingEnabled"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisableLoggingResult"))
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let lastSuccessfulDeliveryTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastSuccessfulDeliveryTime)
        lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTimeDecoded
        let lastFailureTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastFailureTime)
        lastFailureTime = lastFailureTimeDecoded
        let lastFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureMessage)
        lastFailureMessage = lastFailureMessageDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        if containerValues.contains(.logExports) {
            struct KeyVal0{struct member{}}
            let logExportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logExports)
            if let logExportsWrappedContainer = logExportsWrappedContainer {
                let logExportsContainer = try logExportsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logExportsBuffer:[Swift.String]? = nil
                if let logExportsContainer = logExportsContainer {
                    logExportsBuffer = [Swift.String]()
                    for stringContainer0 in logExportsContainer {
                        logExportsBuffer?.append(stringContainer0)
                    }
                }
                logExports = logExportsBuffer
            } else {
                logExports = []
            }
        } else {
            logExports = nil
        }
    }
}

enum DisableLoggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DisableSnapshotCopyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("DisableSnapshotCopy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableSnapshotCopyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct DisableSnapshotCopyInput: Swift.Equatable {
    /// The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct DisableSnapshotCopyInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension DisableSnapshotCopyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension DisableSnapshotCopyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DisableSnapshotCopyOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DisableSnapshotCopyOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DisableSnapshotCopyOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension DisableSnapshotCopyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisableSnapshotCopyResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum DisableSnapshotCopyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyAlreadyDisabledFault": return try await SnapshotCopyAlreadyDisabledFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension DisassociateDataShareConsumerInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerArn = consumerArn {
            try container.encode(consumerArn, forKey: ClientRuntime.Key("ConsumerArn"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        if let disassociateEntireAccount = disassociateEntireAccount {
            try container.encode(disassociateEntireAccount, forKey: ClientRuntime.Key("DisassociateEntireAccount"))
        }
        try container.encode("DisassociateDataShareConsumer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisassociateDataShareConsumerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateDataShareConsumerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.
    public var consumerArn: Swift.String?
    /// From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.
    public var consumerRegion: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare to remove association for.
    /// This member is required.
    public var dataShareArn: Swift.String?
    /// A value that specifies whether association for the datashare is removed from the entire account.
    public var disassociateEntireAccount: Swift.Bool?

    public init(
        consumerArn: Swift.String? = nil,
        consumerRegion: Swift.String? = nil,
        dataShareArn: Swift.String? = nil,
        disassociateEntireAccount: Swift.Bool? = nil
    )
    {
        self.consumerArn = consumerArn
        self.consumerRegion = consumerRegion
        self.dataShareArn = dataShareArn
        self.disassociateEntireAccount = disassociateEntireAccount
    }
}

struct DisassociateDataShareConsumerInputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let disassociateEntireAccount: Swift.Bool?
    let consumerArn: Swift.String?
    let consumerRegion: Swift.String?
}

extension DisassociateDataShareConsumerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerArn = "ConsumerArn"
        case consumerRegion = "ConsumerRegion"
        case dataShareArn = "DataShareArn"
        case disassociateEntireAccount = "DisassociateEntireAccount"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let disassociateEntireAccountDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateEntireAccount)
        disassociateEntireAccount = disassociateEntireAccountDecoded
        let consumerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerArn)
        consumerArn = consumerArnDecoded
        let consumerRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerRegion)
        consumerRegion = consumerRegionDecoded
    }
}

extension DisassociateDataShareConsumerOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DisassociateDataShareConsumerOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowPubliclyAccessibleConsumers = output.allowPubliclyAccessibleConsumers
            self.dataShareArn = output.dataShareArn
            self.dataShareAssociations = output.dataShareAssociations
            self.managedBy = output.managedBy
            self.producerArn = output.producerArn
        } else {
            self.allowPubliclyAccessibleConsumers = nil
            self.dataShareArn = nil
            self.dataShareAssociations = nil
            self.managedBy = nil
            self.producerArn = nil
        }
    }
}

public struct DisassociateDataShareConsumerOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

struct DisassociateDataShareConsumerOutputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let producerArn: Swift.String?
    let allowPubliclyAccessibleConsumers: Swift.Bool?
    let dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    let managedBy: Swift.String?
}

extension DisassociateDataShareConsumerOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisassociateDataShareConsumerResult"))
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}

enum DisassociateDataShareConsumerOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidDataShareFault": return try await InvalidDataShareFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidNamespaceFault": return try await InvalidNamespaceFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.EC2SecurityGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let ec2SecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SecurityGroupName)
        ec2SecurityGroupName = ec2SecurityGroupNameDecoded
        let ec2SecurityGroupOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SecurityGroupOwnerId)
        ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an Amazon EC2 security group.
    public struct EC2SecurityGroup: Swift.Equatable {
        /// The name of the EC2 Security Group.
        public var ec2SecurityGroupName: Swift.String?
        /// The Amazon Web Services account ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field.
        public var ec2SecurityGroupOwnerId: Swift.String?
        /// The status of the EC2 security group.
        public var status: Swift.String?
        /// The list of tags for the EC2 security group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            ec2SecurityGroupName: Swift.String? = nil,
            ec2SecurityGroupOwnerId: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.ec2SecurityGroupName = ec2SecurityGroupName
            self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
            self.status = status
            self.tags = tags
        }
    }

}

extension RedshiftClientTypes.ElasticIpStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticIp = "ElasticIp"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the status of the elastic IP (EIP) address.
    public struct ElasticIpStatus: Swift.Equatable {
        /// The elastic IP (EIP) address for the cluster.
        public var elasticIp: Swift.String?
        /// The status of the elastic IP (EIP) address.
        public var status: Swift.String?

        public init(
            elasticIp: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.elasticIp = elasticIp
            self.status = status
        }
    }

}

extension EnableLoggingInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bucketName = bucketName {
            try container.encode(bucketName, forKey: ClientRuntime.Key("BucketName"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let logDestinationType = logDestinationType {
            try container.encode(logDestinationType, forKey: ClientRuntime.Key("LogDestinationType"))
        }
        if let logExports = logExports {
            if !logExports.isEmpty {
                var logExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogExports"))
                for (index0, string0) in logExports.enumerated() {
                    try logExportsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logExportsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogExports"))
                try logExportsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try container.encode(s3KeyPrefix, forKey: ClientRuntime.Key("S3KeyPrefix"))
        }
        try container.encode("EnableLogging", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableLoggingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct EnableLoggingInput: Swift.Equatable {
    /// The name of an existing S3 bucket where the log files are to be stored. Constraints:
    ///
    /// * Must be in the same region as the cluster
    ///
    /// * The cluster must have read bucket and put object permissions
    public var bucketName: Swift.String?
    /// The identifier of the cluster on which logging is to be started. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// The prefix applied to the log file names. Constraints:
    ///
    /// * Cannot exceed 512 characters
    ///
    /// * Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:
    ///
    /// * x00 to x20
    ///
    /// * x22
    ///
    /// * x27
    ///
    /// * x5c
    ///
    /// * x7f or larger
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.clusterIdentifier = clusterIdentifier
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.s3KeyPrefix = s3KeyPrefix
    }
}

struct EnableLoggingInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let bucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let logDestinationType: RedshiftClientTypes.LogDestinationType?
    let logExports: [Swift.String]?
}

extension EnableLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case clusterIdentifier = "ClusterIdentifier"
        case logDestinationType = "LogDestinationType"
        case logExports = "LogExports"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        if containerValues.contains(.logExports) {
            struct KeyVal0{struct member{}}
            let logExportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logExports)
            if let logExportsWrappedContainer = logExportsWrappedContainer {
                let logExportsContainer = try logExportsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logExportsBuffer:[Swift.String]? = nil
                if let logExportsContainer = logExportsContainer {
                    logExportsBuffer = [Swift.String]()
                    for stringContainer0 in logExportsContainer {
                        logExportsBuffer?.append(stringContainer0)
                    }
                }
                logExports = logExportsBuffer
            } else {
                logExports = []
            }
        } else {
            logExports = nil
        }
    }
}

extension EnableLoggingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: EnableLoggingOutputBody = try responseDecoder.decode(responseBody: data)
            self.bucketName = output.bucketName
            self.lastFailureMessage = output.lastFailureMessage
            self.lastFailureTime = output.lastFailureTime
            self.lastSuccessfulDeliveryTime = output.lastSuccessfulDeliveryTime
            self.logDestinationType = output.logDestinationType
            self.logExports = output.logExports
            self.loggingEnabled = output.loggingEnabled
            self.s3KeyPrefix = output.s3KeyPrefix
        } else {
            self.bucketName = nil
            self.lastFailureMessage = nil
            self.lastFailureTime = nil
            self.lastSuccessfulDeliveryTime = nil
            self.logDestinationType = nil
            self.logExports = nil
            self.loggingEnabled = nil
            self.s3KeyPrefix = nil
        }
    }
}

/// Describes the status of logging for a cluster.
public struct EnableLoggingOutput: Swift.Equatable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: ClientRuntime.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: ClientRuntime.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: ClientRuntime.Date? = nil,
        lastSuccessfulDeliveryTime: ClientRuntime.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

struct EnableLoggingOutputBody: Swift.Equatable {
    let loggingEnabled: Swift.Bool?
    let bucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let lastSuccessfulDeliveryTime: ClientRuntime.Date?
    let lastFailureTime: ClientRuntime.Date?
    let lastFailureMessage: Swift.String?
    let logDestinationType: RedshiftClientTypes.LogDestinationType?
    let logExports: [Swift.String]?
}

extension EnableLoggingOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case lastFailureMessage = "LastFailureMessage"
        case lastFailureTime = "LastFailureTime"
        case lastSuccessfulDeliveryTime = "LastSuccessfulDeliveryTime"
        case logDestinationType = "LogDestinationType"
        case logExports = "LogExports"
        case loggingEnabled = "LoggingEnabled"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EnableLoggingResult"))
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let lastSuccessfulDeliveryTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastSuccessfulDeliveryTime)
        lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTimeDecoded
        let lastFailureTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastFailureTime)
        lastFailureTime = lastFailureTimeDecoded
        let lastFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureMessage)
        lastFailureMessage = lastFailureMessageDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        if containerValues.contains(.logExports) {
            struct KeyVal0{struct member{}}
            let logExportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logExports)
            if let logExportsWrappedContainer = logExportsWrappedContainer {
                let logExportsContainer = try logExportsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logExportsBuffer:[Swift.String]? = nil
                if let logExportsContainer = logExportsContainer {
                    logExportsBuffer = [Swift.String]()
                    for stringContainer0 in logExportsContainer {
                        logExportsBuffer?.append(stringContainer0)
                    }
                }
                logExports = logExportsBuffer
            } else {
                logExports = []
            }
        } else {
            logExports = nil
        }
    }
}

enum EnableLoggingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "BucketNotFoundFault": return try await BucketNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InsufficientS3BucketPolicyFault": return try await InsufficientS3BucketPolicyFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidS3BucketNameFault": return try await InvalidS3BucketNameFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidS3KeyPrefixFault": return try await InvalidS3KeyPrefixFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension EnableSnapshotCopyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let destinationRegion = destinationRegion {
            try container.encode(destinationRegion, forKey: ClientRuntime.Key("DestinationRegion"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let retentionPeriod = retentionPeriod {
            try container.encode(retentionPeriod, forKey: ClientRuntime.Key("RetentionPeriod"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        try container.encode("EnableSnapshotCopy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableSnapshotCopyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct EnableSnapshotCopyInput: Swift.Equatable {
    /// The unique identifier of the source cluster to copy snapshots from. Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The destination Amazon Web Services Region that you want to copy snapshots to. Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region) in the Amazon Web Services General Reference.
    /// This member is required.
    public var destinationRegion: Swift.String?
    /// The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Default: 7. Constraints: Must be at least 1 and no more than 35.
    public var retentionPeriod: Swift.Int?
    /// The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.
    public var snapshotCopyGrantName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        destinationRegion: Swift.String? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        retentionPeriod: Swift.Int? = nil,
        snapshotCopyGrantName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.destinationRegion = destinationRegion
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.retentionPeriod = retentionPeriod
        self.snapshotCopyGrantName = snapshotCopyGrantName
    }
}

struct EnableSnapshotCopyInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let destinationRegion: Swift.String?
    let retentionPeriod: Swift.Int?
    let snapshotCopyGrantName: Swift.String?
    let manualSnapshotRetentionPeriod: Swift.Int?
}

extension EnableSnapshotCopyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case destinationRegion = "DestinationRegion"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case retentionPeriod = "RetentionPeriod"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let destinationRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationRegion)
        destinationRegion = destinationRegionDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
    }
}

extension EnableSnapshotCopyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: EnableSnapshotCopyOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct EnableSnapshotCopyOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct EnableSnapshotCopyOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension EnableSnapshotCopyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EnableSnapshotCopyResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum EnableSnapshotCopyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CopyToRegionDisabledFault": return try await CopyToRegionDisabledFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "IncompatibleOrderableOptions": return try await IncompatibleOrderableOptions(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyAlreadyEnabledFault": return try await SnapshotCopyAlreadyEnabledFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyGrantNotFoundFault": return try await SnapshotCopyGrantNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnknownSnapshotCopyRegionFault": return try await UnknownSnapshotCopyRegionFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.Endpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case port = "Port"
        case vpcEndpoints = "VpcEndpoints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let vpcEndpoints = vpcEndpoints {
            if !vpcEndpoints.isEmpty {
                var vpcEndpointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcEndpoints"))
                for (index0, vpcendpoint0) in vpcEndpoints.enumerated() {
                    try vpcEndpointsContainer.encode(vpcendpoint0, forKey: ClientRuntime.Key("VpcEndpoint.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcEndpointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcEndpoints"))
                try vpcEndpointsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        if containerValues.contains(.vpcEndpoints) {
            struct KeyVal0{struct VpcEndpoint{}}
            let vpcEndpointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcEndpoint>.CodingKeys.self, forKey: .vpcEndpoints)
            if let vpcEndpointsWrappedContainer = vpcEndpointsWrappedContainer {
                let vpcEndpointsContainer = try vpcEndpointsWrappedContainer.decodeIfPresent([RedshiftClientTypes.VpcEndpoint].self, forKey: .member)
                var vpcEndpointsBuffer:[RedshiftClientTypes.VpcEndpoint]? = nil
                if let vpcEndpointsContainer = vpcEndpointsContainer {
                    vpcEndpointsBuffer = [RedshiftClientTypes.VpcEndpoint]()
                    for structureContainer0 in vpcEndpointsContainer {
                        vpcEndpointsBuffer?.append(structureContainer0)
                    }
                }
                vpcEndpoints = vpcEndpointsBuffer
            } else {
                vpcEndpoints = []
            }
        } else {
            vpcEndpoints = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a connection endpoint.
    public struct Endpoint: Swift.Equatable {
        /// The DNS address of the Cluster.
        public var address: Swift.String?
        /// The port that the database engine is listening on.
        public var port: Swift.Int?
        /// Describes a connection endpoint.
        public var vpcEndpoints: [RedshiftClientTypes.VpcEndpoint]?

        public init(
            address: Swift.String? = nil,
            port: Swift.Int? = nil,
            vpcEndpoints: [RedshiftClientTypes.VpcEndpoint]? = nil
        )
        {
            self.address = address
            self.port = port
            self.vpcEndpoints = vpcEndpoints
        }
    }

}

extension RedshiftClientTypes.EndpointAccess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case clusterIdentifier = "ClusterIdentifier"
        case endpointCreateTime = "EndpointCreateTime"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case port = "Port"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcEndpoint = "VpcEndpoint"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let endpointCreateTime = endpointCreateTime {
            try container.encodeTimestamp(endpointCreateTime, format: .dateTime, forKey: ClientRuntime.Key("EndpointCreateTime"))
        }
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let endpointStatus = endpointStatus {
            try container.encode(endpointStatus, forKey: ClientRuntime.Key("EndpointStatus"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: ClientRuntime.Key("ResourceOwner"))
        }
        if let subnetGroupName = subnetGroupName {
            try container.encode(subnetGroupName, forKey: ClientRuntime.Key("SubnetGroupName"))
        }
        if let vpcEndpoint = vpcEndpoint {
            try container.encode(vpcEndpoint, forKey: ClientRuntime.Key("VpcEndpoint"))
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            if !vpcSecurityGroups.isEmpty {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroups.enumerated() {
                    try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroups"))
                try vpcSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endpointCreateTime)
        endpointCreateTime = endpointCreateTimeDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [RedshiftClientTypes.VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a Redshift-managed VPC endpoint.
    public struct EndpointAccess: Swift.Equatable {
        /// The DNS address of the endpoint.
        public var address: Swift.String?
        /// The cluster identifier of the cluster associated with the endpoint.
        public var clusterIdentifier: Swift.String?
        /// The time (UTC) that the endpoint was created.
        public var endpointCreateTime: ClientRuntime.Date?
        /// The name of the endpoint.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        public var endpointStatus: Swift.String?
        /// The port number on which the cluster accepts incoming connections.
        public var port: Swift.Int?
        /// The Amazon Web Services account ID of the owner of the cluster.
        public var resourceOwner: Swift.String?
        /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
        public var subnetGroupName: Swift.String?
        /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
        public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
        /// The security groups associated with the endpoint.
        public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

        public init(
            address: Swift.String? = nil,
            clusterIdentifier: Swift.String? = nil,
            endpointCreateTime: ClientRuntime.Date? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            port: Swift.Int? = nil,
            resourceOwner: Swift.String? = nil,
            subnetGroupName: Swift.String? = nil,
            vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
            vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.address = address
            self.clusterIdentifier = clusterIdentifier
            self.endpointCreateTime = endpointCreateTime
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.port = port
            self.resourceOwner = resourceOwner
            self.subnetGroupName = subnetGroupName
            self.vpcEndpoint = vpcEndpoint
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension EndpointAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The account already has a Redshift-managed VPC endpoint with the given identifier.
public struct EndpointAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.EndpointAuthorization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAllVPCs = "AllowedAllVPCs"
        case allowedVPCs = "AllowedVPCs"
        case authorizeTime = "AuthorizeTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterStatus = "ClusterStatus"
        case endpointCount = "EndpointCount"
        case grantee = "Grantee"
        case grantor = "Grantor"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedAllVPCs = allowedAllVPCs {
            try container.encode(allowedAllVPCs, forKey: ClientRuntime.Key("AllowedAllVPCs"))
        }
        if let allowedVPCs = allowedVPCs {
            if !allowedVPCs.isEmpty {
                var allowedVPCsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedVPCs"))
                for (index0, string0) in allowedVPCs.enumerated() {
                    try allowedVPCsContainer.encode(string0, forKey: ClientRuntime.Key("VpcIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var allowedVPCsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedVPCs"))
                try allowedVPCsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let authorizeTime = authorizeTime {
            try container.encodeTimestamp(authorizeTime, format: .dateTime, forKey: ClientRuntime.Key("AuthorizeTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterStatus = clusterStatus {
            try container.encode(clusterStatus, forKey: ClientRuntime.Key("ClusterStatus"))
        }
        if let endpointCount = endpointCount {
            try container.encode(endpointCount, forKey: ClientRuntime.Key("EndpointCount"))
        }
        if let grantee = grantee {
            try container.encode(grantee, forKey: ClientRuntime.Key("Grantee"))
        }
        if let grantor = grantor {
            try container.encode(grantor, forKey: ClientRuntime.Key("Grantor"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantor)
        grantor = grantorDecoded
        let granteeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantee)
        grantee = granteeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let authorizeTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .authorizeTime)
        authorizeTime = authorizeTimeDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AuthorizationStatus.self, forKey: .status)
        status = statusDecoded
        let allowedAllVPCsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedAllVPCs)
        allowedAllVPCs = allowedAllVPCsDecoded
        if containerValues.contains(.allowedVPCs) {
            struct KeyVal0{struct VpcIdentifier{}}
            let allowedVPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcIdentifier>.CodingKeys.self, forKey: .allowedVPCs)
            if let allowedVPCsWrappedContainer = allowedVPCsWrappedContainer {
                let allowedVPCsContainer = try allowedVPCsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allowedVPCsBuffer:[Swift.String]? = nil
                if let allowedVPCsContainer = allowedVPCsContainer {
                    allowedVPCsBuffer = [Swift.String]()
                    for stringContainer0 in allowedVPCsContainer {
                        allowedVPCsBuffer?.append(stringContainer0)
                    }
                }
                allowedVPCs = allowedVPCsBuffer
            } else {
                allowedVPCs = []
            }
        } else {
            allowedVPCs = nil
        }
        let endpointCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endpointCount)
        endpointCount = endpointCountDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
    public struct EndpointAuthorization: Swift.Equatable {
        /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
        public var allowedAllVPCs: Swift.Bool?
        /// The VPCs allowed access to the cluster.
        public var allowedVPCs: [Swift.String]?
        /// The time (UTC) when the authorization was created.
        public var authorizeTime: ClientRuntime.Date?
        /// The cluster identifier.
        public var clusterIdentifier: Swift.String?
        /// The status of the cluster.
        public var clusterStatus: Swift.String?
        /// The number of Redshift-managed VPC endpoints created for the authorization.
        public var endpointCount: Swift.Int?
        /// The Amazon Web Services account ID of the grantee of the cluster.
        public var grantee: Swift.String?
        /// The Amazon Web Services account ID of the cluster owner.
        public var grantor: Swift.String?
        /// The status of the authorization action.
        public var status: RedshiftClientTypes.AuthorizationStatus?

        public init(
            allowedAllVPCs: Swift.Bool? = nil,
            allowedVPCs: [Swift.String]? = nil,
            authorizeTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterStatus: Swift.String? = nil,
            endpointCount: Swift.Int? = nil,
            grantee: Swift.String? = nil,
            grantor: Swift.String? = nil,
            status: RedshiftClientTypes.AuthorizationStatus? = nil
        )
        {
            self.allowedAllVPCs = allowedAllVPCs
            self.allowedVPCs = allowedVPCs
            self.authorizeTime = authorizeTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterStatus = clusterStatus
            self.endpointCount = endpointCount
            self.grantee = grantee
            self.grantor = grantor
            self.status = status
        }
    }

}

extension EndpointAuthorizationAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointAuthorizationAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The authorization already exists for this endpoint.
public struct EndpointAuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointAuthorizationAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointAuthorizationAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EndpointAuthorizationNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointAuthorizationNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The authorization for this endpoint can't be found.
public struct EndpointAuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointAuthorizationNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointAuthorizationNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EndpointAuthorizationsPerClusterLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointAuthorizationsPerClusterLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of endpoint authorizations per cluster has exceeded its limit.
public struct EndpointAuthorizationsPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationsPerClusterLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointAuthorizationsPerClusterLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointAuthorizationsPerClusterLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EndpointNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The endpoint name doesn't refer to an existing endpoint.
public struct EndpointNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EndpointsPerAuthorizationLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointsPerAuthorizationLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of Redshift-managed VPC endpoints per authorization has exceeded its limit.
public struct EndpointsPerAuthorizationLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointsPerAuthorizationLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointsPerAuthorizationLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointsPerAuthorizationLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EndpointsPerClusterLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EndpointsPerClusterLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of Redshift-managed VPC endpoints per cluster has exceeded its limit.
public struct EndpointsPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointsPerClusterLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EndpointsPerClusterLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EndpointsPerClusterLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.Event: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case eventCategories = "EventCategories"
        case eventId = "EventId"
        case message = "Message"
        case severity = "Severity"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let date = date {
            try container.encodeTimestamp(date, format: .dateTime, forKey: ClientRuntime.Key("Date"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        if containerValues.contains(.eventCategories) {
            struct KeyVal0{struct EventCategory{}}
            let eventCategoriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventCategory>.CodingKeys.self, forKey: .eventCategories)
            if let eventCategoriesWrappedContainer = eventCategoriesWrappedContainer {
                let eventCategoriesContainer = try eventCategoriesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var eventCategoriesBuffer:[Swift.String]? = nil
                if let eventCategoriesContainer = eventCategoriesContainer {
                    eventCategoriesBuffer = [Swift.String]()
                    for stringContainer0 in eventCategoriesContainer {
                        eventCategoriesBuffer?.append(stringContainer0)
                    }
                }
                eventCategories = eventCategoriesBuffer
            } else {
                eventCategories = []
            }
        } else {
            eventCategories = nil
        }
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
        let dateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .date)
        date = dateDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes an event.
    public struct Event: Swift.Equatable {
        /// The date and time of the event.
        public var date: ClientRuntime.Date?
        /// A list of the event categories. Values: Configuration, Management, Monitoring, Security, Pending
        public var eventCategories: [Swift.String]?
        /// The identifier of the event.
        public var eventId: Swift.String?
        /// The text of this event.
        public var message: Swift.String?
        /// The severity of the event. Values: ERROR, INFO
        public var severity: Swift.String?
        /// The identifier for the source of the event.
        public var sourceIdentifier: Swift.String?
        /// The source type for this event.
        public var sourceType: RedshiftClientTypes.SourceType?

        public init(
            date: ClientRuntime.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            eventId: Swift.String? = nil,
            message: Swift.String? = nil,
            severity: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: RedshiftClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.eventCategories = eventCategories
            self.eventId = eventId
            self.message = message
            self.severity = severity
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }

}

extension RedshiftClientTypes.EventCategoriesMap: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let events = events {
            if !events.isEmpty {
                var eventsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Events"))
                for (index0, eventinfomap0) in events.enumerated() {
                    try eventsContainer.encode(eventinfomap0, forKey: ClientRuntime.Key("EventInfoMap.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Events"))
                try eventsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        if containerValues.contains(.events) {
            struct KeyVal0{struct EventInfoMap{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventInfoMap>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([RedshiftClientTypes.EventInfoMap].self, forKey: .member)
                var eventsBuffer:[RedshiftClientTypes.EventInfoMap]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [RedshiftClientTypes.EventInfoMap]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes event categories.
    public struct EventCategoriesMap: Swift.Equatable {
        /// The events in the event category.
        public var events: [RedshiftClientTypes.EventInfoMap]?
        /// The source type, such as cluster or cluster-snapshot, that the returned categories belong to.
        public var sourceType: Swift.String?

        public init(
            events: [RedshiftClientTypes.EventInfoMap]? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.events = events
            self.sourceType = sourceType
        }
    }

}

extension RedshiftClientTypes.EventInfoMap: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventCategories = "EventCategories"
        case eventDescription = "EventDescription"
        case eventId = "EventId"
        case severity = "Severity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let eventDescription = eventDescription {
            try container.encode(eventDescription, forKey: ClientRuntime.Key("EventDescription"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        if containerValues.contains(.eventCategories) {
            struct KeyVal0{struct EventCategory{}}
            let eventCategoriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventCategory>.CodingKeys.self, forKey: .eventCategories)
            if let eventCategoriesWrappedContainer = eventCategoriesWrappedContainer {
                let eventCategoriesContainer = try eventCategoriesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var eventCategoriesBuffer:[Swift.String]? = nil
                if let eventCategoriesContainer = eventCategoriesContainer {
                    eventCategoriesBuffer = [Swift.String]()
                    for stringContainer0 in eventCategoriesContainer {
                        eventCategoriesBuffer?.append(stringContainer0)
                    }
                }
                eventCategories = eventCategoriesBuffer
            } else {
                eventCategories = []
            }
        } else {
            eventCategories = nil
        }
        let eventDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDescription)
        eventDescription = eventDescriptionDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes event information.
    public struct EventInfoMap: Swift.Equatable {
        /// The category of an Amazon Redshift event.
        public var eventCategories: [Swift.String]?
        /// The description of an Amazon Redshift event.
        public var eventDescription: Swift.String?
        /// The identifier of an Amazon Redshift event.
        public var eventId: Swift.String?
        /// The severity of the event. Values: ERROR, INFO
        public var severity: Swift.String?

        public init(
            eventCategories: [Swift.String]? = nil,
            eventDescription: Swift.String? = nil,
            eventId: Swift.String? = nil,
            severity: Swift.String? = nil
        )
        {
            self.eventCategories = eventCategories
            self.eventDescription = eventDescription
            self.eventId = eventId
            self.severity = severity
        }
    }

}

extension RedshiftClientTypes.EventSubscription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case custSubscriptionId = "CustSubscriptionId"
        case customerAwsId = "CustomerAwsId"
        case enabled = "Enabled"
        case eventCategoriesList = "EventCategoriesList"
        case severity = "Severity"
        case snsTopicArn = "SnsTopicArn"
        case sourceIdsList = "SourceIdsList"
        case sourceType = "SourceType"
        case status = "Status"
        case subscriptionCreationTime = "SubscriptionCreationTime"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let custSubscriptionId = custSubscriptionId {
            try container.encode(custSubscriptionId, forKey: ClientRuntime.Key("CustSubscriptionId"))
        }
        if let customerAwsId = customerAwsId {
            try container.encode(customerAwsId, forKey: ClientRuntime.Key("CustomerAwsId"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategoriesList = eventCategoriesList {
            if !eventCategoriesList.isEmpty {
                var eventCategoriesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategoriesList"))
                for (index0, string0) in eventCategoriesList.enumerated() {
                    try eventCategoriesListContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategoriesList"))
                try eventCategoriesListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIdsList = sourceIdsList {
            if !sourceIdsList.isEmpty {
                var sourceIdsListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIdsList"))
                for (index0, string0) in sourceIdsList.enumerated() {
                    try sourceIdsListContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIdsList"))
                try sourceIdsListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let subscriptionCreationTime = subscriptionCreationTime {
            try container.encodeTimestamp(subscriptionCreationTime, format: .dateTime, forKey: ClientRuntime.Key("SubscriptionCreationTime"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customerAwsIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAwsId)
        customerAwsId = customerAwsIdDecoded
        let custSubscriptionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .custSubscriptionId)
        custSubscriptionId = custSubscriptionIdDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let subscriptionCreationTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .subscriptionCreationTime)
        subscriptionCreationTime = subscriptionCreationTimeDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        if containerValues.contains(.sourceIdsList) {
            struct KeyVal0{struct SourceId{}}
            let sourceIdsListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SourceId>.CodingKeys.self, forKey: .sourceIdsList)
            if let sourceIdsListWrappedContainer = sourceIdsListWrappedContainer {
                let sourceIdsListContainer = try sourceIdsListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var sourceIdsListBuffer:[Swift.String]? = nil
                if let sourceIdsListContainer = sourceIdsListContainer {
                    sourceIdsListBuffer = [Swift.String]()
                    for stringContainer0 in sourceIdsListContainer {
                        sourceIdsListBuffer?.append(stringContainer0)
                    }
                }
                sourceIdsList = sourceIdsListBuffer
            } else {
                sourceIdsList = []
            }
        } else {
            sourceIdsList = nil
        }
        if containerValues.contains(.eventCategoriesList) {
            struct KeyVal0{struct EventCategory{}}
            let eventCategoriesListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventCategory>.CodingKeys.self, forKey: .eventCategoriesList)
            if let eventCategoriesListWrappedContainer = eventCategoriesListWrappedContainer {
                let eventCategoriesListContainer = try eventCategoriesListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var eventCategoriesListBuffer:[Swift.String]? = nil
                if let eventCategoriesListContainer = eventCategoriesListContainer {
                    eventCategoriesListBuffer = [Swift.String]()
                    for stringContainer0 in eventCategoriesListContainer {
                        eventCategoriesListBuffer?.append(stringContainer0)
                    }
                }
                eventCategoriesList = eventCategoriesListBuffer
            } else {
                eventCategoriesList = []
            }
        } else {
            eventCategoriesList = nil
        }
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes event subscriptions.
    public struct EventSubscription: Swift.Equatable {
        /// The name of the Amazon Redshift event notification subscription.
        public var custSubscriptionId: Swift.String?
        /// The Amazon Web Services account associated with the Amazon Redshift event notification subscription.
        public var customerAwsId: Swift.String?
        /// A boolean value indicating whether the subscription is enabled; true indicates that the subscription is enabled.
        public var enabled: Swift.Bool?
        /// The list of Amazon Redshift event categories specified in the event notification subscription. Values: Configuration, Management, Monitoring, Security, Pending
        public var eventCategoriesList: [Swift.String]?
        /// The event severity specified in the Amazon Redshift event notification subscription. Values: ERROR, INFO
        public var severity: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.
        public var snsTopicArn: Swift.String?
        /// A list of the sources that publish events to the Amazon Redshift event notification subscription.
        public var sourceIdsList: [Swift.String]?
        /// The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action.
        public var sourceType: Swift.String?
        /// The status of the Amazon Redshift event notification subscription. Constraints:
        ///
        /// * Can be one of the following: active | no-permission | topic-not-exist
        ///
        /// * The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public var status: Swift.String?
        /// The date and time the Amazon Redshift event notification subscription was created.
        public var subscriptionCreationTime: ClientRuntime.Date?
        /// The list of tags for the event subscription.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            custSubscriptionId: Swift.String? = nil,
            customerAwsId: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            eventCategoriesList: [Swift.String]? = nil,
            severity: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            sourceIdsList: [Swift.String]? = nil,
            sourceType: Swift.String? = nil,
            status: Swift.String? = nil,
            subscriptionCreationTime: ClientRuntime.Date? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.custSubscriptionId = custSubscriptionId
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.eventCategoriesList = eventCategoriesList
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
            self.tags = tags
        }
    }

}

extension EventSubscriptionQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<EventSubscriptionQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request would exceed the allowed number of event subscriptions for this account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct EventSubscriptionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventSubscriptionQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct EventSubscriptionQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension EventSubscriptionQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension FailoverPrimaryComputeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("FailoverPrimaryCompute", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension FailoverPrimaryComputeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct FailoverPrimaryComputeInput: Swift.Equatable {
    /// The unique identifier of the cluster for which the primary compute unit will be failed over to another Availability Zone.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct FailoverPrimaryComputeInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension FailoverPrimaryComputeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension FailoverPrimaryComputeOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: FailoverPrimaryComputeOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct FailoverPrimaryComputeOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct FailoverPrimaryComputeOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension FailoverPrimaryComputeOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("FailoverPrimaryComputeResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum FailoverPrimaryComputeOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension GetClusterCredentialsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoCreate = autoCreate {
            try container.encode(autoCreate, forKey: ClientRuntime.Key("AutoCreate"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let dbGroups = dbGroups {
            if !dbGroups.isEmpty {
                var dbGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DbGroups"))
                for (index0, string0) in dbGroups.enumerated() {
                    try dbGroupsContainer.encode(string0, forKey: ClientRuntime.Key("DbGroup.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dbGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DbGroups"))
                try dbGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DbName"))
        }
        if let dbUser = dbUser {
            try container.encode(dbUser, forKey: ClientRuntime.Key("DbUser"))
        }
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: ClientRuntime.Key("DurationSeconds"))
        }
        try container.encode("GetClusterCredentials", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetClusterCredentialsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The request parameters to get cluster credentials.
public struct GetClusterCredentialsInput: Swift.Equatable {
    /// Create a database user with the name specified for the user named in DbUser if one does not exist.
    public var autoCreate: Swift.Bool?
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the cluster credentials.
    public var customDomainName: Swift.String?
    /// A list of the names of existing database groups that the user named in DbUser will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC. Database group name constraints
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbGroups: [Swift.String]?
    /// The name of a database that DbUser is authorized to log on to. If DbName is not specified, DbUser can log on to any existing database. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The name of a database user. If a user name matching DbUser exists in the database, the temporary user credentials have the same permissions as the existing user. If DbUser doesn't exist in the database and Autocreate is True, a new user is created using the value for DbUser with PUBLIC permissions. If a database user matching the value for DbUser doesn't exist and Autocreate is False, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database. For more information, see [CREATE USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html) in the Amazon Redshift Database Developer Guide. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var dbUser: Swift.String?
    /// The number of seconds until the returned temporary password expires. Constraint: minimum 900, maximum 3600. Default: 900
    public var durationSeconds: Swift.Int?

    public init(
        autoCreate: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        dbGroups: [Swift.String]? = nil,
        dbName: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.autoCreate = autoCreate
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
        self.dbGroups = dbGroups
        self.dbName = dbName
        self.dbUser = dbUser
        self.durationSeconds = durationSeconds
    }
}

struct GetClusterCredentialsInputBody: Swift.Equatable {
    let dbUser: Swift.String?
    let dbName: Swift.String?
    let clusterIdentifier: Swift.String?
    let durationSeconds: Swift.Int?
    let autoCreate: Swift.Bool?
    let dbGroups: [Swift.String]?
    let customDomainName: Swift.String?
}

extension GetClusterCredentialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoCreate = "AutoCreate"
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
        case dbGroups = "DbGroups"
        case dbName = "DbName"
        case dbUser = "DbUser"
        case durationSeconds = "DurationSeconds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let autoCreateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoCreate)
        autoCreate = autoCreateDecoded
        if containerValues.contains(.dbGroups) {
            struct KeyVal0{struct DbGroup{}}
            let dbGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DbGroup>.CodingKeys.self, forKey: .dbGroups)
            if let dbGroupsWrappedContainer = dbGroupsWrappedContainer {
                let dbGroupsContainer = try dbGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dbGroupsBuffer:[Swift.String]? = nil
                if let dbGroupsContainer = dbGroupsContainer {
                    dbGroupsBuffer = [Swift.String]()
                    for stringContainer0 in dbGroupsContainer {
                        dbGroupsBuffer?.append(stringContainer0)
                    }
                }
                dbGroups = dbGroupsBuffer
            } else {
                dbGroups = []
            }
        } else {
            dbGroups = nil
        }
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
    }
}

extension GetClusterCredentialsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetClusterCredentialsOutput(dbUser: \(Swift.String(describing: dbUser)), expiration: \(Swift.String(describing: expiration)), dbPassword: \"CONTENT_REDACTED\")"}
}

extension GetClusterCredentialsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetClusterCredentialsOutputBody = try responseDecoder.decode(responseBody: data)
            self.dbPassword = output.dbPassword
            self.dbUser = output.dbUser
            self.expiration = output.expiration
        } else {
            self.dbPassword = nil
            self.dbUser = nil
            self.expiration = nil
        }
    }
}

/// Temporary credentials with authorization to log on to an Amazon Redshift database.
public struct GetClusterCredentialsOutput: Swift.Equatable {
    /// A temporary password that authorizes the user name returned by DbUser to log on to the database DbName.
    public var dbPassword: Swift.String?
    /// A database user name that is authorized to log on to the database DbName using the password DbPassword. If the specified DbUser exists in the database, the new user name has the same database permissions as the the user named in DbUser. By default, the user is added to PUBLIC. If the DbGroups parameter is specifed, DbUser is added to the listed groups for any sessions created using these credentials.
    public var dbUser: Swift.String?
    /// The date and time the password in DbPassword expires.
    public var expiration: ClientRuntime.Date?

    public init(
        dbPassword: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        expiration: ClientRuntime.Date? = nil
    )
    {
        self.dbPassword = dbPassword
        self.dbUser = dbUser
        self.expiration = expiration
    }
}

struct GetClusterCredentialsOutputBody: Swift.Equatable {
    let dbUser: Swift.String?
    let dbPassword: Swift.String?
    let expiration: ClientRuntime.Date?
}

extension GetClusterCredentialsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbPassword = "DbPassword"
        case dbUser = "DbUser"
        case expiration = "Expiration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetClusterCredentialsResult"))
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let dbPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbPassword)
        dbPassword = dbPasswordDecoded
        let expirationDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .expiration)
        expiration = expirationDecoded
    }
}

enum GetClusterCredentialsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension GetClusterCredentialsWithIAMInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DbName"))
        }
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: ClientRuntime.Key("DurationSeconds"))
        }
        try container.encode("GetClusterCredentialsWithIAM", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetClusterCredentialsWithIAMInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetClusterCredentialsWithIAMInput: Swift.Equatable {
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the IAM message cluster credentials.
    public var customDomainName: Swift.String?
    /// The name of the database for which you are requesting credentials. If the database name is specified, the IAM policy must allow access to the resource dbname for the specified database name. If the database name is not specified, access to all databases is allowed.
    public var dbName: Swift.String?
    /// The number of seconds until the returned temporary password expires. Range: 900-3600. Default: 900.
    public var durationSeconds: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        dbName: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
        self.dbName = dbName
        self.durationSeconds = durationSeconds
    }
}

struct GetClusterCredentialsWithIAMInputBody: Swift.Equatable {
    let dbName: Swift.String?
    let clusterIdentifier: Swift.String?
    let durationSeconds: Swift.Int?
    let customDomainName: Swift.String?
}

extension GetClusterCredentialsWithIAMInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainName = "CustomDomainName"
        case dbName = "DbName"
        case durationSeconds = "DurationSeconds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
    }
}

extension GetClusterCredentialsWithIAMOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetClusterCredentialsWithIAMOutput(dbUser: \(Swift.String(describing: dbUser)), expiration: \(Swift.String(describing: expiration)), nextRefreshTime: \(Swift.String(describing: nextRefreshTime)), dbPassword: \"CONTENT_REDACTED\")"}
}

extension GetClusterCredentialsWithIAMOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetClusterCredentialsWithIAMOutputBody = try responseDecoder.decode(responseBody: data)
            self.dbPassword = output.dbPassword
            self.dbUser = output.dbUser
            self.expiration = output.expiration
            self.nextRefreshTime = output.nextRefreshTime
        } else {
            self.dbPassword = nil
            self.dbUser = nil
            self.expiration = nil
            self.nextRefreshTime = nil
        }
    }
}

public struct GetClusterCredentialsWithIAMOutput: Swift.Equatable {
    /// A temporary password that you provide when you connect to a database.
    public var dbPassword: Swift.String?
    /// A database user name that you provide when you connect to a database. The database user is mapped 1:1 to the source IAM identity.
    public var dbUser: Swift.String?
    /// The time (UTC) when the temporary password expires. After this timestamp, a log in with the temporary password fails.
    public var expiration: ClientRuntime.Date?
    /// Reserved for future use.
    public var nextRefreshTime: ClientRuntime.Date?

    public init(
        dbPassword: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        expiration: ClientRuntime.Date? = nil,
        nextRefreshTime: ClientRuntime.Date? = nil
    )
    {
        self.dbPassword = dbPassword
        self.dbUser = dbUser
        self.expiration = expiration
        self.nextRefreshTime = nextRefreshTime
    }
}

struct GetClusterCredentialsWithIAMOutputBody: Swift.Equatable {
    let dbUser: Swift.String?
    let dbPassword: Swift.String?
    let expiration: ClientRuntime.Date?
    let nextRefreshTime: ClientRuntime.Date?
}

extension GetClusterCredentialsWithIAMOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbPassword = "DbPassword"
        case dbUser = "DbUser"
        case expiration = "Expiration"
        case nextRefreshTime = "NextRefreshTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetClusterCredentialsWithIAMResult"))
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let dbPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbPassword)
        dbPassword = dbPasswordDecoded
        let expirationDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .expiration)
        expiration = expirationDecoded
        let nextRefreshTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .nextRefreshTime)
        nextRefreshTime = nextRefreshTimeDecoded
    }
}

enum GetClusterCredentialsWithIAMOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension GetReservedNodeExchangeConfigurationOptionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("GetReservedNodeExchangeConfigurationOptions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetReservedNodeExchangeConfigurationOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetReservedNodeExchangeConfigurationOptionsInput: Swift.Equatable {
    /// The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.
    /// This member is required.
    public var actionType: RedshiftClientTypes.ReservedNodeExchangeActionType?
    /// The identifier for the cluster that is the source for a reserved-node exchange.
    public var clusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous GetReservedNodeExchangeConfigurationOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a Marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The identifier for the snapshot that is the source for the reserved-node exchange.
    public var snapshotIdentifier: Swift.String?

    public init(
        actionType: RedshiftClientTypes.ReservedNodeExchangeActionType? = nil,
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotIdentifier = snapshotIdentifier
    }
}

struct GetReservedNodeExchangeConfigurationOptionsInputBody: Swift.Equatable {
    let actionType: RedshiftClientTypes.ReservedNodeExchangeActionType?
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension GetReservedNodeExchangeConfigurationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case clusterIdentifier = "ClusterIdentifier"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeExchangeActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension GetReservedNodeExchangeConfigurationOptionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetReservedNodeExchangeConfigurationOptionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedNodeConfigurationOptionList = output.reservedNodeConfigurationOptionList
        } else {
            self.marker = nil
            self.reservedNodeConfigurationOptionList = nil
        }
    }
}

public struct GetReservedNodeExchangeConfigurationOptionsOutput: Swift.Equatable {
    /// A pagination token provided by a previous GetReservedNodeExchangeConfigurationOptions request.
    public var marker: Swift.String?
    /// the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.
    public var reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeConfigurationOptionList = reservedNodeConfigurationOptionList
    }
}

struct GetReservedNodeExchangeConfigurationOptionsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]?
}

extension GetReservedNodeExchangeConfigurationOptionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeConfigurationOptionList = "ReservedNodeConfigurationOptionList"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetReservedNodeExchangeConfigurationOptionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodeConfigurationOptionList) {
            struct KeyVal0{struct ReservedNodeConfigurationOption{}}
            let reservedNodeConfigurationOptionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeConfigurationOption>.CodingKeys.self, forKey: .reservedNodeConfigurationOptionList)
            if let reservedNodeConfigurationOptionListWrappedContainer = reservedNodeConfigurationOptionListWrappedContainer {
                let reservedNodeConfigurationOptionListContainer = try reservedNodeConfigurationOptionListWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeConfigurationOption].self, forKey: .member)
                var reservedNodeConfigurationOptionListBuffer:[RedshiftClientTypes.ReservedNodeConfigurationOption]? = nil
                if let reservedNodeConfigurationOptionListContainer = reservedNodeConfigurationOptionListContainer {
                    reservedNodeConfigurationOptionListBuffer = [RedshiftClientTypes.ReservedNodeConfigurationOption]()
                    for structureContainer0 in reservedNodeConfigurationOptionListContainer {
                        reservedNodeConfigurationOptionListBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeConfigurationOptionList = reservedNodeConfigurationOptionListBuffer
            } else {
                reservedNodeConfigurationOptionList = []
            }
        } else {
            reservedNodeConfigurationOptionList = nil
        }
    }
}

enum GetReservedNodeExchangeConfigurationOptionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension GetReservedNodeExchangeOfferingsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        try container.encode("GetReservedNodeExchangeOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetReservedNodeExchangeOfferingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct GetReservedNodeExchangeOfferingsInput: Swift.Equatable {
    /// A value that indicates the starting point for the next set of ReservedNodeOfferings.
    public var marker: Swift.String?
    /// An integer setting the maximum number of ReservedNodeOfferings to retrieve.
    public var maxRecords: Swift.Int?
    /// A string representing the node identifier for the DC1 Reserved Node to be exchanged.
    /// This member is required.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeId = reservedNodeId
    }
}

struct GetReservedNodeExchangeOfferingsInputBody: Swift.Equatable {
    let reservedNodeId: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension GetReservedNodeExchangeOfferingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case reservedNodeId = "ReservedNodeId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension GetReservedNodeExchangeOfferingsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetReservedNodeExchangeOfferingsOutputBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedNodeOfferings = output.reservedNodeOfferings
        } else {
            self.marker = nil
            self.reservedNodeOfferings = nil
        }
    }
}

public struct GetReservedNodeExchangeOfferingsOutput: Swift.Equatable {
    /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a GetReservedNodeExchangeOfferings request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request.
    public var marker: Swift.String?
    /// Returns an array of [ReservedNodeOffering] objects.
    public var reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeOfferings = reservedNodeOfferings
    }
}

struct GetReservedNodeExchangeOfferingsOutputBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?
}

extension GetReservedNodeExchangeOfferingsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeOfferings = "ReservedNodeOfferings"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetReservedNodeExchangeOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodeOfferings) {
            struct KeyVal0{struct ReservedNodeOffering{}}
            let reservedNodeOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeOffering>.CodingKeys.self, forKey: .reservedNodeOfferings)
            if let reservedNodeOfferingsWrappedContainer = reservedNodeOfferingsWrappedContainer {
                let reservedNodeOfferingsContainer = try reservedNodeOfferingsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeOffering].self, forKey: .member)
                var reservedNodeOfferingsBuffer:[RedshiftClientTypes.ReservedNodeOffering]? = nil
                if let reservedNodeOfferingsContainer = reservedNodeOfferingsContainer {
                    reservedNodeOfferingsBuffer = [RedshiftClientTypes.ReservedNodeOffering]()
                    for structureContainer0 in reservedNodeOfferingsContainer {
                        reservedNodeOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeOfferings = reservedNodeOfferingsBuffer
            } else {
                reservedNodeOfferings = []
            }
        } else {
            reservedNodeOfferings = nil
        }
    }
}

enum GetReservedNodeExchangeOfferingsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension GetResourcePolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("GetResourcePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is fetched.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetResourcePolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct GetResourcePolicyOutput: Swift.Equatable {
    /// The content of the resource policy.
    public var resourcePolicy: RedshiftClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: RedshiftClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct GetResourcePolicyOutputBody: Swift.Equatable {
    let resourcePolicy: RedshiftClientTypes.ResourcePolicy?
}

extension GetResourcePolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy = "ResourcePolicy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetResourcePolicyResult"))
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

enum GetResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidPolicyFault": return try await InvalidPolicyFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResourceNotFoundFault": return try await ResourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.HsmClientCertificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmClientCertificatePublicKey = "HsmClientCertificatePublicKey"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmClientCertificatePublicKey = hsmClientCertificatePublicKey {
            try container.encode(hsmClientCertificatePublicKey, forKey: ClientRuntime.Key("HsmClientCertificatePublicKey"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmClientCertificatePublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificatePublicKey)
        hsmClientCertificatePublicKey = hsmClientCertificatePublicKeyDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
    public struct HsmClientCertificate: Swift.Equatable {
        /// The identifier of the HSM client certificate.
        public var hsmClientCertificateIdentifier: Swift.String?
        /// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
        public var hsmClientCertificatePublicKey: Swift.String?
        /// The list of tags for the HSM client certificate.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmClientCertificatePublicKey: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmClientCertificatePublicKey = hsmClientCertificatePublicKey
            self.tags = tags
        }
    }

}

extension HsmClientCertificateAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<HsmClientCertificateAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is already an existing Amazon Redshift HSM client certificate with the specified identifier.
public struct HsmClientCertificateAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct HsmClientCertificateAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension HsmClientCertificateAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HsmClientCertificateNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<HsmClientCertificateNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is no Amazon Redshift HSM client certificate with the specified identifier.
public struct HsmClientCertificateNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct HsmClientCertificateNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension HsmClientCertificateNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HsmClientCertificateQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<HsmClientCertificateQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The quota for HSM client certificates has been reached. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct HsmClientCertificateQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct HsmClientCertificateQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension HsmClientCertificateQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.HsmConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case hsmIpAddress = "HsmIpAddress"
        case hsmPartitionName = "HsmPartitionName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let hsmIpAddress = hsmIpAddress {
            try container.encode(hsmIpAddress, forKey: ClientRuntime.Key("HsmIpAddress"))
        }
        if let hsmPartitionName = hsmPartitionName {
            try container.encode(hsmPartitionName, forKey: ClientRuntime.Key("HsmPartitionName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let hsmIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmIpAddress)
        hsmIpAddress = hsmIpAddressDecoded
        let hsmPartitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmPartitionName)
        hsmPartitionName = hsmPartitionNameDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
    public struct HsmConfiguration: Swift.Equatable {
        /// A text description of the HSM configuration.
        public var description: Swift.String?
        /// The name of the Amazon Redshift HSM configuration.
        public var hsmConfigurationIdentifier: Swift.String?
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public var hsmIpAddress: Swift.String?
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public var hsmPartitionName: Swift.String?
        /// The list of tags for the HSM configuration.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            description: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            hsmIpAddress: Swift.String? = nil,
            hsmPartitionName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.hsmIpAddress = hsmIpAddress
            self.hsmPartitionName = hsmPartitionName
            self.tags = tags
        }
    }

}

extension HsmConfigurationAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<HsmConfigurationAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is already an existing Amazon Redshift HSM configuration with the specified identifier.
public struct HsmConfigurationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct HsmConfigurationAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension HsmConfigurationAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HsmConfigurationNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<HsmConfigurationNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is no Amazon Redshift HSM configuration with the specified identifier.
public struct HsmConfigurationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct HsmConfigurationNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension HsmConfigurationNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HsmConfigurationQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<HsmConfigurationQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The quota for HSM configurations has been reached. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct HsmConfigurationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct HsmConfigurationQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension HsmConfigurationQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.HsmStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the status of changes to HSM settings.
    public struct HsmStatus: Swift.Equatable {
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public var hsmClientCertificateIdentifier: Swift.String?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public var hsmConfigurationIdentifier: Swift.String?
        /// Reports whether the Amazon Redshift cluster has finished applying any HSM settings changes specified in a modify cluster command. Values: active, applying
        public var status: Swift.String?

        public init(
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.status = status
        }
    }

}

extension RedshiftClientTypes.IPRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let cidripDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrip)
        cidrip = cidripDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an IP range used in a security group.
    public struct IPRange: Swift.Equatable {
        /// The IP range in Classless Inter-Domain Routing (CIDR) notation.
        public var cidrip: Swift.String?
        /// The status of the IP range, for example, "authorized".
        public var status: Swift.String?
        /// The list of tags for the IP range.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            cidrip: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.cidrip = cidrip
            self.status = status
            self.tags = tags
        }
    }

}

extension InProgressTableRestoreQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InProgressTableRestoreQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have exceeded the allowed number of table restore requests. Wait for your current table restore requests to complete before making a new request.
public struct InProgressTableRestoreQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InProgressTableRestoreQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InProgressTableRestoreQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InProgressTableRestoreQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.InboundIntegration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime = "CreateTime"
        case errors = "Errors"
        case integrationArn = "IntegrationArn"
        case sourceArn = "SourceArn"
        case status = "Status"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createTime = createTime {
            try container.encodeTimestamp(createTime, format: .dateTime, forKey: ClientRuntime.Key("CreateTime"))
        }
        if let errors = errors {
            if !errors.isEmpty {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Errors"))
                for (index0, integrationerror0) in errors.enumerated() {
                    try errorsContainer.encode(integrationerror0, forKey: ClientRuntime.Key("IntegrationError.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var errorsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Errors"))
                try errorsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let integrationArn = integrationArn {
            try container.encode(integrationArn, forKey: ClientRuntime.Key("IntegrationArn"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetArn = targetArn {
            try container.encode(targetArn, forKey: ClientRuntime.Key("TargetArn"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationArn)
        integrationArn = integrationArnDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ZeroETLIntegrationStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.errors) {
            struct KeyVal0{struct IntegrationError{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IntegrationError>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([RedshiftClientTypes.IntegrationError].self, forKey: .member)
                var errorsBuffer:[RedshiftClientTypes.IntegrationError]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [RedshiftClientTypes.IntegrationError]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createTime)
        createTime = createTimeDecoded
    }
}

extension RedshiftClientTypes {
    /// The content of an inbound integration.
    public struct InboundIntegration: Swift.Equatable {
        /// The creation time of an inbound integration.
        public var createTime: ClientRuntime.Date?
        /// The outstanding errors of an inbound integration. Each item is an "IntegrationError". This is null if there is no error.
        public var errors: [RedshiftClientTypes.IntegrationError]?
        /// The Amazon Resource Name (ARN) of an inbound integration.
        public var integrationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the source of an inbound integration.
        public var sourceArn: Swift.String?
        /// The status of an inbound integration.
        public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
        /// The Amazon Resource Name (ARN) of the target of an inbound integration.
        public var targetArn: Swift.String?

        public init(
            createTime: ClientRuntime.Date? = nil,
            errors: [RedshiftClientTypes.IntegrationError]? = nil,
            integrationArn: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.createTime = createTime
            self.errors = errors
            self.integrationArn = integrationArn
            self.sourceArn = sourceArn
            self.status = status
            self.targetArn = targetArn
        }
    }

}

extension IncompatibleOrderableOptions {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<IncompatibleOrderableOptionsBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified options are incompatible.
public struct IncompatibleOrderableOptions: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleOrderableOptions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct IncompatibleOrderableOptionsBody: Swift.Equatable {
    let message: Swift.String?
}

extension IncompatibleOrderableOptionsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InsufficientClusterCapacityFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InsufficientClusterCapacityFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of nodes specified exceeds the allotted capacity of the cluster.
public struct InsufficientClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientClusterCapacity" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InsufficientClusterCapacityFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InsufficientClusterCapacityFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InsufficientS3BucketPolicyFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InsufficientS3BucketPolicyFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster does not have read bucket or put object permissions on the S3 bucket specified when enabling logging.
public struct InsufficientS3BucketPolicyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientS3BucketPolicyFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InsufficientS3BucketPolicyFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InsufficientS3BucketPolicyFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.IntegrationError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension RedshiftClientTypes {
    /// The error of an inbound integration.
    public struct IntegrationError: Swift.Equatable {
        /// The error code of an inbound integration error.
        /// This member is required.
        public var errorCode: Swift.String?
        /// The error message of an inbound integration error.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }

}

extension IntegrationNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<IntegrationNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The integration can't be found.
public struct IntegrationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct IntegrationNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension IntegrationNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAuthenticationProfileRequestFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidAuthenticationProfileRequestFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The authentication profile request is not valid. The profile name can't be null or empty. The authentication profile API operation must be available in the Amazon Web Services Region.
public struct InvalidAuthenticationProfileRequestFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAuthenticationProfileRequestFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidAuthenticationProfileRequestFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidAuthenticationProfileRequestFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAuthorizationStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidAuthorizationStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The status of the authorization is not valid.
public struct InvalidAuthorizationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAuthorizationState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidAuthorizationStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidAuthorizationStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterParameterGroupStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterParameterGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster parameter group action can not be completed because another task is in progress that involves the parameter group. Wait a few moments and try the operation again.
public struct InvalidClusterParameterGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterParameterGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterParameterGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterParameterGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterSecurityGroupStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterSecurityGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The state of the cluster security group is not available.
public struct InvalidClusterSecurityGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSecurityGroupState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterSecurityGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterSecurityGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterSnapshotScheduleStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterSnapshotScheduleStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster snapshot schedule state is not valid.
public struct InvalidClusterSnapshotScheduleStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSnapshotScheduleState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterSnapshotScheduleStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterSnapshotScheduleStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterSnapshotStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterSnapshotStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified cluster snapshot is not in the available state, or other accounts are authorized to access the snapshot.
public struct InvalidClusterSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSnapshotState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterSnapshotStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterSnapshotStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified cluster is not in the available state.
public struct InvalidClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterSubnetGroupStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterSubnetGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster subnet group cannot be deleted because it is in use.
public struct InvalidClusterSubnetGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSubnetGroupStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterSubnetGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterSubnetGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterSubnetStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterSubnetStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The state of the subnet is invalid.
public struct InvalidClusterSubnetStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSubnetStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterSubnetStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterSubnetStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClusterTrackFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidClusterTrackFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The provided cluster track name is not valid.
public struct InvalidClusterTrackFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterTrack" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidClusterTrackFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClusterTrackFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDataShareFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidDataShareFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is an error with the datashare.
public struct InvalidDataShareFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDataShareFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidDataShareFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDataShareFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidElasticIpFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidElasticIpFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Elastic IP (EIP) is invalid or cannot be found.
public struct InvalidElasticIpFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidElasticIpFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidElasticIpFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidElasticIpFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEndpointStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidEndpointStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The status of the endpoint is not valid.
public struct InvalidEndpointStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEndpointState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidEndpointStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidEndpointStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidHsmClientCertificateStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidHsmClientCertificateStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified HSM client certificate is not in the available state, or it is still in use by one or more Amazon Redshift clusters.
public struct InvalidHsmClientCertificateStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHsmClientCertificateStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidHsmClientCertificateStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidHsmClientCertificateStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidHsmConfigurationStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidHsmConfigurationStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified HSM configuration is not in the available state, or it is still in use by one or more Amazon Redshift clusters.
public struct InvalidHsmConfigurationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHsmConfigurationStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidHsmConfigurationStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidHsmConfigurationStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNamespaceFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidNamespaceFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The namespace isn't valid because the namespace doesn't exist. Provide a valid namespace.
public struct InvalidNamespaceFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNamespaceFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidNamespaceFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNamespaceFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPolicyFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidPolicyFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The resource policy isn't valid.
public struct InvalidPolicyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicyFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidPolicyFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidPolicyFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidReservedNodeStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidReservedNodeStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Indicates that the Reserved Node being exchanged is not in an active state.
public struct InvalidReservedNodeStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidReservedNodeState" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidReservedNodeStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidReservedNodeStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRestoreFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidRestoreFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The restore is invalid.
public struct InvalidRestoreFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRestore" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidRestoreFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRestoreFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRetentionPeriodFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidRetentionPeriodFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The retention period specified is either in the past or is not a valid value. The value must be either -1 or an integer between 1 and 3,653.
public struct InvalidRetentionPeriodFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRetentionPeriodFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidRetentionPeriodFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRetentionPeriodFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3BucketNameFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidS3BucketNameFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The S3 bucket name is invalid. For more information about naming rules, go to [Bucket Restrictions and Limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html) in the Amazon Simple Storage Service (S3) Developer Guide.
public struct InvalidS3BucketNameFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3BucketNameFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidS3BucketNameFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidS3BucketNameFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3KeyPrefixFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidS3KeyPrefixFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The string specified for the logging S3 key prefix does not comply with the documented constraints.
public struct InvalidS3KeyPrefixFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3KeyPrefixFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidS3KeyPrefixFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidS3KeyPrefixFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidScheduleFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidScheduleFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The schedule you submitted isn't valid.
public struct InvalidScheduleFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSchedule" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidScheduleFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidScheduleFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidScheduledActionFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidScheduledActionFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The scheduled action is not valid.
public struct InvalidScheduledActionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidScheduledAction" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidScheduledActionFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidScheduledActionFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSnapshotCopyGrantStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSnapshotCopyGrantStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The snapshot copy grant can't be deleted because it is used by one or more clusters.
public struct InvalidSnapshotCopyGrantStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSnapshotCopyGrantStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidSnapshotCopyGrantStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSnapshotCopyGrantStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSubnet {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSubnetBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The requested subnet is not valid, or not all of the subnets are in the same VPC.
public struct InvalidSubnet: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidSubnetBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSubnetBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSubscriptionStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSubscriptionStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The subscription request is invalid because it is a duplicate request. This subscription request is already in progress.
public struct InvalidSubscriptionStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubscriptionStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidSubscriptionStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSubscriptionStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTableRestoreArgumentFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidTableRestoreArgumentFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The value specified for the sourceDatabaseName, sourceSchemaName, or sourceTableName parameter, or a combination of these, doesn't exist in the snapshot.
public struct InvalidTableRestoreArgumentFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTableRestoreArgument" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidTableRestoreArgumentFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTableRestoreArgumentFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidTagFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The tag is invalid.
public struct InvalidTagFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidTagFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTagFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUsageLimitFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidUsageLimitFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The usage limit is not valid.
public struct InvalidUsageLimitFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUsageLimit" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidUsageLimitFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidUsageLimitFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidVPCNetworkStateFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidVPCNetworkStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster subnet group does not cover all Availability Zones.
public struct InvalidVPCNetworkStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidVPCNetworkStateFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidVPCNetworkStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidVPCNetworkStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Ipv6CidrBlockNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<Ipv6CidrBlockNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There are no subnets in your VPC with associated IPv6 CIDR blocks. To use dual-stack mode, associate an IPv6 CIDR block with each subnet in your VPC.
public struct Ipv6CidrBlockNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Ipv6CidrBlockNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct Ipv6CidrBlockNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension Ipv6CidrBlockNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.LakeFormationQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorization = "Authorization"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorization = authorization {
            try container.encode(authorization, forKey: ClientRuntime.Key("Authorization"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizationDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ServiceAuthorization.self, forKey: .authorization)
        authorization = authorizationDecoded
    }
}

extension RedshiftClientTypes {
    /// The Lake Formation scope.
    public struct LakeFormationQuery: Swift.Equatable {
        /// Determines whether the query scope is enabled or disabled.
        /// This member is required.
        public var authorization: RedshiftClientTypes.ServiceAuthorization?

        public init(
            authorization: RedshiftClientTypes.ServiceAuthorization? = nil
        )
        {
            self.authorization = authorization
        }
    }

}

extension RedshiftClientTypes.LakeFormationScopeUnion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lakeformationquery = "LakeFormationQuery"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .lakeformationquery(lakeformationquery):
                try container.encode(lakeformationquery, forKey: .lakeformationquery)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let lakeformationqueryDecoded = try values.decodeIfPresent(RedshiftClientTypes.LakeFormationQuery.self, forKey: .lakeformationquery)
        if let lakeformationquery = lakeformationqueryDecoded {
            self = .lakeformationquery(lakeformationquery)
            return
        }
        self = .sdkUnknown("")
    }
}

extension RedshiftClientTypes {
    /// A list of scopes set up for Lake Formation integration.
    public enum LakeFormationScopeUnion: Swift.Equatable {
        /// The Lake Formation scope.
        case lakeformationquery(RedshiftClientTypes.LakeFormationQuery)
        case sdkUnknown(Swift.String)
    }

}

extension LimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The encryption key has exceeded its grant limit in Amazon Web Services KMS.
public struct LimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct LimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum LogDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatch
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDestinationType] {
            return [
                .cloudwatch,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatch: return "cloudwatch"
            case .s3: return "s3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogDestinationType(rawValue: rawValue) ?? LogDestinationType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.MaintenanceTrack: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseVersion = "DatabaseVersion"
        case maintenanceTrackName = "MaintenanceTrackName"
        case updateTargets = "UpdateTargets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseVersion = databaseVersion {
            try container.encode(databaseVersion, forKey: ClientRuntime.Key("DatabaseVersion"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let updateTargets = updateTargets {
            if !updateTargets.isEmpty {
                var updateTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UpdateTargets"))
                for (index0, updatetarget0) in updateTargets.enumerated() {
                    try updateTargetsContainer.encode(updatetarget0, forKey: ClientRuntime.Key("UpdateTarget.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var updateTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UpdateTargets"))
                try updateTargetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let databaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseVersion)
        databaseVersion = databaseVersionDecoded
        if containerValues.contains(.updateTargets) {
            struct KeyVal0{struct UpdateTarget{}}
            let updateTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UpdateTarget>.CodingKeys.self, forKey: .updateTargets)
            if let updateTargetsWrappedContainer = updateTargetsWrappedContainer {
                let updateTargetsContainer = try updateTargetsWrappedContainer.decodeIfPresent([RedshiftClientTypes.UpdateTarget].self, forKey: .member)
                var updateTargetsBuffer:[RedshiftClientTypes.UpdateTarget]? = nil
                if let updateTargetsContainer = updateTargetsContainer {
                    updateTargetsBuffer = [RedshiftClientTypes.UpdateTarget]()
                    for structureContainer0 in updateTargetsContainer {
                        updateTargetsBuffer?.append(structureContainer0)
                    }
                }
                updateTargets = updateTargetsBuffer
            } else {
                updateTargets = []
            }
        } else {
            updateTargets = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Defines a maintenance track that determines which Amazon Redshift version to apply during a maintenance window. If the value for MaintenanceTrack is current, the cluster is updated to the most recently certified maintenance release. If the value is trailing, the cluster is updated to the previously certified maintenance release.
    public struct MaintenanceTrack: Swift.Equatable {
        /// The version number for the cluster release.
        public var databaseVersion: Swift.String?
        /// The name of the maintenance track. Possible values are current and trailing.
        public var maintenanceTrackName: Swift.String?
        /// An array of [UpdateTarget] objects to update with the maintenance track.
        public var updateTargets: [RedshiftClientTypes.UpdateTarget]?

        public init(
            databaseVersion: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            updateTargets: [RedshiftClientTypes.UpdateTarget]? = nil
        )
        {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.updateTargets = updateTargets
        }
    }

}

extension RedshiftClientTypes {
    public enum Mode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case highPerformance
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .highPerformance,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .highPerformance: return "high-performance"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mode(rawValue: rawValue) ?? Mode.sdkUnknown(rawValue)
        }
    }
}

extension ModifyAquaConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("ModifyAquaConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyAquaConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyAquaConfigurationInput: Swift.Equatable {
    /// This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The identifier of the cluster to be modified.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.clusterIdentifier = clusterIdentifier
    }
}

struct ModifyAquaConfigurationInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
}

extension ModifyAquaConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let aquaConfigurationStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfigurationStatus.self, forKey: .aquaConfigurationStatus)
        aquaConfigurationStatus = aquaConfigurationStatusDecoded
    }
}

extension ModifyAquaConfigurationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyAquaConfigurationOutputBody = try responseDecoder.decode(responseBody: data)
            self.aquaConfiguration = output.aquaConfiguration
        } else {
            self.aquaConfiguration = nil
        }
    }
}

public struct ModifyAquaConfigurationOutput: Swift.Equatable {
    /// This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfiguration: RedshiftClientTypes.AquaConfiguration?

    public init(
        aquaConfiguration: RedshiftClientTypes.AquaConfiguration? = nil
    )
    {
        self.aquaConfiguration = aquaConfiguration
    }
}

struct ModifyAquaConfigurationOutputBody: Swift.Equatable {
    let aquaConfiguration: RedshiftClientTypes.AquaConfiguration?
}

extension ModifyAquaConfigurationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aquaConfiguration = "AquaConfiguration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyAquaConfigurationResult"))
        let aquaConfigurationDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfiguration.self, forKey: .aquaConfiguration)
        aquaConfiguration = aquaConfigurationDecoded
    }
}

enum ModifyAquaConfigurationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyAuthenticationProfileInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationProfileContent = authenticationProfileContent {
            try container.encode(authenticationProfileContent, forKey: ClientRuntime.Key("AuthenticationProfileContent"))
        }
        if let authenticationProfileName = authenticationProfileName {
            try container.encode(authenticationProfileName, forKey: ClientRuntime.Key("AuthenticationProfileName"))
        }
        try container.encode("ModifyAuthenticationProfile", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyAuthenticationProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyAuthenticationProfileInput: Swift.Equatable {
    /// The new content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
    /// This member is required.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile to replace.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

struct ModifyAuthenticationProfileInputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
    let authenticationProfileContent: Swift.String?
}

extension ModifyAuthenticationProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
        let authenticationProfileContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileContent)
        authenticationProfileContent = authenticationProfileContentDecoded
    }
}

extension ModifyAuthenticationProfileOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyAuthenticationProfileOutputBody = try responseDecoder.decode(responseBody: data)
            self.authenticationProfileContent = output.authenticationProfileContent
            self.authenticationProfileName = output.authenticationProfileName
        } else {
            self.authenticationProfileContent = nil
            self.authenticationProfileName = nil
        }
    }
}

public struct ModifyAuthenticationProfileOutput: Swift.Equatable {
    /// The updated content of the authentication profile in JSON format.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile that was replaced.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

struct ModifyAuthenticationProfileOutputBody: Swift.Equatable {
    let authenticationProfileName: Swift.String?
    let authenticationProfileContent: Swift.String?
}

extension ModifyAuthenticationProfileOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProfileContent = "AuthenticationProfileContent"
        case authenticationProfileName = "AuthenticationProfileName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyAuthenticationProfileResult"))
        let authenticationProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileName)
        authenticationProfileName = authenticationProfileNameDecoded
        let authenticationProfileContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationProfileContent)
        authenticationProfileContent = authenticationProfileContentDecoded
    }
}

enum ModifyAuthenticationProfileOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthenticationProfileNotFoundFault": return try await AuthenticationProfileNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AuthenticationProfileQuotaExceededFault": return try await AuthenticationProfileQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidAuthenticationProfileRequestFault": return try await InvalidAuthenticationProfileRequestFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterDbRevisionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let revisionTarget = revisionTarget {
            try container.encode(revisionTarget, forKey: ClientRuntime.Key("RevisionTarget"))
        }
        try container.encode("ModifyClusterDbRevision", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterDbRevisionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyClusterDbRevisionInput: Swift.Equatable {
    /// The unique identifier of a cluster whose database revision you want to modify. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The identifier of the database revision. You can retrieve this value from the response to the [DescribeClusterDbRevisions] request.
    /// This member is required.
    public var revisionTarget: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        revisionTarget: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.revisionTarget = revisionTarget
    }
}

struct ModifyClusterDbRevisionInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let revisionTarget: Swift.String?
}

extension ModifyClusterDbRevisionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case revisionTarget = "RevisionTarget"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let revisionTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionTarget)
        revisionTarget = revisionTargetDecoded
    }
}

extension ModifyClusterDbRevisionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterDbRevisionOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ModifyClusterDbRevisionOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ModifyClusterDbRevisionOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ModifyClusterDbRevisionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterDbRevisionResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ModifyClusterDbRevisionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterOnLatestRevision": return try await ClusterOnLatestRevisionFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterIamRolesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addIamRoles = addIamRoles {
            if !addIamRoles.isEmpty {
                var addIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddIamRoles"))
                for (index0, string0) in addIamRoles.enumerated() {
                    try addIamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var addIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddIamRoles"))
                try addIamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let removeIamRoles = removeIamRoles {
            if !removeIamRoles.isEmpty {
                var removeIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveIamRoles"))
                for (index0, string0) in removeIamRoles.enumerated() {
                    try removeIamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var removeIamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveIamRoles"))
                try removeIamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyClusterIamRoles", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterIamRolesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ModifyClusterIamRolesInput: Swift.Equatable {
    /// Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format.
    public var addIamRoles: [Swift.String]?
    /// The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified.
    public var defaultIamRoleArn: Swift.String?
    /// Zero or more IAM roles in ARN format to disassociate from the cluster.
    public var removeIamRoles: [Swift.String]?

    public init(
        addIamRoles: [Swift.String]? = nil,
        clusterIdentifier: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        removeIamRoles: [Swift.String]? = nil
    )
    {
        self.addIamRoles = addIamRoles
        self.clusterIdentifier = clusterIdentifier
        self.defaultIamRoleArn = defaultIamRoleArn
        self.removeIamRoles = removeIamRoles
    }
}

struct ModifyClusterIamRolesInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let addIamRoles: [Swift.String]?
    let removeIamRoles: [Swift.String]?
    let defaultIamRoleArn: Swift.String?
}

extension ModifyClusterIamRolesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addIamRoles = "AddIamRoles"
        case clusterIdentifier = "ClusterIdentifier"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case removeIamRoles = "RemoveIamRoles"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        if containerValues.contains(.addIamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let addIamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .addIamRoles)
            if let addIamRolesWrappedContainer = addIamRolesWrappedContainer {
                let addIamRolesContainer = try addIamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addIamRolesBuffer:[Swift.String]? = nil
                if let addIamRolesContainer = addIamRolesContainer {
                    addIamRolesBuffer = [Swift.String]()
                    for stringContainer0 in addIamRolesContainer {
                        addIamRolesBuffer?.append(stringContainer0)
                    }
                }
                addIamRoles = addIamRolesBuffer
            } else {
                addIamRoles = []
            }
        } else {
            addIamRoles = nil
        }
        if containerValues.contains(.removeIamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let removeIamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .removeIamRoles)
            if let removeIamRolesWrappedContainer = removeIamRolesWrappedContainer {
                let removeIamRolesContainer = try removeIamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeIamRolesBuffer:[Swift.String]? = nil
                if let removeIamRolesContainer = removeIamRolesContainer {
                    removeIamRolesBuffer = [Swift.String]()
                    for stringContainer0 in removeIamRolesContainer {
                        removeIamRolesBuffer?.append(stringContainer0)
                    }
                }
                removeIamRoles = removeIamRolesBuffer
            } else {
                removeIamRoles = []
            }
        } else {
            removeIamRoles = nil
        }
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
    }
}

extension ModifyClusterIamRolesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterIamRolesOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ModifyClusterIamRolesOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ModifyClusterIamRolesOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ModifyClusterIamRolesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterIamRolesResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ModifyClusterIamRolesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModifyClusterInput(allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneRelocation: \(Swift.String(describing: availabilityZoneRelocation)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterParameterGroupName: \(Swift.String(describing: clusterParameterGroupName)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), elasticIp: \(Swift.String(describing: elasticIp)), encrypted: \(Swift.String(describing: encrypted)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), ipAddressType: \(Swift.String(describing: ipAddressType)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manageMasterPassword: \(Swift.String(describing: manageMasterPassword)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterPasswordSecretKmsKeyId: \(Swift.String(describing: masterPasswordSecretKmsKeyId)), multiAZ: \(Swift.String(describing: multiAZ)), newClusterIdentifier: \(Swift.String(describing: newClusterIdentifier)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), port: \(Swift.String(describing: port)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension ModifyClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: ClientRuntime.Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: ClientRuntime.Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, string0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manageMasterPassword = manageMasterPassword {
            try container.encode(manageMasterPassword, forKey: ClientRuntime.Key("ManageMasterPassword"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let newClusterIdentifier = newClusterIdentifier {
            try container.encode(newClusterIdentifier, forKey: ClientRuntime.Key("NewClusterIdentifier"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ModifyClusterInput: Swift.Equatable {
    /// If true, major version upgrades will be applied automatically to the cluster during the maintenance window. Default: false
    public var allowVersionUpgrade: Swift.Bool?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: Uses existing setting. Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The option to initiate relocation for an Amazon Redshift cluster to the target Availability Zone.
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
    public var availabilityZoneRelocation: Swift.Bool?
    /// The unique identifier of the cluster to be modified. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use [RebootCluster]. Default: Uses existing setting. Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.
    public var clusterParameterGroupName: Swift.String?
    /// A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible. Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var clusterSecurityGroups: [Swift.String]?
    /// The new cluster type. When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use [DescribeResize] to track the progress of the resize request. Valid Values:  multi-node | single-node
    public var clusterType: Swift.String?
    /// The new version number of the Amazon Redshift engine to upgrade to. For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide. Example: 1.0
    public var clusterVersion: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to [Supported Platforms to Launch Your Cluster](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms) in the Amazon Redshift Cluster Management Guide.
    public var elasticIp: Swift.String?
    /// Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the KmsKeyId parameter, we encrypt the cluster with the provided KmsKeyId. If you don't provide a KmsKeyId, we encrypt with the default key. If the value is not encrypted (false), then the cluster is decrypted.
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// The IP address types that the cluster supports. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
    public var kmsKeyId: Swift.String?
    /// The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage this cluster's admin credentials. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
    public var manageMasterPassword: Swift.Bool?
    /// The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// The new password for the cluster admin user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response. You can't use MasterUserPassword if ManageMasterPassword is true. Operations never return the password, so this operation provides a way to regain access to the admin user account for a cluster if the password is lost. Default: Uses existing setting. Constraints:
    ///
    /// * Must be between 8 and 64 characters in length.
    ///
    /// * Must contain at least one uppercase letter.
    ///
    /// * Must contain at least one lowercase letter.
    ///
    /// * Must contain one number.
    ///
    /// * Can be any printable ASCII character (ASCII code 33-126) except ' (single quote), " (double quote), \, /, or @.
    public var masterUserPassword: Swift.String?
    /// If true and the cluster is currently only deployed in a single Availability Zone, the cluster will be modified to be deployed in two Availability Zones.
    public var multiAZ: Swift.Bool?
    /// The new identifier for the cluster. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    ///
    ///
    /// Example: examplecluster
    public var newClusterIdentifier: Swift.String?
    /// The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter. For more information about resizing clusters, go to [Resizing Clusters in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html) in the Amazon Redshift Cluster Management Guide. Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
    public var nodeType: Swift.String?
    /// The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter. For more information about resizing clusters, go to [Resizing Clusters in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html) in the Amazon Redshift Cluster Management Guide. Valid Values: Integer greater than 0.
    public var numberOfNodes: Swift.Int?
    /// The option to change the port of an Amazon Redshift cluster.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage. This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
    public var publiclyAccessible: Swift.Bool?
    /// A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allowVersionUpgrade: Swift.Bool? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterType: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        newClusterIdentifier: Swift.String? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allowVersionUpgrade = allowVersionUpgrade
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterType = clusterType
        self.clusterVersion = clusterVersion
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.masterUserPassword = masterUserPassword
        self.multiAZ = multiAZ
        self.newClusterIdentifier = newClusterIdentifier
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

struct ModifyClusterInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let clusterType: Swift.String?
    let nodeType: Swift.String?
    let numberOfNodes: Swift.Int?
    let clusterSecurityGroups: [Swift.String]?
    let vpcSecurityGroupIds: [Swift.String]?
    let masterUserPassword: Swift.String?
    let clusterParameterGroupName: Swift.String?
    let automatedSnapshotRetentionPeriod: Swift.Int?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let preferredMaintenanceWindow: Swift.String?
    let clusterVersion: Swift.String?
    let allowVersionUpgrade: Swift.Bool?
    let hsmClientCertificateIdentifier: Swift.String?
    let hsmConfigurationIdentifier: Swift.String?
    let newClusterIdentifier: Swift.String?
    let publiclyAccessible: Swift.Bool?
    let elasticIp: Swift.String?
    let enhancedVpcRouting: Swift.Bool?
    let maintenanceTrackName: Swift.String?
    let encrypted: Swift.Bool?
    let kmsKeyId: Swift.String?
    let availabilityZoneRelocation: Swift.Bool?
    let availabilityZone: Swift.String?
    let port: Swift.Int?
    let manageMasterPassword: Swift.Bool?
    let masterPasswordSecretKmsKeyId: Swift.String?
    let ipAddressType: Swift.String?
    let multiAZ: Swift.Bool?
}

extension ModifyClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manageMasterPassword = "ManageMasterPassword"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUserPassword = "MasterUserPassword"
        case multiAZ = "MultiAZ"
        case newClusterIdentifier = "NewClusterIdentifier"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroupName{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroupName>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[Swift.String]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let clusterParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterParameterGroupName)
        clusterParameterGroupName = clusterParameterGroupNameDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let allowVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let newClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newClusterIdentifier)
        newClusterIdentifier = newClusterIdentifierDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let elasticIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let availabilityZoneRelocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .availabilityZoneRelocation)
        availabilityZoneRelocation = availabilityZoneRelocationDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let manageMasterPasswordDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .manageMasterPassword)
        manageMasterPassword = manageMasterPasswordDecoded
        let masterPasswordSecretKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretKmsKeyId)
        masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
    }
}

extension ModifyClusterMaintenanceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let deferMaintenance = deferMaintenance {
            try container.encode(deferMaintenance, forKey: ClientRuntime.Key("DeferMaintenance"))
        }
        if let deferMaintenanceDuration = deferMaintenanceDuration {
            try container.encode(deferMaintenanceDuration, forKey: ClientRuntime.Key("DeferMaintenanceDuration"))
        }
        if let deferMaintenanceEndTime = deferMaintenanceEndTime {
            try container.encodeTimestamp(deferMaintenanceEndTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceEndTime"))
        }
        if let deferMaintenanceIdentifier = deferMaintenanceIdentifier {
            try container.encode(deferMaintenanceIdentifier, forKey: ClientRuntime.Key("DeferMaintenanceIdentifier"))
        }
        if let deferMaintenanceStartTime = deferMaintenanceStartTime {
            try container.encodeTimestamp(deferMaintenanceStartTime, format: .dateTime, forKey: ClientRuntime.Key("DeferMaintenanceStartTime"))
        }
        try container.encode("ModifyClusterMaintenance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterMaintenanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyClusterMaintenanceInput: Swift.Equatable {
    /// A unique identifier for the cluster.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A boolean indicating whether to enable the deferred maintenance window.
    public var deferMaintenance: Swift.Bool?
    /// An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
    public var deferMaintenanceDuration: Swift.Int?
    /// A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
    public var deferMaintenanceEndTime: ClientRuntime.Date?
    /// A unique identifier for the deferred maintenance window.
    public var deferMaintenanceIdentifier: Swift.String?
    /// A timestamp indicating the start time for the deferred maintenance window.
    public var deferMaintenanceStartTime: ClientRuntime.Date?

    public init(
        clusterIdentifier: Swift.String? = nil,
        deferMaintenance: Swift.Bool? = nil,
        deferMaintenanceDuration: Swift.Int? = nil,
        deferMaintenanceEndTime: ClientRuntime.Date? = nil,
        deferMaintenanceIdentifier: Swift.String? = nil,
        deferMaintenanceStartTime: ClientRuntime.Date? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.deferMaintenance = deferMaintenance
        self.deferMaintenanceDuration = deferMaintenanceDuration
        self.deferMaintenanceEndTime = deferMaintenanceEndTime
        self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
        self.deferMaintenanceStartTime = deferMaintenanceStartTime
    }
}

struct ModifyClusterMaintenanceInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let deferMaintenance: Swift.Bool?
    let deferMaintenanceIdentifier: Swift.String?
    let deferMaintenanceStartTime: ClientRuntime.Date?
    let deferMaintenanceEndTime: ClientRuntime.Date?
    let deferMaintenanceDuration: Swift.Int?
}

extension ModifyClusterMaintenanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case deferMaintenance = "DeferMaintenance"
        case deferMaintenanceDuration = "DeferMaintenanceDuration"
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let deferMaintenanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deferMaintenance)
        deferMaintenance = deferMaintenanceDecoded
        let deferMaintenanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceIdentifier)
        deferMaintenanceIdentifier = deferMaintenanceIdentifierDecoded
        let deferMaintenanceStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deferMaintenanceStartTime)
        deferMaintenanceStartTime = deferMaintenanceStartTimeDecoded
        let deferMaintenanceEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deferMaintenanceEndTime)
        deferMaintenanceEndTime = deferMaintenanceEndTimeDecoded
        let deferMaintenanceDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deferMaintenanceDuration)
        deferMaintenanceDuration = deferMaintenanceDurationDecoded
    }
}

extension ModifyClusterMaintenanceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterMaintenanceOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ModifyClusterMaintenanceOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ModifyClusterMaintenanceOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ModifyClusterMaintenanceOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterMaintenanceResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ModifyClusterMaintenanceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ModifyClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ModifyClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ModifyClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ModifyClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterAlreadyExists": return try await ClusterAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterTrack": return try await InvalidClusterTrackFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidElasticIpFault": return try await InvalidElasticIpFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "Ipv6CidrBlockNotFoundFault": return try await Ipv6CidrBlockNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TableLimitExceeded": return try await TableLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOptionFault": return try await UnsupportedOptionFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterParameterGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Describes a modify cluster parameter group operation.
public struct ModifyClusterParameterGroupInput: Swift.Equatable {
    /// The name of the parameter group to be modified.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request. For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional. For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.
    /// This member is required.
    public var parameters: [RedshiftClientTypes.Parameter]?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameters = parameters
    }
}

struct ModifyClusterParameterGroupInputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let parameters: [RedshiftClientTypes.Parameter]?
}

extension ModifyClusterParameterGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameters = "Parameters"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([RedshiftClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[RedshiftClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [RedshiftClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
    }
}

extension ModifyClusterParameterGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterParameterGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.parameterGroupName = output.parameterGroupName
            self.parameterGroupStatus = output.parameterGroupStatus
        } else {
            self.parameterGroupName = nil
            self.parameterGroupStatus = nil
        }
    }
}

///
public struct ModifyClusterParameterGroupOutput: Swift.Equatable {
    /// The name of the cluster parameter group.
    public var parameterGroupName: Swift.String?
    /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
    public var parameterGroupStatus: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameterGroupStatus: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameterGroupStatus = parameterGroupStatus
    }
}

struct ModifyClusterParameterGroupOutputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let parameterGroupStatus: Swift.String?
}

extension ModifyClusterParameterGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameterGroupStatus = "ParameterGroupStatus"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterParameterGroupResult"))
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupStatus)
        parameterGroupStatus = parameterGroupStatusDecoded
    }
}

enum ModifyClusterParameterGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterParameterGroupState": return try await InvalidClusterParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterSnapshotInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("ModifyClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyClusterSnapshotInput: Swift.Equatable {
    /// A Boolean option to override an exception if the retention period has already passed.
    public var force: Swift.Bool?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The identifier of the snapshot whose setting you want to modify.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?

    public init(
        force: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.force = force
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifier = snapshotIdentifier
    }
}

struct ModifyClusterSnapshotInputBody: Swift.Equatable {
    let snapshotIdentifier: Swift.String?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let force: Swift.Bool?
}

extension ModifyClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force = "Force"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension ModifyClusterSnapshotOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterSnapshotOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct ModifyClusterSnapshotOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct ModifyClusterSnapshotOutputBody: Swift.Equatable {
    let snapshot: RedshiftClientTypes.Snapshot?
}

extension ModifyClusterSnapshotOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

enum ModifyClusterSnapshotOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterSnapshotScheduleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let disassociateSchedule = disassociateSchedule {
            try container.encode(disassociateSchedule, forKey: ClientRuntime.Key("DisassociateSchedule"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        try container.encode("ModifyClusterSnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterSnapshotScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyClusterSnapshotScheduleInput: Swift.Equatable {
    /// A unique identifier for the cluster whose snapshot schedule you want to modify.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
    public var disassociateSchedule: Swift.Bool?
    /// A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
    public var scheduleIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        disassociateSchedule: Swift.Bool? = nil,
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.disassociateSchedule = disassociateSchedule
        self.scheduleIdentifier = scheduleIdentifier
    }
}

struct ModifyClusterSnapshotScheduleInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let scheduleIdentifier: Swift.String?
    let disassociateSchedule: Swift.Bool?
}

extension ModifyClusterSnapshotScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case disassociateSchedule = "DisassociateSchedule"
        case scheduleIdentifier = "ScheduleIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        let disassociateScheduleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateSchedule)
        disassociateSchedule = disassociateScheduleDecoded
    }
}

extension ModifyClusterSnapshotScheduleOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct ModifyClusterSnapshotScheduleOutput: Swift.Equatable {

    public init() { }
}

enum ModifyClusterSnapshotScheduleOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotScheduleState": return try await InvalidClusterSnapshotScheduleStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyClusterSubnetGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let subnetIds = subnetIds {
            if !subnetIds.isEmpty {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                for (index0, string0) in subnetIds.enumerated() {
                    try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
                try subnetIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyClusterSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyClusterSubnetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ModifyClusterSubnetGroupInput: Swift.Equatable {
    /// The name of the subnet group to be modified.
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?
    /// A text description of the subnet group to be modified.
    public var description: Swift.String?
    /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
    /// This member is required.
    public var subnetIds: [Swift.String]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.description = description
        self.subnetIds = subnetIds
    }
}

struct ModifyClusterSubnetGroupInputBody: Swift.Equatable {
    let clusterSubnetGroupName: Swift.String?
    let description: Swift.String?
    let subnetIds: [Swift.String]?
}

extension ModifyClusterSubnetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case description = "Description"
        case subnetIds = "SubnetIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.subnetIds) {
            struct KeyVal0{struct SubnetIdentifier{}}
            let subnetIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SubnetIdentifier>.CodingKeys.self, forKey: .subnetIds)
            if let subnetIdsWrappedContainer = subnetIdsWrappedContainer {
                let subnetIdsContainer = try subnetIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var subnetIdsBuffer:[Swift.String]? = nil
                if let subnetIdsContainer = subnetIdsContainer {
                    subnetIdsBuffer = [Swift.String]()
                    for stringContainer0 in subnetIdsContainer {
                        subnetIdsBuffer?.append(stringContainer0)
                    }
                }
                subnetIds = subnetIdsBuffer
            } else {
                subnetIds = []
            }
        } else {
            subnetIds = nil
        }
    }
}

extension ModifyClusterSubnetGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyClusterSubnetGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSubnetGroup = output.clusterSubnetGroup
        } else {
            self.clusterSubnetGroup = nil
        }
    }
}

public struct ModifyClusterSubnetGroupOutput: Swift.Equatable {
    /// Describes a subnet group.
    public var clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?

    public init(
        clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup? = nil
    )
    {
        self.clusterSubnetGroup = clusterSubnetGroup
    }
}

struct ModifyClusterSubnetGroupOutputBody: Swift.Equatable {
    let clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?
}

extension ModifyClusterSubnetGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroup = "ClusterSubnetGroup"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyClusterSubnetGroupResult"))
        let clusterSubnetGroupDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterSubnetGroup.self, forKey: .clusterSubnetGroup)
        clusterSubnetGroup = clusterSubnetGroupDecoded
    }
}

enum ModifyClusterSubnetGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSubnetQuotaExceededFault": return try await ClusterSubnetQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidSubnet": return try await InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubnetAlreadyInUse": return try await SubnetAlreadyInUse(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyCustomDomainAssociationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let customDomainCertificateArn = customDomainCertificateArn {
            try container.encode(customDomainCertificateArn, forKey: ClientRuntime.Key("CustomDomainCertificateArn"))
        }
        if let customDomainName = customDomainName {
            try container.encode(customDomainName, forKey: ClientRuntime.Key("CustomDomainName"))
        }
        try container.encode("ModifyCustomDomainAssociation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCustomDomainAssociationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyCustomDomainAssociationInput: Swift.Equatable {
    /// The identifier of the cluster to change a custom domain association for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The certificate Amazon Resource Name (ARN) for the changed custom domain association.
    /// This member is required.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for a changed custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

struct ModifyCustomDomainAssociationInputBody: Swift.Equatable {
    let customDomainName: Swift.String?
    let customDomainCertificateArn: Swift.String?
    let clusterIdentifier: Swift.String?
}

extension ModifyCustomDomainAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension ModifyCustomDomainAssociationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyCustomDomainAssociationOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterIdentifier = output.clusterIdentifier
            self.customDomainCertExpiryTime = output.customDomainCertExpiryTime
            self.customDomainCertificateArn = output.customDomainCertificateArn
            self.customDomainName = output.customDomainName
        } else {
            self.clusterIdentifier = nil
            self.customDomainCertExpiryTime = nil
            self.customDomainCertificateArn = nil
            self.customDomainName = nil
        }
    }
}

public struct ModifyCustomDomainAssociationOutput: Swift.Equatable {
    /// The identifier of the cluster associated with the result for the changed custom domain association.
    public var clusterIdentifier: Swift.String?
    /// The certificate expiration time associated with the result for the changed custom domain association.
    public var customDomainCertExpiryTime: Swift.String?
    /// The certificate Amazon Resource Name (ARN) associated with the result for the changed custom domain association.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name associated with the result for the changed custom domain association.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertExpiryTime: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertExpiryTime = customDomainCertExpiryTime
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

struct ModifyCustomDomainAssociationOutputBody: Swift.Equatable {
    let customDomainName: Swift.String?
    let customDomainCertificateArn: Swift.String?
    let clusterIdentifier: Swift.String?
    let customDomainCertExpiryTime: Swift.String?
}

extension ModifyCustomDomainAssociationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case customDomainCertExpiryTime = "CustomDomainCertExpiryTime"
        case customDomainCertificateArn = "CustomDomainCertificateArn"
        case customDomainName = "CustomDomainName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyCustomDomainAssociationResult"))
        let customDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainName)
        customDomainName = customDomainNameDecoded
        let customDomainCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertificateArn)
        customDomainCertificateArn = customDomainCertificateArnDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let customDomainCertExpiryTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customDomainCertExpiryTime)
        customDomainCertExpiryTime = customDomainCertExpiryTimeDecoded
    }
}

enum ModifyCustomDomainAssociationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CustomCnameAssociationFault": return try await CustomCnameAssociationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "CustomDomainAssociationNotFoundFault": return try await CustomDomainAssociationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyEndpointAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endpointName = endpointName {
            try container.encode(endpointName, forKey: ClientRuntime.Key("EndpointName"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyEndpointAccessInput: Swift.Equatable {
    /// The endpoint to be modified.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The complete list of VPC security groups associated with the endpoint after the endpoint is modified.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        endpointName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.endpointName = endpointName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

struct ModifyEndpointAccessInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let vpcSecurityGroupIds: [Swift.String]?
}

extension ModifyEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointName = "EndpointName"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
    }
}

extension ModifyEndpointAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyEndpointAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.address = output.address
            self.clusterIdentifier = output.clusterIdentifier
            self.endpointCreateTime = output.endpointCreateTime
            self.endpointName = output.endpointName
            self.endpointStatus = output.endpointStatus
            self.port = output.port
            self.resourceOwner = output.resourceOwner
            self.subnetGroupName = output.subnetGroupName
            self.vpcEndpoint = output.vpcEndpoint
            self.vpcSecurityGroups = output.vpcSecurityGroups
        } else {
            self.address = nil
            self.clusterIdentifier = nil
            self.endpointCreateTime = nil
            self.endpointName = nil
            self.endpointStatus = nil
            self.port = nil
            self.resourceOwner = nil
            self.subnetGroupName = nil
            self.vpcEndpoint = nil
            self.vpcSecurityGroups = nil
        }
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct ModifyEndpointAccessOutput: Swift.Equatable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: ClientRuntime.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: ClientRuntime.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

struct ModifyEndpointAccessOutputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let resourceOwner: Swift.String?
    let subnetGroupName: Swift.String?
    let endpointStatus: Swift.String?
    let endpointName: Swift.String?
    let endpointCreateTime: ClientRuntime.Date?
    let port: Swift.Int?
    let address: Swift.String?
    let vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?
    let vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
}

extension ModifyEndpointAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case clusterIdentifier = "ClusterIdentifier"
        case endpointCreateTime = "EndpointCreateTime"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case port = "Port"
        case resourceOwner = "ResourceOwner"
        case subnetGroupName = "SubnetGroupName"
        case vpcEndpoint = "VpcEndpoint"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyEndpointAccessResult"))
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endpointCreateTime)
        endpointCreateTime = endpointCreateTimeDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        if containerValues.contains(.vpcSecurityGroups) {
            struct KeyVal0{struct VpcSecurityGroup{}}
            let vpcSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroup>.CodingKeys.self, forKey: .vpcSecurityGroups)
            if let vpcSecurityGroupsWrappedContainer = vpcSecurityGroupsWrappedContainer {
                let vpcSecurityGroupsContainer = try vpcSecurityGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupsBuffer:[RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
                    vpcSecurityGroupsBuffer = [RedshiftClientTypes.VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupsContainer {
                        vpcSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroups = vpcSecurityGroupsBuffer
            } else {
                vpcSecurityGroups = []
            }
        } else {
            vpcSecurityGroups = nil
        }
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.VpcEndpoint.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}

enum ModifyEndpointAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointNotFound": return try await EndpointNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidEndpointState": return try await InvalidEndpointStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyEventSubscriptionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let eventCategories = eventCategories {
            if !eventCategories.isEmpty {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                for (index0, string0) in eventCategories.enumerated() {
                    try eventCategoriesContainer.encode(string0, forKey: ClientRuntime.Key("EventCategory.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var eventCategoriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EventCategories"))
                try eventCategoriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let snsTopicArn = snsTopicArn {
            try container.encode(snsTopicArn, forKey: ClientRuntime.Key("SnsTopicArn"))
        }
        if let sourceIds = sourceIds {
            if !sourceIds.isEmpty {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                for (index0, string0) in sourceIds.enumerated() {
                    try sourceIdsContainer.encode(string0, forKey: ClientRuntime.Key("SourceId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SourceIds"))
                try sourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let subscriptionName = subscriptionName {
            try container.encode(subscriptionName, forKey: ClientRuntime.Key("SubscriptionName"))
        }
        try container.encode("ModifyEventSubscription", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyEventSubscriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ModifyEventSubscriptionInput: Swift.Equatable {
    /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the modified Amazon Redshift event notification subscription.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
    }
}

struct ModifyEventSubscriptionInputBody: Swift.Equatable {
    let subscriptionName: Swift.String?
    let snsTopicArn: Swift.String?
    let sourceType: Swift.String?
    let sourceIds: [Swift.String]?
    let eventCategories: [Swift.String]?
    let severity: Swift.String?
    let enabled: Swift.Bool?
}

extension ModifyEventSubscriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case eventCategories = "EventCategories"
        case severity = "Severity"
        case snsTopicArn = "SnsTopicArn"
        case sourceIds = "SourceIds"
        case sourceType = "SourceType"
        case subscriptionName = "SubscriptionName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionName)
        subscriptionName = subscriptionNameDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        if containerValues.contains(.sourceIds) {
            struct KeyVal0{struct SourceId{}}
            let sourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SourceId>.CodingKeys.self, forKey: .sourceIds)
            if let sourceIdsWrappedContainer = sourceIdsWrappedContainer {
                let sourceIdsContainer = try sourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var sourceIdsBuffer:[Swift.String]? = nil
                if let sourceIdsContainer = sourceIdsContainer {
                    sourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in sourceIdsContainer {
                        sourceIdsBuffer?.append(stringContainer0)
                    }
                }
                sourceIds = sourceIdsBuffer
            } else {
                sourceIds = []
            }
        } else {
            sourceIds = nil
        }
        if containerValues.contains(.eventCategories) {
            struct KeyVal0{struct EventCategory{}}
            let eventCategoriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EventCategory>.CodingKeys.self, forKey: .eventCategories)
            if let eventCategoriesWrappedContainer = eventCategoriesWrappedContainer {
                let eventCategoriesContainer = try eventCategoriesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var eventCategoriesBuffer:[Swift.String]? = nil
                if let eventCategoriesContainer = eventCategoriesContainer {
                    eventCategoriesBuffer = [Swift.String]()
                    for stringContainer0 in eventCategoriesContainer {
                        eventCategoriesBuffer?.append(stringContainer0)
                    }
                }
                eventCategories = eventCategoriesBuffer
            } else {
                eventCategories = []
            }
        } else {
            eventCategories = nil
        }
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ModifyEventSubscriptionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyEventSubscriptionOutputBody = try responseDecoder.decode(responseBody: data)
            self.eventSubscription = output.eventSubscription
        } else {
            self.eventSubscription = nil
        }
    }
}

public struct ModifyEventSubscriptionOutput: Swift.Equatable {
    /// Describes event subscriptions.
    public var eventSubscription: RedshiftClientTypes.EventSubscription?

    public init(
        eventSubscription: RedshiftClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

struct ModifyEventSubscriptionOutputBody: Swift.Equatable {
    let eventSubscription: RedshiftClientTypes.EventSubscription?
}

extension ModifyEventSubscriptionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSubscription = "EventSubscription"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyEventSubscriptionResult"))
        let eventSubscriptionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.EventSubscription.self, forKey: .eventSubscription)
        eventSubscription = eventSubscriptionDecoded
    }
}

enum ModifyEventSubscriptionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidSubscriptionStateFault": return try await InvalidSubscriptionStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SNSInvalidTopic": return try await SNSInvalidTopicFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SNSNoAuthorization": return try await SNSNoAuthorizationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SNSTopicArnNotFound": return try await SNSTopicArnNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SourceNotFound": return try await SourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionCategoryNotFound": return try await SubscriptionCategoryNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionEventIdNotFound": return try await SubscriptionEventIdNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionNotFound": return try await SubscriptionNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SubscriptionSeverityNotFound": return try await SubscriptionSeverityNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyRedshiftIdcApplicationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedTokenIssuerList = authorizedTokenIssuerList {
            if !authorizedTokenIssuerList.isEmpty {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                for (index0, authorizedtokenissuer0) in authorizedTokenIssuerList.enumerated() {
                    try authorizedTokenIssuerListContainer.encode(authorizedtokenissuer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                try authorizedTokenIssuerListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let idcDisplayName = idcDisplayName {
            try container.encode(idcDisplayName, forKey: ClientRuntime.Key("IdcDisplayName"))
        }
        if let identityNamespace = identityNamespace {
            try container.encode(identityNamespace, forKey: ClientRuntime.Key("IdentityNamespace"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        if let serviceIntegrations = serviceIntegrations {
            if !serviceIntegrations.isEmpty {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                for (index0, serviceintegrationsunion0) in serviceIntegrations.enumerated() {
                    try serviceIntegrationsContainer.encode(serviceintegrationsunion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                try serviceIntegrationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ModifyRedshiftIdcApplication", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyRedshiftIdcApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyRedshiftIdcApplicationInput: Swift.Equatable {
    /// The authorized token issuer list for the Amazon Redshift IAM Identity Center application to change.
    public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    /// The IAM role ARN associated with the Amazon Redshift IAM Identity Center application to change. It has the required permissions to be assumed and invoke the IDC Identity Center API.
    public var iamRoleArn: Swift.String?
    /// The display name for the Amazon Redshift IAM Identity Center application to change. It appears on the console.
    public var idcDisplayName: Swift.String?
    /// The namespace for the Amazon Redshift IAM Identity Center application to change. It determines which managed application verifies the connection token.
    public var identityNamespace: Swift.String?
    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    /// This member is required.
    public var redshiftIdcApplicationArn: Swift.String?
    /// A collection of service integrations associated with the application.
    public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

    public init(
        authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
        iamRoleArn: Swift.String? = nil,
        idcDisplayName: Swift.String? = nil,
        identityNamespace: Swift.String? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil,
        serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
    )
    {
        self.authorizedTokenIssuerList = authorizedTokenIssuerList
        self.iamRoleArn = iamRoleArn
        self.idcDisplayName = idcDisplayName
        self.identityNamespace = identityNamespace
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
        self.serviceIntegrations = serviceIntegrations
    }
}

struct ModifyRedshiftIdcApplicationInputBody: Swift.Equatable {
    let redshiftIdcApplicationArn: Swift.String?
    let identityNamespace: Swift.String?
    let iamRoleArn: Swift.String?
    let idcDisplayName: Swift.String?
    let authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    let serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?
}

extension ModifyRedshiftIdcApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedTokenIssuerList = "AuthorizedTokenIssuerList"
        case iamRoleArn = "IamRoleArn"
        case idcDisplayName = "IdcDisplayName"
        case identityNamespace = "IdentityNamespace"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
        case serviceIntegrations = "ServiceIntegrations"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftIdcApplicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationArn)
        redshiftIdcApplicationArn = redshiftIdcApplicationArnDecoded
        let identityNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityNamespace)
        identityNamespace = identityNamespaceDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let idcDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcDisplayName)
        idcDisplayName = idcDisplayNameDecoded
        if containerValues.contains(.authorizedTokenIssuerList) {
            struct KeyVal0{struct member{}}
            let authorizedTokenIssuerListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .authorizedTokenIssuerList)
            if let authorizedTokenIssuerListWrappedContainer = authorizedTokenIssuerListWrappedContainer {
                let authorizedTokenIssuerListContainer = try authorizedTokenIssuerListWrappedContainer.decodeIfPresent([RedshiftClientTypes.AuthorizedTokenIssuer].self, forKey: .member)
                var authorizedTokenIssuerListBuffer:[RedshiftClientTypes.AuthorizedTokenIssuer]? = nil
                if let authorizedTokenIssuerListContainer = authorizedTokenIssuerListContainer {
                    authorizedTokenIssuerListBuffer = [RedshiftClientTypes.AuthorizedTokenIssuer]()
                    for structureContainer0 in authorizedTokenIssuerListContainer {
                        authorizedTokenIssuerListBuffer?.append(structureContainer0)
                    }
                }
                authorizedTokenIssuerList = authorizedTokenIssuerListBuffer
            } else {
                authorizedTokenIssuerList = []
            }
        } else {
            authorizedTokenIssuerList = nil
        }
        if containerValues.contains(.serviceIntegrations) {
            struct KeyVal0{struct member{}}
            let serviceIntegrationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceIntegrations)
            if let serviceIntegrationsWrappedContainer = serviceIntegrationsWrappedContainer {
                let serviceIntegrationsContainer = try serviceIntegrationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ServiceIntegrationsUnion].self, forKey: .member)
                var serviceIntegrationsBuffer:[RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
                if let serviceIntegrationsContainer = serviceIntegrationsContainer {
                    serviceIntegrationsBuffer = [RedshiftClientTypes.ServiceIntegrationsUnion]()
                    for unionContainer0 in serviceIntegrationsContainer {
                        serviceIntegrationsBuffer?.append(unionContainer0)
                    }
                }
                serviceIntegrations = serviceIntegrationsBuffer
            } else {
                serviceIntegrations = []
            }
        } else {
            serviceIntegrations = nil
        }
    }
}

extension ModifyRedshiftIdcApplicationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyRedshiftIdcApplicationOutputBody = try responseDecoder.decode(responseBody: data)
            self.redshiftIdcApplication = output.redshiftIdcApplication
        } else {
            self.redshiftIdcApplication = nil
        }
    }
}

public struct ModifyRedshiftIdcApplicationOutput: Swift.Equatable {
    /// Contains properties for the Redshift IDC application.
    public var redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?

    public init(
        redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication? = nil
    )
    {
        self.redshiftIdcApplication = redshiftIdcApplication
    }
}

struct ModifyRedshiftIdcApplicationOutputBody: Swift.Equatable {
    let redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?
}

extension ModifyRedshiftIdcApplicationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case redshiftIdcApplication = "RedshiftIdcApplication"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyRedshiftIdcApplicationResult"))
        let redshiftIdcApplicationDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.RedshiftIdcApplication.self, forKey: .redshiftIdcApplication)
        redshiftIdcApplication = redshiftIdcApplicationDecoded
    }
}

enum ModifyRedshiftIdcApplicationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "DependentServiceAccessDenied": return try await DependentServiceAccessDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "RedshiftIdcApplicationNotExists": return try await RedshiftIdcApplicationNotExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyScheduledActionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enable = enable {
            try container.encode(enable, forKey: ClientRuntime.Key("Enable"))
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let iamRole = iamRole {
            try container.encode(iamRole, forKey: ClientRuntime.Key("IamRole"))
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
        if let scheduledActionDescription = scheduledActionDescription {
            try container.encode(scheduledActionDescription, forKey: ClientRuntime.Key("ScheduledActionDescription"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let targetAction = targetAction {
            try container.encode(targetAction, forKey: ClientRuntime.Key("TargetAction"))
        }
        try container.encode("ModifyScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyScheduledActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyScheduledActionInput: Swift.Equatable {
    /// A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled.
    public var enable: Swift.Bool?
    /// A modified end time of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var endTime: ClientRuntime.Date?
    /// A different IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    public var iamRole: Swift.String?
    /// A modified schedule in either at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    public var schedule: Swift.String?
    /// A modified description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action to modify.
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// A modified start time of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var startTime: ClientRuntime.Date?
    /// A modified JSON format of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        enable: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}

struct ModifyScheduledActionInputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
    let targetAction: RedshiftClientTypes.ScheduledActionType?
    let schedule: Swift.String?
    let iamRole: Swift.String?
    let scheduledActionDescription: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let enable: Swift.Bool?
}

extension ModifyScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enable = "Enable"
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetAction = "TargetAction"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionType.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let scheduledActionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionDescription)
        scheduledActionDescription = scheduledActionDescriptionDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let enableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enable)
        enable = enableDecoded
    }
}

extension ModifyScheduledActionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyScheduledActionOutputBody = try responseDecoder.decode(responseBody: data)
            self.endTime = output.endTime
            self.iamRole = output.iamRole
            self.nextInvocations = output.nextInvocations
            self.schedule = output.schedule
            self.scheduledActionDescription = output.scheduledActionDescription
            self.scheduledActionName = output.scheduledActionName
            self.startTime = output.startTime
            self.state = output.state
            self.targetAction = output.targetAction
        } else {
            self.endTime = nil
            self.iamRole = nil
            self.nextInvocations = nil
            self.schedule = nil
            self.scheduledActionDescription = nil
            self.scheduledActionName = nil
            self.startTime = nil
            self.state = nil
            self.targetAction = nil
        }
    }
}

/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
public struct ModifyScheduledActionOutput: Swift.Equatable {
    /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRole: Swift.String?
    /// List of times when the scheduled action will run.
    public var nextInvocations: [ClientRuntime.Date]?
    /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
    public var startTime: ClientRuntime.Date?
    /// The state of the scheduled action. For example, DISABLED.
    public var state: RedshiftClientTypes.ScheduledActionState?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ds2.8xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        state: RedshiftClientTypes.ScheduledActionState? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.endTime = endTime
        self.iamRole = iamRole
        self.nextInvocations = nextInvocations
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.state = state
        self.targetAction = targetAction
    }
}

struct ModifyScheduledActionOutputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
    let targetAction: RedshiftClientTypes.ScheduledActionType?
    let schedule: Swift.String?
    let iamRole: Swift.String?
    let scheduledActionDescription: Swift.String?
    let state: RedshiftClientTypes.ScheduledActionState?
    let nextInvocations: [ClientRuntime.Date]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
}

extension ModifyScheduledActionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case nextInvocations = "NextInvocations"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case state = "State"
        case targetAction = "TargetAction"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyScheduledActionResult"))
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionType.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let scheduledActionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionDescription)
        scheduledActionDescription = scheduledActionDescriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionState.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.nextInvocations) {
            struct KeyVal0{struct ScheduledActionTime{}}
            let nextInvocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduledActionTime>.CodingKeys.self, forKey: .nextInvocations)
            if let nextInvocationsWrappedContainer = nextInvocationsWrappedContainer {
                let nextInvocationsContainer = try nextInvocationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nextInvocationsBuffer:[ClientRuntime.Date]? = nil
                if let nextInvocationsContainer = nextInvocationsContainer {
                    nextInvocationsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in nextInvocationsContainer {
                        try nextInvocationsBuffer?.append(nextInvocationsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                nextInvocations = nextInvocationsBuffer
            } else {
                nextInvocations = []
            }
        } else {
            nextInvocations = nil
        }
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

enum ModifyScheduledActionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidScheduledAction": return try await InvalidScheduledActionFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidSchedule": return try await InvalidScheduleFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ScheduledActionNotFound": return try await ScheduledActionNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ScheduledActionTypeUnsupported": return try await ScheduledActionTypeUnsupportedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifySnapshotCopyRetentionPeriodInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let manual = manual {
            try container.encode(manual, forKey: ClientRuntime.Key("Manual"))
        }
        if let retentionPeriod = retentionPeriod {
            try container.encode(retentionPeriod, forKey: ClientRuntime.Key("RetentionPeriod"))
        }
        try container.encode("ModifySnapshotCopyRetentionPeriod", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifySnapshotCopyRetentionPeriodInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ModifySnapshotCopyRetentionPeriodInput: Swift.Equatable {
    /// The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination Amazon Web Services Region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
    public var manual: Swift.Bool?
    /// The number of days to retain automated snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this only changes the retention period of copied automated snapshots. If you decrease the retention period for automated snapshots that are copied to a destination Amazon Web Services Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination Amazon Web Services Region and that fall outside of the new retention period. Constraints: Must be at least 1 and no more than 35 for automated snapshots. If you specify the manual option, only newly copied manual snapshots will have the new retention period. If you specify the value of -1 newly copied manual snapshots are retained indefinitely. Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.
    /// This member is required.
    public var retentionPeriod: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        manual: Swift.Bool? = nil,
        retentionPeriod: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.manual = manual
        self.retentionPeriod = retentionPeriod
    }
}

struct ModifySnapshotCopyRetentionPeriodInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let retentionPeriod: Swift.Int?
    let manual: Swift.Bool?
}

extension ModifySnapshotCopyRetentionPeriodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case manual = "Manual"
        case retentionPeriod = "RetentionPeriod"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let manualDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .manual)
        manual = manualDecoded
    }
}

extension ModifySnapshotCopyRetentionPeriodOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifySnapshotCopyRetentionPeriodOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ModifySnapshotCopyRetentionPeriodOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ModifySnapshotCopyRetentionPeriodOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ModifySnapshotCopyRetentionPeriodOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifySnapshotCopyRetentionPeriodResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ModifySnapshotCopyRetentionPeriodOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRetentionPeriodFault": return try await InvalidRetentionPeriodFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotCopyDisabledFault": return try await SnapshotCopyDisabledFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifySnapshotScheduleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let scheduleDefinitions = scheduleDefinitions {
            if !scheduleDefinitions.isEmpty {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                for (index0, string0) in scheduleDefinitions.enumerated() {
                    try scheduleDefinitionsContainer.encode(string0, forKey: ClientRuntime.Key("ScheduleDefinition.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                try scheduleDefinitionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        try container.encode("ModifySnapshotSchedule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifySnapshotScheduleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifySnapshotScheduleInput: Swift.Equatable {
    /// An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
    /// This member is required.
    public var scheduleDefinitions: [Swift.String]?
    /// A unique alphanumeric identifier of the schedule to modify.
    /// This member is required.
    public var scheduleIdentifier: Swift.String?

    public init(
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleIdentifier = scheduleIdentifier
    }
}

struct ModifySnapshotScheduleInputBody: Swift.Equatable {
    let scheduleIdentifier: Swift.String?
    let scheduleDefinitions: [Swift.String]?
}

extension ModifySnapshotScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleIdentifier = "ScheduleIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        if containerValues.contains(.scheduleDefinitions) {
            struct KeyVal0{struct ScheduleDefinition{}}
            let scheduleDefinitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduleDefinition>.CodingKeys.self, forKey: .scheduleDefinitions)
            if let scheduleDefinitionsWrappedContainer = scheduleDefinitionsWrappedContainer {
                let scheduleDefinitionsContainer = try scheduleDefinitionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduleDefinitionsBuffer:[Swift.String]? = nil
                if let scheduleDefinitionsContainer = scheduleDefinitionsContainer {
                    scheduleDefinitionsBuffer = [Swift.String]()
                    for stringContainer0 in scheduleDefinitionsContainer {
                        scheduleDefinitionsBuffer?.append(stringContainer0)
                    }
                }
                scheduleDefinitions = scheduleDefinitionsBuffer
            } else {
                scheduleDefinitions = []
            }
        } else {
            scheduleDefinitions = nil
        }
    }
}

extension ModifySnapshotScheduleOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifySnapshotScheduleOutputBody = try responseDecoder.decode(responseBody: data)
            self.associatedClusterCount = output.associatedClusterCount
            self.associatedClusters = output.associatedClusters
            self.nextInvocations = output.nextInvocations
            self.scheduleDefinitions = output.scheduleDefinitions
            self.scheduleDescription = output.scheduleDescription
            self.scheduleIdentifier = output.scheduleIdentifier
            self.tags = output.tags
        } else {
            self.associatedClusterCount = nil
            self.associatedClusters = nil
            self.nextInvocations = nil
            self.scheduleDefinitions = nil
            self.scheduleDescription = nil
            self.scheduleIdentifier = nil
            self.tags = nil
        }
    }
}

/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
public struct ModifySnapshotScheduleOutput: Swift.Equatable {
    /// The number of clusters associated with the schedule.
    public var associatedClusterCount: Swift.Int?
    /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
    public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
    ///
    public var nextInvocations: [ClientRuntime.Date]?
    /// A list of ScheduleDefinitions.
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for the schedule.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags describing the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        associatedClusterCount: Swift.Int? = nil,
        associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
        nextInvocations: [ClientRuntime.Date]? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.associatedClusterCount = associatedClusterCount
        self.associatedClusters = associatedClusters
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

struct ModifySnapshotScheduleOutputBody: Swift.Equatable {
    let scheduleDefinitions: [Swift.String]?
    let scheduleIdentifier: Swift.String?
    let scheduleDescription: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
    let nextInvocations: [ClientRuntime.Date]?
    let associatedClusterCount: Swift.Int?
    let associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
}

extension ModifySnapshotScheduleOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedClusterCount = "AssociatedClusterCount"
        case associatedClusters = "AssociatedClusters"
        case nextInvocations = "NextInvocations"
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleDescription = "ScheduleDescription"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifySnapshotScheduleResult"))
        if containerValues.contains(.scheduleDefinitions) {
            struct KeyVal0{struct ScheduleDefinition{}}
            let scheduleDefinitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduleDefinition>.CodingKeys.self, forKey: .scheduleDefinitions)
            if let scheduleDefinitionsWrappedContainer = scheduleDefinitionsWrappedContainer {
                let scheduleDefinitionsContainer = try scheduleDefinitionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduleDefinitionsBuffer:[Swift.String]? = nil
                if let scheduleDefinitionsContainer = scheduleDefinitionsContainer {
                    scheduleDefinitionsBuffer = [Swift.String]()
                    for stringContainer0 in scheduleDefinitionsContainer {
                        scheduleDefinitionsBuffer?.append(stringContainer0)
                    }
                }
                scheduleDefinitions = scheduleDefinitionsBuffer
            } else {
                scheduleDefinitions = []
            }
        } else {
            scheduleDefinitions = nil
        }
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        let scheduleDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleDescription)
        scheduleDescription = scheduleDescriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.nextInvocations) {
            struct KeyVal0{struct SnapshotTime{}}
            let nextInvocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotTime>.CodingKeys.self, forKey: .nextInvocations)
            if let nextInvocationsWrappedContainer = nextInvocationsWrappedContainer {
                let nextInvocationsContainer = try nextInvocationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nextInvocationsBuffer:[ClientRuntime.Date]? = nil
                if let nextInvocationsContainer = nextInvocationsContainer {
                    nextInvocationsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in nextInvocationsContainer {
                        try nextInvocationsBuffer?.append(nextInvocationsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                nextInvocations = nextInvocationsBuffer
            } else {
                nextInvocations = []
            }
        } else {
            nextInvocations = nil
        }
        let associatedClusterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .associatedClusterCount)
        associatedClusterCount = associatedClusterCountDecoded
        if containerValues.contains(.associatedClusters) {
            struct KeyVal0{struct ClusterAssociatedToSchedule{}}
            let associatedClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterAssociatedToSchedule>.CodingKeys.self, forKey: .associatedClusters)
            if let associatedClustersWrappedContainer = associatedClustersWrappedContainer {
                let associatedClustersContainer = try associatedClustersWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterAssociatedToSchedule].self, forKey: .member)
                var associatedClustersBuffer:[RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil
                if let associatedClustersContainer = associatedClustersContainer {
                    associatedClustersBuffer = [RedshiftClientTypes.ClusterAssociatedToSchedule]()
                    for structureContainer0 in associatedClustersContainer {
                        associatedClustersBuffer?.append(structureContainer0)
                    }
                }
                associatedClusters = associatedClustersBuffer
            } else {
                associatedClusters = []
            }
        } else {
            associatedClusters = nil
        }
    }
}

enum ModifySnapshotScheduleOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidSchedule": return try await InvalidScheduleFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleUpdateInProgress": return try await SnapshotScheduleUpdateInProgressFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ModifyUsageLimitInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amount = amount {
            try container.encode(amount, forKey: ClientRuntime.Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: ClientRuntime.Key("BreachAction"))
        }
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
        try container.encode("ModifyUsageLimit", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyUsageLimitInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyUsageLimitInput: Swift.Equatable {
    /// The new limit amount. For more information about this parameter, see [UsageLimit].
    public var amount: Swift.Int?
    /// The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see [UsageLimit].
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the usage limit to modify.
    /// This member is required.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.usageLimitId = usageLimitId
    }
}

struct ModifyUsageLimitInputBody: Swift.Equatable {
    let usageLimitId: Swift.String?
    let amount: Swift.Int?
    let breachAction: RedshiftClientTypes.UsageLimitBreachAction?
}

extension ModifyUsageLimitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case usageLimitId = "UsageLimitId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
    }
}

extension ModifyUsageLimitOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ModifyUsageLimitOutputBody = try responseDecoder.decode(responseBody: data)
            self.amount = output.amount
            self.breachAction = output.breachAction
            self.clusterIdentifier = output.clusterIdentifier
            self.featureType = output.featureType
            self.limitType = output.limitType
            self.period = output.period
            self.tags = output.tags
            self.usageLimitId = output.usageLimitId
        } else {
            self.amount = nil
            self.breachAction = nil
            self.clusterIdentifier = nil
            self.featureType = nil
            self.limitType = nil
            self.period = nil
            self.tags = nil
            self.usageLimitId = nil
        }
    }
}

/// Describes a usage limit object for a cluster.
public struct ModifyUsageLimitOutput: Swift.Equatable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
    ///
    /// * log - To log an event in a system table. The default is log.
    ///
    /// * emit-metric - To emit CloudWatch metrics.
    ///
    /// * disable - To disable the feature until the next usage period begins.
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster with a usage limit.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature to which the limit applies.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The identifier of the usage limit.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
        self.usageLimitId = usageLimitId
    }
}

struct ModifyUsageLimitOutputBody: Swift.Equatable {
    let usageLimitId: Swift.String?
    let clusterIdentifier: Swift.String?
    let featureType: RedshiftClientTypes.UsageLimitFeatureType?
    let limitType: RedshiftClientTypes.UsageLimitLimitType?
    let amount: Swift.Int?
    let period: RedshiftClientTypes.UsageLimitPeriod?
    let breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    let tags: [RedshiftClientTypes.Tag]?
}

extension ModifyUsageLimitOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
        case usageLimitId = "UsageLimitId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyUsageLimitResult"))
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitFeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
        let limitTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitLimitType.self, forKey: .limitType)
        limitType = limitTypeDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

enum ModifyUsageLimitOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidUsageLimit": return try await InvalidUsageLimitFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UsageLimitNotFound": return try await UsageLimitNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.NetworkInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case ipv6Address = "Ipv6Address"
        case networkInterfaceId = "NetworkInterfaceId"
        case privateIpAddress = "PrivateIpAddress"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let ipv6Address = ipv6Address {
            try container.encode(ipv6Address, forKey: ClientRuntime.Key("Ipv6Address"))
        }
        if let networkInterfaceId = networkInterfaceId {
            try container.encode(networkInterfaceId, forKey: ClientRuntime.Key("NetworkInterfaceId"))
        }
        if let privateIpAddress = privateIpAddress {
            try container.encode(privateIpAddress, forKey: ClientRuntime.Key("PrivateIpAddress"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let ipv6AddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipv6Address)
        ipv6Address = ipv6AddressDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a network interface.
    public struct NetworkInterface: Swift.Equatable {
        /// The Availability Zone.
        public var availabilityZone: Swift.String?
        /// The IPv6 address of the network interface within the subnet.
        public var ipv6Address: Swift.String?
        /// The network interface identifier.
        public var networkInterfaceId: Swift.String?
        /// The IPv4 address of the network interface within the subnet.
        public var privateIpAddress: Swift.String?
        /// The subnet identifier.
        public var subnetId: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.ipv6Address = ipv6Address
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
        }
    }

}

extension RedshiftClientTypes.NodeConfigurationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimatedDiskUtilizationPercent = "EstimatedDiskUtilizationPercent"
        case mode = "Mode"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercent {
            try container.encode(estimatedDiskUtilizationPercent, forKey: ClientRuntime.Key("EstimatedDiskUtilizationPercent"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let estimatedDiskUtilizationPercentDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .estimatedDiskUtilizationPercent)
        estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercentDecoded
        let modeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Mode.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension RedshiftClientTypes {
    /// A list of node configurations.
    public struct NodeConfigurationOption: Swift.Equatable {
        /// The estimated disk utilizaton percentage.
        public var estimatedDiskUtilizationPercent: Swift.Double?
        /// The category of the node configuration recommendation.
        public var mode: RedshiftClientTypes.Mode?
        /// The node type, such as, "ds2.8xlarge".
        public var nodeType: Swift.String?
        /// The number of nodes.
        public var numberOfNodes: Swift.Int?

        public init(
            estimatedDiskUtilizationPercent: Swift.Double? = nil,
            mode: RedshiftClientTypes.Mode? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil
        )
        {
            self.estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercent
            self.mode = mode
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
        }
    }

}

extension RedshiftClientTypes.NodeConfigurationOptionsFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case values = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let `operator` = `operator` {
            try container.encode(`operator`, forKey: ClientRuntime.Key("Operator"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                for (index0, string0) in values.enumerated() {
                    try valuesContainer.encode(string0, forKey: ClientRuntime.Key("item.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.NodeConfigurationOptionsFilterName.self, forKey: .name)
        name = nameDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.OperatorType.self, forKey: .operator)
        `operator` = operatorDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct item{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension RedshiftClientTypes {
    /// A set of elements to filter the returned node configurations.
    public struct NodeConfigurationOptionsFilter: Swift.Equatable {
        /// The name of the element to filter.
        public var name: RedshiftClientTypes.NodeConfigurationOptionsFilterName?
        /// The filter operator. If filter Name is NodeType only the 'in' operator is supported. Provide one value to evaluate for 'eq', 'lt', 'le', 'gt', and 'ge'. Provide two values to evaluate for 'between'. Provide a list of values for 'in'.
        public var `operator`: RedshiftClientTypes.OperatorType?
        /// List of values. Compare Name using Operator to Values. If filter Name is NumberOfNodes, then values can range from 0 to 200. If filter Name is EstimatedDiskUtilizationPercent, then values can range from 0 to 100. For example, filter NumberOfNodes (name) GT (operator) 3 (values).
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.NodeConfigurationOptionsFilterName? = nil,
            `operator`: RedshiftClientTypes.OperatorType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension RedshiftClientTypes {
    public enum NodeConfigurationOptionsFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case estimatedDiskUtilizationPercent
        case mode
        case nodeType
        case numNodes
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeConfigurationOptionsFilterName] {
            return [
                .estimatedDiskUtilizationPercent,
                .mode,
                .nodeType,
                .numNodes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .estimatedDiskUtilizationPercent: return "EstimatedDiskUtilizationPercent"
            case .mode: return "Mode"
            case .nodeType: return "NodeType"
            case .numNodes: return "NumberOfNodes"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeConfigurationOptionsFilterName(rawValue: rawValue) ?? NodeConfigurationOptionsFilterName.sdkUnknown(rawValue)
        }
    }
}

extension NumberOfNodesPerClusterLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<NumberOfNodesPerClusterLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The operation would exceed the number of nodes allowed for a cluster.
public struct NumberOfNodesPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NumberOfNodesPerClusterLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct NumberOfNodesPerClusterLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NumberOfNodesPerClusterLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NumberOfNodesQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<NumberOfNodesQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The operation would exceed the number of nodes allotted to the account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct NumberOfNodesQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NumberOfNodesQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct NumberOfNodesQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NumberOfNodesQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum OperatorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case between
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatorType] {
            return [
                .between,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .between: return "between"
            case .eq: return "eq"
            case .ge: return "ge"
            case .gt: return "gt"
            case .in: return "in"
            case .le: return "le"
            case .lt: return "lt"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperatorType(rawValue: rawValue) ?? OperatorType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.OrderableClusterOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case nodeType = "NodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, availabilityzone0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(availabilityzone0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([RedshiftClientTypes.AvailabilityZone].self, forKey: .member)
                var availabilityZonesBuffer:[RedshiftClientTypes.AvailabilityZone]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [RedshiftClientTypes.AvailabilityZone]()
                    for structureContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(structureContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes an orderable cluster option.
    public struct OrderableClusterOption: Swift.Equatable {
        /// A list of availability zones for the orderable cluster.
        public var availabilityZones: [RedshiftClientTypes.AvailabilityZone]?
        /// The cluster type, for example multi-node.
        public var clusterType: Swift.String?
        /// The version of the orderable cluster.
        public var clusterVersion: Swift.String?
        /// The node type for the orderable cluster.
        public var nodeType: Swift.String?

        public init(
            availabilityZones: [RedshiftClientTypes.AvailabilityZone]? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            nodeType: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
        }
    }

}

extension RedshiftClientTypes.Parameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case applyType = "ApplyType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let applyType = applyType {
            try container.encode(applyType, forKey: ClientRuntime.Key("ApplyType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isModifiable = isModifiable {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let applyTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ParameterApplyType.self, forKey: .applyType)
        applyType = applyTypeDecoded
        let isModifiableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a parameter in a cluster parameter group.
    public struct Parameter: Swift.Equatable {
        /// The valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide.
        public var applyType: RedshiftClientTypes.ParameterApplyType?
        /// The data type of the parameter.
        public var dataType: Swift.String?
        /// A description of the parameter.
        public var description: Swift.String?
        /// If true, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The value of the parameter. If ParameterName is wlm_json_configuration, then the maximum size of ParameterValue is 8000 characters.
        public var parameterValue: Swift.String?
        /// The source of the parameter value, such as "engine-default" or "user".
        public var source: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyType: RedshiftClientTypes.ParameterApplyType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }
    }

}

extension RedshiftClientTypes {
    public enum ParameterApplyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterApplyType] {
            return [
                .dynamic,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "dynamic"
            case .static: return "static"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterApplyType(rawValue: rawValue) ?? ParameterApplyType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.PartnerIntegrationInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let createdAt = createdAt {
            try container.encodeTimestamp(createdAt, format: .dateTime, forKey: ClientRuntime.Key("CreatedAt"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        if let updatedAt = updatedAt {
            try container.encodeTimestamp(updatedAt, format: .dateTime, forKey: ClientRuntime.Key("UpdatedAt"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.PartnerIntegrationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a partner integration.
    public struct PartnerIntegrationInfo: Swift.Equatable {
        /// The date (UTC) that the partner integration was created.
        public var createdAt: ClientRuntime.Date?
        /// The name of the database that receives data from a partner.
        public var databaseName: Swift.String?
        /// The name of the partner.
        public var partnerName: Swift.String?
        /// The partner integration status.
        public var status: RedshiftClientTypes.PartnerIntegrationStatus?
        /// The status message provided by the partner.
        public var statusMessage: Swift.String?
        /// The date (UTC) that the partner integration status was last updated by the partner.
        public var updatedAt: ClientRuntime.Date?

        public init(
            createdAt: ClientRuntime.Date? = nil,
            databaseName: Swift.String? = nil,
            partnerName: Swift.String? = nil,
            status: RedshiftClientTypes.PartnerIntegrationStatus? = nil,
            statusMessage: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.databaseName = databaseName
            self.partnerName = partnerName
            self.status = status
            self.statusMessage = statusMessage
            self.updatedAt = updatedAt
        }
    }

}

extension RedshiftClientTypes {
    public enum PartnerIntegrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case connectionfailure
        case inactive
        case runtimefailure
        case sdkUnknown(Swift.String)

        public static var allCases: [PartnerIntegrationStatus] {
            return [
                .active,
                .connectionfailure,
                .inactive,
                .runtimefailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .connectionfailure: return "ConnectionFailure"
            case .inactive: return "Inactive"
            case .runtimefailure: return "RuntimeFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PartnerIntegrationStatus(rawValue: rawValue) ?? PartnerIntegrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension PartnerNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<PartnerNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The name of the partner was not found.
public struct PartnerNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PartnerNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct PartnerNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension PartnerNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PauseClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("PauseCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PauseClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Describes a pause cluster operation. For example, a scheduled action to run the PauseCluster API operation.
public struct PauseClusterInput: Swift.Equatable {
    /// The identifier of the cluster to be paused.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct PauseClusterInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension PauseClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RedshiftClientTypes.PauseClusterMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a pause cluster operation. For example, a scheduled action to run the PauseCluster API operation.
    public struct PauseClusterMessage: Swift.Equatable {
        /// The identifier of the cluster to be paused.
        /// This member is required.
        public var clusterIdentifier: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
        }
    }

}

extension PauseClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PauseClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct PauseClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct PauseClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension PauseClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PauseClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum PauseClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.PendingModifiedValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case encryptionType = "EncryptionType"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case maintenanceTrackName = "MaintenanceTrackName"
        case masterUserPassword = "MasterUserPassword"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case publiclyAccessible = "PubliclyAccessible"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let encryptionType = encryptionType {
            try container.encode(encryptionType, forKey: ClientRuntime.Key("EncryptionType"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let masterUserPassword = masterUserPassword {
            try container.encode(masterUserPassword, forKey: ClientRuntime.Key("MasterUserPassword"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}

extension RedshiftClientTypes.PendingModifiedValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PendingModifiedValues(automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), encryptionType: \(Swift.String(describing: encryptionType)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension RedshiftClientTypes {
    /// Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.
    public struct PendingModifiedValues: Swift.Equatable {
        /// The pending or in-progress change of the automated snapshot retention period.
        public var automatedSnapshotRetentionPeriod: Swift.Int?
        /// The pending or in-progress change of the new identifier for the cluster.
        public var clusterIdentifier: Swift.String?
        /// The pending or in-progress change of the cluster type.
        public var clusterType: Swift.String?
        /// The pending or in-progress change of the service version.
        public var clusterVersion: Swift.String?
        /// The encryption type for a cluster. Possible values are: KMS and None.
        public var encryptionType: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The name of the maintenance track that the cluster will change to during the next maintenance window.
        public var maintenanceTrackName: Swift.String?
        /// The pending or in-progress change of the admin user password for the cluster.
        public var masterUserPassword: Swift.String?
        /// The pending or in-progress change of the cluster's node type.
        public var nodeType: Swift.String?
        /// The pending or in-progress change of the number of nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// The pending or in-progress change of the ability to connect to the cluster from the public network.
        public var publiclyAccessible: Swift.Bool?

        public init(
            automatedSnapshotRetentionPeriod: Swift.Int? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            encryptionType: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            maintenanceTrackName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            publiclyAccessible: Swift.Bool? = nil
        )
        {
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.encryptionType = encryptionType
            self.enhancedVpcRouting = enhancedVpcRouting
            self.maintenanceTrackName = maintenanceTrackName
            self.masterUserPassword = masterUserPassword
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.publiclyAccessible = publiclyAccessible
        }
    }

}

extension PurchaseReservedNodeOfferingInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeCount = nodeCount {
            try container.encode(nodeCount, forKey: ClientRuntime.Key("NodeCount"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        try container.encode("PurchaseReservedNodeOffering", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PurchaseReservedNodeOfferingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct PurchaseReservedNodeOfferingInput: Swift.Equatable {
    /// The number of reserved nodes that you want to purchase. Default: 1
    public var nodeCount: Swift.Int?
    /// The unique identifier of the reserved node offering you want to purchase.
    /// This member is required.
    public var reservedNodeOfferingId: Swift.String?

    public init(
        nodeCount: Swift.Int? = nil,
        reservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.nodeCount = nodeCount
        self.reservedNodeOfferingId = reservedNodeOfferingId
    }
}

struct PurchaseReservedNodeOfferingInputBody: Swift.Equatable {
    let reservedNodeOfferingId: Swift.String?
    let nodeCount: Swift.Int?
}

extension PurchaseReservedNodeOfferingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeCount = "NodeCount"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeOfferingId)
        reservedNodeOfferingId = reservedNodeOfferingIdDecoded
        let nodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nodeCount)
        nodeCount = nodeCountDecoded
    }
}

extension PurchaseReservedNodeOfferingOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PurchaseReservedNodeOfferingOutputBody = try responseDecoder.decode(responseBody: data)
            self.reservedNode = output.reservedNode
        } else {
            self.reservedNode = nil
        }
    }
}

public struct PurchaseReservedNodeOfferingOutput: Swift.Equatable {
    /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
    public var reservedNode: RedshiftClientTypes.ReservedNode?

    public init(
        reservedNode: RedshiftClientTypes.ReservedNode? = nil
    )
    {
        self.reservedNode = reservedNode
    }
}

struct PurchaseReservedNodeOfferingOutputBody: Swift.Equatable {
    let reservedNode: RedshiftClientTypes.ReservedNode?
}

extension PurchaseReservedNodeOfferingOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservedNode = "ReservedNode"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PurchaseReservedNodeOfferingResult"))
        let reservedNodeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNode.self, forKey: .reservedNode)
        reservedNode = reservedNodeDecoded
    }
}

enum PurchaseReservedNodeOfferingOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeQuotaExceeded": return try await ReservedNodeQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension PutResourcePolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        try container.encode("PutResourcePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// The content of the resource policy being updated.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is updated.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let policy: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutResourcePolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct PutResourcePolicyOutput: Swift.Equatable {
    /// The content of the updated resource policy.
    public var resourcePolicy: RedshiftClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: RedshiftClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyOutputBody: Swift.Equatable {
    let resourcePolicy: RedshiftClientTypes.ResourcePolicy?
}

extension PutResourcePolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy = "ResourcePolicy"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutResourcePolicyResult"))
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

enum PutResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ConflictPolicyUpdateFault": return try await ConflictPolicyUpdateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidPolicyFault": return try await InvalidPolicyFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ResourceNotFoundFault": return try await ResourceNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RebootClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("RebootCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebootClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RebootClusterInput: Swift.Equatable {
    /// The cluster identifier.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct RebootClusterInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension RebootClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RebootClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RebootClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct RebootClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct RebootClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension RebootClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RebootClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum RebootClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.RecurringCharge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let recurringChargeAmount = recurringChargeAmount {
            try container.encode(recurringChargeAmount, forKey: ClientRuntime.Key("RecurringChargeAmount"))
        }
        if let recurringChargeFrequency = recurringChargeFrequency {
            try container.encode(recurringChargeFrequency, forKey: ClientRuntime.Key("RecurringChargeFrequency"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recurringChargeAmountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recurringChargeAmount)
        recurringChargeAmount = recurringChargeAmountDecoded
        let recurringChargeFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurringChargeFrequency)
        recurringChargeFrequency = recurringChargeFrequencyDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a recurring charge.
    public struct RecurringCharge: Swift.Equatable {
        /// The amount charged per the period of time specified by the recurring charge frequency.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency at which the recurring charge amount is applied.
        public var recurringChargeFrequency: Swift.String?

        public init(
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension RedshiftClientTypes.RedshiftIdcApplication: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedTokenIssuerList = "AuthorizedTokenIssuerList"
        case iamRoleArn = "IamRoleArn"
        case idcDisplayName = "IdcDisplayName"
        case idcInstanceArn = "IdcInstanceArn"
        case idcManagedApplicationArn = "IdcManagedApplicationArn"
        case idcOnboardStatus = "IdcOnboardStatus"
        case identityNamespace = "IdentityNamespace"
        case redshiftIdcApplicationArn = "RedshiftIdcApplicationArn"
        case redshiftIdcApplicationName = "RedshiftIdcApplicationName"
        case serviceIntegrations = "ServiceIntegrations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authorizedTokenIssuerList = authorizedTokenIssuerList {
            if !authorizedTokenIssuerList.isEmpty {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                for (index0, authorizedtokenissuer0) in authorizedTokenIssuerList.enumerated() {
                    try authorizedTokenIssuerListContainer.encode(authorizedtokenissuer0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var authorizedTokenIssuerListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthorizedTokenIssuerList"))
                try authorizedTokenIssuerListContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: ClientRuntime.Key("IamRoleArn"))
        }
        if let idcDisplayName = idcDisplayName {
            try container.encode(idcDisplayName, forKey: ClientRuntime.Key("IdcDisplayName"))
        }
        if let idcInstanceArn = idcInstanceArn {
            try container.encode(idcInstanceArn, forKey: ClientRuntime.Key("IdcInstanceArn"))
        }
        if let idcManagedApplicationArn = idcManagedApplicationArn {
            try container.encode(idcManagedApplicationArn, forKey: ClientRuntime.Key("IdcManagedApplicationArn"))
        }
        if let idcOnboardStatus = idcOnboardStatus {
            try container.encode(idcOnboardStatus, forKey: ClientRuntime.Key("IdcOnboardStatus"))
        }
        if let identityNamespace = identityNamespace {
            try container.encode(identityNamespace, forKey: ClientRuntime.Key("IdentityNamespace"))
        }
        if let redshiftIdcApplicationArn = redshiftIdcApplicationArn {
            try container.encode(redshiftIdcApplicationArn, forKey: ClientRuntime.Key("RedshiftIdcApplicationArn"))
        }
        if let redshiftIdcApplicationName = redshiftIdcApplicationName {
            try container.encode(redshiftIdcApplicationName, forKey: ClientRuntime.Key("RedshiftIdcApplicationName"))
        }
        if let serviceIntegrations = serviceIntegrations {
            if !serviceIntegrations.isEmpty {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                for (index0, serviceintegrationsunion0) in serviceIntegrations.enumerated() {
                    try serviceIntegrationsContainer.encode(serviceintegrationsunion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var serviceIntegrationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceIntegrations"))
                try serviceIntegrationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idcInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcInstanceArn)
        idcInstanceArn = idcInstanceArnDecoded
        let redshiftIdcApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationName)
        redshiftIdcApplicationName = redshiftIdcApplicationNameDecoded
        let redshiftIdcApplicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftIdcApplicationArn)
        redshiftIdcApplicationArn = redshiftIdcApplicationArnDecoded
        let identityNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityNamespace)
        identityNamespace = identityNamespaceDecoded
        let idcDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcDisplayName)
        idcDisplayName = idcDisplayNameDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let idcManagedApplicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcManagedApplicationArn)
        idcManagedApplicationArn = idcManagedApplicationArnDecoded
        let idcOnboardStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idcOnboardStatus)
        idcOnboardStatus = idcOnboardStatusDecoded
        if containerValues.contains(.authorizedTokenIssuerList) {
            struct KeyVal0{struct member{}}
            let authorizedTokenIssuerListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .authorizedTokenIssuerList)
            if let authorizedTokenIssuerListWrappedContainer = authorizedTokenIssuerListWrappedContainer {
                let authorizedTokenIssuerListContainer = try authorizedTokenIssuerListWrappedContainer.decodeIfPresent([RedshiftClientTypes.AuthorizedTokenIssuer].self, forKey: .member)
                var authorizedTokenIssuerListBuffer:[RedshiftClientTypes.AuthorizedTokenIssuer]? = nil
                if let authorizedTokenIssuerListContainer = authorizedTokenIssuerListContainer {
                    authorizedTokenIssuerListBuffer = [RedshiftClientTypes.AuthorizedTokenIssuer]()
                    for structureContainer0 in authorizedTokenIssuerListContainer {
                        authorizedTokenIssuerListBuffer?.append(structureContainer0)
                    }
                }
                authorizedTokenIssuerList = authorizedTokenIssuerListBuffer
            } else {
                authorizedTokenIssuerList = []
            }
        } else {
            authorizedTokenIssuerList = nil
        }
        if containerValues.contains(.serviceIntegrations) {
            struct KeyVal0{struct member{}}
            let serviceIntegrationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceIntegrations)
            if let serviceIntegrationsWrappedContainer = serviceIntegrationsWrappedContainer {
                let serviceIntegrationsContainer = try serviceIntegrationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ServiceIntegrationsUnion].self, forKey: .member)
                var serviceIntegrationsBuffer:[RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
                if let serviceIntegrationsContainer = serviceIntegrationsContainer {
                    serviceIntegrationsBuffer = [RedshiftClientTypes.ServiceIntegrationsUnion]()
                    for unionContainer0 in serviceIntegrationsContainer {
                        serviceIntegrationsBuffer?.append(unionContainer0)
                    }
                }
                serviceIntegrations = serviceIntegrationsBuffer
            } else {
                serviceIntegrations = []
            }
        } else {
            serviceIntegrations = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Contains properties for the Redshift IDC application.
    public struct RedshiftIdcApplication: Swift.Equatable {
        /// The authorized token issuer list for the Amazon Redshift IAM Identity Center application.
        public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
        /// The ARN for the Amazon Redshift IAM Identity Center application. It has the required permissions to be assumed and invoke the IDC Identity Center API.
        public var iamRoleArn: Swift.String?
        /// The display name for the Amazon Redshift IAM Identity Center application. It appears on the console.
        public var idcDisplayName: Swift.String?
        /// The ARN for the IAM Identity Center instance that Redshift integrates with.
        public var idcInstanceArn: Swift.String?
        /// The ARN for the Amazon Redshift IAM Identity Center application.
        public var idcManagedApplicationArn: Swift.String?
        /// The onboarding status for the Amazon Redshift IAM Identity Center application.
        public var idcOnboardStatus: Swift.String?
        /// The identity namespace for the Amazon Redshift IAM Identity Center application. It determines which managed application verifies the connection token.
        public var identityNamespace: Swift.String?
        /// The ARN for the Redshift application that integrates with IAM Identity Center.
        public var redshiftIdcApplicationArn: Swift.String?
        /// The name of the Redshift application in IAM Identity Center.
        public var redshiftIdcApplicationName: Swift.String?
        /// A list of service integrations for the Redshift IAM Identity Center application.
        public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

        public init(
            authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
            iamRoleArn: Swift.String? = nil,
            idcDisplayName: Swift.String? = nil,
            idcInstanceArn: Swift.String? = nil,
            idcManagedApplicationArn: Swift.String? = nil,
            idcOnboardStatus: Swift.String? = nil,
            identityNamespace: Swift.String? = nil,
            redshiftIdcApplicationArn: Swift.String? = nil,
            redshiftIdcApplicationName: Swift.String? = nil,
            serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
        )
        {
            self.authorizedTokenIssuerList = authorizedTokenIssuerList
            self.iamRoleArn = iamRoleArn
            self.idcDisplayName = idcDisplayName
            self.idcInstanceArn = idcInstanceArn
            self.idcManagedApplicationArn = idcManagedApplicationArn
            self.idcOnboardStatus = idcOnboardStatus
            self.identityNamespace = identityNamespace
            self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
            self.redshiftIdcApplicationName = redshiftIdcApplicationName
            self.serviceIntegrations = serviceIntegrations
        }
    }

}

extension RedshiftIdcApplicationAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<RedshiftIdcApplicationAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The application you attempted to add already exists.
public struct RedshiftIdcApplicationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct RedshiftIdcApplicationAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension RedshiftIdcApplicationAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftIdcApplicationNotExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<RedshiftIdcApplicationNotExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The application you attempted to find doesn't exist.
public struct RedshiftIdcApplicationNotExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationNotExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct RedshiftIdcApplicationNotExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension RedshiftIdcApplicationNotExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftIdcApplicationQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<RedshiftIdcApplicationQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of Redshift IAM Identity Center applications was exceeded.
public struct RedshiftIdcApplicationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct RedshiftIdcApplicationQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension RedshiftIdcApplicationQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RejectDataShareInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dataShareArn = dataShareArn {
            try container.encode(dataShareArn, forKey: ClientRuntime.Key("DataShareArn"))
        }
        try container.encode("RejectDataShare", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RejectDataShareInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RejectDataShareInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the datashare to reject.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        dataShareArn: Swift.String? = nil
    )
    {
        self.dataShareArn = dataShareArn
    }
}

struct RejectDataShareInputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
}

extension RejectDataShareInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShareArn = "DataShareArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
    }
}

extension RejectDataShareOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RejectDataShareOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowPubliclyAccessibleConsumers = output.allowPubliclyAccessibleConsumers
            self.dataShareArn = output.dataShareArn
            self.dataShareAssociations = output.dataShareAssociations
            self.managedBy = output.managedBy
            self.producerArn = output.producerArn
        } else {
            self.allowPubliclyAccessibleConsumers = nil
            self.dataShareArn = nil
            self.dataShareAssociations = nil
            self.managedBy = nil
            self.producerArn = nil
        }
    }
}

public struct RejectDataShareOutput: Swift.Equatable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name} format.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

struct RejectDataShareOutputBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let producerArn: Swift.String?
    let allowPubliclyAccessibleConsumers: Swift.Bool?
    let dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    let managedBy: Swift.String?
}

extension RejectDataShareOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RejectDataShareResult"))
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}

enum RejectDataShareOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "InvalidDataShareFault": return try await InvalidDataShareFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.ReservedNode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case nodeCount = "NodeCount"
        case nodeType = "NodeType"
        case offeringType = "OfferingType"
        case recurringCharges = "RecurringCharges"
        case reservedNodeId = "ReservedNodeId"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
        case reservedNodeOfferingType = "ReservedNodeOfferingType"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let nodeCount = nodeCount {
            try container.encode(nodeCount, forKey: ClientRuntime.Key("NodeCount"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                try recurringChargesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        if let reservedNodeOfferingType = reservedNodeOfferingType {
            try container.encode(reservedNodeOfferingType, forKey: ClientRuntime.Key("ReservedNodeOfferingType"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let reservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeOfferingId)
        reservedNodeOfferingId = reservedNodeOfferingIdDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let nodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nodeCount)
        nodeCount = nodeCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([RedshiftClientTypes.RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[RedshiftClientTypes.RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [RedshiftClientTypes.RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let reservedNodeOfferingTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeOfferingType.self, forKey: .reservedNodeOfferingType)
        reservedNodeOfferingType = reservedNodeOfferingTypeDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
    public struct ReservedNode: Swift.Equatable {
        /// The currency code for the reserved cluster.
        public var currencyCode: Swift.String?
        /// The duration of the node reservation in seconds.
        public var duration: Swift.Int?
        /// The fixed cost Amazon Redshift charges you for this reserved node.
        public var fixedPrice: Swift.Double?
        /// The number of reserved compute nodes.
        public var nodeCount: Swift.Int?
        /// The node type of the reserved node.
        public var nodeType: Swift.String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public var offeringType: Swift.String?
        /// The recurring charges for the reserved node.
        public var recurringCharges: [RedshiftClientTypes.RecurringCharge]?
        /// The unique identifier for the reservation.
        public var reservedNodeId: Swift.String?
        /// The identifier for the reserved node offering.
        public var reservedNodeOfferingId: Swift.String?
        ///
        public var reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType?
        /// The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.
        public var startTime: ClientRuntime.Date?
        /// The state of the reserved compute node. Possible Values:
        ///
        /// * pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.
        ///
        /// * active-This reserved node is owned by the caller and is available for use.
        ///
        /// * payment-failed-Payment failed for the purchase attempt.
        ///
        /// * retired-The reserved node is no longer available.
        ///
        /// * exchanging-The owner is exchanging the reserved node for another reserved node.
        public var state: Swift.String?
        /// The hourly rate Amazon Redshift charges you for this reserved node.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            nodeCount: Swift.Int? = nil,
            nodeType: Swift.String? = nil,
            offeringType: Swift.String? = nil,
            recurringCharges: [RedshiftClientTypes.RecurringCharge]? = nil,
            reservedNodeId: Swift.String? = nil,
            reservedNodeOfferingId: Swift.String? = nil,
            reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.nodeCount = nodeCount
            self.nodeType = nodeType
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.reservedNodeId = reservedNodeId
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedNodeAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedNodeAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// User already has a reservation with the given identifier.
public struct ReservedNodeAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ReservedNodeAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedNodeAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReservedNodeAlreadyMigratedFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedNodeAlreadyMigratedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Indicates that the reserved node has already been exchanged.
public struct ReservedNodeAlreadyMigratedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeAlreadyMigrated" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ReservedNodeAlreadyMigratedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedNodeAlreadyMigratedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ReservedNodeConfigurationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceReservedNode = "SourceReservedNode"
        case targetReservedNodeCount = "TargetReservedNodeCount"
        case targetReservedNodeOffering = "TargetReservedNodeOffering"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceReservedNode = sourceReservedNode {
            try container.encode(sourceReservedNode, forKey: ClientRuntime.Key("SourceReservedNode"))
        }
        if let targetReservedNodeCount = targetReservedNodeCount {
            try container.encode(targetReservedNodeCount, forKey: ClientRuntime.Key("TargetReservedNodeCount"))
        }
        if let targetReservedNodeOffering = targetReservedNodeOffering {
            try container.encode(targetReservedNodeOffering, forKey: ClientRuntime.Key("TargetReservedNodeOffering"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceReservedNodeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNode.self, forKey: .sourceReservedNode)
        sourceReservedNode = sourceReservedNodeDecoded
        let targetReservedNodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetReservedNodeCount)
        targetReservedNodeCount = targetReservedNodeCountDecoded
        let targetReservedNodeOfferingDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeOffering.self, forKey: .targetReservedNodeOffering)
        targetReservedNodeOffering = targetReservedNodeOfferingDecoded
    }
}

extension RedshiftClientTypes {
    /// Details for a reserved-node exchange. Examples include the node type for a reserved node, the price for a node, the node's state, and other details.
    public struct ReservedNodeConfigurationOption: Swift.Equatable {
        /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
        public var sourceReservedNode: RedshiftClientTypes.ReservedNode?
        /// The target reserved-node count.
        public var targetReservedNodeCount: Swift.Int?
        /// Describes a reserved node offering.
        public var targetReservedNodeOffering: RedshiftClientTypes.ReservedNodeOffering?

        public init(
            sourceReservedNode: RedshiftClientTypes.ReservedNode? = nil,
            targetReservedNodeCount: Swift.Int? = nil,
            targetReservedNodeOffering: RedshiftClientTypes.ReservedNodeOffering? = nil
        )
        {
            self.sourceReservedNode = sourceReservedNode
            self.targetReservedNodeCount = targetReservedNodeCount
            self.targetReservedNodeOffering = targetReservedNodeOffering
        }
    }

}

extension RedshiftClientTypes {
    public enum ReservedNodeExchangeActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resizeCluster
        case restoreCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeExchangeActionType] {
            return [
                .resizeCluster,
                .restoreCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resizeCluster: return "resize-cluster"
            case .restoreCluster: return "restore-cluster"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedNodeExchangeActionType(rawValue: rawValue) ?? ReservedNodeExchangeActionType.sdkUnknown(rawValue)
        }
    }
}

extension ReservedNodeExchangeNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedNodeExchangeNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The reserved-node exchange status wasn't found.
public struct ReservedNodeExchangeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeExchangeNotFond" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ReservedNodeExchangeNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedNodeExchangeNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ReservedNodeExchangeStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestTime = "RequestTime"
        case reservedNodeExchangeRequestId = "ReservedNodeExchangeRequestId"
        case sourceReservedNodeCount = "SourceReservedNodeCount"
        case sourceReservedNodeId = "SourceReservedNodeId"
        case sourceReservedNodeType = "SourceReservedNodeType"
        case status = "Status"
        case targetReservedNodeCount = "TargetReservedNodeCount"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
        case targetReservedNodeType = "TargetReservedNodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let requestTime = requestTime {
            try container.encodeTimestamp(requestTime, format: .dateTime, forKey: ClientRuntime.Key("RequestTime"))
        }
        if let reservedNodeExchangeRequestId = reservedNodeExchangeRequestId {
            try container.encode(reservedNodeExchangeRequestId, forKey: ClientRuntime.Key("ReservedNodeExchangeRequestId"))
        }
        if let sourceReservedNodeCount = sourceReservedNodeCount {
            try container.encode(sourceReservedNodeCount, forKey: ClientRuntime.Key("SourceReservedNodeCount"))
        }
        if let sourceReservedNodeId = sourceReservedNodeId {
            try container.encode(sourceReservedNodeId, forKey: ClientRuntime.Key("SourceReservedNodeId"))
        }
        if let sourceReservedNodeType = sourceReservedNodeType {
            try container.encode(sourceReservedNodeType, forKey: ClientRuntime.Key("SourceReservedNodeType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let targetReservedNodeCount = targetReservedNodeCount {
            try container.encode(targetReservedNodeCount, forKey: ClientRuntime.Key("TargetReservedNodeCount"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        if let targetReservedNodeType = targetReservedNodeType {
            try container.encode(targetReservedNodeType, forKey: ClientRuntime.Key("TargetReservedNodeType"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeExchangeRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeExchangeRequestId)
        reservedNodeExchangeRequestId = reservedNodeExchangeRequestIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeExchangeStatusType.self, forKey: .status)
        status = statusDecoded
        let requestTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .requestTime)
        requestTime = requestTimeDecoded
        let sourceReservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceReservedNodeId)
        sourceReservedNodeId = sourceReservedNodeIdDecoded
        let sourceReservedNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceReservedNodeType)
        sourceReservedNodeType = sourceReservedNodeTypeDecoded
        let sourceReservedNodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sourceReservedNodeCount)
        sourceReservedNodeCount = sourceReservedNodeCountDecoded
        let targetReservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeOfferingId)
        targetReservedNodeOfferingId = targetReservedNodeOfferingIdDecoded
        let targetReservedNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeType)
        targetReservedNodeType = targetReservedNodeTypeDecoded
        let targetReservedNodeCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetReservedNodeCount)
        targetReservedNodeCount = targetReservedNodeCountDecoded
    }
}

extension RedshiftClientTypes {
    /// Reserved-node status details, such as the source reserved-node identifier, the target reserved-node identifier, the node type, the node count, and other details.
    public struct ReservedNodeExchangeStatus: Swift.Equatable {
        /// A date and time that indicate when the reserved-node exchange was requested.
        public var requestTime: ClientRuntime.Date?
        /// The identifier of the reserved-node exchange request.
        public var reservedNodeExchangeRequestId: Swift.String?
        /// The source reserved-node count in the cluster.
        public var sourceReservedNodeCount: Swift.Int?
        /// The identifier of the source reserved node.
        public var sourceReservedNodeId: Swift.String?
        /// The source reserved-node type, for example ds2.xlarge.
        public var sourceReservedNodeType: Swift.String?
        /// The status of the reserved-node exchange request. Statuses include in-progress and requested.
        public var status: RedshiftClientTypes.ReservedNodeExchangeStatusType?
        /// The count of target reserved nodes in the cluster.
        public var targetReservedNodeCount: Swift.Int?
        /// The identifier of the target reserved node offering.
        public var targetReservedNodeOfferingId: Swift.String?
        /// The node type of the target reserved node, for example ra3.4xlarge.
        public var targetReservedNodeType: Swift.String?

        public init(
            requestTime: ClientRuntime.Date? = nil,
            reservedNodeExchangeRequestId: Swift.String? = nil,
            sourceReservedNodeCount: Swift.Int? = nil,
            sourceReservedNodeId: Swift.String? = nil,
            sourceReservedNodeType: Swift.String? = nil,
            status: RedshiftClientTypes.ReservedNodeExchangeStatusType? = nil,
            targetReservedNodeCount: Swift.Int? = nil,
            targetReservedNodeOfferingId: Swift.String? = nil,
            targetReservedNodeType: Swift.String? = nil
        )
        {
            self.requestTime = requestTime
            self.reservedNodeExchangeRequestId = reservedNodeExchangeRequestId
            self.sourceReservedNodeCount = sourceReservedNodeCount
            self.sourceReservedNodeId = sourceReservedNodeId
            self.sourceReservedNodeType = sourceReservedNodeType
            self.status = status
            self.targetReservedNodeCount = targetReservedNodeCount
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
            self.targetReservedNodeType = targetReservedNodeType
        }
    }

}

extension RedshiftClientTypes {
    public enum ReservedNodeExchangeStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case requested
        case retrying
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeExchangeStatusType] {
            return [
                .failed,
                .inProgress,
                .pending,
                .requested,
                .retrying,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .requested: return "REQUESTED"
            case .retrying: return "RETRYING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedNodeExchangeStatusType(rawValue: rawValue) ?? ReservedNodeExchangeStatusType.sdkUnknown(rawValue)
        }
    }
}

extension ReservedNodeNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedNodeNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified reserved compute node not found.
public struct ReservedNodeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ReservedNodeNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedNodeNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ReservedNodeOffering: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case nodeType = "NodeType"
        case offeringType = "OfferingType"
        case recurringCharges = "RecurringCharges"
        case reservedNodeOfferingId = "ReservedNodeOfferingId"
        case reservedNodeOfferingType = "ReservedNodeOfferingType"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currencyCode = currencyCode {
            try container.encode(currencyCode, forKey: ClientRuntime.Key("CurrencyCode"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let fixedPrice = fixedPrice {
            try container.encode(fixedPrice, forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let recurringCharges = recurringCharges {
            if !recurringCharges.isEmpty {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                for (index0, recurringcharge0) in recurringCharges.enumerated() {
                    try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
                try recurringChargesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let reservedNodeOfferingId = reservedNodeOfferingId {
            try container.encode(reservedNodeOfferingId, forKey: ClientRuntime.Key("ReservedNodeOfferingId"))
        }
        if let reservedNodeOfferingType = reservedNodeOfferingType {
            try container.encode(reservedNodeOfferingType, forKey: ClientRuntime.Key("ReservedNodeOfferingType"))
        }
        if let usagePrice = usagePrice {
            try container.encode(usagePrice, forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeOfferingId)
        reservedNodeOfferingId = reservedNodeOfferingIdDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([RedshiftClientTypes.RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[RedshiftClientTypes.RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [RedshiftClientTypes.RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let reservedNodeOfferingTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeOfferingType.self, forKey: .reservedNodeOfferingType)
        reservedNodeOfferingType = reservedNodeOfferingTypeDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a reserved node offering.
    public struct ReservedNodeOffering: Swift.Equatable {
        /// The currency code for the compute nodes offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the node.
        public var duration: Swift.Int?
        /// The upfront fixed charge you will pay to purchase the specific reserved node offering.
        public var fixedPrice: Swift.Double?
        /// The node type offered by the reserved node offering.
        public var nodeType: Swift.String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public var offeringType: Swift.String?
        /// The charge to your account regardless of whether you are creating any clusters using the node offering. Recurring charges are only in effect for heavy-utilization reserved nodes.
        public var recurringCharges: [RedshiftClientTypes.RecurringCharge]?
        /// The offering identifier.
        public var reservedNodeOfferingId: Swift.String?
        ///
        public var reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType?
        /// The rate you are charged for each hour the cluster that is using the offering is running.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            nodeType: Swift.String? = nil,
            offeringType: Swift.String? = nil,
            recurringCharges: [RedshiftClientTypes.RecurringCharge]? = nil,
            reservedNodeOfferingId: Swift.String? = nil,
            reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.nodeType = nodeType
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedNodeOfferingNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedNodeOfferingNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Specified offering does not exist.
public struct ReservedNodeOfferingNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeOfferingNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ReservedNodeOfferingNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedNodeOfferingNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum ReservedNodeOfferingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case regular
        case upgradable
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeOfferingType] {
            return [
                .regular,
                .upgradable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .regular: return "Regular"
            case .upgradable: return "Upgradable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReservedNodeOfferingType(rawValue: rawValue) ?? ReservedNodeOfferingType.sdkUnknown(rawValue)
        }
    }
}

extension ReservedNodeQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedNodeQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Request would exceed the user's compute node quota. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ReservedNodeQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ReservedNodeQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedNodeQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResetClusterParameterGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterGroupName = parameterGroupName {
            try container.encode(parameterGroupName, forKey: ClientRuntime.Key("ParameterGroupName"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resetAllParameters = resetAllParameters {
            try container.encode(resetAllParameters, forKey: ClientRuntime.Key("ResetAllParameters"))
        }
        try container.encode("ResetClusterParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResetClusterParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct ResetClusterParameterGroupInput: Swift.Equatable {
    /// The name of the cluster parameter group to be reset.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// An array of names of parameters to be reset. If ResetAllParameters option is not used, then at least one parameter name must be supplied. Constraints: A maximum of 20 parameters can be reset in a single request.
    public var parameters: [RedshiftClientTypes.Parameter]?
    /// If true, all parameters in the specified parameter group will be reset to their default values. Default: true
    public var resetAllParameters: Swift.Bool?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

struct ResetClusterParameterGroupInputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let resetAllParameters: Swift.Bool?
    let parameters: [RedshiftClientTypes.Parameter]?
}

extension ResetClusterParameterGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameters = "Parameters"
        case resetAllParameters = "ResetAllParameters"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let resetAllParametersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .resetAllParameters)
        resetAllParameters = resetAllParametersDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([RedshiftClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[RedshiftClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [RedshiftClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
    }
}

extension ResetClusterParameterGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResetClusterParameterGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.parameterGroupName = output.parameterGroupName
            self.parameterGroupStatus = output.parameterGroupStatus
        } else {
            self.parameterGroupName = nil
            self.parameterGroupStatus = nil
        }
    }
}

///
public struct ResetClusterParameterGroupOutput: Swift.Equatable {
    /// The name of the cluster parameter group.
    public var parameterGroupName: Swift.String?
    /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
    public var parameterGroupStatus: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameterGroupStatus: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameterGroupStatus = parameterGroupStatus
    }
}

struct ResetClusterParameterGroupOutputBody: Swift.Equatable {
    let parameterGroupName: Swift.String?
    let parameterGroupStatus: Swift.String?
}

extension ResetClusterParameterGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterGroupName = "ParameterGroupName"
        case parameterGroupStatus = "ParameterGroupStatus"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ResetClusterParameterGroupResult"))
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupStatus)
        parameterGroupStatus = parameterGroupStatusDecoded
    }
}

enum ResetClusterParameterGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterParameterGroupState": return try await InvalidClusterParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ResizeClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let classic = classic {
            try container.encode(classic, forKey: ClientRuntime.Key("Classic"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        try container.encode("ResizeCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResizeClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Describes a resize cluster operation. For example, a scheduled action to run the ResizeCluster API operation.
public struct ResizeClusterInput: Swift.Equatable {
    /// A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false, the resize type is elastic.
    public var classic: Swift.Bool?
    /// The unique identifier for the cluster to resize.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The new cluster type for the specified cluster.
    public var clusterType: Swift.String?
    /// The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
    public var nodeType: Swift.String?
    /// The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
    public var numberOfNodes: Swift.Int?
    /// The identifier of the reserved node.
    public var reservedNodeId: Swift.String?
    /// The identifier of the target reserved node offering.
    public var targetReservedNodeOfferingId: Swift.String?

    public init(
        classic: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterType: Swift.String? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.classic = classic
        self.clusterIdentifier = clusterIdentifier
        self.clusterType = clusterType
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.reservedNodeId = reservedNodeId
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
    }
}

struct ResizeClusterInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let clusterType: Swift.String?
    let nodeType: Swift.String?
    let numberOfNodes: Swift.Int?
    let classic: Swift.Bool?
    let reservedNodeId: Swift.String?
    let targetReservedNodeOfferingId: Swift.String?
}

extension ResizeClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classic = "Classic"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case reservedNodeId = "ReservedNodeId"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let classicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .classic)
        classic = classicDecoded
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let targetReservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeOfferingId)
        targetReservedNodeOfferingId = targetReservedNodeOfferingIdDecoded
    }
}

extension RedshiftClientTypes.ResizeClusterMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classic = "Classic"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case reservedNodeId = "ReservedNodeId"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let classic = classic {
            try container.encode(classic, forKey: ClientRuntime.Key("Classic"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: ClientRuntime.Key("ClusterType"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let classicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .classic)
        classic = classicDecoded
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let targetReservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeOfferingId)
        targetReservedNodeOfferingId = targetReservedNodeOfferingIdDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a resize cluster operation. For example, a scheduled action to run the ResizeCluster API operation.
    public struct ResizeClusterMessage: Swift.Equatable {
        /// A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false, the resize type is elastic.
        public var classic: Swift.Bool?
        /// The unique identifier for the cluster to resize.
        /// This member is required.
        public var clusterIdentifier: Swift.String?
        /// The new cluster type for the specified cluster.
        public var clusterType: Swift.String?
        /// The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
        public var nodeType: Swift.String?
        /// The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
        public var numberOfNodes: Swift.Int?
        /// The identifier of the reserved node.
        public var reservedNodeId: Swift.String?
        /// The identifier of the target reserved node offering.
        public var targetReservedNodeOfferingId: Swift.String?

        public init(
            classic: Swift.Bool? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            reservedNodeId: Swift.String? = nil,
            targetReservedNodeOfferingId: Swift.String? = nil
        )
        {
            self.classic = classic
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.reservedNodeId = reservedNodeId
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
        }
    }

}

extension ResizeClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResizeClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ResizeClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ResizeClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ResizeClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ResizeClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ResizeClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOptionFault": return try await UnsupportedOptionFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.ResizeInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCancelResize = "AllowCancelResize"
        case resizeType = "ResizeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowCancelResize = allowCancelResize {
            try container.encode(allowCancelResize, forKey: ClientRuntime.Key("AllowCancelResize"))
        }
        if let resizeType = resizeType {
            try container.encode(resizeType, forKey: ClientRuntime.Key("ResizeType"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resizeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resizeType)
        resizeType = resizeTypeDecoded
        let allowCancelResizeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowCancelResize)
        allowCancelResize = allowCancelResizeDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a resize operation.
    public struct ResizeInfo: Swift.Equatable {
        /// A boolean value indicating if the resize operation can be cancelled.
        public var allowCancelResize: Swift.Bool?
        /// Returns the value ClassicResize.
        public var resizeType: Swift.String?

        public init(
            allowCancelResize: Swift.Bool? = nil,
            resizeType: Swift.String? = nil
        )
        {
            self.allowCancelResize = allowCancelResize
            self.resizeType = resizeType
        }
    }

}

extension ResizeNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResizeNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A resize operation for the specified cluster is not found.
public struct ResizeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResizeNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResizeNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResizeNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The resource could not be found.
public struct ResourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResourceNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ResourcePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policy = policy {
            try container.encode(policy, forKey: ClientRuntime.Key("Policy"))
        }
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension RedshiftClientTypes {
    /// The policy that is attached to a resource.
    public struct ResourcePolicy: Swift.Equatable {
        /// The content of a resource policy.
        public var policy: Swift.String?
        /// The resources that a policy is attached to.
        public var resourceArn: Swift.String?

        public init(
            policy: Swift.String? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.policy = policy
            self.resourceArn = resourceArn
        }
    }

}

extension RestoreFromClusterSnapshotInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalInfo = additionalInfo {
            try container.encode(additionalInfo, forKey: ClientRuntime.Key("AdditionalInfo"))
        }
        if let allowVersionUpgrade = allowVersionUpgrade {
            try container.encode(allowVersionUpgrade, forKey: ClientRuntime.Key("AllowVersionUpgrade"))
        }
        if let aquaConfigurationStatus = aquaConfigurationStatus {
            try container.encode(aquaConfigurationStatus, forKey: ClientRuntime.Key("AquaConfigurationStatus"))
        }
        if let automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod {
            try container.encode(automatedSnapshotRetentionPeriod, forKey: ClientRuntime.Key("AutomatedSnapshotRetentionPeriod"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let availabilityZoneRelocation = availabilityZoneRelocation {
            try container.encode(availabilityZoneRelocation, forKey: ClientRuntime.Key("AvailabilityZoneRelocation"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterParameterGroupName = clusterParameterGroupName {
            try container.encode(clusterParameterGroupName, forKey: ClientRuntime.Key("ClusterParameterGroupName"))
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            if !clusterSecurityGroups.isEmpty {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                for (index0, string0) in clusterSecurityGroups.enumerated() {
                    try clusterSecurityGroupsContainer.encode(string0, forKey: ClientRuntime.Key("ClusterSecurityGroupName.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterSecurityGroups"))
                try clusterSecurityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try container.encode(clusterSubnetGroupName, forKey: ClientRuntime.Key("ClusterSubnetGroupName"))
        }
        if let defaultIamRoleArn = defaultIamRoleArn {
            try container.encode(defaultIamRoleArn, forKey: ClientRuntime.Key("DefaultIamRoleArn"))
        }
        if let elasticIp = elasticIp {
            try container.encode(elasticIp, forKey: ClientRuntime.Key("ElasticIp"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try container.encode(hsmClientCertificateIdentifier, forKey: ClientRuntime.Key("HsmClientCertificateIdentifier"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: ClientRuntime.Key("HsmConfigurationIdentifier"))
        }
        if let iamRoles = iamRoles {
            if !iamRoles.isEmpty {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                for (index0, string0) in iamRoles.enumerated() {
                    try iamRolesContainer.encode(string0, forKey: ClientRuntime.Key("IamRoleArn.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var iamRolesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IamRoles"))
                try iamRolesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manageMasterPassword = manageMasterPassword {
            try container.encode(manageMasterPassword, forKey: ClientRuntime.Key("ManageMasterPassword"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let publiclyAccessible = publiclyAccessible {
            try container.encode(publiclyAccessible, forKey: ClientRuntime.Key("PubliclyAccessible"))
        }
        if let reservedNodeId = reservedNodeId {
            try container.encode(reservedNodeId, forKey: ClientRuntime.Key("ReservedNodeId"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try container.encode(snapshotScheduleIdentifier, forKey: ClientRuntime.Key("SnapshotScheduleIdentifier"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        if let vpcSecurityGroupIds = vpcSecurityGroupIds {
            if !vpcSecurityGroupIds.isEmpty {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                for (index0, string0) in vpcSecurityGroupIds.enumerated() {
                    try vpcSecurityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcSecurityGroupId.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcSecurityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupIds"))
                try vpcSecurityGroupIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RestoreFromClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreFromClusterSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RestoreFromClusterSnapshotInput: Swift.Equatable {
    /// Reserved.
    public var additionalInfo: Swift.String?
    /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default: true
    public var allowVersionUpgrade: Swift.Bool?
    /// This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: The value selected for the cluster from which the snapshot was taken. Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The Amazon EC2 Availability Zone in which to restore the cluster. Default: A random, system-chosen Availability Zone. Example: us-east-2a
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.
    public var availabilityZoneRelocation: Swift.Bool?
    /// The identifier of the cluster that will be created from restoring the snapshot. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to [Working with Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html). Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var clusterParameterGroupName: Swift.String?
    /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift. Cluster security groups only apply to clusters outside of VPCs.
    public var clusterSecurityGroups: [Swift.String]?
    /// The name of the subnet group where you want to cluster restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.
    public var clusterSubnetGroupName: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.
    public var defaultIamRoleArn: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.
    public var elasticIp: Swift.String?
    /// Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to [Quotas and limits](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRoles: [Swift.String]?
    /// The IP address type for the cluster. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.
    public var kmsKeyId: Swift.String?
    /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage the restored cluster's admin credentials. If ManageMasterPassword is false or not set, Amazon Redshift uses the admin credentials the cluster had at the time the snapshot was taken.
    public var manageMasterPassword: Swift.Bool?
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// If true, the snapshot will be restored to a cluster deployed in two Availability Zones.
    public var multiAZ: Swift.Bool?
    /// The node type that the restored cluster will be provisioned with. Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see [ About Clusters and Nodes](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes) in the Amazon Redshift Cluster Management Guide.
    public var nodeType: Swift.String?
    /// The number of nodes specified when provisioning the restored cluster.
    public var numberOfNodes: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    public var ownerAccount: Swift.String?
    /// The port number on which the cluster accepts connections. Default: The same port as the original cluster. Constraints: Must be between 1115 and 65535.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see [Maintenance Windows](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows) in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network.
    public var publiclyAccessible: Swift.Bool?
    /// The identifier of the target reserved node offering.
    public var reservedNodeId: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You must specify this parameter or snapshotIdentifier, but not both.
    public var snapshotArn: Swift.String?
    /// The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You must specify this parameter or snapshotArn, but not both. Example: my-snapshot-id
    public var snapshotIdentifier: Swift.String?
    /// A unique identifier for the snapshot schedule.
    public var snapshotScheduleIdentifier: Swift.String?
    /// The identifier of the target reserved node offering.
    public var targetReservedNodeOfferingId: Swift.String?
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster. VPC security groups only apply to clusters in VPCs.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        additionalInfo: Swift.String? = nil,
        allowVersionUpgrade: Swift.Bool? = nil,
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterSubnetGroupName: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        iamRoles: [Swift.String]? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        reservedNodeId: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        snapshotScheduleIdentifier: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.allowVersionUpgrade = allowVersionUpgrade
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.defaultIamRoleArn = defaultIamRoleArn
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.iamRoles = iamRoles
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.multiAZ = multiAZ
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.ownerAccount = ownerAccount
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.reservedNodeId = reservedNodeId
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

struct RestoreFromClusterSnapshotInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let snapshotClusterIdentifier: Swift.String?
    let port: Swift.Int?
    let availabilityZone: Swift.String?
    let allowVersionUpgrade: Swift.Bool?
    let clusterSubnetGroupName: Swift.String?
    let publiclyAccessible: Swift.Bool?
    let ownerAccount: Swift.String?
    let hsmClientCertificateIdentifier: Swift.String?
    let hsmConfigurationIdentifier: Swift.String?
    let elasticIp: Swift.String?
    let clusterParameterGroupName: Swift.String?
    let clusterSecurityGroups: [Swift.String]?
    let vpcSecurityGroupIds: [Swift.String]?
    let preferredMaintenanceWindow: Swift.String?
    let automatedSnapshotRetentionPeriod: Swift.Int?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let kmsKeyId: Swift.String?
    let nodeType: Swift.String?
    let enhancedVpcRouting: Swift.Bool?
    let additionalInfo: Swift.String?
    let iamRoles: [Swift.String]?
    let maintenanceTrackName: Swift.String?
    let snapshotScheduleIdentifier: Swift.String?
    let numberOfNodes: Swift.Int?
    let availabilityZoneRelocation: Swift.Bool?
    let aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    let defaultIamRoleArn: Swift.String?
    let reservedNodeId: Swift.String?
    let targetReservedNodeOfferingId: Swift.String?
    let encrypted: Swift.Bool?
    let manageMasterPassword: Swift.Bool?
    let masterPasswordSecretKmsKeyId: Swift.String?
    let ipAddressType: Swift.String?
    let multiAZ: Swift.Bool?
}

extension RestoreFromClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case iamRoles = "IamRoles"
        case ipAddressType = "IpAddressType"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manageMasterPassword = "ManageMasterPassword"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case multiAZ = "MultiAZ"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case ownerAccount = "OwnerAccount"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case reservedNodeId = "ReservedNodeId"
        case snapshotArn = "SnapshotArn"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let snapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotClusterIdentifier)
        snapshotClusterIdentifier = snapshotClusterIdentifierDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let allowVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let elasticIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        let clusterParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterParameterGroupName)
        clusterParameterGroupName = clusterParameterGroupNameDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroupName{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroupName>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[Swift.String]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        if containerValues.contains(.iamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let iamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .iamRoles)
            if let iamRolesWrappedContainer = iamRolesWrappedContainer {
                let iamRolesContainer = try iamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var iamRolesBuffer:[Swift.String]? = nil
                if let iamRolesContainer = iamRolesContainer {
                    iamRolesBuffer = [Swift.String]()
                    for stringContainer0 in iamRolesContainer {
                        iamRolesBuffer?.append(stringContainer0)
                    }
                }
                iamRoles = iamRolesBuffer
            } else {
                iamRoles = []
            }
        } else {
            iamRoles = nil
        }
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let availabilityZoneRelocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .availabilityZoneRelocation)
        availabilityZoneRelocation = availabilityZoneRelocationDecoded
        let aquaConfigurationStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfigurationStatus.self, forKey: .aquaConfigurationStatus)
        aquaConfigurationStatus = aquaConfigurationStatusDecoded
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
        let reservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeId)
        reservedNodeId = reservedNodeIdDecoded
        let targetReservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeOfferingId)
        targetReservedNodeOfferingId = targetReservedNodeOfferingIdDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let manageMasterPasswordDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .manageMasterPassword)
        manageMasterPassword = manageMasterPasswordDecoded
        let masterPasswordSecretKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretKmsKeyId)
        masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
    }
}

extension RestoreFromClusterSnapshotOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RestoreFromClusterSnapshotOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct RestoreFromClusterSnapshotOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct RestoreFromClusterSnapshotOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension RestoreFromClusterSnapshotOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RestoreFromClusterSnapshotResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum RestoreFromClusterSnapshotOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AccessToSnapshotDenied": return try await AccessToSnapshotDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterAlreadyExists": return try await ClusterAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterParameterGroupNotFound": return try await ClusterParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterQuotaExceeded": return try await ClusterQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSubnetGroupNotFoundFault": return try await ClusterSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceUnavailableFault": return try await DependentServiceUnavailableFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmClientCertificateNotFoundFault": return try await HsmClientCertificateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "HsmConfigurationNotFoundFault": return try await HsmConfigurationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSubnetGroupStateFault": return try await InvalidClusterSubnetGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterTrack": return try await InvalidClusterTrackFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidElasticIpFault": return try await InvalidElasticIpFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidReservedNodeState": return try await InvalidReservedNodeStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidRestore": return try await InvalidRestoreFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidSubnet": return try await InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTagFault": return try await InvalidTagFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidVPCNetworkStateFault": return try await InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "Ipv6CidrBlockNotFoundFault": return try await Ipv6CidrBlockNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "LimitExceededFault": return try await LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesPerClusterLimitExceeded": return try await NumberOfNodesPerClusterLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "NumberOfNodesQuotaExceeded": return try await NumberOfNodesQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyExists": return try await ReservedNodeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeAlreadyMigrated": return try await ReservedNodeAlreadyMigratedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeNotFound": return try await ReservedNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ReservedNodeOfferingNotFound": return try await ReservedNodeOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "SnapshotScheduleNotFound": return try await SnapshotScheduleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "TagLimitExceededFault": return try await TagLimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedOperation": return try await UnauthorizedOperation(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.RestoreStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentRestoreRateInMegaBytesPerSecond = "CurrentRestoreRateInMegaBytesPerSecond"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case snapshotSizeInMegaBytes = "SnapshotSizeInMegaBytes"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond {
            try container.encode(currentRestoreRateInMegaBytesPerSecond, forKey: ClientRuntime.Key("CurrentRestoreRateInMegaBytesPerSecond"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: ClientRuntime.Key("ElapsedTimeInSeconds"))
        }
        if let estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds {
            try container.encode(estimatedTimeToCompletionInSeconds, forKey: ClientRuntime.Key("EstimatedTimeToCompletionInSeconds"))
        }
        if let progressInMegaBytes = progressInMegaBytes {
            try container.encode(progressInMegaBytes, forKey: ClientRuntime.Key("ProgressInMegaBytes"))
        }
        if let snapshotSizeInMegaBytes = snapshotSizeInMegaBytes {
            try container.encode(snapshotSizeInMegaBytes, forKey: ClientRuntime.Key("SnapshotSizeInMegaBytes"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let currentRestoreRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .currentRestoreRateInMegaBytesPerSecond)
        currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecondDecoded
        let snapshotSizeInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotSizeInMegaBytes)
        snapshotSizeInMegaBytes = snapshotSizeInMegaBytesDecoded
        let progressInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressInMegaBytes)
        progressInMegaBytes = progressInMegaBytesDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
    public struct RestoreStatus: Swift.Equatable {
        /// The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 and DS2 node types.
        public var currentRestoreRateInMegaBytesPerSecond: Swift.Double?
        /// The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 and DS2 node types.
        public var elapsedTimeInSeconds: Swift.Int?
        /// The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 and DS2 node types.
        public var estimatedTimeToCompletionInSeconds: Swift.Int?
        /// The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 and DS2 node types.
        public var progressInMegaBytes: Swift.Int?
        /// The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 and DS2 node types.
        public var snapshotSizeInMegaBytes: Swift.Int?
        /// The status of the restore action. Returns starting, restoring, completed, or failed.
        public var status: Swift.String?

        public init(
            currentRestoreRateInMegaBytesPerSecond: Swift.Double? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
            progressInMegaBytes: Swift.Int? = nil,
            snapshotSizeInMegaBytes: Swift.Int? = nil,
            status: Swift.String? = nil
        )
        {
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.status = status
        }
    }

}

extension RestoreTableFromClusterSnapshotInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let enableCaseSensitiveIdentifier = enableCaseSensitiveIdentifier {
            try container.encode(enableCaseSensitiveIdentifier, forKey: ClientRuntime.Key("EnableCaseSensitiveIdentifier"))
        }
        if let newTableName = newTableName {
            try container.encode(newTableName, forKey: ClientRuntime.Key("NewTableName"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let sourceDatabaseName = sourceDatabaseName {
            try container.encode(sourceDatabaseName, forKey: ClientRuntime.Key("SourceDatabaseName"))
        }
        if let sourceSchemaName = sourceSchemaName {
            try container.encode(sourceSchemaName, forKey: ClientRuntime.Key("SourceSchemaName"))
        }
        if let sourceTableName = sourceTableName {
            try container.encode(sourceTableName, forKey: ClientRuntime.Key("SourceTableName"))
        }
        if let targetDatabaseName = targetDatabaseName {
            try container.encode(targetDatabaseName, forKey: ClientRuntime.Key("TargetDatabaseName"))
        }
        if let targetSchemaName = targetSchemaName {
            try container.encode(targetSchemaName, forKey: ClientRuntime.Key("TargetSchemaName"))
        }
        try container.encode("RestoreTableFromClusterSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RestoreTableFromClusterSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RestoreTableFromClusterSnapshotInput: Swift.Equatable {
    /// The identifier of the Amazon Redshift cluster to restore the table to.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false (default), the names are not case sensitive.
    public var enableCaseSensitiveIdentifier: Swift.Bool?
    /// The name of the table to create as a result of the current request.
    /// This member is required.
    public var newTableName: Swift.String?
    /// The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the ClusterIdentifier parameter.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// The name of the source database that contains the table to restore from.
    /// This member is required.
    public var sourceDatabaseName: Swift.String?
    /// The name of the source schema that contains the table to restore from. If you do not specify a SourceSchemaName value, the default is public.
    public var sourceSchemaName: Swift.String?
    /// The name of the source table to restore from.
    /// This member is required.
    public var sourceTableName: Swift.String?
    /// The name of the database to restore the table to.
    public var targetDatabaseName: Swift.String?
    /// The name of the schema to restore the table to.
    public var targetSchemaName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        enableCaseSensitiveIdentifier: Swift.Bool? = nil,
        newTableName: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        sourceDatabaseName: Swift.String? = nil,
        sourceSchemaName: Swift.String? = nil,
        sourceTableName: Swift.String? = nil,
        targetDatabaseName: Swift.String? = nil,
        targetSchemaName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.enableCaseSensitiveIdentifier = enableCaseSensitiveIdentifier
        self.newTableName = newTableName
        self.snapshotIdentifier = snapshotIdentifier
        self.sourceDatabaseName = sourceDatabaseName
        self.sourceSchemaName = sourceSchemaName
        self.sourceTableName = sourceTableName
        self.targetDatabaseName = targetDatabaseName
        self.targetSchemaName = targetSchemaName
    }
}

struct RestoreTableFromClusterSnapshotInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let sourceDatabaseName: Swift.String?
    let sourceSchemaName: Swift.String?
    let sourceTableName: Swift.String?
    let targetDatabaseName: Swift.String?
    let targetSchemaName: Swift.String?
    let newTableName: Swift.String?
    let enableCaseSensitiveIdentifier: Swift.Bool?
}

extension RestoreTableFromClusterSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case enableCaseSensitiveIdentifier = "EnableCaseSensitiveIdentifier"
        case newTableName = "NewTableName"
        case snapshotIdentifier = "SnapshotIdentifier"
        case sourceDatabaseName = "SourceDatabaseName"
        case sourceSchemaName = "SourceSchemaName"
        case sourceTableName = "SourceTableName"
        case targetDatabaseName = "TargetDatabaseName"
        case targetSchemaName = "TargetSchemaName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let sourceDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDatabaseName)
        sourceDatabaseName = sourceDatabaseNameDecoded
        let sourceSchemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSchemaName)
        sourceSchemaName = sourceSchemaNameDecoded
        let sourceTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableName)
        sourceTableName = sourceTableNameDecoded
        let targetDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetDatabaseName)
        targetDatabaseName = targetDatabaseNameDecoded
        let targetSchemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetSchemaName)
        targetSchemaName = targetSchemaNameDecoded
        let newTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newTableName)
        newTableName = newTableNameDecoded
        let enableCaseSensitiveIdentifierDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableCaseSensitiveIdentifier)
        enableCaseSensitiveIdentifier = enableCaseSensitiveIdentifierDecoded
    }
}

extension RestoreTableFromClusterSnapshotOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RestoreTableFromClusterSnapshotOutputBody = try responseDecoder.decode(responseBody: data)
            self.tableRestoreStatus = output.tableRestoreStatus
        } else {
            self.tableRestoreStatus = nil
        }
    }
}

public struct RestoreTableFromClusterSnapshotOutput: Swift.Equatable {
    /// Describes the status of a [RestoreTableFromClusterSnapshot] operation.
    public var tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus?

    public init(
        tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus? = nil
    )
    {
        self.tableRestoreStatus = tableRestoreStatus
    }
}

struct RestoreTableFromClusterSnapshotOutputBody: Swift.Equatable {
    let tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus?
}

extension RestoreTableFromClusterSnapshotOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableRestoreStatus = "TableRestoreStatus"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RestoreTableFromClusterSnapshotResult"))
        let tableRestoreStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.TableRestoreStatus.self, forKey: .tableRestoreStatus)
        tableRestoreStatus = tableRestoreStatusDecoded
    }
}

enum RestoreTableFromClusterSnapshotOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InProgressTableRestoreQuotaExceededFault": return try await InProgressTableRestoreQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSnapshotState": return try await InvalidClusterSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidTableRestoreArgument": return try await InvalidTableRestoreArgumentFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension ResumeClusterInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("ResumeCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResumeClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Describes a resume cluster operation. For example, a scheduled action to run the ResumeCluster API operation.
public struct ResumeClusterInput: Swift.Equatable {
    /// The identifier of the cluster to be resumed.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct ResumeClusterInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension ResumeClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RedshiftClientTypes.ResumeClusterMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a resume cluster operation. For example, a scheduled action to run the ResumeCluster API operation.
    public struct ResumeClusterMessage: Swift.Equatable {
        /// The identifier of the cluster to be resumed.
        /// This member is required.
        public var clusterIdentifier: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
        }
    }

}

extension ResumeClusterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResumeClusterOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct ResumeClusterOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct ResumeClusterOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension ResumeClusterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ResumeClusterResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum ResumeClusterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InsufficientClusterCapacity": return try await InsufficientClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.RevisionTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseRevision = "DatabaseRevision"
        case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseRevision = databaseRevision {
            try container.encode(databaseRevision, forKey: ClientRuntime.Key("DatabaseRevision"))
        }
        if let databaseRevisionReleaseDate = databaseRevisionReleaseDate {
            try container.encodeTimestamp(databaseRevisionReleaseDate, format: .dateTime, forKey: ClientRuntime.Key("DatabaseRevisionReleaseDate"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseRevisionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseRevision)
        databaseRevision = databaseRevisionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let databaseRevisionReleaseDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .databaseRevisionReleaseDate)
        databaseRevisionReleaseDate = databaseRevisionReleaseDateDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a RevisionTarget.
    public struct RevisionTarget: Swift.Equatable {
        /// A unique string that identifies the version to update the cluster to. You can use this value in [ModifyClusterDbRevision].
        public var databaseRevision: Swift.String?
        /// The date on which the database revision was released.
        public var databaseRevisionReleaseDate: ClientRuntime.Date?
        /// A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding [ClusterDbRevision].
        public var description: Swift.String?

        public init(
            databaseRevision: Swift.String? = nil,
            databaseRevisionReleaseDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.databaseRevision = databaseRevision
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
            self.description = description
        }
    }

}

extension RevokeClusterSecurityGroupIngressInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cidrip = cidrip {
            try container.encode(cidrip, forKey: ClientRuntime.Key("CIDRIP"))
        }
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: ClientRuntime.Key("ClusterSecurityGroupName"))
        }
        if let ec2SecurityGroupName = ec2SecurityGroupName {
            try container.encode(ec2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId {
            try container.encode(ec2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("RevokeClusterSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeClusterSecurityGroupIngressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RevokeClusterSecurityGroupIngressInput: Swift.Equatable {
    /// The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified, EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided.
    public var cidrip: Swift.String?
    /// The name of the security Group from which to revoke the ingress rule.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// The name of the EC2 Security Group whose access is to be revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be provided and CIDRIP cannot be provided.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified, EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided. Example: 111122223333
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        clusterSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

struct RevokeClusterSecurityGroupIngressInputBody: Swift.Equatable {
    let clusterSecurityGroupName: Swift.String?
    let cidrip: Swift.String?
    let ec2SecurityGroupName: Swift.String?
    let ec2SecurityGroupOwnerId: Swift.String?
}

extension RevokeClusterSecurityGroupIngressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrip = "CIDRIP"
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case ec2SecurityGroupName = "EC2SecurityGroupName"
        case ec2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let cidripDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrip)
        cidrip = cidripDecoded
        let ec2SecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SecurityGroupName)
        ec2SecurityGroupName = ec2SecurityGroupNameDecoded
        let ec2SecurityGroupOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SecurityGroupOwnerId)
        ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerIdDecoded
    }
}

extension RevokeClusterSecurityGroupIngressOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RevokeClusterSecurityGroupIngressOutputBody = try responseDecoder.decode(responseBody: data)
            self.clusterSecurityGroup = output.clusterSecurityGroup
        } else {
            self.clusterSecurityGroup = nil
        }
    }
}

public struct RevokeClusterSecurityGroupIngressOutput: Swift.Equatable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

struct RevokeClusterSecurityGroupIngressOutputBody: Swift.Equatable {
    let clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?
}

extension RevokeClusterSecurityGroupIngressOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroup = "ClusterSecurityGroup"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RevokeClusterSecurityGroupIngressResult"))
        let clusterSecurityGroupDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ClusterSecurityGroup.self, forKey: .clusterSecurityGroup)
        clusterSecurityGroup = clusterSecurityGroupDecoded
    }
}

enum RevokeClusterSecurityGroupIngressOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AuthorizationNotFound": return try await AuthorizationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSecurityGroupNotFound": return try await ClusterSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RevokeEndpointAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let force = force {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let vpcIds = vpcIds {
            if !vpcIds.isEmpty {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                for (index0, string0) in vpcIds.enumerated() {
                    try vpcIdsContainer.encode(string0, forKey: ClientRuntime.Key("VpcIdentifier.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var vpcIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcIds"))
                try vpcIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RevokeEndpointAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeEndpointAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RevokeEndpointAccessInput: Swift.Equatable {
    /// The Amazon Web Services account ID whose access is to be revoked.
    public var account: Swift.String?
    /// The cluster to revoke access from.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
    public var force: Swift.Bool?
    /// The virtual private cloud (VPC) identifiers for which access is to be revoked.
    public var vpcIds: [Swift.String]?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        force: Swift.Bool? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.force = force
        self.vpcIds = vpcIds
    }
}

struct RevokeEndpointAccessInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let account: Swift.String?
    let vpcIds: [Swift.String]?
    let force: Swift.Bool?
}

extension RevokeEndpointAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case clusterIdentifier = "ClusterIdentifier"
        case force = "Force"
        case vpcIds = "VpcIds"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        if containerValues.contains(.vpcIds) {
            struct KeyVal0{struct VpcIdentifier{}}
            let vpcIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcIdentifier>.CodingKeys.self, forKey: .vpcIds)
            if let vpcIdsWrappedContainer = vpcIdsWrappedContainer {
                let vpcIdsContainer = try vpcIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcIdsBuffer:[Swift.String]? = nil
                if let vpcIdsContainer = vpcIdsContainer {
                    vpcIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcIdsContainer {
                        vpcIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcIds = vpcIdsBuffer
            } else {
                vpcIds = []
            }
        } else {
            vpcIds = nil
        }
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension RevokeEndpointAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RevokeEndpointAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.allowedAllVPCs = output.allowedAllVPCs
            self.allowedVPCs = output.allowedVPCs
            self.authorizeTime = output.authorizeTime
            self.clusterIdentifier = output.clusterIdentifier
            self.clusterStatus = output.clusterStatus
            self.endpointCount = output.endpointCount
            self.grantee = output.grantee
            self.grantor = output.grantor
            self.status = output.status
        } else {
            self.allowedAllVPCs = nil
            self.allowedVPCs = nil
            self.authorizeTime = nil
            self.clusterIdentifier = nil
            self.clusterStatus = nil
            self.endpointCount = nil
            self.grantee = nil
            self.grantor = nil
            self.status = nil
        }
    }
}

/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
public struct RevokeEndpointAccessOutput: Swift.Equatable {
    /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
    public var allowedAllVPCs: Swift.Bool?
    /// The VPCs allowed access to the cluster.
    public var allowedVPCs: [Swift.String]?
    /// The time (UTC) when the authorization was created.
    public var authorizeTime: ClientRuntime.Date?
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The status of the cluster.
    public var clusterStatus: Swift.String?
    /// The number of Redshift-managed VPC endpoints created for the authorization.
    public var endpointCount: Swift.Int?
    /// The Amazon Web Services account ID of the grantee of the cluster.
    public var grantee: Swift.String?
    /// The Amazon Web Services account ID of the cluster owner.
    public var grantor: Swift.String?
    /// The status of the authorization action.
    public var status: RedshiftClientTypes.AuthorizationStatus?

    public init(
        allowedAllVPCs: Swift.Bool? = nil,
        allowedVPCs: [Swift.String]? = nil,
        authorizeTime: ClientRuntime.Date? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterStatus: Swift.String? = nil,
        endpointCount: Swift.Int? = nil,
        grantee: Swift.String? = nil,
        grantor: Swift.String? = nil,
        status: RedshiftClientTypes.AuthorizationStatus? = nil
    )
    {
        self.allowedAllVPCs = allowedAllVPCs
        self.allowedVPCs = allowedVPCs
        self.authorizeTime = authorizeTime
        self.clusterIdentifier = clusterIdentifier
        self.clusterStatus = clusterStatus
        self.endpointCount = endpointCount
        self.grantee = grantee
        self.grantor = grantor
        self.status = status
    }
}

struct RevokeEndpointAccessOutputBody: Swift.Equatable {
    let grantor: Swift.String?
    let grantee: Swift.String?
    let clusterIdentifier: Swift.String?
    let authorizeTime: ClientRuntime.Date?
    let clusterStatus: Swift.String?
    let status: RedshiftClientTypes.AuthorizationStatus?
    let allowedAllVPCs: Swift.Bool?
    let allowedVPCs: [Swift.String]?
    let endpointCount: Swift.Int?
}

extension RevokeEndpointAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAllVPCs = "AllowedAllVPCs"
        case allowedVPCs = "AllowedVPCs"
        case authorizeTime = "AuthorizeTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterStatus = "ClusterStatus"
        case endpointCount = "EndpointCount"
        case grantee = "Grantee"
        case grantor = "Grantor"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RevokeEndpointAccessResult"))
        let grantorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantor)
        grantor = grantorDecoded
        let granteeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantee)
        grantee = granteeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let authorizeTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .authorizeTime)
        authorizeTime = authorizeTimeDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AuthorizationStatus.self, forKey: .status)
        status = statusDecoded
        let allowedAllVPCsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedAllVPCs)
        allowedAllVPCs = allowedAllVPCsDecoded
        if containerValues.contains(.allowedVPCs) {
            struct KeyVal0{struct VpcIdentifier{}}
            let allowedVPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcIdentifier>.CodingKeys.self, forKey: .allowedVPCs)
            if let allowedVPCsWrappedContainer = allowedVPCsWrappedContainer {
                let allowedVPCsContainer = try allowedVPCsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allowedVPCsBuffer:[Swift.String]? = nil
                if let allowedVPCsContainer = allowedVPCsContainer {
                    allowedVPCsBuffer = [Swift.String]()
                    for stringContainer0 in allowedVPCsContainer {
                        allowedVPCsBuffer?.append(stringContainer0)
                    }
                }
                allowedVPCs = allowedVPCsBuffer
            } else {
                allowedVPCs = []
            }
        } else {
            allowedVPCs = nil
        }
        let endpointCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endpointCount)
        endpointCount = endpointCountDecoded
    }
}

enum RevokeEndpointAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointAuthorizationNotFound": return try await EndpointAuthorizationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "EndpointNotFound": return try await EndpointNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidAuthorizationState": return try await InvalidAuthorizationStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterSecurityGroupState": return try await InvalidClusterSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidEndpointState": return try await InvalidEndpointStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RevokeSnapshotAccessInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountWithRestoreAccess = accountWithRestoreAccess {
            try container.encode(accountWithRestoreAccess, forKey: ClientRuntime.Key("AccountWithRestoreAccess"))
        }
        if let snapshotArn = snapshotArn {
            try container.encode(snapshotArn, forKey: ClientRuntime.Key("SnapshotArn"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        try container.encode("RevokeSnapshotAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeSnapshotAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RevokeSnapshotAccessInput: Swift.Equatable {
    /// The identifier of the Amazon Web Services account that can no longer restore the specified snapshot.
    /// This member is required.
    public var accountWithRestoreAccess: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to revoke access.
    public var snapshotArn: Swift.String?
    /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The identifier of the snapshot that the account can no longer access.
    public var snapshotIdentifier: Swift.String?

    public init(
        accountWithRestoreAccess: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.accountWithRestoreAccess = accountWithRestoreAccess
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

struct RevokeSnapshotAccessInputBody: Swift.Equatable {
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let snapshotClusterIdentifier: Swift.String?
    let accountWithRestoreAccess: Swift.String?
}

extension RevokeSnapshotAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountWithRestoreAccess = "AccountWithRestoreAccess"
        case snapshotArn = "SnapshotArn"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let snapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotClusterIdentifier)
        snapshotClusterIdentifier = snapshotClusterIdentifierDecoded
        let accountWithRestoreAccessDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountWithRestoreAccess)
        accountWithRestoreAccess = accountWithRestoreAccessDecoded
    }
}

extension RevokeSnapshotAccessOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RevokeSnapshotAccessOutputBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct RevokeSnapshotAccessOutput: Swift.Equatable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct RevokeSnapshotAccessOutputBody: Swift.Equatable {
    let snapshot: RedshiftClientTypes.Snapshot?
}

extension RevokeSnapshotAccessOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RevokeSnapshotAccessResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

enum RevokeSnapshotAccessOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "AccessToSnapshotDenied": return try await AccessToSnapshotDeniedFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "AuthorizationNotFound": return try await AuthorizationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "ClusterSnapshotNotFound": return try await ClusterSnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RotateEncryptionKeyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        try container.encode("RotateEncryptionKey", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RotateEncryptionKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

///
public struct RotateEncryptionKeyInput: Swift.Equatable {
    /// The unique identifier of the cluster that you want to rotate the encryption keys for. Constraints: Must be the name of valid cluster that has encryption enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

struct RotateEncryptionKeyInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
}

extension RotateEncryptionKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension RotateEncryptionKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: RotateEncryptionKeyOutputBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct RotateEncryptionKeyOutput: Swift.Equatable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct RotateEncryptionKeyOutputBody: Swift.Equatable {
    let cluster: RedshiftClientTypes.Cluster?
}

extension RotateEncryptionKeyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RotateEncryptionKeyResult"))
        let clusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

enum RotateEncryptionKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "DependentServiceRequestThrottlingFault": return try await DependentServiceRequestThrottlingFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "InvalidClusterState": return try await InvalidClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension SNSInvalidTopicFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SNSInvalidTopicFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Amazon SNS has responded that there is a problem with the specified Amazon SNS topic.
public struct SNSInvalidTopicFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSInvalidTopic" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SNSInvalidTopicFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SNSInvalidTopicFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SNSNoAuthorizationFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SNSNoAuthorizationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You do not have permission to publish to the specified Amazon SNS topic.
public struct SNSNoAuthorizationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSNoAuthorization" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SNSNoAuthorizationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SNSNoAuthorizationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SNSTopicArnNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SNSTopicArnNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An Amazon SNS topic with the specified Amazon Resource Name (ARN) does not exist.
public struct SNSTopicArnNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSTopicArnNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SNSTopicArnNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SNSTopicArnNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ScheduleDefinitionTypeUnsupportedFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ScheduleDefinitionTypeUnsupportedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The definition you submitted is not supported.
public struct ScheduleDefinitionTypeUnsupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduleDefinitionTypeUnsupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ScheduleDefinitionTypeUnsupportedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScheduleDefinitionTypeUnsupportedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum ScheduleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case failed
        case modifying
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleState] {
            return [
                .active,
                .failed,
                .modifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .failed: return "FAILED"
            case .modifying: return "MODIFYING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleState(rawValue: rawValue) ?? ScheduleState.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.ScheduledAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case iamRole = "IamRole"
        case nextInvocations = "NextInvocations"
        case schedule = "Schedule"
        case scheduledActionDescription = "ScheduledActionDescription"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case state = "State"
        case targetAction = "TargetAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let iamRole = iamRole {
            try container.encode(iamRole, forKey: ClientRuntime.Key("IamRole"))
        }
        if let nextInvocations = nextInvocations {
            if !nextInvocations.isEmpty {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                for (index0, tstamp0) in nextInvocations.enumerated() {
                    try nextInvocationsContainer.encodeTimestamp(tstamp0, format: .dateTime, forKey: ClientRuntime.Key("ScheduledActionTime.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                try nextInvocationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: ClientRuntime.Key("Schedule"))
        }
        if let scheduledActionDescription = scheduledActionDescription {
            try container.encode(scheduledActionDescription, forKey: ClientRuntime.Key("ScheduledActionDescription"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let targetAction = targetAction {
            try container.encode(targetAction, forKey: ClientRuntime.Key("TargetAction"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionType.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let scheduledActionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionDescription)
        scheduledActionDescription = scheduledActionDescriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionState.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.nextInvocations) {
            struct KeyVal0{struct ScheduledActionTime{}}
            let nextInvocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduledActionTime>.CodingKeys.self, forKey: .nextInvocations)
            if let nextInvocationsWrappedContainer = nextInvocationsWrappedContainer {
                let nextInvocationsContainer = try nextInvocationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nextInvocationsBuffer:[ClientRuntime.Date]? = nil
                if let nextInvocationsContainer = nextInvocationsContainer {
                    nextInvocationsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in nextInvocationsContainer {
                        try nextInvocationsBuffer?.append(nextInvocationsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                nextInvocations = nextInvocationsBuffer
            } else {
                nextInvocations = []
            }
        } else {
            nextInvocations = nil
        }
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
    public struct ScheduledAction: Swift.Equatable {
        /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
        public var endTime: ClientRuntime.Date?
        /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
        public var iamRole: Swift.String?
        /// List of times when the scheduled action will run.
        public var nextInvocations: [ClientRuntime.Date]?
        /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
        public var schedule: Swift.String?
        /// The description of the scheduled action.
        public var scheduledActionDescription: Swift.String?
        /// The name of the scheduled action.
        public var scheduledActionName: Swift.String?
        /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
        public var startTime: ClientRuntime.Date?
        /// The state of the scheduled action. For example, DISABLED.
        public var state: RedshiftClientTypes.ScheduledActionState?
        /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ds2.8xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
        public var targetAction: RedshiftClientTypes.ScheduledActionType?

        public init(
            endTime: ClientRuntime.Date? = nil,
            iamRole: Swift.String? = nil,
            nextInvocations: [ClientRuntime.Date]? = nil,
            schedule: Swift.String? = nil,
            scheduledActionDescription: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: RedshiftClientTypes.ScheduledActionState? = nil,
            targetAction: RedshiftClientTypes.ScheduledActionType? = nil
        )
        {
            self.endTime = endTime
            self.iamRole = iamRole
            self.nextInvocations = nextInvocations
            self.schedule = schedule
            self.scheduledActionDescription = scheduledActionDescription
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.state = state
            self.targetAction = targetAction
        }
    }

}

extension ScheduledActionAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ScheduledActionAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The scheduled action already exists.
public struct ScheduledActionAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ScheduledActionAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScheduledActionAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.ScheduledActionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, string0) in values.enumerated() {
                    try valuesContainer.encode(string0, forKey: ClientRuntime.Key("item.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionFilterName.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct item{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.item>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension RedshiftClientTypes {
    /// A set of elements to filter the returned scheduled actions.
    public struct ScheduledActionFilter: Swift.Equatable {
        /// The type of element to filter.
        /// This member is required.
        public var name: RedshiftClientTypes.ScheduledActionFilterName?
        /// List of values. Compare if the value (of type defined by Name) equals an item in the list of scheduled actions.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.ScheduledActionFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension RedshiftClientTypes {
    public enum ScheduledActionFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clusterIdentifier
        case iamRole
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionFilterName] {
            return [
                .clusterIdentifier,
                .iamRole,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clusterIdentifier: return "cluster-identifier"
            case .iamRole: return "iam-role"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledActionFilterName(rawValue: rawValue) ?? ScheduledActionFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ScheduledActionNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ScheduledActionNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The scheduled action cannot be found.
public struct ScheduledActionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ScheduledActionNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScheduledActionNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ScheduledActionQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ScheduledActionQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The quota for scheduled actions exceeded.
public struct ScheduledActionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ScheduledActionQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScheduledActionQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum ScheduledActionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionState] {
            return [
                .active,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledActionState(rawValue: rawValue) ?? ScheduledActionState.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.ScheduledActionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pauseCluster = "PauseCluster"
        case resizeCluster = "ResizeCluster"
        case resumeCluster = "ResumeCluster"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let pauseCluster = pauseCluster {
            try container.encode(pauseCluster, forKey: ClientRuntime.Key("PauseCluster"))
        }
        if let resizeCluster = resizeCluster {
            try container.encode(resizeCluster, forKey: ClientRuntime.Key("ResizeCluster"))
        }
        if let resumeCluster = resumeCluster {
            try container.encode(resumeCluster, forKey: ClientRuntime.Key("ResumeCluster"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resizeClusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ResizeClusterMessage.self, forKey: .resizeCluster)
        resizeCluster = resizeClusterDecoded
        let pauseClusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.PauseClusterMessage.self, forKey: .pauseCluster)
        pauseCluster = pauseClusterDecoded
        let resumeClusterDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ResumeClusterMessage.self, forKey: .resumeCluster)
        resumeCluster = resumeClusterDecoded
    }
}

extension RedshiftClientTypes {
    /// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler.
    public struct ScheduledActionType: Swift.Equatable {
        /// An action that runs a PauseCluster API operation.
        public var pauseCluster: RedshiftClientTypes.PauseClusterMessage?
        /// An action that runs a ResizeCluster API operation.
        public var resizeCluster: RedshiftClientTypes.ResizeClusterMessage?
        /// An action that runs a ResumeCluster API operation.
        public var resumeCluster: RedshiftClientTypes.ResumeClusterMessage?

        public init(
            pauseCluster: RedshiftClientTypes.PauseClusterMessage? = nil,
            resizeCluster: RedshiftClientTypes.ResizeClusterMessage? = nil,
            resumeCluster: RedshiftClientTypes.ResumeClusterMessage? = nil
        )
        {
            self.pauseCluster = pauseCluster
            self.resizeCluster = resizeCluster
            self.resumeCluster = resumeCluster
        }
    }

}

extension ScheduledActionTypeUnsupportedFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ScheduledActionTypeUnsupportedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The action type specified for a scheduled action is not supported.
public struct ScheduledActionTypeUnsupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionTypeUnsupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ScheduledActionTypeUnsupportedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ScheduledActionTypeUnsupportedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum ScheduledActionTypeValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pauseCluster
        case resizeCluster
        case resumeCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionTypeValues] {
            return [
                .pauseCluster,
                .resizeCluster,
                .resumeCluster,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pauseCluster: return "PauseCluster"
            case .resizeCluster: return "ResizeCluster"
            case .resumeCluster: return "ResumeCluster"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduledActionTypeValues(rawValue: rawValue) ?? ScheduledActionTypeValues.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.SecondaryClusterInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case clusterNodes = "ClusterNodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let clusterNodes = clusterNodes {
            if !clusterNodes.isEmpty {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                for (index0, clusternode0) in clusterNodes.enumerated() {
                    try clusterNodesContainer.encode(clusternode0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var clusterNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClusterNodes"))
                try clusterNodesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        if containerValues.contains(.clusterNodes) {
            struct KeyVal0{struct member{}}
            let clusterNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .clusterNodes)
            if let clusterNodesWrappedContainer = clusterNodesWrappedContainer {
                let clusterNodesContainer = try clusterNodesWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterNode].self, forKey: .member)
                var clusterNodesBuffer:[RedshiftClientTypes.ClusterNode]? = nil
                if let clusterNodesContainer = clusterNodesContainer {
                    clusterNodesBuffer = [RedshiftClientTypes.ClusterNode]()
                    for structureContainer0 in clusterNodesContainer {
                        clusterNodesBuffer?.append(structureContainer0)
                    }
                }
                clusterNodes = clusterNodesBuffer
            } else {
                clusterNodes = []
            }
        } else {
            clusterNodes = nil
        }
    }
}

extension RedshiftClientTypes {
    /// The AvailabilityZone and ClusterNodes information of the secondary compute unit.
    public struct SecondaryClusterInfo: Swift.Equatable {
        /// The name of the Availability Zone in which the secondary compute unit of the cluster is located.
        public var availabilityZone: Swift.String?
        /// The nodes in the secondary compute unit.
        public var clusterNodes: [RedshiftClientTypes.ClusterNode]?

        public init(
            availabilityZone: Swift.String? = nil,
            clusterNodes: [RedshiftClientTypes.ClusterNode]? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.clusterNodes = clusterNodes
        }
    }

}

extension RedshiftClientTypes {
    public enum ServiceAuthorization: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceAuthorization] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceAuthorization(rawValue: rawValue) ?? ServiceAuthorization.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.ServiceIntegrationsUnion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lakeformation = "LakeFormation"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .lakeformation(lakeformation):
                var lakeformationContainer = container.nestedUnkeyedContainer(forKey: .lakeformation)
                for lakeformationscopeunion0 in lakeformation {
                    try lakeformationContainer.encode(lakeformationscopeunion0)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let lakeformationContainer = try values.decodeIfPresent([RedshiftClientTypes.LakeFormationScopeUnion?].self, forKey: .lakeformation)
        var lakeformationDecoded0:[RedshiftClientTypes.LakeFormationScopeUnion]? = nil
        if let lakeformationContainer = lakeformationContainer {
            lakeformationDecoded0 = [RedshiftClientTypes.LakeFormationScopeUnion]()
            for union0 in lakeformationContainer {
                if let union0 = union0 {
                    lakeformationDecoded0?.append(union0)
                }
            }
        }
        if let lakeformation = lakeformationDecoded0 {
            self = .lakeformation(lakeformation)
            return
        }
        self = .sdkUnknown("")
    }
}

extension RedshiftClientTypes {
    /// A list of service integrations.
    public enum ServiceIntegrationsUnion: Swift.Equatable {
        /// A list of scopes set up for Lake Formation integration.
        case lakeformation([RedshiftClientTypes.LakeFormationScopeUnion])
        case sdkUnknown(Swift.String)
    }

}

extension RedshiftClientTypes.Snapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountsWithRestoreAccess = "AccountsWithRestoreAccess"
        case actualIncrementalBackupSizeInMegaBytes = "ActualIncrementalBackupSizeInMegaBytes"
        case availabilityZone = "AvailabilityZone"
        case backupProgressInMegaBytes = "BackupProgressInMegaBytes"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterVersion = "ClusterVersion"
        case currentBackupRateInMegaBytesPerSecond = "CurrentBackupRateInMegaBytesPerSecond"
        case dbName = "DBName"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case encrypted = "Encrypted"
        case encryptedWithHSM = "EncryptedWithHSM"
        case engineFullVersion = "EngineFullVersion"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case estimatedSecondsToCompletion = "EstimatedSecondsToCompletion"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRemainingDays = "ManualSnapshotRemainingDays"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterPasswordSecretArn = "MasterPasswordSecretArn"
        case masterPasswordSecretKmsKeyId = "MasterPasswordSecretKmsKeyId"
        case masterUsername = "MasterUsername"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case ownerAccount = "OwnerAccount"
        case port = "Port"
        case restorableNodeTypes = "RestorableNodeTypes"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotRetentionStartTime = "SnapshotRetentionStartTime"
        case snapshotType = "SnapshotType"
        case sourceRegion = "SourceRegion"
        case status = "Status"
        case tags = "Tags"
        case totalBackupSizeInMegaBytes = "TotalBackupSizeInMegaBytes"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountsWithRestoreAccess = accountsWithRestoreAccess {
            if !accountsWithRestoreAccess.isEmpty {
                var accountsWithRestoreAccessContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AccountsWithRestoreAccess"))
                for (index0, accountwithrestoreaccess0) in accountsWithRestoreAccess.enumerated() {
                    try accountsWithRestoreAccessContainer.encode(accountwithrestoreaccess0, forKey: ClientRuntime.Key("AccountWithRestoreAccess.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsWithRestoreAccessContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AccountsWithRestoreAccess"))
                try accountsWithRestoreAccessContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes {
            try container.encode(actualIncrementalBackupSizeInMegaBytes, forKey: ClientRuntime.Key("ActualIncrementalBackupSizeInMegaBytes"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let backupProgressInMegaBytes = backupProgressInMegaBytes {
            try container.encode(backupProgressInMegaBytes, forKey: ClientRuntime.Key("BackupProgressInMegaBytes"))
        }
        if let clusterCreateTime = clusterCreateTime {
            try container.encodeTimestamp(clusterCreateTime, format: .dateTime, forKey: ClientRuntime.Key("ClusterCreateTime"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let clusterVersion = clusterVersion {
            try container.encode(clusterVersion, forKey: ClientRuntime.Key("ClusterVersion"))
        }
        if let currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond {
            try container.encode(currentBackupRateInMegaBytesPerSecond, forKey: ClientRuntime.Key("CurrentBackupRateInMegaBytesPerSecond"))
        }
        if let dbName = dbName {
            try container.encode(dbName, forKey: ClientRuntime.Key("DBName"))
        }
        if let elapsedTimeInSeconds = elapsedTimeInSeconds {
            try container.encode(elapsedTimeInSeconds, forKey: ClientRuntime.Key("ElapsedTimeInSeconds"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let encryptedWithHSM = encryptedWithHSM {
            try container.encode(encryptedWithHSM, forKey: ClientRuntime.Key("EncryptedWithHSM"))
        }
        if let engineFullVersion = engineFullVersion {
            try container.encode(engineFullVersion, forKey: ClientRuntime.Key("EngineFullVersion"))
        }
        if let enhancedVpcRouting = enhancedVpcRouting {
            try container.encode(enhancedVpcRouting, forKey: ClientRuntime.Key("EnhancedVpcRouting"))
        }
        if let estimatedSecondsToCompletion = estimatedSecondsToCompletion {
            try container.encode(estimatedSecondsToCompletion, forKey: ClientRuntime.Key("EstimatedSecondsToCompletion"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let manualSnapshotRemainingDays = manualSnapshotRemainingDays {
            try container.encode(manualSnapshotRemainingDays, forKey: ClientRuntime.Key("ManualSnapshotRemainingDays"))
        }
        if let manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod {
            try container.encode(manualSnapshotRetentionPeriod, forKey: ClientRuntime.Key("ManualSnapshotRetentionPeriod"))
        }
        if let masterPasswordSecretArn = masterPasswordSecretArn {
            try container.encode(masterPasswordSecretArn, forKey: ClientRuntime.Key("MasterPasswordSecretArn"))
        }
        if let masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId {
            try container.encode(masterPasswordSecretKmsKeyId, forKey: ClientRuntime.Key("MasterPasswordSecretKmsKeyId"))
        }
        if let masterUsername = masterUsername {
            try container.encode(masterUsername, forKey: ClientRuntime.Key("MasterUsername"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: ClientRuntime.Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: ClientRuntime.Key("NumberOfNodes"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: ClientRuntime.Key("OwnerAccount"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let restorableNodeTypes = restorableNodeTypes {
            if !restorableNodeTypes.isEmpty {
                var restorableNodeTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RestorableNodeTypes"))
                for (index0, string0) in restorableNodeTypes.enumerated() {
                    try restorableNodeTypesContainer.encode(string0, forKey: ClientRuntime.Key("NodeType.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var restorableNodeTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RestorableNodeTypes"))
                try restorableNodeTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encodeTimestamp(snapshotCreateTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotCreateTime"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let snapshotRetentionStartTime = snapshotRetentionStartTime {
            try container.encodeTimestamp(snapshotRetentionStartTime, format: .dateTime, forKey: ClientRuntime.Key("SnapshotRetentionStartTime"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: ClientRuntime.Key("SnapshotType"))
        }
        if let sourceRegion = sourceRegion {
            try container.encode(sourceRegion, forKey: ClientRuntime.Key("SourceRegion"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes {
            try container.encode(totalBackupSizeInMegaBytes, forKey: ClientRuntime.Key("TotalBackupSizeInMegaBytes"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .snapshotCreateTime)
        snapshotCreateTime = snapshotCreateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let clusterCreateTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let engineFullVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineFullVersion)
        engineFullVersion = engineFullVersionDecoded
        let snapshotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotType)
        snapshotType = snapshotTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let encryptedWithHSMDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptedWithHSM)
        encryptedWithHSM = encryptedWithHSMDecoded
        if containerValues.contains(.accountsWithRestoreAccess) {
            struct KeyVal0{struct AccountWithRestoreAccess{}}
            let accountsWithRestoreAccessWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AccountWithRestoreAccess>.CodingKeys.self, forKey: .accountsWithRestoreAccess)
            if let accountsWithRestoreAccessWrappedContainer = accountsWithRestoreAccessWrappedContainer {
                let accountsWithRestoreAccessContainer = try accountsWithRestoreAccessWrappedContainer.decodeIfPresent([RedshiftClientTypes.AccountWithRestoreAccess].self, forKey: .member)
                var accountsWithRestoreAccessBuffer:[RedshiftClientTypes.AccountWithRestoreAccess]? = nil
                if let accountsWithRestoreAccessContainer = accountsWithRestoreAccessContainer {
                    accountsWithRestoreAccessBuffer = [RedshiftClientTypes.AccountWithRestoreAccess]()
                    for structureContainer0 in accountsWithRestoreAccessContainer {
                        accountsWithRestoreAccessBuffer?.append(structureContainer0)
                    }
                }
                accountsWithRestoreAccess = accountsWithRestoreAccessBuffer
            } else {
                accountsWithRestoreAccess = []
            }
        } else {
            accountsWithRestoreAccess = nil
        }
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let totalBackupSizeInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .totalBackupSizeInMegaBytes)
        totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytesDecoded
        let actualIncrementalBackupSizeInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .actualIncrementalBackupSizeInMegaBytes)
        actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytesDecoded
        let backupProgressInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .backupProgressInMegaBytes)
        backupProgressInMegaBytes = backupProgressInMegaBytesDecoded
        let currentBackupRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .currentBackupRateInMegaBytesPerSecond)
        currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecondDecoded
        let estimatedSecondsToCompletionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedSecondsToCompletion)
        estimatedSecondsToCompletion = estimatedSecondsToCompletionDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.restorableNodeTypes) {
            struct KeyVal0{struct NodeType{}}
            let restorableNodeTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeType>.CodingKeys.self, forKey: .restorableNodeTypes)
            if let restorableNodeTypesWrappedContainer = restorableNodeTypesWrappedContainer {
                let restorableNodeTypesContainer = try restorableNodeTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var restorableNodeTypesBuffer:[Swift.String]? = nil
                if let restorableNodeTypesContainer = restorableNodeTypesContainer {
                    restorableNodeTypesBuffer = [Swift.String]()
                    for stringContainer0 in restorableNodeTypesContainer {
                        restorableNodeTypesBuffer?.append(stringContainer0)
                    }
                }
                restorableNodeTypes = restorableNodeTypesBuffer
            } else {
                restorableNodeTypes = []
            }
        } else {
            restorableNodeTypes = nil
        }
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let manualSnapshotRemainingDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRemainingDays)
        manualSnapshotRemainingDays = manualSnapshotRemainingDaysDecoded
        let snapshotRetentionStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .snapshotRetentionStartTime)
        snapshotRetentionStartTime = snapshotRetentionStartTimeDecoded
        let masterPasswordSecretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretArn)
        masterPasswordSecretArn = masterPasswordSecretArnDecoded
        let masterPasswordSecretKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPasswordSecretKmsKeyId)
        masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyIdDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a snapshot.
    public struct Snapshot: Swift.Equatable {
        /// A list of the Amazon Web Services accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner.
        public var accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]?
        /// The size of the incremental backup.
        public var actualIncrementalBackupSizeInMegaBytes: Swift.Double?
        /// The Availability Zone in which the cluster was created.
        public var availabilityZone: Swift.String?
        /// The number of megabytes that have been transferred to the snapshot backup.
        public var backupProgressInMegaBytes: Swift.Double?
        /// The time (UTC) when the cluster was originally created.
        public var clusterCreateTime: ClientRuntime.Date?
        /// The identifier of the cluster for which the snapshot was taken.
        public var clusterIdentifier: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup.
        public var currentBackupRateInMegaBytesPerSecond: Swift.Double?
        /// The name of the database that was created when the cluster was created.
        public var dbName: Swift.String?
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        public var elapsedTimeInSeconds: Swift.Int?
        /// If true, the data in the snapshot is encrypted at rest.
        public var encrypted: Swift.Bool?
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        public var encryptedWithHSM: Swift.Bool?
        /// The cluster version of the cluster used to create the snapshot. For example, 1.0.15503.
        public var engineFullVersion: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup.
        public var estimatedSecondsToCompletion: Swift.Int?
        /// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the snapshot.
        public var maintenanceTrackName: Swift.String?
        /// The number of days until a manual snapshot will pass its retention period.
        public var manualSnapshotRemainingDays: Swift.Int?
        /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
        public var masterPasswordSecretArn: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret.
        public var masterPasswordSecretKmsKeyId: Swift.String?
        /// The admin user name for the cluster.
        public var masterUsername: Swift.String?
        /// The node type of the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        public var ownerAccount: Swift.String?
        /// The port that the cluster is listening on.
        public var port: Swift.Int?
        /// The list of node types that this cluster snapshot is able to restore into.
        public var restorableNodeTypes: [Swift.String]?
        /// The time (in UTC format) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        public var snapshotCreateTime: ClientRuntime.Date?
        /// The snapshot identifier that is provided in the request.
        public var snapshotIdentifier: Swift.String?
        /// A timestamp representing the start of the retention period for the snapshot.
        public var snapshotRetentionStartTime: ClientRuntime.Date?
        /// The snapshot type. Snapshots created using [CreateClusterSnapshot] and [CopyClusterSnapshot] are of type "manual".
        public var snapshotType: Swift.String?
        /// The source region from which the snapshot was copied.
        public var sourceRegion: Swift.String?
        /// The snapshot status. The value of the status depends on the API operation used:
        ///
        /// * [CreateClusterSnapshot] and [CopyClusterSnapshot] returns status as "creating".
        ///
        /// * [DescribeClusterSnapshots] returns status as "creating", "available", "final snapshot", or "failed".
        ///
        /// * [DeleteClusterSnapshot] returns status as "deleted".
        public var status: Swift.String?
        /// The list of tags for the cluster snapshot.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The size of the complete set of backup data that would be used to restore the cluster.
        public var totalBackupSizeInMegaBytes: Swift.Double?
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        public var vpcId: Swift.String?

        public init(
            accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]? = nil,
            actualIncrementalBackupSizeInMegaBytes: Swift.Double? = nil,
            availabilityZone: Swift.String? = nil,
            backupProgressInMegaBytes: Swift.Double? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            currentBackupRateInMegaBytesPerSecond: Swift.Double? = nil,
            dbName: Swift.String? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            encrypted: Swift.Bool? = nil,
            encryptedWithHSM: Swift.Bool? = nil,
            engineFullVersion: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            estimatedSecondsToCompletion: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRemainingDays: Swift.Int? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterPasswordSecretArn: Swift.String? = nil,
            masterPasswordSecretKmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            ownerAccount: Swift.String? = nil,
            port: Swift.Int? = nil,
            restorableNodeTypes: [Swift.String]? = nil,
            snapshotCreateTime: ClientRuntime.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            snapshotRetentionStartTime: ClientRuntime.Date? = nil,
            snapshotType: Swift.String? = nil,
            sourceRegion: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalBackupSizeInMegaBytes: Swift.Double? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.availabilityZone = availabilityZone
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterVersion = clusterVersion
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.dbName = dbName
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.encrypted = encrypted
            self.encryptedWithHSM = encryptedWithHSM
            self.engineFullVersion = engineFullVersion
            self.enhancedVpcRouting = enhancedVpcRouting
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRemainingDays = manualSnapshotRemainingDays
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterPasswordSecretArn = masterPasswordSecretArn
            self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
            self.masterUsername = masterUsername
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.ownerAccount = ownerAccount
            self.port = port
            self.restorableNodeTypes = restorableNodeTypes
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotRetentionStartTime = snapshotRetentionStartTime
            self.snapshotType = snapshotType
            self.sourceRegion = sourceRegion
            self.status = status
            self.tags = tags
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.vpcId = vpcId
        }
    }

}

extension RedshiftClientTypes {
    public enum SnapshotAttributeToSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createTime
        case sourceType
        case totalSize
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotAttributeToSortBy] {
            return [
                .createTime,
                .sourceType,
                .totalSize,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createTime: return "CREATE_TIME"
            case .sourceType: return "SOURCE_TYPE"
            case .totalSize: return "TOTAL_SIZE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SnapshotAttributeToSortBy(rawValue: rawValue) ?? SnapshotAttributeToSortBy.sdkUnknown(rawValue)
        }
    }
}

extension SnapshotCopyAlreadyDisabledFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotCopyAlreadyDisabledFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster already has cross-region snapshot copy disabled.
public struct SnapshotCopyAlreadyDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyAlreadyDisabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotCopyAlreadyDisabledFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotCopyAlreadyDisabledFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotCopyAlreadyEnabledFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotCopyAlreadyEnabledFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cluster already has cross-region snapshot copy enabled.
public struct SnapshotCopyAlreadyEnabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyAlreadyEnabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotCopyAlreadyEnabledFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotCopyAlreadyEnabledFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotCopyDisabledFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotCopyDisabledFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cross-region snapshot copy was temporarily disabled. Try your request again.
public struct SnapshotCopyDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyDisabledFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotCopyDisabledFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotCopyDisabledFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.SnapshotCopyGrant: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try container.encode(snapshotCopyGrantName, forKey: ClientRuntime.Key("SnapshotCopyGrantName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region. For more information about managing snapshot copy grants, go to [Amazon Redshift Database Encryption](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html) in the Amazon Redshift Cluster Management Guide.
    public struct SnapshotCopyGrant: Swift.Equatable {
        /// The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.
        public var kmsKeyId: Swift.String?
        /// The name of the snapshot copy grant.
        public var snapshotCopyGrantName: Swift.String?
        /// A list of tag instances.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            kmsKeyId: Swift.String? = nil,
            snapshotCopyGrantName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
        }
    }

}

extension SnapshotCopyGrantAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotCopyGrantAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The snapshot copy grant can't be created because a grant with the same name already exists.
public struct SnapshotCopyGrantAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantAlreadyExistsFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotCopyGrantAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotCopyGrantAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotCopyGrantNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotCopyGrantNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified snapshot copy grant can't be found. Make sure that the name is typed correctly and that the grant exists in the destination region.
public struct SnapshotCopyGrantNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotCopyGrantNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotCopyGrantNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotCopyGrantQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotCopyGrantQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Amazon Web Services account has exceeded the maximum number of snapshot copy grants in this region.
public struct SnapshotCopyGrantQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantQuotaExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotCopyGrantQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotCopyGrantQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.SnapshotErrorMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureCode = "FailureCode"
        case failureReason = "FailureReason"
        case snapshotClusterIdentifier = "SnapshotClusterIdentifier"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureCode = failureCode {
            try container.encode(failureCode, forKey: ClientRuntime.Key("FailureCode"))
        }
        if let failureReason = failureReason {
            try container.encode(failureReason, forKey: ClientRuntime.Key("FailureReason"))
        }
        if let snapshotClusterIdentifier = snapshotClusterIdentifier {
            try container.encode(snapshotClusterIdentifier, forKey: ClientRuntime.Key("SnapshotClusterIdentifier"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotClusterIdentifier)
        snapshotClusterIdentifier = snapshotClusterIdentifierDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the errors returned by a snapshot.
    public struct SnapshotErrorMessage: Swift.Equatable {
        /// The failure code for the error.
        public var failureCode: Swift.String?
        /// The text message describing the error.
        public var failureReason: Swift.String?
        /// A unique identifier for the cluster.
        public var snapshotClusterIdentifier: Swift.String?
        /// A unique identifier for the snapshot returning the error.
        public var snapshotIdentifier: Swift.String?

        public init(
            failureCode: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            snapshotClusterIdentifier: Swift.String? = nil,
            snapshotIdentifier: Swift.String? = nil
        )
        {
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }
    }

}

extension RedshiftClientTypes.SnapshotSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedClusterCount = "AssociatedClusterCount"
        case associatedClusters = "AssociatedClusters"
        case nextInvocations = "NextInvocations"
        case scheduleDefinitions = "ScheduleDefinitions"
        case scheduleDescription = "ScheduleDescription"
        case scheduleIdentifier = "ScheduleIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatedClusterCount = associatedClusterCount {
            try container.encode(associatedClusterCount, forKey: ClientRuntime.Key("AssociatedClusterCount"))
        }
        if let associatedClusters = associatedClusters {
            if !associatedClusters.isEmpty {
                var associatedClustersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedClusters"))
                for (index0, clusterassociatedtoschedule0) in associatedClusters.enumerated() {
                    try associatedClustersContainer.encode(clusterassociatedtoschedule0, forKey: ClientRuntime.Key("ClusterAssociatedToSchedule.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var associatedClustersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AssociatedClusters"))
                try associatedClustersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let nextInvocations = nextInvocations {
            if !nextInvocations.isEmpty {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                for (index0, tstamp0) in nextInvocations.enumerated() {
                    try nextInvocationsContainer.encodeTimestamp(tstamp0, format: .dateTime, forKey: ClientRuntime.Key("SnapshotTime.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var nextInvocationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NextInvocations"))
                try nextInvocationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleDefinitions = scheduleDefinitions {
            if !scheduleDefinitions.isEmpty {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                for (index0, string0) in scheduleDefinitions.enumerated() {
                    try scheduleDefinitionsContainer.encode(string0, forKey: ClientRuntime.Key("ScheduleDefinition.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scheduleDefinitionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduleDefinitions"))
                try scheduleDefinitionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let scheduleDescription = scheduleDescription {
            try container.encode(scheduleDescription, forKey: ClientRuntime.Key("ScheduleDescription"))
        }
        if let scheduleIdentifier = scheduleIdentifier {
            try container.encode(scheduleIdentifier, forKey: ClientRuntime.Key("ScheduleIdentifier"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.scheduleDefinitions) {
            struct KeyVal0{struct ScheduleDefinition{}}
            let scheduleDefinitionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduleDefinition>.CodingKeys.self, forKey: .scheduleDefinitions)
            if let scheduleDefinitionsWrappedContainer = scheduleDefinitionsWrappedContainer {
                let scheduleDefinitionsContainer = try scheduleDefinitionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduleDefinitionsBuffer:[Swift.String]? = nil
                if let scheduleDefinitionsContainer = scheduleDefinitionsContainer {
                    scheduleDefinitionsBuffer = [Swift.String]()
                    for stringContainer0 in scheduleDefinitionsContainer {
                        scheduleDefinitionsBuffer?.append(stringContainer0)
                    }
                }
                scheduleDefinitions = scheduleDefinitionsBuffer
            } else {
                scheduleDefinitions = []
            }
        } else {
            scheduleDefinitions = nil
        }
        let scheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleIdentifier)
        scheduleIdentifier = scheduleIdentifierDecoded
        let scheduleDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleDescription)
        scheduleDescription = scheduleDescriptionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.nextInvocations) {
            struct KeyVal0{struct SnapshotTime{}}
            let nextInvocationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotTime>.CodingKeys.self, forKey: .nextInvocations)
            if let nextInvocationsWrappedContainer = nextInvocationsWrappedContainer {
                let nextInvocationsContainer = try nextInvocationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nextInvocationsBuffer:[ClientRuntime.Date]? = nil
                if let nextInvocationsContainer = nextInvocationsContainer {
                    nextInvocationsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in nextInvocationsContainer {
                        try nextInvocationsBuffer?.append(nextInvocationsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                nextInvocations = nextInvocationsBuffer
            } else {
                nextInvocations = []
            }
        } else {
            nextInvocations = nil
        }
        let associatedClusterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .associatedClusterCount)
        associatedClusterCount = associatedClusterCountDecoded
        if containerValues.contains(.associatedClusters) {
            struct KeyVal0{struct ClusterAssociatedToSchedule{}}
            let associatedClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterAssociatedToSchedule>.CodingKeys.self, forKey: .associatedClusters)
            if let associatedClustersWrappedContainer = associatedClustersWrappedContainer {
                let associatedClustersContainer = try associatedClustersWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterAssociatedToSchedule].self, forKey: .member)
                var associatedClustersBuffer:[RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil
                if let associatedClustersContainer = associatedClustersContainer {
                    associatedClustersBuffer = [RedshiftClientTypes.ClusterAssociatedToSchedule]()
                    for structureContainer0 in associatedClustersContainer {
                        associatedClustersBuffer?.append(structureContainer0)
                    }
                }
                associatedClusters = associatedClustersBuffer
            } else {
                associatedClusters = []
            }
        } else {
            associatedClusters = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
    public struct SnapshotSchedule: Swift.Equatable {
        /// The number of clusters associated with the schedule.
        public var associatedClusterCount: Swift.Int?
        /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
        public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
        ///
        public var nextInvocations: [ClientRuntime.Date]?
        /// A list of ScheduleDefinitions.
        public var scheduleDefinitions: [Swift.String]?
        /// The description of the schedule.
        public var scheduleDescription: Swift.String?
        /// A unique identifier for the schedule.
        public var scheduleIdentifier: Swift.String?
        /// An optional set of tags describing the schedule.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            associatedClusterCount: Swift.Int? = nil,
            associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
            nextInvocations: [ClientRuntime.Date]? = nil,
            scheduleDefinitions: [Swift.String]? = nil,
            scheduleDescription: Swift.String? = nil,
            scheduleIdentifier: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.associatedClusterCount = associatedClusterCount
            self.associatedClusters = associatedClusters
            self.nextInvocations = nextInvocations
            self.scheduleDefinitions = scheduleDefinitions
            self.scheduleDescription = scheduleDescription
            self.scheduleIdentifier = scheduleIdentifier
            self.tags = tags
        }
    }

}

extension SnapshotScheduleAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotScheduleAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified snapshot schedule already exists.
public struct SnapshotScheduleAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotScheduleAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotScheduleAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotScheduleNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotScheduleNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// We could not find the specified snapshot schedule.
public struct SnapshotScheduleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotScheduleNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotScheduleNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotScheduleQuotaExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotScheduleQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have exceeded the quota of snapshot schedules.
public struct SnapshotScheduleQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleQuotaExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotScheduleQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotScheduleQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotScheduleUpdateInProgressFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotScheduleUpdateInProgressFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified snapshot schedule is already being updated.
public struct SnapshotScheduleUpdateInProgressFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleUpdateInProgress" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SnapshotScheduleUpdateInProgressFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotScheduleUpdateInProgressFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.SnapshotSortingEntity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let sortOrder = sortOrder {
            try container.encode(sortOrder, forKey: ClientRuntime.Key("SortOrder"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.SnapshotAttributeToSortBy.self, forKey: .attribute)
        attribute = attributeDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.SortByOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a sorting entity
    public struct SnapshotSortingEntity: Swift.Equatable {
        /// The category for sorting the snapshots.
        /// This member is required.
        public var attribute: RedshiftClientTypes.SnapshotAttributeToSortBy?
        /// The order for listing the attributes.
        public var sortOrder: RedshiftClientTypes.SortByOrder?

        public init(
            attribute: RedshiftClientTypes.SnapshotAttributeToSortBy? = nil,
            sortOrder: RedshiftClientTypes.SortByOrder? = nil
        )
        {
            self.attribute = attribute
            self.sortOrder = sortOrder
        }
    }

}

extension RedshiftClientTypes {
    public enum SortByOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortByOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASC"
            case .descending: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortByOrder(rawValue: rawValue) ?? SortByOrder.sdkUnknown(rawValue)
        }
    }
}

extension SourceNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SourceNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified Amazon Redshift event source could not be found.
public struct SourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SourceNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SourceNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cluster
        case clusterParameterGroup
        case clusterSecurityGroup
        case clusterSnapshot
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .cluster,
                .clusterParameterGroup,
                .clusterSecurityGroup,
                .clusterSnapshot,
                .scheduledAction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "cluster"
            case .clusterParameterGroup: return "cluster-parameter-group"
            case .clusterSecurityGroup: return "cluster-security-group"
            case .clusterSnapshot: return "cluster-snapshot"
            case .scheduledAction: return "scheduled-action"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.Subnet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetIdentifier = "SubnetIdentifier"
        case subnetStatus = "SubnetStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subnetAvailabilityZone = subnetAvailabilityZone {
            try container.encode(subnetAvailabilityZone, forKey: ClientRuntime.Key("SubnetAvailabilityZone"))
        }
        if let subnetIdentifier = subnetIdentifier {
            try container.encode(subnetIdentifier, forKey: ClientRuntime.Key("SubnetIdentifier"))
        }
        if let subnetStatus = subnetStatus {
            try container.encode(subnetStatus, forKey: ClientRuntime.Key("SubnetStatus"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetIdentifier)
        subnetIdentifier = subnetIdentifierDecoded
        let subnetAvailabilityZoneDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AvailabilityZone.self, forKey: .subnetAvailabilityZone)
        subnetAvailabilityZone = subnetAvailabilityZoneDecoded
        let subnetStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetStatus)
        subnetStatus = subnetStatusDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes a subnet.
    public struct Subnet: Swift.Equatable {
        ///
        public var subnetAvailabilityZone: RedshiftClientTypes.AvailabilityZone?
        /// The identifier of the subnet.
        public var subnetIdentifier: Swift.String?
        /// The status of the subnet.
        public var subnetStatus: Swift.String?

        public init(
            subnetAvailabilityZone: RedshiftClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetStatus: Swift.String? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetStatus = subnetStatus
        }
    }

}

extension SubnetAlreadyInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SubnetAlreadyInUseBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A specified subnet is already in use by another cluster.
public struct SubnetAlreadyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetAlreadyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SubnetAlreadyInUseBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubnetAlreadyInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubscriptionAlreadyExistFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SubscriptionAlreadyExistFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// There is already an existing event notification subscription with the specified name.
public struct SubscriptionAlreadyExistFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionAlreadyExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SubscriptionAlreadyExistFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubscriptionAlreadyExistFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubscriptionCategoryNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SubscriptionCategoryNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The value specified for the event category was not one of the allowed values, or it specified a category that does not apply to the specified source type. The allowed values are Configuration, Management, Monitoring, and Security.
public struct SubscriptionCategoryNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionCategoryNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SubscriptionCategoryNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubscriptionCategoryNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubscriptionEventIdNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SubscriptionEventIdNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An Amazon Redshift event with the specified event ID does not exist.
public struct SubscriptionEventIdNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionEventIdNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SubscriptionEventIdNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubscriptionEventIdNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubscriptionNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SubscriptionNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An Amazon Redshift event notification subscription with the specified name does not exist.
public struct SubscriptionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SubscriptionNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubscriptionNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubscriptionSeverityNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<SubscriptionSeverityNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The value specified for the event severity was not one of the allowed values, or it specified a severity that does not apply to the specified source type. The allowed values are ERROR and INFO.
public struct SubscriptionSeverityNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionSeverityNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct SubscriptionSeverityNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubscriptionSeverityNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.SupportedOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationName = "OperationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let operationName = operationName {
            try container.encode(operationName, forKey: ClientRuntime.Key("OperationName"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationName)
        operationName = operationNameDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the operations that are allowed on a maintenance track.
    public struct SupportedOperation: Swift.Equatable {
        /// A list of the supported operations.
        public var operationName: Swift.String?

        public init(
            operationName: Swift.String? = nil
        )
        {
            self.operationName = operationName
        }
    }

}

extension RedshiftClientTypes.SupportedPlatform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension RedshiftClientTypes {
    /// A list of supported platforms for orderable clusters.
    public struct SupportedPlatform: Swift.Equatable {
        ///
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension TableLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TableLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of tables in the cluster exceeds the limit for the requested new cluster node type.
public struct TableLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct TableLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TableLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TableRestoreNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TableRestoreNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified TableRestoreRequestId value was not found.
public struct TableRestoreNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableRestoreNotFoundFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct TableRestoreNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TableRestoreNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.TableRestoreStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case message = "Message"
        case newTableName = "NewTableName"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case requestTime = "RequestTime"
        case snapshotIdentifier = "SnapshotIdentifier"
        case sourceDatabaseName = "SourceDatabaseName"
        case sourceSchemaName = "SourceSchemaName"
        case sourceTableName = "SourceTableName"
        case status = "Status"
        case tableRestoreRequestId = "TableRestoreRequestId"
        case targetDatabaseName = "TargetDatabaseName"
        case targetSchemaName = "TargetSchemaName"
        case totalDataInMegaBytes = "TotalDataInMegaBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let newTableName = newTableName {
            try container.encode(newTableName, forKey: ClientRuntime.Key("NewTableName"))
        }
        if let progressInMegaBytes = progressInMegaBytes {
            try container.encode(progressInMegaBytes, forKey: ClientRuntime.Key("ProgressInMegaBytes"))
        }
        if let requestTime = requestTime {
            try container.encodeTimestamp(requestTime, format: .dateTime, forKey: ClientRuntime.Key("RequestTime"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: ClientRuntime.Key("SnapshotIdentifier"))
        }
        if let sourceDatabaseName = sourceDatabaseName {
            try container.encode(sourceDatabaseName, forKey: ClientRuntime.Key("SourceDatabaseName"))
        }
        if let sourceSchemaName = sourceSchemaName {
            try container.encode(sourceSchemaName, forKey: ClientRuntime.Key("SourceSchemaName"))
        }
        if let sourceTableName = sourceTableName {
            try container.encode(sourceTableName, forKey: ClientRuntime.Key("SourceTableName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tableRestoreRequestId = tableRestoreRequestId {
            try container.encode(tableRestoreRequestId, forKey: ClientRuntime.Key("TableRestoreRequestId"))
        }
        if let targetDatabaseName = targetDatabaseName {
            try container.encode(targetDatabaseName, forKey: ClientRuntime.Key("TargetDatabaseName"))
        }
        if let targetSchemaName = targetSchemaName {
            try container.encode(targetSchemaName, forKey: ClientRuntime.Key("TargetSchemaName"))
        }
        if let totalDataInMegaBytes = totalDataInMegaBytes {
            try container.encode(totalDataInMegaBytes, forKey: ClientRuntime.Key("TotalDataInMegaBytes"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableRestoreRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableRestoreRequestId)
        tableRestoreRequestId = tableRestoreRequestIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.TableRestoreStatusType.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .requestTime)
        requestTime = requestTimeDecoded
        let progressInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressInMegaBytes)
        progressInMegaBytes = progressInMegaBytesDecoded
        let totalDataInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalDataInMegaBytes)
        totalDataInMegaBytes = totalDataInMegaBytesDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let sourceDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDatabaseName)
        sourceDatabaseName = sourceDatabaseNameDecoded
        let sourceSchemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSchemaName)
        sourceSchemaName = sourceSchemaNameDecoded
        let sourceTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableName)
        sourceTableName = sourceTableNameDecoded
        let targetDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetDatabaseName)
        targetDatabaseName = targetDatabaseNameDecoded
        let targetSchemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetSchemaName)
        targetSchemaName = targetSchemaNameDecoded
        let newTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newTableName)
        newTableName = newTableNameDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the status of a [RestoreTableFromClusterSnapshot] operation.
    public struct TableRestoreStatus: Swift.Equatable {
        /// The identifier of the Amazon Redshift cluster that the table is being restored to.
        public var clusterIdentifier: Swift.String?
        /// A description of the status of the table restore request. Status values include SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS.
        public var message: Swift.String?
        /// The name of the table to create as a result of the table restore request.
        public var newTableName: Swift.String?
        /// The amount of data restored to the new table so far, in megabytes (MB).
        public var progressInMegaBytes: Swift.Int?
        /// The time that the table restore request was made, in Universal Coordinated Time (UTC).
        public var requestTime: ClientRuntime.Date?
        /// The identifier of the snapshot that the table is being restored from.
        public var snapshotIdentifier: Swift.String?
        /// The name of the source database that contains the table being restored.
        public var sourceDatabaseName: Swift.String?
        /// The name of the source schema that contains the table being restored.
        public var sourceSchemaName: Swift.String?
        /// The name of the source table being restored.
        public var sourceTableName: Swift.String?
        /// A value that describes the current state of the table restore request. Valid Values: SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS
        public var status: RedshiftClientTypes.TableRestoreStatusType?
        /// The unique identifier for the table restore request.
        public var tableRestoreRequestId: Swift.String?
        /// The name of the database to restore the table to.
        public var targetDatabaseName: Swift.String?
        /// The name of the schema to restore the table to.
        public var targetSchemaName: Swift.String?
        /// The total amount of data to restore to the new table, in megabytes (MB).
        public var totalDataInMegaBytes: Swift.Int?

        public init(
            clusterIdentifier: Swift.String? = nil,
            message: Swift.String? = nil,
            newTableName: Swift.String? = nil,
            progressInMegaBytes: Swift.Int? = nil,
            requestTime: ClientRuntime.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            sourceDatabaseName: Swift.String? = nil,
            sourceSchemaName: Swift.String? = nil,
            sourceTableName: Swift.String? = nil,
            status: RedshiftClientTypes.TableRestoreStatusType? = nil,
            tableRestoreRequestId: Swift.String? = nil,
            targetDatabaseName: Swift.String? = nil,
            targetSchemaName: Swift.String? = nil,
            totalDataInMegaBytes: Swift.Int? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.message = message
            self.newTableName = newTableName
            self.progressInMegaBytes = progressInMegaBytes
            self.requestTime = requestTime
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceSchemaName = sourceSchemaName
            self.sourceTableName = sourceTableName
            self.status = status
            self.tableRestoreRequestId = tableRestoreRequestId
            self.targetDatabaseName = targetDatabaseName
            self.targetSchemaName = targetSchemaName
            self.totalDataInMegaBytes = totalDataInMegaBytes
        }
    }

}

extension RedshiftClientTypes {
    public enum TableRestoreStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case failed
        case inProgress
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [TableRestoreStatusType] {
            return [
                .canceled,
                .failed,
                .inProgress,
                .pending,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TableRestoreStatusType(rawValue: rawValue) ?? TableRestoreStatusType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension RedshiftClientTypes {
    /// A tag consisting of a name/value pair for a resource.
    public struct Tag: Swift.Equatable {
        /// The key, or name, for the resource tag.
        public var key: Swift.String?
        /// The value for the resource tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagLimitExceededFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TagLimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have exceeded the number of tags allowed.
public struct TagLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagLimitExceededFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct TagLimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagLimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes.TaggedResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case tag = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let tag = tag {
            try container.encode(tag, forKey: ClientRuntime.Key("Tag"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.Tag.self, forKey: .tag)
        tag = tagDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension RedshiftClientTypes {
    /// A tag and its associated resource.
    public struct TaggedResource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) with which the tag is associated, for example: arn:aws:redshift:us-east-2:123456789:cluster:t1.
        public var resourceName: Swift.String?
        /// The type of resource with which the tag is associated. Valid resource types are:
        ///
        /// * Cluster
        ///
        /// * CIDR/IP
        ///
        /// * EC2 security group
        ///
        /// * Snapshot
        ///
        /// * Cluster security group
        ///
        /// * Subnet group
        ///
        /// * HSM connection
        ///
        /// * HSM certificate
        ///
        /// * Parameter group
        ///
        ///
        /// For more information about Amazon Redshift resource types and constructing ARNs, go to [Constructing an Amazon Redshift Amazon Resource Name (ARN)](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions) in the Amazon Redshift Cluster Management Guide.
        public var resourceType: Swift.String?
        /// The tag for the resource.
        public var tag: RedshiftClientTypes.Tag?

        public init(
            resourceName: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            tag: RedshiftClientTypes.Tag? = nil
        )
        {
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.tag = tag
        }
    }

}

extension UnauthorizedOperation {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UnauthorizedOperationBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your account is not authorized to perform the requested operation.
public struct UnauthorizedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedOperation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UnauthorizedOperationBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnauthorizedOperationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnauthorizedPartnerIntegrationFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UnauthorizedPartnerIntegrationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The partner integration is not authorized.
public struct UnauthorizedPartnerIntegrationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedPartnerIntegration" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UnauthorizedPartnerIntegrationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnauthorizedPartnerIntegrationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnknownSnapshotCopyRegionFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UnknownSnapshotCopyRegionFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified region is incorrect or does not exist.
public struct UnknownSnapshotCopyRegionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnknownSnapshotCopyRegionFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UnknownSnapshotCopyRegionFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnknownSnapshotCopyRegionFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedOperationFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UnsupportedOperationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The requested operation isn't supported.
public struct UnsupportedOperationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UnsupportedOperationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedOperationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedOptionFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UnsupportedOptionFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A request option was specified that is not supported.
public struct UnsupportedOptionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOptionFault" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UnsupportedOptionFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedOptionFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UpdatePartnerStatusInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let databaseName = databaseName {
            try container.encode(databaseName, forKey: ClientRuntime.Key("DatabaseName"))
        }
        if let partnerName = partnerName {
            try container.encode(partnerName, forKey: ClientRuntime.Key("PartnerName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        try container.encode("UpdatePartnerStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2012-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdatePartnerStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdatePartnerStatusInput: Swift.Equatable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster whose partner integration status is being updated.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database whose partner integration status is being updated.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner whose integration status is being updated.
    /// This member is required.
    public var partnerName: Swift.String?
    /// The value of the updated status.
    /// This member is required.
    public var status: RedshiftClientTypes.PartnerIntegrationStatus?
    /// The status message provided by the partner.
    public var statusMessage: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        status: RedshiftClientTypes.PartnerIntegrationStatus? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
        self.status = status
        self.statusMessage = statusMessage
    }
}

struct UpdatePartnerStatusInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let clusterIdentifier: Swift.String?
    let databaseName: Swift.String?
    let partnerName: Swift.String?
    let status: RedshiftClientTypes.PartnerIntegrationStatus?
    let statusMessage: Swift.String?
}

extension UpdatePartnerStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.PartnerIntegrationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

extension UpdatePartnerStatusOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: UpdatePartnerStatusOutputBody = try responseDecoder.decode(responseBody: data)
            self.databaseName = output.databaseName
            self.partnerName = output.partnerName
        } else {
            self.databaseName = nil
            self.partnerName = nil
        }
    }
}

public struct UpdatePartnerStatusOutput: Swift.Equatable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

struct UpdatePartnerStatusOutputBody: Swift.Equatable {
    let databaseName: Swift.String?
    let partnerName: Swift.String?
}

extension UpdatePartnerStatusOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdatePartnerStatusResult"))
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
    }
}

enum UpdatePartnerStatusOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restXMLError = try await AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        switch restXMLError.errorCode {
            case "ClusterNotFound": return try await ClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "PartnerNotFound": return try await PartnerNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnauthorizedPartnerIntegration": return try await UnauthorizedPartnerIntegrationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            case "UnsupportedOperation": return try await UnsupportedOperationFault(httpResponse: httpResponse, decoder: decoder, message: restXMLError.message, requestID: restXMLError.requestId)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restXMLError.message, requestID: restXMLError.requestId, typeName: restXMLError.errorCode)
        }
    }
}

extension RedshiftClientTypes.UpdateTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseVersion = "DatabaseVersion"
        case maintenanceTrackName = "MaintenanceTrackName"
        case supportedOperations = "SupportedOperations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseVersion = databaseVersion {
            try container.encode(databaseVersion, forKey: ClientRuntime.Key("DatabaseVersion"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let supportedOperations = supportedOperations {
            if !supportedOperations.isEmpty {
                var supportedOperationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedOperations"))
                for (index0, supportedoperation0) in supportedOperations.enumerated() {
                    try supportedOperationsContainer.encode(supportedoperation0, forKey: ClientRuntime.Key("SupportedOperation.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedOperationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedOperations"))
                try supportedOperationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let databaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseVersion)
        databaseVersion = databaseVersionDecoded
        if containerValues.contains(.supportedOperations) {
            struct KeyVal0{struct SupportedOperation{}}
            let supportedOperationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SupportedOperation>.CodingKeys.self, forKey: .supportedOperations)
            if let supportedOperationsWrappedContainer = supportedOperationsWrappedContainer {
                let supportedOperationsContainer = try supportedOperationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.SupportedOperation].self, forKey: .member)
                var supportedOperationsBuffer:[RedshiftClientTypes.SupportedOperation]? = nil
                if let supportedOperationsContainer = supportedOperationsContainer {
                    supportedOperationsBuffer = [RedshiftClientTypes.SupportedOperation]()
                    for structureContainer0 in supportedOperationsContainer {
                        supportedOperationsBuffer?.append(structureContainer0)
                    }
                }
                supportedOperations = supportedOperationsBuffer
            } else {
                supportedOperations = []
            }
        } else {
            supportedOperations = nil
        }
    }
}

extension RedshiftClientTypes {
    /// A maintenance track that you can switch the current track to.
    public struct UpdateTarget: Swift.Equatable {
        /// The cluster version for the new maintenance track.
        public var databaseVersion: Swift.String?
        /// The name of the new maintenance track.
        public var maintenanceTrackName: Swift.String?
        /// A list of operations supported by the maintenance track.
        public var supportedOperations: [RedshiftClientTypes.SupportedOperation]?

        public init(
            databaseVersion: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            supportedOperations: [RedshiftClientTypes.SupportedOperation]? = nil
        )
        {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.supportedOperations = supportedOperations
        }
    }

}

extension RedshiftClientTypes.UsageLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount = "Amount"
        case breachAction = "BreachAction"
        case clusterIdentifier = "ClusterIdentifier"
        case featureType = "FeatureType"
        case limitType = "LimitType"
        case period = "Period"
        case tags = "Tags"
        case usageLimitId = "UsageLimitId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let amount = amount {
            try container.encode(amount, forKey: ClientRuntime.Key("Amount"))
        }
        if let breachAction = breachAction {
            try container.encode(breachAction, forKey: ClientRuntime.Key("BreachAction"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let featureType = featureType {
            try container.encode(featureType, forKey: ClientRuntime.Key("FeatureType"))
        }
        if let limitType = limitType {
            try container.encode(limitType, forKey: ClientRuntime.Key("LimitType"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let usageLimitId = usageLimitId {
            try container.encode(usageLimitId, forKey: ClientRuntime.Key("UsageLimitId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let featureTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitFeatureType.self, forKey: .featureType)
        featureType = featureTypeDecoded
        let limitTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitLimitType.self, forKey: .limitType)
        limitType = limitTypeDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension RedshiftClientTypes {
    /// Describes a usage limit object for a cluster.
    public struct UsageLimit: Swift.Equatable {
        /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
        public var amount: Swift.Int?
        /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
        ///
        /// * log - To log an event in a system table. The default is log.
        ///
        /// * emit-metric - To emit CloudWatch metrics.
        ///
        /// * disable - To disable the feature until the next usage period begins.
        public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
        /// The identifier of the cluster with a usage limit.
        public var clusterIdentifier: Swift.String?
        /// The Amazon Redshift feature to which the limit applies.
        public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
        /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
        public var limitType: RedshiftClientTypes.UsageLimitLimitType?
        /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
        public var period: RedshiftClientTypes.UsageLimitPeriod?
        /// A list of tag instances.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The identifier of the usage limit.
        public var usageLimitId: Swift.String?

        public init(
            amount: Swift.Int? = nil,
            breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
            clusterIdentifier: Swift.String? = nil,
            featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
            limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
            period: RedshiftClientTypes.UsageLimitPeriod? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            usageLimitId: Swift.String? = nil
        )
        {
            self.amount = amount
            self.breachAction = breachAction
            self.clusterIdentifier = clusterIdentifier
            self.featureType = featureType
            self.limitType = limitType
            self.period = period
            self.tags = tags
            self.usageLimitId = usageLimitId
        }
    }

}

extension UsageLimitAlreadyExistsFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UsageLimitAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The usage limit already exists.
public struct UsageLimitAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsageLimitAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UsageLimitAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UsageLimitAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitBreachAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disable
        case emitMetric
        case log
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitBreachAction] {
            return [
                .disable,
                .emitMetric,
                .log,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disable: return "disable"
            case .emitMetric: return "emit-metric"
            case .log: return "log"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitBreachAction(rawValue: rawValue) ?? UsageLimitBreachAction.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitFeatureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case concurrencyScaling
        case crossRegionDatasharing
        case spectrum
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitFeatureType] {
            return [
                .concurrencyScaling,
                .crossRegionDatasharing,
                .spectrum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .concurrencyScaling: return "concurrency-scaling"
            case .crossRegionDatasharing: return "cross-region-datasharing"
            case .spectrum: return "spectrum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitFeatureType(rawValue: rawValue) ?? UsageLimitFeatureType.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitLimitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dataScanned
        case time
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitLimitType] {
            return [
                .dataScanned,
                .time,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dataScanned: return "data-scanned"
            case .time: return "time"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitLimitType(rawValue: rawValue) ?? UsageLimitLimitType.sdkUnknown(rawValue)
        }
    }
}

extension UsageLimitNotFoundFault {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<UsageLimitNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.error.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The usage limit identifier can't be found.
public struct UsageLimitNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsageLimitNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UsageLimitNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UsageLimitNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RedshiftClientTypes {
    public enum UsageLimitPeriod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case daily
        case monthly
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitPeriod] {
            return [
                .daily,
                .monthly,
                .weekly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .daily: return "daily"
            case .monthly: return "monthly"
            case .weekly: return "weekly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UsageLimitPeriod(rawValue: rawValue) ?? UsageLimitPeriod.sdkUnknown(rawValue)
        }
    }
}

extension RedshiftClientTypes.VpcEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInterfaces = "NetworkInterfaces"
        case vpcEndpointId = "VpcEndpointId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let networkInterfaces = networkInterfaces {
            if !networkInterfaces.isEmpty {
                var networkInterfacesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkInterfaces"))
                for (index0, networkinterface0) in networkInterfaces.enumerated() {
                    try networkInterfacesContainer.encode(networkinterface0, forKey: ClientRuntime.Key("NetworkInterface.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var networkInterfacesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NetworkInterfaces"))
                try networkInterfacesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let vpcEndpointId = vpcEndpointId {
            try container.encode(vpcEndpointId, forKey: ClientRuntime.Key("VpcEndpointId"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        if containerValues.contains(.networkInterfaces) {
            struct KeyVal0{struct NetworkInterface{}}
            let networkInterfacesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NetworkInterface>.CodingKeys.self, forKey: .networkInterfaces)
            if let networkInterfacesWrappedContainer = networkInterfacesWrappedContainer {
                let networkInterfacesContainer = try networkInterfacesWrappedContainer.decodeIfPresent([RedshiftClientTypes.NetworkInterface].self, forKey: .member)
                var networkInterfacesBuffer:[RedshiftClientTypes.NetworkInterface]? = nil
                if let networkInterfacesContainer = networkInterfacesContainer {
                    networkInterfacesBuffer = [RedshiftClientTypes.NetworkInterface]()
                    for structureContainer0 in networkInterfacesContainer {
                        networkInterfacesBuffer?.append(structureContainer0)
                    }
                }
                networkInterfaces = networkInterfacesBuffer
            } else {
                networkInterfaces = []
            }
        } else {
            networkInterfaces = nil
        }
    }
}

extension RedshiftClientTypes {
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public struct VpcEndpoint: Swift.Equatable {
        /// One or more network interfaces of the endpoint. Also known as an interface endpoint.
        public var networkInterfaces: [RedshiftClientTypes.NetworkInterface]?
        /// The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
        public var vpcEndpointId: Swift.String?
        /// The VPC identifier that the endpoint is associated.
        public var vpcId: Swift.String?

        public init(
            networkInterfaces: [RedshiftClientTypes.NetworkInterface]? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.networkInterfaces = networkInterfaces
            self.vpcEndpointId = vpcEndpointId
            self.vpcId = vpcId
        }
    }

}

extension RedshiftClientTypes.VpcSecurityGroupMembership: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case vpcSecurityGroupId = "VpcSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let vpcSecurityGroupId = vpcSecurityGroupId {
            try container.encode(vpcSecurityGroupId, forKey: ClientRuntime.Key("VpcSecurityGroupId"))
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcSecurityGroupId)
        vpcSecurityGroupId = vpcSecurityGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension RedshiftClientTypes {
    /// Describes the members of a VPC security group.
    public struct VpcSecurityGroupMembership: Swift.Equatable {
        /// The status of the VPC security group.
        public var status: Swift.String?
        /// The identifier of the VPC security group.
        public var vpcSecurityGroupId: Swift.String?

        public init(
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }

}

extension RedshiftClientTypes {
    public enum ZeroETLIntegrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case modifying
        case needsAttention
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [ZeroETLIntegrationStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .modifying,
                .needsAttention,
                .syncing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .failed: return "failed"
            case .modifying: return "modifying"
            case .needsAttention: return "needs_attention"
            case .syncing: return "syncing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ZeroETLIntegrationStatus(rawValue: rawValue) ?? ZeroETLIntegrationStatus.sdkUnknown(rawValue)
        }
    }
}
