//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
@_spi(SmithyReadWrite) import class SmithyFormURL.Writer
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.timestampReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSQueryError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct CreateTagsOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteClusterParameterGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteClusterSecurityGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteClusterSubnetGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteCustomDomainAssociationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteEventSubscriptionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteHsmClientCertificateOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteHsmConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteRedshiftIdcApplicationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourcePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteScheduledActionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSnapshotCopyGrantOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSnapshotScheduleOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteTagsOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteUsageLimitOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeStorageInput: Swift.Sendable {

    public init() { }
}

public struct ModifyClusterSnapshotScheduleOutput: Swift.Sendable {

    public init() { }
}

/// Your request cannot be completed because a dependent internal service is temporarily unavailable. Wait 30 to 60 seconds and try again.
public struct DependentServiceUnavailableFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceUnavailableFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Indicates that the Reserved Node being exchanged is not in an active state.
public struct InvalidReservedNodeStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidReservedNodeState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// User already has a reservation with the given identifier.
public struct ReservedNodeAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Indicates that the reserved node has already been exchanged.
public struct ReservedNodeAlreadyMigratedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeAlreadyMigrated" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified reserved compute node not found.
public struct ReservedNodeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Specified offering does not exist.
public struct ReservedNodeOfferingNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeOfferingNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested operation isn't supported.
public struct UnsupportedOperationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AcceptReservedNodeExchangeInput: Swift.Sendable {
    /// A string representing the node identifier of the DC1 Reserved Node to be exchanged.
    /// This member is required.
    public var reservedNodeId: Swift.String?
    /// The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling [GetReservedNodeExchangeOfferings]
    /// This member is required.
    public var targetReservedNodeOfferingId: Swift.String?

    public init(
        reservedNodeId: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.reservedNodeId = reservedNodeId
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
    }
}

extension RedshiftClientTypes {

    /// Describes a recurring charge.
    public struct RecurringCharge: Swift.Sendable {
        /// The amount charged per the period of time specified by the recurring charge frequency.
        public var recurringChargeAmount: Swift.Double?
        /// The frequency at which the recurring charge amount is applied.
        public var recurringChargeFrequency: Swift.String?

        public init(
            recurringChargeAmount: Swift.Double? = nil,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }
}

extension RedshiftClientTypes {

    public enum ReservedNodeOfferingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case regular
        case upgradable
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeOfferingType] {
            return [
                .regular,
                .upgradable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .regular: return "Regular"
            case .upgradable: return "Upgradable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
    public struct ReservedNode: Swift.Sendable {
        /// The currency code for the reserved cluster.
        public var currencyCode: Swift.String?
        /// The duration of the node reservation in seconds.
        public var duration: Swift.Int?
        /// The fixed cost Amazon Redshift charges you for this reserved node.
        public var fixedPrice: Swift.Double?
        /// The number of reserved compute nodes.
        public var nodeCount: Swift.Int?
        /// The node type of the reserved node.
        public var nodeType: Swift.String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public var offeringType: Swift.String?
        /// The recurring charges for the reserved node.
        public var recurringCharges: [RedshiftClientTypes.RecurringCharge]?
        /// The unique identifier for the reservation.
        public var reservedNodeId: Swift.String?
        /// The identifier for the reserved node offering.
        public var reservedNodeOfferingId: Swift.String?
        ///
        public var reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType?
        /// The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.
        public var startTime: Foundation.Date?
        /// The state of the reserved compute node. Possible Values:
        ///
        /// * pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.
        ///
        /// * active-This reserved node is owned by the caller and is available for use.
        ///
        /// * payment-failed-Payment failed for the purchase attempt.
        ///
        /// * retired-The reserved node is no longer available.
        ///
        /// * exchanging-The owner is exchanging the reserved node for another reserved node.
        public var state: Swift.String?
        /// The hourly rate Amazon Redshift charges you for this reserved node.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            nodeCount: Swift.Int? = nil,
            nodeType: Swift.String? = nil,
            offeringType: Swift.String? = nil,
            recurringCharges: [RedshiftClientTypes.RecurringCharge]? = nil,
            reservedNodeId: Swift.String? = nil,
            reservedNodeOfferingId: Swift.String? = nil,
            reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType? = nil,
            startTime: Foundation.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.nodeCount = nodeCount
            self.nodeType = nodeType
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.reservedNodeId = reservedNodeId
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }
}

public struct AcceptReservedNodeExchangeOutput: Swift.Sendable {
    ///
    public var exchangedReservedNode: RedshiftClientTypes.ReservedNode?

    public init(
        exchangedReservedNode: RedshiftClientTypes.ReservedNode? = nil
    )
    {
        self.exchangedReservedNode = exchangedReservedNode
    }
}

/// You are not authorized to access the cluster.
public struct AccessToClusterDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessToClusterDenied" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The owner of the specified snapshot has not authorized your account to access the snapshot.
public struct AccessToSnapshotDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessToSnapshotDenied" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    /// Describes an attribute value.
    public struct AttributeValueTarget: Swift.Sendable {
        /// The value of the attribute.
        public var attributeValue: Swift.String?

        public init(
            attributeValue: Swift.String? = nil
        )
        {
            self.attributeValue = attributeValue
        }
    }
}

extension RedshiftClientTypes {

    /// A name value pair that describes an aspect of an account.
    public struct AccountAttribute: Swift.Sendable {
        /// The name of the attribute.
        public var attributeName: Swift.String?
        /// A list of attribute values.
        public var attributeValues: [RedshiftClientTypes.AttributeValueTarget]?

        public init(
            attributeName: Swift.String? = nil,
            attributeValues: [RedshiftClientTypes.AttributeValueTarget]? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }
    }
}

extension RedshiftClientTypes {

    /// Describes an Amazon Web Services account authorized to restore a snapshot.
    public struct AccountWithRestoreAccess: Swift.Sendable {
        /// The identifier of an Amazon Web Services support account authorized to restore a snapshot. For Amazon Web Services Support, the identifier is amazon-redshift-support.
        public var accountAlias: Swift.String?
        /// The identifier of an Amazon Web Services account authorized to restore a snapshot.
        public var accountId: Swift.String?

        public init(
            accountAlias: Swift.String? = nil,
            accountId: Swift.String? = nil
        )
        {
            self.accountAlias = accountAlias
            self.accountId = accountId
        }
    }
}

extension RedshiftClientTypes {

    public enum ActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case recommendNodeConfig
        case resizeCluster
        case restoreCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .recommendNodeConfig,
                .resizeCluster,
                .restoreCluster
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .recommendNodeConfig: return "recommend-node-config"
            case .resizeCluster: return "resize-cluster"
            case .restoreCluster: return "restore-cluster"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The ClusterIdentifier parameter does not refer to an existing cluster.
public struct ClusterNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The name of the partner was not found.
public struct PartnerNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PartnerNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The partner integration is not authorized.
public struct UnauthorizedPartnerIntegrationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedPartnerIntegration" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AddPartnerInput: Swift.Sendable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster that receives data from the partner.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database that receives data from the partner.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    /// This member is required.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

public struct AddPartnerOutput: Swift.Sendable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

extension RedshiftClientTypes {

    public enum AquaConfigurationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AquaConfigurationStatus] {
            return [
                .auto,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "auto"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum AquaStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case applying
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AquaStatus] {
            return [
                .applying,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .applying: return "applying"
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// The operation that uses this structure is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public struct AquaConfiguration: Swift.Sendable {
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaStatus: RedshiftClientTypes.AquaStatus?

        public init(
            aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
            aquaStatus: RedshiftClientTypes.AquaStatus? = nil
        )
        {
            self.aquaConfigurationStatus = aquaConfigurationStatus
            self.aquaStatus = aquaStatus
        }
    }
}

/// There is an error with the datashare.
public struct InvalidDataShareFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDataShareFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The namespace isn't valid because the namespace doesn't exist. Provide a valid namespace.
public struct InvalidNamespaceFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNamespaceFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateDataShareConsumerInput: Swift.Sendable {
    /// If set to true, allows write operations for a datashare.
    public var allowWrites: Swift.Bool?
    /// A value that specifies whether the datashare is associated with the entire account.
    public var associateEntireAccount: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the consumer namespace associated with the datashare.
    public var consumerArn: Swift.String?
    /// From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified Amazon Web Services Region.
    public var consumerRegion: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        allowWrites: Swift.Bool? = nil,
        associateEntireAccount: Swift.Bool? = nil,
        consumerArn: Swift.String? = nil,
        consumerRegion: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.allowWrites = allowWrites
        self.associateEntireAccount = associateEntireAccount
        self.consumerArn = consumerArn
        self.consumerRegion = consumerRegion
        self.dataShareArn = dataShareArn
    }
}

extension RedshiftClientTypes {

    public enum DataShareStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case authorized
        case available
        case deauthorized
        case pendingAuthorization
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatus] {
            return [
                .active,
                .authorized,
                .available,
                .deauthorized,
                .pendingAuthorization,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .authorized: return "AUTHORIZED"
            case .available: return "AVAILABLE"
            case .deauthorized: return "DEAUTHORIZED"
            case .pendingAuthorization: return "PENDING_AUTHORIZATION"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// The association of a datashare from a producer account with a data consumer.
    public struct DataShareAssociation: Swift.Sendable {
        /// Specifies whether write operations were allowed during data share association.
        public var consumerAcceptedWrites: Swift.Bool?
        /// The name of the consumer accounts that have an association with a producer datashare.
        public var consumerIdentifier: Swift.String?
        /// The Amazon Web Services Region of the consumer accounts that have an association with a producer datashare.
        public var consumerRegion: Swift.String?
        /// The creation date of the datashare that is associated.
        public var createdDate: Foundation.Date?
        /// Specifies whether write operations were allowed during data share authorization.
        public var producerAllowedWrites: Swift.Bool?
        /// The status of the datashare that is associated.
        public var status: RedshiftClientTypes.DataShareStatus?
        /// The status change data of the datashare that is associated.
        public var statusChangeDate: Foundation.Date?

        public init(
            consumerAcceptedWrites: Swift.Bool? = nil,
            consumerIdentifier: Swift.String? = nil,
            consumerRegion: Swift.String? = nil,
            createdDate: Foundation.Date? = nil,
            producerAllowedWrites: Swift.Bool? = nil,
            status: RedshiftClientTypes.DataShareStatus? = nil,
            statusChangeDate: Foundation.Date? = nil
        )
        {
            self.consumerAcceptedWrites = consumerAcceptedWrites
            self.consumerIdentifier = consumerIdentifier
            self.consumerRegion = consumerRegion
            self.createdDate = createdDate
            self.producerAllowedWrites = producerAllowedWrites
            self.status = status
            self.statusChangeDate = statusChangeDate
        }
    }
}

public struct AssociateDataShareConsumerOutput: Swift.Sendable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer namespace.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

extension RedshiftClientTypes {

    public enum ScheduleState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case failed
        case modifying
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleState] {
            return [
                .active,
                .failed,
                .modifying
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .failed: return "FAILED"
            case .modifying: return "MODIFYING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    ///
    public struct ClusterAssociatedToSchedule: Swift.Sendable {
        ///
        public var clusterIdentifier: Swift.String?
        ///
        public var scheduleAssociationState: RedshiftClientTypes.ScheduleState?

        public init(
            clusterIdentifier: Swift.String? = nil,
            scheduleAssociationState: RedshiftClientTypes.ScheduleState? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.scheduleAssociationState = scheduleAssociationState
        }
    }
}

extension RedshiftClientTypes {

    /// A cluster ID and custom domain name tied to a specific certificate. These are typically returned in a list.
    public struct CertificateAssociation: Swift.Sendable {
        /// The cluster identifier for the certificate association.
        public var clusterIdentifier: Swift.String?
        /// The custom domain name for the certificate association.
        public var customDomainName: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil,
            customDomainName: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.customDomainName = customDomainName
        }
    }
}

extension RedshiftClientTypes {

    /// Contains information about the custom domain name association.
    public struct Association: Swift.Sendable {
        /// A list of all associated clusters and domain names tied to a specific certificate.
        public var certificateAssociations: [RedshiftClientTypes.CertificateAssociation]?
        /// The Amazon Resource Name (ARN) for the certificate associated with the custom domain.
        public var customDomainCertificateArn: Swift.String?
        /// The expiration date for the certificate.
        public var customDomainCertificateExpiryDate: Foundation.Date?

        public init(
            certificateAssociations: [RedshiftClientTypes.CertificateAssociation]? = nil,
            customDomainCertificateArn: Swift.String? = nil,
            customDomainCertificateExpiryDate: Foundation.Date? = nil
        )
        {
            self.certificateAssociations = certificateAssociations
            self.customDomainCertificateArn = customDomainCertificateArn
            self.customDomainCertificateExpiryDate = customDomainCertificateExpiryDate
        }
    }
}

extension RedshiftClientTypes {

    /// Describes an authentication profile.
    public struct AuthenticationProfile: Swift.Sendable {
        /// The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
        public var authenticationProfileContent: Swift.String?
        /// The name of the authentication profile.
        public var authenticationProfileName: Swift.String?

        public init(
            authenticationProfileContent: Swift.String? = nil,
            authenticationProfileName: Swift.String? = nil
        )
        {
            self.authenticationProfileContent = authenticationProfileContent
            self.authenticationProfileName = authenticationProfileName
        }
    }
}

/// The authentication profile already exists.
public struct AuthenticationProfileAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The authentication profile can't be found.
public struct AuthenticationProfileNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The size or number of authentication profiles has exceeded the quota. The maximum length of the JSON string and maximum number of authentication profiles is determined by a quota for your account.
public struct AuthenticationProfileQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthenticationProfileQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified CIDR block or EC2 security group is already authorized for the specified cluster security group.
public struct AuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified CIDR IP range or EC2 security group is not authorized for the specified cluster security group.
public struct AuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The authorization quota for the cluster security group has been reached.
public struct AuthorizationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AuthorizationQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    public enum AuthorizationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authorized
        case revoking
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthorizationStatus] {
            return [
                .authorized,
                .revoking
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authorized: return "Authorized"
            case .revoking: return "Revoking"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The cluster security group name does not refer to an existing cluster security group.
public struct ClusterSecurityGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSecurityGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The state of the cluster security group is not available.
public struct InvalidClusterSecurityGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSecurityGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct AuthorizeClusterSecurityGroupIngressInput: Swift.Sendable {
    /// The IP range to be added the Amazon Redshift security group.
    public var cidrip: Swift.String?
    /// The name of the security group to which the ingress rule is added.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// The EC2 security group to be added the Amazon Redshift security group.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the security group specified by the EC2SecurityGroupName parameter. The Amazon Web Services Access Key ID is not an acceptable value. Example: 111122223333
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        clusterSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

extension RedshiftClientTypes {

    /// A tag consisting of a name/value pair for a resource.
    public struct Tag: Swift.Sendable {
        /// The key, or name, for the resource tag.
        public var key: Swift.String?
        /// The value for the resource tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension RedshiftClientTypes {

    /// Describes an Amazon EC2 security group.
    public struct EC2SecurityGroup: Swift.Sendable {
        /// The name of the EC2 Security Group.
        public var ec2SecurityGroupName: Swift.String?
        /// The Amazon Web Services account ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field.
        public var ec2SecurityGroupOwnerId: Swift.String?
        /// The status of the EC2 security group.
        public var status: Swift.String?
        /// The list of tags for the EC2 security group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            ec2SecurityGroupName: Swift.String? = nil,
            ec2SecurityGroupOwnerId: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.ec2SecurityGroupName = ec2SecurityGroupName
            self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
            self.status = status
            self.tags = tags
        }
    }
}

extension RedshiftClientTypes {

    /// Describes an IP range used in a security group.
    public struct IPRange: Swift.Sendable {
        /// The IP range in Classless Inter-Domain Routing (CIDR) notation.
        public var cidrip: Swift.String?
        /// The status of the IP range, for example, "authorized".
        public var status: Swift.String?
        /// The list of tags for the IP range.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            cidrip: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.cidrip = cidrip
            self.status = status
            self.tags = tags
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a security group.
    public struct ClusterSecurityGroup: Swift.Sendable {
        /// The name of the cluster security group to which the operation was applied.
        public var clusterSecurityGroupName: Swift.String?
        /// A description of the security group.
        public var description: Swift.String?
        /// A list of EC2 security groups that are permitted to access clusters associated with this cluster security group.
        public var ec2SecurityGroups: [RedshiftClientTypes.EC2SecurityGroup]?
        /// A list of IP ranges (CIDR blocks) that are permitted to access clusters associated with this cluster security group.
        public var ipRanges: [RedshiftClientTypes.IPRange]?
        /// The list of tags for the cluster security group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            clusterSecurityGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            ec2SecurityGroups: [RedshiftClientTypes.EC2SecurityGroup]? = nil,
            ipRanges: [RedshiftClientTypes.IPRange]? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.description = description
            self.ec2SecurityGroups = ec2SecurityGroups
            self.ipRanges = ipRanges
            self.tags = tags
        }
    }
}

public struct AuthorizeClusterSecurityGroupIngressOutput: Swift.Sendable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

public struct AuthorizeDataShareInput: Swift.Sendable {
    /// If set to true, allows write operations for a datashare.
    public var allowWrites: Swift.Bool?
    /// The identifier of the data consumer that is authorized to access the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
    /// This member is required.
    public var consumerIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare namespace that producers are to authorize sharing for.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        allowWrites: Swift.Bool? = nil,
        consumerIdentifier: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.allowWrites = allowWrites
        self.consumerIdentifier = consumerIdentifier
        self.dataShareArn = dataShareArn
    }
}

public struct AuthorizeDataShareOutput: Swift.Sendable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer namespace.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

extension RedshiftClientTypes {

    /// The authorized token issuer for the Amazon Redshift IAM Identity Center application.
    public struct AuthorizedTokenIssuer: Swift.Sendable {
        /// The list of audiences for the authorized token issuer for integrating Amazon Redshift with IDC Identity Center.
        public var authorizedAudiencesList: [Swift.String]?
        /// The ARN for the authorized token issuer for integrating Amazon Redshift with IDC Identity Center.
        public var trustedTokenIssuerArn: Swift.String?

        public init(
            authorizedAudiencesList: [Swift.String]? = nil,
            trustedTokenIssuerArn: Swift.String? = nil
        )
        {
            self.authorizedAudiencesList = authorizedAudiencesList
            self.trustedTokenIssuerArn = trustedTokenIssuerArn
        }
    }
}

/// The authorization already exists for this endpoint.
public struct EndpointAuthorizationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of endpoint authorizations per cluster has exceeded its limit.
public struct EndpointAuthorizationsPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationsPerClusterLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The status of the authorization is not valid.
public struct InvalidAuthorizationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAuthorizationState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified cluster is not in the available state.
public struct InvalidClusterStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AuthorizeEndpointAccessInput: Swift.Sendable {
    /// The Amazon Web Services account ID to grant access to.
    /// This member is required.
    public var account: Swift.String?
    /// The cluster identifier of the cluster to grant access to.
    public var clusterIdentifier: Swift.String?
    /// The virtual private cloud (VPC) identifiers to grant access to.
    public var vpcIds: [Swift.String]?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.vpcIds = vpcIds
    }
}

/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
public struct AuthorizeEndpointAccessOutput: Swift.Sendable {
    /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
    public var allowedAllVPCs: Swift.Bool?
    /// The VPCs allowed access to the cluster.
    public var allowedVPCs: [Swift.String]?
    /// The time (UTC) when the authorization was created.
    public var authorizeTime: Foundation.Date?
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The status of the cluster.
    public var clusterStatus: Swift.String?
    /// The number of Redshift-managed VPC endpoints created for the authorization.
    public var endpointCount: Swift.Int?
    /// The Amazon Web Services account ID of the grantee of the cluster.
    public var grantee: Swift.String?
    /// The Amazon Web Services account ID of the cluster owner.
    public var grantor: Swift.String?
    /// The status of the authorization action.
    public var status: RedshiftClientTypes.AuthorizationStatus?

    public init(
        allowedAllVPCs: Swift.Bool? = nil,
        allowedVPCs: [Swift.String]? = nil,
        authorizeTime: Foundation.Date? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterStatus: Swift.String? = nil,
        endpointCount: Swift.Int? = nil,
        grantee: Swift.String? = nil,
        grantor: Swift.String? = nil,
        status: RedshiftClientTypes.AuthorizationStatus? = nil
    )
    {
        self.allowedAllVPCs = allowedAllVPCs
        self.allowedVPCs = allowedVPCs
        self.authorizeTime = authorizeTime
        self.clusterIdentifier = clusterIdentifier
        self.clusterStatus = clusterStatus
        self.endpointCount = endpointCount
        self.grantee = grantee
        self.grantor = grantor
        self.status = status
    }
}

/// The snapshot identifier does not refer to an existing cluster snapshot.
public struct ClusterSnapshotNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request cannot be completed because a dependent service is throttling requests made by Amazon Redshift on your behalf. Wait and retry the request.
public struct DependentServiceRequestThrottlingFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceRequestThrottlingFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified cluster snapshot is not in the available state, or other accounts are authorized to access the snapshot.
public struct InvalidClusterSnapshotStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSnapshotState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The encryption key has exceeded its grant limit in Amazon Web Services KMS.
public struct LimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct AuthorizeSnapshotAccessInput: Swift.Sendable {
    /// The identifier of the Amazon Web Services account authorized to restore the specified snapshot. To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.
    /// This member is required.
    public var accountWithRestoreAccess: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot to authorize access to.
    public var snapshotArn: Swift.String?
    /// The identifier of the cluster the snapshot was created from.
    ///
    /// * If the snapshot to access doesn't exist and the associated IAM policy doesn't allow access to all (*) snapshots - This parameter is required. Otherwise, permissions aren't available to check if the snapshot exists.
    ///
    /// * If the snapshot to access exists - This parameter isn't required. Redshift can retrieve the cluster identifier and use it to validate snapshot authorization.
    public var snapshotClusterIdentifier: Swift.String?
    /// The identifier of the snapshot the account is authorized to restore.
    public var snapshotIdentifier: Swift.String?

    public init(
        accountWithRestoreAccess: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.accountWithRestoreAccess = accountWithRestoreAccess
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension RedshiftClientTypes {

    /// Describes a snapshot.
    public struct Snapshot: Swift.Sendable {
        /// A list of the Amazon Web Services accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner.
        public var accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]?
        /// The size of the incremental backup.
        public var actualIncrementalBackupSizeInMegaBytes: Swift.Double?
        /// The Availability Zone in which the cluster was created.
        public var availabilityZone: Swift.String?
        /// The number of megabytes that have been transferred to the snapshot backup.
        public var backupProgressInMegaBytes: Swift.Double?
        /// The time (UTC) when the cluster was originally created.
        public var clusterCreateTime: Foundation.Date?
        /// The identifier of the cluster for which the snapshot was taken.
        public var clusterIdentifier: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup.
        public var currentBackupRateInMegaBytesPerSecond: Swift.Double?
        /// The name of the database that was created when the cluster was created.
        public var dbName: Swift.String?
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        public var elapsedTimeInSeconds: Swift.Int?
        /// If true, the data in the snapshot is encrypted at rest.
        public var encrypted: Swift.Bool?
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        public var encryptedWithHSM: Swift.Bool?
        /// The cluster version of the cluster used to create the snapshot. For example, 1.0.15503.
        public var engineFullVersion: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup.
        public var estimatedSecondsToCompletion: Swift.Int?
        /// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the snapshot.
        public var maintenanceTrackName: Swift.String?
        /// The number of days until a manual snapshot will pass its retention period.
        public var manualSnapshotRemainingDays: Swift.Int?
        /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
        public var masterPasswordSecretArn: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret.
        public var masterPasswordSecretKmsKeyId: Swift.String?
        /// The admin user name for the cluster.
        public var masterUsername: Swift.String?
        /// The node type of the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        public var ownerAccount: Swift.String?
        /// The port that the cluster is listening on.
        public var port: Swift.Int?
        /// The list of node types that this cluster snapshot is able to restore into.
        public var restorableNodeTypes: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the snapshot.
        public var snapshotArn: Swift.String?
        /// The time (in UTC format) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        public var snapshotCreateTime: Foundation.Date?
        /// The snapshot identifier that is provided in the request.
        public var snapshotIdentifier: Swift.String?
        /// A timestamp representing the start of the retention period for the snapshot.
        public var snapshotRetentionStartTime: Foundation.Date?
        /// The snapshot type. Snapshots created using [CreateClusterSnapshot] and [CopyClusterSnapshot] are of type "manual".
        public var snapshotType: Swift.String?
        /// The source region from which the snapshot was copied.
        public var sourceRegion: Swift.String?
        /// The snapshot status. The value of the status depends on the API operation used:
        ///
        /// * [CreateClusterSnapshot] and [CopyClusterSnapshot] returns status as "creating".
        ///
        /// * [DescribeClusterSnapshots] returns status as "creating", "available", "final snapshot", or "failed".
        ///
        /// * [DeleteClusterSnapshot] returns status as "deleted".
        public var status: Swift.String?
        /// The list of tags for the cluster snapshot.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The size of the complete set of backup data that would be used to restore the cluster.
        public var totalBackupSizeInMegaBytes: Swift.Double?
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        public var vpcId: Swift.String?

        public init(
            accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]? = nil,
            actualIncrementalBackupSizeInMegaBytes: Swift.Double? = nil,
            availabilityZone: Swift.String? = nil,
            backupProgressInMegaBytes: Swift.Double? = nil,
            clusterCreateTime: Foundation.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            currentBackupRateInMegaBytesPerSecond: Swift.Double? = nil,
            dbName: Swift.String? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            encrypted: Swift.Bool? = nil,
            encryptedWithHSM: Swift.Bool? = nil,
            engineFullVersion: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            estimatedSecondsToCompletion: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRemainingDays: Swift.Int? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterPasswordSecretArn: Swift.String? = nil,
            masterPasswordSecretKmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            ownerAccount: Swift.String? = nil,
            port: Swift.Int? = nil,
            restorableNodeTypes: [Swift.String]? = nil,
            snapshotArn: Swift.String? = nil,
            snapshotCreateTime: Foundation.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            snapshotRetentionStartTime: Foundation.Date? = nil,
            snapshotType: Swift.String? = nil,
            sourceRegion: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalBackupSizeInMegaBytes: Swift.Double? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.availabilityZone = availabilityZone
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterVersion = clusterVersion
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.dbName = dbName
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.encrypted = encrypted
            self.encryptedWithHSM = encryptedWithHSM
            self.engineFullVersion = engineFullVersion
            self.enhancedVpcRouting = enhancedVpcRouting
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRemainingDays = manualSnapshotRemainingDays
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterPasswordSecretArn = masterPasswordSecretArn
            self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
            self.masterUsername = masterUsername
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.ownerAccount = ownerAccount
            self.port = port
            self.restorableNodeTypes = restorableNodeTypes
            self.snapshotArn = snapshotArn
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotRetentionStartTime = snapshotRetentionStartTime
            self.snapshotType = snapshotType
            self.sourceRegion = sourceRegion
            self.status = status
            self.tags = tags
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.vpcId = vpcId
        }
    }
}

public struct AuthorizeSnapshotAccessOutput: Swift.Sendable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

extension RedshiftClientTypes {

    /// A list of supported platforms for orderable clusters.
    public struct SupportedPlatform: Swift.Sendable {
        ///
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension RedshiftClientTypes {

    /// Describes an availability zone.
    public struct AvailabilityZone: Swift.Sendable {
        /// The name of the availability zone.
        public var name: Swift.String?
        ///
        public var supportedPlatforms: [RedshiftClientTypes.SupportedPlatform]?

        public init(
            name: Swift.String? = nil,
            supportedPlatforms: [RedshiftClientTypes.SupportedPlatform]? = nil
        )
        {
            self.name = name
            self.supportedPlatforms = supportedPlatforms
        }
    }
}

/// The maximum number for a batch delete of snapshots has been reached. The limit is 100.
public struct BatchDeleteRequestSizeExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchDeleteRequestSizeExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    ///
    public struct DeleteClusterSnapshotMessage: Swift.Sendable {
        /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
        public var snapshotClusterIdentifier: Swift.String?
        /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available, failed, or cancelled state.
        /// This member is required.
        public var snapshotIdentifier: Swift.String?

        public init(
            snapshotClusterIdentifier: Swift.String? = nil,
            snapshotIdentifier: Swift.String? = nil
        )
        {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }
    }
}

public struct BatchDeleteClusterSnapshotsInput: Swift.Sendable {
    /// A list of identifiers for the snapshots that you want to delete.
    /// This member is required.
    public var identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]?

    public init(
        identifiers: [RedshiftClientTypes.DeleteClusterSnapshotMessage]? = nil
    )
    {
        self.identifiers = identifiers
    }
}

extension RedshiftClientTypes {

    /// Describes the errors returned by a snapshot.
    public struct SnapshotErrorMessage: Swift.Sendable {
        /// The failure code for the error.
        public var failureCode: Swift.String?
        /// The text message describing the error.
        public var failureReason: Swift.String?
        /// A unique identifier for the cluster.
        public var snapshotClusterIdentifier: Swift.String?
        /// A unique identifier for the snapshot returning the error.
        public var snapshotIdentifier: Swift.String?

        public init(
            failureCode: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            snapshotClusterIdentifier: Swift.String? = nil,
            snapshotIdentifier: Swift.String? = nil
        )
        {
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
        }
    }
}

public struct BatchDeleteClusterSnapshotsOutput: Swift.Sendable {
    /// A list of any errors returned.
    public var errors: [RedshiftClientTypes.SnapshotErrorMessage]?
    /// A list of the snapshot identifiers that were deleted.
    public var resources: [Swift.String]?

    public init(
        errors: [RedshiftClientTypes.SnapshotErrorMessage]? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.resources = resources
    }
}

/// The maximum number for snapshot identifiers has been reached. The limit is 100.
public struct BatchModifyClusterSnapshotsLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchModifyClusterSnapshotsLimitExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The retention period specified is either in the past or is not a valid value. The value must be either -1 or an integer between 1 and 3,653.
public struct InvalidRetentionPeriodFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRetentionPeriodFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct BatchModifyClusterSnapshotsInput: Swift.Sendable {
    /// A boolean value indicating whether to override an exception if the retention period has passed.
    public var force: Swift.Bool?
    /// The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely. The number must be either -1 or an integer between 1 and 3,653. If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// A list of snapshot identifiers you want to modify.
    /// This member is required.
    public var snapshotIdentifierList: [Swift.String]?

    public init(
        force: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifierList: [Swift.String]? = nil
    )
    {
        self.force = force
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifierList = snapshotIdentifierList
    }
}

public struct BatchModifyClusterSnapshotsOutput: Swift.Sendable {
    /// A list of any errors returned.
    public var errors: [RedshiftClientTypes.SnapshotErrorMessage]?
    /// A list of the snapshots that were modified.
    public var resources: [Swift.String]?

    public init(
        errors: [RedshiftClientTypes.SnapshotErrorMessage]? = nil,
        resources: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.resources = resources
    }
}

/// Could not find the specified S3 bucket.
public struct BucketNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BucketNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resize operation for the specified cluster is not found.
public struct ResizeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResizeNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelResizeInput: Swift.Sendable {
    /// The unique identifier for the cluster that you want to cancel a resize operation for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

/// Describes the result of a cluster resize operation.
public struct CancelResizeOutput: Swift.Sendable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init(
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}

extension RedshiftClientTypes {

    /// The identifier of a node in a cluster.
    public struct ClusterNode: Swift.Sendable {
        /// Whether the node is a leader node or a compute node.
        public var nodeRole: Swift.String?
        /// The private IP address of a node within a cluster.
        public var privateIPAddress: Swift.String?
        /// The public IP address of a node within a cluster.
        public var publicIPAddress: Swift.String?

        public init(
            nodeRole: Swift.String? = nil,
            privateIPAddress: Swift.String? = nil,
            publicIPAddress: Swift.String? = nil
        )
        {
            self.nodeRole = nodeRole
            self.privateIPAddress = privateIPAddress
            self.publicIPAddress = publicIPAddress
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of a parameter group.
    public struct ClusterParameterStatus: Swift.Sendable {
        /// The error that prevented the parameter from being applied to the database.
        public var parameterApplyErrorDescription: Swift.String?
        /// The status of the parameter that indicates whether the parameter is in sync with the database, waiting for a cluster reboot, or encountered an error when being applied. The following are possible statuses and descriptions.
        ///
        /// * in-sync: The parameter value is in sync with the database.
        ///
        /// * pending-reboot: The parameter value will be applied after the cluster reboots.
        ///
        /// * applying: The parameter value is being applied to the database.
        ///
        /// * invalid-parameter: Cannot apply the parameter value because it has an invalid value or syntax.
        ///
        /// * apply-deferred: The parameter contains static property changes. The changes are deferred until the cluster reboots.
        ///
        /// * apply-error: Cannot connect to the cluster. The parameter change will be applied after the cluster reboots.
        ///
        /// * unknown-error: Cannot apply the parameter change right now. The change will be applied after the cluster reboots.
        public var parameterApplyStatus: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?

        public init(
            parameterApplyErrorDescription: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterName: Swift.String? = nil
        )
        {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterName = parameterName
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of a parameter group.
    public struct ClusterParameterGroupStatus: Swift.Sendable {
        /// The list of parameter statuses. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide.
        public var clusterParameterStatusList: [RedshiftClientTypes.ClusterParameterStatus]?
        /// The status of parameter updates.
        public var parameterApplyStatus: Swift.String?
        /// The name of the cluster parameter group.
        public var parameterGroupName: Swift.String?

        public init(
            clusterParameterStatusList: [RedshiftClientTypes.ClusterParameterStatus]? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil
        )
        {
            self.clusterParameterStatusList = clusterParameterStatusList
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterGroupName = parameterGroupName
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a cluster security group.
    public struct ClusterSecurityGroupMembership: Swift.Sendable {
        /// The name of the cluster security group.
        public var clusterSecurityGroupName: Swift.String?
        /// The status of the cluster security group.
        public var status: Swift.String?

        public init(
            clusterSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.status = status
        }
    }
}

extension RedshiftClientTypes {

    /// Returns the destination region and retention period that are configured for cross-region snapshot copy.
    public struct ClusterSnapshotCopyStatus: Swift.Sendable {
        /// The destination region that snapshots are automatically copied to when cross-region snapshot copy is enabled.
        public var destinationRegion: Swift.String?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region.
        public var retentionPeriod: Swift.Int?
        /// The name of the snapshot copy grant.
        public var snapshotCopyGrantName: Swift.String?

        public init(
            destinationRegion: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            retentionPeriod: Swift.Int? = nil,
            snapshotCopyGrantName: Swift.String? = nil
        )
        {
            self.destinationRegion = destinationRegion
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of a cluster while it is in the process of resizing with an incremental resize.
    public struct DataTransferProgress: Swift.Sendable {
        /// Describes the data transfer rate in MB's per second.
        public var currentRateInMegaBytesPerSecond: Swift.Double?
        /// Describes the total amount of data that has been transfered in MB's.
        public var dataTransferredInMegaBytes: Swift.Int?
        /// Describes the number of seconds that have elapsed during the data transfer.
        public var elapsedTimeInSeconds: Swift.Int?
        /// Describes the estimated number of seconds remaining to complete the transfer.
        public var estimatedTimeToCompletionInSeconds: Swift.Int?
        /// Describes the status of the cluster. While the transfer is in progress the status is transferringdata.
        public var status: Swift.String?
        /// Describes the total amount of data to be transfered in megabytes.
        public var totalDataInMegaBytes: Swift.Int?

        public init(
            currentRateInMegaBytesPerSecond: Swift.Double? = nil,
            dataTransferredInMegaBytes: Swift.Int? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
            status: Swift.String? = nil,
            totalDataInMegaBytes: Swift.Int? = nil
        )
        {
            self.currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond
            self.dataTransferredInMegaBytes = dataTransferredInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.status = status
            self.totalDataInMegaBytes = totalDataInMegaBytes
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a deferred maintenance window
    public struct DeferredMaintenanceWindow: Swift.Sendable {
        /// A timestamp for the end of the time period when we defer maintenance.
        public var deferMaintenanceEndTime: Foundation.Date?
        /// A unique identifier for the maintenance window.
        public var deferMaintenanceIdentifier: Swift.String?
        /// A timestamp for the beginning of the time period when we defer maintenance.
        public var deferMaintenanceStartTime: Foundation.Date?

        public init(
            deferMaintenanceEndTime: Foundation.Date? = nil,
            deferMaintenanceIdentifier: Swift.String? = nil,
            deferMaintenanceStartTime: Foundation.Date? = nil
        )
        {
            self.deferMaintenanceEndTime = deferMaintenanceEndTime
            self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
            self.deferMaintenanceStartTime = deferMaintenanceStartTime
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of the elastic IP (EIP) address.
    public struct ElasticIpStatus: Swift.Sendable {
        /// The elastic IP (EIP) address for the cluster.
        public var elasticIp: Swift.String?
        /// The status of the elastic IP (EIP) address.
        public var status: Swift.String?

        public init(
            elasticIp: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.elasticIp = elasticIp
            self.status = status
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a network interface.
    public struct NetworkInterface: Swift.Sendable {
        /// The Availability Zone.
        public var availabilityZone: Swift.String?
        /// The IPv6 address of the network interface within the subnet.
        public var ipv6Address: Swift.String?
        /// The network interface identifier.
        public var networkInterfaceId: Swift.String?
        /// The IPv4 address of the network interface within the subnet.
        public var privateIpAddress: Swift.String?
        /// The subnet identifier.
        public var subnetId: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.ipv6Address = ipv6Address
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
        }
    }
}

extension RedshiftClientTypes {

    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public struct VpcEndpoint: Swift.Sendable {
        /// One or more network interfaces of the endpoint. Also known as an interface endpoint.
        public var networkInterfaces: [RedshiftClientTypes.NetworkInterface]?
        /// The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
        public var vpcEndpointId: Swift.String?
        /// The VPC identifier that the endpoint is associated.
        public var vpcId: Swift.String?

        public init(
            networkInterfaces: [RedshiftClientTypes.NetworkInterface]? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.networkInterfaces = networkInterfaces
            self.vpcEndpointId = vpcEndpointId
            self.vpcId = vpcId
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a connection endpoint.
    public struct Endpoint: Swift.Sendable {
        /// The DNS address of the Cluster.
        public var address: Swift.String?
        /// The port that the database engine is listening on.
        public var port: Swift.Int?
        /// Describes a connection endpoint.
        public var vpcEndpoints: [RedshiftClientTypes.VpcEndpoint]?

        public init(
            address: Swift.String? = nil,
            port: Swift.Int? = nil,
            vpcEndpoints: [RedshiftClientTypes.VpcEndpoint]? = nil
        )
        {
            self.address = address
            self.port = port
            self.vpcEndpoints = vpcEndpoints
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of changes to HSM settings.
    public struct HsmStatus: Swift.Sendable {
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        public var hsmClientCertificateIdentifier: Swift.String?
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        public var hsmConfigurationIdentifier: Swift.String?
        /// Reports whether the Amazon Redshift cluster has finished applying any HSM settings changes specified in a modify cluster command. Values: active, applying
        public var status: Swift.String?

        public init(
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.status = status
        }
    }
}

extension RedshiftClientTypes {

    /// An Identity and Access Management (IAM) role that can be used by the associated Amazon Redshift cluster to access other Amazon Web Services services.
    public struct ClusterIamRole: Swift.Sendable {
        /// A value that describes the status of the IAM role's association with an Amazon Redshift cluster. The following are possible statuses and descriptions.
        ///
        /// * in-sync: The role is available for use by the cluster.
        ///
        /// * adding: The role is in the process of being associated with the cluster.
        ///
        /// * removing: The role is in the process of being disassociated with the cluster.
        public var applyStatus: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role, for example, arn:aws:iam::123456789012:role/RedshiftCopyUnload.
        public var iamRoleArn: Swift.String?

        public init(
            applyStatus: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.applyStatus = applyStatus
            self.iamRoleArn = iamRoleArn
        }
    }
}

extension RedshiftClientTypes {

    /// The AvailabilityZone and ClusterNodes information of the secondary compute unit.
    public struct SecondaryClusterInfo: Swift.Sendable {
        /// The name of the Availability Zone in which the secondary compute unit of the cluster is located.
        public var availabilityZone: Swift.String?
        /// The nodes in the secondary compute unit.
        public var clusterNodes: [RedshiftClientTypes.ClusterNode]?

        public init(
            availabilityZone: Swift.String? = nil,
            clusterNodes: [RedshiftClientTypes.ClusterNode]? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.clusterNodes = clusterNodes
        }
    }
}

extension RedshiftClientTypes {

    /// Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.
    public struct PendingModifiedValues: Swift.Sendable {
        /// The pending or in-progress change of the automated snapshot retention period.
        public var automatedSnapshotRetentionPeriod: Swift.Int?
        /// The pending or in-progress change of the new identifier for the cluster.
        public var clusterIdentifier: Swift.String?
        /// The pending or in-progress change of the cluster type.
        public var clusterType: Swift.String?
        /// The pending or in-progress change of the service version.
        public var clusterVersion: Swift.String?
        /// The encryption type for a cluster. Possible values are: KMS and None.
        public var encryptionType: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The name of the maintenance track that the cluster will change to during the next maintenance window.
        public var maintenanceTrackName: Swift.String?
        /// The pending or in-progress change of the admin user password for the cluster.
        public var masterUserPassword: Swift.String?
        /// The pending or in-progress change of the cluster's node type.
        public var nodeType: Swift.String?
        /// The pending or in-progress change of the number of nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// The pending or in-progress change of the ability to connect to the cluster from the public network.
        public var publiclyAccessible: Swift.Bool?

        public init(
            automatedSnapshotRetentionPeriod: Swift.Int? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            encryptionType: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            maintenanceTrackName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            publiclyAccessible: Swift.Bool? = nil
        )
        {
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.encryptionType = encryptionType
            self.enhancedVpcRouting = enhancedVpcRouting
            self.maintenanceTrackName = maintenanceTrackName
            self.masterUserPassword = masterUserPassword
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.publiclyAccessible = publiclyAccessible
        }
    }
}

extension RedshiftClientTypes.PendingModifiedValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PendingModifiedValues(automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), encryptionType: \(Swift.String(describing: encryptionType)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

extension RedshiftClientTypes {

    public enum ReservedNodeExchangeStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case requested
        case retrying
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeExchangeStatusType] {
            return [
                .failed,
                .inProgress,
                .pending,
                .requested,
                .retrying,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .requested: return "REQUESTED"
            case .retrying: return "RETRYING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// Reserved-node status details, such as the source reserved-node identifier, the target reserved-node identifier, the node type, the node count, and other details.
    public struct ReservedNodeExchangeStatus: Swift.Sendable {
        /// A date and time that indicate when the reserved-node exchange was requested.
        public var requestTime: Foundation.Date?
        /// The identifier of the reserved-node exchange request.
        public var reservedNodeExchangeRequestId: Swift.String?
        /// The source reserved-node count in the cluster.
        public var sourceReservedNodeCount: Swift.Int?
        /// The identifier of the source reserved node.
        public var sourceReservedNodeId: Swift.String?
        /// The source reserved-node type, for example ra3.4xlarge.
        public var sourceReservedNodeType: Swift.String?
        /// The status of the reserved-node exchange request. Statuses include in-progress and requested.
        public var status: RedshiftClientTypes.ReservedNodeExchangeStatusType?
        /// The count of target reserved nodes in the cluster.
        public var targetReservedNodeCount: Swift.Int?
        /// The identifier of the target reserved node offering.
        public var targetReservedNodeOfferingId: Swift.String?
        /// The node type of the target reserved node, for example ra3.4xlarge.
        public var targetReservedNodeType: Swift.String?

        public init(
            requestTime: Foundation.Date? = nil,
            reservedNodeExchangeRequestId: Swift.String? = nil,
            sourceReservedNodeCount: Swift.Int? = nil,
            sourceReservedNodeId: Swift.String? = nil,
            sourceReservedNodeType: Swift.String? = nil,
            status: RedshiftClientTypes.ReservedNodeExchangeStatusType? = nil,
            targetReservedNodeCount: Swift.Int? = nil,
            targetReservedNodeOfferingId: Swift.String? = nil,
            targetReservedNodeType: Swift.String? = nil
        )
        {
            self.requestTime = requestTime
            self.reservedNodeExchangeRequestId = reservedNodeExchangeRequestId
            self.sourceReservedNodeCount = sourceReservedNodeCount
            self.sourceReservedNodeId = sourceReservedNodeId
            self.sourceReservedNodeType = sourceReservedNodeType
            self.status = status
            self.targetReservedNodeCount = targetReservedNodeCount
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
            self.targetReservedNodeType = targetReservedNodeType
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a resize operation.
    public struct ResizeInfo: Swift.Sendable {
        /// A boolean value indicating if the resize operation can be cancelled.
        public var allowCancelResize: Swift.Bool?
        /// Returns the value ClassicResize.
        public var resizeType: Swift.String?

        public init(
            allowCancelResize: Swift.Bool? = nil,
            resizeType: Swift.String? = nil
        )
        {
            self.allowCancelResize = allowCancelResize
            self.resizeType = resizeType
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
    public struct RestoreStatus: Swift.Sendable {
        /// The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 node types.
        public var currentRestoreRateInMegaBytesPerSecond: Swift.Double?
        /// The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 node types.
        public var elapsedTimeInSeconds: Swift.Int?
        /// The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 node types.
        public var estimatedTimeToCompletionInSeconds: Swift.Int?
        /// The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 node types.
        public var progressInMegaBytes: Swift.Int?
        /// The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 node types.
        public var snapshotSizeInMegaBytes: Swift.Int?
        /// The status of the restore action. Returns starting, restoring, completed, or failed.
        public var status: Swift.String?

        public init(
            currentRestoreRateInMegaBytesPerSecond: Swift.Double? = nil,
            elapsedTimeInSeconds: Swift.Int? = nil,
            estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
            progressInMegaBytes: Swift.Int? = nil,
            snapshotSizeInMegaBytes: Swift.Int? = nil,
            status: Swift.String? = nil
        )
        {
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.status = status
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the members of a VPC security group.
    public struct VpcSecurityGroupMembership: Swift.Sendable {
        /// The status of the VPC security group.
        public var status: Swift.String?
        /// The identifier of the VPC security group.
        public var vpcSecurityGroupId: Swift.String?

        public init(
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a cluster.
    public struct Cluster: Swift.Sendable {
        /// A boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window.
        public var allowVersionUpgrade: Swift.Bool?
        /// This field is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
        public var aquaConfiguration: RedshiftClientTypes.AquaConfiguration?
        /// The number of days that automatic cluster snapshots are retained.
        public var automatedSnapshotRetentionPeriod: Swift.Int?
        /// The name of the Availability Zone in which the cluster is located.
        public var availabilityZone: Swift.String?
        /// Describes the status of the Availability Zone relocation operation.
        public var availabilityZoneRelocationStatus: Swift.String?
        /// The availability status of the cluster for queries. Possible values are the following:
        ///
        /// * Available - The cluster is available for queries.
        ///
        /// * Unavailable - The cluster is not available for queries.
        ///
        /// * Maintenance - The cluster is intermittently available for queries due to maintenance activities.
        ///
        /// * Modifying - The cluster is intermittently available for queries due to changes that modify the cluster.
        ///
        /// * Failed - The cluster failed and is not available for queries.
        public var clusterAvailabilityStatus: Swift.String?
        /// The date and time that the cluster was created.
        public var clusterCreateTime: Foundation.Date?
        /// The unique identifier of the cluster.
        public var clusterIdentifier: Swift.String?
        /// The namespace Amazon Resource Name (ARN) of the cluster.
        public var clusterNamespaceArn: Swift.String?
        /// The nodes in the cluster.
        public var clusterNodes: [RedshiftClientTypes.ClusterNode]?
        /// The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.
        public var clusterParameterGroups: [RedshiftClientTypes.ClusterParameterGroupStatus]?
        /// The public key for the cluster.
        public var clusterPublicKey: Swift.String?
        /// The specific revision number of the database in the cluster.
        public var clusterRevisionNumber: Swift.String?
        /// A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements. Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter.
        public var clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroupMembership]?
        /// A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
        public var clusterSnapshotCopyStatus: RedshiftClientTypes.ClusterSnapshotCopyStatus?
        /// The current state of the cluster. Possible values are the following:
        ///
        /// * available
        ///
        /// * available, prep-for-resize
        ///
        /// * available, resize-cleanup
        ///
        /// * cancelling-resize
        ///
        /// * creating
        ///
        /// * deleting
        ///
        /// * final-snapshot
        ///
        /// * hardware-failure
        ///
        /// * incompatible-hsm
        ///
        /// * incompatible-network
        ///
        /// * incompatible-parameters
        ///
        /// * incompatible-restore
        ///
        /// * modifying
        ///
        /// * paused
        ///
        /// * rebooting
        ///
        /// * renaming
        ///
        /// * resizing
        ///
        /// * rotating-keys
        ///
        /// * storage-full
        ///
        /// * updating-hsm
        public var clusterStatus: Swift.String?
        /// The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.
        public var clusterSubnetGroupName: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The certificate Amazon Resource Name (ARN) for the custom domain name.
        public var customDomainCertificateArn: Swift.String?
        /// The expiration date for the certificate associated with the custom domain name.
        public var customDomainCertificateExpiryDate: Foundation.Date?
        /// The custom domain name associated with the cluster.
        public var customDomainName: Swift.String?
        ///
        public var dataTransferProgress: RedshiftClientTypes.DataTransferProgress?
        /// The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default.
        public var dbName: Swift.String?
        /// The Amazon Resource Name (ARN) for the IAM role set as default for the cluster.
        public var defaultIamRoleArn: Swift.String?
        /// Describes a group of DeferredMaintenanceWindow objects.
        public var deferredMaintenanceWindows: [RedshiftClientTypes.DeferredMaintenanceWindow]?
        /// The status of the elastic IP (EIP) address.
        public var elasticIpStatus: RedshiftClientTypes.ElasticIpStatus?
        /// The number of nodes that you can resize the cluster to with the elastic resize method.
        public var elasticResizeNumberOfNodeOptions: Swift.String?
        /// A boolean value that, if true, indicates that data in the cluster is encrypted at rest.
        public var encrypted: Swift.Bool?
        /// The connection endpoint.
        public var endpoint: RedshiftClientTypes.Endpoint?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool?
        /// The date and time when the next snapshot is expected to be taken for clusters with a valid snapshot schedule and backups enabled.
        public var expectedNextSnapshotScheduleTime: Foundation.Date?
        /// The status of next expected snapshot for clusters having a valid snapshot schedule and backups enabled. Possible values are the following:
        ///
        /// * OnTrack - The next snapshot is expected to be taken on time.
        ///
        /// * Pending - The next snapshot is pending to be taken.
        public var expectedNextSnapshotScheduleTimeStatus: Swift.String?
        /// A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command. Values: active, applying
        public var hsmStatus: RedshiftClientTypes.HsmStatus?
        /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.
        public var iamRoles: [RedshiftClientTypes.ClusterIamRole]?
        /// The IP address type for the cluster. Possible values are ipv4 and dualstack.
        public var ipAddressType: Swift.String?
        /// The Key Management Service (KMS) key ID of the encryption key used to encrypt data in the cluster.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the cluster.
        public var maintenanceTrackName: Swift.String?
        /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
        public var masterPasswordSecretArn: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret.
        public var masterPasswordSecretKmsKeyId: Swift.String?
        /// The admin user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter.
        public var masterUsername: Swift.String?
        /// The status of a modify operation, if any, initiated for the cluster.
        public var modifyStatus: Swift.String?
        /// A boolean value that, if true, indicates that the cluster is deployed in two Availability Zones.
        public var multiAZ: Swift.String?
        /// The secondary compute unit of a cluster, if Multi-AZ deployment is turned on.
        public var multiAZSecondary: RedshiftClientTypes.SecondaryClusterInfo?
        /// The date and time in UTC when system maintenance can begin.
        public var nextMaintenanceWindowStartTime: Foundation.Date?
        /// The node type for the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of compute nodes in the cluster.
        public var numberOfNodes: Swift.Int?
        /// Cluster operations that are waiting to be started.
        public var pendingActions: [Swift.String]?
        /// A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.
        public var pendingModifiedValues: RedshiftClientTypes.PendingModifiedValues?
        /// The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
        public var preferredMaintenanceWindow: Swift.String?
        /// A boolean value that, if true, indicates that the cluster can be accessed from a public network.
        public var publiclyAccessible: Swift.Bool?
        /// The status of the reserved-node exchange request. Statuses include in-progress and requested.
        public var reservedNodeExchangeStatus: RedshiftClientTypes.ReservedNodeExchangeStatus?
        /// Returns the following:
        ///
        /// * AllowCancelResize: a boolean value indicating if the resize operation can be cancelled.
        ///
        /// * ResizeType: Returns ClassicResize
        public var resizeInfo: RedshiftClientTypes.ResizeInfo?
        /// A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.
        public var restoreStatus: RedshiftClientTypes.RestoreStatus?
        /// A unique identifier for the cluster snapshot schedule.
        public var snapshotScheduleIdentifier: Swift.String?
        /// The current state of the cluster snapshot schedule.
        public var snapshotScheduleState: RedshiftClientTypes.ScheduleState?
        /// The list of tags for the cluster.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The total storage capacity of the cluster in megabytes.
        public var totalStorageCapacityInMegaBytes: Swift.Int?
        /// The identifier of the VPC the cluster is in, if the cluster is in a VPC.
        public var vpcId: Swift.String?
        /// A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.
        public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

        public init(
            allowVersionUpgrade: Swift.Bool? = nil,
            aquaConfiguration: RedshiftClientTypes.AquaConfiguration? = nil,
            automatedSnapshotRetentionPeriod: Swift.Int? = nil,
            availabilityZone: Swift.String? = nil,
            availabilityZoneRelocationStatus: Swift.String? = nil,
            clusterAvailabilityStatus: Swift.String? = nil,
            clusterCreateTime: Foundation.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterNamespaceArn: Swift.String? = nil,
            clusterNodes: [RedshiftClientTypes.ClusterNode]? = nil,
            clusterParameterGroups: [RedshiftClientTypes.ClusterParameterGroupStatus]? = nil,
            clusterPublicKey: Swift.String? = nil,
            clusterRevisionNumber: Swift.String? = nil,
            clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroupMembership]? = nil,
            clusterSnapshotCopyStatus: RedshiftClientTypes.ClusterSnapshotCopyStatus? = nil,
            clusterStatus: Swift.String? = nil,
            clusterSubnetGroupName: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            customDomainCertificateArn: Swift.String? = nil,
            customDomainCertificateExpiryDate: Foundation.Date? = nil,
            customDomainName: Swift.String? = nil,
            dataTransferProgress: RedshiftClientTypes.DataTransferProgress? = nil,
            dbName: Swift.String? = nil,
            defaultIamRoleArn: Swift.String? = nil,
            deferredMaintenanceWindows: [RedshiftClientTypes.DeferredMaintenanceWindow]? = nil,
            elasticIpStatus: RedshiftClientTypes.ElasticIpStatus? = nil,
            elasticResizeNumberOfNodeOptions: Swift.String? = nil,
            encrypted: Swift.Bool? = nil,
            endpoint: RedshiftClientTypes.Endpoint? = nil,
            enhancedVpcRouting: Swift.Bool? = nil,
            expectedNextSnapshotScheduleTime: Foundation.Date? = nil,
            expectedNextSnapshotScheduleTimeStatus: Swift.String? = nil,
            hsmStatus: RedshiftClientTypes.HsmStatus? = nil,
            iamRoles: [RedshiftClientTypes.ClusterIamRole]? = nil,
            ipAddressType: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterPasswordSecretArn: Swift.String? = nil,
            masterPasswordSecretKmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            modifyStatus: Swift.String? = nil,
            multiAZ: Swift.String? = nil,
            multiAZSecondary: RedshiftClientTypes.SecondaryClusterInfo? = nil,
            nextMaintenanceWindowStartTime: Foundation.Date? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            pendingActions: [Swift.String]? = nil,
            pendingModifiedValues: RedshiftClientTypes.PendingModifiedValues? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            reservedNodeExchangeStatus: RedshiftClientTypes.ReservedNodeExchangeStatus? = nil,
            resizeInfo: RedshiftClientTypes.ResizeInfo? = nil,
            restoreStatus: RedshiftClientTypes.RestoreStatus? = nil,
            snapshotScheduleIdentifier: Swift.String? = nil,
            snapshotScheduleState: RedshiftClientTypes.ScheduleState? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalStorageCapacityInMegaBytes: Swift.Int? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.allowVersionUpgrade = allowVersionUpgrade
            self.aquaConfiguration = aquaConfiguration
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.availabilityZone = availabilityZone
            self.availabilityZoneRelocationStatus = availabilityZoneRelocationStatus
            self.clusterAvailabilityStatus = clusterAvailabilityStatus
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterNamespaceArn = clusterNamespaceArn
            self.clusterNodes = clusterNodes
            self.clusterParameterGroups = clusterParameterGroups
            self.clusterPublicKey = clusterPublicKey
            self.clusterRevisionNumber = clusterRevisionNumber
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.clusterStatus = clusterStatus
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.clusterVersion = clusterVersion
            self.customDomainCertificateArn = customDomainCertificateArn
            self.customDomainCertificateExpiryDate = customDomainCertificateExpiryDate
            self.customDomainName = customDomainName
            self.dataTransferProgress = dataTransferProgress
            self.dbName = dbName
            self.defaultIamRoleArn = defaultIamRoleArn
            self.deferredMaintenanceWindows = deferredMaintenanceWindows
            self.elasticIpStatus = elasticIpStatus
            self.elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions
            self.encrypted = encrypted
            self.endpoint = endpoint
            self.enhancedVpcRouting = enhancedVpcRouting
            self.expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime
            self.expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus
            self.hsmStatus = hsmStatus
            self.iamRoles = iamRoles
            self.ipAddressType = ipAddressType
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterPasswordSecretArn = masterPasswordSecretArn
            self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
            self.masterUsername = masterUsername
            self.modifyStatus = modifyStatus
            self.multiAZ = multiAZ
            self.multiAZSecondary = multiAZSecondary
            self.nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.pendingActions = pendingActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.reservedNodeExchangeStatus = reservedNodeExchangeStatus
            self.resizeInfo = resizeInfo
            self.restoreStatus = restoreStatus
            self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
            self.snapshotScheduleState = snapshotScheduleState
            self.tags = tags
            self.totalStorageCapacityInMegaBytes = totalStorageCapacityInMegaBytes
            self.vpcId = vpcId
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }
}

/// The account already has a cluster with the given identifier.
public struct ClusterAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    /// Describes a RevisionTarget.
    public struct RevisionTarget: Swift.Sendable {
        /// A unique string that identifies the version to update the cluster to. You can use this value in [ModifyClusterDbRevision].
        public var databaseRevision: Swift.String?
        /// The date on which the database revision was released.
        public var databaseRevisionReleaseDate: Foundation.Date?
        /// A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding [ClusterDbRevision].
        public var description: Swift.String?

        public init(
            databaseRevision: Swift.String? = nil,
            databaseRevisionReleaseDate: Foundation.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.databaseRevision = databaseRevision
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
            self.description = description
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a ClusterDbRevision.
    public struct ClusterDbRevision: Swift.Sendable {
        /// The unique identifier of the cluster.
        public var clusterIdentifier: Swift.String?
        /// A string representing the current cluster version.
        public var currentDatabaseRevision: Swift.String?
        /// The date on which the database revision was released.
        public var databaseRevisionReleaseDate: Foundation.Date?
        /// A list of RevisionTarget objects, where each object describes the database revision that a cluster can be updated to.
        public var revisionTargets: [RedshiftClientTypes.RevisionTarget]?

        public init(
            clusterIdentifier: Swift.String? = nil,
            currentDatabaseRevision: Swift.String? = nil,
            databaseRevisionReleaseDate: Foundation.Date? = nil,
            revisionTargets: [RedshiftClientTypes.RevisionTarget]? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.currentDatabaseRevision = currentDatabaseRevision
            self.databaseRevisionReleaseDate = databaseRevisionReleaseDate
            self.revisionTargets = revisionTargets
        }
    }
}

/// Cluster is already on the latest database revision.
public struct ClusterOnLatestRevisionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterOnLatestRevision" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    /// Describes a parameter group.
    public struct ClusterParameterGroup: Swift.Sendable {
        /// The description of the parameter group.
        public var description: Swift.String?
        /// The name of the cluster parameter group family that this cluster parameter group is compatible with.
        public var parameterGroupFamily: Swift.String?
        /// The name of the cluster parameter group.
        public var parameterGroupName: Swift.String?
        /// The list of tags for the cluster parameter group.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            description: Swift.String? = nil,
            parameterGroupFamily: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.parameterGroupFamily = parameterGroupFamily
            self.parameterGroupName = parameterGroupName
            self.tags = tags
        }
    }
}

/// A cluster parameter group with the same name already exists.
public struct ClusterParameterGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    public enum ParameterApplyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterApplyType] {
            return [
                .dynamic,
                .static
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "dynamic"
            case .static: return "static"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a parameter in a cluster parameter group.
    public struct Parameter: Swift.Sendable, Swift.Equatable {
        /// The valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide.
        public var applyType: RedshiftClientTypes.ParameterApplyType?
        /// The data type of the parameter.
        public var dataType: Swift.String?
        /// A description of the parameter.
        public var description: Swift.String?
        /// If true, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool?
        /// The earliest engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The value of the parameter. If ParameterName is wlm_json_configuration, then the maximum size of ParameterValue is 8000 characters.
        public var parameterValue: Swift.String?
        /// The source of the parameter value, such as "engine-default" or "user".
        public var source: Swift.String?

        public init(
            allowedValues: Swift.String? = nil,
            applyType: RedshiftClientTypes.ParameterApplyType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }
    }
}

/// The parameter group name does not refer to an existing parameter group.
public struct ClusterParameterGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request would result in the user exceeding the allowed number of cluster parameter groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterParameterGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterParameterGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request would exceed the allowed number of cluster instances for this account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A cluster security group with the same name already exists.
public struct ClusterSecurityGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSecurityGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request would result in the user exceeding the allowed number of cluster security groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSecurityGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QuotaExceeded.ClusterSecurityGroup" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value specified as a snapshot identifier is already used by an existing snapshot.
public struct ClusterSnapshotAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request would result in the user exceeding the allowed number of cluster snapshots.
public struct ClusterSnapshotQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSnapshotQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    /// Describes a subnet.
    public struct Subnet: Swift.Sendable {
        ///
        public var subnetAvailabilityZone: RedshiftClientTypes.AvailabilityZone?
        /// The identifier of the subnet.
        public var subnetIdentifier: Swift.String?
        /// The status of the subnet.
        public var subnetStatus: Swift.String?

        public init(
            subnetAvailabilityZone: RedshiftClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetStatus: Swift.String? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetStatus = subnetStatus
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a subnet group.
    public struct ClusterSubnetGroup: Swift.Sendable {
        /// The name of the cluster subnet group.
        public var clusterSubnetGroupName: Swift.String?
        /// The description of the cluster subnet group.
        public var description: Swift.String?
        /// The status of the cluster subnet group. Possible values are Complete, Incomplete and Invalid.
        public var subnetGroupStatus: Swift.String?
        /// A list of the VPC [Subnet] elements.
        public var subnets: [RedshiftClientTypes.Subnet]?
        /// The IP address types supported by this cluster subnet group. Possible values are ipv4 and dualstack.
        public var supportedClusterIpAddressTypes: [Swift.String]?
        /// The list of tags for the cluster subnet group.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The VPC ID of the cluster subnet group.
        public var vpcId: Swift.String?

        public init(
            clusterSubnetGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            subnetGroupStatus: Swift.String? = nil,
            subnets: [RedshiftClientTypes.Subnet]? = nil,
            supportedClusterIpAddressTypes: [Swift.String]? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.supportedClusterIpAddressTypes = supportedClusterIpAddressTypes
            self.tags = tags
            self.vpcId = vpcId
        }
    }
}

/// A ClusterSubnetGroupName is already used by an existing cluster subnet group.
public struct ClusterSubnetGroupAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The cluster subnet group name does not refer to an existing cluster subnet group.
public struct ClusterSubnetGroupNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request would result in user exceeding the allowed number of cluster subnet groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSubnetGroupQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetGroupQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request would result in user exceeding the allowed number of subnets in a cluster subnet groups. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ClusterSubnetQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterSubnetQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    /// Describes a cluster version, including the parameter group family and description of the version.
    public struct ClusterVersion: Swift.Sendable {
        /// The name of the cluster parameter group family for the cluster.
        public var clusterParameterGroupFamily: Swift.String?
        /// The version number used by the cluster.
        public var clusterVersion: Swift.String?
        /// The description of the cluster version.
        public var description: Swift.String?

        public init(
            clusterParameterGroupFamily: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.clusterVersion = clusterVersion
            self.description = description
        }
    }
}

/// There is a conflict while updating the resource policy.
public struct ConflictPolicyUpdateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictPolicyUpdateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct CopyClusterSnapshotInput: Swift.Sendable {
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints:
    ///
    /// * Must be the identifier for a valid cluster.
    public var sourceSnapshotClusterIdentifier: Swift.String?
    /// The identifier for the source snapshot. Constraints:
    ///
    /// * Must be the identifier for a valid automated snapshot whose state is available.
    /// This member is required.
    public var sourceSnapshotIdentifier: Swift.String?
    /// The identifier given to the new manual snapshot. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for the Amazon Web Services account that is making the request.
    /// This member is required.
    public var targetSnapshotIdentifier: Swift.String?

    public init(
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        sourceSnapshotClusterIdentifier: Swift.String? = nil,
        sourceSnapshotIdentifier: Swift.String? = nil,
        targetSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier
        self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
        self.targetSnapshotIdentifier = targetSnapshotIdentifier
    }
}

public struct CopyClusterSnapshotOutput: Swift.Sendable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

/// Cross-region snapshot copy was temporarily disabled. Try your request again.
public struct CopyToRegionDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CopyToRegionDisabledFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The authentication profile request is not valid. The profile name can't be null or empty. The authentication profile API operation must be available in the Amazon Web Services Region.
public struct InvalidAuthenticationProfileRequestFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAuthenticationProfileRequestFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateAuthenticationProfileInput: Swift.Sendable {
    /// The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
    /// This member is required.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile to be created.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

public struct CreateAuthenticationProfileOutput: Swift.Sendable {
    /// The content of the authentication profile in JSON format.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile that was created.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

/// There is no Amazon Redshift HSM client certificate with the specified identifier.
public struct HsmClientCertificateNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There is no Amazon Redshift HSM configuration with the specified identifier.
public struct HsmConfigurationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of nodes specified exceeds the allotted capacity of the cluster.
public struct InsufficientClusterCapacityFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientClusterCapacity" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The cluster subnet group cannot be deleted because it is in use.
public struct InvalidClusterSubnetGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSubnetGroupStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The provided cluster track name is not valid.
public struct InvalidClusterTrackFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterTrack" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Elastic IP (EIP) is invalid or cannot be found.
public struct InvalidElasticIpFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidElasticIpFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested subnet is not valid, or not all of the subnets are in the same VPC.
public struct InvalidSubnet: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The tag is invalid.
public struct InvalidTagFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The cluster subnet group does not cover all Availability Zones.
public struct InvalidVPCNetworkStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidVPCNetworkStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There are no subnets in your VPC with associated IPv6 CIDR blocks. To use dual-stack mode, associate an IPv6 CIDR block with each subnet in your VPC.
public struct Ipv6CidrBlockNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "Ipv6CidrBlockNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation would exceed the number of nodes allowed for a cluster.
public struct NumberOfNodesPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NumberOfNodesPerClusterLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation would exceed the number of nodes allotted to the account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct NumberOfNodesQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NumberOfNodesQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The application you attempted to find doesn't exist.
public struct RedshiftIdcApplicationNotExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationNotExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We could not find the specified snapshot schedule.
public struct SnapshotScheduleNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have exceeded the number of tags allowed.
public struct TagLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagLimitExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your account is not authorized to perform the requested operation.
public struct UnauthorizedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedOperation" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct CreateClusterInput: Swift.Sendable {
    /// Reserved.
    public var additionalInfo: Swift.String?
    /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster. Default: true
    public var allowVersionUpgrade: Swift.Bool?
    /// This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: 1 Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint. Example: us-east-2d Constraint: The specified Availability Zone must be in the same region as the current endpoint.
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is created.
    public var availabilityZoneRelocation: Swift.Bool?
    /// A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    ///
    ///
    /// Example: myexamplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to [Working with Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var clusterParameterGroupName: Swift.String?
    /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift.
    public var clusterSecurityGroups: [Swift.String]?
    /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
    public var clusterSubnetGroupName: Swift.String?
    /// The type of the cluster. When cluster type is specified as
    ///
    /// * single-node, the NumberOfNodes parameter is not required.
    ///
    /// * multi-node, the NumberOfNodes parameter is required.
    ///
    ///
    /// Valid Values: multi-node | single-node Default: multi-node
    public var clusterType: Swift.String?
    /// The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. Constraints: Only version 1.0 is currently available. Example: 1.0
    public var clusterVersion: Swift.String?
    /// The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to [Create a Database](https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html) in the Amazon Redshift Database Developer Guide. Default: dev Constraints:
    ///
    /// * Must contain 1 to 64 alphanumeric characters.
    ///
    /// * Must contain only lowercase letters.
    ///
    /// * Cannot be a word that is reserved by the service. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
    public var defaultIamRoleArn: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on. For more information about provisioning clusters in EC2-VPC, go to [Supported Platforms to Launch Your Cluster](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms) in the Amazon Redshift Cluster Management Guide.
    public var elasticIp: Swift.String?
    /// If true, the data in the cluster is encrypted at rest. Default: false
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to [Quotas and limits](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRoles: [Swift.String]?
    /// The IP address types that the cluster supports. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
    public var kmsKeyId: Swift.String?
    /// A flag that specifies whether to load sample data once the cluster is created.
    public var loadSampleData: Swift.String?
    /// An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the current track.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage this cluster's admin credentials. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
    public var manageMasterPassword: Swift.Bool?
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// The password associated with the admin user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Constraints:
    ///
    /// * Must be between 8 and 64 characters in length.
    ///
    /// * Must contain at least one uppercase letter.
    ///
    /// * Must contain at least one lowercase letter.
    ///
    /// * Must contain one number.
    ///
    /// * Can be any printable ASCII character (ASCII code 33-126) except ' (single quote), " (double quote), \, /, or @.
    public var masterUserPassword: Swift.String?
    /// The user name associated with the admin user account for the cluster that is being created. Constraints:
    ///
    /// * Must be 1 - 128 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * The first character must be a letter.
    ///
    /// * Must not contain a colon (:) or a slash (/).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var masterUsername: Swift.String?
    /// If true, Amazon Redshift will deploy the cluster in two Availability Zones (AZ).
    public var multiAZ: Swift.Bool?
    /// The node type to be provisioned for the cluster. For information about node types, go to [ Working with Clusters](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes) in the Amazon Redshift Cluster Management Guide. Valid Values: dc2.large | dc2.8xlarge | ra3.large | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
    /// This member is required.
    public var nodeType: Swift.String?
    /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. For information about determining how many nodes you need, go to [ Working with Clusters](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes) in the Amazon Redshift Cluster Management Guide. If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster. Default: 1 Constraints: Value must be at least 1 and no more than 100.
    public var numberOfNodes: Swift.Int?
    /// The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default: 5439 Valid Values:
    ///
    /// * For clusters with ra3 nodes - Select a port within the ranges 5431-5455 or 8191-8215. (If you have an existing cluster with ra3 nodes, it isn't required that you change the port to these ranges.)
    ///
    /// * For clusters with dc2 nodes - Select a port within the range 1150-65535.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see [Maintenance Windows](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows) in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network.
    public var publiclyAccessible: Swift.Bool?
    /// The Amazon resource name (ARN) of the Amazon Redshift IAM Identity Center application.
    public var redshiftIdcApplicationArn: Swift.String?
    /// A unique identifier for the snapshot schedule.
    public var snapshotScheduleIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        additionalInfo: Swift.String? = nil,
        allowVersionUpgrade: Swift.Bool? = nil,
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterSubnetGroupName: Swift.String? = nil,
        clusterType: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        dbName: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        iamRoles: [Swift.String]? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        loadSampleData: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil,
        snapshotScheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.allowVersionUpgrade = allowVersionUpgrade
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.clusterType = clusterType
        self.clusterVersion = clusterVersion
        self.dbName = dbName
        self.defaultIamRoleArn = defaultIamRoleArn
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.iamRoles = iamRoles
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.loadSampleData = loadSampleData
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.multiAZ = multiAZ
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
        self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension CreateClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateClusterInput(additionalInfo: \(Swift.String(describing: additionalInfo)), allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), aquaConfigurationStatus: \(Swift.String(describing: aquaConfigurationStatus)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneRelocation: \(Swift.String(describing: availabilityZoneRelocation)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterParameterGroupName: \(Swift.String(describing: clusterParameterGroupName)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterSubnetGroupName: \(Swift.String(describing: clusterSubnetGroupName)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), dbName: \(Swift.String(describing: dbName)), defaultIamRoleArn: \(Swift.String(describing: defaultIamRoleArn)), elasticIp: \(Swift.String(describing: elasticIp)), encrypted: \(Swift.String(describing: encrypted)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), iamRoles: \(Swift.String(describing: iamRoles)), ipAddressType: \(Swift.String(describing: ipAddressType)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), loadSampleData: \(Swift.String(describing: loadSampleData)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manageMasterPassword: \(Swift.String(describing: manageMasterPassword)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterPasswordSecretKmsKeyId: \(Swift.String(describing: masterPasswordSecretKmsKeyId)), masterUsername: \(Swift.String(describing: masterUsername)), multiAZ: \(Swift.String(describing: multiAZ)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), port: \(Swift.String(describing: port)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), redshiftIdcApplicationArn: \(Swift.String(describing: redshiftIdcApplicationArn)), snapshotScheduleIdentifier: \(Swift.String(describing: snapshotScheduleIdentifier)), tags: \(Swift.String(describing: tags)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

public struct CreateClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

///
public struct CreateClusterParameterGroupInput: Swift.Sendable {
    /// A description of the parameter group.
    /// This member is required.
    public var description: Swift.String?
    /// The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters. To get a list of valid parameter group family names, you can call [DescribeClusterParameterGroups]. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your Amazon Web Services account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0".
    /// This member is required.
    public var parameterGroupFamily: Swift.String?
    /// The name of the cluster parameter group. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique withing your Amazon Web Services account.
    ///
    ///
    /// This value is stored as a lower-case string.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        parameterGroupFamily: Swift.String? = nil,
        parameterGroupName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.parameterGroupFamily = parameterGroupFamily
        self.parameterGroupName = parameterGroupName
        self.tags = tags
    }
}

public struct CreateClusterParameterGroupOutput: Swift.Sendable {
    /// Describes a parameter group.
    public var clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup?

    public init(
        clusterParameterGroup: RedshiftClientTypes.ClusterParameterGroup? = nil
    )
    {
        self.clusterParameterGroup = clusterParameterGroup
    }
}

///
public struct CreateClusterSecurityGroupInput: Swift.Sendable {
    /// The name for the security group. Amazon Redshift stores the value as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 alphanumeric characters or hyphens.
    ///
    /// * Must not be "Default".
    ///
    /// * Must be unique for all security groups that are created by your Amazon Web Services account.
    ///
    ///
    /// Example: examplesecuritygroup
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// A description for the security group.
    /// This member is required.
    public var description: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterSecurityGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.description = description
        self.tags = tags
    }
}

public struct CreateClusterSecurityGroupOutput: Swift.Sendable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

///
public struct CreateClusterSnapshotInput: Swift.Sendable {
    /// The cluster identifier for which you want a snapshot.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account. Constraints:
    ///
    /// * Cannot be null, empty, or blank
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    ///
    ///
    /// Example: my-snapshot-id
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifier = snapshotIdentifier
        self.tags = tags
    }
}

public struct CreateClusterSnapshotOutput: Swift.Sendable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

///
public struct CreateClusterSubnetGroupInput: Swift.Sendable {
    /// The name for the subnet group. Amazon Redshift stores the value as a lowercase string. Constraints:
    ///
    /// * Must contain no more than 255 alphanumeric characters or hyphens.
    ///
    /// * Must not be "Default".
    ///
    /// * Must be unique for all subnet groups that are created by your Amazon Web Services account.
    ///
    ///
    /// Example: examplesubnetgroup
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?
    /// A description for the subnet group.
    /// This member is required.
    public var description: Swift.String?
    /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.description = description
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

public struct CreateClusterSubnetGroupOutput: Swift.Sendable {
    /// Describes a subnet group.
    public var clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?

    public init(
        clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup? = nil
    )
    {
        self.clusterSubnetGroup = clusterSubnetGroup
    }
}

/// An error occurred when an attempt was made to change the custom domain association.
public struct CustomCnameAssociationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomCnameAssociationFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateCustomDomainAssociationInput: Swift.Sendable {
    /// The cluster identifier that the custom domain is associated with.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The certificate Amazon Resource Name (ARN) for the custom domain name association.
    /// This member is required.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for a custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

public struct CreateCustomDomainAssociationOutput: Swift.Sendable {
    /// The identifier of the cluster that the custom domain is associated with.
    public var clusterIdentifier: Swift.String?
    /// The expiration time for the certificate for the custom domain.
    public var customDomainCertExpiryTime: Swift.String?
    /// The Amazon Resource Name (ARN) for the certificate associated with the custom domain name.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for the association result.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertExpiryTime: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertExpiryTime = customDomainCertExpiryTime
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

/// The account already has a Redshift-managed VPC endpoint with the given identifier.
public struct EndpointAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of Redshift-managed VPC endpoints per authorization has exceeded its limit.
public struct EndpointsPerAuthorizationLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointsPerAuthorizationLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of Redshift-managed VPC endpoints per cluster has exceeded its limit.
public struct EndpointsPerClusterLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointsPerClusterLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateEndpointAccessInput: Swift.Sendable {
    /// The cluster identifier of the cluster to access.
    public var clusterIdentifier: Swift.String?
    /// The Redshift-managed VPC endpoint name. An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
    public var resourceOwner: Swift.String?
    /// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
    /// This member is required.
    public var subnetGroupName: Swift.String?
    /// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.endpointName = endpointName
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct CreateEndpointAccessOutput: Swift.Sendable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: Foundation.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

/// The request would exceed the allowed number of event subscriptions for this account. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct EventSubscriptionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EventSubscriptionQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Amazon SNS has responded that there is a problem with the specified Amazon SNS topic.
public struct SNSInvalidTopicFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSInvalidTopic" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You do not have permission to publish to the specified Amazon SNS topic.
public struct SNSNoAuthorizationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSNoAuthorization" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An Amazon SNS topic with the specified Amazon Resource Name (ARN) does not exist.
public struct SNSTopicArnNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SNSTopicArnNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified Amazon Redshift event source could not be found.
public struct SourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There is already an existing event notification subscription with the specified name.
public struct SubscriptionAlreadyExistFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionAlreadyExist" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value specified for the event category was not one of the allowed values, or it specified a category that does not apply to the specified source type. The allowed values are Configuration, Management, Monitoring, and Security.
public struct SubscriptionCategoryNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionCategoryNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An Amazon Redshift event with the specified event ID does not exist.
public struct SubscriptionEventIdNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionEventIdNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value specified for the event severity was not one of the allowed values, or it specified a severity that does not apply to the specified source type. The allowed values are ERROR and INFO.
public struct SubscriptionSeverityNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionSeverityNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct CreateEventSubscriptionInput: Swift.Sendable {
    /// A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    /// This member is required.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the event subscription to be created. Constraints:
    ///
    /// * Cannot be null, empty, or blank.
    ///
    /// * Must contain from 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var subscriptionName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}

extension RedshiftClientTypes {

    /// Describes event subscriptions.
    public struct EventSubscription: Swift.Sendable {
        /// The name of the Amazon Redshift event notification subscription.
        public var custSubscriptionId: Swift.String?
        /// The Amazon Web Services account associated with the Amazon Redshift event notification subscription.
        public var customerAwsId: Swift.String?
        /// A boolean value indicating whether the subscription is enabled; true indicates that the subscription is enabled.
        public var enabled: Swift.Bool?
        /// The list of Amazon Redshift event categories specified in the event notification subscription. Values: Configuration, Management, Monitoring, Security, Pending
        public var eventCategoriesList: [Swift.String]?
        /// The event severity specified in the Amazon Redshift event notification subscription. Values: ERROR, INFO
        public var severity: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.
        public var snsTopicArn: Swift.String?
        /// A list of the sources that publish events to the Amazon Redshift event notification subscription.
        public var sourceIdsList: [Swift.String]?
        /// The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action.
        public var sourceType: Swift.String?
        /// The status of the Amazon Redshift event notification subscription. Constraints:
        ///
        /// * Can be one of the following: active | no-permission | topic-not-exist
        ///
        /// * The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public var status: Swift.String?
        /// The date and time the Amazon Redshift event notification subscription was created.
        public var subscriptionCreationTime: Foundation.Date?
        /// The list of tags for the event subscription.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            custSubscriptionId: Swift.String? = nil,
            customerAwsId: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            eventCategoriesList: [Swift.String]? = nil,
            severity: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            sourceIdsList: [Swift.String]? = nil,
            sourceType: Swift.String? = nil,
            status: Swift.String? = nil,
            subscriptionCreationTime: Foundation.Date? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.custSubscriptionId = custSubscriptionId
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.eventCategoriesList = eventCategoriesList
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
            self.tags = tags
        }
    }
}

public struct CreateEventSubscriptionOutput: Swift.Sendable {
    /// Describes event subscriptions.
    public var eventSubscription: RedshiftClientTypes.EventSubscription?

    public init(
        eventSubscription: RedshiftClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

/// There is already an existing Amazon Redshift HSM client certificate with the specified identifier.
public struct HsmClientCertificateAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The quota for HSM client certificates has been reached. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct HsmClientCertificateQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmClientCertificateQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct CreateHsmClientCertificateInput: Swift.Sendable {
    /// The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
    /// This member is required.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.tags = tags
    }
}

extension RedshiftClientTypes {

    /// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
    public struct HsmClientCertificate: Swift.Sendable {
        /// The identifier of the HSM client certificate.
        public var hsmClientCertificateIdentifier: Swift.String?
        /// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
        public var hsmClientCertificatePublicKey: Swift.String?
        /// The list of tags for the HSM client certificate.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmClientCertificatePublicKey: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmClientCertificatePublicKey = hsmClientCertificatePublicKey
            self.tags = tags
        }
    }
}

public struct CreateHsmClientCertificateOutput: Swift.Sendable {
    /// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
    public var hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate?

    public init(
        hsmClientCertificate: RedshiftClientTypes.HsmClientCertificate? = nil
    )
    {
        self.hsmClientCertificate = hsmClientCertificate
    }
}

/// There is already an existing Amazon Redshift HSM configuration with the specified identifier.
public struct HsmConfigurationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The quota for HSM configurations has been reached. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct HsmConfigurationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HsmConfigurationQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct CreateHsmConfigurationInput: Swift.Sendable {
    /// A text description of the HSM configuration to be created.
    /// This member is required.
    public var description: Swift.String?
    /// The identifier to be assigned to the new Amazon Redshift HSM configuration.
    /// This member is required.
    public var hsmConfigurationIdentifier: Swift.String?
    /// The IP address that the Amazon Redshift cluster must use to access the HSM.
    /// This member is required.
    public var hsmIpAddress: Swift.String?
    /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
    /// This member is required.
    public var hsmPartitionName: Swift.String?
    /// The password required to access the HSM partition.
    /// This member is required.
    public var hsmPartitionPassword: Swift.String?
    /// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
    /// This member is required.
    public var hsmServerPublicCertificate: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        hsmIpAddress: Swift.String? = nil,
        hsmPartitionName: Swift.String? = nil,
        hsmPartitionPassword: Swift.String? = nil,
        hsmServerPublicCertificate: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.hsmIpAddress = hsmIpAddress
        self.hsmPartitionName = hsmPartitionName
        self.hsmPartitionPassword = hsmPartitionPassword
        self.hsmServerPublicCertificate = hsmServerPublicCertificate
        self.tags = tags
    }
}

extension RedshiftClientTypes {

    /// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
    public struct HsmConfiguration: Swift.Sendable {
        /// A text description of the HSM configuration.
        public var description: Swift.String?
        /// The name of the Amazon Redshift HSM configuration.
        public var hsmConfigurationIdentifier: Swift.String?
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        public var hsmIpAddress: Swift.String?
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        public var hsmPartitionName: Swift.String?
        /// The list of tags for the HSM configuration.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            description: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            hsmIpAddress: Swift.String? = nil,
            hsmPartitionName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.hsmIpAddress = hsmIpAddress
            self.hsmPartitionName = hsmPartitionName
            self.tags = tags
        }
    }
}

public struct CreateHsmConfigurationOutput: Swift.Sendable {
    /// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
    public var hsmConfiguration: RedshiftClientTypes.HsmConfiguration?

    public init(
        hsmConfiguration: RedshiftClientTypes.HsmConfiguration? = nil
    )
    {
        self.hsmConfiguration = hsmConfiguration
    }
}

/// The integration you are trying to create already exists.
public struct IntegrationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A conflicting conditional operation is currently in progress against this resource. This typically occurs when there are multiple requests being made to the same resource at the same time, and these requests conflict with each other.
public struct IntegrationConflictOperationFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationConflictOperationFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You can't create any more zero-ETL or S3 event integrations because the quota has been reached.
public struct IntegrationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified integration source can't be found.
public struct IntegrationSourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationSourceNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified integration target can't be found.
public struct IntegrationTargetNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationTargetNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateIntegrationInput: Swift.Sendable {
    /// An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide. You can only include this parameter if you specify the KMSKeyId parameter.
    public var additionalEncryptionContext: [Swift.String: Swift.String]?
    /// A description of the integration.
    public var description: Swift.String?
    /// The name of the integration.
    /// This member is required.
    public var integrationName: Swift.String?
    /// An Key Management Service (KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, the default Amazon Web Services owned key is used.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database to use as the source for replication.
    /// This member is required.
    public var sourceArn: Swift.String?
    /// A list of tags.
    public var tagList: [RedshiftClientTypes.Tag]?
    /// The Amazon Resource Name (ARN) of the Amazon Redshift data warehouse to use as the target for replication.
    /// This member is required.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String: Swift.String]? = nil,
        description: Swift.String? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        tagList: [RedshiftClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.description = description
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.tagList = tagList
        self.targetArn = targetArn
    }
}

extension RedshiftClientTypes {

    /// The error of an inbound integration.
    public struct IntegrationError: Swift.Sendable {
        /// The error code of an inbound integration error.
        /// This member is required.
        public var errorCode: Swift.String?
        /// The error message of an inbound integration error.
        public var errorMessage: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }
    }
}

extension RedshiftClientTypes {

    public enum ZeroETLIntegrationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case modifying
        case needsAttention
        case syncing
        case sdkUnknown(Swift.String)

        public static var allCases: [ZeroETLIntegrationStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .modifying,
                .needsAttention,
                .syncing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .creating: return "creating"
            case .deleting: return "deleting"
            case .failed: return "failed"
            case .modifying: return "modifying"
            case .needsAttention: return "needs_attention"
            case .syncing: return "syncing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateIntegrationOutput: Swift.Sendable {
    /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
    public var additionalEncryptionContext: [Swift.String: Swift.String]?
    /// The time (UTC) when the integration was created.
    public var createTime: Foundation.Date?
    /// The description of the integration.
    public var description: Swift.String?
    /// Any errors associated with the integration.
    public var errors: [RedshiftClientTypes.IntegrationError]?
    /// The Amazon Resource Name (ARN) of the integration.
    public var integrationArn: Swift.String?
    /// The name of the integration.
    public var integrationName: Swift.String?
    /// The Key Management Service (KMS) key identifier for the key used to encrypt the integration.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database used as the source for replication.
    public var sourceArn: Swift.String?
    /// The current status of the integration.
    public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
    /// The list of tags associated with the integration.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The Amazon Resource Name (ARN) of the Amazon Redshift data warehouse to use as the target for replication.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String: Swift.String]? = nil,
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        errors: [RedshiftClientTypes.IntegrationError]? = nil,
        integrationArn: Swift.String? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.createTime = createTime
        self.description = description
        self.errors = errors
        self.integrationArn = integrationArn
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.status = status
        self.tags = tags
        self.targetArn = targetArn
    }
}

/// A dependent service denied access for the integration.
public struct DependentServiceAccessDeniedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DependentServiceAccessDenied" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The application you attempted to add already exists.
public struct RedshiftIdcApplicationAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum number of Redshift IAM Identity Center applications was exceeded.
public struct RedshiftIdcApplicationQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RedshiftIdcApplicationQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    public enum ServiceAuthorization: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceAuthorization] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// The Lake Formation scope.
    public struct LakeFormationQuery: Swift.Sendable {
        /// Determines whether the query scope is enabled or disabled.
        /// This member is required.
        public var authorization: RedshiftClientTypes.ServiceAuthorization?

        public init(
            authorization: RedshiftClientTypes.ServiceAuthorization? = nil
        )
        {
            self.authorization = authorization
        }
    }
}

extension RedshiftClientTypes {

    /// A list of scopes set up for Lake Formation integration.
    public enum LakeFormationScopeUnion: Swift.Sendable {
        /// The Lake Formation scope.
        case lakeformationquery(RedshiftClientTypes.LakeFormationQuery)
        case sdkUnknown(Swift.String)
    }
}

extension RedshiftClientTypes {

    /// A list of service integrations.
    public enum ServiceIntegrationsUnion: Swift.Sendable {
        /// A list of scopes set up for Lake Formation integration.
        case lakeformation([RedshiftClientTypes.LakeFormationScopeUnion])
        case sdkUnknown(Swift.String)
    }
}

public struct CreateRedshiftIdcApplicationInput: Swift.Sendable {
    /// The token issuer list for the Amazon Redshift IAM Identity Center application instance.
    public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    /// The IAM role ARN for the Amazon Redshift IAM Identity Center application instance. It has the required permissions to be assumed and invoke the IDC Identity Center API.
    /// This member is required.
    public var iamRoleArn: Swift.String?
    /// The display name for the Amazon Redshift IAM Identity Center application instance. It appears in the console.
    /// This member is required.
    public var idcDisplayName: Swift.String?
    /// The Amazon resource name (ARN) of the IAM Identity Center instance where Amazon Redshift creates a new managed application.
    /// This member is required.
    public var idcInstanceArn: Swift.String?
    /// The namespace for the Amazon Redshift IAM Identity Center application instance. It determines which managed application verifies the connection token.
    public var identityNamespace: Swift.String?
    /// The name of the Redshift application in IAM Identity Center.
    /// This member is required.
    public var redshiftIdcApplicationName: Swift.String?
    /// A collection of service integrations for the Redshift IAM Identity Center application.
    public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

    public init(
        authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
        iamRoleArn: Swift.String? = nil,
        idcDisplayName: Swift.String? = nil,
        idcInstanceArn: Swift.String? = nil,
        identityNamespace: Swift.String? = nil,
        redshiftIdcApplicationName: Swift.String? = nil,
        serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
    )
    {
        self.authorizedTokenIssuerList = authorizedTokenIssuerList
        self.iamRoleArn = iamRoleArn
        self.idcDisplayName = idcDisplayName
        self.idcInstanceArn = idcInstanceArn
        self.identityNamespace = identityNamespace
        self.redshiftIdcApplicationName = redshiftIdcApplicationName
        self.serviceIntegrations = serviceIntegrations
    }
}

extension RedshiftClientTypes {

    /// Contains properties for the Redshift IDC application.
    public struct RedshiftIdcApplication: Swift.Sendable {
        /// The authorized token issuer list for the Amazon Redshift IAM Identity Center application.
        public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
        /// The ARN for the Amazon Redshift IAM Identity Center application. It has the required permissions to be assumed and invoke the IDC Identity Center API.
        public var iamRoleArn: Swift.String?
        /// The display name for the Amazon Redshift IAM Identity Center application. It appears on the console.
        public var idcDisplayName: Swift.String?
        /// The ARN for the IAM Identity Center instance that Redshift integrates with.
        public var idcInstanceArn: Swift.String?
        /// The ARN for the Amazon Redshift IAM Identity Center application.
        public var idcManagedApplicationArn: Swift.String?
        /// The onboarding status for the Amazon Redshift IAM Identity Center application.
        public var idcOnboardStatus: Swift.String?
        /// The identity namespace for the Amazon Redshift IAM Identity Center application. It determines which managed application verifies the connection token.
        public var identityNamespace: Swift.String?
        /// The ARN for the Redshift application that integrates with IAM Identity Center.
        public var redshiftIdcApplicationArn: Swift.String?
        /// The name of the Redshift application in IAM Identity Center.
        public var redshiftIdcApplicationName: Swift.String?
        /// A list of service integrations for the Redshift IAM Identity Center application.
        public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

        public init(
            authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
            iamRoleArn: Swift.String? = nil,
            idcDisplayName: Swift.String? = nil,
            idcInstanceArn: Swift.String? = nil,
            idcManagedApplicationArn: Swift.String? = nil,
            idcOnboardStatus: Swift.String? = nil,
            identityNamespace: Swift.String? = nil,
            redshiftIdcApplicationArn: Swift.String? = nil,
            redshiftIdcApplicationName: Swift.String? = nil,
            serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
        )
        {
            self.authorizedTokenIssuerList = authorizedTokenIssuerList
            self.iamRoleArn = iamRoleArn
            self.idcDisplayName = idcDisplayName
            self.idcInstanceArn = idcInstanceArn
            self.idcManagedApplicationArn = idcManagedApplicationArn
            self.idcOnboardStatus = idcOnboardStatus
            self.identityNamespace = identityNamespace
            self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
            self.redshiftIdcApplicationName = redshiftIdcApplicationName
            self.serviceIntegrations = serviceIntegrations
        }
    }
}

public struct CreateRedshiftIdcApplicationOutput: Swift.Sendable {
    /// Contains properties for the Redshift IDC application.
    public var redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?

    public init(
        redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication? = nil
    )
    {
        self.redshiftIdcApplication = redshiftIdcApplication
    }
}

/// The scheduled action is not valid.
public struct InvalidScheduledActionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidScheduledAction" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The schedule you submitted isn't valid.
public struct InvalidScheduleFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSchedule" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The scheduled action already exists.
public struct ScheduledActionAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The quota for scheduled actions exceeded.
public struct ScheduledActionQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The action type specified for a scheduled action is not supported.
public struct ScheduledActionTypeUnsupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionTypeUnsupported" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    /// Describes a pause cluster operation. For example, a scheduled action to run the PauseCluster API operation.
    public struct PauseClusterMessage: Swift.Sendable {
        /// The identifier of the cluster to be paused.
        /// This member is required.
        public var clusterIdentifier: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a resize cluster operation. For example, a scheduled action to run the ResizeCluster API operation.
    public struct ResizeClusterMessage: Swift.Sendable {
        /// A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false, the resize type is elastic.
        public var classic: Swift.Bool?
        /// The unique identifier for the cluster to resize.
        /// This member is required.
        public var clusterIdentifier: Swift.String?
        /// The new cluster type for the specified cluster.
        public var clusterType: Swift.String?
        /// The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
        public var nodeType: Swift.String?
        /// The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
        public var numberOfNodes: Swift.Int?
        /// The identifier of the reserved node.
        public var reservedNodeId: Swift.String?
        /// The identifier of the target reserved node offering.
        public var targetReservedNodeOfferingId: Swift.String?

        public init(
            classic: Swift.Bool? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil,
            reservedNodeId: Swift.String? = nil,
            targetReservedNodeOfferingId: Swift.String? = nil
        )
        {
            self.classic = classic
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.reservedNodeId = reservedNodeId
            self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a resume cluster operation. For example, a scheduled action to run the ResumeCluster API operation.
    public struct ResumeClusterMessage: Swift.Sendable {
        /// The identifier of the cluster to be resumed.
        /// This member is required.
        public var clusterIdentifier: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
        }
    }
}

extension RedshiftClientTypes {

    /// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler.
    public struct ScheduledActionType: Swift.Sendable {
        /// An action that runs a PauseCluster API operation.
        public var pauseCluster: RedshiftClientTypes.PauseClusterMessage?
        /// An action that runs a ResizeCluster API operation.
        public var resizeCluster: RedshiftClientTypes.ResizeClusterMessage?
        /// An action that runs a ResumeCluster API operation.
        public var resumeCluster: RedshiftClientTypes.ResumeClusterMessage?

        public init(
            pauseCluster: RedshiftClientTypes.PauseClusterMessage? = nil,
            resizeCluster: RedshiftClientTypes.ResizeClusterMessage? = nil,
            resumeCluster: RedshiftClientTypes.ResumeClusterMessage? = nil
        )
        {
            self.pauseCluster = pauseCluster
            self.resizeCluster = resizeCluster
            self.resumeCluster = resumeCluster
        }
    }
}

public struct CreateScheduledActionInput: Swift.Sendable {
    /// If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about state of the scheduled action, see [ScheduledAction].
    public var enable: Swift.Bool?
    /// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var endTime: Foundation.Date?
    /// The IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var iamRole: Swift.String?
    /// The schedule in at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var startTime: Foundation.Date?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        enable: Swift.Bool? = nil,
        endTime: Foundation.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}

extension RedshiftClientTypes {

    public enum ScheduledActionState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionState] {
            return [
                .active,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
public struct CreateScheduledActionOutput: Swift.Sendable {
    /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
    public var endTime: Foundation.Date?
    /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRole: Swift.String?
    /// List of times when the scheduled action will run.
    public var nextInvocations: [Foundation.Date]?
    /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
    public var startTime: Foundation.Date?
    /// The state of the scheduled action. For example, DISABLED.
    public var state: RedshiftClientTypes.ScheduledActionState?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ra3.4xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        endTime: Foundation.Date? = nil,
        iamRole: Swift.String? = nil,
        nextInvocations: [Foundation.Date]? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        state: RedshiftClientTypes.ScheduledActionState? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.endTime = endTime
        self.iamRole = iamRole
        self.nextInvocations = nextInvocations
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.state = state
        self.targetAction = targetAction
    }
}

/// The snapshot copy grant can't be created because a grant with the same name already exists.
public struct SnapshotCopyGrantAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantAlreadyExistsFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Amazon Web Services account has exceeded the maximum number of snapshot copy grants in this region.
public struct SnapshotCopyGrantQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The result of the CreateSnapshotCopyGrant action.
public struct CreateSnapshotCopyGrantInput: Swift.Sendable {
    /// The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
    public var kmsKeyId: Swift.String?
    /// The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    /// This member is required.
    public var snapshotCopyGrantName: Swift.String?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        kmsKeyId: Swift.String? = nil,
        snapshotCopyGrantName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.snapshotCopyGrantName = snapshotCopyGrantName
        self.tags = tags
    }
}

extension RedshiftClientTypes {

    /// The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region. For more information about managing snapshot copy grants, go to [Amazon Redshift Database Encryption](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html) in the Amazon Redshift Cluster Management Guide.
    public struct SnapshotCopyGrant: Swift.Sendable {
        /// The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.
        public var kmsKeyId: Swift.String?
        /// The name of the snapshot copy grant.
        public var snapshotCopyGrantName: Swift.String?
        /// A list of tag instances.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            kmsKeyId: Swift.String? = nil,
            snapshotCopyGrantName: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
        }
    }
}

public struct CreateSnapshotCopyGrantOutput: Swift.Sendable {
    /// The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region. For more information about managing snapshot copy grants, go to [Amazon Redshift Database Encryption](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html) in the Amazon Redshift Cluster Management Guide.
    public var snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant?

    public init(
        snapshotCopyGrant: RedshiftClientTypes.SnapshotCopyGrant? = nil
    )
    {
        self.snapshotCopyGrant = snapshotCopyGrant
    }
}

/// The definition you submitted is not supported.
public struct ScheduleDefinitionTypeUnsupportedFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduleDefinitionTypeUnsupported" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified snapshot schedule already exists.
public struct SnapshotScheduleAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have exceeded the quota of snapshot schedules.
public struct SnapshotScheduleQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateSnapshotScheduleInput: Swift.Sendable {
    ///
    public var dryRun: Swift.Bool?
    ///
    public var nextInvocations: Swift.Int?
    /// The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)".
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the snapshot schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags you can use to search for the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        dryRun: Swift.Bool? = nil,
        nextInvocations: Swift.Int? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.dryRun = dryRun
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
public struct CreateSnapshotScheduleOutput: Swift.Sendable {
    /// The number of clusters associated with the schedule.
    public var associatedClusterCount: Swift.Int?
    /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
    public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
    ///
    public var nextInvocations: [Foundation.Date]?
    /// A list of ScheduleDefinitions.
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for the schedule.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags describing the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        associatedClusterCount: Swift.Int? = nil,
        associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
        nextInvocations: [Foundation.Date]? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.associatedClusterCount = associatedClusterCount
        self.associatedClusters = associatedClusters
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

/// The resource could not be found.
public struct ResourceNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Contains the output from the CreateTags action.
public struct CreateTagsInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    /// This member is required.
    public var resourceName: Swift.String?
    /// One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter Key and the corresponding value is passed in with the parameter Value. The Key and Value parameters are separated by a comma (,). Separate multiple tags with a space. For example, --tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0".
    /// This member is required.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        resourceName: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

/// The usage limit is not valid.
public struct InvalidUsageLimitFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUsageLimit" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The usage limit already exists.
public struct UsageLimitAlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsageLimitAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    public enum UsageLimitBreachAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disable
        case emitMetric
        case log
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitBreachAction] {
            return [
                .disable,
                .emitMetric,
                .log
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disable: return "disable"
            case .emitMetric: return "emit-metric"
            case .log: return "log"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum UsageLimitFeatureType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case concurrencyScaling
        case crossRegionDatasharing
        case spectrum
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitFeatureType] {
            return [
                .concurrencyScaling,
                .crossRegionDatasharing,
                .spectrum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .concurrencyScaling: return "concurrency-scaling"
            case .crossRegionDatasharing: return "cross-region-datasharing"
            case .spectrum: return "spectrum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum UsageLimitLimitType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dataScanned
        case time
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitLimitType] {
            return [
                .dataScanned,
                .time
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dataScanned: return "data-scanned"
            case .time: return "time"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum UsageLimitPeriod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daily
        case monthly
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageLimitPeriod] {
            return [
                .daily,
                .monthly,
                .weekly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daily: return "daily"
            case .monthly: return "monthly"
            case .weekly: return "weekly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateUsageLimitInput: Swift.Sendable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number.
    /// This member is required.
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. The default is log. For more information about this parameter, see [UsageLimit].
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster that you want to limit usage.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature that you want to limit.
    /// This member is required.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size. If FeatureType is spectrum, then LimitType must be data-scanned. If FeatureType is concurrency-scaling, then LimitType must be time. If FeatureType is cross-region-datasharing, then LimitType must be data-scanned.
    /// This member is required.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
    }
}

/// Describes a usage limit object for a cluster.
public struct CreateUsageLimitOutput: Swift.Sendable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
    ///
    /// * log - To log an event in a system table. The default is log.
    ///
    /// * emit-metric - To emit CloudWatch metrics.
    ///
    /// * disable - To disable the feature until the next usage period begins.
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster with a usage limit.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature to which the limit applies.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The identifier of the usage limit.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
        self.usageLimitId = usageLimitId
    }
}

/// An error occurred. The custom domain name couldn't be found.
public struct CustomDomainAssociationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CustomDomainAssociationNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RedshiftClientTypes {

    public struct DataShare: Swift.Sendable {
        /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
        public var allowPubliclyAccessibleConsumers: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
        public var dataShareArn: Swift.String?
        /// A value that specifies when the datashare has an association between producer and data consumers.
        public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
        /// The identifier of a datashare to show its managing entity.
        public var managedBy: Swift.String?
        /// The Amazon Resource Name (ARN) of the producer namespace.
        public var producerArn: Swift.String?

        public init(
            allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
            dataShareArn: Swift.String? = nil,
            dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
            managedBy: Swift.String? = nil,
            producerArn: Swift.String? = nil
        )
        {
            self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
            self.dataShareArn = dataShareArn
            self.dataShareAssociations = dataShareAssociations
            self.managedBy = managedBy
            self.producerArn = producerArn
        }
    }
}

extension RedshiftClientTypes {

    public enum DataShareStatusForConsumer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case available
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatusForConsumer] {
            return [
                .active,
                .available
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .available: return "AVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum DataShareStatusForProducer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case authorized
        case deauthorized
        case pendingAuthorization
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [DataShareStatusForProducer] {
            return [
                .active,
                .authorized,
                .deauthorized,
                .pendingAuthorization,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .authorized: return "AUTHORIZED"
            case .deauthorized: return "DEAUTHORIZED"
            case .pendingAuthorization: return "PENDING_AUTHORIZATION"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeauthorizeDataShareInput: Swift.Sendable {
    /// The identifier of the data consumer that is to have authorization removed from the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
    /// This member is required.
    public var consumerIdentifier: Swift.String?
    /// The namespace Amazon Resource Name (ARN) of the datashare to remove authorization from.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        consumerIdentifier: Swift.String? = nil,
        dataShareArn: Swift.String? = nil
    )
    {
        self.consumerIdentifier = consumerIdentifier
        self.dataShareArn = dataShareArn
    }
}

public struct DeauthorizeDataShareOutput: Swift.Sendable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer namespace.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

extension RedshiftClientTypes {

    /// Describes the default cluster parameters for a parameter group family.
    public struct DefaultClusterParameters: Swift.Sendable, Swift.Equatable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
        public var marker: Swift.String?
        /// The name of the cluster parameter group family to which the engine default parameters apply.
        public var parameterGroupFamily: Swift.String?
        /// The list of cluster default parameters.
        public var parameters: [RedshiftClientTypes.Parameter]?

        public init(
            marker: Swift.String? = nil,
            parameterGroupFamily: Swift.String? = nil,
            parameters: [RedshiftClientTypes.Parameter]? = nil
        )
        {
            self.marker = marker
            self.parameterGroupFamily = parameterGroupFamily
            self.parameters = parameters
        }
    }
}

public struct DeleteAuthenticationProfileInput: Swift.Sendable {
    /// The name of the authentication profile to delete.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

public struct DeleteAuthenticationProfileOutput: Swift.Sendable {
    /// The name of the authentication profile that was deleted.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

///
public struct DeleteClusterInput: Swift.Sendable {
    /// The identifier of the cluster to be deleted. Constraints:
    ///
    /// * Must contain lowercase characters.
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, SkipFinalClusterSnapshot must be false. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var finalClusterSnapshotIdentifier: Swift.String?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var finalClusterSnapshotRetentionPeriod: Swift.Int?
    /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is not created. If false, a final cluster snapshot is created before the cluster is deleted. The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot is false. Default: false
    public var skipFinalClusterSnapshot: Swift.Bool?

    public init(
        clusterIdentifier: Swift.String? = nil,
        finalClusterSnapshotIdentifier: Swift.String? = nil,
        finalClusterSnapshotRetentionPeriod: Swift.Int? = nil,
        skipFinalClusterSnapshot: Swift.Bool? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier
        self.finalClusterSnapshotRetentionPeriod = finalClusterSnapshotRetentionPeriod
        self.skipFinalClusterSnapshot = skipFinalClusterSnapshot
    }
}

public struct DeleteClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// The cluster parameter group action can not be completed because another task is in progress that involves the parameter group. Wait a few moments and try the operation again.
public struct InvalidClusterParameterGroupStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterParameterGroupState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DeleteClusterParameterGroupInput: Swift.Sendable {
    /// The name of the parameter group to be deleted. Constraints:
    ///
    /// * Must be the name of an existing cluster parameter group.
    ///
    /// * Cannot delete a default cluster parameter group.
    /// This member is required.
    public var parameterGroupName: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
    }
}

///
public struct DeleteClusterSecurityGroupInput: Swift.Sendable {
    /// The name of the cluster security group to be deleted.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?

    public init(
        clusterSecurityGroupName: Swift.String? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
    }
}

///
public struct DeleteClusterSnapshotInput: Swift.Sendable {
    /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
    public var snapshotClusterIdentifier: Swift.String?
    /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available, failed, or cancelled state.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?

    public init(
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

public struct DeleteClusterSnapshotOutput: Swift.Sendable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

/// The state of the subnet is invalid.
public struct InvalidClusterSubnetStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSubnetStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DeleteClusterSubnetGroupInput: Swift.Sendable {
    /// The name of the cluster subnet group name to be deleted.
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?

    public init(
        clusterSubnetGroupName: Swift.String? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
    }
}

public struct DeleteCustomDomainAssociationInput: Swift.Sendable {
    /// The identifier of the cluster to delete a custom domain association for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
    }
}

/// The endpoint name doesn't refer to an existing endpoint.
public struct EndpointNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The status of the endpoint is not valid.
public struct InvalidEndpointStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEndpointState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteEndpointAccessInput: Swift.Sendable {
    /// The Redshift-managed VPC endpoint to delete.
    /// This member is required.
    public var endpointName: Swift.String?

    public init(
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct DeleteEndpointAccessOutput: Swift.Sendable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: Foundation.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

/// The subscription request is invalid because it is a duplicate request. This subscription request is already in progress.
public struct InvalidSubscriptionStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubscriptionStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An Amazon Redshift event notification subscription with the specified name does not exist.
public struct SubscriptionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubscriptionNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DeleteEventSubscriptionInput: Swift.Sendable {
    /// The name of the Amazon Redshift event notification subscription to be deleted.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        subscriptionName: Swift.String? = nil
    )
    {
        self.subscriptionName = subscriptionName
    }
}

/// The specified HSM client certificate is not in the available state, or it is still in use by one or more Amazon Redshift clusters.
public struct InvalidHsmClientCertificateStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHsmClientCertificateStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DeleteHsmClientCertificateInput: Swift.Sendable {
    /// The identifier of the HSM client certificate to be deleted.
    /// This member is required.
    public var hsmClientCertificateIdentifier: Swift.String?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
    }
}

/// The specified HSM configuration is not in the available state, or it is still in use by one or more Amazon Redshift clusters.
public struct InvalidHsmConfigurationStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHsmConfigurationStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DeleteHsmConfigurationInput: Swift.Sendable {
    /// The identifier of the Amazon Redshift HSM configuration to be deleted.
    /// This member is required.
    public var hsmConfigurationIdentifier: Swift.String?

    public init(
        hsmConfigurationIdentifier: Swift.String? = nil
    )
    {
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
    }
}

/// The integration is in an invalid state and can't perform the requested operation.
public struct IntegrationConflictStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationConflictStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The integration can't be found.
public struct IntegrationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IntegrationNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteIntegrationInput: Swift.Sendable {
    /// The unique identifier of the integration to delete.
    /// This member is required.
    public var integrationArn: Swift.String?

    public init(
        integrationArn: Swift.String? = nil
    )
    {
        self.integrationArn = integrationArn
    }
}

public struct DeleteIntegrationOutput: Swift.Sendable {
    /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
    public var additionalEncryptionContext: [Swift.String: Swift.String]?
    /// The time (UTC) when the integration was created.
    public var createTime: Foundation.Date?
    /// The description of the integration.
    public var description: Swift.String?
    /// Any errors associated with the integration.
    public var errors: [RedshiftClientTypes.IntegrationError]?
    /// The Amazon Resource Name (ARN) of the integration.
    public var integrationArn: Swift.String?
    /// The name of the integration.
    public var integrationName: Swift.String?
    /// The Key Management Service (KMS) key identifier for the key used to encrypt the integration.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database used as the source for replication.
    public var sourceArn: Swift.String?
    /// The current status of the integration.
    public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
    /// The list of tags associated with the integration.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The Amazon Resource Name (ARN) of the Amazon Redshift data warehouse to use as the target for replication.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String: Swift.String]? = nil,
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        errors: [RedshiftClientTypes.IntegrationError]? = nil,
        integrationArn: Swift.String? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.createTime = createTime
        self.description = description
        self.errors = errors
        self.integrationArn = integrationArn
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.status = status
        self.tags = tags
        self.targetArn = targetArn
    }
}

public struct DeletePartnerInput: Swift.Sendable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster that receives data from the partner.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database that receives data from the partner.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    /// This member is required.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

public struct DeletePartnerOutput: Swift.Sendable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

public struct DeleteRedshiftIdcApplicationInput: Swift.Sendable {
    /// The ARN for a deleted Amazon Redshift IAM Identity Center application.
    /// This member is required.
    public var redshiftIdcApplicationArn: Swift.String?

    public init(
        redshiftIdcApplicationArn: Swift.String? = nil
    )
    {
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
    }
}

public struct DeleteResourcePolicyInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is deleted.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

/// The scheduled action cannot be found.
public struct ScheduledActionNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScheduledActionNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteScheduledActionInput: Swift.Sendable {
    /// The name of the scheduled action to delete.
    /// This member is required.
    public var scheduledActionName: Swift.String?

    public init(
        scheduledActionName: Swift.String? = nil
    )
    {
        self.scheduledActionName = scheduledActionName
    }
}

/// The snapshot copy grant can't be deleted because it is used by one or more clusters.
public struct InvalidSnapshotCopyGrantStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSnapshotCopyGrantStateFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified snapshot copy grant can't be found. Make sure that the name is typed correctly and that the grant exists in the destination region.
public struct SnapshotCopyGrantNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyGrantNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The result of the DeleteSnapshotCopyGrant action.
public struct DeleteSnapshotCopyGrantInput: Swift.Sendable {
    /// The name of the snapshot copy grant to delete.
    /// This member is required.
    public var snapshotCopyGrantName: Swift.String?

    public init(
        snapshotCopyGrantName: Swift.String? = nil
    )
    {
        self.snapshotCopyGrantName = snapshotCopyGrantName
    }
}

/// The cluster snapshot schedule state is not valid.
public struct InvalidClusterSnapshotScheduleStateFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClusterSnapshotScheduleState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSnapshotScheduleInput: Swift.Sendable {
    /// A unique identifier of the snapshot schedule to delete.
    /// This member is required.
    public var scheduleIdentifier: Swift.String?

    public init(
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.scheduleIdentifier = scheduleIdentifier
    }
}

/// Contains the output from the DeleteTags action.
public struct DeleteTagsInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The tag key that you want to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

/// The usage limit identifier can't be found.
public struct UsageLimitNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UsageLimitNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteUsageLimitInput: Swift.Sendable {
    /// The identifier of the usage limit to delete.
    /// This member is required.
    public var usageLimitId: Swift.String?

    public init(
        usageLimitId: Swift.String? = nil
    )
    {
        self.usageLimitId = usageLimitId
    }
}

public struct DescribeAccountAttributesInput: Swift.Sendable {
    /// A list of attribute names.
    public var attributeNames: [Swift.String]?

    public init(
        attributeNames: [Swift.String]? = nil
    )
    {
        self.attributeNames = attributeNames
    }
}

public struct DescribeAccountAttributesOutput: Swift.Sendable {
    /// A list of attributes assigned to an account.
    public var accountAttributes: [RedshiftClientTypes.AccountAttribute]?

    public init(
        accountAttributes: [RedshiftClientTypes.AccountAttribute]? = nil
    )
    {
        self.accountAttributes = accountAttributes
    }
}

public struct DescribeAuthenticationProfilesInput: Swift.Sendable {
    /// The name of the authentication profile to describe. If not specified then all authentication profiles owned by the account are listed.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileName = authenticationProfileName
    }
}

public struct DescribeAuthenticationProfilesOutput: Swift.Sendable {
    /// The list of authentication profiles.
    public var authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]?

    public init(
        authenticationProfiles: [RedshiftClientTypes.AuthenticationProfile]? = nil
    )
    {
        self.authenticationProfiles = authenticationProfiles
    }
}

public struct DescribeClusterDbRevisionsInput: Swift.Sendable {
    /// A unique identifier for a cluster whose ClusterDbRevisions you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
    public var clusterIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a DescribeClusterDbRevisions request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. Constraints: You can specify either the ClusterIdentifier parameter, or the marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeClusterDbRevisionsOutput: Swift.Sendable {
    /// A list of revisions.
    public var clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]?
    /// A string representing the starting point for the next set of revisions. If a value is returned in a response, you can retrieve the next set of revisions by providing the value in the marker parameter and retrying the command. If the marker field is empty, all revisions have already been returned.
    public var marker: Swift.String?

    public init(
        clusterDbRevisions: [RedshiftClientTypes.ClusterDbRevision]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterDbRevisions = clusterDbRevisions
        self.marker = marker
    }
}

///
public struct DescribeClusterParameterGroupsInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterParameterGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
    public var parameterGroupName: Swift.String?
    /// A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupName = parameterGroupName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

/// Contains the output from the [DescribeClusterParameterGroups] action.
public struct DescribeClusterParameterGroupsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [ClusterParameterGroup] instances. Each instance describes one cluster parameter group.
    public var parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]?

    public init(
        marker: Swift.String? = nil,
        parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]? = nil
    )
    {
        self.marker = marker
        self.parameterGroups = parameterGroups
    }
}

///
public struct DescribeClusterParametersInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterParameters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of a cluster parameter group for which to return details.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// The parameter types to return. Specify user to show parameters that are different form the default. Similarly, specify engine-default to show parameters that are the same as the default parameter group. Default: All parameter types returned. Valid Values: user | engine-default
    public var source: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupName: Swift.String? = nil,
        source: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupName = parameterGroupName
        self.source = source
    }
}

/// Contains the output from the [DescribeClusterParameters] action.
public struct DescribeClusterParametersOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [Parameter] instances. Each instance lists the parameters of one cluster parameter group.
    public var parameters: [RedshiftClientTypes.Parameter]?

    public init(
        marker: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil
    )
    {
        self.marker = marker
        self.parameters = parameters
    }
}

///
public struct DescribeClustersInput: Swift.Sendable {
    /// The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive. The default is that all clusters defined for an account are returned.
    public var clusterIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the ClusterIdentifier parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

/// Contains the output from the [DescribeClusters] action.
public struct DescribeClustersOutput: Swift.Sendable {
    /// A list of Cluster objects, where each object describes one cluster.
    public var clusters: [RedshiftClientTypes.Cluster]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusters: [RedshiftClientTypes.Cluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.marker = marker
    }
}

///
public struct DescribeClusterSecurityGroupsInput: Swift.Sendable {
    /// The name of a cluster security group for which you are requesting details. You must specify either the Marker parameter or a ClusterSecurityGroupName parameter, but not both. Example: securitygroup1
    public var clusterSecurityGroupName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSecurityGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You must specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterSecurityGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

///
public struct DescribeClusterSecurityGroupsOutput: Swift.Sendable {
    /// A list of [ClusterSecurityGroup] instances.
    public var clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterSecurityGroups: [RedshiftClientTypes.ClusterSecurityGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterSecurityGroups = clusterSecurityGroups
        self.marker = marker
    }
}

extension RedshiftClientTypes {

    public enum SnapshotAttributeToSortBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createTime
        case sourceType
        case totalSize
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotAttributeToSortBy] {
            return [
                .createTime,
                .sourceType,
                .totalSize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createTime: return "CREATE_TIME"
            case .sourceType: return "SOURCE_TYPE"
            case .totalSize: return "TOTAL_SIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum SortByOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortByOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASC"
            case .descending: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a sorting entity
    public struct SnapshotSortingEntity: Swift.Sendable {
        /// The category for sorting the snapshots.
        /// This member is required.
        public var attribute: RedshiftClientTypes.SnapshotAttributeToSortBy?
        /// The order for listing the attributes.
        public var sortOrder: RedshiftClientTypes.SortByOrder?

        public init(
            attribute: RedshiftClientTypes.SnapshotAttributeToSortBy? = nil,
            sortOrder: RedshiftClientTypes.SortByOrder? = nil
        )
        {
            self.attribute = attribute
            self.sortOrder = sortOrder
        }
    }
}

///
public struct DescribeClusterSnapshotsInput: Swift.Sendable {
    /// A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows:
    ///
    /// * If ClusterExists is set to true, ClusterIdentifier is required.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier is specified for a deleted cluster, snapshots associated with that cluster are returned.
    ///
    /// * If ClusterExists is set to false and ClusterIdentifier is specified for an existing cluster, no snapshots are returned.
    public var clusterExists: Swift.Bool?
    /// The identifier of the cluster which generated the requested snapshots.
    public var clusterIdentifier: Swift.String?
    /// A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2012-07-16T18:00:00Z
    public var endTime: Foundation.Date?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSnapshots] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your Amazon Web Services account, or do not specify the parameter.
    public var ownerAccount: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to describe cluster snapshots.
    public var snapshotArn: Swift.String?
    /// The snapshot identifier of the snapshot about which to return information.
    public var snapshotIdentifier: Swift.String?
    /// The type of snapshots for which you are requesting information. By default, snapshots of all types are returned. Valid Values: automated | manual
    public var snapshotType: Swift.String?
    ///
    public var sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]?
    /// A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2012-07-16T18:00:00Z
    public var startTime: Foundation.Date?
    /// A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterExists: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        snapshotType: Swift.String? = nil,
        sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]? = nil,
        startTime: Foundation.Date? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterExists = clusterExists
        self.clusterIdentifier = clusterIdentifier
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotArn = snapshotArn
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotType = snapshotType
        self.sortingEntities = sortingEntities
        self.startTime = startTime
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

/// Contains the output from the [DescribeClusterSnapshots] action.
public struct DescribeClusterSnapshotsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of [Snapshot] instances.
    public var snapshots: [RedshiftClientTypes.Snapshot]?

    public init(
        marker: Swift.String? = nil,
        snapshots: [RedshiftClientTypes.Snapshot]? = nil
    )
    {
        self.marker = marker
        self.snapshots = snapshots
    }
}

///
public struct DescribeClusterSubnetGroupsInput: Swift.Sendable {
    /// The name of the cluster subnet group for which information is requested.
    public var clusterSubnetGroupName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterSubnetGroups] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

/// Contains the output from the [DescribeClusterSubnetGroups] action.
public struct DescribeClusterSubnetGroupsOutput: Swift.Sendable {
    /// A list of [ClusterSubnetGroup] instances.
    public var clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterSubnetGroups: [RedshiftClientTypes.ClusterSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterSubnetGroups = clusterSubnetGroups
        self.marker = marker
    }
}

public struct DescribeClusterTracksInput: Swift.Sendable {
    /// The name of the maintenance track.
    public var maintenanceTrackName: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterTracks request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// An integer value for the maximum number of maintenance tracks to return.
    public var maxRecords: Swift.Int?

    public init(
        maintenanceTrackName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.maintenanceTrackName = maintenanceTrackName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension RedshiftClientTypes {

    /// Describes the operations that are allowed on a maintenance track.
    public struct SupportedOperation: Swift.Sendable {
        /// A list of the supported operations.
        public var operationName: Swift.String?

        public init(
            operationName: Swift.String? = nil
        )
        {
            self.operationName = operationName
        }
    }
}

extension RedshiftClientTypes {

    /// A maintenance track that you can switch the current track to.
    public struct UpdateTarget: Swift.Sendable {
        /// The cluster version for the new maintenance track.
        public var databaseVersion: Swift.String?
        /// The name of the new maintenance track.
        public var maintenanceTrackName: Swift.String?
        /// A list of operations supported by the maintenance track.
        public var supportedOperations: [RedshiftClientTypes.SupportedOperation]?

        public init(
            databaseVersion: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            supportedOperations: [RedshiftClientTypes.SupportedOperation]? = nil
        )
        {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.supportedOperations = supportedOperations
        }
    }
}

extension RedshiftClientTypes {

    /// Defines a maintenance track that determines which Amazon Redshift version to apply during a maintenance window. If the value for MaintenanceTrack is current, the cluster is updated to the most recently certified maintenance release. If the value is trailing, the cluster is updated to the previously certified maintenance release.
    public struct MaintenanceTrack: Swift.Sendable {
        /// The version number for the cluster release.
        public var databaseVersion: Swift.String?
        /// The name of the maintenance track. Possible values are current and trailing.
        public var maintenanceTrackName: Swift.String?
        /// An array of [UpdateTarget] objects to update with the maintenance track.
        public var updateTargets: [RedshiftClientTypes.UpdateTarget]?

        public init(
            databaseVersion: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            updateTargets: [RedshiftClientTypes.UpdateTarget]? = nil
        )
        {
            self.databaseVersion = databaseVersion
            self.maintenanceTrackName = maintenanceTrackName
            self.updateTargets = updateTargets
        }
    }
}

public struct DescribeClusterTracksOutput: Swift.Sendable {
    /// A list of maintenance tracks output by the DescribeClusterTracks operation.
    public var maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]?
    /// The starting point to return a set of response tracklist records. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.maintenanceTracks = maintenanceTracks
        self.marker = marker
    }
}

///
public struct DescribeClusterVersionsInput: Swift.Sendable {
    /// The name of a specific cluster parameter group family to return details for. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var clusterParameterGroupFamily: Swift.String?
    /// The specific cluster version to return. Example: 1.0
    public var clusterVersion: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeClusterVersions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        clusterParameterGroupFamily: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.clusterParameterGroupFamily = clusterParameterGroupFamily
        self.clusterVersion = clusterVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

/// Contains the output from the [DescribeClusterVersions] action.
public struct DescribeClusterVersionsOutput: Swift.Sendable {
    /// A list of Version elements.
    public var clusterVersions: [RedshiftClientTypes.ClusterVersion]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        clusterVersions: [RedshiftClientTypes.ClusterVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.clusterVersions = clusterVersions
        self.marker = marker
    }
}

public struct DescribeCustomDomainAssociationsInput: Swift.Sendable {
    /// The certificate Amazon Resource Name (ARN) for the custom domain association.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for the custom domain association.
    public var customDomainName: Swift.String?
    /// The marker for the custom domain association.
    public var marker: Swift.String?
    /// The maximum records setting for the associated custom domain.
    public var maxRecords: Swift.Int?

    public init(
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeCustomDomainAssociationsOutput: Swift.Sendable {
    /// The associations for the custom domain.
    public var associations: [RedshiftClientTypes.Association]?
    /// The marker for the custom domain association.
    public var marker: Swift.String?

    public init(
        associations: [RedshiftClientTypes.Association]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.associations = associations
        self.marker = marker
    }
}

public struct DescribeDataSharesInput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the datashare to describe details of.
    public var dataShareArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataShares] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?

    public init(
        dataShareArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.dataShareArn = dataShareArn
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

public struct DescribeDataSharesOutput: Swift.Sendable {
    /// The results returned from describing datashares.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataShares] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

public struct DescribeDataSharesForConsumerInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the consumer namespace that returns in the list of datashares.
    public var consumerArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForConsumer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// An identifier giving the status of a datashare in the consumer cluster. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
    public var status: RedshiftClientTypes.DataShareStatusForConsumer?

    public init(
        consumerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        status: RedshiftClientTypes.DataShareStatusForConsumer? = nil
    )
    {
        self.consumerArn = consumerArn
        self.marker = marker
        self.maxRecords = maxRecords
        self.status = status
    }
}

public struct DescribeDataSharesForConsumerOutput: Swift.Sendable {
    /// Shows the results of datashares available for consumers.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForConsumer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

public struct DescribeDataSharesForProducerInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForProducer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the producer namespace that returns in the list of datashares.
    public var producerArn: Swift.String?
    /// An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
    public var status: RedshiftClientTypes.DataShareStatusForProducer?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        producerArn: Swift.String? = nil,
        status: RedshiftClientTypes.DataShareStatusForProducer? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.producerArn = producerArn
        self.status = status
    }
}

public struct DescribeDataSharesForProducerOutput: Swift.Sendable {
    /// Shows the results of datashares available for producers.
    public var dataShares: [RedshiftClientTypes.DataShare]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDataSharesForProducer] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?

    public init(
        dataShares: [RedshiftClientTypes.DataShare]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.dataShares = dataShares
        self.marker = marker
    }
}

///
public struct DescribeDefaultClusterParametersInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeDefaultClusterParameters] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the cluster parameter group family.
    /// This member is required.
    public var parameterGroupFamily: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        parameterGroupFamily: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.parameterGroupFamily = parameterGroupFamily
    }
}

public struct DescribeDefaultClusterParametersOutput: Swift.Sendable {
    /// Describes the default cluster parameters for a parameter group family.
    public var defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters?

    public init(
        defaultClusterParameters: RedshiftClientTypes.DefaultClusterParameters? = nil
    )
    {
        self.defaultClusterParameters = defaultClusterParameters
    }
}

public struct DescribeEndpointAccessInput: Swift.Sendable {
    /// The cluster identifier associated with the described endpoint.
    public var clusterIdentifier: Swift.String?
    /// The name of the endpoint to be described.
    public var endpointName: Swift.String?
    /// An optional pagination token provided by a previous DescribeEndpointAccess request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a Marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The virtual private cloud (VPC) identifier with access to the cluster.
    public var vpcId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.endpointName = endpointName
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceOwner = resourceOwner
        self.vpcId = vpcId
    }
}

extension RedshiftClientTypes {

    /// Describes a Redshift-managed VPC endpoint.
    public struct EndpointAccess: Swift.Sendable {
        /// The DNS address of the endpoint.
        public var address: Swift.String?
        /// The cluster identifier of the cluster associated with the endpoint.
        public var clusterIdentifier: Swift.String?
        /// The time (UTC) that the endpoint was created.
        public var endpointCreateTime: Foundation.Date?
        /// The name of the endpoint.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        public var endpointStatus: Swift.String?
        /// The port number on which the cluster accepts incoming connections.
        public var port: Swift.Int?
        /// The Amazon Web Services account ID of the owner of the cluster.
        public var resourceOwner: Swift.String?
        /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
        public var subnetGroupName: Swift.String?
        /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
        public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
        /// The security groups associated with the endpoint.
        public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

        public init(
            address: Swift.String? = nil,
            clusterIdentifier: Swift.String? = nil,
            endpointCreateTime: Foundation.Date? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: Swift.String? = nil,
            port: Swift.Int? = nil,
            resourceOwner: Swift.String? = nil,
            subnetGroupName: Swift.String? = nil,
            vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
            vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.address = address
            self.clusterIdentifier = clusterIdentifier
            self.endpointCreateTime = endpointCreateTime
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.port = port
            self.resourceOwner = resourceOwner
            self.subnetGroupName = subnetGroupName
            self.vpcEndpoint = vpcEndpoint
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }
}

public struct DescribeEndpointAccessOutput: Swift.Sendable {
    /// The list of endpoints with access to the cluster.
    public var endpointAccessList: [RedshiftClientTypes.EndpointAccess]?
    /// An optional pagination token provided by a previous DescribeEndpointAccess request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?

    public init(
        endpointAccessList: [RedshiftClientTypes.EndpointAccess]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.endpointAccessList = endpointAccessList
        self.marker = marker
    }
}

public struct DescribeEndpointAuthorizationInput: Swift.Sendable {
    /// The Amazon Web Services account ID of either the cluster owner (grantor) or grantee. If Grantee parameter is true, then the Account value is of the grantor.
    public var account: Swift.String?
    /// The cluster identifier of the cluster to access.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to check authorization from a grantor or grantee point of view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If false (default), checks authorization from a grantor point of view.
    public var grantee: Swift.Bool?
    /// An optional pagination token provided by a previous DescribeEndpointAuthorization request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a Marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        grantee: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.grantee = grantee
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension RedshiftClientTypes {

    /// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
    public struct EndpointAuthorization: Swift.Sendable {
        /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
        public var allowedAllVPCs: Swift.Bool?
        /// The VPCs allowed access to the cluster.
        public var allowedVPCs: [Swift.String]?
        /// The time (UTC) when the authorization was created.
        public var authorizeTime: Foundation.Date?
        /// The cluster identifier.
        public var clusterIdentifier: Swift.String?
        /// The status of the cluster.
        public var clusterStatus: Swift.String?
        /// The number of Redshift-managed VPC endpoints created for the authorization.
        public var endpointCount: Swift.Int?
        /// The Amazon Web Services account ID of the grantee of the cluster.
        public var grantee: Swift.String?
        /// The Amazon Web Services account ID of the cluster owner.
        public var grantor: Swift.String?
        /// The status of the authorization action.
        public var status: RedshiftClientTypes.AuthorizationStatus?

        public init(
            allowedAllVPCs: Swift.Bool? = nil,
            allowedVPCs: [Swift.String]? = nil,
            authorizeTime: Foundation.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterStatus: Swift.String? = nil,
            endpointCount: Swift.Int? = nil,
            grantee: Swift.String? = nil,
            grantor: Swift.String? = nil,
            status: RedshiftClientTypes.AuthorizationStatus? = nil
        )
        {
            self.allowedAllVPCs = allowedAllVPCs
            self.allowedVPCs = allowedVPCs
            self.authorizeTime = authorizeTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterStatus = clusterStatus
            self.endpointCount = endpointCount
            self.grantee = grantee
            self.grantor = grantor
            self.status = status
        }
    }
}

public struct DescribeEndpointAuthorizationOutput: Swift.Sendable {
    /// The authorizations to an endpoint.
    public var endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]?
    /// An optional pagination token provided by a previous DescribeEndpointAuthorization request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?

    public init(
        endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.endpointAuthorizationList = endpointAuthorizationList
        self.marker = marker
    }
}

///
public struct DescribeEventCategoriesInput: Swift.Sendable {
    /// The source type, such as cluster or parameter group, to which the described event categories apply. Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.
    public var sourceType: Swift.String?

    public init(
        sourceType: Swift.String? = nil
    )
    {
        self.sourceType = sourceType
    }
}

extension RedshiftClientTypes {

    /// Describes event information.
    public struct EventInfoMap: Swift.Sendable {
        /// The category of an Amazon Redshift event.
        public var eventCategories: [Swift.String]?
        /// The description of an Amazon Redshift event.
        public var eventDescription: Swift.String?
        /// The identifier of an Amazon Redshift event.
        public var eventId: Swift.String?
        /// The severity of the event. Values: ERROR, INFO
        public var severity: Swift.String?

        public init(
            eventCategories: [Swift.String]? = nil,
            eventDescription: Swift.String? = nil,
            eventId: Swift.String? = nil,
            severity: Swift.String? = nil
        )
        {
            self.eventCategories = eventCategories
            self.eventDescription = eventDescription
            self.eventId = eventId
            self.severity = severity
        }
    }
}

extension RedshiftClientTypes {

    /// Describes event categories.
    public struct EventCategoriesMap: Swift.Sendable {
        /// The events in the event category.
        public var events: [RedshiftClientTypes.EventInfoMap]?
        /// The source type, such as cluster or cluster-snapshot, that the returned categories belong to.
        public var sourceType: Swift.String?

        public init(
            events: [RedshiftClientTypes.EventInfoMap]? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.events = events
            self.sourceType = sourceType
        }
    }
}

///
public struct DescribeEventCategoriesOutput: Swift.Sendable {
    /// A list of event categories descriptions.
    public var eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]?

    public init(
        eventCategoriesMapList: [RedshiftClientTypes.EventCategoriesMap]? = nil
    )
    {
        self.eventCategoriesMapList = eventCategoriesMapList
    }
}

extension RedshiftClientTypes {

    public enum SourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cluster
        case clusterParameterGroup
        case clusterSecurityGroup
        case clusterSnapshot
        case scheduledAction
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .cluster,
                .clusterParameterGroup,
                .clusterSecurityGroup,
                .clusterSnapshot,
                .scheduledAction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "cluster"
            case .clusterParameterGroup: return "cluster-parameter-group"
            case .clusterSecurityGroup: return "cluster-security-group"
            case .clusterSnapshot: return "cluster-snapshot"
            case .scheduledAction: return "scheduled-action"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

///
public struct DescribeEventsInput: Swift.Sendable {
    /// The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned. Default: 60
    public var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var endTime: Foundation.Date?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeEvents] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.
    ///
    /// * Specify a cluster identifier when SourceType is cluster.
    ///
    /// * Specify a cluster security group name when SourceType is cluster-security-group.
    ///
    /// * Specify a cluster parameter group name when SourceType is cluster-parameter-group.
    ///
    /// * Specify a cluster snapshot identifier when SourceType is cluster-snapshot.
    public var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be provided.
    ///
    /// * Specify cluster when SourceIdentifier is a cluster identifier.
    ///
    /// * Specify cluster-security-group when SourceIdentifier is a cluster security group name.
    ///
    /// * Specify cluster-parameter-group when SourceIdentifier is a cluster parameter group name.
    ///
    /// * Specify cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.
    public var sourceType: RedshiftClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the [ISO8601 Wikipedia page.](http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
    public var startTime: Foundation.Date?

    public init(
        duration: Swift.Int? = nil,
        endTime: Foundation.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: RedshiftClientTypes.SourceType? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension RedshiftClientTypes {

    /// Describes an event.
    public struct Event: Swift.Sendable {
        /// The date and time of the event.
        public var date: Foundation.Date?
        /// A list of the event categories. Values: Configuration, Management, Monitoring, Security, Pending
        public var eventCategories: [Swift.String]?
        /// The identifier of the event.
        public var eventId: Swift.String?
        /// The text of this event.
        public var message: Swift.String?
        /// The severity of the event. Values: ERROR, INFO
        public var severity: Swift.String?
        /// The identifier for the source of the event.
        public var sourceIdentifier: Swift.String?
        /// The source type for this event.
        public var sourceType: RedshiftClientTypes.SourceType?

        public init(
            date: Foundation.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            eventId: Swift.String? = nil,
            message: Swift.String? = nil,
            severity: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: RedshiftClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.eventCategories = eventCategories
            self.eventId = eventId
            self.message = message
            self.severity = severity
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }
}

///
public struct DescribeEventsOutput: Swift.Sendable {
    /// A list of Event instances.
    public var events: [RedshiftClientTypes.Event]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        events: [RedshiftClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

///
public struct DescribeEventSubscriptionsInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the Amazon Redshift event notification subscription to be described.
    public var subscriptionName: Swift.String?
    /// A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        subscriptionName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.subscriptionName = subscriptionName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

///
public struct DescribeEventSubscriptionsOutput: Swift.Sendable {
    /// A list of event subscriptions.
    public var eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        eventSubscriptionsList: [RedshiftClientTypes.EventSubscription]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.eventSubscriptionsList = eventSubscriptionsList
        self.marker = marker
    }
}

///
public struct DescribeHsmClientCertificatesInput: Swift.Sendable {
    /// The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your Amazon Web Services account.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeHsmClientCertificates] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        hsmClientCertificateIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

///
public struct DescribeHsmClientCertificatesOutput: Swift.Sendable {
    /// A list of the identifiers for one or more HSM client certificates used by Amazon Redshift clusters to store and retrieve database encryption keys in an HSM.
    public var hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        hsmClientCertificates: [RedshiftClientTypes.HsmClientCertificate]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hsmClientCertificates = hsmClientCertificates
        self.marker = marker
    }
}

///
public struct DescribeHsmConfigurationsInput: Swift.Sendable {
    /// The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your Amazon Web Services account.
    public var hsmConfigurationIdentifier: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeHsmConfigurations] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        hsmConfigurationIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

///
public struct DescribeHsmConfigurationsOutput: Swift.Sendable {
    /// A list of HsmConfiguration objects.
    public var hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hsmConfigurations = hsmConfigurations
        self.marker = marker
    }
}

public struct DescribeInboundIntegrationsInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the inbound integration.
    public var integrationArn: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeInboundIntegrations] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) of the target of an inbound integration.
    public var targetArn: Swift.String?

    public init(
        integrationArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.integrationArn = integrationArn
        self.marker = marker
        self.maxRecords = maxRecords
        self.targetArn = targetArn
    }
}

extension RedshiftClientTypes {

    /// The content of an inbound integration.
    public struct InboundIntegration: Swift.Sendable {
        /// The creation time of an inbound integration.
        public var createTime: Foundation.Date?
        /// The outstanding errors of an inbound integration. Each item is an "IntegrationError". This is null if there is no error.
        public var errors: [RedshiftClientTypes.IntegrationError]?
        /// The Amazon Resource Name (ARN) of an inbound integration.
        public var integrationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the source of an inbound integration.
        public var sourceArn: Swift.String?
        /// The status of an inbound integration.
        public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
        /// The Amazon Resource Name (ARN) of the target of an inbound integration.
        public var targetArn: Swift.String?

        public init(
            createTime: Foundation.Date? = nil,
            errors: [RedshiftClientTypes.IntegrationError]? = nil,
            integrationArn: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.createTime = createTime
            self.errors = errors
            self.integrationArn = integrationArn
            self.sourceArn = sourceArn
            self.status = status
            self.targetArn = targetArn
        }
    }
}

public struct DescribeInboundIntegrationsOutput: Swift.Sendable {
    /// A list of [InboundIntegration] instances.
    public var inboundIntegrations: [RedshiftClientTypes.InboundIntegration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        inboundIntegrations: [RedshiftClientTypes.InboundIntegration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.inboundIntegrations = inboundIntegrations
        self.marker = marker
    }
}

extension RedshiftClientTypes {

    public enum DescribeIntegrationsFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case integrationArn
        case sourceArn
        case sourceTypes
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribeIntegrationsFilterName] {
            return [
                .integrationArn,
                .sourceArn,
                .sourceTypes,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .integrationArn: return "integration-arn"
            case .sourceArn: return "source-arn"
            case .sourceTypes: return "source-types"
            case .status: return "status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// A set of elements to filter the returned integrations.
    public struct DescribeIntegrationsFilter: Swift.Sendable {
        /// Specifies the type of integration filter.
        /// This member is required.
        public var name: RedshiftClientTypes.DescribeIntegrationsFilterName?
        /// Specifies the values to filter on.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.DescribeIntegrationsFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct DescribeIntegrationsInput: Swift.Sendable {
    /// A filter that specifies one or more resources to return.
    public var filters: [RedshiftClientTypes.DescribeIntegrationsFilter]?
    /// The unique identifier of the integration.
    public var integrationArn: Swift.String?
    /// An optional pagination token provided by a previous DescribeIntegrations request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?

    public init(
        filters: [RedshiftClientTypes.DescribeIntegrationsFilter]? = nil,
        integrationArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.filters = filters
        self.integrationArn = integrationArn
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension RedshiftClientTypes {

    public struct Integration: Swift.Sendable {
        /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
        public var additionalEncryptionContext: [Swift.String: Swift.String]?
        /// The time (UTC) when the integration was created.
        public var createTime: Foundation.Date?
        /// The description of the integration.
        public var description: Swift.String?
        /// Any errors associated with the integration.
        public var errors: [RedshiftClientTypes.IntegrationError]?
        /// The Amazon Resource Name (ARN) of the integration.
        public var integrationArn: Swift.String?
        /// The name of the integration.
        public var integrationName: Swift.String?
        /// The Key Management Service (KMS) key identifier for the key used to encrypt the integration.
        public var kmsKeyId: Swift.String?
        /// The Amazon Resource Name (ARN) of the database used as the source for replication.
        public var sourceArn: Swift.String?
        /// The current status of the integration.
        public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
        /// The list of tags associated with the integration.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the Amazon Redshift data warehouse to use as the target for replication.
        public var targetArn: Swift.String?

        public init(
            additionalEncryptionContext: [Swift.String: Swift.String]? = nil,
            createTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            errors: [RedshiftClientTypes.IntegrationError]? = nil,
            integrationArn: Swift.String? = nil,
            integrationName: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.additionalEncryptionContext = additionalEncryptionContext
            self.createTime = createTime
            self.description = description
            self.errors = errors
            self.integrationArn = integrationArn
            self.integrationName = integrationName
            self.kmsKeyId = kmsKeyId
            self.sourceArn = sourceArn
            self.status = status
            self.tags = tags
            self.targetArn = targetArn
        }
    }
}

public struct DescribeIntegrationsOutput: Swift.Sendable {
    /// List of integrations that are described.
    public var integrations: [RedshiftClientTypes.Integration]?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?

    public init(
        integrations: [RedshiftClientTypes.Integration]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.integrations = integrations
        self.marker = marker
    }
}

///
public struct DescribeLoggingStatusInput: Swift.Sendable {
    /// The identifier of the cluster from which to get the logging status. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

extension RedshiftClientTypes {

    public enum LogDestinationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudwatch
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDestinationType] {
            return [
                .cloudwatch,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudwatch: return "cloudwatch"
            case .s3: return "s3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Describes the status of logging for a cluster.
public struct DescribeLoggingStatusOutput: Swift.Sendable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: Foundation.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: Foundation.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: Foundation.Date? = nil,
        lastSuccessfulDeliveryTime: Foundation.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

extension RedshiftClientTypes {

    public enum NodeConfigurationOptionsFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case estimatedDiskUtilizationPercent
        case mode
        case nodeType
        case numNodes
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeConfigurationOptionsFilterName] {
            return [
                .estimatedDiskUtilizationPercent,
                .mode,
                .nodeType,
                .numNodes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .estimatedDiskUtilizationPercent: return "EstimatedDiskUtilizationPercent"
            case .mode: return "Mode"
            case .nodeType: return "NodeType"
            case .numNodes: return "NumberOfNodes"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    public enum OperatorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case between
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatorType] {
            return [
                .between,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .between: return "between"
            case .eq: return "eq"
            case .ge: return "ge"
            case .gt: return "gt"
            case .in: return "in"
            case .le: return "le"
            case .lt: return "lt"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// A set of elements to filter the returned node configurations.
    public struct NodeConfigurationOptionsFilter: Swift.Sendable {
        /// The name of the element to filter.
        public var name: RedshiftClientTypes.NodeConfigurationOptionsFilterName?
        /// The filter operator. If filter Name is NodeType only the 'in' operator is supported. Provide one value to evaluate for 'eq', 'lt', 'le', 'gt', and 'ge'. Provide two values to evaluate for 'between'. Provide a list of values for 'in'.
        public var `operator`: RedshiftClientTypes.OperatorType?
        /// List of values. Compare Name using Operator to Values. If filter Name is NumberOfNodes, then values can range from 0 to 200. If filter Name is EstimatedDiskUtilizationPercent, then values can range from 0 to 100. For example, filter NumberOfNodes (name) GT (operator) 3 (values).
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.NodeConfigurationOptionsFilterName? = nil,
            `operator`: RedshiftClientTypes.OperatorType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }
}

public struct DescribeNodeConfigurationOptionsInput: Swift.Sendable {
    /// The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster.
    /// This member is required.
    public var actionType: RedshiftClientTypes.ActionType?
    /// The identifier of the cluster to evaluate for possible node configurations.
    public var clusterIdentifier: Swift.String?
    /// A set of name, operator, and value items to filter the results.
    public var filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeNodeConfigurationOptions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 500 Constraints: minimum 100, maximum 500.
    public var maxRecords: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    public var ownerAccount: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to describe node configuration.
    public var snapshotArn: Swift.String?
    /// The identifier of the snapshot to evaluate for possible node configurations.
    public var snapshotIdentifier: Swift.String?

    public init(
        actionType: RedshiftClientTypes.ActionType? = nil,
        clusterIdentifier: Swift.String? = nil,
        filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.clusterIdentifier = clusterIdentifier
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.ownerAccount = ownerAccount
        self.snapshotArn = snapshotArn
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension RedshiftClientTypes {

    public enum Mode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case highPerformance
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Mode] {
            return [
                .highPerformance,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .highPerformance: return "high-performance"
            case .standard: return "standard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// A list of node configurations.
    public struct NodeConfigurationOption: Swift.Sendable {
        /// The estimated disk utilizaton percentage.
        public var estimatedDiskUtilizationPercent: Swift.Double?
        /// The category of the node configuration recommendation.
        public var mode: RedshiftClientTypes.Mode?
        /// The node type, such as, "ra3.4xlarge".
        public var nodeType: Swift.String?
        /// The number of nodes.
        public var numberOfNodes: Swift.Int?

        public init(
            estimatedDiskUtilizationPercent: Swift.Double? = nil,
            mode: RedshiftClientTypes.Mode? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int? = nil
        )
        {
            self.estimatedDiskUtilizationPercent = estimatedDiskUtilizationPercent
            self.mode = mode
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
        }
    }
}

public struct DescribeNodeConfigurationOptionsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of valid node configurations.
    public var nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]?

    public init(
        marker: Swift.String? = nil,
        nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]? = nil
    )
    {
        self.marker = marker
        self.nodeConfigurationOptionList = nodeConfigurationOptionList
    }
}

///
public struct DescribeOrderableClusterOptionsInput: Swift.Sendable {
    /// The version filter value. Specify this parameter to show only the available offerings matching the specified version. Default: All versions. Constraints: Must be one of the version returned from [DescribeClusterVersions].
    public var clusterVersion: Swift.String?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeOrderableClusterOptions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
    public var nodeType: Swift.String?

    public init(
        clusterVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nodeType: Swift.String? = nil
    )
    {
        self.clusterVersion = clusterVersion
        self.marker = marker
        self.maxRecords = maxRecords
        self.nodeType = nodeType
    }
}

extension RedshiftClientTypes {

    /// Describes an orderable cluster option.
    public struct OrderableClusterOption: Swift.Sendable {
        /// A list of availability zones for the orderable cluster.
        public var availabilityZones: [RedshiftClientTypes.AvailabilityZone]?
        /// The cluster type, for example multi-node.
        public var clusterType: Swift.String?
        /// The version of the orderable cluster.
        public var clusterVersion: Swift.String?
        /// The node type for the orderable cluster.
        public var nodeType: Swift.String?

        public init(
            availabilityZones: [RedshiftClientTypes.AvailabilityZone]? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            nodeType: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
        }
    }
}

/// Contains the output from the [DescribeOrderableClusterOptions] action.
public struct DescribeOrderableClusterOptionsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// An OrderableClusterOption structure containing information about orderable options for the cluster.
    public var orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]?

    public init(
        marker: Swift.String? = nil,
        orderableClusterOptions: [RedshiftClientTypes.OrderableClusterOption]? = nil
    )
    {
        self.marker = marker
        self.orderableClusterOptions = orderableClusterOptions
    }
}

public struct DescribePartnersInput: Swift.Sendable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster whose partner integration is being described.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.
    public var databaseName: Swift.String?
    /// The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.
    public var partnerName: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

extension RedshiftClientTypes {

    public enum PartnerIntegrationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case connectionfailure
        case inactive
        case runtimefailure
        case sdkUnknown(Swift.String)

        public static var allCases: [PartnerIntegrationStatus] {
            return [
                .active,
                .connectionfailure,
                .inactive,
                .runtimefailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .connectionfailure: return "ConnectionFailure"
            case .inactive: return "Inactive"
            case .runtimefailure: return "RuntimeFailure"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// Describes a partner integration.
    public struct PartnerIntegrationInfo: Swift.Sendable {
        /// The date (UTC) that the partner integration was created.
        public var createdAt: Foundation.Date?
        /// The name of the database that receives data from a partner.
        public var databaseName: Swift.String?
        /// The name of the partner.
        public var partnerName: Swift.String?
        /// The partner integration status.
        public var status: RedshiftClientTypes.PartnerIntegrationStatus?
        /// The status message provided by the partner.
        public var statusMessage: Swift.String?
        /// The date (UTC) that the partner integration status was last updated by the partner.
        public var updatedAt: Foundation.Date?

        public init(
            createdAt: Foundation.Date? = nil,
            databaseName: Swift.String? = nil,
            partnerName: Swift.String? = nil,
            status: RedshiftClientTypes.PartnerIntegrationStatus? = nil,
            statusMessage: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.databaseName = databaseName
            self.partnerName = partnerName
            self.status = status
            self.statusMessage = statusMessage
            self.updatedAt = updatedAt
        }
    }
}

public struct DescribePartnersOutput: Swift.Sendable {
    /// A list of partner integrations.
    public var partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]?

    public init(
        partnerIntegrationInfoList: [RedshiftClientTypes.PartnerIntegrationInfo]? = nil
    )
    {
        self.partnerIntegrationInfoList = partnerIntegrationInfoList
    }
}

public struct DescribeRedshiftIdcApplicationsInput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    public var redshiftIdcApplicationArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
    }
}

public struct DescribeRedshiftIdcApplicationsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The list of Amazon Redshift IAM Identity Center applications.
    public var redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]?

    public init(
        marker: Swift.String? = nil,
        redshiftIdcApplications: [RedshiftClientTypes.RedshiftIdcApplication]? = nil
    )
    {
        self.marker = marker
        self.redshiftIdcApplications = redshiftIdcApplications
    }
}

/// The reserved-node exchange status wasn't found.
public struct ReservedNodeExchangeNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeExchangeNotFond" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeReservedNodeExchangeStatusInput: Swift.Sendable {
    /// An optional pagination token provided by a previous DescribeReservedNodeExchangeStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a Marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The identifier of the reserved-node exchange request.
    public var reservedNodeExchangeRequestId: Swift.String?
    /// The identifier of the source reserved node in a reserved-node exchange request.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeExchangeRequestId: Swift.String? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeExchangeRequestId = reservedNodeExchangeRequestId
        self.reservedNodeId = reservedNodeId
    }
}

public struct DescribeReservedNodeExchangeStatusOutput: Swift.Sendable {
    /// A pagination token provided by a previous DescribeReservedNodeExchangeStatus request.
    public var marker: Swift.String?
    /// The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.
    public var reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeExchangeStatusDetails = reservedNodeExchangeStatusDetails
    }
}

///
public struct DescribeReservedNodeOfferingsInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeReservedNodeOfferings] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The unique identifier for the offering.
    public var reservedNodeOfferingId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeOfferingId = reservedNodeOfferingId
    }
}

extension RedshiftClientTypes {

    /// Describes a reserved node offering.
    public struct ReservedNodeOffering: Swift.Sendable {
        /// The currency code for the compute nodes offering.
        public var currencyCode: Swift.String?
        /// The duration, in seconds, for which the offering will reserve the node.
        public var duration: Swift.Int?
        /// The upfront fixed charge you will pay to purchase the specific reserved node offering.
        public var fixedPrice: Swift.Double?
        /// The node type offered by the reserved node offering.
        public var nodeType: Swift.String?
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        public var offeringType: Swift.String?
        /// The charge to your account regardless of whether you are creating any clusters using the node offering. Recurring charges are only in effect for heavy-utilization reserved nodes.
        public var recurringCharges: [RedshiftClientTypes.RecurringCharge]?
        /// The offering identifier.
        public var reservedNodeOfferingId: Swift.String?
        ///
        public var reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType?
        /// The rate you are charged for each hour the cluster that is using the offering is running.
        public var usagePrice: Swift.Double?

        public init(
            currencyCode: Swift.String? = nil,
            duration: Swift.Int? = nil,
            fixedPrice: Swift.Double? = nil,
            nodeType: Swift.String? = nil,
            offeringType: Swift.String? = nil,
            recurringCharges: [RedshiftClientTypes.RecurringCharge]? = nil,
            reservedNodeOfferingId: Swift.String? = nil,
            reservedNodeOfferingType: RedshiftClientTypes.ReservedNodeOfferingType? = nil,
            usagePrice: Swift.Double? = nil
        )
        {
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.nodeType = nodeType
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.reservedNodeOfferingType = reservedNodeOfferingType
            self.usagePrice = usagePrice
        }
    }
}

///
public struct DescribeReservedNodeOfferingsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of ReservedNodeOffering objects.
    public var reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeOfferings = reservedNodeOfferings
    }
}

///
public struct DescribeReservedNodesInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeReservedNodes] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// Identifier for the node reservation.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeId = reservedNodeId
    }
}

///
public struct DescribeReservedNodesOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The list of ReservedNode objects.
    public var reservedNodes: [RedshiftClientTypes.ReservedNode]?

    public init(
        marker: Swift.String? = nil,
        reservedNodes: [RedshiftClientTypes.ReservedNode]? = nil
    )
    {
        self.marker = marker
        self.reservedNodes = reservedNodes
    }
}

///
public struct DescribeResizeInput: Swift.Sendable {
    /// The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive. By default, resize operations for all clusters defined for an Amazon Web Services account are returned.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

/// Describes the result of a cluster resize operation.
public struct DescribeResizeOutput: Swift.Sendable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init(
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}

extension RedshiftClientTypes {

    public enum ScheduledActionFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clusterIdentifier
        case iamRole
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionFilterName] {
            return [
                .clusterIdentifier,
                .iamRole
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clusterIdentifier: return "cluster-identifier"
            case .iamRole: return "iam-role"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// A set of elements to filter the returned scheduled actions.
    public struct ScheduledActionFilter: Swift.Sendable {
        /// The type of element to filter.
        /// This member is required.
        public var name: RedshiftClientTypes.ScheduledActionFilterName?
        /// List of values. Compare if the value (of type defined by Name) equals an item in the list of scheduled actions.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: RedshiftClientTypes.ScheduledActionFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

extension RedshiftClientTypes {

    public enum ScheduledActionTypeValues: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pauseCluster
        case resizeCluster
        case resumeCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledActionTypeValues] {
            return [
                .pauseCluster,
                .resizeCluster,
                .resumeCluster
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pauseCluster: return "PauseCluster"
            case .resizeCluster: return "ResizeCluster"
            case .resumeCluster: return "ResumeCluster"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeScheduledActionsInput: Swift.Sendable {
    /// If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions.
    public var active: Swift.Bool?
    /// The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
    public var endTime: Foundation.Date?
    /// List of scheduled action filters.
    public var filters: [RedshiftClientTypes.ScheduledActionFilter]?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeScheduledActions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the scheduled action to retrieve.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
    public var startTime: Foundation.Date?
    /// The type of the scheduled actions to retrieve.
    public var targetActionType: RedshiftClientTypes.ScheduledActionTypeValues?

    public init(
        active: Swift.Bool? = nil,
        endTime: Foundation.Date? = nil,
        filters: [RedshiftClientTypes.ScheduledActionFilter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        targetActionType: RedshiftClientTypes.ScheduledActionTypeValues? = nil
    )
    {
        self.active = active
        self.endTime = endTime
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetActionType = targetActionType
    }
}

extension RedshiftClientTypes {

    /// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
    public struct ScheduledAction: Swift.Sendable {
        /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
        public var endTime: Foundation.Date?
        /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
        public var iamRole: Swift.String?
        /// List of times when the scheduled action will run.
        public var nextInvocations: [Foundation.Date]?
        /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
        public var schedule: Swift.String?
        /// The description of the scheduled action.
        public var scheduledActionDescription: Swift.String?
        /// The name of the scheduled action.
        public var scheduledActionName: Swift.String?
        /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
        public var startTime: Foundation.Date?
        /// The state of the scheduled action. For example, DISABLED.
        public var state: RedshiftClientTypes.ScheduledActionState?
        /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ra3.4xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
        public var targetAction: RedshiftClientTypes.ScheduledActionType?

        public init(
            endTime: Foundation.Date? = nil,
            iamRole: Swift.String? = nil,
            nextInvocations: [Foundation.Date]? = nil,
            schedule: Swift.String? = nil,
            scheduledActionDescription: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            state: RedshiftClientTypes.ScheduledActionState? = nil,
            targetAction: RedshiftClientTypes.ScheduledActionType? = nil
        )
        {
            self.endTime = endTime
            self.iamRole = iamRole
            self.nextInvocations = nextInvocations
            self.schedule = schedule
            self.scheduledActionDescription = scheduledActionDescription
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.state = state
            self.targetAction = targetAction
        }
    }
}

public struct DescribeScheduledActionsOutput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeScheduledActions] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// List of retrieved scheduled actions.
    public var scheduledActions: [RedshiftClientTypes.ScheduledAction]?

    public init(
        marker: Swift.String? = nil,
        scheduledActions: [RedshiftClientTypes.ScheduledAction]? = nil
    )
    {
        self.marker = marker
        self.scheduledActions = scheduledActions
    }
}

/// The result of the DescribeSnapshotCopyGrants action.
public struct DescribeSnapshotCopyGrantsInput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// The name of the snapshot copy grant.
    public var snapshotCopyGrantName: Swift.String?
    /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotCopyGrantName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotCopyGrantName = snapshotCopyGrantName
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

///
public struct DescribeSnapshotCopyGrantsOutput: Swift.Sendable {
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both.
    public var marker: Swift.String?
    /// The list of SnapshotCopyGrant objects.
    public var snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]?

    public init(
        marker: Swift.String? = nil,
        snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]? = nil
    )
    {
        self.marker = marker
        self.snapshotCopyGrants = snapshotCopyGrants
    }
}

public struct DescribeSnapshotSchedulesInput: Swift.Sendable {
    /// The unique identifier for the cluster whose snapshot schedules you want to view.
    public var clusterIdentifier: Swift.String?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// A unique identifier for a snapshot schedule.
    public var scheduleIdentifier: Swift.String?
    /// The key value for a snapshot schedule tag.
    public var tagKeys: [Swift.String]?
    /// The value corresponding to the key of the snapshot schedule tag.
    public var tagValues: [Swift.String]?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.scheduleIdentifier = scheduleIdentifier
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension RedshiftClientTypes {

    /// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
    public struct SnapshotSchedule: Swift.Sendable {
        /// The number of clusters associated with the schedule.
        public var associatedClusterCount: Swift.Int?
        /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
        public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
        ///
        public var nextInvocations: [Foundation.Date]?
        /// A list of ScheduleDefinitions.
        public var scheduleDefinitions: [Swift.String]?
        /// The description of the schedule.
        public var scheduleDescription: Swift.String?
        /// A unique identifier for the schedule.
        public var scheduleIdentifier: Swift.String?
        /// An optional set of tags describing the schedule.
        public var tags: [RedshiftClientTypes.Tag]?

        public init(
            associatedClusterCount: Swift.Int? = nil,
            associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
            nextInvocations: [Foundation.Date]? = nil,
            scheduleDefinitions: [Swift.String]? = nil,
            scheduleDescription: Swift.String? = nil,
            scheduleIdentifier: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil
        )
        {
            self.associatedClusterCount = associatedClusterCount
            self.associatedClusters = associatedClusters
            self.nextInvocations = nextInvocations
            self.scheduleDefinitions = scheduleDefinitions
            self.scheduleDescription = scheduleDescription
            self.scheduleIdentifier = scheduleIdentifier
            self.tags = tags
        }
    }
}

public struct DescribeSnapshotSchedulesOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of SnapshotSchedules.
    public var snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]?

    public init(
        marker: Swift.String? = nil,
        snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]? = nil
    )
    {
        self.marker = marker
        self.snapshotSchedules = snapshotSchedules
    }
}

public struct DescribeStorageOutput: Swift.Sendable {
    /// The total amount of storage currently used for snapshots.
    public var totalBackupSizeInMegaBytes: Swift.Double?
    /// The total amount of storage currently provisioned.
    public var totalProvisionedStorageInMegaBytes: Swift.Double?

    public init(
        totalBackupSizeInMegaBytes: Swift.Double? = nil,
        totalProvisionedStorageInMegaBytes: Swift.Double? = nil
    )
    {
        self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
        self.totalProvisionedStorageInMegaBytes = totalProvisionedStorageInMegaBytes
    }
}

/// The specified TableRestoreRequestId value was not found.
public struct TableRestoreNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableRestoreNotFoundFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DescribeTableRestoreStatusInput: Swift.Sendable {
    /// The Amazon Redshift cluster that the table is being restored to.
    public var clusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous DescribeTableRestoreStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
    public var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
    public var maxRecords: Swift.Int?
    /// The identifier of the table restore request to return status for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus returns the status of all in-progress table restore requests.
    public var tableRestoreRequestId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tableRestoreRequestId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.tableRestoreRequestId = tableRestoreRequestId
    }
}

extension RedshiftClientTypes {

    public enum TableRestoreStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canceled
        case failed
        case inProgress
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [TableRestoreStatusType] {
            return [
                .canceled,
                .failed,
                .inProgress,
                .pending,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// Describes the status of a [RestoreTableFromClusterSnapshot] operation.
    public struct TableRestoreStatus: Swift.Sendable {
        /// The identifier of the Amazon Redshift cluster that the table is being restored to.
        public var clusterIdentifier: Swift.String?
        /// A description of the status of the table restore request. Status values include SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS.
        public var message: Swift.String?
        /// The name of the table to create as a result of the table restore request.
        public var newTableName: Swift.String?
        /// The amount of data restored to the new table so far, in megabytes (MB).
        public var progressInMegaBytes: Swift.Int?
        /// The time that the table restore request was made, in Universal Coordinated Time (UTC).
        public var requestTime: Foundation.Date?
        /// The identifier of the snapshot that the table is being restored from.
        public var snapshotIdentifier: Swift.String?
        /// The name of the source database that contains the table being restored.
        public var sourceDatabaseName: Swift.String?
        /// The name of the source schema that contains the table being restored.
        public var sourceSchemaName: Swift.String?
        /// The name of the source table being restored.
        public var sourceTableName: Swift.String?
        /// A value that describes the current state of the table restore request. Valid Values: SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS
        public var status: RedshiftClientTypes.TableRestoreStatusType?
        /// The unique identifier for the table restore request.
        public var tableRestoreRequestId: Swift.String?
        /// The name of the database to restore the table to.
        public var targetDatabaseName: Swift.String?
        /// The name of the schema to restore the table to.
        public var targetSchemaName: Swift.String?
        /// The total amount of data to restore to the new table, in megabytes (MB).
        public var totalDataInMegaBytes: Swift.Int?

        public init(
            clusterIdentifier: Swift.String? = nil,
            message: Swift.String? = nil,
            newTableName: Swift.String? = nil,
            progressInMegaBytes: Swift.Int? = nil,
            requestTime: Foundation.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            sourceDatabaseName: Swift.String? = nil,
            sourceSchemaName: Swift.String? = nil,
            sourceTableName: Swift.String? = nil,
            status: RedshiftClientTypes.TableRestoreStatusType? = nil,
            tableRestoreRequestId: Swift.String? = nil,
            targetDatabaseName: Swift.String? = nil,
            targetSchemaName: Swift.String? = nil,
            totalDataInMegaBytes: Swift.Int? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.message = message
            self.newTableName = newTableName
            self.progressInMegaBytes = progressInMegaBytes
            self.requestTime = requestTime
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceSchemaName = sourceSchemaName
            self.sourceTableName = sourceTableName
            self.status = status
            self.tableRestoreRequestId = tableRestoreRequestId
            self.targetDatabaseName = targetDatabaseName
            self.targetSchemaName = targetSchemaName
            self.totalDataInMegaBytes = totalDataInMegaBytes
        }
    }
}

///
public struct DescribeTableRestoreStatusOutput: Swift.Sendable {
    /// A pagination token that can be used in a subsequent [DescribeTableRestoreStatus] request.
    public var marker: Swift.String?
    /// A list of status details for one or more table restore requests.
    public var tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]?

    public init(
        marker: Swift.String? = nil,
        tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]? = nil
    )
    {
        self.marker = marker
        self.tableRestoreStatusDetails = tableRestoreStatusDetails
    }
}

///
public struct DescribeTagsInput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, arn:aws:redshift:us-east-2:123456789:cluster:t1.
    public var resourceName: Swift.String?
    /// The type of resource with which you want to view tags. Valid resource types are:
    ///
    /// * Cluster
    ///
    /// * CIDR/IP
    ///
    /// * EC2 security group
    ///
    /// * Snapshot
    ///
    /// * Cluster security group
    ///
    /// * Subnet group
    ///
    /// * HSM connection
    ///
    /// * HSM certificate
    ///
    /// * Parameter group
    ///
    /// * Snapshot copy grant
    ///
    /// * Integration (zero-ETL integration or S3 event integration) To describe the tags associated with an integration, don't specify ResourceType, instead specify the ResourceName of the integration.
    ///
    ///
    /// For more information about Amazon Redshift resource types and constructing ARNs, go to [Specifying Policy Elements: Actions, Effects, Resources, and Principals](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions) in the Amazon Redshift Cluster Management Guide.
    public var resourceType: Swift.String?
    /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.resourceName = resourceName
        self.resourceType = resourceType
        self.tagKeys = tagKeys
        self.tagValues = tagValues
    }
}

extension RedshiftClientTypes {

    /// A tag and its associated resource.
    public struct TaggedResource: Swift.Sendable {
        /// The Amazon Resource Name (ARN) with which the tag is associated, for example: arn:aws:redshift:us-east-2:123456789:cluster:t1.
        public var resourceName: Swift.String?
        /// The type of resource with which the tag is associated. Valid resource types are:
        ///
        /// * Cluster
        ///
        /// * CIDR/IP
        ///
        /// * EC2 security group
        ///
        /// * Snapshot
        ///
        /// * Cluster security group
        ///
        /// * Subnet group
        ///
        /// * HSM connection
        ///
        /// * HSM certificate
        ///
        /// * Parameter group
        ///
        ///
        /// For more information about Amazon Redshift resource types and constructing ARNs, go to [Constructing an Amazon Redshift Amazon Resource Name (ARN)](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions) in the Amazon Redshift Cluster Management Guide.
        public var resourceType: Swift.String?
        /// The tag for the resource.
        public var tag: RedshiftClientTypes.Tag?

        public init(
            resourceName: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            tag: RedshiftClientTypes.Tag? = nil
        )
        {
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.tag = tag
        }
    }
}

///
public struct DescribeTagsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// A list of tags with their associated resources.
    public var taggedResources: [RedshiftClientTypes.TaggedResource]?

    public init(
        marker: Swift.String? = nil,
        taggedResources: [RedshiftClientTypes.TaggedResource]? = nil
    )
    {
        self.marker = marker
        self.taggedResources = taggedResources
    }
}

public struct DescribeUsageLimitsInput: Swift.Sendable {
    /// The identifier of the cluster for which you want to describe usage limits.
    public var clusterIdentifier: Swift.String?
    /// The feature type for which you want to describe usage limits.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// An optional parameter that specifies the starting point to return a set of response records. When the results of a [DescribeUsageLimits] request exceed the value specified in MaxRecords, Amazon Web Services returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. Default: 100 Constraints: minimum 20, maximum 100.
    public var maxRecords: Swift.Int?
    /// A tag key or keys for which you want to return all matching usage limit objects that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the usage limit objects have either or both of these tag keys associated with them.
    public var tagKeys: [Swift.String]?
    /// A tag value or values for which you want to return all matching usage limit objects that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the usage limit objects that have either or both of these tag values associated with them.
    public var tagValues: [Swift.String]?
    /// The identifier of the usage limit to describe.
    public var usageLimitId: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        tagKeys: [Swift.String]? = nil,
        tagValues: [Swift.String]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.marker = marker
        self.maxRecords = maxRecords
        self.tagKeys = tagKeys
        self.tagValues = tagValues
        self.usageLimitId = usageLimitId
    }
}

extension RedshiftClientTypes {

    /// Describes a usage limit object for a cluster.
    public struct UsageLimit: Swift.Sendable {
        /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
        public var amount: Swift.Int?
        /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
        ///
        /// * log - To log an event in a system table. The default is log.
        ///
        /// * emit-metric - To emit CloudWatch metrics.
        ///
        /// * disable - To disable the feature until the next usage period begins.
        public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
        /// The identifier of the cluster with a usage limit.
        public var clusterIdentifier: Swift.String?
        /// The Amazon Redshift feature to which the limit applies.
        public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
        /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
        public var limitType: RedshiftClientTypes.UsageLimitLimitType?
        /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
        public var period: RedshiftClientTypes.UsageLimitPeriod?
        /// A list of tag instances.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The identifier of the usage limit.
        public var usageLimitId: Swift.String?

        public init(
            amount: Swift.Int? = nil,
            breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
            clusterIdentifier: Swift.String? = nil,
            featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
            limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
            period: RedshiftClientTypes.UsageLimitPeriod? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            usageLimitId: Swift.String? = nil
        )
        {
            self.amount = amount
            self.breachAction = breachAction
            self.clusterIdentifier = clusterIdentifier
            self.featureType = featureType
            self.limitType = limitType
            self.period = period
            self.tags = tags
            self.usageLimitId = usageLimitId
        }
    }
}

public struct DescribeUsageLimitsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// Contains the output from the [DescribeUsageLimits] action.
    public var usageLimits: [RedshiftClientTypes.UsageLimit]?

    public init(
        marker: Swift.String? = nil,
        usageLimits: [RedshiftClientTypes.UsageLimit]? = nil
    )
    {
        self.marker = marker
        self.usageLimits = usageLimits
    }
}

///
public struct DisableLoggingInput: Swift.Sendable {
    /// The identifier of the cluster on which logging is to be stopped. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

/// Describes the status of logging for a cluster.
public struct DisableLoggingOutput: Swift.Sendable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: Foundation.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: Foundation.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: Foundation.Date? = nil,
        lastSuccessfulDeliveryTime: Foundation.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

/// The cluster already has cross-region snapshot copy disabled.
public struct SnapshotCopyAlreadyDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyAlreadyDisabledFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct DisableSnapshotCopyInput: Swift.Sendable {
    /// The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct DisableSnapshotCopyOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DisassociateDataShareConsumerInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the consumer namespace that association for the datashare is removed from.
    public var consumerArn: Swift.String?
    /// From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.
    public var consumerRegion: Swift.String?
    /// The Amazon Resource Name (ARN) of the datashare to remove association for.
    /// This member is required.
    public var dataShareArn: Swift.String?
    /// A value that specifies whether association for the datashare is removed from the entire account.
    public var disassociateEntireAccount: Swift.Bool?

    public init(
        consumerArn: Swift.String? = nil,
        consumerRegion: Swift.String? = nil,
        dataShareArn: Swift.String? = nil,
        disassociateEntireAccount: Swift.Bool? = nil
    )
    {
        self.consumerArn = consumerArn
        self.consumerRegion = consumerRegion
        self.dataShareArn = dataShareArn
        self.disassociateEntireAccount = disassociateEntireAccount
    }
}

public struct DisassociateDataShareConsumerOutput: Swift.Sendable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer namespace.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

/// The cluster does not have read bucket or put object permissions on the S3 bucket specified when enabling logging.
public struct InsufficientS3BucketPolicyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientS3BucketPolicyFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The S3 bucket name is invalid. For more information about naming rules, go to [Bucket Restrictions and Limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html) in the Amazon Simple Storage Service (S3) Developer Guide.
public struct InvalidS3BucketNameFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3BucketNameFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The string specified for the logging S3 key prefix does not comply with the documented constraints.
public struct InvalidS3KeyPrefixFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3KeyPrefixFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct EnableLoggingInput: Swift.Sendable {
    /// The name of an existing S3 bucket where the log files are to be stored. Constraints:
    ///
    /// * Must be in the same region as the cluster
    ///
    /// * The cluster must have read bucket and put object permissions
    public var bucketName: Swift.String?
    /// The identifier of the cluster on which logging is to be started. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// The prefix applied to the log file names. Valid characters are any letter from any language, any whitespace character, any numeric character, and the following characters: underscore (_), period (.), colon (:), slash (/), equal (=), plus (+), backslash (\), hyphen (-), at symbol (@).
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.clusterIdentifier = clusterIdentifier
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.s3KeyPrefix = s3KeyPrefix
    }
}

/// Describes the status of logging for a cluster.
public struct EnableLoggingOutput: Swift.Sendable {
    /// The name of the S3 bucket where the log files are stored.
    public var bucketName: Swift.String?
    /// The message indicating that logs failed to be delivered.
    public var lastFailureMessage: Swift.String?
    /// The last time when logs failed to be delivered.
    public var lastFailureTime: Foundation.Date?
    /// The last time that logs were delivered.
    public var lastSuccessfulDeliveryTime: Foundation.Date?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Possible values are connectionlog, useractivitylog, and userlog.
    public var logExports: [Swift.String]?
    /// true if logging is on, false if logging is off.
    public var loggingEnabled: Swift.Bool?
    /// The prefix applied to the log file names.
    public var s3KeyPrefix: Swift.String?

    public init(
        bucketName: Swift.String? = nil,
        lastFailureMessage: Swift.String? = nil,
        lastFailureTime: Foundation.Date? = nil,
        lastSuccessfulDeliveryTime: Foundation.Date? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        loggingEnabled: Swift.Bool? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.lastFailureMessage = lastFailureMessage
        self.lastFailureTime = lastFailureTime
        self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.loggingEnabled = loggingEnabled
        self.s3KeyPrefix = s3KeyPrefix
    }
}

/// The specified options are incompatible.
public struct IncompatibleOrderableOptions: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleOrderableOptions" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The cluster already has cross-region snapshot copy enabled.
public struct SnapshotCopyAlreadyEnabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyAlreadyEnabledFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified region is incorrect or does not exist.
public struct UnknownSnapshotCopyRegionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnknownSnapshotCopyRegionFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct EnableSnapshotCopyInput: Swift.Sendable {
    /// The unique identifier of the source cluster to copy snapshots from. Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The destination Amazon Web Services Region that you want to copy snapshots to. Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region) in the Amazon Web Services General Reference.
    /// This member is required.
    public var destinationRegion: Swift.String?
    /// The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Default: 7. Constraints: Must be at least 1 and no more than 35.
    public var retentionPeriod: Swift.Int?
    /// The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.
    public var snapshotCopyGrantName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        destinationRegion: Swift.String? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        retentionPeriod: Swift.Int? = nil,
        snapshotCopyGrantName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.destinationRegion = destinationRegion
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.retentionPeriod = retentionPeriod
        self.snapshotCopyGrantName = snapshotCopyGrantName
    }
}

public struct EnableSnapshotCopyOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// The authorization for this endpoint can't be found.
public struct EndpointAuthorizationNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EndpointAuthorizationNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct FailoverPrimaryComputeInput: Swift.Sendable {
    /// The unique identifier of the cluster for which the primary compute unit will be failed over to another Availability Zone.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct FailoverPrimaryComputeOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// The request parameters to get cluster credentials.
public struct GetClusterCredentialsInput: Swift.Sendable {
    /// Create a database user with the name specified for the user named in DbUser if one does not exist.
    public var autoCreate: Swift.Bool?
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the cluster credentials.
    public var customDomainName: Swift.String?
    /// A list of the names of existing database groups that the user named in DbUser will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC. Database group name constraints
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbGroups: [Swift.String]?
    /// The name of a database that DbUser is authorized to log on to. If DbName is not specified, DbUser can log on to any existing database. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The name of a database user. If a user name matching DbUser exists in the database, the temporary user credentials have the same permissions as the existing user. If DbUser doesn't exist in the database and Autocreate is True, a new user is created using the value for DbUser with PUBLIC permissions. If a database user matching the value for DbUser doesn't exist and Autocreate is False, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database. For more information, see [CREATE USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html) in the Amazon Redshift Database Developer Guide. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var dbUser: Swift.String?
    /// The number of seconds until the returned temporary password expires. Constraint: minimum 900, maximum 3600. Default: 900
    public var durationSeconds: Swift.Int?

    public init(
        autoCreate: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        dbGroups: [Swift.String]? = nil,
        dbName: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.autoCreate = autoCreate
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
        self.dbGroups = dbGroups
        self.dbName = dbName
        self.dbUser = dbUser
        self.durationSeconds = durationSeconds
    }
}

/// Temporary credentials with authorization to log on to an Amazon Redshift database.
public struct GetClusterCredentialsOutput: Swift.Sendable {
    /// A temporary password that authorizes the user name returned by DbUser to log on to the database DbName.
    public var dbPassword: Swift.String?
    /// A database user name that is authorized to log on to the database DbName using the password DbPassword. If the specified DbUser exists in the database, the new user name has the same database permissions as the the user named in DbUser. By default, the user is added to PUBLIC. If the DbGroups parameter is specifed, DbUser is added to the listed groups for any sessions created using these credentials.
    public var dbUser: Swift.String?
    /// The date and time the password in DbPassword expires.
    public var expiration: Foundation.Date?

    public init(
        dbPassword: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        expiration: Foundation.Date? = nil
    )
    {
        self.dbPassword = dbPassword
        self.dbUser = dbUser
        self.expiration = expiration
    }
}

extension GetClusterCredentialsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetClusterCredentialsOutput(dbUser: \(Swift.String(describing: dbUser)), expiration: \(Swift.String(describing: expiration)), dbPassword: \"CONTENT_REDACTED\")"}
}

public struct GetClusterCredentialsWithIAMInput: Swift.Sendable {
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials.
    public var clusterIdentifier: Swift.String?
    /// The custom domain name for the IAM message cluster credentials.
    public var customDomainName: Swift.String?
    /// The name of the database for which you are requesting credentials. If the database name is specified, the IAM policy must allow access to the resource dbname for the specified database name. If the database name is not specified, access to all databases is allowed.
    public var dbName: Swift.String?
    /// The number of seconds until the returned temporary password expires. Range: 900-3600. Default: 900.
    public var durationSeconds: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainName: Swift.String? = nil,
        dbName: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainName = customDomainName
        self.dbName = dbName
        self.durationSeconds = durationSeconds
    }
}

public struct GetClusterCredentialsWithIAMOutput: Swift.Sendable {
    /// A temporary password that you provide when you connect to a database.
    public var dbPassword: Swift.String?
    /// A database user name that you provide when you connect to a database. The database user is mapped 1:1 to the source IAM identity.
    public var dbUser: Swift.String?
    /// The time (UTC) when the temporary password expires. After this timestamp, a log in with the temporary password fails.
    public var expiration: Foundation.Date?
    /// Reserved for future use.
    public var nextRefreshTime: Foundation.Date?

    public init(
        dbPassword: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        expiration: Foundation.Date? = nil,
        nextRefreshTime: Foundation.Date? = nil
    )
    {
        self.dbPassword = dbPassword
        self.dbUser = dbUser
        self.expiration = expiration
        self.nextRefreshTime = nextRefreshTime
    }
}

extension GetClusterCredentialsWithIAMOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetClusterCredentialsWithIAMOutput(dbUser: \(Swift.String(describing: dbUser)), expiration: \(Swift.String(describing: expiration)), nextRefreshTime: \(Swift.String(describing: nextRefreshTime)), dbPassword: \"CONTENT_REDACTED\")"}
}

extension RedshiftClientTypes {

    public enum ReservedNodeExchangeActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case resizeCluster
        case restoreCluster
        case sdkUnknown(Swift.String)

        public static var allCases: [ReservedNodeExchangeActionType] {
            return [
                .resizeCluster,
                .restoreCluster
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .resizeCluster: return "resize-cluster"
            case .restoreCluster: return "restore-cluster"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetReservedNodeExchangeConfigurationOptionsInput: Swift.Sendable {
    /// The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.
    /// This member is required.
    public var actionType: RedshiftClientTypes.ReservedNodeExchangeActionType?
    /// The identifier for the cluster that is the source for a reserved-node exchange.
    public var clusterIdentifier: Swift.String?
    /// An optional pagination token provided by a previous GetReservedNodeExchangeConfigurationOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a Marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The identifier for the snapshot that is the source for the reserved-node exchange.
    public var snapshotIdentifier: Swift.String?

    public init(
        actionType: RedshiftClientTypes.ReservedNodeExchangeActionType? = nil,
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.snapshotIdentifier = snapshotIdentifier
    }
}

extension RedshiftClientTypes {

    /// Details for a reserved-node exchange. Examples include the node type for a reserved node, the price for a node, the node's state, and other details.
    public struct ReservedNodeConfigurationOption: Swift.Sendable {
        /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
        public var sourceReservedNode: RedshiftClientTypes.ReservedNode?
        /// The target reserved-node count.
        public var targetReservedNodeCount: Swift.Int?
        /// Describes a reserved node offering.
        public var targetReservedNodeOffering: RedshiftClientTypes.ReservedNodeOffering?

        public init(
            sourceReservedNode: RedshiftClientTypes.ReservedNode? = nil,
            targetReservedNodeCount: Swift.Int? = nil,
            targetReservedNodeOffering: RedshiftClientTypes.ReservedNodeOffering? = nil
        )
        {
            self.sourceReservedNode = sourceReservedNode
            self.targetReservedNodeCount = targetReservedNodeCount
            self.targetReservedNodeOffering = targetReservedNodeOffering
        }
    }
}

public struct GetReservedNodeExchangeConfigurationOptionsOutput: Swift.Sendable {
    /// A pagination token provided by a previous GetReservedNodeExchangeConfigurationOptions request.
    public var marker: Swift.String?
    /// the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.
    public var reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeConfigurationOptionList = reservedNodeConfigurationOptionList
    }
}

///
public struct GetReservedNodeExchangeOfferingsInput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of ReservedNodeOfferings.
    public var marker: Swift.String?
    /// An integer setting the maximum number of ReservedNodeOfferings to retrieve.
    public var maxRecords: Swift.Int?
    /// A string representing the node identifier for the DC1 Reserved Node to be exchanged.
    /// This member is required.
    public var reservedNodeId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.reservedNodeId = reservedNodeId
    }
}

public struct GetReservedNodeExchangeOfferingsOutput: Swift.Sendable {
    /// An optional parameter that specifies the starting point for returning a set of response records. When the results of a GetReservedNodeExchangeOfferings request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request.
    public var marker: Swift.String?
    /// Returns an array of [ReservedNodeOffering] objects.
    public var reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?

    public init(
        marker: Swift.String? = nil,
        reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedNodeOfferings = reservedNodeOfferings
    }
}

/// The resource policy isn't valid.
public struct InvalidPolicyFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidPolicyFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetResourcePolicyInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is fetched.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension RedshiftClientTypes {

    /// The policy that is attached to a resource.
    public struct ResourcePolicy: Swift.Sendable {
        /// The content of a resource policy.
        public var policy: Swift.String?
        /// The resources that a policy is attached to.
        public var resourceArn: Swift.String?

        public init(
            policy: Swift.String? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.policy = policy
            self.resourceArn = resourceArn
        }
    }
}

public struct GetResourcePolicyOutput: Swift.Sendable {
    /// The content of the resource policy.
    public var resourcePolicy: RedshiftClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: RedshiftClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

extension RedshiftClientTypes {

    public enum ImpactRankingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ImpactRankingType] {
            return [
                .high,
                .low,
                .medium
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// You have exceeded the allowed number of table restore requests. Wait for your current table restore requests to complete before making a new request.
public struct InProgressTableRestoreQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InProgressTableRestoreQuotaExceededFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The restore is invalid.
public struct InvalidRestoreFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRestore" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value specified for the sourceDatabaseName, sourceSchemaName, or sourceTableName parameter, or a combination of these, doesn't exist in the snapshot.
public struct InvalidTableRestoreArgumentFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTableRestoreArgument" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListRecommendationsInput: Swift.Sendable {
    /// The unique identifier of the Amazon Redshift cluster for which the list of Advisor recommendations is returned. If the neither the cluster identifier and the cluster namespace ARN parameters are specified, then recommendations for all clusters in the account are returned.
    public var clusterIdentifier: Swift.String?
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
    public var maxRecords: Swift.Int?
    /// The Amazon Redshift cluster namespace Amazon Resource Name (ARN) for which the list of Advisor recommendations is returned. If the neither the cluster identifier and the cluster namespace ARN parameters are specified, then recommendations for all clusters in the account are returned.
    public var namespaceArn: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        namespaceArn: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.marker = marker
        self.maxRecords = maxRecords
        self.namespaceArn = namespaceArn
    }
}

extension RedshiftClientTypes {

    public enum RecommendedActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cli
        case sql
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendedActionType] {
            return [
                .cli,
                .sql
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cli: return "CLI"
            case .sql: return "SQL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension RedshiftClientTypes {

    /// The recommended action from the Amazon Redshift Advisor recommendation.
    public struct RecommendedAction: Swift.Sendable {
        /// The command to run.
        public var command: Swift.String?
        /// The database name to perform the action on. Only applicable if the type of command is SQL.
        public var database: Swift.String?
        /// The specific instruction about the command.
        public var text: Swift.String?
        /// The type of command.
        public var type: RedshiftClientTypes.RecommendedActionType?

        public init(
            command: Swift.String? = nil,
            database: Swift.String? = nil,
            text: Swift.String? = nil,
            type: RedshiftClientTypes.RecommendedActionType? = nil
        )
        {
            self.command = command
            self.database = database
            self.text = text
            self.type = type
        }
    }
}

extension RedshiftClientTypes {

    /// A link to an Amazon Redshift Advisor reference for more information about a recommendation.
    public struct ReferenceLink: Swift.Sendable {
        /// The URL address to find more information.
        public var link: Swift.String?
        /// The hyperlink text that describes the link to more information.
        public var text: Swift.String?

        public init(
            link: Swift.String? = nil,
            text: Swift.String? = nil
        )
        {
            self.link = link
            self.text = text
        }
    }
}

extension RedshiftClientTypes {

    /// An Amazon Redshift Advisor recommended action on the Amazon Redshift cluster.
    public struct Recommendation: Swift.Sendable {
        /// The unique identifier of the cluster for which the recommendation is returned.
        public var clusterIdentifier: Swift.String?
        /// The date and time (UTC) that the recommendation was created.
        public var createdAt: Foundation.Date?
        /// The description of the recommendation.
        public var description: Swift.String?
        /// A unique identifier of the Advisor recommendation.
        public var id: Swift.String?
        /// The scale of the impact that the Advisor recommendation has to the performance and cost of the cluster.
        public var impactRanking: RedshiftClientTypes.ImpactRankingType?
        /// The Amazon Redshift cluster namespace ARN for which the recommendations is returned.
        public var namespaceArn: Swift.String?
        /// The description of what was observed about your cluster.
        public var observation: Swift.String?
        /// The description of the recommendation.
        public var recommendationText: Swift.String?
        /// The type of Advisor recommendation.
        public var recommendationType: Swift.String?
        /// List of Amazon Redshift recommended actions.
        public var recommendedActions: [RedshiftClientTypes.RecommendedAction]?
        /// List of helpful links for more information about the Advisor recommendation.
        public var referenceLinks: [RedshiftClientTypes.ReferenceLink]?
        /// The title of the recommendation.
        public var title: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            impactRanking: RedshiftClientTypes.ImpactRankingType? = nil,
            namespaceArn: Swift.String? = nil,
            observation: Swift.String? = nil,
            recommendationText: Swift.String? = nil,
            recommendationType: Swift.String? = nil,
            recommendedActions: [RedshiftClientTypes.RecommendedAction]? = nil,
            referenceLinks: [RedshiftClientTypes.ReferenceLink]? = nil,
            title: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.impactRanking = impactRanking
            self.namespaceArn = namespaceArn
            self.observation = observation
            self.recommendationText = recommendationText
            self.recommendationType = recommendationType
            self.recommendedActions = recommendedActions
            self.referenceLinks = referenceLinks
            self.title = title
        }
    }
}

public struct ListRecommendationsOutput: Swift.Sendable {
    /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request.
    public var marker: Swift.String?
    /// The Advisor recommendations for action on the Amazon Redshift cluster.
    public var recommendations: [RedshiftClientTypes.Recommendation]?

    public init(
        marker: Swift.String? = nil,
        recommendations: [RedshiftClientTypes.Recommendation]? = nil
    )
    {
        self.marker = marker
        self.recommendations = recommendations
    }
}

public struct ModifyAquaConfigurationInput: Swift.Sendable {
    /// This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The identifier of the cluster to be modified.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct ModifyAquaConfigurationOutput: Swift.Sendable {
    /// This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfiguration: RedshiftClientTypes.AquaConfiguration?

    public init(
        aquaConfiguration: RedshiftClientTypes.AquaConfiguration? = nil
    )
    {
        self.aquaConfiguration = aquaConfiguration
    }
}

public struct ModifyAuthenticationProfileInput: Swift.Sendable {
    /// The new content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
    /// This member is required.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile to replace.
    /// This member is required.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

public struct ModifyAuthenticationProfileOutput: Swift.Sendable {
    /// The updated content of the authentication profile in JSON format.
    public var authenticationProfileContent: Swift.String?
    /// The name of the authentication profile that was replaced.
    public var authenticationProfileName: Swift.String?

    public init(
        authenticationProfileContent: Swift.String? = nil,
        authenticationProfileName: Swift.String? = nil
    )
    {
        self.authenticationProfileContent = authenticationProfileContent
        self.authenticationProfileName = authenticationProfileName
    }
}

/// The number of tables in the cluster exceeds the limit for the requested new cluster node type.
public struct TableLimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A request option was specified that is not supported.
public struct UnsupportedOptionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOptionFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct ModifyClusterInput: Swift.Sendable {
    /// If true, major version upgrades will be applied automatically to the cluster during the maintenance window. Default: false
    public var allowVersionUpgrade: Swift.Bool?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: Uses existing setting. Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The option to initiate relocation for an Amazon Redshift cluster to the target Availability Zone.
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
    public var availabilityZoneRelocation: Swift.Bool?
    /// The unique identifier of the cluster to be modified. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use [RebootCluster]. Default: Uses existing setting. Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.
    public var clusterParameterGroupName: Swift.String?
    /// A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible. Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster. Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    public var clusterSecurityGroups: [Swift.String]?
    /// The new cluster type. When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use [DescribeResize] to track the progress of the resize request. Valid Values:  multi-node | single-node
    public var clusterType: Swift.String?
    /// The new version number of the Amazon Redshift engine to upgrade to. For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to [Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html) in the Amazon Redshift Cluster Management Guide. Example: 1.0
    public var clusterVersion: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to [Supported Platforms to Launch Your Cluster](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms) in the Amazon Redshift Cluster Management Guide.
    public var elasticIp: Swift.String?
    /// Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the KmsKeyId parameter, we encrypt the cluster with the provided KmsKeyId. If you don't provide a KmsKeyId, we encrypt with the default key. If the value is not encrypted (false), then the cluster is decrypted.
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// The IP address types that the cluster supports. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
    public var kmsKeyId: Swift.String?
    /// The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage this cluster's admin credentials. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.
    public var manageMasterPassword: Swift.Bool?
    /// The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots. The value must be either -1 or an integer between 1 and 3,653. The default value is -1.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// The new password for the cluster admin user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response. You can't use MasterUserPassword if ManageMasterPassword is true. Operations never return the password, so this operation provides a way to regain access to the admin user account for a cluster if the password is lost. Default: Uses existing setting. Constraints:
    ///
    /// * Must be between 8 and 64 characters in length.
    ///
    /// * Must contain at least one uppercase letter.
    ///
    /// * Must contain at least one lowercase letter.
    ///
    /// * Must contain one number.
    ///
    /// * Can be any printable ASCII character (ASCII code 33-126) except ' (single quote), " (double quote), \, /, or @.
    public var masterUserPassword: Swift.String?
    /// If true and the cluster is currently only deployed in a single Availability Zone, the cluster will be modified to be deployed in two Availability Zones.
    public var multiAZ: Swift.Bool?
    /// The new identifier for the cluster. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    ///
    ///
    /// Example: examplecluster
    public var newClusterIdentifier: Swift.String?
    /// The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter. For more information about resizing clusters, go to [Resizing Clusters in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html) in the Amazon Redshift Cluster Management Guide. Valid Values: dc2.large | dc2.8xlarge | ra3.large | ra3.xlplus | ra3.4xlarge | ra3.16xlarge
    public var nodeType: Swift.String?
    /// The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter. For more information about resizing clusters, go to [Resizing Clusters in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html) in the Amazon Redshift Cluster Management Guide. Valid Values: Integer greater than 0.
    public var numberOfNodes: Swift.Int?
    /// The option to change the port of an Amazon Redshift cluster. Valid Values:
    ///
    /// * For clusters with ra3 nodes - Select a port within the ranges 5431-5455 or 8191-8215. (If you have an existing cluster with ra3 nodes, it isn't required that you change the port to these ranges.)
    ///
    /// * For clusters with dc2 nodes - Select a port within the range 1150-65535.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage. This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
    public var publiclyAccessible: Swift.Bool?
    /// A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        allowVersionUpgrade: Swift.Bool? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterType: Swift.String? = nil,
        clusterVersion: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        newClusterIdentifier: Swift.String? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.allowVersionUpgrade = allowVersionUpgrade
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterType = clusterType
        self.clusterVersion = clusterVersion
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.masterUserPassword = masterUserPassword
        self.multiAZ = multiAZ
        self.newClusterIdentifier = newClusterIdentifier
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

extension ModifyClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModifyClusterInput(allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneRelocation: \(Swift.String(describing: availabilityZoneRelocation)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterParameterGroupName: \(Swift.String(describing: clusterParameterGroupName)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), elasticIp: \(Swift.String(describing: elasticIp)), encrypted: \(Swift.String(describing: encrypted)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), ipAddressType: \(Swift.String(describing: ipAddressType)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manageMasterPassword: \(Swift.String(describing: manageMasterPassword)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterPasswordSecretKmsKeyId: \(Swift.String(describing: masterPasswordSecretKmsKeyId)), multiAZ: \(Swift.String(describing: multiAZ)), newClusterIdentifier: \(Swift.String(describing: newClusterIdentifier)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), port: \(Swift.String(describing: port)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), masterUserPassword: \"CONTENT_REDACTED\")"}
}

public struct ModifyClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct ModifyClusterDbRevisionInput: Swift.Sendable {
    /// The unique identifier of a cluster whose database revision you want to modify. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The identifier of the database revision. You can retrieve this value from the response to the [DescribeClusterDbRevisions] request.
    /// This member is required.
    public var revisionTarget: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        revisionTarget: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.revisionTarget = revisionTarget
    }
}

public struct ModifyClusterDbRevisionOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

///
public struct ModifyClusterIamRolesInput: Swift.Sendable {
    /// Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format.
    public var addIamRoles: [Swift.String]?
    /// The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified.
    public var defaultIamRoleArn: Swift.String?
    /// Zero or more IAM roles in ARN format to disassociate from the cluster.
    public var removeIamRoles: [Swift.String]?

    public init(
        addIamRoles: [Swift.String]? = nil,
        clusterIdentifier: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        removeIamRoles: [Swift.String]? = nil
    )
    {
        self.addIamRoles = addIamRoles
        self.clusterIdentifier = clusterIdentifier
        self.defaultIamRoleArn = defaultIamRoleArn
        self.removeIamRoles = removeIamRoles
    }
}

public struct ModifyClusterIamRolesOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct ModifyClusterMaintenanceInput: Swift.Sendable {
    /// A unique identifier for the cluster.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A boolean indicating whether to enable the deferred maintenance window.
    public var deferMaintenance: Swift.Bool?
    /// An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
    public var deferMaintenanceDuration: Swift.Int?
    /// A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
    public var deferMaintenanceEndTime: Foundation.Date?
    /// A unique identifier for the deferred maintenance window.
    public var deferMaintenanceIdentifier: Swift.String?
    /// A timestamp indicating the start time for the deferred maintenance window.
    public var deferMaintenanceStartTime: Foundation.Date?

    public init(
        clusterIdentifier: Swift.String? = nil,
        deferMaintenance: Swift.Bool? = nil,
        deferMaintenanceDuration: Swift.Int? = nil,
        deferMaintenanceEndTime: Foundation.Date? = nil,
        deferMaintenanceIdentifier: Swift.String? = nil,
        deferMaintenanceStartTime: Foundation.Date? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.deferMaintenance = deferMaintenance
        self.deferMaintenanceDuration = deferMaintenanceDuration
        self.deferMaintenanceEndTime = deferMaintenanceEndTime
        self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
        self.deferMaintenanceStartTime = deferMaintenanceStartTime
    }
}

public struct ModifyClusterMaintenanceOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// Describes a modify cluster parameter group operation.
public struct ModifyClusterParameterGroupInput: Swift.Sendable {
    /// The name of the parameter group to be modified.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request. For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional. For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.
    /// This member is required.
    public var parameters: [RedshiftClientTypes.Parameter]?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameters = parameters
    }
}

///
public struct ModifyClusterParameterGroupOutput: Swift.Sendable {
    /// The name of the cluster parameter group.
    public var parameterGroupName: Swift.String?
    /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
    public var parameterGroupStatus: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameterGroupStatus: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameterGroupStatus = parameterGroupStatus
    }
}

public struct ModifyClusterSnapshotInput: Swift.Sendable {
    /// A Boolean option to override an exception if the retention period has already passed.
    public var force: Swift.Bool?
    /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The identifier of the snapshot whose setting you want to modify.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?

    public init(
        force: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.force = force
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.snapshotIdentifier = snapshotIdentifier
    }
}

public struct ModifyClusterSnapshotOutput: Swift.Sendable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

public struct ModifyClusterSnapshotScheduleInput: Swift.Sendable {
    /// A unique identifier for the cluster whose snapshot schedule you want to modify.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
    public var disassociateSchedule: Swift.Bool?
    /// A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
    public var scheduleIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        disassociateSchedule: Swift.Bool? = nil,
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.disassociateSchedule = disassociateSchedule
        self.scheduleIdentifier = scheduleIdentifier
    }
}

/// A specified subnet is already in use by another cluster.
public struct SubnetAlreadyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetAlreadyInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct ModifyClusterSubnetGroupInput: Swift.Sendable {
    /// The name of the subnet group to be modified.
    /// This member is required.
    public var clusterSubnetGroupName: Swift.String?
    /// A text description of the subnet group to be modified.
    public var description: Swift.String?
    /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
    /// This member is required.
    public var subnetIds: [Swift.String]?

    public init(
        clusterSubnetGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.description = description
        self.subnetIds = subnetIds
    }
}

public struct ModifyClusterSubnetGroupOutput: Swift.Sendable {
    /// Describes a subnet group.
    public var clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup?

    public init(
        clusterSubnetGroup: RedshiftClientTypes.ClusterSubnetGroup? = nil
    )
    {
        self.clusterSubnetGroup = clusterSubnetGroup
    }
}

public struct ModifyCustomDomainAssociationInput: Swift.Sendable {
    /// The identifier of the cluster to change a custom domain association for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The certificate Amazon Resource Name (ARN) for the changed custom domain association.
    /// This member is required.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name for a changed custom domain association.
    /// This member is required.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

public struct ModifyCustomDomainAssociationOutput: Swift.Sendable {
    /// The identifier of the cluster associated with the result for the changed custom domain association.
    public var clusterIdentifier: Swift.String?
    /// The certificate expiration time associated with the result for the changed custom domain association.
    public var customDomainCertExpiryTime: Swift.String?
    /// The certificate Amazon Resource Name (ARN) associated with the result for the changed custom domain association.
    public var customDomainCertificateArn: Swift.String?
    /// The custom domain name associated with the result for the changed custom domain association.
    public var customDomainName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        customDomainCertExpiryTime: Swift.String? = nil,
        customDomainCertificateArn: Swift.String? = nil,
        customDomainName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.customDomainCertExpiryTime = customDomainCertExpiryTime
        self.customDomainCertificateArn = customDomainCertificateArn
        self.customDomainName = customDomainName
    }
}

public struct ModifyEndpointAccessInput: Swift.Sendable {
    /// The endpoint to be modified.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The complete list of VPC security groups associated with the endpoint after the endpoint is modified.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        endpointName: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.endpointName = endpointName
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

/// Describes a Redshift-managed VPC endpoint.
public struct ModifyEndpointAccessOutput: Swift.Sendable {
    /// The DNS address of the endpoint.
    public var address: Swift.String?
    /// The cluster identifier of the cluster associated with the endpoint.
    public var clusterIdentifier: Swift.String?
    /// The time (UTC) that the endpoint was created.
    public var endpointCreateTime: Foundation.Date?
    /// The name of the endpoint.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    public var endpointStatus: Swift.String?
    /// The port number on which the cluster accepts incoming connections.
    public var port: Swift.Int?
    /// The Amazon Web Services account ID of the owner of the cluster.
    public var resourceOwner: Swift.String?
    /// The subnet group name where Amazon Redshift chooses to deploy the endpoint.
    public var subnetGroupName: Swift.String?
    /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
    public var vpcEndpoint: RedshiftClientTypes.VpcEndpoint?
    /// The security groups associated with the endpoint.
    public var vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]?

    public init(
        address: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        endpointCreateTime: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: Swift.String? = nil,
        port: Swift.Int? = nil,
        resourceOwner: Swift.String? = nil,
        subnetGroupName: Swift.String? = nil,
        vpcEndpoint: RedshiftClientTypes.VpcEndpoint? = nil,
        vpcSecurityGroups: [RedshiftClientTypes.VpcSecurityGroupMembership]? = nil
    )
    {
        self.address = address
        self.clusterIdentifier = clusterIdentifier
        self.endpointCreateTime = endpointCreateTime
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.port = port
        self.resourceOwner = resourceOwner
        self.subnetGroupName = subnetGroupName
        self.vpcEndpoint = vpcEndpoint
        self.vpcSecurityGroups = vpcSecurityGroups
    }
}

///
public struct ModifyEventSubscriptionInput: Swift.Sendable {
    /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the modified Amazon Redshift event notification subscription.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init(
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
    }
}

public struct ModifyEventSubscriptionOutput: Swift.Sendable {
    /// Describes event subscriptions.
    public var eventSubscription: RedshiftClientTypes.EventSubscription?

    public init(
        eventSubscription: RedshiftClientTypes.EventSubscription? = nil
    )
    {
        self.eventSubscription = eventSubscription
    }
}

public struct ModifyIntegrationInput: Swift.Sendable {
    /// A new description for the integration.
    public var description: Swift.String?
    /// The unique identifier of the integration to modify.
    /// This member is required.
    public var integrationArn: Swift.String?
    /// A new name for the integration.
    public var integrationName: Swift.String?

    public init(
        description: Swift.String? = nil,
        integrationArn: Swift.String? = nil,
        integrationName: Swift.String? = nil
    )
    {
        self.description = description
        self.integrationArn = integrationArn
        self.integrationName = integrationName
    }
}

public struct ModifyIntegrationOutput: Swift.Sendable {
    /// The encryption context for the integration. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Amazon Web Services Key Management Service Developer Guide.
    public var additionalEncryptionContext: [Swift.String: Swift.String]?
    /// The time (UTC) when the integration was created.
    public var createTime: Foundation.Date?
    /// The description of the integration.
    public var description: Swift.String?
    /// Any errors associated with the integration.
    public var errors: [RedshiftClientTypes.IntegrationError]?
    /// The Amazon Resource Name (ARN) of the integration.
    public var integrationArn: Swift.String?
    /// The name of the integration.
    public var integrationName: Swift.String?
    /// The Key Management Service (KMS) key identifier for the key used to encrypt the integration.
    public var kmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) of the database used as the source for replication.
    public var sourceArn: Swift.String?
    /// The current status of the integration.
    public var status: RedshiftClientTypes.ZeroETLIntegrationStatus?
    /// The list of tags associated with the integration.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The Amazon Resource Name (ARN) of the Amazon Redshift data warehouse to use as the target for replication.
    public var targetArn: Swift.String?

    public init(
        additionalEncryptionContext: [Swift.String: Swift.String]? = nil,
        createTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        errors: [RedshiftClientTypes.IntegrationError]? = nil,
        integrationArn: Swift.String? = nil,
        integrationName: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        status: RedshiftClientTypes.ZeroETLIntegrationStatus? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.additionalEncryptionContext = additionalEncryptionContext
        self.createTime = createTime
        self.description = description
        self.errors = errors
        self.integrationArn = integrationArn
        self.integrationName = integrationName
        self.kmsKeyId = kmsKeyId
        self.sourceArn = sourceArn
        self.status = status
        self.tags = tags
        self.targetArn = targetArn
    }
}

public struct ModifyRedshiftIdcApplicationInput: Swift.Sendable {
    /// The authorized token issuer list for the Amazon Redshift IAM Identity Center application to change.
    public var authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]?
    /// The IAM role ARN associated with the Amazon Redshift IAM Identity Center application to change. It has the required permissions to be assumed and invoke the IDC Identity Center API.
    public var iamRoleArn: Swift.String?
    /// The display name for the Amazon Redshift IAM Identity Center application to change. It appears on the console.
    public var idcDisplayName: Swift.String?
    /// The namespace for the Amazon Redshift IAM Identity Center application to change. It determines which managed application verifies the connection token.
    public var identityNamespace: Swift.String?
    /// The ARN for the Redshift application that integrates with IAM Identity Center.
    /// This member is required.
    public var redshiftIdcApplicationArn: Swift.String?
    /// A collection of service integrations associated with the application.
    public var serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]?

    public init(
        authorizedTokenIssuerList: [RedshiftClientTypes.AuthorizedTokenIssuer]? = nil,
        iamRoleArn: Swift.String? = nil,
        idcDisplayName: Swift.String? = nil,
        identityNamespace: Swift.String? = nil,
        redshiftIdcApplicationArn: Swift.String? = nil,
        serviceIntegrations: [RedshiftClientTypes.ServiceIntegrationsUnion]? = nil
    )
    {
        self.authorizedTokenIssuerList = authorizedTokenIssuerList
        self.iamRoleArn = iamRoleArn
        self.idcDisplayName = idcDisplayName
        self.identityNamespace = identityNamespace
        self.redshiftIdcApplicationArn = redshiftIdcApplicationArn
        self.serviceIntegrations = serviceIntegrations
    }
}

public struct ModifyRedshiftIdcApplicationOutput: Swift.Sendable {
    /// Contains properties for the Redshift IDC application.
    public var redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication?

    public init(
        redshiftIdcApplication: RedshiftClientTypes.RedshiftIdcApplication? = nil
    )
    {
        self.redshiftIdcApplication = redshiftIdcApplication
    }
}

public struct ModifyScheduledActionInput: Swift.Sendable {
    /// A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled.
    public var enable: Swift.Bool?
    /// A modified end time of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var endTime: Foundation.Date?
    /// A different IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    public var iamRole: Swift.String?
    /// A modified schedule in either at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    public var schedule: Swift.String?
    /// A modified description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action to modify.
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// A modified start time of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var startTime: Foundation.Date?
    /// A modified JSON format of the scheduled action. For more information about this parameter, see [ScheduledAction].
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        enable: Swift.Bool? = nil,
        endTime: Foundation.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}

/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see [ScheduledActionType].
public struct ModifyScheduledActionOutput: Swift.Sendable {
    /// The end time in UTC when the schedule is no longer active. After this time, the scheduled action does not trigger.
    public var endTime: Foundation.Date?
    /// The IAM role to assume to run the scheduled action. This IAM role must have permission to run the Amazon Redshift API operation in the scheduled action. This IAM role must allow the Amazon Redshift scheduler (Principal scheduler.redshift.amazonaws.com) to assume permissions on your behalf. For more information about the IAM role to use with the Amazon Redshift scheduler, see [Using Identity-Based Policies for Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRole: Swift.String?
    /// List of times when the scheduled action will run.
    public var nextInvocations: [Foundation.Date]?
    /// The schedule for a one-time (at format) or recurring (cron format) scheduled action. Schedule invocations must be separated by at least one hour. Format of at expressions is "at(yyyy-mm-ddThh:mm:ss)". For example, "at(2016-03-04T17:27:00)". Format of cron expressions is "cron(Minutes Hours Day-of-month Month Day-of-week Year)". For example, "cron(0 10 ? * MON *)". For more information, see [Cron Expressions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions) in the Amazon CloudWatch Events User Guide.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC when the schedule is active. Before this time, the scheduled action does not trigger.
    public var startTime: Foundation.Date?
    /// The state of the scheduled action. For example, DISABLED.
    public var state: RedshiftClientTypes.ScheduledActionState?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. "{\"ResizeCluster\":{\"NodeType\":\"ra3.4xlarge\",\"ClusterIdentifier\":\"my-test-cluster\",\"NumberOfNodes\":3}}".
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init(
        endTime: Foundation.Date? = nil,
        iamRole: Swift.String? = nil,
        nextInvocations: [Foundation.Date]? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        state: RedshiftClientTypes.ScheduledActionState? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.endTime = endTime
        self.iamRole = iamRole
        self.nextInvocations = nextInvocations
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.state = state
        self.targetAction = targetAction
    }
}

/// Cross-region snapshot copy was temporarily disabled. Try your request again.
public struct SnapshotCopyDisabledFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotCopyDisabledFault" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct ModifySnapshotCopyRetentionPeriodInput: Swift.Sendable {
    /// The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination Amazon Web Services Region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
    public var manual: Swift.Bool?
    /// The number of days to retain automated snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this only changes the retention period of copied automated snapshots. If you decrease the retention period for automated snapshots that are copied to a destination Amazon Web Services Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination Amazon Web Services Region and that fall outside of the new retention period. Constraints: Must be at least 1 and no more than 35 for automated snapshots. If you specify the manual option, only newly copied manual snapshots will have the new retention period. If you specify the value of -1 newly copied manual snapshots are retained indefinitely. Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.
    /// This member is required.
    public var retentionPeriod: Swift.Int?

    public init(
        clusterIdentifier: Swift.String? = nil,
        manual: Swift.Bool? = nil,
        retentionPeriod: Swift.Int? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.manual = manual
        self.retentionPeriod = retentionPeriod
    }
}

public struct ModifySnapshotCopyRetentionPeriodOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// The specified snapshot schedule is already being updated.
public struct SnapshotScheduleUpdateInProgressFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SnapshotScheduleUpdateInProgress" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ModifySnapshotScheduleInput: Swift.Sendable {
    /// An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
    /// This member is required.
    public var scheduleDefinitions: [Swift.String]?
    /// A unique alphanumeric identifier of the schedule to modify.
    /// This member is required.
    public var scheduleIdentifier: Swift.String?

    public init(
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleIdentifier: Swift.String? = nil
    )
    {
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleIdentifier = scheduleIdentifier
    }
}

/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates.
public struct ModifySnapshotScheduleOutput: Swift.Sendable {
    /// The number of clusters associated with the schedule.
    public var associatedClusterCount: Swift.Int?
    /// A list of clusters associated with the schedule. A maximum of 100 clusters is returned.
    public var associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]?
    ///
    public var nextInvocations: [Foundation.Date]?
    /// A list of ScheduleDefinitions.
    public var scheduleDefinitions: [Swift.String]?
    /// The description of the schedule.
    public var scheduleDescription: Swift.String?
    /// A unique identifier for the schedule.
    public var scheduleIdentifier: Swift.String?
    /// An optional set of tags describing the schedule.
    public var tags: [RedshiftClientTypes.Tag]?

    public init(
        associatedClusterCount: Swift.Int? = nil,
        associatedClusters: [RedshiftClientTypes.ClusterAssociatedToSchedule]? = nil,
        nextInvocations: [Foundation.Date]? = nil,
        scheduleDefinitions: [Swift.String]? = nil,
        scheduleDescription: Swift.String? = nil,
        scheduleIdentifier: Swift.String? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil
    )
    {
        self.associatedClusterCount = associatedClusterCount
        self.associatedClusters = associatedClusters
        self.nextInvocations = nextInvocations
        self.scheduleDefinitions = scheduleDefinitions
        self.scheduleDescription = scheduleDescription
        self.scheduleIdentifier = scheduleIdentifier
        self.tags = tags
    }
}

public struct ModifyUsageLimitInput: Swift.Sendable {
    /// The new limit amount. For more information about this parameter, see [UsageLimit].
    public var amount: Swift.Int?
    /// The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see [UsageLimit].
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the usage limit to modify.
    /// This member is required.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.usageLimitId = usageLimitId
    }
}

/// Describes a usage limit object for a cluster.
public struct ModifyUsageLimitOutput: Swift.Sendable {
    /// The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).
    public var amount: Swift.Int?
    /// The action that Amazon Redshift takes when the limit is reached. Possible values are:
    ///
    /// * log - To log an event in a system table. The default is log.
    ///
    /// * emit-metric - To emit CloudWatch metrics.
    ///
    /// * disable - To disable the feature until the next usage period begins.
    public var breachAction: RedshiftClientTypes.UsageLimitBreachAction?
    /// The identifier of the cluster with a usage limit.
    public var clusterIdentifier: Swift.String?
    /// The Amazon Redshift feature to which the limit applies.
    public var featureType: RedshiftClientTypes.UsageLimitFeatureType?
    /// The type of limit. Depending on the feature type, this can be based on a time duration or data size.
    public var limitType: RedshiftClientTypes.UsageLimitLimitType?
    /// The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
    public var period: RedshiftClientTypes.UsageLimitPeriod?
    /// A list of tag instances.
    public var tags: [RedshiftClientTypes.Tag]?
    /// The identifier of the usage limit.
    public var usageLimitId: Swift.String?

    public init(
        amount: Swift.Int? = nil,
        breachAction: RedshiftClientTypes.UsageLimitBreachAction? = nil,
        clusterIdentifier: Swift.String? = nil,
        featureType: RedshiftClientTypes.UsageLimitFeatureType? = nil,
        limitType: RedshiftClientTypes.UsageLimitLimitType? = nil,
        period: RedshiftClientTypes.UsageLimitPeriod? = nil,
        tags: [RedshiftClientTypes.Tag]? = nil,
        usageLimitId: Swift.String? = nil
    )
    {
        self.amount = amount
        self.breachAction = breachAction
        self.clusterIdentifier = clusterIdentifier
        self.featureType = featureType
        self.limitType = limitType
        self.period = period
        self.tags = tags
        self.usageLimitId = usageLimitId
    }
}

/// Describes a pause cluster operation. For example, a scheduled action to run the PauseCluster API operation.
public struct PauseClusterInput: Swift.Sendable {
    /// The identifier of the cluster to be paused.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct PauseClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// Request would exceed the user's compute node quota. For information about increasing your quota, go to [Limits in Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
public struct ReservedNodeQuotaExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReservedNodeQuotaExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

///
public struct PurchaseReservedNodeOfferingInput: Swift.Sendable {
    /// The number of reserved nodes that you want to purchase. Default: 1
    public var nodeCount: Swift.Int?
    /// The unique identifier of the reserved node offering you want to purchase.
    /// This member is required.
    public var reservedNodeOfferingId: Swift.String?

    public init(
        nodeCount: Swift.Int? = nil,
        reservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.nodeCount = nodeCount
        self.reservedNodeOfferingId = reservedNodeOfferingId
    }
}

public struct PurchaseReservedNodeOfferingOutput: Swift.Sendable {
    /// Describes a reserved node. You can call the [DescribeReservedNodeOfferings] API to obtain the available reserved node offerings.
    public var reservedNode: RedshiftClientTypes.ReservedNode?

    public init(
        reservedNode: RedshiftClientTypes.ReservedNode? = nil
    )
    {
        self.reservedNode = reservedNode
    }
}

public struct PutResourcePolicyInput: Swift.Sendable {
    /// The content of the resource policy being updated.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource of which its resource policy is updated.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutResourcePolicyOutput: Swift.Sendable {
    /// The content of the updated resource policy.
    public var resourcePolicy: RedshiftClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: RedshiftClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

///
public struct RebootClusterInput: Swift.Sendable {
    /// The cluster identifier.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct RebootClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct RejectDataShareInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the datashare to reject.
    /// This member is required.
    public var dataShareArn: Swift.String?

    public init(
        dataShareArn: Swift.String? = nil
    )
    {
        self.dataShareArn = dataShareArn
    }
}

public struct RejectDataShareOutput: Swift.Sendable {
    /// A value that specifies whether the datashare can be shared to a publicly accessible cluster.
    public var allowPubliclyAccessibleConsumers: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the datashare that the consumer is to use.
    public var dataShareArn: Swift.String?
    /// A value that specifies when the datashare has an association between producer and data consumers.
    public var dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    /// The identifier of a datashare to show its managing entity.
    public var managedBy: Swift.String?
    /// The Amazon Resource Name (ARN) of the producer namespace.
    public var producerArn: Swift.String?

    public init(
        allowPubliclyAccessibleConsumers: Swift.Bool? = nil,
        dataShareArn: Swift.String? = nil,
        dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]? = nil,
        managedBy: Swift.String? = nil,
        producerArn: Swift.String? = nil
    )
    {
        self.allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumers
        self.dataShareArn = dataShareArn
        self.dataShareAssociations = dataShareAssociations
        self.managedBy = managedBy
        self.producerArn = producerArn
    }
}

///
public struct ResetClusterParameterGroupInput: Swift.Sendable {
    /// The name of the cluster parameter group to be reset.
    /// This member is required.
    public var parameterGroupName: Swift.String?
    /// An array of names of parameters to be reset. If ResetAllParameters option is not used, then at least one parameter name must be supplied. Constraints: A maximum of 20 parameters can be reset in a single request.
    public var parameters: [RedshiftClientTypes.Parameter]?
    /// If true, all parameters in the specified parameter group will be reset to their default values. Default: true
    public var resetAllParameters: Swift.Bool?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameters: [RedshiftClientTypes.Parameter]? = nil,
        resetAllParameters: Swift.Bool? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameters = parameters
        self.resetAllParameters = resetAllParameters
    }
}

///
public struct ResetClusterParameterGroupOutput: Swift.Sendable {
    /// The name of the cluster parameter group.
    public var parameterGroupName: Swift.String?
    /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
    public var parameterGroupStatus: Swift.String?

    public init(
        parameterGroupName: Swift.String? = nil,
        parameterGroupStatus: Swift.String? = nil
    )
    {
        self.parameterGroupName = parameterGroupName
        self.parameterGroupStatus = parameterGroupStatus
    }
}

/// Describes a resize cluster operation. For example, a scheduled action to run the ResizeCluster API operation.
public struct ResizeClusterInput: Swift.Sendable {
    /// A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false, the resize type is elastic.
    public var classic: Swift.Bool?
    /// The unique identifier for the cluster to resize.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The new cluster type for the specified cluster.
    public var clusterType: Swift.String?
    /// The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
    public var nodeType: Swift.String?
    /// The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
    public var numberOfNodes: Swift.Int?
    /// The identifier of the reserved node.
    public var reservedNodeId: Swift.String?
    /// The identifier of the target reserved node offering.
    public var targetReservedNodeOfferingId: Swift.String?

    public init(
        classic: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterType: Swift.String? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        reservedNodeId: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil
    )
    {
        self.classic = classic
        self.clusterIdentifier = clusterIdentifier
        self.clusterType = clusterType
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.reservedNodeId = reservedNodeId
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
    }
}

public struct ResizeClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

///
public struct RestoreFromClusterSnapshotInput: Swift.Sendable {
    /// Reserved.
    public var additionalInfo: Swift.String?
    /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default: true
    public var allowVersionUpgrade: Swift.Bool?
    /// This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
    public var aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with [CreateClusterSnapshot]. You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days. Default: The value selected for the cluster from which the snapshot was taken. Constraints: Must be a value from 0 to 35.
    public var automatedSnapshotRetentionPeriod: Swift.Int?
    /// The Amazon EC2 Availability Zone in which to restore the cluster. Default: A random, system-chosen Availability Zone. Example: us-east-2a
    public var availabilityZone: Swift.String?
    /// The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.
    public var availabilityZoneRelocation: Swift.Bool?
    /// The identifier of the cluster that will be created from restoring the snapshot. Constraints:
    ///
    /// * Must contain from 1 to 63 alphanumeric characters or hyphens.
    ///
    /// * Alphabetic characters must be lowercase.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    /// * Must be unique for all clusters within an Amazon Web Services account.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to [Working with Amazon Redshift Parameter Groups](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html). Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters or hyphens.
    ///
    /// * First character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    public var clusterParameterGroupName: Swift.String?
    /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift. Cluster security groups only apply to clusters outside of VPCs.
    public var clusterSecurityGroups: [Swift.String]?
    /// The name of the subnet group where you want to cluster restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.
    public var clusterSubnetGroupName: Swift.String?
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.
    public var defaultIamRoleArn: Swift.String?
    /// The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.
    public var elasticIp: Swift.String?
    /// Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.
    public var encrypted: Swift.Bool?
    /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
    public var enhancedVpcRouting: Swift.Bool?
    /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
    public var hsmClientCertificateIdentifier: Swift.String?
    /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
    public var hsmConfigurationIdentifier: Swift.String?
    /// A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to [Quotas and limits](https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html) in the Amazon Redshift Cluster Management Guide.
    public var iamRoles: [Swift.String]?
    /// The IP address type for the cluster. Possible values are ipv4 and dualstack.
    public var ipAddressType: Swift.String?
    /// The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.
    public var kmsKeyId: Swift.String?
    /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
    public var maintenanceTrackName: Swift.String?
    /// If true, Amazon Redshift uses Secrets Manager to manage the restored cluster's admin credentials. If ManageMasterPassword is false or not set, Amazon Redshift uses the admin credentials the cluster had at the time the snapshot was taken.
    public var manageMasterPassword: Swift.Bool?
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. The value must be either -1 or an integer between 1 and 3,653.
    public var manualSnapshotRetentionPeriod: Swift.Int?
    /// The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin credentials secret. You can only use this parameter if ManageMasterPassword is true.
    public var masterPasswordSecretKmsKeyId: Swift.String?
    /// If true, the snapshot will be restored to a cluster deployed in two Availability Zones.
    public var multiAZ: Swift.Bool?
    /// The node type that the restored cluster will be provisioned with. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc2.large node type into another dc2 type. For more information about node types, see [ About Clusters and Nodes](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes) in the Amazon Redshift Cluster Management Guide.
    public var nodeType: Swift.String?
    /// The number of nodes specified when provisioning the restored cluster.
    public var numberOfNodes: Swift.Int?
    /// The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    public var ownerAccount: Swift.String?
    /// The port number on which the cluster accepts connections. Default: The same port as the original cluster. Valid values: For clusters with DC2 nodes, must be within the range 1150-65535. For clusters with ra3 nodes, must be within the ranges 5431-5455 or 8191-8215.
    public var port: Swift.Int?
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur. Format: ddd:hh24:mi-ddd:hh24:mi Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see [Maintenance Windows](https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows) in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// If true, the cluster can be accessed from a public network.
    public var publiclyAccessible: Swift.Bool?
    /// The identifier of the target reserved node offering.
    public var reservedNodeId: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You must specify this parameter or snapshotIdentifier, but not both.
    public var snapshotArn: Swift.String?
    /// The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You must specify this parameter or snapshotArn, but not both. Example: my-snapshot-id
    public var snapshotIdentifier: Swift.String?
    /// A unique identifier for the snapshot schedule.
    public var snapshotScheduleIdentifier: Swift.String?
    /// The identifier of the target reserved node offering.
    public var targetReservedNodeOfferingId: Swift.String?
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster. VPC security groups only apply to clusters in VPCs.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init(
        additionalInfo: Swift.String? = nil,
        allowVersionUpgrade: Swift.Bool? = nil,
        aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus? = nil,
        automatedSnapshotRetentionPeriod: Swift.Int? = nil,
        availabilityZone: Swift.String? = nil,
        availabilityZoneRelocation: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterParameterGroupName: Swift.String? = nil,
        clusterSecurityGroups: [Swift.String]? = nil,
        clusterSubnetGroupName: Swift.String? = nil,
        defaultIamRoleArn: Swift.String? = nil,
        elasticIp: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        enhancedVpcRouting: Swift.Bool? = nil,
        hsmClientCertificateIdentifier: Swift.String? = nil,
        hsmConfigurationIdentifier: Swift.String? = nil,
        iamRoles: [Swift.String]? = nil,
        ipAddressType: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        maintenanceTrackName: Swift.String? = nil,
        manageMasterPassword: Swift.Bool? = nil,
        manualSnapshotRetentionPeriod: Swift.Int? = nil,
        masterPasswordSecretKmsKeyId: Swift.String? = nil,
        multiAZ: Swift.Bool? = nil,
        nodeType: Swift.String? = nil,
        numberOfNodes: Swift.Int? = nil,
        ownerAccount: Swift.String? = nil,
        port: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        reservedNodeId: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        snapshotScheduleIdentifier: Swift.String? = nil,
        targetReservedNodeOfferingId: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.allowVersionUpgrade = allowVersionUpgrade
        self.aquaConfigurationStatus = aquaConfigurationStatus
        self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
        self.availabilityZone = availabilityZone
        self.availabilityZoneRelocation = availabilityZoneRelocation
        self.clusterIdentifier = clusterIdentifier
        self.clusterParameterGroupName = clusterParameterGroupName
        self.clusterSecurityGroups = clusterSecurityGroups
        self.clusterSubnetGroupName = clusterSubnetGroupName
        self.defaultIamRoleArn = defaultIamRoleArn
        self.elasticIp = elasticIp
        self.encrypted = encrypted
        self.enhancedVpcRouting = enhancedVpcRouting
        self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        self.iamRoles = iamRoles
        self.ipAddressType = ipAddressType
        self.kmsKeyId = kmsKeyId
        self.maintenanceTrackName = maintenanceTrackName
        self.manageMasterPassword = manageMasterPassword
        self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
        self.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId
        self.multiAZ = multiAZ
        self.nodeType = nodeType
        self.numberOfNodes = numberOfNodes
        self.ownerAccount = ownerAccount
        self.port = port
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.reservedNodeId = reservedNodeId
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
        self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
        self.targetReservedNodeOfferingId = targetReservedNodeOfferingId
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}

public struct RestoreFromClusterSnapshotOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

///
public struct RestoreTableFromClusterSnapshotInput: Swift.Sendable {
    /// The identifier of the Amazon Redshift cluster to restore the table to.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false (default), the names are not case sensitive.
    public var enableCaseSensitiveIdentifier: Swift.Bool?
    /// The name of the table to create as a result of the current request.
    /// This member is required.
    public var newTableName: Swift.String?
    /// The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the ClusterIdentifier parameter.
    /// This member is required.
    public var snapshotIdentifier: Swift.String?
    /// The name of the source database that contains the table to restore from.
    /// This member is required.
    public var sourceDatabaseName: Swift.String?
    /// The name of the source schema that contains the table to restore from. If you do not specify a SourceSchemaName value, the default is public.
    public var sourceSchemaName: Swift.String?
    /// The name of the source table to restore from.
    /// This member is required.
    public var sourceTableName: Swift.String?
    /// The name of the database to restore the table to.
    public var targetDatabaseName: Swift.String?
    /// The name of the schema to restore the table to.
    public var targetSchemaName: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        enableCaseSensitiveIdentifier: Swift.Bool? = nil,
        newTableName: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil,
        sourceDatabaseName: Swift.String? = nil,
        sourceSchemaName: Swift.String? = nil,
        sourceTableName: Swift.String? = nil,
        targetDatabaseName: Swift.String? = nil,
        targetSchemaName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.enableCaseSensitiveIdentifier = enableCaseSensitiveIdentifier
        self.newTableName = newTableName
        self.snapshotIdentifier = snapshotIdentifier
        self.sourceDatabaseName = sourceDatabaseName
        self.sourceSchemaName = sourceSchemaName
        self.sourceTableName = sourceTableName
        self.targetDatabaseName = targetDatabaseName
        self.targetSchemaName = targetSchemaName
    }
}

public struct RestoreTableFromClusterSnapshotOutput: Swift.Sendable {
    /// Describes the status of a [RestoreTableFromClusterSnapshot] operation.
    public var tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus?

    public init(
        tableRestoreStatus: RedshiftClientTypes.TableRestoreStatus? = nil
    )
    {
        self.tableRestoreStatus = tableRestoreStatus
    }
}

/// Describes a resume cluster operation. For example, a scheduled action to run the ResumeCluster API operation.
public struct ResumeClusterInput: Swift.Sendable {
    /// The identifier of the cluster to be resumed.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct ResumeClusterOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

///
public struct RevokeClusterSecurityGroupIngressInput: Swift.Sendable {
    /// The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified, EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided.
    public var cidrip: Swift.String?
    /// The name of the security Group from which to revoke the ingress rule.
    /// This member is required.
    public var clusterSecurityGroupName: Swift.String?
    /// The name of the EC2 Security Group whose access is to be revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be provided and CIDRIP cannot be provided.
    public var ec2SecurityGroupName: Swift.String?
    /// The Amazon Web Services account number of the owner of the security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified, EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided. Example: 111122223333
    public var ec2SecurityGroupOwnerId: Swift.String?

    public init(
        cidrip: Swift.String? = nil,
        clusterSecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupName: Swift.String? = nil,
        ec2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cidrip = cidrip
        self.clusterSecurityGroupName = clusterSecurityGroupName
        self.ec2SecurityGroupName = ec2SecurityGroupName
        self.ec2SecurityGroupOwnerId = ec2SecurityGroupOwnerId
    }
}

public struct RevokeClusterSecurityGroupIngressOutput: Swift.Sendable {
    /// Describes a security group.
    public var clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup?

    public init(
        clusterSecurityGroup: RedshiftClientTypes.ClusterSecurityGroup? = nil
    )
    {
        self.clusterSecurityGroup = clusterSecurityGroup
    }
}

public struct RevokeEndpointAccessInput: Swift.Sendable {
    /// The Amazon Web Services account ID whose access is to be revoked.
    public var account: Swift.String?
    /// The cluster to revoke access from.
    public var clusterIdentifier: Swift.String?
    /// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
    public var force: Swift.Bool?
    /// The virtual private cloud (VPC) identifiers for which access is to be revoked.
    public var vpcIds: [Swift.String]?

    public init(
        account: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        force: Swift.Bool? = nil,
        vpcIds: [Swift.String]? = nil
    )
    {
        self.account = account
        self.clusterIdentifier = clusterIdentifier
        self.force = force
        self.vpcIds = vpcIds
    }
}

/// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
public struct RevokeEndpointAccessOutput: Swift.Sendable {
    /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
    public var allowedAllVPCs: Swift.Bool?
    /// The VPCs allowed access to the cluster.
    public var allowedVPCs: [Swift.String]?
    /// The time (UTC) when the authorization was created.
    public var authorizeTime: Foundation.Date?
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The status of the cluster.
    public var clusterStatus: Swift.String?
    /// The number of Redshift-managed VPC endpoints created for the authorization.
    public var endpointCount: Swift.Int?
    /// The Amazon Web Services account ID of the grantee of the cluster.
    public var grantee: Swift.String?
    /// The Amazon Web Services account ID of the cluster owner.
    public var grantor: Swift.String?
    /// The status of the authorization action.
    public var status: RedshiftClientTypes.AuthorizationStatus?

    public init(
        allowedAllVPCs: Swift.Bool? = nil,
        allowedVPCs: [Swift.String]? = nil,
        authorizeTime: Foundation.Date? = nil,
        clusterIdentifier: Swift.String? = nil,
        clusterStatus: Swift.String? = nil,
        endpointCount: Swift.Int? = nil,
        grantee: Swift.String? = nil,
        grantor: Swift.String? = nil,
        status: RedshiftClientTypes.AuthorizationStatus? = nil
    )
    {
        self.allowedAllVPCs = allowedAllVPCs
        self.allowedVPCs = allowedVPCs
        self.authorizeTime = authorizeTime
        self.clusterIdentifier = clusterIdentifier
        self.clusterStatus = clusterStatus
        self.endpointCount = endpointCount
        self.grantee = grantee
        self.grantor = grantor
        self.status = status
    }
}

///
public struct RevokeSnapshotAccessInput: Swift.Sendable {
    /// The identifier of the Amazon Web Services account that can no longer restore the specified snapshot.
    /// This member is required.
    public var accountWithRestoreAccess: Swift.String?
    /// The Amazon Resource Name (ARN) of the snapshot associated with the message to revoke access.
    public var snapshotArn: Swift.String?
    /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
    public var snapshotClusterIdentifier: Swift.String?
    /// The identifier of the snapshot that the account can no longer access.
    public var snapshotIdentifier: Swift.String?

    public init(
        accountWithRestoreAccess: Swift.String? = nil,
        snapshotArn: Swift.String? = nil,
        snapshotClusterIdentifier: Swift.String? = nil,
        snapshotIdentifier: Swift.String? = nil
    )
    {
        self.accountWithRestoreAccess = accountWithRestoreAccess
        self.snapshotArn = snapshotArn
        self.snapshotClusterIdentifier = snapshotClusterIdentifier
        self.snapshotIdentifier = snapshotIdentifier
    }
}

public struct RevokeSnapshotAccessOutput: Swift.Sendable {
    /// Describes a snapshot.
    public var snapshot: RedshiftClientTypes.Snapshot?

    public init(
        snapshot: RedshiftClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

///
public struct RotateEncryptionKeyInput: Swift.Sendable {
    /// The unique identifier of the cluster that you want to rotate the encryption keys for. Constraints: Must be the name of valid cluster that has encryption enabled.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct RotateEncryptionKeyOutput: Swift.Sendable {
    /// Describes a cluster.
    public var cluster: RedshiftClientTypes.Cluster?

    public init(
        cluster: RedshiftClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct UpdatePartnerStatusInput: Swift.Sendable {
    /// The Amazon Web Services account ID that owns the cluster.
    /// This member is required.
    public var accountId: Swift.String?
    /// The cluster identifier of the cluster whose partner integration status is being updated.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name of the database whose partner integration status is being updated.
    /// This member is required.
    public var databaseName: Swift.String?
    /// The name of the partner whose integration status is being updated.
    /// This member is required.
    public var partnerName: Swift.String?
    /// The value of the updated status.
    /// This member is required.
    public var status: RedshiftClientTypes.PartnerIntegrationStatus?
    /// The status message provided by the partner.
    public var statusMessage: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        status: RedshiftClientTypes.PartnerIntegrationStatus? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.clusterIdentifier = clusterIdentifier
        self.databaseName = databaseName
        self.partnerName = partnerName
        self.status = status
        self.statusMessage = statusMessage
    }
}

public struct UpdatePartnerStatusOutput: Swift.Sendable {
    /// The name of the database that receives data from the partner.
    public var databaseName: Swift.String?
    /// The name of the partner that is authorized to send data.
    public var partnerName: Swift.String?

    public init(
        databaseName: Swift.String? = nil,
        partnerName: Swift.String? = nil
    )
    {
        self.databaseName = databaseName
        self.partnerName = partnerName
    }
}

extension AcceptReservedNodeExchangeInput {

    static func urlPathProvider(_ value: AcceptReservedNodeExchangeInput) -> Swift.String? {
        return "/"
    }
}

extension AddPartnerInput {

    static func urlPathProvider(_ value: AddPartnerInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateDataShareConsumerInput {

    static func urlPathProvider(_ value: AssociateDataShareConsumerInput) -> Swift.String? {
        return "/"
    }
}

extension AuthorizeClusterSecurityGroupIngressInput {

    static func urlPathProvider(_ value: AuthorizeClusterSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

extension AuthorizeDataShareInput {

    static func urlPathProvider(_ value: AuthorizeDataShareInput) -> Swift.String? {
        return "/"
    }
}

extension AuthorizeEndpointAccessInput {

    static func urlPathProvider(_ value: AuthorizeEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

extension AuthorizeSnapshotAccessInput {

    static func urlPathProvider(_ value: AuthorizeSnapshotAccessInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDeleteClusterSnapshotsInput {

    static func urlPathProvider(_ value: BatchDeleteClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchModifyClusterSnapshotsInput {

    static func urlPathProvider(_ value: BatchModifyClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension CancelResizeInput {

    static func urlPathProvider(_ value: CancelResizeInput) -> Swift.String? {
        return "/"
    }
}

extension CopyClusterSnapshotInput {

    static func urlPathProvider(_ value: CopyClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAuthenticationProfileInput {

    static func urlPathProvider(_ value: CreateAuthenticationProfileInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterParameterGroupInput {

    static func urlPathProvider(_ value: CreateClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterSecurityGroupInput {

    static func urlPathProvider(_ value: CreateClusterSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterSnapshotInput {

    static func urlPathProvider(_ value: CreateClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterSubnetGroupInput {

    static func urlPathProvider(_ value: CreateClusterSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCustomDomainAssociationInput {

    static func urlPathProvider(_ value: CreateCustomDomainAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEndpointAccessInput {

    static func urlPathProvider(_ value: CreateEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEventSubscriptionInput {

    static func urlPathProvider(_ value: CreateEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHsmClientCertificateInput {

    static func urlPathProvider(_ value: CreateHsmClientCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHsmConfigurationInput {

    static func urlPathProvider(_ value: CreateHsmConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateIntegrationInput {

    static func urlPathProvider(_ value: CreateIntegrationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRedshiftIdcApplicationInput {

    static func urlPathProvider(_ value: CreateRedshiftIdcApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateScheduledActionInput {

    static func urlPathProvider(_ value: CreateScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSnapshotCopyGrantInput {

    static func urlPathProvider(_ value: CreateSnapshotCopyGrantInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSnapshotScheduleInput {

    static func urlPathProvider(_ value: CreateSnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTagsInput {

    static func urlPathProvider(_ value: CreateTagsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUsageLimitInput {

    static func urlPathProvider(_ value: CreateUsageLimitInput) -> Swift.String? {
        return "/"
    }
}

extension DeauthorizeDataShareInput {

    static func urlPathProvider(_ value: DeauthorizeDataShareInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAuthenticationProfileInput {

    static func urlPathProvider(_ value: DeleteAuthenticationProfileInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterParameterGroupInput {

    static func urlPathProvider(_ value: DeleteClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterSecurityGroupInput {

    static func urlPathProvider(_ value: DeleteClusterSecurityGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterSnapshotInput {

    static func urlPathProvider(_ value: DeleteClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterSubnetGroupInput {

    static func urlPathProvider(_ value: DeleteClusterSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCustomDomainAssociationInput {

    static func urlPathProvider(_ value: DeleteCustomDomainAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEndpointAccessInput {

    static func urlPathProvider(_ value: DeleteEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEventSubscriptionInput {

    static func urlPathProvider(_ value: DeleteEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHsmClientCertificateInput {

    static func urlPathProvider(_ value: DeleteHsmClientCertificateInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHsmConfigurationInput {

    static func urlPathProvider(_ value: DeleteHsmConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteIntegrationInput {

    static func urlPathProvider(_ value: DeleteIntegrationInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePartnerInput {

    static func urlPathProvider(_ value: DeletePartnerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRedshiftIdcApplicationInput {

    static func urlPathProvider(_ value: DeleteRedshiftIdcApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteScheduledActionInput {

    static func urlPathProvider(_ value: DeleteScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSnapshotCopyGrantInput {

    static func urlPathProvider(_ value: DeleteSnapshotCopyGrantInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSnapshotScheduleInput {

    static func urlPathProvider(_ value: DeleteSnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTagsInput {

    static func urlPathProvider(_ value: DeleteTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUsageLimitInput {

    static func urlPathProvider(_ value: DeleteUsageLimitInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccountAttributesInput {

    static func urlPathProvider(_ value: DescribeAccountAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAuthenticationProfilesInput {

    static func urlPathProvider(_ value: DescribeAuthenticationProfilesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterDbRevisionsInput {

    static func urlPathProvider(_ value: DescribeClusterDbRevisionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterParameterGroupsInput {

    static func urlPathProvider(_ value: DescribeClusterParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterParametersInput {

    static func urlPathProvider(_ value: DescribeClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClustersInput {

    static func urlPathProvider(_ value: DescribeClustersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterSecurityGroupsInput {

    static func urlPathProvider(_ value: DescribeClusterSecurityGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterSnapshotsInput {

    static func urlPathProvider(_ value: DescribeClusterSnapshotsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterSubnetGroupsInput {

    static func urlPathProvider(_ value: DescribeClusterSubnetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterTracksInput {

    static func urlPathProvider(_ value: DescribeClusterTracksInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterVersionsInput {

    static func urlPathProvider(_ value: DescribeClusterVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCustomDomainAssociationsInput {

    static func urlPathProvider(_ value: DescribeCustomDomainAssociationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataSharesInput {

    static func urlPathProvider(_ value: DescribeDataSharesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataSharesForConsumerInput {

    static func urlPathProvider(_ value: DescribeDataSharesForConsumerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataSharesForProducerInput {

    static func urlPathProvider(_ value: DescribeDataSharesForProducerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDefaultClusterParametersInput {

    static func urlPathProvider(_ value: DescribeDefaultClusterParametersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointAccessInput {

    static func urlPathProvider(_ value: DescribeEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointAuthorizationInput {

    static func urlPathProvider(_ value: DescribeEndpointAuthorizationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventCategoriesInput {

    static func urlPathProvider(_ value: DescribeEventCategoriesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventsInput {

    static func urlPathProvider(_ value: DescribeEventsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventSubscriptionsInput {

    static func urlPathProvider(_ value: DescribeEventSubscriptionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHsmClientCertificatesInput {

    static func urlPathProvider(_ value: DescribeHsmClientCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHsmConfigurationsInput {

    static func urlPathProvider(_ value: DescribeHsmConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInboundIntegrationsInput {

    static func urlPathProvider(_ value: DescribeInboundIntegrationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeIntegrationsInput {

    static func urlPathProvider(_ value: DescribeIntegrationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLoggingStatusInput {

    static func urlPathProvider(_ value: DescribeLoggingStatusInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeNodeConfigurationOptionsInput {

    static func urlPathProvider(_ value: DescribeNodeConfigurationOptionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeOrderableClusterOptionsInput {

    static func urlPathProvider(_ value: DescribeOrderableClusterOptionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePartnersInput {

    static func urlPathProvider(_ value: DescribePartnersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRedshiftIdcApplicationsInput {

    static func urlPathProvider(_ value: DescribeRedshiftIdcApplicationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReservedNodeExchangeStatusInput {

    static func urlPathProvider(_ value: DescribeReservedNodeExchangeStatusInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReservedNodeOfferingsInput {

    static func urlPathProvider(_ value: DescribeReservedNodeOfferingsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeReservedNodesInput {

    static func urlPathProvider(_ value: DescribeReservedNodesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResizeInput {

    static func urlPathProvider(_ value: DescribeResizeInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScheduledActionsInput {

    static func urlPathProvider(_ value: DescribeScheduledActionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSnapshotCopyGrantsInput {

    static func urlPathProvider(_ value: DescribeSnapshotCopyGrantsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSnapshotSchedulesInput {

    static func urlPathProvider(_ value: DescribeSnapshotSchedulesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStorageInput {

    static func urlPathProvider(_ value: DescribeStorageInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTableRestoreStatusInput {

    static func urlPathProvider(_ value: DescribeTableRestoreStatusInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTagsInput {

    static func urlPathProvider(_ value: DescribeTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUsageLimitsInput {

    static func urlPathProvider(_ value: DescribeUsageLimitsInput) -> Swift.String? {
        return "/"
    }
}

extension DisableLoggingInput {

    static func urlPathProvider(_ value: DisableLoggingInput) -> Swift.String? {
        return "/"
    }
}

extension DisableSnapshotCopyInput {

    static func urlPathProvider(_ value: DisableSnapshotCopyInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateDataShareConsumerInput {

    static func urlPathProvider(_ value: DisassociateDataShareConsumerInput) -> Swift.String? {
        return "/"
    }
}

extension EnableLoggingInput {

    static func urlPathProvider(_ value: EnableLoggingInput) -> Swift.String? {
        return "/"
    }
}

extension EnableSnapshotCopyInput {

    static func urlPathProvider(_ value: EnableSnapshotCopyInput) -> Swift.String? {
        return "/"
    }
}

extension FailoverPrimaryComputeInput {

    static func urlPathProvider(_ value: FailoverPrimaryComputeInput) -> Swift.String? {
        return "/"
    }
}

extension GetClusterCredentialsInput {

    static func urlPathProvider(_ value: GetClusterCredentialsInput) -> Swift.String? {
        return "/"
    }
}

extension GetClusterCredentialsWithIAMInput {

    static func urlPathProvider(_ value: GetClusterCredentialsWithIAMInput) -> Swift.String? {
        return "/"
    }
}

extension GetReservedNodeExchangeConfigurationOptionsInput {

    static func urlPathProvider(_ value: GetReservedNodeExchangeConfigurationOptionsInput) -> Swift.String? {
        return "/"
    }
}

extension GetReservedNodeExchangeOfferingsInput {

    static func urlPathProvider(_ value: GetReservedNodeExchangeOfferingsInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension ListRecommendationsInput {

    static func urlPathProvider(_ value: ListRecommendationsInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyAquaConfigurationInput {

    static func urlPathProvider(_ value: ModifyAquaConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyAuthenticationProfileInput {

    static func urlPathProvider(_ value: ModifyAuthenticationProfileInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterInput {

    static func urlPathProvider(_ value: ModifyClusterInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterDbRevisionInput {

    static func urlPathProvider(_ value: ModifyClusterDbRevisionInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterIamRolesInput {

    static func urlPathProvider(_ value: ModifyClusterIamRolesInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterMaintenanceInput {

    static func urlPathProvider(_ value: ModifyClusterMaintenanceInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterParameterGroupInput {

    static func urlPathProvider(_ value: ModifyClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterSnapshotInput {

    static func urlPathProvider(_ value: ModifyClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterSnapshotScheduleInput {

    static func urlPathProvider(_ value: ModifyClusterSnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyClusterSubnetGroupInput {

    static func urlPathProvider(_ value: ModifyClusterSubnetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyCustomDomainAssociationInput {

    static func urlPathProvider(_ value: ModifyCustomDomainAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyEndpointAccessInput {

    static func urlPathProvider(_ value: ModifyEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyEventSubscriptionInput {

    static func urlPathProvider(_ value: ModifyEventSubscriptionInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyIntegrationInput {

    static func urlPathProvider(_ value: ModifyIntegrationInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyRedshiftIdcApplicationInput {

    static func urlPathProvider(_ value: ModifyRedshiftIdcApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyScheduledActionInput {

    static func urlPathProvider(_ value: ModifyScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

extension ModifySnapshotCopyRetentionPeriodInput {

    static func urlPathProvider(_ value: ModifySnapshotCopyRetentionPeriodInput) -> Swift.String? {
        return "/"
    }
}

extension ModifySnapshotScheduleInput {

    static func urlPathProvider(_ value: ModifySnapshotScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyUsageLimitInput {

    static func urlPathProvider(_ value: ModifyUsageLimitInput) -> Swift.String? {
        return "/"
    }
}

extension PauseClusterInput {

    static func urlPathProvider(_ value: PauseClusterInput) -> Swift.String? {
        return "/"
    }
}

extension PurchaseReservedNodeOfferingInput {

    static func urlPathProvider(_ value: PurchaseReservedNodeOfferingInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RebootClusterInput {

    static func urlPathProvider(_ value: RebootClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RejectDataShareInput {

    static func urlPathProvider(_ value: RejectDataShareInput) -> Swift.String? {
        return "/"
    }
}

extension ResetClusterParameterGroupInput {

    static func urlPathProvider(_ value: ResetClusterParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ResizeClusterInput {

    static func urlPathProvider(_ value: ResizeClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreFromClusterSnapshotInput {

    static func urlPathProvider(_ value: RestoreFromClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreTableFromClusterSnapshotInput {

    static func urlPathProvider(_ value: RestoreTableFromClusterSnapshotInput) -> Swift.String? {
        return "/"
    }
}

extension ResumeClusterInput {

    static func urlPathProvider(_ value: ResumeClusterInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeClusterSecurityGroupIngressInput {

    static func urlPathProvider(_ value: RevokeClusterSecurityGroupIngressInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeEndpointAccessInput {

    static func urlPathProvider(_ value: RevokeEndpointAccessInput) -> Swift.String? {
        return "/"
    }
}

extension RevokeSnapshotAccessInput {

    static func urlPathProvider(_ value: RevokeSnapshotAccessInput) -> Swift.String? {
        return "/"
    }
}

extension RotateEncryptionKeyInput {

    static func urlPathProvider(_ value: RotateEncryptionKeyInput) -> Swift.String? {
        return "/"
    }
}

extension UpdatePartnerStatusInput {

    static func urlPathProvider(_ value: UpdatePartnerStatusInput) -> Swift.String? {
        return "/"
    }
}

extension AcceptReservedNodeExchangeInput {

    static func write(value: AcceptReservedNodeExchangeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["TargetReservedNodeOfferingId"].write(value.targetReservedNodeOfferingId)
        try writer["Action"].write("AcceptReservedNodeExchange")
        try writer["Version"].write("2012-12-01")
    }
}

extension AddPartnerInput {

    static func write(value: AddPartnerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["PartnerName"].write(value.partnerName)
        try writer["Action"].write("AddPartner")
        try writer["Version"].write("2012-12-01")
    }
}

extension AssociateDataShareConsumerInput {

    static func write(value: AssociateDataShareConsumerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowWrites"].write(value.allowWrites)
        try writer["AssociateEntireAccount"].write(value.associateEntireAccount)
        try writer["ConsumerArn"].write(value.consumerArn)
        try writer["ConsumerRegion"].write(value.consumerRegion)
        try writer["DataShareArn"].write(value.dataShareArn)
        try writer["Action"].write("AssociateDataShareConsumer")
        try writer["Version"].write("2012-12-01")
    }
}

extension AuthorizeClusterSecurityGroupIngressInput {

    static func write(value: AuthorizeClusterSecurityGroupIngressInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CIDRIP"].write(value.cidrip)
        try writer["ClusterSecurityGroupName"].write(value.clusterSecurityGroupName)
        try writer["EC2SecurityGroupName"].write(value.ec2SecurityGroupName)
        try writer["EC2SecurityGroupOwnerId"].write(value.ec2SecurityGroupOwnerId)
        try writer["Action"].write("AuthorizeClusterSecurityGroupIngress")
        try writer["Version"].write("2012-12-01")
    }
}

extension AuthorizeDataShareInput {

    static func write(value: AuthorizeDataShareInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowWrites"].write(value.allowWrites)
        try writer["ConsumerIdentifier"].write(value.consumerIdentifier)
        try writer["DataShareArn"].write(value.dataShareArn)
        try writer["Action"].write("AuthorizeDataShare")
        try writer["Version"].write("2012-12-01")
    }
}

extension AuthorizeEndpointAccessInput {

    static func write(value: AuthorizeEndpointAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["VpcIds"].writeList(value.vpcIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcIdentifier", isFlattened: false)
        try writer["Action"].write("AuthorizeEndpointAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension AuthorizeSnapshotAccessInput {

    static func write(value: AuthorizeSnapshotAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountWithRestoreAccess"].write(value.accountWithRestoreAccess)
        try writer["SnapshotArn"].write(value.snapshotArn)
        try writer["SnapshotClusterIdentifier"].write(value.snapshotClusterIdentifier)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Action"].write("AuthorizeSnapshotAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension BatchDeleteClusterSnapshotsInput {

    static func write(value: BatchDeleteClusterSnapshotsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Identifiers"].writeList(value.identifiers, memberWritingClosure: RedshiftClientTypes.DeleteClusterSnapshotMessage.write(value:to:), memberNodeInfo: "DeleteClusterSnapshotMessage", isFlattened: false)
        try writer["Action"].write("BatchDeleteClusterSnapshots")
        try writer["Version"].write("2012-12-01")
    }
}

extension BatchModifyClusterSnapshotsInput {

    static func write(value: BatchModifyClusterSnapshotsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Force"].write(value.force)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["SnapshotIdentifierList"].writeList(value.snapshotIdentifierList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "String", isFlattened: false)
        try writer["Action"].write("BatchModifyClusterSnapshots")
        try writer["Version"].write("2012-12-01")
    }
}

extension CancelResizeInput {

    static func write(value: CancelResizeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("CancelResize")
        try writer["Version"].write("2012-12-01")
    }
}

extension CopyClusterSnapshotInput {

    static func write(value: CopyClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["SourceSnapshotClusterIdentifier"].write(value.sourceSnapshotClusterIdentifier)
        try writer["SourceSnapshotIdentifier"].write(value.sourceSnapshotIdentifier)
        try writer["TargetSnapshotIdentifier"].write(value.targetSnapshotIdentifier)
        try writer["Action"].write("CopyClusterSnapshot")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateAuthenticationProfileInput {

    static func write(value: CreateAuthenticationProfileInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationProfileContent"].write(value.authenticationProfileContent)
        try writer["AuthenticationProfileName"].write(value.authenticationProfileName)
        try writer["Action"].write("CreateAuthenticationProfile")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateClusterInput {

    static func write(value: CreateClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AdditionalInfo"].write(value.additionalInfo)
        try writer["AllowVersionUpgrade"].write(value.allowVersionUpgrade)
        try writer["AquaConfigurationStatus"].write(value.aquaConfigurationStatus)
        try writer["AutomatedSnapshotRetentionPeriod"].write(value.automatedSnapshotRetentionPeriod)
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["AvailabilityZoneRelocation"].write(value.availabilityZoneRelocation)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["ClusterParameterGroupName"].write(value.clusterParameterGroupName)
        try writer["ClusterSecurityGroups"].writeList(value.clusterSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "ClusterSecurityGroupName", isFlattened: false)
        try writer["ClusterSubnetGroupName"].write(value.clusterSubnetGroupName)
        try writer["ClusterType"].write(value.clusterType)
        try writer["ClusterVersion"].write(value.clusterVersion)
        try writer["DBName"].write(value.dbName)
        try writer["DefaultIamRoleArn"].write(value.defaultIamRoleArn)
        try writer["ElasticIp"].write(value.elasticIp)
        try writer["Encrypted"].write(value.encrypted)
        try writer["EnhancedVpcRouting"].write(value.enhancedVpcRouting)
        try writer["HsmClientCertificateIdentifier"].write(value.hsmClientCertificateIdentifier)
        try writer["HsmConfigurationIdentifier"].write(value.hsmConfigurationIdentifier)
        try writer["IamRoles"].writeList(value.iamRoles, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "IamRoleArn", isFlattened: false)
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LoadSampleData"].write(value.loadSampleData)
        try writer["MaintenanceTrackName"].write(value.maintenanceTrackName)
        try writer["ManageMasterPassword"].write(value.manageMasterPassword)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["MasterPasswordSecretKmsKeyId"].write(value.masterPasswordSecretKmsKeyId)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
        try writer["MasterUsername"].write(value.masterUsername)
        try writer["MultiAZ"].write(value.multiAZ)
        try writer["NodeType"].write(value.nodeType)
        try writer["NumberOfNodes"].write(value.numberOfNodes)
        try writer["Port"].write(value.port)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PubliclyAccessible"].write(value.publiclyAccessible)
        try writer["RedshiftIdcApplicationArn"].write(value.redshiftIdcApplicationArn)
        try writer["SnapshotScheduleIdentifier"].write(value.snapshotScheduleIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("CreateCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateClusterParameterGroupInput {

    static func write(value: CreateClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["ParameterGroupFamily"].write(value.parameterGroupFamily)
        try writer["ParameterGroupName"].write(value.parameterGroupName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateClusterParameterGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateClusterSecurityGroupInput {

    static func write(value: CreateClusterSecurityGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSecurityGroupName"].write(value.clusterSecurityGroupName)
        try writer["Description"].write(value.description)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateClusterSecurityGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateClusterSnapshotInput {

    static func write(value: CreateClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateClusterSnapshot")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateClusterSubnetGroupInput {

    static func write(value: CreateClusterSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSubnetGroupName"].write(value.clusterSubnetGroupName)
        try writer["Description"].write(value.description)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetIdentifier", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateClusterSubnetGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateCustomDomainAssociationInput {

    static func write(value: CreateCustomDomainAssociationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["CustomDomainCertificateArn"].write(value.customDomainCertificateArn)
        try writer["CustomDomainName"].write(value.customDomainName)
        try writer["Action"].write("CreateCustomDomainAssociation")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateEndpointAccessInput {

    static func write(value: CreateEndpointAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["EndpointName"].write(value.endpointName)
        try writer["ResourceOwner"].write(value.resourceOwner)
        try writer["SubnetGroupName"].write(value.subnetGroupName)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("CreateEndpointAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateEventSubscriptionInput {

    static func write(value: CreateEventSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["EventCategories"].writeList(value.eventCategories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "EventCategory", isFlattened: false)
        try writer["Severity"].write(value.severity)
        try writer["SnsTopicArn"].write(value.snsTopicArn)
        try writer["SourceIds"].writeList(value.sourceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SourceId", isFlattened: false)
        try writer["SourceType"].write(value.sourceType)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateEventSubscription")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateHsmClientCertificateInput {

    static func write(value: CreateHsmClientCertificateInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HsmClientCertificateIdentifier"].write(value.hsmClientCertificateIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateHsmClientCertificate")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateHsmConfigurationInput {

    static func write(value: CreateHsmConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["HsmConfigurationIdentifier"].write(value.hsmConfigurationIdentifier)
        try writer["HsmIpAddress"].write(value.hsmIpAddress)
        try writer["HsmPartitionName"].write(value.hsmPartitionName)
        try writer["HsmPartitionPassword"].write(value.hsmPartitionPassword)
        try writer["HsmServerPublicCertificate"].write(value.hsmServerPublicCertificate)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateHsmConfiguration")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateIntegrationInput {

    static func write(value: CreateIntegrationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AdditionalEncryptionContext"].writeMap(value.additionalEncryptionContext, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["IntegrationName"].write(value.integrationName)
        try writer["KMSKeyId"].write(value.kmsKeyId)
        try writer["SourceArn"].write(value.sourceArn)
        try writer["TagList"].writeList(value.tagList, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["TargetArn"].write(value.targetArn)
        try writer["Action"].write("CreateIntegration")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateRedshiftIdcApplicationInput {

    static func write(value: CreateRedshiftIdcApplicationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthorizedTokenIssuerList"].writeList(value.authorizedTokenIssuerList, memberWritingClosure: RedshiftClientTypes.AuthorizedTokenIssuer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["IdcDisplayName"].write(value.idcDisplayName)
        try writer["IdcInstanceArn"].write(value.idcInstanceArn)
        try writer["IdentityNamespace"].write(value.identityNamespace)
        try writer["RedshiftIdcApplicationName"].write(value.redshiftIdcApplicationName)
        try writer["ServiceIntegrations"].writeList(value.serviceIntegrations, memberWritingClosure: RedshiftClientTypes.ServiceIntegrationsUnion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateRedshiftIdcApplication")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateScheduledActionInput {

    static func write(value: CreateScheduledActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enable"].write(value.enable)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["IamRole"].write(value.iamRole)
        try writer["Schedule"].write(value.schedule)
        try writer["ScheduledActionDescription"].write(value.scheduledActionDescription)
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["TargetAction"].write(value.targetAction, with: RedshiftClientTypes.ScheduledActionType.write(value:to:))
        try writer["Action"].write("CreateScheduledAction")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateSnapshotCopyGrantInput {

    static func write(value: CreateSnapshotCopyGrantInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["SnapshotCopyGrantName"].write(value.snapshotCopyGrantName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateSnapshotCopyGrant")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateSnapshotScheduleInput {

    static func write(value: CreateSnapshotScheduleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DryRun"].write(value.dryRun)
        try writer["NextInvocations"].write(value.nextInvocations)
        try writer["ScheduleDefinitions"].writeList(value.scheduleDefinitions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "ScheduleDefinition", isFlattened: false)
        try writer["ScheduleDescription"].write(value.scheduleDescription)
        try writer["ScheduleIdentifier"].write(value.scheduleIdentifier)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateSnapshotSchedule")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateTagsInput {

    static func write(value: CreateTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateTags")
        try writer["Version"].write("2012-12-01")
    }
}

extension CreateUsageLimitInput {

    static func write(value: CreateUsageLimitInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Amount"].write(value.amount)
        try writer["BreachAction"].write(value.breachAction)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["FeatureType"].write(value.featureType)
        try writer["LimitType"].write(value.limitType)
        try writer["Period"].write(value.period)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: RedshiftClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
        try writer["Action"].write("CreateUsageLimit")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeauthorizeDataShareInput {

    static func write(value: DeauthorizeDataShareInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ConsumerIdentifier"].write(value.consumerIdentifier)
        try writer["DataShareArn"].write(value.dataShareArn)
        try writer["Action"].write("DeauthorizeDataShare")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteAuthenticationProfileInput {

    static func write(value: DeleteAuthenticationProfileInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationProfileName"].write(value.authenticationProfileName)
        try writer["Action"].write("DeleteAuthenticationProfile")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteClusterInput {

    static func write(value: DeleteClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["FinalClusterSnapshotIdentifier"].write(value.finalClusterSnapshotIdentifier)
        try writer["FinalClusterSnapshotRetentionPeriod"].write(value.finalClusterSnapshotRetentionPeriod)
        try writer["SkipFinalClusterSnapshot"].write(value.skipFinalClusterSnapshot)
        try writer["Action"].write("DeleteCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteClusterParameterGroupInput {

    static func write(value: DeleteClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ParameterGroupName"].write(value.parameterGroupName)
        try writer["Action"].write("DeleteClusterParameterGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteClusterSecurityGroupInput {

    static func write(value: DeleteClusterSecurityGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSecurityGroupName"].write(value.clusterSecurityGroupName)
        try writer["Action"].write("DeleteClusterSecurityGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteClusterSnapshotInput {

    static func write(value: DeleteClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SnapshotClusterIdentifier"].write(value.snapshotClusterIdentifier)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Action"].write("DeleteClusterSnapshot")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteClusterSubnetGroupInput {

    static func write(value: DeleteClusterSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSubnetGroupName"].write(value.clusterSubnetGroupName)
        try writer["Action"].write("DeleteClusterSubnetGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteCustomDomainAssociationInput {

    static func write(value: DeleteCustomDomainAssociationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["CustomDomainName"].write(value.customDomainName)
        try writer["Action"].write("DeleteCustomDomainAssociation")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteEndpointAccessInput {

    static func write(value: DeleteEndpointAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
        try writer["Action"].write("DeleteEndpointAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteEventSubscriptionInput {

    static func write(value: DeleteEventSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("DeleteEventSubscription")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteHsmClientCertificateInput {

    static func write(value: DeleteHsmClientCertificateInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HsmClientCertificateIdentifier"].write(value.hsmClientCertificateIdentifier)
        try writer["Action"].write("DeleteHsmClientCertificate")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteHsmConfigurationInput {

    static func write(value: DeleteHsmConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HsmConfigurationIdentifier"].write(value.hsmConfigurationIdentifier)
        try writer["Action"].write("DeleteHsmConfiguration")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteIntegrationInput {

    static func write(value: DeleteIntegrationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["IntegrationArn"].write(value.integrationArn)
        try writer["Action"].write("DeleteIntegration")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeletePartnerInput {

    static func write(value: DeletePartnerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["PartnerName"].write(value.partnerName)
        try writer["Action"].write("DeletePartner")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteRedshiftIdcApplicationInput {

    static func write(value: DeleteRedshiftIdcApplicationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RedshiftIdcApplicationArn"].write(value.redshiftIdcApplicationArn)
        try writer["Action"].write("DeleteRedshiftIdcApplication")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Action"].write("DeleteResourcePolicy")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteScheduledActionInput {

    static func write(value: DeleteScheduledActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["Action"].write("DeleteScheduledAction")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteSnapshotCopyGrantInput {

    static func write(value: DeleteSnapshotCopyGrantInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SnapshotCopyGrantName"].write(value.snapshotCopyGrantName)
        try writer["Action"].write("DeleteSnapshotCopyGrant")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteSnapshotScheduleInput {

    static func write(value: DeleteSnapshotScheduleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ScheduleIdentifier"].write(value.scheduleIdentifier)
        try writer["Action"].write("DeleteSnapshotSchedule")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteTagsInput {

    static func write(value: DeleteTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceName"].write(value.resourceName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["Action"].write("DeleteTags")
        try writer["Version"].write("2012-12-01")
    }
}

extension DeleteUsageLimitInput {

    static func write(value: DeleteUsageLimitInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["UsageLimitId"].write(value.usageLimitId)
        try writer["Action"].write("DeleteUsageLimit")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeAccountAttributesInput {

    static func write(value: DescribeAccountAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AttributeNames"].writeList(value.attributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "AttributeName", isFlattened: false)
        try writer["Action"].write("DescribeAccountAttributes")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeAuthenticationProfilesInput {

    static func write(value: DescribeAuthenticationProfilesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationProfileName"].write(value.authenticationProfileName)
        try writer["Action"].write("DescribeAuthenticationProfiles")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterDbRevisionsInput {

    static func write(value: DescribeClusterDbRevisionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeClusterDbRevisions")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterParameterGroupsInput {

    static func write(value: DescribeClusterParameterGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ParameterGroupName"].write(value.parameterGroupName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeClusterParameterGroups")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterParametersInput {

    static func write(value: DescribeClusterParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ParameterGroupName"].write(value.parameterGroupName)
        try writer["Source"].write(value.source)
        try writer["Action"].write("DescribeClusterParameters")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClustersInput {

    static func write(value: DescribeClustersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeClusters")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterSecurityGroupsInput {

    static func write(value: DescribeClusterSecurityGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSecurityGroupName"].write(value.clusterSecurityGroupName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeClusterSecurityGroups")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterSnapshotsInput {

    static func write(value: DescribeClusterSnapshotsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterExists"].write(value.clusterExists)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["OwnerAccount"].write(value.ownerAccount)
        try writer["SnapshotArn"].write(value.snapshotArn)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["SnapshotType"].write(value.snapshotType)
        try writer["SortingEntities"].writeList(value.sortingEntities, memberWritingClosure: RedshiftClientTypes.SnapshotSortingEntity.write(value:to:), memberNodeInfo: "SnapshotSortingEntity", isFlattened: false)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeClusterSnapshots")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterSubnetGroupsInput {

    static func write(value: DescribeClusterSubnetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSubnetGroupName"].write(value.clusterSubnetGroupName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeClusterSubnetGroups")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterTracksInput {

    static func write(value: DescribeClusterTracksInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaintenanceTrackName"].write(value.maintenanceTrackName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeClusterTracks")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeClusterVersionsInput {

    static func write(value: DescribeClusterVersionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterParameterGroupFamily"].write(value.clusterParameterGroupFamily)
        try writer["ClusterVersion"].write(value.clusterVersion)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeClusterVersions")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeCustomDomainAssociationsInput {

    static func write(value: DescribeCustomDomainAssociationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CustomDomainCertificateArn"].write(value.customDomainCertificateArn)
        try writer["CustomDomainName"].write(value.customDomainName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeCustomDomainAssociations")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeDataSharesInput {

    static func write(value: DescribeDataSharesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DataShareArn"].write(value.dataShareArn)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeDataShares")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeDataSharesForConsumerInput {

    static func write(value: DescribeDataSharesForConsumerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ConsumerArn"].write(value.consumerArn)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Status"].write(value.status)
        try writer["Action"].write("DescribeDataSharesForConsumer")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeDataSharesForProducerInput {

    static func write(value: DescribeDataSharesForProducerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ProducerArn"].write(value.producerArn)
        try writer["Status"].write(value.status)
        try writer["Action"].write("DescribeDataSharesForProducer")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeDefaultClusterParametersInput {

    static func write(value: DescribeDefaultClusterParametersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ParameterGroupFamily"].write(value.parameterGroupFamily)
        try writer["Action"].write("DescribeDefaultClusterParameters")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeEndpointAccessInput {

    static func write(value: DescribeEndpointAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["EndpointName"].write(value.endpointName)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ResourceOwner"].write(value.resourceOwner)
        try writer["VpcId"].write(value.vpcId)
        try writer["Action"].write("DescribeEndpointAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeEndpointAuthorizationInput {

    static func write(value: DescribeEndpointAuthorizationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Grantee"].write(value.grantee)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeEndpointAuthorization")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeEventCategoriesInput {

    static func write(value: DescribeEventCategoriesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SourceType"].write(value.sourceType)
        try writer["Action"].write("DescribeEventCategories")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeEventsInput {

    static func write(value: DescribeEventsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Duration"].write(value.duration)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SourceIdentifier"].write(value.sourceIdentifier)
        try writer["SourceType"].write(value.sourceType)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("DescribeEvents")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeEventSubscriptionsInput {

    static func write(value: DescribeEventSubscriptionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeEventSubscriptions")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeHsmClientCertificatesInput {

    static func write(value: DescribeHsmClientCertificatesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HsmClientCertificateIdentifier"].write(value.hsmClientCertificateIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeHsmClientCertificates")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeHsmConfigurationsInput {

    static func write(value: DescribeHsmConfigurationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HsmConfigurationIdentifier"].write(value.hsmConfigurationIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeHsmConfigurations")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeInboundIntegrationsInput {

    static func write(value: DescribeInboundIntegrationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["IntegrationArn"].write(value.integrationArn)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TargetArn"].write(value.targetArn)
        try writer["Action"].write("DescribeInboundIntegrations")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeIntegrationsInput {

    static func write(value: DescribeIntegrationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: RedshiftClientTypes.DescribeIntegrationsFilter.write(value:to:), memberNodeInfo: "DescribeIntegrationsFilter", isFlattened: false)
        try writer["IntegrationArn"].write(value.integrationArn)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["Action"].write("DescribeIntegrations")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeLoggingStatusInput {

    static func write(value: DescribeLoggingStatusInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("DescribeLoggingStatus")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeNodeConfigurationOptionsInput {

    static func write(value: DescribeNodeConfigurationOptionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ActionType"].write(value.actionType)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Filter"].writeList(value.filters, memberWritingClosure: RedshiftClientTypes.NodeConfigurationOptionsFilter.write(value:to:), memberNodeInfo: "NodeConfigurationOptionsFilter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["OwnerAccount"].write(value.ownerAccount)
        try writer["SnapshotArn"].write(value.snapshotArn)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Action"].write("DescribeNodeConfigurationOptions")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeOrderableClusterOptionsInput {

    static func write(value: DescribeOrderableClusterOptionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterVersion"].write(value.clusterVersion)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NodeType"].write(value.nodeType)
        try writer["Action"].write("DescribeOrderableClusterOptions")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribePartnersInput {

    static func write(value: DescribePartnersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["PartnerName"].write(value.partnerName)
        try writer["Action"].write("DescribePartners")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeRedshiftIdcApplicationsInput {

    static func write(value: DescribeRedshiftIdcApplicationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["RedshiftIdcApplicationArn"].write(value.redshiftIdcApplicationArn)
        try writer["Action"].write("DescribeRedshiftIdcApplications")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeReservedNodeExchangeStatusInput {

    static func write(value: DescribeReservedNodeExchangeStatusInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReservedNodeExchangeRequestId"].write(value.reservedNodeExchangeRequestId)
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["Action"].write("DescribeReservedNodeExchangeStatus")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeReservedNodeOfferingsInput {

    static func write(value: DescribeReservedNodeOfferingsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReservedNodeOfferingId"].write(value.reservedNodeOfferingId)
        try writer["Action"].write("DescribeReservedNodeOfferings")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeReservedNodesInput {

    static func write(value: DescribeReservedNodesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["Action"].write("DescribeReservedNodes")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeResizeInput {

    static func write(value: DescribeResizeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("DescribeResize")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeScheduledActionsInput {

    static func write(value: DescribeScheduledActionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Active"].write(value.active)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: RedshiftClientTypes.ScheduledActionFilter.write(value:to:), memberNodeInfo: "ScheduledActionFilter", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["TargetActionType"].write(value.targetActionType)
        try writer["Action"].write("DescribeScheduledActions")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeSnapshotCopyGrantsInput {

    static func write(value: DescribeSnapshotCopyGrantsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SnapshotCopyGrantName"].write(value.snapshotCopyGrantName)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeSnapshotCopyGrants")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeSnapshotSchedulesInput {

    static func write(value: DescribeSnapshotSchedulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ScheduleIdentifier"].write(value.scheduleIdentifier)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeSnapshotSchedules")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeStorageInput {

    static func write(value: DescribeStorageInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeStorage")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeTableRestoreStatusInput {

    static func write(value: DescribeTableRestoreStatusInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TableRestoreRequestId"].write(value.tableRestoreRequestId)
        try writer["Action"].write("DescribeTableRestoreStatus")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeTagsInput {

    static func write(value: DescribeTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ResourceName"].write(value.resourceName)
        try writer["ResourceType"].write(value.resourceType)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["Action"].write("DescribeTags")
        try writer["Version"].write("2012-12-01")
    }
}

extension DescribeUsageLimitsInput {

    static func write(value: DescribeUsageLimitsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["FeatureType"].write(value.featureType)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagKey", isFlattened: false)
        try writer["TagValues"].writeList(value.tagValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "TagValue", isFlattened: false)
        try writer["UsageLimitId"].write(value.usageLimitId)
        try writer["Action"].write("DescribeUsageLimits")
        try writer["Version"].write("2012-12-01")
    }
}

extension DisableLoggingInput {

    static func write(value: DisableLoggingInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("DisableLogging")
        try writer["Version"].write("2012-12-01")
    }
}

extension DisableSnapshotCopyInput {

    static func write(value: DisableSnapshotCopyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("DisableSnapshotCopy")
        try writer["Version"].write("2012-12-01")
    }
}

extension DisassociateDataShareConsumerInput {

    static func write(value: DisassociateDataShareConsumerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ConsumerArn"].write(value.consumerArn)
        try writer["ConsumerRegion"].write(value.consumerRegion)
        try writer["DataShareArn"].write(value.dataShareArn)
        try writer["DisassociateEntireAccount"].write(value.disassociateEntireAccount)
        try writer["Action"].write("DisassociateDataShareConsumer")
        try writer["Version"].write("2012-12-01")
    }
}

extension EnableLoggingInput {

    static func write(value: EnableLoggingInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["BucketName"].write(value.bucketName)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["LogDestinationType"].write(value.logDestinationType)
        try writer["LogExports"].writeList(value.logExports, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["S3KeyPrefix"].write(value.s3KeyPrefix)
        try writer["Action"].write("EnableLogging")
        try writer["Version"].write("2012-12-01")
    }
}

extension EnableSnapshotCopyInput {

    static func write(value: EnableSnapshotCopyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DestinationRegion"].write(value.destinationRegion)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["RetentionPeriod"].write(value.retentionPeriod)
        try writer["SnapshotCopyGrantName"].write(value.snapshotCopyGrantName)
        try writer["Action"].write("EnableSnapshotCopy")
        try writer["Version"].write("2012-12-01")
    }
}

extension FailoverPrimaryComputeInput {

    static func write(value: FailoverPrimaryComputeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("FailoverPrimaryCompute")
        try writer["Version"].write("2012-12-01")
    }
}

extension GetClusterCredentialsInput {

    static func write(value: GetClusterCredentialsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoCreate"].write(value.autoCreate)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["CustomDomainName"].write(value.customDomainName)
        try writer["DbGroups"].writeList(value.dbGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "DbGroup", isFlattened: false)
        try writer["DbName"].write(value.dbName)
        try writer["DbUser"].write(value.dbUser)
        try writer["DurationSeconds"].write(value.durationSeconds)
        try writer["Action"].write("GetClusterCredentials")
        try writer["Version"].write("2012-12-01")
    }
}

extension GetClusterCredentialsWithIAMInput {

    static func write(value: GetClusterCredentialsWithIAMInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["CustomDomainName"].write(value.customDomainName)
        try writer["DbName"].write(value.dbName)
        try writer["DurationSeconds"].write(value.durationSeconds)
        try writer["Action"].write("GetClusterCredentialsWithIAM")
        try writer["Version"].write("2012-12-01")
    }
}

extension GetReservedNodeExchangeConfigurationOptionsInput {

    static func write(value: GetReservedNodeExchangeConfigurationOptionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ActionType"].write(value.actionType)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Action"].write("GetReservedNodeExchangeConfigurationOptions")
        try writer["Version"].write("2012-12-01")
    }
}

extension GetReservedNodeExchangeOfferingsInput {

    static func write(value: GetReservedNodeExchangeOfferingsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["Action"].write("GetReservedNodeExchangeOfferings")
        try writer["Version"].write("2012-12-01")
    }
}

extension GetResourcePolicyInput {

    static func write(value: GetResourcePolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Action"].write("GetResourcePolicy")
        try writer["Version"].write("2012-12-01")
    }
}

extension ListRecommendationsInput {

    static func write(value: ListRecommendationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Marker"].write(value.marker)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NamespaceArn"].write(value.namespaceArn)
        try writer["Action"].write("ListRecommendations")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyAquaConfigurationInput {

    static func write(value: ModifyAquaConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AquaConfigurationStatus"].write(value.aquaConfigurationStatus)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("ModifyAquaConfiguration")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyAuthenticationProfileInput {

    static func write(value: ModifyAuthenticationProfileInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationProfileContent"].write(value.authenticationProfileContent)
        try writer["AuthenticationProfileName"].write(value.authenticationProfileName)
        try writer["Action"].write("ModifyAuthenticationProfile")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterInput {

    static func write(value: ModifyClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowVersionUpgrade"].write(value.allowVersionUpgrade)
        try writer["AutomatedSnapshotRetentionPeriod"].write(value.automatedSnapshotRetentionPeriod)
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["AvailabilityZoneRelocation"].write(value.availabilityZoneRelocation)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["ClusterParameterGroupName"].write(value.clusterParameterGroupName)
        try writer["ClusterSecurityGroups"].writeList(value.clusterSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "ClusterSecurityGroupName", isFlattened: false)
        try writer["ClusterType"].write(value.clusterType)
        try writer["ClusterVersion"].write(value.clusterVersion)
        try writer["ElasticIp"].write(value.elasticIp)
        try writer["Encrypted"].write(value.encrypted)
        try writer["EnhancedVpcRouting"].write(value.enhancedVpcRouting)
        try writer["HsmClientCertificateIdentifier"].write(value.hsmClientCertificateIdentifier)
        try writer["HsmConfigurationIdentifier"].write(value.hsmConfigurationIdentifier)
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["MaintenanceTrackName"].write(value.maintenanceTrackName)
        try writer["ManageMasterPassword"].write(value.manageMasterPassword)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["MasterPasswordSecretKmsKeyId"].write(value.masterPasswordSecretKmsKeyId)
        try writer["MasterUserPassword"].write(value.masterUserPassword)
        try writer["MultiAZ"].write(value.multiAZ)
        try writer["NewClusterIdentifier"].write(value.newClusterIdentifier)
        try writer["NodeType"].write(value.nodeType)
        try writer["NumberOfNodes"].write(value.numberOfNodes)
        try writer["Port"].write(value.port)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PubliclyAccessible"].write(value.publiclyAccessible)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("ModifyCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterDbRevisionInput {

    static func write(value: ModifyClusterDbRevisionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["RevisionTarget"].write(value.revisionTarget)
        try writer["Action"].write("ModifyClusterDbRevision")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterIamRolesInput {

    static func write(value: ModifyClusterIamRolesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AddIamRoles"].writeList(value.addIamRoles, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "IamRoleArn", isFlattened: false)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DefaultIamRoleArn"].write(value.defaultIamRoleArn)
        try writer["RemoveIamRoles"].writeList(value.removeIamRoles, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "IamRoleArn", isFlattened: false)
        try writer["Action"].write("ModifyClusterIamRoles")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterMaintenanceInput {

    static func write(value: ModifyClusterMaintenanceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DeferMaintenance"].write(value.deferMaintenance)
        try writer["DeferMaintenanceDuration"].write(value.deferMaintenanceDuration)
        try writer["DeferMaintenanceEndTime"].writeTimestamp(value.deferMaintenanceEndTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["DeferMaintenanceIdentifier"].write(value.deferMaintenanceIdentifier)
        try writer["DeferMaintenanceStartTime"].writeTimestamp(value.deferMaintenanceStartTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("ModifyClusterMaintenance")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterParameterGroupInput {

    static func write(value: ModifyClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ParameterGroupName"].write(value.parameterGroupName)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: RedshiftClientTypes.Parameter.write(value:to:), memberNodeInfo: "Parameter", isFlattened: false)
        try writer["Action"].write("ModifyClusterParameterGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterSnapshotInput {

    static func write(value: ModifyClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Force"].write(value.force)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Action"].write("ModifyClusterSnapshot")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterSnapshotScheduleInput {

    static func write(value: ModifyClusterSnapshotScheduleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DisassociateSchedule"].write(value.disassociateSchedule)
        try writer["ScheduleIdentifier"].write(value.scheduleIdentifier)
        try writer["Action"].write("ModifyClusterSnapshotSchedule")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyClusterSubnetGroupInput {

    static func write(value: ModifyClusterSubnetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterSubnetGroupName"].write(value.clusterSubnetGroupName)
        try writer["Description"].write(value.description)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SubnetIdentifier", isFlattened: false)
        try writer["Action"].write("ModifyClusterSubnetGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyCustomDomainAssociationInput {

    static func write(value: ModifyCustomDomainAssociationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["CustomDomainCertificateArn"].write(value.customDomainCertificateArn)
        try writer["CustomDomainName"].write(value.customDomainName)
        try writer["Action"].write("ModifyCustomDomainAssociation")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyEndpointAccessInput {

    static func write(value: ModifyEndpointAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("ModifyEndpointAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyEventSubscriptionInput {

    static func write(value: ModifyEventSubscriptionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["EventCategories"].writeList(value.eventCategories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "EventCategory", isFlattened: false)
        try writer["Severity"].write(value.severity)
        try writer["SnsTopicArn"].write(value.snsTopicArn)
        try writer["SourceIds"].writeList(value.sourceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "SourceId", isFlattened: false)
        try writer["SourceType"].write(value.sourceType)
        try writer["SubscriptionName"].write(value.subscriptionName)
        try writer["Action"].write("ModifyEventSubscription")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyIntegrationInput {

    static func write(value: ModifyIntegrationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["IntegrationArn"].write(value.integrationArn)
        try writer["IntegrationName"].write(value.integrationName)
        try writer["Action"].write("ModifyIntegration")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyRedshiftIdcApplicationInput {

    static func write(value: ModifyRedshiftIdcApplicationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthorizedTokenIssuerList"].writeList(value.authorizedTokenIssuerList, memberWritingClosure: RedshiftClientTypes.AuthorizedTokenIssuer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IamRoleArn"].write(value.iamRoleArn)
        try writer["IdcDisplayName"].write(value.idcDisplayName)
        try writer["IdentityNamespace"].write(value.identityNamespace)
        try writer["RedshiftIdcApplicationArn"].write(value.redshiftIdcApplicationArn)
        try writer["ServiceIntegrations"].writeList(value.serviceIntegrations, memberWritingClosure: RedshiftClientTypes.ServiceIntegrationsUnion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("ModifyRedshiftIdcApplication")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyScheduledActionInput {

    static func write(value: ModifyScheduledActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enable"].write(value.enable)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["IamRole"].write(value.iamRole)
        try writer["Schedule"].write(value.schedule)
        try writer["ScheduledActionDescription"].write(value.scheduledActionDescription)
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["TargetAction"].write(value.targetAction, with: RedshiftClientTypes.ScheduledActionType.write(value:to:))
        try writer["Action"].write("ModifyScheduledAction")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifySnapshotCopyRetentionPeriodInput {

    static func write(value: ModifySnapshotCopyRetentionPeriodInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Manual"].write(value.manual)
        try writer["RetentionPeriod"].write(value.retentionPeriod)
        try writer["Action"].write("ModifySnapshotCopyRetentionPeriod")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifySnapshotScheduleInput {

    static func write(value: ModifySnapshotScheduleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ScheduleDefinitions"].writeList(value.scheduleDefinitions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "ScheduleDefinition", isFlattened: false)
        try writer["ScheduleIdentifier"].write(value.scheduleIdentifier)
        try writer["Action"].write("ModifySnapshotSchedule")
        try writer["Version"].write("2012-12-01")
    }
}

extension ModifyUsageLimitInput {

    static func write(value: ModifyUsageLimitInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Amount"].write(value.amount)
        try writer["BreachAction"].write(value.breachAction)
        try writer["UsageLimitId"].write(value.usageLimitId)
        try writer["Action"].write("ModifyUsageLimit")
        try writer["Version"].write("2012-12-01")
    }
}

extension PauseClusterInput {

    static func write(value: PauseClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("PauseCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension PurchaseReservedNodeOfferingInput {

    static func write(value: PurchaseReservedNodeOfferingInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["NodeCount"].write(value.nodeCount)
        try writer["ReservedNodeOfferingId"].write(value.reservedNodeOfferingId)
        try writer["Action"].write("PurchaseReservedNodeOffering")
        try writer["Version"].write("2012-12-01")
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Action"].write("PutResourcePolicy")
        try writer["Version"].write("2012-12-01")
    }
}

extension RebootClusterInput {

    static func write(value: RebootClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("RebootCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension RejectDataShareInput {

    static func write(value: RejectDataShareInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DataShareArn"].write(value.dataShareArn)
        try writer["Action"].write("RejectDataShare")
        try writer["Version"].write("2012-12-01")
    }
}

extension ResetClusterParameterGroupInput {

    static func write(value: ResetClusterParameterGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ParameterGroupName"].write(value.parameterGroupName)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: RedshiftClientTypes.Parameter.write(value:to:), memberNodeInfo: "Parameter", isFlattened: false)
        try writer["ResetAllParameters"].write(value.resetAllParameters)
        try writer["Action"].write("ResetClusterParameterGroup")
        try writer["Version"].write("2012-12-01")
    }
}

extension ResizeClusterInput {

    static func write(value: ResizeClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Classic"].write(value.classic)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["ClusterType"].write(value.clusterType)
        try writer["NodeType"].write(value.nodeType)
        try writer["NumberOfNodes"].write(value.numberOfNodes)
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["TargetReservedNodeOfferingId"].write(value.targetReservedNodeOfferingId)
        try writer["Action"].write("ResizeCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension RestoreFromClusterSnapshotInput {

    static func write(value: RestoreFromClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AdditionalInfo"].write(value.additionalInfo)
        try writer["AllowVersionUpgrade"].write(value.allowVersionUpgrade)
        try writer["AquaConfigurationStatus"].write(value.aquaConfigurationStatus)
        try writer["AutomatedSnapshotRetentionPeriod"].write(value.automatedSnapshotRetentionPeriod)
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["AvailabilityZoneRelocation"].write(value.availabilityZoneRelocation)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["ClusterParameterGroupName"].write(value.clusterParameterGroupName)
        try writer["ClusterSecurityGroups"].writeList(value.clusterSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "ClusterSecurityGroupName", isFlattened: false)
        try writer["ClusterSubnetGroupName"].write(value.clusterSubnetGroupName)
        try writer["DefaultIamRoleArn"].write(value.defaultIamRoleArn)
        try writer["ElasticIp"].write(value.elasticIp)
        try writer["Encrypted"].write(value.encrypted)
        try writer["EnhancedVpcRouting"].write(value.enhancedVpcRouting)
        try writer["HsmClientCertificateIdentifier"].write(value.hsmClientCertificateIdentifier)
        try writer["HsmConfigurationIdentifier"].write(value.hsmConfigurationIdentifier)
        try writer["IamRoles"].writeList(value.iamRoles, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "IamRoleArn", isFlattened: false)
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["MaintenanceTrackName"].write(value.maintenanceTrackName)
        try writer["ManageMasterPassword"].write(value.manageMasterPassword)
        try writer["ManualSnapshotRetentionPeriod"].write(value.manualSnapshotRetentionPeriod)
        try writer["MasterPasswordSecretKmsKeyId"].write(value.masterPasswordSecretKmsKeyId)
        try writer["MultiAZ"].write(value.multiAZ)
        try writer["NodeType"].write(value.nodeType)
        try writer["NumberOfNodes"].write(value.numberOfNodes)
        try writer["OwnerAccount"].write(value.ownerAccount)
        try writer["Port"].write(value.port)
        try writer["PreferredMaintenanceWindow"].write(value.preferredMaintenanceWindow)
        try writer["PubliclyAccessible"].write(value.publiclyAccessible)
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["SnapshotArn"].write(value.snapshotArn)
        try writer["SnapshotClusterIdentifier"].write(value.snapshotClusterIdentifier)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["SnapshotScheduleIdentifier"].write(value.snapshotScheduleIdentifier)
        try writer["TargetReservedNodeOfferingId"].write(value.targetReservedNodeOfferingId)
        try writer["VpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcSecurityGroupId", isFlattened: false)
        try writer["Action"].write("RestoreFromClusterSnapshot")
        try writer["Version"].write("2012-12-01")
    }
}

extension RestoreTableFromClusterSnapshotInput {

    static func write(value: RestoreTableFromClusterSnapshotInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["EnableCaseSensitiveIdentifier"].write(value.enableCaseSensitiveIdentifier)
        try writer["NewTableName"].write(value.newTableName)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["SourceDatabaseName"].write(value.sourceDatabaseName)
        try writer["SourceSchemaName"].write(value.sourceSchemaName)
        try writer["SourceTableName"].write(value.sourceTableName)
        try writer["TargetDatabaseName"].write(value.targetDatabaseName)
        try writer["TargetSchemaName"].write(value.targetSchemaName)
        try writer["Action"].write("RestoreTableFromClusterSnapshot")
        try writer["Version"].write("2012-12-01")
    }
}

extension ResumeClusterInput {

    static func write(value: ResumeClusterInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("ResumeCluster")
        try writer["Version"].write("2012-12-01")
    }
}

extension RevokeClusterSecurityGroupIngressInput {

    static func write(value: RevokeClusterSecurityGroupIngressInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CIDRIP"].write(value.cidrip)
        try writer["ClusterSecurityGroupName"].write(value.clusterSecurityGroupName)
        try writer["EC2SecurityGroupName"].write(value.ec2SecurityGroupName)
        try writer["EC2SecurityGroupOwnerId"].write(value.ec2SecurityGroupOwnerId)
        try writer["Action"].write("RevokeClusterSecurityGroupIngress")
        try writer["Version"].write("2012-12-01")
    }
}

extension RevokeEndpointAccessInput {

    static func write(value: RevokeEndpointAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Account"].write(value.account)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Force"].write(value.force)
        try writer["VpcIds"].writeList(value.vpcIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "VpcIdentifier", isFlattened: false)
        try writer["Action"].write("RevokeEndpointAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension RevokeSnapshotAccessInput {

    static func write(value: RevokeSnapshotAccessInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountWithRestoreAccess"].write(value.accountWithRestoreAccess)
        try writer["SnapshotArn"].write(value.snapshotArn)
        try writer["SnapshotClusterIdentifier"].write(value.snapshotClusterIdentifier)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
        try writer["Action"].write("RevokeSnapshotAccess")
        try writer["Version"].write("2012-12-01")
    }
}

extension RotateEncryptionKeyInput {

    static func write(value: RotateEncryptionKeyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["Action"].write("RotateEncryptionKey")
        try writer["Version"].write("2012-12-01")
    }
}

extension UpdatePartnerStatusInput {

    static func write(value: UpdatePartnerStatusInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DatabaseName"].write(value.databaseName)
        try writer["PartnerName"].write(value.partnerName)
        try writer["Status"].write(value.status)
        try writer["StatusMessage"].write(value.statusMessage)
        try writer["Action"].write("UpdatePartnerStatus")
        try writer["Version"].write("2012-12-01")
    }
}

extension AcceptReservedNodeExchangeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptReservedNodeExchangeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AcceptReservedNodeExchangeResult"]
        var value = AcceptReservedNodeExchangeOutput()
        value.exchangedReservedNode = try reader["ExchangedReservedNode"].readIfPresent(with: RedshiftClientTypes.ReservedNode.read(from:))
        return value
    }
}

extension AddPartnerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddPartnerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AddPartnerResult"]
        var value = AddPartnerOutput()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.partnerName = try reader["PartnerName"].readIfPresent()
        return value
    }
}

extension AssociateDataShareConsumerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateDataShareConsumerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AssociateDataShareConsumerResult"]
        var value = AssociateDataShareConsumerOutput()
        value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
        value.dataShareArn = try reader["DataShareArn"].readIfPresent()
        value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.producerArn = try reader["ProducerArn"].readIfPresent()
        return value
    }
}

extension AuthorizeClusterSecurityGroupIngressOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AuthorizeClusterSecurityGroupIngressOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AuthorizeClusterSecurityGroupIngressResult"]
        var value = AuthorizeClusterSecurityGroupIngressOutput()
        value.clusterSecurityGroup = try reader["ClusterSecurityGroup"].readIfPresent(with: RedshiftClientTypes.ClusterSecurityGroup.read(from:))
        return value
    }
}

extension AuthorizeDataShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AuthorizeDataShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AuthorizeDataShareResult"]
        var value = AuthorizeDataShareOutput()
        value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
        value.dataShareArn = try reader["DataShareArn"].readIfPresent()
        value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.producerArn = try reader["ProducerArn"].readIfPresent()
        return value
    }
}

extension AuthorizeEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AuthorizeEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AuthorizeEndpointAccessResult"]
        var value = AuthorizeEndpointAccessOutput()
        value.allowedAllVPCs = try reader["AllowedAllVPCs"].readIfPresent()
        value.allowedVPCs = try reader["AllowedVPCs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "VpcIdentifier", isFlattened: false)
        value.authorizeTime = try reader["AuthorizeTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
        value.endpointCount = try reader["EndpointCount"].readIfPresent()
        value.grantee = try reader["Grantee"].readIfPresent()
        value.grantor = try reader["Grantor"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension AuthorizeSnapshotAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AuthorizeSnapshotAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AuthorizeSnapshotAccessResult"]
        var value = AuthorizeSnapshotAccessOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: RedshiftClientTypes.Snapshot.read(from:))
        return value
    }
}

extension BatchDeleteClusterSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteClusterSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["BatchDeleteClusterSnapshotsResult"]
        var value = BatchDeleteClusterSnapshotsOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotErrorMessage.read(from:), memberNodeInfo: "SnapshotErrorMessage", isFlattened: false)
        value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "String", isFlattened: false)
        return value
    }
}

extension BatchModifyClusterSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchModifyClusterSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["BatchModifyClusterSnapshotsResult"]
        var value = BatchModifyClusterSnapshotsOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotErrorMessage.read(from:), memberNodeInfo: "SnapshotErrorMessage", isFlattened: false)
        value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "String", isFlattened: false)
        return value
    }
}

extension CancelResizeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelResizeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CancelResizeResult"]
        var value = CancelResizeOutput()
        value.avgResizeRateInMegaBytesPerSecond = try reader["AvgResizeRateInMegaBytesPerSecond"].readIfPresent()
        value.dataTransferProgressPercent = try reader["DataTransferProgressPercent"].readIfPresent()
        value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
        value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
        value.importTablesCompleted = try reader["ImportTablesCompleted"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.importTablesInProgress = try reader["ImportTablesInProgress"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.importTablesNotStarted = try reader["ImportTablesNotStarted"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.message = try reader["Message"].readIfPresent()
        value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
        value.resizeType = try reader["ResizeType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.targetClusterType = try reader["TargetClusterType"].readIfPresent()
        value.targetEncryptionType = try reader["TargetEncryptionType"].readIfPresent()
        value.targetNodeType = try reader["TargetNodeType"].readIfPresent()
        value.targetNumberOfNodes = try reader["TargetNumberOfNodes"].readIfPresent()
        value.totalResizeDataInMegaBytes = try reader["TotalResizeDataInMegaBytes"].readIfPresent()
        return value
    }
}

extension CopyClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CopyClusterSnapshotResult"]
        var value = CopyClusterSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: RedshiftClientTypes.Snapshot.read(from:))
        return value
    }
}

extension CreateAuthenticationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAuthenticationProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateAuthenticationProfileResult"]
        var value = CreateAuthenticationProfileOutput()
        value.authenticationProfileContent = try reader["AuthenticationProfileContent"].readIfPresent()
        value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
        return value
    }
}

extension CreateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateClusterResult"]
        var value = CreateClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension CreateClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateClusterParameterGroupResult"]
        var value = CreateClusterParameterGroupOutput()
        value.clusterParameterGroup = try reader["ClusterParameterGroup"].readIfPresent(with: RedshiftClientTypes.ClusterParameterGroup.read(from:))
        return value
    }
}

extension CreateClusterSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterSecurityGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateClusterSecurityGroupResult"]
        var value = CreateClusterSecurityGroupOutput()
        value.clusterSecurityGroup = try reader["ClusterSecurityGroup"].readIfPresent(with: RedshiftClientTypes.ClusterSecurityGroup.read(from:))
        return value
    }
}

extension CreateClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateClusterSnapshotResult"]
        var value = CreateClusterSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: RedshiftClientTypes.Snapshot.read(from:))
        return value
    }
}

extension CreateClusterSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterSubnetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateClusterSubnetGroupResult"]
        var value = CreateClusterSubnetGroupOutput()
        value.clusterSubnetGroup = try reader["ClusterSubnetGroup"].readIfPresent(with: RedshiftClientTypes.ClusterSubnetGroup.read(from:))
        return value
    }
}

extension CreateCustomDomainAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCustomDomainAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateCustomDomainAssociationResult"]
        var value = CreateCustomDomainAssociationOutput()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.customDomainCertExpiryTime = try reader["CustomDomainCertExpiryTime"].readIfPresent()
        value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
        value.customDomainName = try reader["CustomDomainName"].readIfPresent()
        return value
    }
}

extension CreateEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateEndpointAccessResult"]
        var value = CreateEndpointAccessOutput()
        value.address = try reader["Address"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
        value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
        value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(with: RedshiftClientTypes.VpcEndpoint.read(from:))
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
        return value
    }
}

extension CreateEventSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEventSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateEventSubscriptionResult"]
        var value = CreateEventSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: RedshiftClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension CreateHsmClientCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHsmClientCertificateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateHsmClientCertificateResult"]
        var value = CreateHsmClientCertificateOutput()
        value.hsmClientCertificate = try reader["HsmClientCertificate"].readIfPresent(with: RedshiftClientTypes.HsmClientCertificate.read(from:))
        return value
    }
}

extension CreateHsmConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHsmConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateHsmConfigurationResult"]
        var value = CreateHsmConfigurationOutput()
        value.hsmConfiguration = try reader["HsmConfiguration"].readIfPresent(with: RedshiftClientTypes.HsmConfiguration.read(from:))
        return value
    }
}

extension CreateIntegrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIntegrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateIntegrationResult"]
        var value = CreateIntegrationOutput()
        value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["Description"].readIfPresent()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IntegrationError.read(from:), memberNodeInfo: "IntegrationError", isFlattened: false)
        value.integrationArn = try reader["IntegrationArn"].readIfPresent()
        value.integrationName = try reader["IntegrationName"].readIfPresent()
        value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.targetArn = try reader["TargetArn"].readIfPresent()
        return value
    }
}

extension CreateRedshiftIdcApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRedshiftIdcApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateRedshiftIdcApplicationResult"]
        var value = CreateRedshiftIdcApplicationOutput()
        value.redshiftIdcApplication = try reader["RedshiftIdcApplication"].readIfPresent(with: RedshiftClientTypes.RedshiftIdcApplication.read(from:))
        return value
    }
}

extension CreateScheduledActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateScheduledActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateScheduledActionResult"]
        var value = CreateScheduledActionOutput()
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.iamRole = try reader["IamRole"].readIfPresent()
        value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "ScheduledActionTime", isFlattened: false)
        value.schedule = try reader["Schedule"].readIfPresent()
        value.scheduledActionDescription = try reader["ScheduledActionDescription"].readIfPresent()
        value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.state = try reader["State"].readIfPresent()
        value.targetAction = try reader["TargetAction"].readIfPresent(with: RedshiftClientTypes.ScheduledActionType.read(from:))
        return value
    }
}

extension CreateSnapshotCopyGrantOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSnapshotCopyGrantOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateSnapshotCopyGrantResult"]
        var value = CreateSnapshotCopyGrantOutput()
        value.snapshotCopyGrant = try reader["SnapshotCopyGrant"].readIfPresent(with: RedshiftClientTypes.SnapshotCopyGrant.read(from:))
        return value
    }
}

extension CreateSnapshotScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSnapshotScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateSnapshotScheduleResult"]
        var value = CreateSnapshotScheduleOutput()
        value.associatedClusterCount = try reader["AssociatedClusterCount"].readIfPresent()
        value.associatedClusters = try reader["AssociatedClusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterAssociatedToSchedule.read(from:), memberNodeInfo: "ClusterAssociatedToSchedule", isFlattened: false)
        value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "SnapshotTime", isFlattened: false)
        value.scheduleDefinitions = try reader["ScheduleDefinitions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ScheduleDefinition", isFlattened: false)
        value.scheduleDescription = try reader["ScheduleDescription"].readIfPresent()
        value.scheduleIdentifier = try reader["ScheduleIdentifier"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension CreateTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTagsOutput {
        return CreateTagsOutput()
    }
}

extension CreateUsageLimitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUsageLimitOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateUsageLimitResult"]
        var value = CreateUsageLimitOutput()
        value.amount = try reader["Amount"].readIfPresent()
        value.breachAction = try reader["BreachAction"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.featureType = try reader["FeatureType"].readIfPresent()
        value.limitType = try reader["LimitType"].readIfPresent()
        value.period = try reader["Period"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.usageLimitId = try reader["UsageLimitId"].readIfPresent()
        return value
    }
}

extension DeauthorizeDataShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeauthorizeDataShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeauthorizeDataShareResult"]
        var value = DeauthorizeDataShareOutput()
        value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
        value.dataShareArn = try reader["DataShareArn"].readIfPresent()
        value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.producerArn = try reader["ProducerArn"].readIfPresent()
        return value
    }
}

extension DeleteAuthenticationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAuthenticationProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteAuthenticationProfileResult"]
        var value = DeleteAuthenticationProfileOutput()
        value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
        return value
    }
}

extension DeleteClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteClusterResult"]
        var value = DeleteClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension DeleteClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterParameterGroupOutput {
        return DeleteClusterParameterGroupOutput()
    }
}

extension DeleteClusterSecurityGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterSecurityGroupOutput {
        return DeleteClusterSecurityGroupOutput()
    }
}

extension DeleteClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteClusterSnapshotResult"]
        var value = DeleteClusterSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: RedshiftClientTypes.Snapshot.read(from:))
        return value
    }
}

extension DeleteClusterSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterSubnetGroupOutput {
        return DeleteClusterSubnetGroupOutput()
    }
}

extension DeleteCustomDomainAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomDomainAssociationOutput {
        return DeleteCustomDomainAssociationOutput()
    }
}

extension DeleteEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteEndpointAccessResult"]
        var value = DeleteEndpointAccessOutput()
        value.address = try reader["Address"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
        value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
        value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(with: RedshiftClientTypes.VpcEndpoint.read(from:))
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
        return value
    }
}

extension DeleteEventSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEventSubscriptionOutput {
        return DeleteEventSubscriptionOutput()
    }
}

extension DeleteHsmClientCertificateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHsmClientCertificateOutput {
        return DeleteHsmClientCertificateOutput()
    }
}

extension DeleteHsmConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHsmConfigurationOutput {
        return DeleteHsmConfigurationOutput()
    }
}

extension DeleteIntegrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIntegrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteIntegrationResult"]
        var value = DeleteIntegrationOutput()
        value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["Description"].readIfPresent()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IntegrationError.read(from:), memberNodeInfo: "IntegrationError", isFlattened: false)
        value.integrationArn = try reader["IntegrationArn"].readIfPresent()
        value.integrationName = try reader["IntegrationName"].readIfPresent()
        value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.targetArn = try reader["TargetArn"].readIfPresent()
        return value
    }
}

extension DeletePartnerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePartnerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeletePartnerResult"]
        var value = DeletePartnerOutput()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.partnerName = try reader["PartnerName"].readIfPresent()
        return value
    }
}

extension DeleteRedshiftIdcApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRedshiftIdcApplicationOutput {
        return DeleteRedshiftIdcApplicationOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteScheduledActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScheduledActionOutput {
        return DeleteScheduledActionOutput()
    }
}

extension DeleteSnapshotCopyGrantOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSnapshotCopyGrantOutput {
        return DeleteSnapshotCopyGrantOutput()
    }
}

extension DeleteSnapshotScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSnapshotScheduleOutput {
        return DeleteSnapshotScheduleOutput()
    }
}

extension DeleteTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTagsOutput {
        return DeleteTagsOutput()
    }
}

extension DeleteUsageLimitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUsageLimitOutput {
        return DeleteUsageLimitOutput()
    }
}

extension DescribeAccountAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAccountAttributesResult"]
        var value = DescribeAccountAttributesOutput()
        value.accountAttributes = try reader["AccountAttributes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AccountAttribute.read(from:), memberNodeInfo: "AccountAttribute", isFlattened: false)
        return value
    }
}

extension DescribeAuthenticationProfilesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAuthenticationProfilesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAuthenticationProfilesResult"]
        var value = DescribeAuthenticationProfilesOutput()
        value.authenticationProfiles = try reader["AuthenticationProfiles"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AuthenticationProfile.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeClusterDbRevisionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterDbRevisionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterDbRevisionsResult"]
        var value = DescribeClusterDbRevisionsOutput()
        value.clusterDbRevisions = try reader["ClusterDbRevisions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterDbRevision.read(from:), memberNodeInfo: "ClusterDbRevision", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeClusterParameterGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterParameterGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterParameterGroupsResult"]
        var value = DescribeClusterParameterGroupsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameterGroups = try reader["ParameterGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterParameterGroup.read(from:), memberNodeInfo: "ClusterParameterGroup", isFlattened: false)
        return value
    }
}

extension DescribeClusterParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterParametersResult"]
        var value = DescribeClusterParametersOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        return value
    }
}

extension DescribeClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClustersResult"]
        var value = DescribeClustersOutput()
        value.clusters = try reader["Clusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Cluster.read(from:), memberNodeInfo: "Cluster", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeClusterSecurityGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterSecurityGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterSecurityGroupsResult"]
        var value = DescribeClusterSecurityGroupsOutput()
        value.clusterSecurityGroups = try reader["ClusterSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterSecurityGroup.read(from:), memberNodeInfo: "ClusterSecurityGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeClusterSnapshotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterSnapshotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterSnapshotsResult"]
        var value = DescribeClusterSnapshotsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.snapshots = try reader["Snapshots"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Snapshot.read(from:), memberNodeInfo: "Snapshot", isFlattened: false)
        return value
    }
}

extension DescribeClusterSubnetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterSubnetGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterSubnetGroupsResult"]
        var value = DescribeClusterSubnetGroupsOutput()
        value.clusterSubnetGroups = try reader["ClusterSubnetGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterSubnetGroup.read(from:), memberNodeInfo: "ClusterSubnetGroup", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeClusterTracksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterTracksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterTracksResult"]
        var value = DescribeClusterTracksOutput()
        value.maintenanceTracks = try reader["MaintenanceTracks"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.MaintenanceTrack.read(from:), memberNodeInfo: "MaintenanceTrack", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeClusterVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeClusterVersionsResult"]
        var value = DescribeClusterVersionsOutput()
        value.clusterVersions = try reader["ClusterVersions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterVersion.read(from:), memberNodeInfo: "ClusterVersion", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeCustomDomainAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCustomDomainAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeCustomDomainAssociationsResult"]
        var value = DescribeCustomDomainAssociationsOutput()
        value.associations = try reader["Associations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Association.read(from:), memberNodeInfo: "Association", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDataSharesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataSharesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDataSharesResult"]
        var value = DescribeDataSharesOutput()
        value.dataShares = try reader["DataShares"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShare.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDataSharesForConsumerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataSharesForConsumerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDataSharesForConsumerResult"]
        var value = DescribeDataSharesForConsumerOutput()
        value.dataShares = try reader["DataShares"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShare.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDataSharesForProducerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataSharesForProducerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDataSharesForProducerResult"]
        var value = DescribeDataSharesForProducerOutput()
        value.dataShares = try reader["DataShares"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShare.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeDefaultClusterParametersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDefaultClusterParametersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeDefaultClusterParametersResult"]
        var value = DescribeDefaultClusterParametersOutput()
        value.defaultClusterParameters = try reader["DefaultClusterParameters"].readIfPresent(with: RedshiftClientTypes.DefaultClusterParameters.read(from:))
        return value
    }
}

extension DescribeEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEndpointAccessResult"]
        var value = DescribeEndpointAccessOutput()
        value.endpointAccessList = try reader["EndpointAccessList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EndpointAccess.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeEndpointAuthorizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointAuthorizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEndpointAuthorizationResult"]
        var value = DescribeEndpointAuthorizationOutput()
        value.endpointAuthorizationList = try reader["EndpointAuthorizationList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EndpointAuthorization.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeEventCategoriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventCategoriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventCategoriesResult"]
        var value = DescribeEventCategoriesOutput()
        value.eventCategoriesMapList = try reader["EventCategoriesMapList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EventCategoriesMap.read(from:), memberNodeInfo: "EventCategoriesMap", isFlattened: false)
        return value
    }
}

extension DescribeEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventsResult"]
        var value = DescribeEventsOutput()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Event.read(from:), memberNodeInfo: "Event", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeEventSubscriptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventSubscriptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeEventSubscriptionsResult"]
        var value = DescribeEventSubscriptionsOutput()
        value.eventSubscriptionsList = try reader["EventSubscriptionsList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EventSubscription.read(from:), memberNodeInfo: "EventSubscription", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeHsmClientCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHsmClientCertificatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeHsmClientCertificatesResult"]
        var value = DescribeHsmClientCertificatesOutput()
        value.hsmClientCertificates = try reader["HsmClientCertificates"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.HsmClientCertificate.read(from:), memberNodeInfo: "HsmClientCertificate", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeHsmConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHsmConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeHsmConfigurationsResult"]
        var value = DescribeHsmConfigurationsOutput()
        value.hsmConfigurations = try reader["HsmConfigurations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.HsmConfiguration.read(from:), memberNodeInfo: "HsmConfiguration", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeInboundIntegrationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInboundIntegrationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeInboundIntegrationsResult"]
        var value = DescribeInboundIntegrationsOutput()
        value.inboundIntegrations = try reader["InboundIntegrations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.InboundIntegration.read(from:), memberNodeInfo: "InboundIntegration", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeIntegrationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeIntegrationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeIntegrationsResult"]
        var value = DescribeIntegrationsOutput()
        value.integrations = try reader["Integrations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Integration.read(from:), memberNodeInfo: "Integration", isFlattened: false)
        value.marker = try reader["Marker"].readIfPresent()
        return value
    }
}

extension DescribeLoggingStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoggingStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLoggingStatusResult"]
        var value = DescribeLoggingStatusOutput()
        value.bucketName = try reader["BucketName"].readIfPresent()
        value.lastFailureMessage = try reader["LastFailureMessage"].readIfPresent()
        value.lastFailureTime = try reader["LastFailureTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulDeliveryTime = try reader["LastSuccessfulDeliveryTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.logDestinationType = try reader["LogDestinationType"].readIfPresent()
        value.logExports = try reader["LogExports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent()
        value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
        return value
    }
}

extension DescribeNodeConfigurationOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNodeConfigurationOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeNodeConfigurationOptionsResult"]
        var value = DescribeNodeConfigurationOptionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.nodeConfigurationOptionList = try reader["NodeConfigurationOptionList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.NodeConfigurationOption.read(from:), memberNodeInfo: "NodeConfigurationOption", isFlattened: false)
        return value
    }
}

extension DescribeOrderableClusterOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOrderableClusterOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeOrderableClusterOptionsResult"]
        var value = DescribeOrderableClusterOptionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.orderableClusterOptions = try reader["OrderableClusterOptions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.OrderableClusterOption.read(from:), memberNodeInfo: "OrderableClusterOption", isFlattened: false)
        return value
    }
}

extension DescribePartnersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePartnersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribePartnersResult"]
        var value = DescribePartnersOutput()
        value.partnerIntegrationInfoList = try reader["PartnerIntegrationInfoList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.PartnerIntegrationInfo.read(from:), memberNodeInfo: "PartnerIntegrationInfo", isFlattened: false)
        return value
    }
}

extension DescribeRedshiftIdcApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRedshiftIdcApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeRedshiftIdcApplicationsResult"]
        var value = DescribeRedshiftIdcApplicationsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.redshiftIdcApplications = try reader["RedshiftIdcApplications"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RedshiftIdcApplication.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeReservedNodeExchangeStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedNodeExchangeStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeReservedNodeExchangeStatusResult"]
        var value = DescribeReservedNodeExchangeStatusOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedNodeExchangeStatusDetails = try reader["ReservedNodeExchangeStatusDetails"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeExchangeStatus.read(from:), memberNodeInfo: "ReservedNodeExchangeStatus", isFlattened: false)
        return value
    }
}

extension DescribeReservedNodeOfferingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedNodeOfferingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeReservedNodeOfferingsResult"]
        var value = DescribeReservedNodeOfferingsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedNodeOfferings = try reader["ReservedNodeOfferings"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeOffering.read(from:), memberNodeInfo: "ReservedNodeOffering", isFlattened: false)
        return value
    }
}

extension DescribeReservedNodesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeReservedNodesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeReservedNodesResult"]
        var value = DescribeReservedNodesOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedNodes = try reader["ReservedNodes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNode.read(from:), memberNodeInfo: "ReservedNode", isFlattened: false)
        return value
    }
}

extension DescribeResizeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResizeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeResizeResult"]
        var value = DescribeResizeOutput()
        value.avgResizeRateInMegaBytesPerSecond = try reader["AvgResizeRateInMegaBytesPerSecond"].readIfPresent()
        value.dataTransferProgressPercent = try reader["DataTransferProgressPercent"].readIfPresent()
        value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
        value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
        value.importTablesCompleted = try reader["ImportTablesCompleted"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.importTablesInProgress = try reader["ImportTablesInProgress"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.importTablesNotStarted = try reader["ImportTablesNotStarted"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.message = try reader["Message"].readIfPresent()
        value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
        value.resizeType = try reader["ResizeType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.targetClusterType = try reader["TargetClusterType"].readIfPresent()
        value.targetEncryptionType = try reader["TargetEncryptionType"].readIfPresent()
        value.targetNodeType = try reader["TargetNodeType"].readIfPresent()
        value.targetNumberOfNodes = try reader["TargetNumberOfNodes"].readIfPresent()
        value.totalResizeDataInMegaBytes = try reader["TotalResizeDataInMegaBytes"].readIfPresent()
        return value
    }
}

extension DescribeScheduledActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScheduledActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeScheduledActionsResult"]
        var value = DescribeScheduledActionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.scheduledActions = try reader["ScheduledActions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ScheduledAction.read(from:), memberNodeInfo: "ScheduledAction", isFlattened: false)
        return value
    }
}

extension DescribeSnapshotCopyGrantsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSnapshotCopyGrantsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeSnapshotCopyGrantsResult"]
        var value = DescribeSnapshotCopyGrantsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.snapshotCopyGrants = try reader["SnapshotCopyGrants"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotCopyGrant.read(from:), memberNodeInfo: "SnapshotCopyGrant", isFlattened: false)
        return value
    }
}

extension DescribeSnapshotSchedulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSnapshotSchedulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeSnapshotSchedulesResult"]
        var value = DescribeSnapshotSchedulesOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.snapshotSchedules = try reader["SnapshotSchedules"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SnapshotSchedule.read(from:), memberNodeInfo: "SnapshotSchedule", isFlattened: false)
        return value
    }
}

extension DescribeStorageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStorageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeStorageResult"]
        var value = DescribeStorageOutput()
        value.totalBackupSizeInMegaBytes = try reader["TotalBackupSizeInMegaBytes"].readIfPresent()
        value.totalProvisionedStorageInMegaBytes = try reader["TotalProvisionedStorageInMegaBytes"].readIfPresent()
        return value
    }
}

extension DescribeTableRestoreStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTableRestoreStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTableRestoreStatusResult"]
        var value = DescribeTableRestoreStatusOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.tableRestoreStatusDetails = try reader["TableRestoreStatusDetails"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.TableRestoreStatus.read(from:), memberNodeInfo: "TableRestoreStatus", isFlattened: false)
        return value
    }
}

extension DescribeTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTagsResult"]
        var value = DescribeTagsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.taggedResources = try reader["TaggedResources"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.TaggedResource.read(from:), memberNodeInfo: "TaggedResource", isFlattened: false)
        return value
    }
}

extension DescribeUsageLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUsageLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeUsageLimitsResult"]
        var value = DescribeUsageLimitsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.usageLimits = try reader["UsageLimits"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.UsageLimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisableLoggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableLoggingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DisableLoggingResult"]
        var value = DisableLoggingOutput()
        value.bucketName = try reader["BucketName"].readIfPresent()
        value.lastFailureMessage = try reader["LastFailureMessage"].readIfPresent()
        value.lastFailureTime = try reader["LastFailureTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulDeliveryTime = try reader["LastSuccessfulDeliveryTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.logDestinationType = try reader["LogDestinationType"].readIfPresent()
        value.logExports = try reader["LogExports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent()
        value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
        return value
    }
}

extension DisableSnapshotCopyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableSnapshotCopyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DisableSnapshotCopyResult"]
        var value = DisableSnapshotCopyOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension DisassociateDataShareConsumerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateDataShareConsumerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DisassociateDataShareConsumerResult"]
        var value = DisassociateDataShareConsumerOutput()
        value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
        value.dataShareArn = try reader["DataShareArn"].readIfPresent()
        value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.producerArn = try reader["ProducerArn"].readIfPresent()
        return value
    }
}

extension EnableLoggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableLoggingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["EnableLoggingResult"]
        var value = EnableLoggingOutput()
        value.bucketName = try reader["BucketName"].readIfPresent()
        value.lastFailureMessage = try reader["LastFailureMessage"].readIfPresent()
        value.lastFailureTime = try reader["LastFailureTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastSuccessfulDeliveryTime = try reader["LastSuccessfulDeliveryTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.logDestinationType = try reader["LogDestinationType"].readIfPresent()
        value.logExports = try reader["LogExports"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent()
        value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
        return value
    }
}

extension EnableSnapshotCopyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableSnapshotCopyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["EnableSnapshotCopyResult"]
        var value = EnableSnapshotCopyOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension FailoverPrimaryComputeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> FailoverPrimaryComputeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["FailoverPrimaryComputeResult"]
        var value = FailoverPrimaryComputeOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension GetClusterCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClusterCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetClusterCredentialsResult"]
        var value = GetClusterCredentialsOutput()
        value.dbPassword = try reader["DbPassword"].readIfPresent()
        value.dbUser = try reader["DbUser"].readIfPresent()
        value.expiration = try reader["Expiration"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetClusterCredentialsWithIAMOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClusterCredentialsWithIAMOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetClusterCredentialsWithIAMResult"]
        var value = GetClusterCredentialsWithIAMOutput()
        value.dbPassword = try reader["DbPassword"].readIfPresent()
        value.dbUser = try reader["DbUser"].readIfPresent()
        value.expiration = try reader["Expiration"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nextRefreshTime = try reader["NextRefreshTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension GetReservedNodeExchangeConfigurationOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReservedNodeExchangeConfigurationOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetReservedNodeExchangeConfigurationOptionsResult"]
        var value = GetReservedNodeExchangeConfigurationOptionsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedNodeConfigurationOptionList = try reader["ReservedNodeConfigurationOptionList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeConfigurationOption.read(from:), memberNodeInfo: "ReservedNodeConfigurationOption", isFlattened: false)
        return value
    }
}

extension GetReservedNodeExchangeOfferingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReservedNodeExchangeOfferingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetReservedNodeExchangeOfferingsResult"]
        var value = GetReservedNodeExchangeOfferingsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.reservedNodeOfferings = try reader["ReservedNodeOfferings"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReservedNodeOffering.read(from:), memberNodeInfo: "ReservedNodeOffering", isFlattened: false)
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetResourcePolicyResult"]
        var value = GetResourcePolicyOutput()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent(with: RedshiftClientTypes.ResourcePolicy.read(from:))
        return value
    }
}

extension ListRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListRecommendationsResult"]
        var value = ListRecommendationsOutput()
        value.marker = try reader["Marker"].readIfPresent()
        value.recommendations = try reader["Recommendations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Recommendation.read(from:), memberNodeInfo: "Recommendation", isFlattened: false)
        return value
    }
}

extension ModifyAquaConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyAquaConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyAquaConfigurationResult"]
        var value = ModifyAquaConfigurationOutput()
        value.aquaConfiguration = try reader["AquaConfiguration"].readIfPresent(with: RedshiftClientTypes.AquaConfiguration.read(from:))
        return value
    }
}

extension ModifyAuthenticationProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyAuthenticationProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyAuthenticationProfileResult"]
        var value = ModifyAuthenticationProfileOutput()
        value.authenticationProfileContent = try reader["AuthenticationProfileContent"].readIfPresent()
        value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
        return value
    }
}

extension ModifyClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterResult"]
        var value = ModifyClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension ModifyClusterDbRevisionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterDbRevisionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterDbRevisionResult"]
        var value = ModifyClusterDbRevisionOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension ModifyClusterIamRolesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterIamRolesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterIamRolesResult"]
        var value = ModifyClusterIamRolesOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension ModifyClusterMaintenanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterMaintenanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterMaintenanceResult"]
        var value = ModifyClusterMaintenanceOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension ModifyClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterParameterGroupResult"]
        var value = ModifyClusterParameterGroupOutput()
        value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
        value.parameterGroupStatus = try reader["ParameterGroupStatus"].readIfPresent()
        return value
    }
}

extension ModifyClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterSnapshotResult"]
        var value = ModifyClusterSnapshotOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: RedshiftClientTypes.Snapshot.read(from:))
        return value
    }
}

extension ModifyClusterSnapshotScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterSnapshotScheduleOutput {
        return ModifyClusterSnapshotScheduleOutput()
    }
}

extension ModifyClusterSubnetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyClusterSubnetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyClusterSubnetGroupResult"]
        var value = ModifyClusterSubnetGroupOutput()
        value.clusterSubnetGroup = try reader["ClusterSubnetGroup"].readIfPresent(with: RedshiftClientTypes.ClusterSubnetGroup.read(from:))
        return value
    }
}

extension ModifyCustomDomainAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyCustomDomainAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyCustomDomainAssociationResult"]
        var value = ModifyCustomDomainAssociationOutput()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.customDomainCertExpiryTime = try reader["CustomDomainCertExpiryTime"].readIfPresent()
        value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
        value.customDomainName = try reader["CustomDomainName"].readIfPresent()
        return value
    }
}

extension ModifyEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyEndpointAccessResult"]
        var value = ModifyEndpointAccessOutput()
        value.address = try reader["Address"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
        value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
        value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(with: RedshiftClientTypes.VpcEndpoint.read(from:))
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
        return value
    }
}

extension ModifyEventSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyEventSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyEventSubscriptionResult"]
        var value = ModifyEventSubscriptionOutput()
        value.eventSubscription = try reader["EventSubscription"].readIfPresent(with: RedshiftClientTypes.EventSubscription.read(from:))
        return value
    }
}

extension ModifyIntegrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyIntegrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyIntegrationResult"]
        var value = ModifyIntegrationOutput()
        value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["Description"].readIfPresent()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IntegrationError.read(from:), memberNodeInfo: "IntegrationError", isFlattened: false)
        value.integrationArn = try reader["IntegrationArn"].readIfPresent()
        value.integrationName = try reader["IntegrationName"].readIfPresent()
        value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.targetArn = try reader["TargetArn"].readIfPresent()
        return value
    }
}

extension ModifyRedshiftIdcApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyRedshiftIdcApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyRedshiftIdcApplicationResult"]
        var value = ModifyRedshiftIdcApplicationOutput()
        value.redshiftIdcApplication = try reader["RedshiftIdcApplication"].readIfPresent(with: RedshiftClientTypes.RedshiftIdcApplication.read(from:))
        return value
    }
}

extension ModifyScheduledActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyScheduledActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyScheduledActionResult"]
        var value = ModifyScheduledActionOutput()
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.iamRole = try reader["IamRole"].readIfPresent()
        value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "ScheduledActionTime", isFlattened: false)
        value.schedule = try reader["Schedule"].readIfPresent()
        value.scheduledActionDescription = try reader["ScheduledActionDescription"].readIfPresent()
        value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.state = try reader["State"].readIfPresent()
        value.targetAction = try reader["TargetAction"].readIfPresent(with: RedshiftClientTypes.ScheduledActionType.read(from:))
        return value
    }
}

extension ModifySnapshotCopyRetentionPeriodOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifySnapshotCopyRetentionPeriodOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifySnapshotCopyRetentionPeriodResult"]
        var value = ModifySnapshotCopyRetentionPeriodOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension ModifySnapshotScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifySnapshotScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifySnapshotScheduleResult"]
        var value = ModifySnapshotScheduleOutput()
        value.associatedClusterCount = try reader["AssociatedClusterCount"].readIfPresent()
        value.associatedClusters = try reader["AssociatedClusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterAssociatedToSchedule.read(from:), memberNodeInfo: "ClusterAssociatedToSchedule", isFlattened: false)
        value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "SnapshotTime", isFlattened: false)
        value.scheduleDefinitions = try reader["ScheduleDefinitions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ScheduleDefinition", isFlattened: false)
        value.scheduleDescription = try reader["ScheduleDescription"].readIfPresent()
        value.scheduleIdentifier = try reader["ScheduleIdentifier"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension ModifyUsageLimitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyUsageLimitOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyUsageLimitResult"]
        var value = ModifyUsageLimitOutput()
        value.amount = try reader["Amount"].readIfPresent()
        value.breachAction = try reader["BreachAction"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.featureType = try reader["FeatureType"].readIfPresent()
        value.limitType = try reader["LimitType"].readIfPresent()
        value.period = try reader["Period"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.usageLimitId = try reader["UsageLimitId"].readIfPresent()
        return value
    }
}

extension PauseClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PauseClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PauseClusterResult"]
        var value = PauseClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension PurchaseReservedNodeOfferingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PurchaseReservedNodeOfferingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PurchaseReservedNodeOfferingResult"]
        var value = PurchaseReservedNodeOfferingOutput()
        value.reservedNode = try reader["ReservedNode"].readIfPresent(with: RedshiftClientTypes.ReservedNode.read(from:))
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PutResourcePolicyResult"]
        var value = PutResourcePolicyOutput()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent(with: RedshiftClientTypes.ResourcePolicy.read(from:))
        return value
    }
}

extension RebootClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RebootClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RebootClusterResult"]
        var value = RebootClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension RejectDataShareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectDataShareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RejectDataShareResult"]
        var value = RejectDataShareOutput()
        value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
        value.dataShareArn = try reader["DataShareArn"].readIfPresent()
        value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        value.producerArn = try reader["ProducerArn"].readIfPresent()
        return value
    }
}

extension ResetClusterParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResetClusterParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ResetClusterParameterGroupResult"]
        var value = ResetClusterParameterGroupOutput()
        value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
        value.parameterGroupStatus = try reader["ParameterGroupStatus"].readIfPresent()
        return value
    }
}

extension ResizeClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResizeClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ResizeClusterResult"]
        var value = ResizeClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension RestoreFromClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreFromClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RestoreFromClusterSnapshotResult"]
        var value = RestoreFromClusterSnapshotOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension RestoreTableFromClusterSnapshotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreTableFromClusterSnapshotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RestoreTableFromClusterSnapshotResult"]
        var value = RestoreTableFromClusterSnapshotOutput()
        value.tableRestoreStatus = try reader["TableRestoreStatus"].readIfPresent(with: RedshiftClientTypes.TableRestoreStatus.read(from:))
        return value
    }
}

extension ResumeClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResumeClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ResumeClusterResult"]
        var value = ResumeClusterOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension RevokeClusterSecurityGroupIngressOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeClusterSecurityGroupIngressOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RevokeClusterSecurityGroupIngressResult"]
        var value = RevokeClusterSecurityGroupIngressOutput()
        value.clusterSecurityGroup = try reader["ClusterSecurityGroup"].readIfPresent(with: RedshiftClientTypes.ClusterSecurityGroup.read(from:))
        return value
    }
}

extension RevokeEndpointAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeEndpointAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RevokeEndpointAccessResult"]
        var value = RevokeEndpointAccessOutput()
        value.allowedAllVPCs = try reader["AllowedAllVPCs"].readIfPresent()
        value.allowedVPCs = try reader["AllowedVPCs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "VpcIdentifier", isFlattened: false)
        value.authorizeTime = try reader["AuthorizeTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
        value.endpointCount = try reader["EndpointCount"].readIfPresent()
        value.grantee = try reader["Grantee"].readIfPresent()
        value.grantor = try reader["Grantor"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension RevokeSnapshotAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RevokeSnapshotAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RevokeSnapshotAccessResult"]
        var value = RevokeSnapshotAccessOutput()
        value.snapshot = try reader["Snapshot"].readIfPresent(with: RedshiftClientTypes.Snapshot.read(from:))
        return value
    }
}

extension RotateEncryptionKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RotateEncryptionKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RotateEncryptionKeyResult"]
        var value = RotateEncryptionKeyOutput()
        value.cluster = try reader["Cluster"].readIfPresent(with: RedshiftClientTypes.Cluster.read(from:))
        return value
    }
}

extension UpdatePartnerStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePartnerStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["UpdatePartnerStatusResult"]
        var value = UpdatePartnerStatusOutput()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.partnerName = try reader["PartnerName"].readIfPresent()
        return value
    }
}

enum AcceptReservedNodeExchangeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "InvalidReservedNodeState": return try InvalidReservedNodeStateFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyExists": return try ReservedNodeAlreadyExistsFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyMigrated": return try ReservedNodeAlreadyMigratedFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddPartnerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "PartnerNotFound": return try PartnerNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedPartnerIntegration": return try UnauthorizedPartnerIntegrationFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateDataShareConsumerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidDataShareFault": return try InvalidDataShareFault.makeError(baseError: baseError)
            case "InvalidNamespaceFault": return try InvalidNamespaceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AuthorizeClusterSecurityGroupIngressOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationAlreadyExists": return try AuthorizationAlreadyExistsFault.makeError(baseError: baseError)
            case "AuthorizationQuotaExceeded": return try AuthorizationQuotaExceededFault.makeError(baseError: baseError)
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AuthorizeDataShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidDataShareFault": return try InvalidDataShareFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AuthorizeEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "EndpointAuthorizationAlreadyExists": return try EndpointAuthorizationAlreadyExistsFault.makeError(baseError: baseError)
            case "EndpointAuthorizationsPerClusterLimitExceeded": return try EndpointAuthorizationsPerClusterLimitExceededFault.makeError(baseError: baseError)
            case "InvalidAuthorizationState": return try InvalidAuthorizationStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AuthorizeSnapshotAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationAlreadyExists": return try AuthorizationAlreadyExistsFault.makeError(baseError: baseError)
            case "AuthorizationQuotaExceeded": return try AuthorizationQuotaExceededFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeleteClusterSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchDeleteRequestSizeExceeded": return try BatchDeleteRequestSizeExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchModifyClusterSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchModifyClusterSnapshotsLimitExceededFault": return try BatchModifyClusterSnapshotsLimitExceededFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelResizeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "ResizeNotFound": return try ResizeNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotAlreadyExists": return try ClusterSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotQuotaExceeded": return try ClusterSnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAuthenticationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthenticationProfileAlreadyExistsFault": return try AuthenticationProfileAlreadyExistsFault.makeError(baseError: baseError)
            case "AuthenticationProfileQuotaExceededFault": return try AuthenticationProfileQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidAuthenticationProfileRequestFault": return try InvalidAuthenticationProfileRequestFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterAlreadyExists": return try ClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterQuotaExceeded": return try ClusterQuotaExceededFault.makeError(baseError: baseError)
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterSubnetGroupNotFoundFault": return try ClusterSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "HsmClientCertificateNotFoundFault": return try HsmClientCertificateNotFoundFault.makeError(baseError: baseError)
            case "HsmConfigurationNotFoundFault": return try HsmConfigurationNotFoundFault.makeError(baseError: baseError)
            case "InsufficientClusterCapacity": return try InsufficientClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidClusterSubnetGroupStateFault": return try InvalidClusterSubnetGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterTrack": return try InvalidClusterTrackFault.makeError(baseError: baseError)
            case "InvalidElasticIpFault": return try InvalidElasticIpFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "Ipv6CidrBlockNotFoundFault": return try Ipv6CidrBlockNotFoundFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesPerClusterLimitExceeded": return try NumberOfNodesPerClusterLimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesQuotaExceeded": return try NumberOfNodesQuotaExceededFault.makeError(baseError: baseError)
            case "RedshiftIdcApplicationNotExists": return try RedshiftIdcApplicationNotExistsFault.makeError(baseError: baseError)
            case "SnapshotScheduleNotFound": return try SnapshotScheduleNotFoundFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterParameterGroupAlreadyExists": return try ClusterParameterGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterParameterGroupQuotaExceeded": return try ClusterParameterGroupQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSecurityGroupAlreadyExists": return try ClusterSecurityGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "QuotaExceeded.ClusterSecurityGroup": return try ClusterSecurityGroupQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotAlreadyExists": return try ClusterSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterSnapshotQuotaExceeded": return try ClusterSnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSubnetGroupAlreadyExists": return try ClusterSubnetGroupAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterSubnetGroupQuotaExceeded": return try ClusterSubnetGroupQuotaExceededFault.makeError(baseError: baseError)
            case "ClusterSubnetQuotaExceededFault": return try ClusterSubnetQuotaExceededFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCustomDomainAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "CustomCnameAssociationFault": return try CustomCnameAssociationFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessToClusterDenied": return try AccessToClusterDeniedFault.makeError(baseError: baseError)
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSubnetGroupNotFoundFault": return try ClusterSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "EndpointAlreadyExists": return try EndpointAlreadyExistsFault.makeError(baseError: baseError)
            case "EndpointsPerAuthorizationLimitExceeded": return try EndpointsPerAuthorizationLimitExceededFault.makeError(baseError: baseError)
            case "EndpointsPerClusterLimitExceeded": return try EndpointsPerClusterLimitExceededFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEventSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "EventSubscriptionQuotaExceeded": return try EventSubscriptionQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "SNSInvalidTopic": return try SNSInvalidTopicFault.makeError(baseError: baseError)
            case "SNSNoAuthorization": return try SNSNoAuthorizationFault.makeError(baseError: baseError)
            case "SNSTopicArnNotFound": return try SNSTopicArnNotFoundFault.makeError(baseError: baseError)
            case "SourceNotFound": return try SourceNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionAlreadyExist": return try SubscriptionAlreadyExistFault.makeError(baseError: baseError)
            case "SubscriptionCategoryNotFound": return try SubscriptionCategoryNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionEventIdNotFound": return try SubscriptionEventIdNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionSeverityNotFound": return try SubscriptionSeverityNotFoundFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHsmClientCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HsmClientCertificateAlreadyExistsFault": return try HsmClientCertificateAlreadyExistsFault.makeError(baseError: baseError)
            case "HsmClientCertificateQuotaExceededFault": return try HsmClientCertificateQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHsmConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HsmConfigurationAlreadyExistsFault": return try HsmConfigurationAlreadyExistsFault.makeError(baseError: baseError)
            case "HsmConfigurationQuotaExceededFault": return try HsmConfigurationQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIntegrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IntegrationAlreadyExistsFault": return try IntegrationAlreadyExistsFault.makeError(baseError: baseError)
            case "IntegrationConflictOperationFault": return try IntegrationConflictOperationFault.makeError(baseError: baseError)
            case "IntegrationQuotaExceededFault": return try IntegrationQuotaExceededFault.makeError(baseError: baseError)
            case "IntegrationSourceNotFoundFault": return try IntegrationSourceNotFoundFault.makeError(baseError: baseError)
            case "IntegrationTargetNotFoundFault": return try IntegrationTargetNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRedshiftIdcApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceAccessDenied": return try DependentServiceAccessDeniedFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "RedshiftIdcApplicationAlreadyExists": return try RedshiftIdcApplicationAlreadyExistsFault.makeError(baseError: baseError)
            case "RedshiftIdcApplicationQuotaExceeded": return try RedshiftIdcApplicationQuotaExceededFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateScheduledActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidScheduledAction": return try InvalidScheduledActionFault.makeError(baseError: baseError)
            case "InvalidSchedule": return try InvalidScheduleFault.makeError(baseError: baseError)
            case "ScheduledActionAlreadyExists": return try ScheduledActionAlreadyExistsFault.makeError(baseError: baseError)
            case "ScheduledActionQuotaExceeded": return try ScheduledActionQuotaExceededFault.makeError(baseError: baseError)
            case "ScheduledActionTypeUnsupported": return try ScheduledActionTypeUnsupportedFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSnapshotCopyGrantOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "SnapshotCopyGrantAlreadyExistsFault": return try SnapshotCopyGrantAlreadyExistsFault.makeError(baseError: baseError)
            case "SnapshotCopyGrantQuotaExceededFault": return try SnapshotCopyGrantQuotaExceededFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSnapshotScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidSchedule": return try InvalidScheduleFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "ScheduleDefinitionTypeUnsupported": return try ScheduleDefinitionTypeUnsupportedFault.makeError(baseError: baseError)
            case "SnapshotScheduleAlreadyExists": return try SnapshotScheduleAlreadyExistsFault.makeError(baseError: baseError)
            case "SnapshotScheduleQuotaExceeded": return try SnapshotScheduleQuotaExceededFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUsageLimitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidUsageLimit": return try InvalidUsageLimitFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            case "UsageLimitAlreadyExists": return try UsageLimitAlreadyExistsFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeauthorizeDataShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidDataShareFault": return try InvalidDataShareFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAuthenticationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthenticationProfileNotFoundFault": return try AuthenticationProfileNotFoundFault.makeError(baseError: baseError)
            case "InvalidAuthenticationProfileRequestFault": return try InvalidAuthenticationProfileRequestFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotAlreadyExists": return try ClusterSnapshotAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterSnapshotQuotaExceeded": return try ClusterSnapshotQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterParameterGroupState": return try InvalidClusterParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterSecurityGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSubnetGroupNotFoundFault": return try ClusterSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSubnetGroupStateFault": return try InvalidClusterSubnetGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterSubnetStateFault": return try InvalidClusterSubnetStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomDomainAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "CustomCnameAssociationFault": return try CustomCnameAssociationFault.makeError(baseError: baseError)
            case "CustomDomainAssociationNotFoundFault": return try CustomDomainAssociationNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "EndpointNotFound": return try EndpointNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidEndpointState": return try InvalidEndpointStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEventSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidSubscriptionStateFault": return try InvalidSubscriptionStateFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHsmClientCertificateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HsmClientCertificateNotFoundFault": return try HsmClientCertificateNotFoundFault.makeError(baseError: baseError)
            case "InvalidHsmClientCertificateStateFault": return try InvalidHsmClientCertificateStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHsmConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HsmConfigurationNotFoundFault": return try HsmConfigurationNotFoundFault.makeError(baseError: baseError)
            case "InvalidHsmConfigurationStateFault": return try InvalidHsmConfigurationStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIntegrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IntegrationConflictOperationFault": return try IntegrationConflictOperationFault.makeError(baseError: baseError)
            case "IntegrationConflictStateFault": return try IntegrationConflictStateFault.makeError(baseError: baseError)
            case "IntegrationNotFoundFault": return try IntegrationNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePartnerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "PartnerNotFound": return try PartnerNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedPartnerIntegration": return try UnauthorizedPartnerIntegrationFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRedshiftIdcApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceAccessDenied": return try DependentServiceAccessDeniedFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "RedshiftIdcApplicationNotExists": return try RedshiftIdcApplicationNotExistsFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScheduledActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ScheduledActionNotFound": return try ScheduledActionNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSnapshotCopyGrantOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidSnapshotCopyGrantStateFault": return try InvalidSnapshotCopyGrantStateFault.makeError(baseError: baseError)
            case "SnapshotCopyGrantNotFoundFault": return try SnapshotCopyGrantNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSnapshotScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClusterSnapshotScheduleState": return try InvalidClusterSnapshotScheduleStateFault.makeError(baseError: baseError)
            case "SnapshotScheduleNotFound": return try SnapshotScheduleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUsageLimitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            case "UsageLimitNotFound": return try UsageLimitNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAuthenticationProfilesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthenticationProfileNotFoundFault": return try AuthenticationProfileNotFoundFault.makeError(baseError: baseError)
            case "InvalidAuthenticationProfileRequestFault": return try InvalidAuthenticationProfileRequestFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterDbRevisionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterParameterGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterSecurityGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterSnapshotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterSubnetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSubnetGroupNotFoundFault": return try ClusterSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterTracksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClusterTrack": return try InvalidClusterTrackFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCustomDomainAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CustomDomainAssociationNotFoundFault": return try CustomDomainAssociationNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataSharesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidDataShareFault": return try InvalidDataShareFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataSharesForConsumerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNamespaceFault": return try InvalidNamespaceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataSharesForProducerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNamespaceFault": return try InvalidNamespaceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDefaultClusterParametersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "EndpointNotFound": return try EndpointNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointAuthorizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventCategoriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventSubscriptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHsmClientCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HsmClientCertificateNotFoundFault": return try HsmClientCertificateNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHsmConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HsmConfigurationNotFoundFault": return try HsmConfigurationNotFoundFault.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInboundIntegrationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IntegrationNotFoundFault": return try IntegrationNotFoundFault.makeError(baseError: baseError)
            case "InvalidNamespaceFault": return try InvalidNamespaceFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeIntegrationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IntegrationNotFoundFault": return try IntegrationNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoggingStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNodeConfigurationOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessToSnapshotDenied": return try AccessToSnapshotDeniedFault.makeError(baseError: baseError)
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOrderableClusterOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePartnersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedPartnerIntegration": return try UnauthorizedPartnerIntegrationFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRedshiftIdcApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceAccessDenied": return try DependentServiceAccessDeniedFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "RedshiftIdcApplicationNotExists": return try RedshiftIdcApplicationNotExistsFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedNodeExchangeStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ReservedNodeExchangeNotFond": return try ReservedNodeExchangeNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedNodeOfferingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeReservedNodesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResizeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ResizeNotFound": return try ResizeNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScheduledActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ScheduledActionNotFound": return try ScheduledActionNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSnapshotCopyGrantsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "SnapshotCopyGrantNotFoundFault": return try SnapshotCopyGrantNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSnapshotSchedulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStorageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTableRestoreStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "TableRestoreNotFoundFault": return try TableRestoreNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUsageLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableLoggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableSnapshotCopyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "SnapshotCopyAlreadyDisabledFault": return try SnapshotCopyAlreadyDisabledFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateDataShareConsumerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidDataShareFault": return try InvalidDataShareFault.makeError(baseError: baseError)
            case "InvalidNamespaceFault": return try InvalidNamespaceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableLoggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BucketNotFoundFault": return try BucketNotFoundFault.makeError(baseError: baseError)
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InsufficientS3BucketPolicyFault": return try InsufficientS3BucketPolicyFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidS3BucketNameFault": return try InvalidS3BucketNameFault.makeError(baseError: baseError)
            case "InvalidS3KeyPrefixFault": return try InvalidS3KeyPrefixFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableSnapshotCopyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "CopyToRegionDisabledFault": return try CopyToRegionDisabledFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "IncompatibleOrderableOptions": return try IncompatibleOrderableOptions.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "SnapshotCopyAlreadyEnabledFault": return try SnapshotCopyAlreadyEnabledFault.makeError(baseError: baseError)
            case "SnapshotCopyGrantNotFoundFault": return try SnapshotCopyGrantNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnknownSnapshotCopyRegionFault": return try UnknownSnapshotCopyRegionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum FailoverPrimaryComputeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetClusterCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetClusterCredentialsWithIAMOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReservedNodeExchangeConfigurationOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "InvalidReservedNodeState": return try InvalidReservedNodeStateFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyMigrated": return try ReservedNodeAlreadyMigratedFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReservedNodeExchangeOfferingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "InvalidReservedNodeState": return try InvalidReservedNodeStateFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyMigrated": return try ReservedNodeAlreadyMigratedFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidPolicyFault": return try InvalidPolicyFault.makeError(baseError: baseError)
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyAquaConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyAuthenticationProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthenticationProfileNotFoundFault": return try AuthenticationProfileNotFoundFault.makeError(baseError: baseError)
            case "AuthenticationProfileQuotaExceededFault": return try AuthenticationProfileQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidAuthenticationProfileRequestFault": return try InvalidAuthenticationProfileRequestFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterAlreadyExists": return try ClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "CustomCnameAssociationFault": return try CustomCnameAssociationFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "HsmClientCertificateNotFoundFault": return try HsmClientCertificateNotFoundFault.makeError(baseError: baseError)
            case "HsmConfigurationNotFoundFault": return try HsmConfigurationNotFoundFault.makeError(baseError: baseError)
            case "InsufficientClusterCapacity": return try InsufficientClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidClusterTrack": return try InvalidClusterTrackFault.makeError(baseError: baseError)
            case "InvalidElasticIpFault": return try InvalidElasticIpFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            case "Ipv6CidrBlockNotFoundFault": return try Ipv6CidrBlockNotFoundFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesPerClusterLimitExceeded": return try NumberOfNodesPerClusterLimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesQuotaExceeded": return try NumberOfNodesQuotaExceededFault.makeError(baseError: baseError)
            case "TableLimitExceeded": return try TableLimitExceededFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            case "UnsupportedOptionFault": return try UnsupportedOptionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterDbRevisionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterOnLatestRevision": return try ClusterOnLatestRevisionFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterIamRolesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterMaintenanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterParameterGroupState": return try InvalidClusterParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterSnapshotScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotScheduleState": return try InvalidClusterSnapshotScheduleStateFault.makeError(baseError: baseError)
            case "SnapshotScheduleNotFound": return try SnapshotScheduleNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyClusterSubnetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterSubnetGroupNotFoundFault": return try ClusterSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterSubnetQuotaExceededFault": return try ClusterSubnetQuotaExceededFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "SubnetAlreadyInUse": return try SubnetAlreadyInUse.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyCustomDomainAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "CustomCnameAssociationFault": return try CustomCnameAssociationFault.makeError(baseError: baseError)
            case "CustomDomainAssociationNotFoundFault": return try CustomDomainAssociationNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "EndpointNotFound": return try EndpointNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidEndpointState": return try InvalidEndpointStateFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyEventSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidSubscriptionStateFault": return try InvalidSubscriptionStateFault.makeError(baseError: baseError)
            case "SNSInvalidTopic": return try SNSInvalidTopicFault.makeError(baseError: baseError)
            case "SNSNoAuthorization": return try SNSNoAuthorizationFault.makeError(baseError: baseError)
            case "SNSTopicArnNotFound": return try SNSTopicArnNotFoundFault.makeError(baseError: baseError)
            case "SourceNotFound": return try SourceNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionCategoryNotFound": return try SubscriptionCategoryNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionEventIdNotFound": return try SubscriptionEventIdNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionNotFound": return try SubscriptionNotFoundFault.makeError(baseError: baseError)
            case "SubscriptionSeverityNotFound": return try SubscriptionSeverityNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyIntegrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IntegrationAlreadyExistsFault": return try IntegrationAlreadyExistsFault.makeError(baseError: baseError)
            case "IntegrationConflictOperationFault": return try IntegrationConflictOperationFault.makeError(baseError: baseError)
            case "IntegrationConflictStateFault": return try IntegrationConflictStateFault.makeError(baseError: baseError)
            case "IntegrationNotFoundFault": return try IntegrationNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyRedshiftIdcApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DependentServiceAccessDenied": return try DependentServiceAccessDeniedFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "RedshiftIdcApplicationNotExists": return try RedshiftIdcApplicationNotExistsFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyScheduledActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidScheduledAction": return try InvalidScheduledActionFault.makeError(baseError: baseError)
            case "InvalidSchedule": return try InvalidScheduleFault.makeError(baseError: baseError)
            case "ScheduledActionNotFound": return try ScheduledActionNotFoundFault.makeError(baseError: baseError)
            case "ScheduledActionTypeUnsupported": return try ScheduledActionTypeUnsupportedFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifySnapshotCopyRetentionPeriodOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidRetentionPeriodFault": return try InvalidRetentionPeriodFault.makeError(baseError: baseError)
            case "SnapshotCopyDisabledFault": return try SnapshotCopyDisabledFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifySnapshotScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidSchedule": return try InvalidScheduleFault.makeError(baseError: baseError)
            case "SnapshotScheduleNotFound": return try SnapshotScheduleNotFoundFault.makeError(baseError: baseError)
            case "SnapshotScheduleUpdateInProgress": return try SnapshotScheduleUpdateInProgressFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyUsageLimitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidUsageLimit": return try InvalidUsageLimitFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            case "UsageLimitNotFound": return try UsageLimitNotFoundFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PauseClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PurchaseReservedNodeOfferingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ReservedNodeAlreadyExists": return try ReservedNodeAlreadyExistsFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeQuotaExceeded": return try ReservedNodeQuotaExceededFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictPolicyUpdateFault": return try ConflictPolicyUpdateFault.makeError(baseError: baseError)
            case "InvalidPolicyFault": return try InvalidPolicyFault.makeError(baseError: baseError)
            case "ResourceNotFoundFault": return try ResourceNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RebootClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectDataShareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidDataShareFault": return try InvalidDataShareFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResetClusterParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterParameterGroupState": return try InvalidClusterParameterGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResizeClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "InsufficientClusterCapacity": return try InsufficientClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidReservedNodeState": return try InvalidReservedNodeStateFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesPerClusterLimitExceeded": return try NumberOfNodesPerClusterLimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesQuotaExceeded": return try NumberOfNodesQuotaExceededFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyExists": return try ReservedNodeAlreadyExistsFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyMigrated": return try ReservedNodeAlreadyMigratedFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            case "UnsupportedOptionFault": return try UnsupportedOptionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreFromClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessToSnapshotDenied": return try AccessToSnapshotDeniedFault.makeError(baseError: baseError)
            case "ClusterAlreadyExists": return try ClusterAlreadyExistsFault.makeError(baseError: baseError)
            case "ClusterParameterGroupNotFound": return try ClusterParameterGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterQuotaExceeded": return try ClusterQuotaExceededFault.makeError(baseError: baseError)
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "ClusterSubnetGroupNotFoundFault": return try ClusterSubnetGroupNotFoundFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "DependentServiceUnavailableFault": return try DependentServiceUnavailableFault.makeError(baseError: baseError)
            case "HsmClientCertificateNotFoundFault": return try HsmClientCertificateNotFoundFault.makeError(baseError: baseError)
            case "HsmConfigurationNotFoundFault": return try HsmConfigurationNotFoundFault.makeError(baseError: baseError)
            case "InsufficientClusterCapacity": return try InsufficientClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidClusterSubnetGroupStateFault": return try InvalidClusterSubnetGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterTrack": return try InvalidClusterTrackFault.makeError(baseError: baseError)
            case "InvalidElasticIpFault": return try InvalidElasticIpFault.makeError(baseError: baseError)
            case "InvalidReservedNodeState": return try InvalidReservedNodeStateFault.makeError(baseError: baseError)
            case "InvalidRestore": return try InvalidRestoreFault.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnet.makeError(baseError: baseError)
            case "InvalidTagFault": return try InvalidTagFault.makeError(baseError: baseError)
            case "InvalidVPCNetworkStateFault": return try InvalidVPCNetworkStateFault.makeError(baseError: baseError)
            case "Ipv6CidrBlockNotFoundFault": return try Ipv6CidrBlockNotFoundFault.makeError(baseError: baseError)
            case "LimitExceededFault": return try LimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesPerClusterLimitExceeded": return try NumberOfNodesPerClusterLimitExceededFault.makeError(baseError: baseError)
            case "NumberOfNodesQuotaExceeded": return try NumberOfNodesQuotaExceededFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyExists": return try ReservedNodeAlreadyExistsFault.makeError(baseError: baseError)
            case "ReservedNodeAlreadyMigrated": return try ReservedNodeAlreadyMigratedFault.makeError(baseError: baseError)
            case "ReservedNodeNotFound": return try ReservedNodeNotFoundFault.makeError(baseError: baseError)
            case "ReservedNodeOfferingNotFound": return try ReservedNodeOfferingNotFoundFault.makeError(baseError: baseError)
            case "SnapshotScheduleNotFound": return try SnapshotScheduleNotFoundFault.makeError(baseError: baseError)
            case "TagLimitExceededFault": return try TagLimitExceededFault.makeError(baseError: baseError)
            case "UnauthorizedOperation": return try UnauthorizedOperation.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreTableFromClusterSnapshotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "InProgressTableRestoreQuotaExceededFault": return try InProgressTableRestoreQuotaExceededFault.makeError(baseError: baseError)
            case "InvalidClusterSnapshotState": return try InvalidClusterSnapshotStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidTableRestoreArgument": return try InvalidTableRestoreArgumentFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResumeClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "InsufficientClusterCapacity": return try InsufficientClusterCapacityFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeClusterSecurityGroupIngressOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AuthorizationNotFound": return try AuthorizationNotFoundFault.makeError(baseError: baseError)
            case "ClusterSecurityGroupNotFound": return try ClusterSecurityGroupNotFoundFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeEndpointAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "EndpointAuthorizationNotFound": return try EndpointAuthorizationNotFoundFault.makeError(baseError: baseError)
            case "EndpointNotFound": return try EndpointNotFoundFault.makeError(baseError: baseError)
            case "InvalidAuthorizationState": return try InvalidAuthorizationStateFault.makeError(baseError: baseError)
            case "InvalidClusterSecurityGroupState": return try InvalidClusterSecurityGroupStateFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "InvalidEndpointState": return try InvalidEndpointStateFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RevokeSnapshotAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessToSnapshotDenied": return try AccessToSnapshotDeniedFault.makeError(baseError: baseError)
            case "AuthorizationNotFound": return try AuthorizationNotFoundFault.makeError(baseError: baseError)
            case "ClusterSnapshotNotFound": return try ClusterSnapshotNotFoundFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RotateEncryptionKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "DependentServiceRequestThrottlingFault": return try DependentServiceRequestThrottlingFault.makeError(baseError: baseError)
            case "InvalidClusterState": return try InvalidClusterStateFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePartnerStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFound": return try ClusterNotFoundFault.makeError(baseError: baseError)
            case "PartnerNotFound": return try PartnerNotFoundFault.makeError(baseError: baseError)
            case "UnauthorizedPartnerIntegration": return try UnauthorizedPartnerIntegrationFault.makeError(baseError: baseError)
            case "UnsupportedOperation": return try UnsupportedOperationFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ReservedNodeAlreadyMigratedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedNodeAlreadyMigratedFault {
        let reader = baseError.errorBodyReader
        var value = ReservedNodeAlreadyMigratedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOperationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UnsupportedOperationFault {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOperationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidReservedNodeStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidReservedNodeStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidReservedNodeStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedNodeAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedNodeAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ReservedNodeAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedNodeOfferingNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedNodeOfferingNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ReservedNodeOfferingNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DependentServiceUnavailableFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DependentServiceUnavailableFault {
        let reader = baseError.errorBodyReader
        var value = DependentServiceUnavailableFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedNodeNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedNodeNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ReservedNodeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PartnerNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> PartnerNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = PartnerNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ClusterNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedPartnerIntegrationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UnauthorizedPartnerIntegrationFault {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedPartnerIntegrationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDataShareFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidDataShareFault {
        let reader = baseError.errorBodyReader
        var value = InvalidDataShareFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNamespaceFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidNamespaceFault {
        let reader = baseError.errorBodyReader
        var value = InvalidNamespaceFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthorizationQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = AuthorizationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterSecurityGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterSecurityGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterSecurityGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSecurityGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSecurityGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSecurityGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthorizationAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = AuthorizationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAuthorizationStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidAuthorizationStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidAuthorizationStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointAuthorizationsPerClusterLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointAuthorizationsPerClusterLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = EndpointAuthorizationsPerClusterLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointAuthorizationAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointAuthorizationAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = EndpointAuthorizationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSnapshotNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSnapshotNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSnapshotNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DependentServiceRequestThrottlingFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DependentServiceRequestThrottlingFault {
        let reader = baseError.errorBodyReader
        var value = DependentServiceRequestThrottlingFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterSnapshotStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterSnapshotStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterSnapshotStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> LimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = LimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchDeleteRequestSizeExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> BatchDeleteRequestSizeExceededFault {
        let reader = baseError.errorBodyReader
        var value = BatchDeleteRequestSizeExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRetentionPeriodFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidRetentionPeriodFault {
        let reader = baseError.errorBodyReader
        var value = InvalidRetentionPeriodFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchModifyClusterSnapshotsLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> BatchModifyClusterSnapshotsLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = BatchModifyClusterSnapshotsLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResizeNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResizeNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ResizeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSnapshotAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSnapshotAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSnapshotAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSnapshotQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSnapshotQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSnapshotQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthenticationProfileAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthenticationProfileAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = AuthenticationProfileAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthenticationProfileQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthenticationProfileQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = AuthenticationProfileQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAuthenticationProfileRequestFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidAuthenticationProfileRequestFault {
        let reader = baseError.errorBodyReader
        var value = InvalidAuthenticationProfileRequestFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HsmConfigurationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HsmConfigurationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = HsmConfigurationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NumberOfNodesQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NumberOfNodesQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = NumberOfNodesQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSubnet {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSubnet {
        let reader = baseError.errorBodyReader
        var value = InvalidSubnet()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedOperation {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UnauthorizedOperation {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedOperation()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidTagFault {
        let reader = baseError.errorBodyReader
        var value = InvalidTagFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HsmClientCertificateNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HsmClientCertificateNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = HsmClientCertificateNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterSubnetGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterSubnetGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterSubnetGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TagLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = TagLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidVPCNetworkStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidVPCNetworkStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidVPCNetworkStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ClusterAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterParameterGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterParameterGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ClusterParameterGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSubnetGroupNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSubnetGroupNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSubnetGroupNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension Ipv6CidrBlockNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> Ipv6CidrBlockNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = Ipv6CidrBlockNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RedshiftIdcApplicationNotExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> RedshiftIdcApplicationNotExistsFault {
        let reader = baseError.errorBodyReader
        var value = RedshiftIdcApplicationNotExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientClusterCapacityFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InsufficientClusterCapacityFault {
        let reader = baseError.errorBodyReader
        var value = InsufficientClusterCapacityFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterTrackFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterTrackFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterTrackFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidElasticIpFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidElasticIpFault {
        let reader = baseError.errorBodyReader
        var value = InvalidElasticIpFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotScheduleNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotScheduleNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotScheduleNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NumberOfNodesPerClusterLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> NumberOfNodesPerClusterLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = NumberOfNodesPerClusterLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterParameterGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterParameterGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ClusterParameterGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterParameterGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterParameterGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterParameterGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSecurityGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSecurityGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSecurityGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSecurityGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSecurityGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSecurityGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSubnetGroupAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSubnetGroupAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSubnetGroupAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSubnetQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSubnetQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSubnetQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterSubnetGroupQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterSubnetGroupQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ClusterSubnetGroupQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CustomCnameAssociationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CustomCnameAssociationFault {
        let reader = baseError.errorBodyReader
        var value = CustomCnameAssociationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointsPerAuthorizationLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointsPerAuthorizationLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = EndpointsPerAuthorizationLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = EndpointAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessToClusterDeniedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AccessToClusterDeniedFault {
        let reader = baseError.errorBodyReader
        var value = AccessToClusterDeniedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointsPerClusterLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointsPerClusterLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = EndpointsPerClusterLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EventSubscriptionQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EventSubscriptionQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = EventSubscriptionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionSeverityNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionSeverityNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionSeverityNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionEventIdNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionEventIdNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionEventIdNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionCategoryNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionCategoryNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionCategoryNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SNSTopicArnNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SNSTopicArnNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SNSTopicArnNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionAlreadyExistFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionAlreadyExistFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionAlreadyExistFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SNSNoAuthorizationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SNSNoAuthorizationFault {
        let reader = baseError.errorBodyReader
        var value = SNSNoAuthorizationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SourceNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SourceNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SNSInvalidTopicFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SNSInvalidTopicFault {
        let reader = baseError.errorBodyReader
        var value = SNSInvalidTopicFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HsmClientCertificateAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HsmClientCertificateAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = HsmClientCertificateAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HsmClientCertificateQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HsmClientCertificateQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = HsmClientCertificateQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HsmConfigurationQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HsmConfigurationQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = HsmConfigurationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HsmConfigurationAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HsmConfigurationAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = HsmConfigurationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationTargetNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationTargetNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationTargetNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationConflictOperationFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationConflictOperationFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationConflictOperationFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationSourceNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationSourceNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationSourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DependentServiceAccessDeniedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DependentServiceAccessDeniedFault {
        let reader = baseError.errorBodyReader
        var value = DependentServiceAccessDeniedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RedshiftIdcApplicationAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> RedshiftIdcApplicationAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = RedshiftIdcApplicationAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RedshiftIdcApplicationQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> RedshiftIdcApplicationQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = RedshiftIdcApplicationQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScheduledActionTypeUnsupportedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ScheduledActionTypeUnsupportedFault {
        let reader = baseError.errorBodyReader
        var value = ScheduledActionTypeUnsupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScheduledActionAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ScheduledActionAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = ScheduledActionAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidScheduledActionFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidScheduledActionFault {
        let reader = baseError.errorBodyReader
        var value = InvalidScheduledActionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScheduledActionQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ScheduledActionQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ScheduledActionQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidScheduleFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidScheduleFault {
        let reader = baseError.errorBodyReader
        var value = InvalidScheduleFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotCopyGrantAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotCopyGrantAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotCopyGrantAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotCopyGrantQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotCopyGrantQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotCopyGrantQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotScheduleQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotScheduleQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotScheduleQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScheduleDefinitionTypeUnsupportedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ScheduleDefinitionTypeUnsupportedFault {
        let reader = baseError.errorBodyReader
        var value = ScheduleDefinitionTypeUnsupportedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotScheduleAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotScheduleAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotScheduleAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UsageLimitAlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UsageLimitAlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = UsageLimitAlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidUsageLimitFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidUsageLimitFault {
        let reader = baseError.errorBodyReader
        var value = InvalidUsageLimitFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthenticationProfileNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthenticationProfileNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = AuthenticationProfileNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterParameterGroupStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterParameterGroupStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterParameterGroupStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterSubnetStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterSubnetStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterSubnetStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CustomDomainAssociationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CustomDomainAssociationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = CustomDomainAssociationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = EndpointNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEndpointStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidEndpointStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidEndpointStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSubscriptionStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSubscriptionStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidSubscriptionStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubscriptionNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubscriptionNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SubscriptionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidHsmClientCertificateStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidHsmClientCertificateStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidHsmClientCertificateStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidHsmConfigurationStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidHsmConfigurationStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidHsmConfigurationStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IntegrationConflictStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IntegrationConflictStateFault {
        let reader = baseError.errorBodyReader
        var value = IntegrationConflictStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScheduledActionNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ScheduledActionNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ScheduledActionNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotCopyGrantNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotCopyGrantNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotCopyGrantNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSnapshotCopyGrantStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSnapshotCopyGrantStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidSnapshotCopyGrantStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClusterSnapshotScheduleStateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidClusterSnapshotScheduleStateFault {
        let reader = baseError.errorBodyReader
        var value = InvalidClusterSnapshotScheduleStateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UsageLimitNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UsageLimitNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = UsageLimitNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessToSnapshotDeniedFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AccessToSnapshotDeniedFault {
        let reader = baseError.errorBodyReader
        var value = AccessToSnapshotDeniedFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedNodeExchangeNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedNodeExchangeNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ReservedNodeExchangeNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TableRestoreNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TableRestoreNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = TableRestoreNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotCopyAlreadyDisabledFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotCopyAlreadyDisabledFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotCopyAlreadyDisabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BucketNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> BucketNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = BucketNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidS3BucketNameFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidS3BucketNameFault {
        let reader = baseError.errorBodyReader
        var value = InvalidS3BucketNameFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidS3KeyPrefixFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidS3KeyPrefixFault {
        let reader = baseError.errorBodyReader
        var value = InvalidS3KeyPrefixFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InsufficientS3BucketPolicyFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InsufficientS3BucketPolicyFault {
        let reader = baseError.errorBodyReader
        var value = InsufficientS3BucketPolicyFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CopyToRegionDisabledFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CopyToRegionDisabledFault {
        let reader = baseError.errorBodyReader
        var value = CopyToRegionDisabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnknownSnapshotCopyRegionFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UnknownSnapshotCopyRegionFault {
        let reader = baseError.errorBodyReader
        var value = UnknownSnapshotCopyRegionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotCopyAlreadyEnabledFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotCopyAlreadyEnabledFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotCopyAlreadyEnabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncompatibleOrderableOptions {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IncompatibleOrderableOptions {
        let reader = baseError.errorBodyReader
        var value = IncompatibleOrderableOptions()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidPolicyFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidPolicyFault {
        let reader = baseError.errorBodyReader
        var value = InvalidPolicyFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TableLimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TableLimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = TableLimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedOptionFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UnsupportedOptionFault {
        let reader = baseError.errorBodyReader
        var value = UnsupportedOptionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterOnLatestRevisionFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ClusterOnLatestRevisionFault {
        let reader = baseError.errorBodyReader
        var value = ClusterOnLatestRevisionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubnetAlreadyInUse {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubnetAlreadyInUse {
        let reader = baseError.errorBodyReader
        var value = SubnetAlreadyInUse()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotCopyDisabledFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotCopyDisabledFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotCopyDisabledFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SnapshotScheduleUpdateInProgressFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SnapshotScheduleUpdateInProgressFault {
        let reader = baseError.errorBodyReader
        var value = SnapshotScheduleUpdateInProgressFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReservedNodeQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ReservedNodeQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = ReservedNodeQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictPolicyUpdateFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ConflictPolicyUpdateFault {
        let reader = baseError.errorBodyReader
        var value = ConflictPolicyUpdateFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRestoreFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidRestoreFault {
        let reader = baseError.errorBodyReader
        var value = InvalidRestoreFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InProgressTableRestoreQuotaExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InProgressTableRestoreQuotaExceededFault {
        let reader = baseError.errorBodyReader
        var value = InProgressTableRestoreQuotaExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTableRestoreArgumentFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidTableRestoreArgumentFault {
        let reader = baseError.errorBodyReader
        var value = InvalidTableRestoreArgumentFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AuthorizationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AuthorizationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = AuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EndpointAuthorizationNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> EndpointAuthorizationNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = EndpointAuthorizationNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RedshiftClientTypes.ReservedNode {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ReservedNode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ReservedNode()
        value.reservedNodeId = try reader["ReservedNodeId"].readIfPresent()
        value.reservedNodeOfferingId = try reader["ReservedNodeOfferingId"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.duration = try reader["Duration"].readIfPresent()
        value.fixedPrice = try reader["FixedPrice"].readIfPresent()
        value.usagePrice = try reader["UsagePrice"].readIfPresent()
        value.currencyCode = try reader["CurrencyCode"].readIfPresent()
        value.nodeCount = try reader["NodeCount"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.offeringType = try reader["OfferingType"].readIfPresent()
        value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RecurringCharge.read(from:), memberNodeInfo: "RecurringCharge", isFlattened: false)
        value.reservedNodeOfferingType = try reader["ReservedNodeOfferingType"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.RecurringCharge {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.RecurringCharge {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.RecurringCharge()
        value.recurringChargeAmount = try reader["RecurringChargeAmount"].readIfPresent()
        value.recurringChargeFrequency = try reader["RecurringChargeFrequency"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.DataShareAssociation {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.DataShareAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.DataShareAssociation()
        value.consumerIdentifier = try reader["ConsumerIdentifier"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.consumerRegion = try reader["ConsumerRegion"].readIfPresent()
        value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.statusChangeDate = try reader["StatusChangeDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.producerAllowedWrites = try reader["ProducerAllowedWrites"].readIfPresent()
        value.consumerAcceptedWrites = try reader["ConsumerAcceptedWrites"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterSecurityGroup {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterSecurityGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterSecurityGroup()
        value.clusterSecurityGroupName = try reader["ClusterSecurityGroupName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.ec2SecurityGroups = try reader["EC2SecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EC2SecurityGroup.read(from:), memberNodeInfo: "EC2SecurityGroup", isFlattened: false)
        value.ipRanges = try reader["IPRanges"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IPRange.read(from:), memberNodeInfo: "IPRange", isFlattened: false)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.Tag {

    static func write(value: RedshiftClientTypes.Tag?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.IPRange {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.IPRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.IPRange()
        value.status = try reader["Status"].readIfPresent()
        value.cidrip = try reader["CIDRIP"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.EC2SecurityGroup {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.EC2SecurityGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.EC2SecurityGroup()
        value.status = try reader["Status"].readIfPresent()
        value.ec2SecurityGroupName = try reader["EC2SecurityGroupName"].readIfPresent()
        value.ec2SecurityGroupOwnerId = try reader["EC2SecurityGroupOwnerId"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.Snapshot {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Snapshot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Snapshot()
        value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.snapshotCreateTime = try reader["SnapshotCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.status = try reader["Status"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.masterUsername = try reader["MasterUsername"].readIfPresent()
        value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
        value.engineFullVersion = try reader["EngineFullVersion"].readIfPresent()
        value.snapshotType = try reader["SnapshotType"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
        value.dbName = try reader["DBName"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.encrypted = try reader["Encrypted"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.encryptedWithHSM = try reader["EncryptedWithHSM"].readIfPresent()
        value.accountsWithRestoreAccess = try reader["AccountsWithRestoreAccess"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AccountWithRestoreAccess.read(from:), memberNodeInfo: "AccountWithRestoreAccess", isFlattened: false)
        value.ownerAccount = try reader["OwnerAccount"].readIfPresent()
        value.totalBackupSizeInMegaBytes = try reader["TotalBackupSizeInMegaBytes"].readIfPresent()
        value.actualIncrementalBackupSizeInMegaBytes = try reader["ActualIncrementalBackupSizeInMegaBytes"].readIfPresent()
        value.backupProgressInMegaBytes = try reader["BackupProgressInMegaBytes"].readIfPresent()
        value.currentBackupRateInMegaBytesPerSecond = try reader["CurrentBackupRateInMegaBytesPerSecond"].readIfPresent()
        value.estimatedSecondsToCompletion = try reader["EstimatedSecondsToCompletion"].readIfPresent()
        value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
        value.sourceRegion = try reader["SourceRegion"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.restorableNodeTypes = try reader["RestorableNodeTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "NodeType", isFlattened: false)
        value.enhancedVpcRouting = try reader["EnhancedVpcRouting"].readIfPresent()
        value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
        value.manualSnapshotRetentionPeriod = try reader["ManualSnapshotRetentionPeriod"].readIfPresent()
        value.manualSnapshotRemainingDays = try reader["ManualSnapshotRemainingDays"].readIfPresent()
        value.snapshotRetentionStartTime = try reader["SnapshotRetentionStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.masterPasswordSecretArn = try reader["MasterPasswordSecretArn"].readIfPresent()
        value.masterPasswordSecretKmsKeyId = try reader["MasterPasswordSecretKmsKeyId"].readIfPresent()
        value.snapshotArn = try reader["SnapshotArn"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.AccountWithRestoreAccess {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AccountWithRestoreAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AccountWithRestoreAccess()
        value.accountId = try reader["AccountId"].readIfPresent()
        value.accountAlias = try reader["AccountAlias"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.SnapshotErrorMessage {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.SnapshotErrorMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.SnapshotErrorMessage()
        value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
        value.snapshotClusterIdentifier = try reader["SnapshotClusterIdentifier"].readIfPresent()
        value.failureCode = try reader["FailureCode"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.Cluster {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Cluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Cluster()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
        value.clusterAvailabilityStatus = try reader["ClusterAvailabilityStatus"].readIfPresent()
        value.modifyStatus = try reader["ModifyStatus"].readIfPresent()
        value.masterUsername = try reader["MasterUsername"].readIfPresent()
        value.dbName = try reader["DBName"].readIfPresent()
        value.endpoint = try reader["Endpoint"].readIfPresent(with: RedshiftClientTypes.Endpoint.read(from:))
        value.clusterCreateTime = try reader["ClusterCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.automatedSnapshotRetentionPeriod = try reader["AutomatedSnapshotRetentionPeriod"].readIfPresent()
        value.manualSnapshotRetentionPeriod = try reader["ManualSnapshotRetentionPeriod"].readIfPresent()
        value.clusterSecurityGroups = try reader["ClusterSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterSecurityGroupMembership.read(from:), memberNodeInfo: "ClusterSecurityGroup", isFlattened: false)
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
        value.clusterParameterGroups = try reader["ClusterParameterGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterParameterGroupStatus.read(from:), memberNodeInfo: "ClusterParameterGroup", isFlattened: false)
        value.clusterSubnetGroupName = try reader["ClusterSubnetGroupName"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.preferredMaintenanceWindow = try reader["PreferredMaintenanceWindow"].readIfPresent()
        value.pendingModifiedValues = try reader["PendingModifiedValues"].readIfPresent(with: RedshiftClientTypes.PendingModifiedValues.read(from:))
        value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
        value.allowVersionUpgrade = try reader["AllowVersionUpgrade"].readIfPresent()
        value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
        value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
        value.encrypted = try reader["Encrypted"].readIfPresent()
        value.restoreStatus = try reader["RestoreStatus"].readIfPresent(with: RedshiftClientTypes.RestoreStatus.read(from:))
        value.dataTransferProgress = try reader["DataTransferProgress"].readIfPresent(with: RedshiftClientTypes.DataTransferProgress.read(from:))
        value.hsmStatus = try reader["HsmStatus"].readIfPresent(with: RedshiftClientTypes.HsmStatus.read(from:))
        value.clusterSnapshotCopyStatus = try reader["ClusterSnapshotCopyStatus"].readIfPresent(with: RedshiftClientTypes.ClusterSnapshotCopyStatus.read(from:))
        value.clusterPublicKey = try reader["ClusterPublicKey"].readIfPresent()
        value.clusterNodes = try reader["ClusterNodes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterNode.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.elasticIpStatus = try reader["ElasticIpStatus"].readIfPresent(with: RedshiftClientTypes.ElasticIpStatus.read(from:))
        value.clusterRevisionNumber = try reader["ClusterRevisionNumber"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.enhancedVpcRouting = try reader["EnhancedVpcRouting"].readIfPresent()
        value.iamRoles = try reader["IamRoles"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterIamRole.read(from:), memberNodeInfo: "ClusterIamRole", isFlattened: false)
        value.pendingActions = try reader["PendingActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
        value.elasticResizeNumberOfNodeOptions = try reader["ElasticResizeNumberOfNodeOptions"].readIfPresent()
        value.deferredMaintenanceWindows = try reader["DeferredMaintenanceWindows"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DeferredMaintenanceWindow.read(from:), memberNodeInfo: "DeferredMaintenanceWindow", isFlattened: false)
        value.snapshotScheduleIdentifier = try reader["SnapshotScheduleIdentifier"].readIfPresent()
        value.snapshotScheduleState = try reader["SnapshotScheduleState"].readIfPresent()
        value.expectedNextSnapshotScheduleTime = try reader["ExpectedNextSnapshotScheduleTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expectedNextSnapshotScheduleTimeStatus = try reader["ExpectedNextSnapshotScheduleTimeStatus"].readIfPresent()
        value.nextMaintenanceWindowStartTime = try reader["NextMaintenanceWindowStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.resizeInfo = try reader["ResizeInfo"].readIfPresent(with: RedshiftClientTypes.ResizeInfo.read(from:))
        value.availabilityZoneRelocationStatus = try reader["AvailabilityZoneRelocationStatus"].readIfPresent()
        value.clusterNamespaceArn = try reader["ClusterNamespaceArn"].readIfPresent()
        value.totalStorageCapacityInMegaBytes = try reader["TotalStorageCapacityInMegaBytes"].readIfPresent()
        value.aquaConfiguration = try reader["AquaConfiguration"].readIfPresent(with: RedshiftClientTypes.AquaConfiguration.read(from:))
        value.defaultIamRoleArn = try reader["DefaultIamRoleArn"].readIfPresent()
        value.reservedNodeExchangeStatus = try reader["ReservedNodeExchangeStatus"].readIfPresent(with: RedshiftClientTypes.ReservedNodeExchangeStatus.read(from:))
        value.customDomainName = try reader["CustomDomainName"].readIfPresent()
        value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
        value.customDomainCertificateExpiryDate = try reader["CustomDomainCertificateExpiryDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.masterPasswordSecretArn = try reader["MasterPasswordSecretArn"].readIfPresent()
        value.masterPasswordSecretKmsKeyId = try reader["MasterPasswordSecretKmsKeyId"].readIfPresent()
        value.ipAddressType = try reader["IpAddressType"].readIfPresent()
        value.multiAZ = try reader["MultiAZ"].readIfPresent()
        value.multiAZSecondary = try reader["MultiAZSecondary"].readIfPresent(with: RedshiftClientTypes.SecondaryClusterInfo.read(from:))
        return value
    }
}

extension RedshiftClientTypes.SecondaryClusterInfo {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.SecondaryClusterInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.SecondaryClusterInfo()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.clusterNodes = try reader["ClusterNodes"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterNode.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ClusterNode {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterNode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterNode()
        value.nodeRole = try reader["NodeRole"].readIfPresent()
        value.privateIPAddress = try reader["PrivateIPAddress"].readIfPresent()
        value.publicIPAddress = try reader["PublicIPAddress"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ReservedNodeExchangeStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ReservedNodeExchangeStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ReservedNodeExchangeStatus()
        value.reservedNodeExchangeRequestId = try reader["ReservedNodeExchangeRequestId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.requestTime = try reader["RequestTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sourceReservedNodeId = try reader["SourceReservedNodeId"].readIfPresent()
        value.sourceReservedNodeType = try reader["SourceReservedNodeType"].readIfPresent()
        value.sourceReservedNodeCount = try reader["SourceReservedNodeCount"].readIfPresent()
        value.targetReservedNodeOfferingId = try reader["TargetReservedNodeOfferingId"].readIfPresent()
        value.targetReservedNodeType = try reader["TargetReservedNodeType"].readIfPresent()
        value.targetReservedNodeCount = try reader["TargetReservedNodeCount"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.AquaConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AquaConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AquaConfiguration()
        value.aquaStatus = try reader["AquaStatus"].readIfPresent()
        value.aquaConfigurationStatus = try reader["AquaConfigurationStatus"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ResizeInfo {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ResizeInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ResizeInfo()
        value.resizeType = try reader["ResizeType"].readIfPresent()
        value.allowCancelResize = try reader["AllowCancelResize"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.DeferredMaintenanceWindow {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.DeferredMaintenanceWindow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.DeferredMaintenanceWindow()
        value.deferMaintenanceIdentifier = try reader["DeferMaintenanceIdentifier"].readIfPresent()
        value.deferMaintenanceStartTime = try reader["DeferMaintenanceStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.deferMaintenanceEndTime = try reader["DeferMaintenanceEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension RedshiftClientTypes.ClusterIamRole {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterIamRole {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterIamRole()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
        value.applyStatus = try reader["ApplyStatus"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ElasticIpStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ElasticIpStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ElasticIpStatus()
        value.elasticIp = try reader["ElasticIp"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterSnapshotCopyStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterSnapshotCopyStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterSnapshotCopyStatus()
        value.destinationRegion = try reader["DestinationRegion"].readIfPresent()
        value.retentionPeriod = try reader["RetentionPeriod"].readIfPresent()
        value.manualSnapshotRetentionPeriod = try reader["ManualSnapshotRetentionPeriod"].readIfPresent()
        value.snapshotCopyGrantName = try reader["SnapshotCopyGrantName"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.HsmStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.HsmStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.HsmStatus()
        value.hsmClientCertificateIdentifier = try reader["HsmClientCertificateIdentifier"].readIfPresent()
        value.hsmConfigurationIdentifier = try reader["HsmConfigurationIdentifier"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.DataTransferProgress {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.DataTransferProgress {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.DataTransferProgress()
        value.status = try reader["Status"].readIfPresent()
        value.currentRateInMegaBytesPerSecond = try reader["CurrentRateInMegaBytesPerSecond"].readIfPresent()
        value.totalDataInMegaBytes = try reader["TotalDataInMegaBytes"].readIfPresent()
        value.dataTransferredInMegaBytes = try reader["DataTransferredInMegaBytes"].readIfPresent()
        value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
        value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.RestoreStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.RestoreStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.RestoreStatus()
        value.status = try reader["Status"].readIfPresent()
        value.currentRestoreRateInMegaBytesPerSecond = try reader["CurrentRestoreRateInMegaBytesPerSecond"].readIfPresent()
        value.snapshotSizeInMegaBytes = try reader["SnapshotSizeInMegaBytes"].readIfPresent()
        value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
        value.elapsedTimeInSeconds = try reader["ElapsedTimeInSeconds"].readIfPresent()
        value.estimatedTimeToCompletionInSeconds = try reader["EstimatedTimeToCompletionInSeconds"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.PendingModifiedValues {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.PendingModifiedValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.PendingModifiedValues()
        value.masterUserPassword = try reader["MasterUserPassword"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
        value.clusterType = try reader["ClusterType"].readIfPresent()
        value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
        value.automatedSnapshotRetentionPeriod = try reader["AutomatedSnapshotRetentionPeriod"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.publiclyAccessible = try reader["PubliclyAccessible"].readIfPresent()
        value.enhancedVpcRouting = try reader["EnhancedVpcRouting"].readIfPresent()
        value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
        value.encryptionType = try reader["EncryptionType"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterParameterGroupStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterParameterGroupStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterParameterGroupStatus()
        value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
        value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
        value.clusterParameterStatusList = try reader["ClusterParameterStatusList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterParameterStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ClusterParameterStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterParameterStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterParameterStatus()
        value.parameterName = try reader["ParameterName"].readIfPresent()
        value.parameterApplyStatus = try reader["ParameterApplyStatus"].readIfPresent()
        value.parameterApplyErrorDescription = try reader["ParameterApplyErrorDescription"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.VpcSecurityGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.VpcSecurityGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.VpcSecurityGroupMembership()
        value.vpcSecurityGroupId = try reader["VpcSecurityGroupId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterSecurityGroupMembership {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterSecurityGroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterSecurityGroupMembership()
        value.clusterSecurityGroupName = try reader["ClusterSecurityGroupName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.Endpoint {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Endpoint()
        value.address = try reader["Address"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.vpcEndpoints = try reader["VpcEndpoints"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcEndpoint.read(from:), memberNodeInfo: "VpcEndpoint", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.VpcEndpoint {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.VpcEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.VpcEndpoint()
        value.vpcEndpointId = try reader["VpcEndpointId"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.networkInterfaces = try reader["NetworkInterfaces"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.NetworkInterface.read(from:), memberNodeInfo: "NetworkInterface", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.NetworkInterface {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.NetworkInterface {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.NetworkInterface()
        value.networkInterfaceId = try reader["NetworkInterfaceId"].readIfPresent()
        value.subnetId = try reader["SubnetId"].readIfPresent()
        value.privateIpAddress = try reader["PrivateIpAddress"].readIfPresent()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.ipv6Address = try reader["Ipv6Address"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterParameterGroup {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterParameterGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterParameterGroup()
        value.parameterGroupName = try reader["ParameterGroupName"].readIfPresent()
        value.parameterGroupFamily = try reader["ParameterGroupFamily"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ClusterSubnetGroup {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterSubnetGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterSubnetGroup()
        value.clusterSubnetGroupName = try reader["ClusterSubnetGroupName"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.subnetGroupStatus = try reader["SubnetGroupStatus"].readIfPresent()
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Subnet.read(from:), memberNodeInfo: "Subnet", isFlattened: false)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.supportedClusterIpAddressTypes = try reader["SupportedClusterIpAddressTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "item", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.Subnet {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Subnet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Subnet()
        value.subnetIdentifier = try reader["SubnetIdentifier"].readIfPresent()
        value.subnetAvailabilityZone = try reader["SubnetAvailabilityZone"].readIfPresent(with: RedshiftClientTypes.AvailabilityZone.read(from:))
        value.subnetStatus = try reader["SubnetStatus"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.AvailabilityZone {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AvailabilityZone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AvailabilityZone()
        value.name = try reader["Name"].readIfPresent()
        value.supportedPlatforms = try reader["SupportedPlatforms"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SupportedPlatform.read(from:), memberNodeInfo: "SupportedPlatform", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.SupportedPlatform {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.SupportedPlatform {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.SupportedPlatform()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.EventSubscription {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.EventSubscription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.EventSubscription()
        value.customerAwsId = try reader["CustomerAwsId"].readIfPresent()
        value.custSubscriptionId = try reader["CustSubscriptionId"].readIfPresent()
        value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.subscriptionCreationTime = try reader["SubscriptionCreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.sourceIdsList = try reader["SourceIdsList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "SourceId", isFlattened: false)
        value.eventCategoriesList = try reader["EventCategoriesList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "EventCategory", isFlattened: false)
        value.severity = try reader["Severity"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.HsmClientCertificate {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.HsmClientCertificate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.HsmClientCertificate()
        value.hsmClientCertificateIdentifier = try reader["HsmClientCertificateIdentifier"].readIfPresent()
        value.hsmClientCertificatePublicKey = try reader["HsmClientCertificatePublicKey"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.HsmConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.HsmConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.HsmConfiguration()
        value.hsmConfigurationIdentifier = try reader["HsmConfigurationIdentifier"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.hsmIpAddress = try reader["HsmIpAddress"].readIfPresent()
        value.hsmPartitionName = try reader["HsmPartitionName"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.IntegrationError {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.IntegrationError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.IntegrationError()
        value.errorCode = try reader["ErrorCode"].readIfPresent() ?? ""
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.RedshiftIdcApplication {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.RedshiftIdcApplication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.RedshiftIdcApplication()
        value.idcInstanceArn = try reader["IdcInstanceArn"].readIfPresent()
        value.redshiftIdcApplicationName = try reader["RedshiftIdcApplicationName"].readIfPresent()
        value.redshiftIdcApplicationArn = try reader["RedshiftIdcApplicationArn"].readIfPresent()
        value.identityNamespace = try reader["IdentityNamespace"].readIfPresent()
        value.idcDisplayName = try reader["IdcDisplayName"].readIfPresent()
        value.iamRoleArn = try reader["IamRoleArn"].readIfPresent()
        value.idcManagedApplicationArn = try reader["IdcManagedApplicationArn"].readIfPresent()
        value.idcOnboardStatus = try reader["IdcOnboardStatus"].readIfPresent()
        value.authorizedTokenIssuerList = try reader["AuthorizedTokenIssuerList"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AuthorizedTokenIssuer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceIntegrations = try reader["ServiceIntegrations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ServiceIntegrationsUnion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ServiceIntegrationsUnion {

    static func write(value: RedshiftClientTypes.ServiceIntegrationsUnion?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        switch value {
            case let .lakeformation(lakeformation):
                try writer["LakeFormation"].writeList(lakeformation, memberWritingClosure: RedshiftClientTypes.LakeFormationScopeUnion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ServiceIntegrationsUnion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "LakeFormation":
                return .lakeformation(try reader["LakeFormation"].readList(memberReadingClosure: RedshiftClientTypes.LakeFormationScopeUnion.read(from:), memberNodeInfo: "member", isFlattened: false))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension RedshiftClientTypes.LakeFormationScopeUnion {

    static func write(value: RedshiftClientTypes.LakeFormationScopeUnion?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        switch value {
            case let .lakeformationquery(lakeformationquery):
                try writer["LakeFormationQuery"].write(lakeformationquery, with: RedshiftClientTypes.LakeFormationQuery.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.LakeFormationScopeUnion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "LakeFormationQuery":
                return .lakeformationquery(try reader["LakeFormationQuery"].read(with: RedshiftClientTypes.LakeFormationQuery.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension RedshiftClientTypes.LakeFormationQuery {

    static func write(value: RedshiftClientTypes.LakeFormationQuery?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Authorization"].write(value.authorization)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.LakeFormationQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.LakeFormationQuery()
        value.authorization = try reader["Authorization"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension RedshiftClientTypes.AuthorizedTokenIssuer {

    static func write(value: RedshiftClientTypes.AuthorizedTokenIssuer?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthorizedAudiencesList"].writeList(value.authorizedAudiencesList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrustedTokenIssuerArn"].write(value.trustedTokenIssuerArn)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AuthorizedTokenIssuer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AuthorizedTokenIssuer()
        value.trustedTokenIssuerArn = try reader["TrustedTokenIssuerArn"].readIfPresent()
        value.authorizedAudiencesList = try reader["AuthorizedAudiencesList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ScheduledActionType {

    static func write(value: RedshiftClientTypes.ScheduledActionType?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["PauseCluster"].write(value.pauseCluster, with: RedshiftClientTypes.PauseClusterMessage.write(value:to:))
        try writer["ResizeCluster"].write(value.resizeCluster, with: RedshiftClientTypes.ResizeClusterMessage.write(value:to:))
        try writer["ResumeCluster"].write(value.resumeCluster, with: RedshiftClientTypes.ResumeClusterMessage.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ScheduledActionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ScheduledActionType()
        value.resizeCluster = try reader["ResizeCluster"].readIfPresent(with: RedshiftClientTypes.ResizeClusterMessage.read(from:))
        value.pauseCluster = try reader["PauseCluster"].readIfPresent(with: RedshiftClientTypes.PauseClusterMessage.read(from:))
        value.resumeCluster = try reader["ResumeCluster"].readIfPresent(with: RedshiftClientTypes.ResumeClusterMessage.read(from:))
        return value
    }
}

extension RedshiftClientTypes.ResumeClusterMessage {

    static func write(value: RedshiftClientTypes.ResumeClusterMessage?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ResumeClusterMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ResumeClusterMessage()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent() ?? ""
        return value
    }
}

extension RedshiftClientTypes.PauseClusterMessage {

    static func write(value: RedshiftClientTypes.PauseClusterMessage?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.PauseClusterMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.PauseClusterMessage()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent() ?? ""
        return value
    }
}

extension RedshiftClientTypes.ResizeClusterMessage {

    static func write(value: RedshiftClientTypes.ResizeClusterMessage?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Classic"].write(value.classic)
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["ClusterType"].write(value.clusterType)
        try writer["NodeType"].write(value.nodeType)
        try writer["NumberOfNodes"].write(value.numberOfNodes)
        try writer["ReservedNodeId"].write(value.reservedNodeId)
        try writer["TargetReservedNodeOfferingId"].write(value.targetReservedNodeOfferingId)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ResizeClusterMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ResizeClusterMessage()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent() ?? ""
        value.clusterType = try reader["ClusterType"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
        value.classic = try reader["Classic"].readIfPresent()
        value.reservedNodeId = try reader["ReservedNodeId"].readIfPresent()
        value.targetReservedNodeOfferingId = try reader["TargetReservedNodeOfferingId"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.SnapshotCopyGrant {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.SnapshotCopyGrant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.SnapshotCopyGrant()
        value.snapshotCopyGrantName = try reader["SnapshotCopyGrantName"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ClusterAssociatedToSchedule {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterAssociatedToSchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterAssociatedToSchedule()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.scheduleAssociationState = try reader["ScheduleAssociationState"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.AccountAttribute {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AccountAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AccountAttribute()
        value.attributeName = try reader["AttributeName"].readIfPresent()
        value.attributeValues = try reader["AttributeValues"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AttributeValueTarget.read(from:), memberNodeInfo: "AttributeValueTarget", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.AttributeValueTarget {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AttributeValueTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AttributeValueTarget()
        value.attributeValue = try reader["AttributeValue"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.AuthenticationProfile {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.AuthenticationProfile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.AuthenticationProfile()
        value.authenticationProfileName = try reader["AuthenticationProfileName"].readIfPresent()
        value.authenticationProfileContent = try reader["AuthenticationProfileContent"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterDbRevision {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterDbRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterDbRevision()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.currentDatabaseRevision = try reader["CurrentDatabaseRevision"].readIfPresent()
        value.databaseRevisionReleaseDate = try reader["DatabaseRevisionReleaseDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.revisionTargets = try reader["RevisionTargets"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RevisionTarget.read(from:), memberNodeInfo: "RevisionTarget", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.RevisionTarget {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.RevisionTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.RevisionTarget()
        value.databaseRevision = try reader["DatabaseRevision"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.databaseRevisionReleaseDate = try reader["DatabaseRevisionReleaseDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension RedshiftClientTypes.Parameter {

    static func write(value: RedshiftClientTypes.Parameter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllowedValues"].write(value.allowedValues)
        try writer["ApplyType"].write(value.applyType)
        try writer["DataType"].write(value.dataType)
        try writer["Description"].write(value.description)
        try writer["IsModifiable"].write(value.isModifiable)
        try writer["MinimumEngineVersion"].write(value.minimumEngineVersion)
        try writer["ParameterName"].write(value.parameterName)
        try writer["ParameterValue"].write(value.parameterValue)
        try writer["Source"].write(value.source)
    }

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Parameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Parameter()
        value.parameterName = try reader["ParameterName"].readIfPresent()
        value.parameterValue = try reader["ParameterValue"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.source = try reader["Source"].readIfPresent()
        value.dataType = try reader["DataType"].readIfPresent()
        value.allowedValues = try reader["AllowedValues"].readIfPresent()
        value.applyType = try reader["ApplyType"].readIfPresent()
        value.isModifiable = try reader["IsModifiable"].readIfPresent()
        value.minimumEngineVersion = try reader["MinimumEngineVersion"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.MaintenanceTrack {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.MaintenanceTrack {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.MaintenanceTrack()
        value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
        value.databaseVersion = try reader["DatabaseVersion"].readIfPresent()
        value.updateTargets = try reader["UpdateTargets"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.UpdateTarget.read(from:), memberNodeInfo: "UpdateTarget", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.UpdateTarget {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.UpdateTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.UpdateTarget()
        value.maintenanceTrackName = try reader["MaintenanceTrackName"].readIfPresent()
        value.databaseVersion = try reader["DatabaseVersion"].readIfPresent()
        value.supportedOperations = try reader["SupportedOperations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.SupportedOperation.read(from:), memberNodeInfo: "SupportedOperation", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.SupportedOperation {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.SupportedOperation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.SupportedOperation()
        value.operationName = try reader["OperationName"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ClusterVersion {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ClusterVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ClusterVersion()
        value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
        value.clusterParameterGroupFamily = try reader["ClusterParameterGroupFamily"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.Association {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Association {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Association()
        value.customDomainCertificateArn = try reader["CustomDomainCertificateArn"].readIfPresent()
        value.customDomainCertificateExpiryDate = try reader["CustomDomainCertificateExpiryDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.certificateAssociations = try reader["CertificateAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.CertificateAssociation.read(from:), memberNodeInfo: "CertificateAssociation", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.CertificateAssociation {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.CertificateAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.CertificateAssociation()
        value.customDomainName = try reader["CustomDomainName"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.DataShare {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.DataShare {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.DataShare()
        value.dataShareArn = try reader["DataShareArn"].readIfPresent()
        value.producerArn = try reader["ProducerArn"].readIfPresent()
        value.allowPubliclyAccessibleConsumers = try reader["AllowPubliclyAccessibleConsumers"].readIfPresent()
        value.dataShareAssociations = try reader["DataShareAssociations"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.DataShareAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedBy = try reader["ManagedBy"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.DefaultClusterParameters {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.DefaultClusterParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.DefaultClusterParameters()
        value.parameterGroupFamily = try reader["ParameterGroupFamily"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Parameter.read(from:), memberNodeInfo: "Parameter", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.EndpointAccess {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.EndpointAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.EndpointAccess()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.resourceOwner = try reader["ResourceOwner"].readIfPresent()
        value.subnetGroupName = try reader["SubnetGroupName"].readIfPresent()
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.endpointCreateTime = try reader["EndpointCreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.port = try reader["Port"].readIfPresent()
        value.address = try reader["Address"].readIfPresent()
        value.vpcSecurityGroups = try reader["VpcSecurityGroups"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.VpcSecurityGroupMembership.read(from:), memberNodeInfo: "VpcSecurityGroup", isFlattened: false)
        value.vpcEndpoint = try reader["VpcEndpoint"].readIfPresent(with: RedshiftClientTypes.VpcEndpoint.read(from:))
        return value
    }
}

extension RedshiftClientTypes.EndpointAuthorization {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.EndpointAuthorization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.EndpointAuthorization()
        value.grantor = try reader["Grantor"].readIfPresent()
        value.grantee = try reader["Grantee"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.authorizeTime = try reader["AuthorizeTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.clusterStatus = try reader["ClusterStatus"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.allowedAllVPCs = try reader["AllowedAllVPCs"].readIfPresent()
        value.allowedVPCs = try reader["AllowedVPCs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "VpcIdentifier", isFlattened: false)
        value.endpointCount = try reader["EndpointCount"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.EventCategoriesMap {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.EventCategoriesMap {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.EventCategoriesMap()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.EventInfoMap.read(from:), memberNodeInfo: "EventInfoMap", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.EventInfoMap {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.EventInfoMap {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.EventInfoMap()
        value.eventId = try reader["EventId"].readIfPresent()
        value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "EventCategory", isFlattened: false)
        value.eventDescription = try reader["EventDescription"].readIfPresent()
        value.severity = try reader["Severity"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.Event {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Event {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Event()
        value.sourceIdentifier = try reader["SourceIdentifier"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.eventCategories = try reader["EventCategories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "EventCategory", isFlattened: false)
        value.severity = try reader["Severity"].readIfPresent()
        value.date = try reader["Date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.eventId = try reader["EventId"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.InboundIntegration {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.InboundIntegration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.InboundIntegration()
        value.integrationArn = try reader["IntegrationArn"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.targetArn = try reader["TargetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IntegrationError.read(from:), memberNodeInfo: "IntegrationError", isFlattened: false)
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension RedshiftClientTypes.Integration {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Integration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Integration()
        value.integrationArn = try reader["IntegrationArn"].readIfPresent()
        value.integrationName = try reader["IntegrationName"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.targetArn = try reader["TargetArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.IntegrationError.read(from:), memberNodeInfo: "IntegrationError", isFlattened: false)
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["Description"].readIfPresent()
        value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
        value.additionalEncryptionContext = try reader["AdditionalEncryptionContext"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.NodeConfigurationOption {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.NodeConfigurationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.NodeConfigurationOption()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.numberOfNodes = try reader["NumberOfNodes"].readIfPresent()
        value.estimatedDiskUtilizationPercent = try reader["EstimatedDiskUtilizationPercent"].readIfPresent()
        value.mode = try reader["Mode"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.OrderableClusterOption {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.OrderableClusterOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.OrderableClusterOption()
        value.clusterVersion = try reader["ClusterVersion"].readIfPresent()
        value.clusterType = try reader["ClusterType"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.AvailabilityZone.read(from:), memberNodeInfo: "AvailabilityZone", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.PartnerIntegrationInfo {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.PartnerIntegrationInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.PartnerIntegrationInfo()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.partnerName = try reader["PartnerName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension RedshiftClientTypes.ReservedNodeOffering {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ReservedNodeOffering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ReservedNodeOffering()
        value.reservedNodeOfferingId = try reader["ReservedNodeOfferingId"].readIfPresent()
        value.nodeType = try reader["NodeType"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent()
        value.fixedPrice = try reader["FixedPrice"].readIfPresent()
        value.usagePrice = try reader["UsagePrice"].readIfPresent()
        value.currencyCode = try reader["CurrencyCode"].readIfPresent()
        value.offeringType = try reader["OfferingType"].readIfPresent()
        value.recurringCharges = try reader["RecurringCharges"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RecurringCharge.read(from:), memberNodeInfo: "RecurringCharge", isFlattened: false)
        value.reservedNodeOfferingType = try reader["ReservedNodeOfferingType"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.ScheduledAction {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ScheduledAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ScheduledAction()
        value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
        value.targetAction = try reader["TargetAction"].readIfPresent(with: RedshiftClientTypes.ScheduledActionType.read(from:))
        value.schedule = try reader["Schedule"].readIfPresent()
        value.iamRole = try reader["IamRole"].readIfPresent()
        value.scheduledActionDescription = try reader["ScheduledActionDescription"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "ScheduledActionTime", isFlattened: false)
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension RedshiftClientTypes.SnapshotSchedule {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.SnapshotSchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.SnapshotSchedule()
        value.scheduleDefinitions = try reader["ScheduleDefinitions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "ScheduleDefinition", isFlattened: false)
        value.scheduleIdentifier = try reader["ScheduleIdentifier"].readIfPresent()
        value.scheduleDescription = try reader["ScheduleDescription"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        value.nextInvocations = try reader["NextInvocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "SnapshotTime", isFlattened: false)
        value.associatedClusterCount = try reader["AssociatedClusterCount"].readIfPresent()
        value.associatedClusters = try reader["AssociatedClusters"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ClusterAssociatedToSchedule.read(from:), memberNodeInfo: "ClusterAssociatedToSchedule", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.TableRestoreStatus {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.TableRestoreStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.TableRestoreStatus()
        value.tableRestoreRequestId = try reader["TableRestoreRequestId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.requestTime = try reader["RequestTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.progressInMegaBytes = try reader["ProgressInMegaBytes"].readIfPresent()
        value.totalDataInMegaBytes = try reader["TotalDataInMegaBytes"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.snapshotIdentifier = try reader["SnapshotIdentifier"].readIfPresent()
        value.sourceDatabaseName = try reader["SourceDatabaseName"].readIfPresent()
        value.sourceSchemaName = try reader["SourceSchemaName"].readIfPresent()
        value.sourceTableName = try reader["SourceTableName"].readIfPresent()
        value.targetDatabaseName = try reader["TargetDatabaseName"].readIfPresent()
        value.targetSchemaName = try reader["TargetSchemaName"].readIfPresent()
        value.newTableName = try reader["NewTableName"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.TaggedResource {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.TaggedResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.TaggedResource()
        value.tag = try reader["Tag"].readIfPresent(with: RedshiftClientTypes.Tag.read(from:))
        value.resourceName = try reader["ResourceName"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.UsageLimit {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.UsageLimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.UsageLimit()
        value.usageLimitId = try reader["UsageLimitId"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.featureType = try reader["FeatureType"].readIfPresent()
        value.limitType = try reader["LimitType"].readIfPresent()
        value.amount = try reader["Amount"].readIfPresent()
        value.period = try reader["Period"].readIfPresent()
        value.breachAction = try reader["BreachAction"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ReservedNodeConfigurationOption {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ReservedNodeConfigurationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ReservedNodeConfigurationOption()
        value.sourceReservedNode = try reader["SourceReservedNode"].readIfPresent(with: RedshiftClientTypes.ReservedNode.read(from:))
        value.targetReservedNodeCount = try reader["TargetReservedNodeCount"].readIfPresent()
        value.targetReservedNodeOffering = try reader["TargetReservedNodeOffering"].readIfPresent(with: RedshiftClientTypes.ReservedNodeOffering.read(from:))
        return value
    }
}

extension RedshiftClientTypes.ResourcePolicy {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ResourcePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ResourcePolicy()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.Recommendation {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.Recommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.Recommendation()
        value.id = try reader["Id"].readIfPresent()
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent()
        value.namespaceArn = try reader["NamespaceArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.recommendationType = try reader["RecommendationType"].readIfPresent()
        value.title = try reader["Title"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.observation = try reader["Observation"].readIfPresent()
        value.impactRanking = try reader["ImpactRanking"].readIfPresent()
        value.recommendationText = try reader["RecommendationText"].readIfPresent()
        value.recommendedActions = try reader["RecommendedActions"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.RecommendedAction.read(from:), memberNodeInfo: "RecommendedAction", isFlattened: false)
        value.referenceLinks = try reader["ReferenceLinks"].readListIfPresent(memberReadingClosure: RedshiftClientTypes.ReferenceLink.read(from:), memberNodeInfo: "ReferenceLink", isFlattened: false)
        return value
    }
}

extension RedshiftClientTypes.ReferenceLink {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.ReferenceLink {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.ReferenceLink()
        value.text = try reader["Text"].readIfPresent()
        value.link = try reader["Link"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.RecommendedAction {

    static func read(from reader: SmithyXML.Reader) throws -> RedshiftClientTypes.RecommendedAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = RedshiftClientTypes.RecommendedAction()
        value.text = try reader["Text"].readIfPresent()
        value.database = try reader["Database"].readIfPresent()
        value.command = try reader["Command"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension RedshiftClientTypes.DeleteClusterSnapshotMessage {

    static func write(value: RedshiftClientTypes.DeleteClusterSnapshotMessage?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["SnapshotClusterIdentifier"].write(value.snapshotClusterIdentifier)
        try writer["SnapshotIdentifier"].write(value.snapshotIdentifier)
    }
}

extension RedshiftClientTypes.SnapshotSortingEntity {

    static func write(value: RedshiftClientTypes.SnapshotSortingEntity?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Attribute"].write(value.attribute)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension RedshiftClientTypes.DescribeIntegrationsFilter {

    static func write(value: RedshiftClientTypes.DescribeIntegrationsFilter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "Value", isFlattened: false)
    }
}

extension RedshiftClientTypes.NodeConfigurationOptionsFilter {

    static func write(value: RedshiftClientTypes.NodeConfigurationOptionsFilter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Operator"].write(value.`operator`)
        try writer["Value"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "item", isFlattened: false)
    }
}

extension RedshiftClientTypes.ScheduledActionFilter {

    static func write(value: RedshiftClientTypes.ScheduledActionFilter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "item", isFlattened: false)
    }
}

public enum RedshiftClientTypes {}
