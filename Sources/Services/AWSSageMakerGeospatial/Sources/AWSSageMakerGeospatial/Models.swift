//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ByteStream
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SageMakerGeospatialClientTypes {

    public enum AlgorithmNameCloudRemoval: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// INTERPOLATION
        case interpolation
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmNameCloudRemoval] {
            return [
                .interpolation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interpolation: return "INTERPOLATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum AlgorithmNameGeoMosaic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// AVERAGE
        case average
        /// BILINEAR
        case bilinear
        /// CUBIC
        case cubic
        /// CUBICSPLINE
        case cubicspline
        /// LANCZOS
        case lanczos
        /// MAX
        case max
        /// MED
        case med
        /// MIN
        case min
        /// MODE
        case mode
        /// NEAR
        case near
        /// Q1
        case q1
        /// Q3
        case q3
        /// RMS
        case rms
        /// SUM
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmNameGeoMosaic] {
            return [
                .average,
                .bilinear,
                .cubic,
                .cubicspline,
                .lanczos,
                .max,
                .med,
                .min,
                .mode,
                .near,
                .q1,
                .q3,
                .rms,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .bilinear: return "BILINEAR"
            case .cubic: return "CUBIC"
            case .cubicspline: return "CUBICSPLINE"
            case .lanczos: return "LANCZOS"
            case .max: return "MAX"
            case .med: return "MED"
            case .min: return "MIN"
            case .mode: return "MODE"
            case .near: return "NEAR"
            case .q1: return "Q1"
            case .q3: return "Q3"
            case .rms: return "RMS"
            case .sum: return "SUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum AlgorithmNameResampling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// AVERAGE
        case average
        /// BILINEAR
        case bilinear
        /// CUBIC
        case cubic
        /// CUBICSPLINE
        case cubicspline
        /// LANCZOS
        case lanczos
        /// MAX
        case max
        /// MED
        case med
        /// MIN
        case min
        /// MODE
        case mode
        /// NEAR
        case near
        /// Q1
        case q1
        /// Q3
        case q3
        /// RMS
        case rms
        /// SUM
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmNameResampling] {
            return [
                .average,
                .bilinear,
                .cubic,
                .cubicspline,
                .lanczos,
                .max,
                .med,
                .min,
                .mode,
                .near,
                .q1,
                .q3,
                .rms,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .bilinear: return "BILINEAR"
            case .cubic: return "CUBIC"
            case .cubicspline: return "CUBICSPLINE"
            case .lanczos: return "LANCZOS"
            case .max: return "MAX"
            case .med: return "MED"
            case .min: return "MIN"
            case .mode: return "MODE"
            case .near: return "NEAR"
            case .q1: return "Q1"
            case .q3: return "Q3"
            case .rms: return "RMS"
            case .sum: return "SUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing Polygon Geometry based on the [GeoJson spec](https://www.rfc-editor.org/rfc/rfc7946#section-3.1.6).
    public struct MultiPolygonGeometryInput: Swift.Sendable {
        /// The coordinates of the multipolygon geometry.
        /// This member is required.
        public var coordinates: [[[[Swift.Double]]]]?

        public init(
            coordinates: [[[[Swift.Double]]]]? = nil
        )
        {
            self.coordinates = coordinates
        }
    }
}

extension SageMakerGeospatialClientTypes.MultiPolygonGeometryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MultiPolygonGeometryInput(coordinates: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing Polygon Geometry based on the [GeoJson spec](https://www.rfc-editor.org/rfc/rfc7946#section-3.1.6).
    public struct PolygonGeometryInput: Swift.Sendable {
        /// Coordinates representing a Polygon based on the [GeoJson spec](https://www.rfc-editor.org/rfc/rfc7946#section-3.1.6).
        /// This member is required.
        public var coordinates: [[[Swift.Double]]]?

        public init(
            coordinates: [[[Swift.Double]]]? = nil
        )
        {
            self.coordinates = coordinates
        }
    }
}

extension SageMakerGeospatialClientTypes.PolygonGeometryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolygonGeometryInput(coordinates: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// A GeoJSON object representing the geographic extent in the coordinate space.
    public enum AreaOfInterestGeometry: Swift.Sendable {
        /// The structure representing Polygon Geometry.
        case polygongeometry(SageMakerGeospatialClientTypes.PolygonGeometryInput)
        /// The structure representing the MultiPolygon Geometry.
        case multipolygongeometry(SageMakerGeospatialClientTypes.MultiPolygonGeometryInput)
        case sdkUnknown(Swift.String)
    }
}

extension SageMakerGeospatialClientTypes {

    /// The geographic extent of the Earth Observation job.
    public enum AreaOfInterest: Swift.Sendable {
        /// A GeoJSON object representing the geographic extent in the coordinate space.
        case areaofinterestgeometry(SageMakerGeospatialClientTypes.AreaOfInterestGeometry)
        case sdkUnknown(Swift.String)
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure containing the asset properties.
    public struct AssetValue: Swift.Sendable {
        /// Link to the asset object.
        public var href: Swift.String?

        public init(
            href: Swift.String? = nil
        )
        {
            self.href = href
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum OutputType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// FLOAT32
        case float32
        /// FLOAT64
        case float64
        /// INT16
        case int16
        /// INT32
        case int32
        /// UINT16
        case uint16
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputType] {
            return [
                .float32,
                .float64,
                .int16,
                .int32,
                .uint16
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .float32: return "FLOAT32"
            case .float64: return "FLOAT64"
            case .int16: return "INT16"
            case .int32: return "INT32"
            case .uint16: return "UINT16"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Represents an arithmetic operation to compute spectral index.
    public struct Operation: Swift.Sendable {
        /// Textual representation of the math operation; Equation used to compute the spectral index.
        /// This member is required.
        public var equation: Swift.String?
        /// The name of the operation.
        /// This member is required.
        public var name: Swift.String?
        /// The type of the operation.
        public var outputType: SageMakerGeospatialClientTypes.OutputType?

        public init(
            equation: Swift.String? = nil,
            name: Swift.String? = nil,
            outputType: SageMakerGeospatialClientTypes.OutputType? = nil
        )
        {
            self.equation = equation
            self.name = name
            self.outputType = outputType
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Input object defining the custom BandMath indices to compute.
    public struct CustomIndicesInput: Swift.Sendable {
        /// A list of BandMath indices to compute.
        public var operations: [SageMakerGeospatialClientTypes.Operation]?

        public init(
            operations: [SageMakerGeospatialClientTypes.Operation]? = nil
        )
        {
            self.operations = operations
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Input structure for the BandMath operation type. Defines Predefined and CustomIndices to be computed using BandMath.
    public struct BandMathConfigInput: Swift.Sendable {
        /// CustomIndices that are computed.
        public var customIndices: SageMakerGeospatialClientTypes.CustomIndicesInput?
        /// One or many of the supported predefined indices to compute. Allowed values: NDVI, EVI2, MSAVI, NDWI, NDMI, NDSI, and WDRVI.
        public var predefinedIndices: [Swift.String]?

        public init(
            customIndices: SageMakerGeospatialClientTypes.CustomIndicesInput? = nil,
            predefinedIndices: [Swift.String]? = nil
        )
        {
            self.customIndices = customIndices
            self.predefinedIndices = predefinedIndices
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Input structure for CloudMasking operation type.
    public struct CloudMaskingConfigInput: Swift.Sendable {

        public init() { }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Input structure for Cloud Removal Operation type
    public struct CloudRemovalConfigInput: Swift.Sendable {
        /// The name of the algorithm used for cloud removal.
        public var algorithmName: SageMakerGeospatialClientTypes.AlgorithmNameCloudRemoval?
        /// The interpolation value you provide for cloud removal.
        public var interpolationValue: Swift.String?
        /// TargetBands to be returned in the output of CloudRemoval operation.
        public var targetBands: [Swift.String]?

        public init(
            algorithmName: SageMakerGeospatialClientTypes.AlgorithmNameCloudRemoval? = nil,
            interpolationValue: Swift.String? = nil,
            targetBands: [Swift.String]? = nil
        )
        {
            self.algorithmName = algorithmName
            self.interpolationValue = interpolationValue
            self.targetBands = targetBands
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum ComparisonOperator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// EQUALS
        case equals
        /// NOT_EQUALS
        case notEquals
        /// STARTS_WITH
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .equals,
                .notEquals,
                .startsWith
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .equals: return "EQUALS"
            case .notEquals: return "NOT_EQUALS"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Identifier of the resource affected.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing the filters supported by a RasterDataCollection.
    public struct Filter: Swift.Sendable {
        /// The maximum value of the filter.
        public var maximum: Swift.Float?
        /// The minimum value of the filter.
        public var minimum: Swift.Float?
        /// The name of the filter.
        /// This member is required.
        public var name: Swift.String?
        /// The type of the filter being used.
        /// This member is required.
        public var type: Swift.String?

        public init(
            maximum: Swift.Float? = nil,
            minimum: Swift.Float? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
            self.name = name
            self.type = type
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum DataCollectionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// PREMIUM
        case premium
        /// PUBLIC
        case `public`
        /// USER
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [DataCollectionType] {
            return [
                .premium,
                .public,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .premium: return "PREMIUM"
            case .public: return "PUBLIC"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Response object containing details for a specific RasterDataCollection.
    public struct RasterDataCollectionMetadata: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the raster data collection.
        /// This member is required.
        public var arn: Swift.String?
        /// A description of the raster data collection.
        /// This member is required.
        public var description: Swift.String?
        /// The description URL of the raster data collection.
        public var descriptionPageUrl: Swift.String?
        /// The name of the raster data collection.
        /// This member is required.
        public var name: Swift.String?
        /// The list of filters supported by the raster data collection.
        /// This member is required.
        public var supportedFilters: [SageMakerGeospatialClientTypes.Filter]?
        /// Each tag consists of a key and a value.
        public var tags: [Swift.String: Swift.String]?
        /// The type of raster data collection.
        /// This member is required.
        public var type: SageMakerGeospatialClientTypes.DataCollectionType?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            descriptionPageUrl: Swift.String? = nil,
            name: Swift.String? = nil,
            supportedFilters: [SageMakerGeospatialClientTypes.Filter]? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: SageMakerGeospatialClientTypes.DataCollectionType? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.descriptionPageUrl = descriptionPageUrl
            self.name = name
            self.supportedFilters = supportedFilters
            self.tags = tags
            self.type = type
        }
    }
}

/// The request processing has failed because of an unknown error, exception, or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        ///
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
    }
}

/// The request references a resource which does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Identifier of the resource that was not found.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        ///
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
    }
}

/// The input fails to satisfy the constraints specified by an Amazon Web Services service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        ///
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
    }
}

public struct DeleteEarthObservationJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Earth Observation job being deleted.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteEarthObservationJobOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteVectorEnrichmentJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job being deleted.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct DeleteVectorEnrichmentJobOutput: Swift.Sendable {

    public init() { }
}

/// You have exceeded the service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Identifier of the resource affected.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure containing the Amazon S3 path to export the Earth Observation job output.
    public struct ExportS3DataInput: Swift.Sendable {
        /// The Key Management Service key ID for server-side encryption.
        public var kmsKeyId: Swift.String?
        /// The URL to the Amazon S3 data input.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The response structure for an OutputConfig returned by an ExportEarthObservationJob.
    public struct OutputConfigInput: Swift.Sendable {
        /// Path to Amazon S3 storage location for the output configuration file.
        /// This member is required.
        public var s3Data: SageMakerGeospatialClientTypes.ExportS3DataInput?

        public init(
            s3Data: SageMakerGeospatialClientTypes.ExportS3DataInput? = nil
        )
        {
            self.s3Data = s3Data
        }
    }
}

public struct ExportEarthObservationJobInput: Swift.Sendable {
    /// The input Amazon Resource Name (ARN) of the Earth Observation job being exported.
    /// This member is required.
    public var arn: Swift.String?
    /// A unique token that guarantees that the call to this API is idempotent.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// The source images provided to the Earth Observation job being exported.
    public var exportSourceImages: Swift.Bool?
    /// An object containing information about the output file.
    /// This member is required.
    public var outputConfig: SageMakerGeospatialClientTypes.OutputConfigInput?

    public init(
        arn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        exportSourceImages: Swift.Bool? = nil,
        outputConfig: SageMakerGeospatialClientTypes.OutputConfigInput? = nil
    )
    {
        self.arn = arn
        self.clientToken = clientToken
        self.executionRoleArn = executionRoleArn
        self.exportSourceImages = exportSourceImages
        self.outputConfig = outputConfig
    }
}

extension SageMakerGeospatialClientTypes {

    public enum EarthObservationJobExportStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// FAILED
        case failed
        /// IN_PROGRESS
        case inProgress
        /// SUCCEEDED
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [EarthObservationJobExportStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ExportEarthObservationJobOutput: Swift.Sendable {
    /// The output Amazon Resource Name (ARN) of the Earth Observation job being exported.
    /// This member is required.
    public var arn: Swift.String?
    /// The creation time.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// The source images provided to the Earth Observation job being exported.
    public var exportSourceImages: Swift.Bool?
    /// The status of the results of the Earth Observation job being exported.
    /// This member is required.
    public var exportStatus: SageMakerGeospatialClientTypes.EarthObservationJobExportStatus?
    /// An object containing information about the output file.
    /// This member is required.
    public var outputConfig: SageMakerGeospatialClientTypes.OutputConfigInput?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        executionRoleArn: Swift.String? = nil,
        exportSourceImages: Swift.Bool? = nil,
        exportStatus: SageMakerGeospatialClientTypes.EarthObservationJobExportStatus? = nil,
        outputConfig: SageMakerGeospatialClientTypes.OutputConfigInput? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.executionRoleArn = executionRoleArn
        self.exportSourceImages = exportSourceImages
        self.exportStatus = exportStatus
        self.outputConfig = outputConfig
    }
}

public struct GetEarthObservationJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Earth Observation job.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

extension SageMakerGeospatialClientTypes {

    public enum EarthObservationJobErrorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// CLIENT_ERROR
        case clientError
        /// SERVER_ERROR
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [EarthObservationJobErrorType] {
            return [
                .clientError,
                .serverError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clientError: return "CLIENT_ERROR"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing the errors in an EarthObservationJob.
    public struct EarthObservationJobErrorDetails: Swift.Sendable {
        /// A detailed message describing the error in an Earth Observation job.
        public var message: Swift.String?
        /// The type of error in an Earth Observation job.
        public var type: SageMakerGeospatialClientTypes.EarthObservationJobErrorType?

        public init(
            message: Swift.String? = nil,
            type: SageMakerGeospatialClientTypes.EarthObservationJobErrorType? = nil
        )
        {
            self.message = message
            self.type = type
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum ExportErrorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// CLIENT_ERROR
        case clientError
        /// SERVER_ERROR
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportErrorType] {
            return [
                .clientError,
                .serverError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clientError: return "CLIENT_ERROR"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing the errors in an export EarthObservationJob operation.
    public struct ExportErrorDetailsOutput: Swift.Sendable {
        /// A detailed message describing the error in an export EarthObservationJob operation.
        public var message: Swift.String?
        /// The type of error in an export EarthObservationJob operation.
        public var type: SageMakerGeospatialClientTypes.ExportErrorType?

        public init(
            message: Swift.String? = nil,
            type: SageMakerGeospatialClientTypes.ExportErrorType? = nil
        )
        {
            self.message = message
            self.type = type
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure for returning the export error details in a GetEarthObservationJob.
    public struct ExportErrorDetails: Swift.Sendable {
        /// The structure for returning the export error details while exporting results of an Earth Observation job.
        public var exportResults: SageMakerGeospatialClientTypes.ExportErrorDetailsOutput?
        /// The structure for returning the export error details while exporting the source images of an Earth Observation job.
        public var exportSourceImages: SageMakerGeospatialClientTypes.ExportErrorDetailsOutput?

        public init(
            exportResults: SageMakerGeospatialClientTypes.ExportErrorDetailsOutput? = nil,
            exportSourceImages: SageMakerGeospatialClientTypes.ExportErrorDetailsOutput? = nil
        )
        {
            self.exportResults = exportResults
            self.exportSourceImages = exportSourceImages
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum LogicalOperator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// AND
        case and
        case sdkUnknown(Swift.String)

        public static var allCases: [LogicalOperator] {
            return [
                .and
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .and: return "AND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing the EoCloudCover filter.
    public struct EoCloudCoverInput: Swift.Sendable {
        /// Lower bound for EoCloudCover.
        /// This member is required.
        public var lowerBound: Swift.Float?
        /// Upper bound for EoCloudCover.
        /// This member is required.
        public var upperBound: Swift.Float?

        public init(
            lowerBound: Swift.Float? = nil,
            upperBound: Swift.Float? = nil
        )
        {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing Land Cloud Cover property for Landsat data collection.
    public struct LandsatCloudCoverLandInput: Swift.Sendable {
        /// The minimum value for Land Cloud Cover property filter. This will filter items having Land Cloud Cover greater than or equal to this value.
        /// This member is required.
        public var lowerBound: Swift.Float?
        /// The maximum value for Land Cloud Cover property filter. This will filter items having Land Cloud Cover less than or equal to this value.
        /// This member is required.
        public var upperBound: Swift.Float?

        public init(
            lowerBound: Swift.Float? = nil,
            upperBound: Swift.Float? = nil
        )
        {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for specifying Platform. Platform refers to the unique name of the specific platform the instrument is attached to. For satellites it is the name of the satellite, eg. landsat-8 (Landsat-8), sentinel-2a.
    public struct PlatformInput: Swift.Sendable {
        /// The ComparisonOperator to use with PlatformInput.
        public var comparisonOperator: SageMakerGeospatialClientTypes.ComparisonOperator?
        /// The value of the platform.
        /// This member is required.
        public var value: Swift.String?

        public init(
            comparisonOperator: SageMakerGeospatialClientTypes.ComparisonOperator? = nil,
            value: Swift.String? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.value = value
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for specifying ViewOffNadir property filter. ViewOffNadir refers to the angle from the sensor between nadir (straight down) and the scene center. Measured in degrees (0-90).
    public struct ViewOffNadirInput: Swift.Sendable {
        /// The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value.
        /// This member is required.
        public var lowerBound: Swift.Float?
        /// The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value.
        /// This member is required.
        public var upperBound: Swift.Float?

        public init(
            lowerBound: Swift.Float? = nil,
            upperBound: Swift.Float? = nil
        )
        {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for specifying ViewSunAzimuth property filter. ViewSunAzimuth refers to the Sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun. Measured clockwise in degrees (0-360).
    public struct ViewSunAzimuthInput: Swift.Sendable {
        /// The minimum value for ViewSunAzimuth property filter. This filters items having ViewSunAzimuth greater than or equal to this value.
        /// This member is required.
        public var lowerBound: Swift.Float?
        /// The maximum value for ViewSunAzimuth property filter. This filters items having ViewSunAzimuth lesser than or equal to this value.
        /// This member is required.
        public var upperBound: Swift.Float?

        public init(
            lowerBound: Swift.Float? = nil,
            upperBound: Swift.Float? = nil
        )
        {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for specifying ViewSunElevation angle property filter.
    public struct ViewSunElevationInput: Swift.Sendable {
        /// The lower bound to view the sun elevation.
        /// This member is required.
        public var lowerBound: Swift.Float?
        /// The upper bound to view the sun elevation.
        /// This member is required.
        public var upperBound: Swift.Float?

        public init(
            lowerBound: Swift.Float? = nil,
            upperBound: Swift.Float? = nil
        )
        {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Represents a single searchable property to search on.
    public enum Property: Swift.Sendable {
        /// The structure representing EoCloudCover property filter containing a lower bound and upper bound.
        case eocloudcover(SageMakerGeospatialClientTypes.EoCloudCoverInput)
        /// The structure representing ViewOffNadir property filter containing a lower bound and upper bound.
        case viewoffnadir(SageMakerGeospatialClientTypes.ViewOffNadirInput)
        /// The structure representing ViewSunAzimuth property filter containing a lower bound and upper bound.
        case viewsunazimuth(SageMakerGeospatialClientTypes.ViewSunAzimuthInput)
        /// The structure representing ViewSunElevation property filter containing a lower bound and upper bound.
        case viewsunelevation(SageMakerGeospatialClientTypes.ViewSunElevationInput)
        /// The structure representing Platform property filter consisting of value and comparison operator.
        case platform(SageMakerGeospatialClientTypes.PlatformInput)
        /// The structure representing Land Cloud Cover property filter for Landsat collection containing a lower bound and upper bound.
        case landsatcloudcoverland(SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput)
        case sdkUnknown(Swift.String)
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing a single PropertyFilter.
    public struct PropertyFilter: Swift.Sendable {
        /// Represents a single property to match with when searching a raster data collection.
        /// This member is required.
        public var property: SageMakerGeospatialClientTypes.Property?

        public init(
            property: SageMakerGeospatialClientTypes.Property? = nil
        )
        {
            self.property = property
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// A list of PropertyFilter objects.
    public struct PropertyFilters: Swift.Sendable {
        /// The Logical Operator used to combine the Property Filters.
        public var logicalOperator: SageMakerGeospatialClientTypes.LogicalOperator?
        /// A list of Property Filters.
        public var properties: [SageMakerGeospatialClientTypes.PropertyFilter]?

        public init(
            logicalOperator: SageMakerGeospatialClientTypes.LogicalOperator? = nil,
            properties: [SageMakerGeospatialClientTypes.PropertyFilter]? = nil
        )
        {
            self.logicalOperator = logicalOperator
            self.properties = properties
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The output structure of the time range filter.
    public struct TimeRangeFilterOutput: Swift.Sendable {
        /// The ending time for the time range filter.
        /// This member is required.
        public var endTime: Foundation.Date?
        /// The starting time for the time range filter.
        /// This member is required.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }
}

extension SageMakerGeospatialClientTypes.TimeRangeFilterOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension SageMakerGeospatialClientTypes {

    /// The output structure contains the Raster Data Collection Query input along with some additional metadata.
    public struct RasterDataCollectionQueryOutput: Swift.Sendable {
        /// The Area of Interest used in the search.
        public var areaOfInterest: SageMakerGeospatialClientTypes.AreaOfInterest?
        /// Property filters used in the search.
        public var propertyFilters: SageMakerGeospatialClientTypes.PropertyFilters?
        /// The ARN of the Raster Data Collection against which the search is done.
        /// This member is required.
        public var rasterDataCollectionArn: Swift.String?
        /// The name of the raster data collection.
        /// This member is required.
        public var rasterDataCollectionName: Swift.String?
        /// The TimeRange filter used in the search.
        /// This member is required.
        public var timeRangeFilter: SageMakerGeospatialClientTypes.TimeRangeFilterOutput?

        public init(
            areaOfInterest: SageMakerGeospatialClientTypes.AreaOfInterest? = nil,
            propertyFilters: SageMakerGeospatialClientTypes.PropertyFilters? = nil,
            rasterDataCollectionArn: Swift.String? = nil,
            rasterDataCollectionName: Swift.String? = nil,
            timeRangeFilter: SageMakerGeospatialClientTypes.TimeRangeFilterOutput? = nil
        )
        {
            self.areaOfInterest = areaOfInterest
            self.propertyFilters = propertyFilters
            self.rasterDataCollectionArn = rasterDataCollectionArn
            self.rasterDataCollectionName = rasterDataCollectionName
            self.timeRangeFilter = timeRangeFilter
        }
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RasterDataCollectionQueryOutput(areaOfInterest: \(Swift.String(describing: areaOfInterest)), propertyFilters: \(Swift.String(describing: propertyFilters)), rasterDataCollectionArn: \(Swift.String(describing: rasterDataCollectionArn)), rasterDataCollectionName: \(Swift.String(describing: rasterDataCollectionName)), timeRangeFilter: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// The InputConfig for an EarthObservationJob response.
    public struct InputConfigOutput: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the previous Earth Observation job.
        public var previousEarthObservationJobArn: Swift.String?
        /// The structure representing the RasterDataCollection Query consisting of the Area of Interest, RasterDataCollectionArn, RasterDataCollectionName, TimeRange, and Property Filters.
        public var rasterDataCollectionQuery: SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput?

        public init(
            previousEarthObservationJobArn: Swift.String? = nil,
            rasterDataCollectionQuery: SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput? = nil
        )
        {
            self.previousEarthObservationJobArn = previousEarthObservationJobArn
            self.rasterDataCollectionQuery = rasterDataCollectionQuery
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// Input configuration information for the geomosaic.
    public struct GeoMosaicConfigInput: Swift.Sendable {
        /// The name of the algorithm being used for geomosaic.
        public var algorithmName: SageMakerGeospatialClientTypes.AlgorithmNameGeoMosaic?
        /// The target bands for geomosaic.
        public var targetBands: [Swift.String]?

        public init(
            algorithmName: SageMakerGeospatialClientTypes.AlgorithmNameGeoMosaic? = nil,
            targetBands: [Swift.String]? = nil
        )
        {
            self.algorithmName = algorithmName
            self.targetBands = targetBands
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for Land Cover Operation type.
    public struct LandCoverSegmentationConfigInput: Swift.Sendable {

        public init() { }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum Unit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// METERS
        case meters
        case sdkUnknown(Swift.String)

        public static var allCases: [Unit] {
            return [
                .meters
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .meters: return "METERS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The output resolution (in target georeferenced units) of the result of the operation
    public struct UserDefined: Swift.Sendable {
        /// The units for output resolution of the result.
        /// This member is required.
        public var unit: SageMakerGeospatialClientTypes.Unit?
        /// The value for output resolution of the result.
        /// This member is required.
        public var value: Swift.Float?

        public init(
            unit: SageMakerGeospatialClientTypes.Unit? = nil,
            value: Swift.Float? = nil
        )
        {
            self.unit = unit
            self.value = value
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// OutputResolution Configuration indicating the target resolution for the output of Resampling operation.
    public struct OutputResolutionResamplingInput: Swift.Sendable {
        /// User Defined Resolution for the output of Resampling operation defined by value and unit.
        /// This member is required.
        public var userDefined: SageMakerGeospatialClientTypes.UserDefined?

        public init(
            userDefined: SageMakerGeospatialClientTypes.UserDefined? = nil
        )
        {
            self.userDefined = userDefined
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing input for resampling operation.
    public struct ResamplingConfigInput: Swift.Sendable {
        /// The name of the algorithm used for resampling.
        public var algorithmName: SageMakerGeospatialClientTypes.AlgorithmNameResampling?
        /// The structure representing output resolution (in target georeferenced units) of the result of resampling operation.
        /// This member is required.
        public var outputResolution: SageMakerGeospatialClientTypes.OutputResolutionResamplingInput?
        /// Bands used in the operation. If no target bands are specified, it uses all bands available in the input.
        public var targetBands: [Swift.String]?

        public init(
            algorithmName: SageMakerGeospatialClientTypes.AlgorithmNameResampling? = nil,
            outputResolution: SageMakerGeospatialClientTypes.OutputResolutionResamplingInput? = nil,
            targetBands: [Swift.String]? = nil
        )
        {
            self.algorithmName = algorithmName
            self.outputResolution = outputResolution
            self.targetBands = targetBands
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum PredefinedResolution: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// AVERAGE
        case average
        /// HIGHEST
        case highest
        /// LOWEST
        case lowest
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedResolution] {
            return [
                .average,
                .highest,
                .lowest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "AVERAGE"
            case .highest: return "HIGHEST"
            case .lowest: return "LOWEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure representing Output Resolution for Stacking Operation.
    public struct OutputResolutionStackInput: Swift.Sendable {
        /// A string value representing Predefined Output Resolution for a stacking operation. Allowed values are HIGHEST, LOWEST, and AVERAGE.
        public var predefined: SageMakerGeospatialClientTypes.PredefinedResolution?
        /// The structure representing User Output Resolution for a Stacking operation defined as a value and unit.
        public var userDefined: SageMakerGeospatialClientTypes.UserDefined?

        public init(
            predefined: SageMakerGeospatialClientTypes.PredefinedResolution? = nil,
            userDefined: SageMakerGeospatialClientTypes.UserDefined? = nil
        )
        {
            self.predefined = predefined
            self.userDefined = userDefined
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for Stacking Operation.
    public struct StackConfigInput: Swift.Sendable {
        /// The structure representing output resolution (in target georeferenced units) of the result of stacking operation.
        public var outputResolution: SageMakerGeospatialClientTypes.OutputResolutionStackInput?
        /// A list of bands to be stacked in the specified order. When the parameter is not provided, all the available bands in the data collection are stacked in the alphabetical order of their asset names.
        public var targetBands: [Swift.String]?

        public init(
            outputResolution: SageMakerGeospatialClientTypes.OutputResolutionStackInput? = nil,
            targetBands: [Swift.String]? = nil
        )
        {
            self.outputResolution = outputResolution
            self.targetBands = targetBands
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum GroupBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// ALL
        case all
        /// YEARLY
        case yearly
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupBy] {
            return [
                .all,
                .yearly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .yearly: return "YEARLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum TemporalStatistics: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// MEAN
        case mean
        /// MEDIAN
        case median
        /// STANDARD_DEVIATION
        case standardDeviation
        case sdkUnknown(Swift.String)

        public static var allCases: [TemporalStatistics] {
            return [
                .mean,
                .median,
                .standardDeviation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mean: return "MEAN"
            case .median: return "MEDIAN"
            case .standardDeviation: return "STANDARD_DEVIATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing the configuration for Temporal Statistics operation.
    public struct TemporalStatisticsConfigInput: Swift.Sendable {
        /// The input for the temporal statistics grouping by time frequency option.
        public var groupBy: SageMakerGeospatialClientTypes.GroupBy?
        /// The list of the statistics method options.
        /// This member is required.
        public var statistics: [SageMakerGeospatialClientTypes.TemporalStatistics]?
        /// The list of target band names for the temporal statistic to calculate.
        public var targetBands: [Swift.String]?

        public init(
            groupBy: SageMakerGeospatialClientTypes.GroupBy? = nil,
            statistics: [SageMakerGeospatialClientTypes.TemporalStatistics]? = nil,
            targetBands: [Swift.String]? = nil
        )
        {
            self.groupBy = groupBy
            self.statistics = statistics
            self.targetBands = targetBands
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum ZonalStatistics: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// MAX
        case max
        /// MEAN
        case mean
        /// MEDIAN
        case median
        /// MIN
        case min
        /// STANDARD_DEVIATION
        case standardDeviation
        /// SUM
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [ZonalStatistics] {
            return [
                .max,
                .mean,
                .median,
                .min,
                .standardDeviation,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .max: return "MAX"
            case .mean: return "MEAN"
            case .median: return "MEDIAN"
            case .min: return "MIN"
            case .standardDeviation: return "STANDARD_DEVIATION"
            case .sum: return "SUM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing input configuration of ZonalStatistics operation.
    public struct ZonalStatisticsConfigInput: Swift.Sendable {
        /// List of zonal statistics to compute.
        /// This member is required.
        public var statistics: [SageMakerGeospatialClientTypes.ZonalStatistics]?
        /// Bands used in the operation. If no target bands are specified, it uses all bands available input.
        public var targetBands: [Swift.String]?
        /// The Amazon S3 path pointing to the GeoJSON containing the polygonal zones.
        /// This member is required.
        public var zoneS3Path: Swift.String?
        /// The Amazon Resource Name (ARN) or an ID of a Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to decrypt your output artifacts with Amazon S3 server-side encryption. The SageMaker execution role must have kms:GenerateDataKey permission. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:<region>:<account>:key/<key-id-12ab-34cd-56ef-1234567890ab>"
        ///
        ///
        /// For more information about key identifiers, see [Key identifiers (KeyID)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id) in the Amazon Web Services Key Management Service (Amazon Web Services KMS) documentation.
        public var zoneS3PathKmsKeyId: Swift.String?

        public init(
            statistics: [SageMakerGeospatialClientTypes.ZonalStatistics]? = nil,
            targetBands: [Swift.String]? = nil,
            zoneS3Path: Swift.String? = nil,
            zoneS3PathKmsKeyId: Swift.String? = nil
        )
        {
            self.statistics = statistics
            self.targetBands = targetBands
            self.zoneS3Path = zoneS3Path
            self.zoneS3PathKmsKeyId = zoneS3PathKmsKeyId
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for the JobConfig in an EarthObservationJob.
    public enum JobConfigInput: Swift.Sendable {
        /// An object containing information about the job configuration for BandMath.
        case bandmathconfig(SageMakerGeospatialClientTypes.BandMathConfigInput)
        /// An object containing information about the job configuration for resampling.
        case resamplingconfig(SageMakerGeospatialClientTypes.ResamplingConfigInput)
        /// An object containing information about the job configuration for temporal statistics.
        case temporalstatisticsconfig(SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput)
        /// An object containing information about the job configuration for cloud removal.
        case cloudremovalconfig(SageMakerGeospatialClientTypes.CloudRemovalConfigInput)
        /// An object containing information about the job configuration for zonal statistics.
        case zonalstatisticsconfig(SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput)
        /// An object containing information about the job configuration for geomosaic.
        case geomosaicconfig(SageMakerGeospatialClientTypes.GeoMosaicConfigInput)
        /// An object containing information about the job configuration for a Stacking Earth Observation job.
        case stackconfig(SageMakerGeospatialClientTypes.StackConfigInput)
        /// An object containing information about the job configuration for cloud masking.
        case cloudmaskingconfig(SageMakerGeospatialClientTypes.CloudMaskingConfigInput)
        /// An object containing information about the job configuration for land cover segmentation.
        case landcoversegmentationconfig(SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput)
        case sdkUnknown(Swift.String)
    }
}

extension SageMakerGeospatialClientTypes {

    /// A single EarthObservationJob output band.
    public struct OutputBand: Swift.Sendable {
        /// The name of the band.
        /// This member is required.
        public var bandName: Swift.String?
        /// The datatype of the output band.
        /// This member is required.
        public var outputDataType: SageMakerGeospatialClientTypes.OutputType?

        public init(
            bandName: Swift.String? = nil,
            outputDataType: SageMakerGeospatialClientTypes.OutputType? = nil
        )
        {
            self.bandName = bandName
            self.outputDataType = outputDataType
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum EarthObservationJobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// COMPLETED
        case completed
        /// DELETED
        case deleted
        /// DELETING
        case deleting
        /// FAILED
        case failed
        /// INITIALIZING
        case initializing
        /// IN_PROGRESS
        case inProgress
        /// STOPPED
        case stopped
        /// STOPPING
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [EarthObservationJobStatus] {
            return [
                .completed,
                .deleted,
                .deleting,
                .failed,
                .initializing,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .initializing: return "INITIALIZING"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetEarthObservationJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Earth Observation job.
    /// This member is required.
    public var arn: Swift.String?
    /// The creation time of the initiated Earth Observation job.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The duration of Earth Observation job, in seconds.
    /// This member is required.
    public var durationInSeconds: Swift.Int?
    /// Details about the errors generated during the Earth Observation job.
    public var errorDetails: SageMakerGeospatialClientTypes.EarthObservationJobErrorDetails?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    public var executionRoleArn: Swift.String?
    /// Details about the errors generated during ExportEarthObservationJob.
    public var exportErrorDetails: SageMakerGeospatialClientTypes.ExportErrorDetails?
    /// The status of the Earth Observation job.
    public var exportStatus: SageMakerGeospatialClientTypes.EarthObservationJobExportStatus?
    /// Input data for the Earth Observation job.
    /// This member is required.
    public var inputConfig: SageMakerGeospatialClientTypes.InputConfigOutput?
    /// An object containing information about the job configuration.
    /// This member is required.
    public var jobConfig: SageMakerGeospatialClientTypes.JobConfigInput?
    /// The Key Management Service key ID for server-side encryption.
    public var kmsKeyId: Swift.String?
    /// The name of the Earth Observation job.
    /// This member is required.
    public var name: Swift.String?
    /// Bands available in the output of an operation.
    public var outputBands: [SageMakerGeospatialClientTypes.OutputBand]?
    /// The status of a previously initiated Earth Observation job.
    /// This member is required.
    public var status: SageMakerGeospatialClientTypes.EarthObservationJobStatus?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        durationInSeconds: Swift.Int? = nil,
        errorDetails: SageMakerGeospatialClientTypes.EarthObservationJobErrorDetails? = nil,
        executionRoleArn: Swift.String? = nil,
        exportErrorDetails: SageMakerGeospatialClientTypes.ExportErrorDetails? = nil,
        exportStatus: SageMakerGeospatialClientTypes.EarthObservationJobExportStatus? = nil,
        inputConfig: SageMakerGeospatialClientTypes.InputConfigOutput? = nil,
        jobConfig: SageMakerGeospatialClientTypes.JobConfigInput? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        outputBands: [SageMakerGeospatialClientTypes.OutputBand]? = nil,
        status: SageMakerGeospatialClientTypes.EarthObservationJobStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.durationInSeconds = durationInSeconds
        self.errorDetails = errorDetails
        self.executionRoleArn = executionRoleArn
        self.exportErrorDetails = exportErrorDetails
        self.exportStatus = exportStatus
        self.inputConfig = inputConfig
        self.jobConfig = jobConfig
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.outputBands = outputBands
        self.status = status
        self.tags = tags
    }
}

extension SageMakerGeospatialClientTypes {

    public enum TargetOptions: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// INPUT
        case input
        /// OUTPUT
        case output
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetOptions] {
            return [
                .input,
                .output
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .input: return "INPUT"
            case .output: return "OUTPUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTileInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the tile operation.
    /// This member is required.
    public var arn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that you specify.
    public var executionRoleArn: Swift.String?
    /// The particular assets or bands to tile.
    /// This member is required.
    public var imageAssets: [Swift.String]?
    /// Determines whether or not to return a valid data mask.
    public var imageMask: Swift.Bool?
    /// The output data type of the tile operation.
    public var outputDataType: SageMakerGeospatialClientTypes.OutputType?
    /// The data format of the output tile. The formats include .npy, .png and .jpg.
    public var outputFormat: Swift.String?
    /// Property filters for the imagery to tile.
    public var propertyFilters: Swift.String?
    /// Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.
    /// This member is required.
    public var target: SageMakerGeospatialClientTypes.TargetOptions?
    /// Time range filter applied to imagery to find the images to tile.
    public var timeRangeFilter: Swift.String?
    /// The x coordinate of the tile input.
    /// This member is required.
    public var x: Swift.Int?
    /// The y coordinate of the tile input.
    /// This member is required.
    public var y: Swift.Int?
    /// The z coordinate of the tile input.
    /// This member is required.
    public var z: Swift.Int?

    public init(
        arn: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        imageAssets: [Swift.String]? = nil,
        imageMask: Swift.Bool? = nil,
        outputDataType: SageMakerGeospatialClientTypes.OutputType? = nil,
        outputFormat: Swift.String? = nil,
        propertyFilters: Swift.String? = nil,
        target: SageMakerGeospatialClientTypes.TargetOptions? = nil,
        timeRangeFilter: Swift.String? = nil,
        x: Swift.Int? = nil,
        y: Swift.Int? = nil,
        z: Swift.Int? = nil
    )
    {
        self.arn = arn
        self.executionRoleArn = executionRoleArn
        self.imageAssets = imageAssets
        self.imageMask = imageMask
        self.outputDataType = outputDataType
        self.outputFormat = outputFormat
        self.propertyFilters = propertyFilters
        self.target = target
        self.timeRangeFilter = timeRangeFilter
        self.x = x
        self.y = y
        self.z = z
    }
}

public struct GetTileOutput: Swift.Sendable {
    /// The output binary file.
    public var binaryFile: Smithy.ByteStream?

    public init(
        binaryFile: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8))
    )
    {
        self.binaryFile = binaryFile
    }
}

extension SageMakerGeospatialClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// ASCENDING
        case ascending
        /// DESCENDING
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListEarthObservationJobsInput: Swift.Sendable {
    /// The total number of items to return.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results.
    public var sortBy: Swift.String?
    /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
    public var sortOrder: SageMakerGeospatialClientTypes.SortOrder?
    /// A filter that retrieves only jobs with a specific status.
    public var statusEquals: SageMakerGeospatialClientTypes.EarthObservationJobStatus?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: Swift.String? = nil,
        sortOrder: SageMakerGeospatialClientTypes.SortOrder? = nil,
        statusEquals: SageMakerGeospatialClientTypes.EarthObservationJobStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension ListEarthObservationJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEarthObservationJobsInput(maxResults: \(Swift.String(describing: maxResults)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)), statusEquals: \(Swift.String(describing: statusEquals)), nextToken: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// An object containing information about the output file.
    public struct ListEarthObservationJobOutputConfig: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the list of the Earth Observation jobs.
        /// This member is required.
        public var arn: Swift.String?
        /// The creation time.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The duration of the session, in seconds.
        /// This member is required.
        public var durationInSeconds: Swift.Int?
        /// The names of the Earth Observation jobs in the list.
        /// This member is required.
        public var name: Swift.String?
        /// The operation type for an Earth Observation job.
        /// This member is required.
        public var operationType: Swift.String?
        /// The status of the list of the Earth Observation jobs.
        /// This member is required.
        public var status: SageMakerGeospatialClientTypes.EarthObservationJobStatus?
        /// Each tag consists of a key and a value.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            durationInSeconds: Swift.Int? = nil,
            name: Swift.String? = nil,
            operationType: Swift.String? = nil,
            status: SageMakerGeospatialClientTypes.EarthObservationJobStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.durationInSeconds = durationInSeconds
            self.name = name
            self.operationType = operationType
            self.status = status
            self.tags = tags
        }
    }
}

public struct ListEarthObservationJobsOutput: Swift.Sendable {
    /// Contains summary information about the Earth Observation jobs.
    /// This member is required.
    public var earthObservationJobSummaries: [SageMakerGeospatialClientTypes.ListEarthObservationJobOutputConfig]?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        earthObservationJobSummaries: [SageMakerGeospatialClientTypes.ListEarthObservationJobOutputConfig]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.earthObservationJobSummaries = earthObservationJobSummaries
        self.nextToken = nextToken
    }
}

extension ListEarthObservationJobsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEarthObservationJobsOutput(earthObservationJobSummaries: \(Swift.String(describing: earthObservationJobSummaries)), nextToken: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// The input for the time-range filter.
    public struct TimeRangeFilterInput: Swift.Sendable {
        /// The end time for the time-range filter.
        /// This member is required.
        public var endTime: Foundation.Date?
        /// The start time for the time-range filter.
        /// This member is required.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }
}

extension SageMakerGeospatialClientTypes.TimeRangeFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for Raster Data Collection Query containing the Area of Interest, TimeRange Filters, and Property Filters.
    public struct RasterDataCollectionQueryInput: Swift.Sendable {
        /// The area of interest being queried for the raster data collection.
        public var areaOfInterest: SageMakerGeospatialClientTypes.AreaOfInterest?
        /// The list of Property filters used in the Raster Data Collection Query.
        public var propertyFilters: SageMakerGeospatialClientTypes.PropertyFilters?
        /// The Amazon Resource Name (ARN) of the raster data collection.
        /// This member is required.
        public var rasterDataCollectionArn: Swift.String?
        /// The TimeRange Filter used in the RasterDataCollection Query.
        /// This member is required.
        public var timeRangeFilter: SageMakerGeospatialClientTypes.TimeRangeFilterInput?

        public init(
            areaOfInterest: SageMakerGeospatialClientTypes.AreaOfInterest? = nil,
            propertyFilters: SageMakerGeospatialClientTypes.PropertyFilters? = nil,
            rasterDataCollectionArn: Swift.String? = nil,
            timeRangeFilter: SageMakerGeospatialClientTypes.TimeRangeFilterInput? = nil
        )
        {
            self.areaOfInterest = areaOfInterest
            self.propertyFilters = propertyFilters
            self.rasterDataCollectionArn = rasterDataCollectionArn
            self.timeRangeFilter = timeRangeFilter
        }
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RasterDataCollectionQueryInput(areaOfInterest: \(Swift.String(describing: areaOfInterest)), propertyFilters: \(Swift.String(describing: propertyFilters)), rasterDataCollectionArn: \(Swift.String(describing: rasterDataCollectionArn)), timeRangeFilter: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// Input configuration information.
    public struct InputConfigInput: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the previous Earth Observation job.
        public var previousEarthObservationJobArn: Swift.String?
        /// The structure representing the RasterDataCollection Query consisting of the Area of Interest, RasterDataCollectionArn,TimeRange and Property Filters.
        public var rasterDataCollectionQuery: SageMakerGeospatialClientTypes.RasterDataCollectionQueryInput?

        public init(
            previousEarthObservationJobArn: Swift.String? = nil,
            rasterDataCollectionQuery: SageMakerGeospatialClientTypes.RasterDataCollectionQueryInput? = nil
        )
        {
            self.previousEarthObservationJobArn = previousEarthObservationJobArn
            self.rasterDataCollectionQuery = rasterDataCollectionQuery
        }
    }
}

public struct StartEarthObservationJobInput: Swift.Sendable {
    /// A unique token that guarantees that the call to this API is idempotent.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Input configuration information for the Earth Observation job.
    /// This member is required.
    public var inputConfig: SageMakerGeospatialClientTypes.InputConfigInput?
    /// An object containing information about the job configuration.
    /// This member is required.
    public var jobConfig: SageMakerGeospatialClientTypes.JobConfigInput?
    /// The Key Management Service key ID for server-side encryption.
    public var kmsKeyId: Swift.String?
    /// The name of the Earth Observation job.
    /// This member is required.
    public var name: Swift.String?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        inputConfig: SageMakerGeospatialClientTypes.InputConfigInput? = nil,
        jobConfig: SageMakerGeospatialClientTypes.JobConfigInput? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.executionRoleArn = executionRoleArn
        self.inputConfig = inputConfig
        self.jobConfig = jobConfig
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.tags = tags
    }
}

public struct StartEarthObservationJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Earth Observation job.
    /// This member is required.
    public var arn: Swift.String?
    /// The creation time.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The duration of the session, in seconds.
    /// This member is required.
    public var durationInSeconds: Swift.Int?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Input configuration information for the Earth Observation job.
    public var inputConfig: SageMakerGeospatialClientTypes.InputConfigOutput?
    /// An object containing information about the job configuration.
    /// This member is required.
    public var jobConfig: SageMakerGeospatialClientTypes.JobConfigInput?
    /// The Key Management Service key ID for server-side encryption.
    public var kmsKeyId: Swift.String?
    /// The name of the Earth Observation job.
    /// This member is required.
    public var name: Swift.String?
    /// The status of the Earth Observation job.
    /// This member is required.
    public var status: SageMakerGeospatialClientTypes.EarthObservationJobStatus?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        durationInSeconds: Swift.Int? = nil,
        executionRoleArn: Swift.String? = nil,
        inputConfig: SageMakerGeospatialClientTypes.InputConfigOutput? = nil,
        jobConfig: SageMakerGeospatialClientTypes.JobConfigInput? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        status: SageMakerGeospatialClientTypes.EarthObservationJobStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.durationInSeconds = durationInSeconds
        self.executionRoleArn = executionRoleArn
        self.inputConfig = inputConfig
        self.jobConfig = jobConfig
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.status = status
        self.tags = tags
    }
}

public struct StopEarthObservationJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Earth Observation job being stopped.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct StopEarthObservationJobOutput: Swift.Sendable {

    public init() { }
}

extension SageMakerGeospatialClientTypes {

    /// The Amazon S3 data for the Vector Enrichment job.
    public struct VectorEnrichmentJobS3Data: Swift.Sendable {
        /// The Key Management Service key ID for server-side encryption.
        public var kmsKeyId: Swift.String?
        /// The URL to the Amazon S3 data for the Vector Enrichment job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// An object containing information about the output file.
    public struct ExportVectorEnrichmentJobOutputConfig: Swift.Sendable {
        /// The input structure for Amazon S3 data; representing the Amazon S3 location of the input data objects.
        /// This member is required.
        public var s3Data: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data?

        public init(
            s3Data: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data? = nil
        )
        {
            self.s3Data = s3Data
        }
    }
}

public struct ExportVectorEnrichmentJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job.
    /// This member is required.
    public var arn: Swift.String?
    /// A unique token that guarantees that the call to this API is idempotent.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM rolewith permission to upload to the location in OutputConfig.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Output location information for exporting Vector Enrichment Job results.
    /// This member is required.
    public var outputConfig: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig?

    public init(
        arn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        outputConfig: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig? = nil
    )
    {
        self.arn = arn
        self.clientToken = clientToken
        self.executionRoleArn = executionRoleArn
        self.outputConfig = outputConfig
    }
}

extension SageMakerGeospatialClientTypes {

    public enum VectorEnrichmentJobExportStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [VectorEnrichmentJobExportStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ExportVectorEnrichmentJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job being exported.
    /// This member is required.
    public var arn: Swift.String?
    /// The creation time.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the IAM role with permission to upload to the location in OutputConfig.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// The status of the results the Vector Enrichment job being exported.
    /// This member is required.
    public var exportStatus: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportStatus?
    /// Output location information for exporting Vector Enrichment Job results.
    /// This member is required.
    public var outputConfig: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        executionRoleArn: Swift.String? = nil,
        exportStatus: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportStatus? = nil,
        outputConfig: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.executionRoleArn = executionRoleArn
        self.exportStatus = exportStatus
        self.outputConfig = outputConfig
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing a Geometry in terms of Type and Coordinates as per GeoJson spec.
    public struct Geometry: Swift.Sendable {
        /// The coordinates of the GeoJson Geometry.
        /// This member is required.
        public var coordinates: [[[Swift.Double]]]?
        /// GeoJson Geometry types like Polygon and MultiPolygon.
        /// This member is required.
        public var type: Swift.String?

        public init(
            coordinates: [[[Swift.Double]]]? = nil,
            type: Swift.String? = nil
        )
        {
            self.coordinates = coordinates
            self.type = type
        }
    }
}

extension SageMakerGeospatialClientTypes.Geometry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Geometry(type: \(Swift.String(describing: type)), coordinates: \"CONTENT_REDACTED\")"}
}

public struct GetRasterDataCollectionInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the raster data collection.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct GetRasterDataCollectionOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the raster data collection.
    /// This member is required.
    public var arn: Swift.String?
    /// A description of the raster data collection.
    /// This member is required.
    public var description: Swift.String?
    /// The URL of the description page.
    /// This member is required.
    public var descriptionPageUrl: Swift.String?
    /// The list of image source bands in the raster data collection.
    /// This member is required.
    public var imageSourceBands: [Swift.String]?
    /// The name of the raster data collection.
    /// This member is required.
    public var name: Swift.String?
    /// The filters supported by the raster data collection.
    /// This member is required.
    public var supportedFilters: [SageMakerGeospatialClientTypes.Filter]?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?
    /// The raster data collection type.
    /// This member is required.
    public var type: SageMakerGeospatialClientTypes.DataCollectionType?

    public init(
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        descriptionPageUrl: Swift.String? = nil,
        imageSourceBands: [Swift.String]? = nil,
        name: Swift.String? = nil,
        supportedFilters: [SageMakerGeospatialClientTypes.Filter]? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: SageMakerGeospatialClientTypes.DataCollectionType? = nil
    )
    {
        self.arn = arn
        self.description = description
        self.descriptionPageUrl = descriptionPageUrl
        self.imageSourceBands = imageSourceBands
        self.name = name
        self.supportedFilters = supportedFilters
        self.tags = tags
        self.type = type
    }
}

public struct GetVectorEnrichmentJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

extension SageMakerGeospatialClientTypes {

    public enum VectorEnrichmentJobErrorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// CLIENT_ERROR
        case clientError
        /// SERVER_ERROR
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [VectorEnrichmentJobErrorType] {
            return [
                .clientError,
                .serverError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clientError: return "CLIENT_ERROR"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// VectorEnrichmentJob error details in response from GetVectorEnrichmentJob.
    public struct VectorEnrichmentJobErrorDetails: Swift.Sendable {
        /// A message that you define and then is processed and rendered by the Vector Enrichment job when the error occurs.
        public var errorMessage: Swift.String?
        /// The type of error generated during the Vector Enrichment job.
        public var errorType: SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorType?

        public init(
            errorMessage: Swift.String? = nil,
            errorType: SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorType? = nil
        )
        {
            self.errorMessage = errorMessage
            self.errorType = errorType
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum VectorEnrichmentJobExportErrorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clientError
        case serverError
        case sdkUnknown(Swift.String)

        public static var allCases: [VectorEnrichmentJobExportErrorType] {
            return [
                .clientError,
                .serverError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clientError: return "CLIENT_ERROR"
            case .serverError: return "SERVER_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// VectorEnrichmentJob export error details in response from GetVectorEnrichmentJob.
    public struct VectorEnrichmentJobExportErrorDetails: Swift.Sendable {
        /// The message providing details about the errors generated during the Vector Enrichment job.
        public var message: Swift.String?
        /// The output error details for an Export operation on a Vector Enrichment job.
        public var type: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorType?

        public init(
            message: Swift.String? = nil,
            type: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorType? = nil
        )
        {
            self.message = message
            self.type = type
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for the data source that represents the storage type of the input data objects.
    public enum VectorEnrichmentJobDataSourceConfigInput: Swift.Sendable {
        /// The input structure for the Amazon S3 data that represents the Amazon S3 location of the input data objects.
        case s3data(SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data)
        case sdkUnknown(Swift.String)
    }
}

extension SageMakerGeospatialClientTypes {

    public enum VectorEnrichmentJobDocumentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [VectorEnrichmentJobDocumentType] {
            return [
                .csv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for the InputConfig in a VectorEnrichmentJob.
    public struct VectorEnrichmentJobInputConfig: Swift.Sendable {
        /// The input structure for the data source that represents the storage type of the input data objects.
        /// This member is required.
        public var dataSourceConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput?
        /// The input structure that defines the data source file type.
        /// This member is required.
        public var documentType: SageMakerGeospatialClientTypes.VectorEnrichmentJobDocumentType?

        public init(
            dataSourceConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput? = nil,
            documentType: SageMakerGeospatialClientTypes.VectorEnrichmentJobDocumentType? = nil
        )
        {
            self.dataSourceConfig = dataSourceConfig
            self.documentType = documentType
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for Map Matching operation type.
    public struct MapMatchingConfig: Swift.Sendable {
        /// The field name for the data that describes the identifier representing a collection of GPS points belonging to an individual trace.
        /// This member is required.
        public var idAttributeName: Swift.String?
        /// The name of the timestamp attribute.
        /// This member is required.
        public var timestampAttributeName: Swift.String?
        /// The name of the X-attribute
        /// This member is required.
        public var xAttributeName: Swift.String?
        /// The name of the Y-attribute
        /// This member is required.
        public var yAttributeName: Swift.String?

        public init(
            idAttributeName: Swift.String? = nil,
            timestampAttributeName: Swift.String? = nil,
            xAttributeName: Swift.String? = nil,
            yAttributeName: Swift.String? = nil
        )
        {
            self.idAttributeName = idAttributeName
            self.timestampAttributeName = timestampAttributeName
            self.xAttributeName = xAttributeName
            self.yAttributeName = yAttributeName
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The input structure for Reverse Geocoding operation type.
    public struct ReverseGeocodingConfig: Swift.Sendable {
        /// The field name for the data that describes x-axis coordinate, eg. longitude of a point.
        /// This member is required.
        public var xAttributeName: Swift.String?
        /// The field name for the data that describes y-axis coordinate, eg. latitude of a point.
        /// This member is required.
        public var yAttributeName: Swift.String?

        public init(
            xAttributeName: Swift.String? = nil,
            yAttributeName: Swift.String? = nil
        )
        {
            self.xAttributeName = xAttributeName
            self.yAttributeName = yAttributeName
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// It contains configs such as ReverseGeocodingConfig and MapMatchingConfig.
    public enum VectorEnrichmentJobConfig: Swift.Sendable {
        /// The input structure for Reverse Geocoding operation type.
        case reversegeocodingconfig(SageMakerGeospatialClientTypes.ReverseGeocodingConfig)
        /// The input structure for Map Matching operation type.
        case mapmatchingconfig(SageMakerGeospatialClientTypes.MapMatchingConfig)
        case sdkUnknown(Swift.String)
    }
}

extension SageMakerGeospatialClientTypes {

    public enum VectorEnrichmentJobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleted
        case deleting
        case failed
        case initializing
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [VectorEnrichmentJobStatus] {
            return [
                .completed,
                .deleted,
                .deleting,
                .failed,
                .initializing,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .initializing: return "INITIALIZING"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerGeospatialClientTypes {

    public enum VectorEnrichmentJobType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mapMatching
        case reverseGeocoding
        case sdkUnknown(Swift.String)

        public static var allCases: [VectorEnrichmentJobType] {
            return [
                .mapMatching,
                .reverseGeocoding
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mapMatching: return "MAP_MATCHING"
            case .reverseGeocoding: return "REVERSE_GEOCODING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetVectorEnrichmentJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job.
    /// This member is required.
    public var arn: Swift.String?
    /// The creation time.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The duration of the Vector Enrichment job, in seconds.
    /// This member is required.
    public var durationInSeconds: Swift.Int?
    /// Details about the errors generated during the Vector Enrichment job.
    public var errorDetails: SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorDetails?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Details about the errors generated during the ExportVectorEnrichmentJob.
    public var exportErrorDetails: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorDetails?
    /// The export status of the Vector Enrichment job being initiated.
    public var exportStatus: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportStatus?
    /// Input configuration information for the Vector Enrichment job.
    /// This member is required.
    public var inputConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig?
    /// An object containing information about the job configuration.
    /// This member is required.
    public var jobConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig?
    /// The Key Management Service key ID for server-side encryption.
    public var kmsKeyId: Swift.String?
    /// The name of the Vector Enrichment job.
    /// This member is required.
    public var name: Swift.String?
    /// The status of the initiated Vector Enrichment job.
    /// This member is required.
    public var status: SageMakerGeospatialClientTypes.VectorEnrichmentJobStatus?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?
    /// The type of the Vector Enrichment job being initiated.
    /// This member is required.
    public var type: SageMakerGeospatialClientTypes.VectorEnrichmentJobType?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        durationInSeconds: Swift.Int? = nil,
        errorDetails: SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorDetails? = nil,
        executionRoleArn: Swift.String? = nil,
        exportErrorDetails: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorDetails? = nil,
        exportStatus: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportStatus? = nil,
        inputConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig? = nil,
        jobConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        status: SageMakerGeospatialClientTypes.VectorEnrichmentJobStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: SageMakerGeospatialClientTypes.VectorEnrichmentJobType? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.durationInSeconds = durationInSeconds
        self.errorDetails = errorDetails
        self.executionRoleArn = executionRoleArn
        self.exportErrorDetails = exportErrorDetails
        self.exportStatus = exportStatus
        self.inputConfig = inputConfig
        self.jobConfig = jobConfig
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.status = status
        self.tags = tags
        self.type = type
    }
}

extension SageMakerGeospatialClientTypes {

    /// Properties associated with the Item.
    public struct Properties: Swift.Sendable {
        /// Estimate of cloud cover.
        public var eoCloudCover: Swift.Float?
        /// Land cloud cover for Landsat Data Collection.
        public var landsatCloudCoverLand: Swift.Float?
        /// Platform property. Platform refers to the unique name of the specific platform the instrument is attached to. For satellites it is the name of the satellite, eg. landsat-8 (Landsat-8), sentinel-2a.
        public var platform: Swift.String?
        /// The angle from the sensor between nadir (straight down) and the scene center. Measured in degrees (0-90).
        public var viewOffNadir: Swift.Float?
        /// The sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun. Measured clockwise in degrees (0-360).
        public var viewSunAzimuth: Swift.Float?
        /// The sun elevation angle. The angle from the tangent of the scene center point to the sun. Measured from the horizon in degrees (-90-90). Negative values indicate the sun is below the horizon, e.g. sun elevation of -10° means the data was captured during [nautical twilight](https://www.timeanddate.com/astronomy/different-types-twilight.html).
        public var viewSunElevation: Swift.Float?

        public init(
            eoCloudCover: Swift.Float? = nil,
            landsatCloudCoverLand: Swift.Float? = nil,
            platform: Swift.String? = nil,
            viewOffNadir: Swift.Float? = nil,
            viewSunAzimuth: Swift.Float? = nil,
            viewSunElevation: Swift.Float? = nil
        )
        {
            self.eoCloudCover = eoCloudCover
            self.landsatCloudCoverLand = landsatCloudCoverLand
            self.platform = platform
            self.viewOffNadir = viewOffNadir
            self.viewSunAzimuth = viewSunAzimuth
            self.viewSunElevation = viewSunElevation
        }
    }
}

extension SageMakerGeospatialClientTypes {

    /// The structure representing the items in the response for SearchRasterDataCollection.
    public struct ItemSource: Swift.Sendable {
        /// This is a dictionary of Asset Objects data associated with the Item that can be downloaded or streamed, each with a unique key.
        public var assets: [Swift.String: SageMakerGeospatialClientTypes.AssetValue]?
        /// The searchable date and time of the item, in UTC.
        /// This member is required.
        public var dateTime: Foundation.Date?
        /// The item Geometry in GeoJson format.
        /// This member is required.
        public var geometry: SageMakerGeospatialClientTypes.Geometry?
        /// A unique Id for the source item.
        /// This member is required.
        public var id: Swift.String?
        /// This field contains additional properties of the item.
        public var properties: SageMakerGeospatialClientTypes.Properties?

        public init(
            assets: [Swift.String: SageMakerGeospatialClientTypes.AssetValue]? = nil,
            dateTime: Foundation.Date? = nil,
            geometry: SageMakerGeospatialClientTypes.Geometry? = nil,
            id: Swift.String? = nil,
            properties: SageMakerGeospatialClientTypes.Properties? = nil
        )
        {
            self.assets = assets
            self.dateTime = dateTime
            self.geometry = geometry
            self.id = id
            self.properties = properties
        }
    }
}

public struct ListRasterDataCollectionsInput: Swift.Sendable {
    /// The total number of items to return.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListRasterDataCollectionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRasterDataCollectionsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListRasterDataCollectionsOutput: Swift.Sendable {
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// Contains summary information about the raster data collection.
    /// This member is required.
    public var rasterDataCollectionSummaries: [SageMakerGeospatialClientTypes.RasterDataCollectionMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        rasterDataCollectionSummaries: [SageMakerGeospatialClientTypes.RasterDataCollectionMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.rasterDataCollectionSummaries = rasterDataCollectionSummaries
    }
}

extension ListRasterDataCollectionsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRasterDataCollectionsOutput(rasterDataCollectionSummaries: \(Swift.String(describing: rasterDataCollectionSummaries)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource you want to tag.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension SageMakerGeospatialClientTypes {

    /// An object containing information about the output file.
    public struct ListVectorEnrichmentJobOutputConfig: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the list of the Vector Enrichment jobs.
        /// This member is required.
        public var arn: Swift.String?
        /// The creation time.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The duration of the session, in seconds.
        /// This member is required.
        public var durationInSeconds: Swift.Int?
        /// The names of the Vector Enrichment jobs in the list.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the Vector Enrichment jobs list.
        /// This member is required.
        public var status: SageMakerGeospatialClientTypes.VectorEnrichmentJobStatus?
        /// Each tag consists of a key and a value.
        public var tags: [Swift.String: Swift.String]?
        /// The type of the list of Vector Enrichment jobs.
        /// This member is required.
        public var type: SageMakerGeospatialClientTypes.VectorEnrichmentJobType?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            durationInSeconds: Swift.Int? = nil,
            name: Swift.String? = nil,
            status: SageMakerGeospatialClientTypes.VectorEnrichmentJobStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: SageMakerGeospatialClientTypes.VectorEnrichmentJobType? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.durationInSeconds = durationInSeconds
            self.name = name
            self.status = status
            self.tags = tags
            self.type = type
        }
    }
}

public struct ListVectorEnrichmentJobsInput: Swift.Sendable {
    /// The maximum number of items to return.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results.
    public var sortBy: Swift.String?
    /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
    public var sortOrder: SageMakerGeospatialClientTypes.SortOrder?
    /// A filter that retrieves only jobs with a specific status.
    public var statusEquals: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: Swift.String? = nil,
        sortOrder: SageMakerGeospatialClientTypes.SortOrder? = nil,
        statusEquals: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension ListVectorEnrichmentJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVectorEnrichmentJobsInput(maxResults: \(Swift.String(describing: maxResults)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)), statusEquals: \(Swift.String(describing: statusEquals)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListVectorEnrichmentJobsOutput: Swift.Sendable {
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// Contains summary information about the Vector Enrichment jobs.
    /// This member is required.
    public var vectorEnrichmentJobSummaries: [SageMakerGeospatialClientTypes.ListVectorEnrichmentJobOutputConfig]?

    public init(
        nextToken: Swift.String? = nil,
        vectorEnrichmentJobSummaries: [SageMakerGeospatialClientTypes.ListVectorEnrichmentJobOutputConfig]? = nil
    )
    {
        self.nextToken = nextToken
        self.vectorEnrichmentJobSummaries = vectorEnrichmentJobSummaries
    }
}

extension ListVectorEnrichmentJobsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVectorEnrichmentJobsOutput(vectorEnrichmentJobSummaries: \(Swift.String(describing: vectorEnrichmentJobSummaries)), nextToken: \"CONTENT_REDACTED\")"}
}

extension SageMakerGeospatialClientTypes {

    /// This is a RasterDataCollectionQueryInput containing AreaOfInterest, Time Range filter and Property filters.
    public struct RasterDataCollectionQueryWithBandFilterInput: Swift.Sendable {
        /// The Area of interest to be used in the search query.
        public var areaOfInterest: SageMakerGeospatialClientTypes.AreaOfInterest?
        /// The list of Bands to be displayed in the result for each item.
        public var bandFilter: [Swift.String]?
        /// The Property Filters used in the search query.
        public var propertyFilters: SageMakerGeospatialClientTypes.PropertyFilters?
        /// The TimeRange Filter used in the search query.
        /// This member is required.
        public var timeRangeFilter: SageMakerGeospatialClientTypes.TimeRangeFilterInput?

        public init(
            areaOfInterest: SageMakerGeospatialClientTypes.AreaOfInterest? = nil,
            bandFilter: [Swift.String]? = nil,
            propertyFilters: SageMakerGeospatialClientTypes.PropertyFilters? = nil,
            timeRangeFilter: SageMakerGeospatialClientTypes.TimeRangeFilterInput? = nil
        )
        {
            self.areaOfInterest = areaOfInterest
            self.bandFilter = bandFilter
            self.propertyFilters = propertyFilters
            self.timeRangeFilter = timeRangeFilter
        }
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionQueryWithBandFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RasterDataCollectionQueryWithBandFilterInput(areaOfInterest: \(Swift.String(describing: areaOfInterest)), bandFilter: \(Swift.String(describing: bandFilter)), propertyFilters: \(Swift.String(describing: propertyFilters)), timeRangeFilter: \"CONTENT_REDACTED\")"}
}

public struct SearchRasterDataCollectionInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the raster data collection.
    /// This member is required.
    public var arn: Swift.String?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// RasterDataCollectionQuery consisting of [AreaOfInterest(AOI)](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_AreaOfInterest.html), [PropertyFilters](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_PropertyFilter.html) and [TimeRangeFilterInput](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_TimeRangeFilterInput.html) used in [SearchRasterDataCollection](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_geospatial_SearchRasterDataCollection.html).
    /// This member is required.
    public var rasterDataCollectionQuery: SageMakerGeospatialClientTypes.RasterDataCollectionQueryWithBandFilterInput?

    public init(
        arn: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        rasterDataCollectionQuery: SageMakerGeospatialClientTypes.RasterDataCollectionQueryWithBandFilterInput? = nil
    )
    {
        self.arn = arn
        self.nextToken = nextToken
        self.rasterDataCollectionQuery = rasterDataCollectionQuery
    }
}

extension SearchRasterDataCollectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchRasterDataCollectionInput(arn: \(Swift.String(describing: arn)), rasterDataCollectionQuery: \(Swift.String(describing: rasterDataCollectionQuery)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct SearchRasterDataCollectionOutput: Swift.Sendable {
    /// Approximate number of results in the response.
    /// This member is required.
    public var approximateResultCount: Swift.Int?
    /// List of items matching the Raster DataCollectionQuery.
    public var items: [SageMakerGeospatialClientTypes.ItemSource]?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        approximateResultCount: Swift.Int? = nil,
        items: [SageMakerGeospatialClientTypes.ItemSource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.approximateResultCount = approximateResultCount
        self.items = items
        self.nextToken = nextToken
    }
}

extension SearchRasterDataCollectionOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchRasterDataCollectionOutput(approximateResultCount: \(Swift.String(describing: approximateResultCount)), items: \(Swift.String(describing: items)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource you want to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Each tag consists of a key and a value.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource you want to untag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Keys of the tags you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct StartVectorEnrichmentJobInput: Swift.Sendable {
    /// A unique token that guarantees that the call to this API is idempotent.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Input configuration information for the Vector Enrichment job.
    /// This member is required.
    public var inputConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig?
    /// An object containing information about the job configuration.
    /// This member is required.
    public var jobConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig?
    /// The Key Management Service key ID for server-side encryption.
    public var kmsKeyId: Swift.String?
    /// The name of the Vector Enrichment job.
    /// This member is required.
    public var name: Swift.String?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        inputConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig? = nil,
        jobConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.executionRoleArn = executionRoleArn
        self.inputConfig = inputConfig
        self.jobConfig = jobConfig
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.tags = tags
    }
}

public struct StartVectorEnrichmentJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job.
    /// This member is required.
    public var arn: Swift.String?
    /// The creation time.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The duration of the Vector Enrichment job, in seconds.
    /// This member is required.
    public var durationInSeconds: Swift.Int?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the job.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Input configuration information for starting the Vector Enrichment job.
    /// This member is required.
    public var inputConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig?
    /// An object containing information about the job configuration.
    /// This member is required.
    public var jobConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig?
    /// The Key Management Service key ID for server-side encryption.
    public var kmsKeyId: Swift.String?
    /// The name of the Vector Enrichment job.
    /// This member is required.
    public var name: Swift.String?
    /// The status of the Vector Enrichment job being started.
    /// This member is required.
    public var status: SageMakerGeospatialClientTypes.VectorEnrichmentJobStatus?
    /// Each tag consists of a key and a value.
    public var tags: [Swift.String: Swift.String]?
    /// The type of the Vector Enrichment job.
    /// This member is required.
    public var type: SageMakerGeospatialClientTypes.VectorEnrichmentJobType?

    public init(
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        durationInSeconds: Swift.Int? = nil,
        executionRoleArn: Swift.String? = nil,
        inputConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig? = nil,
        jobConfig: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        status: SageMakerGeospatialClientTypes.VectorEnrichmentJobStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: SageMakerGeospatialClientTypes.VectorEnrichmentJobType? = nil
    )
    {
        self.arn = arn
        self.creationTime = creationTime
        self.durationInSeconds = durationInSeconds
        self.executionRoleArn = executionRoleArn
        self.inputConfig = inputConfig
        self.jobConfig = jobConfig
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.status = status
        self.tags = tags
        self.type = type
    }
}

public struct StopVectorEnrichmentJobInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Vector Enrichment job.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct StopVectorEnrichmentJobOutput: Swift.Sendable {

    public init() { }
}

extension DeleteEarthObservationJobInput {

    static func urlPathProvider(_ value: DeleteEarthObservationJobInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/earth-observation-jobs/\(arn.urlPercentEncoding())"
    }
}

extension DeleteVectorEnrichmentJobInput {

    static func urlPathProvider(_ value: DeleteVectorEnrichmentJobInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/vector-enrichment-jobs/\(arn.urlPercentEncoding())"
    }
}

extension ExportEarthObservationJobInput {

    static func urlPathProvider(_ value: ExportEarthObservationJobInput) -> Swift.String? {
        return "/export-earth-observation-job"
    }
}

extension ExportVectorEnrichmentJobInput {

    static func urlPathProvider(_ value: ExportVectorEnrichmentJobInput) -> Swift.String? {
        return "/export-vector-enrichment-jobs"
    }
}

extension GetEarthObservationJobInput {

    static func urlPathProvider(_ value: GetEarthObservationJobInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/earth-observation-jobs/\(arn.urlPercentEncoding())"
    }
}

extension GetRasterDataCollectionInput {

    static func urlPathProvider(_ value: GetRasterDataCollectionInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/raster-data-collection/\(arn.urlPercentEncoding())"
    }
}

extension GetTileInput {

    static func urlPathProvider(_ value: GetTileInput) -> Swift.String? {
        guard let z = value.z else {
            return nil
        }
        guard let x = value.x else {
            return nil
        }
        guard let y = value.y else {
            return nil
        }
        return "/tile/\(z)/\(x)/\(y)"
    }
}

extension GetTileInput {

    static func queryItemProvider(_ value: GetTileInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let imageAssets = value.imageAssets else {
            let message = "Creating a URL Query Item failed. imageAssets is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        imageAssets.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "ImageAssets".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        if let imageMask = value.imageMask {
            let imageMaskQueryItem = Smithy.URIQueryItem(name: "ImageMask".urlPercentEncoding(), value: Swift.String(imageMask).urlPercentEncoding())
            items.append(imageMaskQueryItem)
        }
        if let executionRoleArn = value.executionRoleArn {
            let executionRoleArnQueryItem = Smithy.URIQueryItem(name: "ExecutionRoleArn".urlPercentEncoding(), value: Swift.String(executionRoleArn).urlPercentEncoding())
            items.append(executionRoleArnQueryItem)
        }
        guard let target = value.target else {
            let message = "Creating a URL Query Item failed. target is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let targetQueryItem = Smithy.URIQueryItem(name: "Target".urlPercentEncoding(), value: Swift.String(target.rawValue).urlPercentEncoding())
        items.append(targetQueryItem)
        if let propertyFilters = value.propertyFilters {
            let propertyFiltersQueryItem = Smithy.URIQueryItem(name: "PropertyFilters".urlPercentEncoding(), value: Swift.String(propertyFilters).urlPercentEncoding())
            items.append(propertyFiltersQueryItem)
        }
        if let outputDataType = value.outputDataType {
            let outputDataTypeQueryItem = Smithy.URIQueryItem(name: "OutputDataType".urlPercentEncoding(), value: Swift.String(outputDataType.rawValue).urlPercentEncoding())
            items.append(outputDataTypeQueryItem)
        }
        if let timeRangeFilter = value.timeRangeFilter {
            let timeRangeFilterQueryItem = Smithy.URIQueryItem(name: "TimeRangeFilter".urlPercentEncoding(), value: Swift.String(timeRangeFilter).urlPercentEncoding())
            items.append(timeRangeFilterQueryItem)
        }
        if let outputFormat = value.outputFormat {
            let outputFormatQueryItem = Smithy.URIQueryItem(name: "OutputFormat".urlPercentEncoding(), value: Swift.String(outputFormat).urlPercentEncoding())
            items.append(outputFormatQueryItem)
        }
        guard let arn = value.arn else {
            let message = "Creating a URL Query Item failed. arn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let arnQueryItem = Smithy.URIQueryItem(name: "Arn".urlPercentEncoding(), value: Swift.String(arn).urlPercentEncoding())
        items.append(arnQueryItem)
        return items
    }
}

extension GetVectorEnrichmentJobInput {

    static func urlPathProvider(_ value: GetVectorEnrichmentJobInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/vector-enrichment-jobs/\(arn.urlPercentEncoding())"
    }
}

extension ListEarthObservationJobsInput {

    static func urlPathProvider(_ value: ListEarthObservationJobsInput) -> Swift.String? {
        return "/list-earth-observation-jobs"
    }
}

extension ListRasterDataCollectionsInput {

    static func urlPathProvider(_ value: ListRasterDataCollectionsInput) -> Swift.String? {
        return "/raster-data-collections"
    }
}

extension ListRasterDataCollectionsInput {

    static func queryItemProvider(_ value: ListRasterDataCollectionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListVectorEnrichmentJobsInput {

    static func urlPathProvider(_ value: ListVectorEnrichmentJobsInput) -> Swift.String? {
        return "/list-vector-enrichment-jobs"
    }
}

extension SearchRasterDataCollectionInput {

    static func urlPathProvider(_ value: SearchRasterDataCollectionInput) -> Swift.String? {
        return "/search-raster-data-collection"
    }
}

extension StartEarthObservationJobInput {

    static func urlPathProvider(_ value: StartEarthObservationJobInput) -> Swift.String? {
        return "/earth-observation-jobs"
    }
}

extension StartVectorEnrichmentJobInput {

    static func urlPathProvider(_ value: StartVectorEnrichmentJobInput) -> Swift.String? {
        return "/vector-enrichment-jobs"
    }
}

extension StopEarthObservationJobInput {

    static func urlPathProvider(_ value: StopEarthObservationJobInput) -> Swift.String? {
        return "/earth-observation-jobs/stop"
    }
}

extension StopVectorEnrichmentJobInput {

    static func urlPathProvider(_ value: StopVectorEnrichmentJobInput) -> Swift.String? {
        return "/vector-enrichment-jobs/stop"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension ExportEarthObservationJobInput {

    static func write(value: ExportEarthObservationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
        try writer["ClientToken"].write(value.clientToken)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["ExportSourceImages"].write(value.exportSourceImages)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerGeospatialClientTypes.OutputConfigInput.write(value:to:))
    }
}

extension ExportVectorEnrichmentJobInput {

    static func write(value: ExportVectorEnrichmentJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
        try writer["ClientToken"].write(value.clientToken)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig.write(value:to:))
    }
}

extension ListEarthObservationJobsInput {

    static func write(value: ListEarthObservationJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListVectorEnrichmentJobsInput {

    static func write(value: ListVectorEnrichmentJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension SearchRasterDataCollectionInput {

    static func write(value: SearchRasterDataCollectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
        try writer["NextToken"].write(value.nextToken)
        try writer["RasterDataCollectionQuery"].write(value.rasterDataCollectionQuery, with: SageMakerGeospatialClientTypes.RasterDataCollectionQueryWithBandFilterInput.write(value:to:))
    }
}

extension StartEarthObservationJobInput {

    static func write(value: StartEarthObservationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["InputConfig"].write(value.inputConfig, with: SageMakerGeospatialClientTypes.InputConfigInput.write(value:to:))
        try writer["JobConfig"].write(value.jobConfig, with: SageMakerGeospatialClientTypes.JobConfigInput.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension StartVectorEnrichmentJobInput {

    static func write(value: StartVectorEnrichmentJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["InputConfig"].write(value.inputConfig, with: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig.write(value:to:))
        try writer["JobConfig"].write(value.jobConfig, with: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension StopEarthObservationJobInput {

    static func write(value: StopEarthObservationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }
}

extension StopVectorEnrichmentJobInput {

    static func write(value: StopVectorEnrichmentJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeleteEarthObservationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEarthObservationJobOutput {
        return DeleteEarthObservationJobOutput()
    }
}

extension DeleteVectorEnrichmentJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVectorEnrichmentJobOutput {
        return DeleteVectorEnrichmentJobOutput()
    }
}

extension ExportEarthObservationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportEarthObservationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportEarthObservationJobOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent() ?? ""
        value.exportSourceImages = try reader["ExportSourceImages"].readIfPresent()
        value.exportStatus = try reader["ExportStatus"].readIfPresent() ?? .sdkUnknown("")
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.OutputConfigInput.read(from:))
        return value
    }
}

extension ExportVectorEnrichmentJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportVectorEnrichmentJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportVectorEnrichmentJobOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent() ?? ""
        value.exportStatus = try reader["ExportStatus"].readIfPresent() ?? .sdkUnknown("")
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig.read(from:))
        return value
    }
}

extension GetEarthObservationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEarthObservationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEarthObservationJobOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent() ?? 0
        value.errorDetails = try reader["ErrorDetails"].readIfPresent(with: SageMakerGeospatialClientTypes.EarthObservationJobErrorDetails.read(from:))
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.exportErrorDetails = try reader["ExportErrorDetails"].readIfPresent(with: SageMakerGeospatialClientTypes.ExportErrorDetails.read(from:))
        value.exportStatus = try reader["ExportStatus"].readIfPresent()
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.InputConfigOutput.read(from:))
        value.jobConfig = try reader["JobConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.JobConfigInput.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.outputBands = try reader["OutputBands"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.OutputBand.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetRasterDataCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRasterDataCollectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRasterDataCollectionOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent() ?? ""
        value.descriptionPageUrl = try reader["DescriptionPageUrl"].readIfPresent() ?? ""
        value.imageSourceBands = try reader["ImageSourceBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.supportedFilters = try reader["SupportedFilters"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.Filter.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GetTileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTileOutput {
        var value = GetTileOutput()
        switch httpResponse.body {
        case .data(let data):
            value.binaryFile = .data(data)
        case .stream(let stream):
            value.binaryFile = .stream(stream)
        case .noStream:
            value.binaryFile = nil
        }
        return value
    }
}

extension GetVectorEnrichmentJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetVectorEnrichmentJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetVectorEnrichmentJobOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent() ?? 0
        value.errorDetails = try reader["ErrorDetails"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorDetails.read(from:))
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent() ?? ""
        value.exportErrorDetails = try reader["ExportErrorDetails"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorDetails.read(from:))
        value.exportStatus = try reader["ExportStatus"].readIfPresent()
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig.read(from:))
        value.jobConfig = try reader["JobConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ListEarthObservationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEarthObservationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEarthObservationJobsOutput()
        value.earthObservationJobSummaries = try reader["EarthObservationJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.ListEarthObservationJobOutputConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListRasterDataCollectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRasterDataCollectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRasterDataCollectionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.rasterDataCollectionSummaries = try reader["RasterDataCollectionSummaries"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.RasterDataCollectionMetadata.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListVectorEnrichmentJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListVectorEnrichmentJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListVectorEnrichmentJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.vectorEnrichmentJobSummaries = try reader["VectorEnrichmentJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.ListVectorEnrichmentJobOutputConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SearchRasterDataCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchRasterDataCollectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchRasterDataCollectionOutput()
        value.approximateResultCount = try reader["ApproximateResultCount"].readIfPresent() ?? 0
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.ItemSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension StartEarthObservationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartEarthObservationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartEarthObservationJobOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent() ?? 0
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent() ?? ""
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.InputConfigOutput.read(from:))
        value.jobConfig = try reader["JobConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.JobConfigInput.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartVectorEnrichmentJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartVectorEnrichmentJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartVectorEnrichmentJobOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent() ?? 0
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent() ?? ""
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig.read(from:))
        value.jobConfig = try reader["JobConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension StopEarthObservationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopEarthObservationJobOutput {
        return StopEarthObservationJobOutput()
    }
}

extension StopVectorEnrichmentJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopVectorEnrichmentJobOutput {
        return StopVectorEnrichmentJobOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

enum DeleteEarthObservationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVectorEnrichmentJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportEarthObservationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportVectorEnrichmentJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEarthObservationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRasterDataCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetVectorEnrichmentJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEarthObservationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRasterDataCollectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListVectorEnrichmentJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchRasterDataCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartEarthObservationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartVectorEnrichmentJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopEarthObservationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopVectorEnrichmentJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SageMakerGeospatialClientTypes.OutputConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.OutputConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Data"].write(value.s3Data, with: SageMakerGeospatialClientTypes.ExportS3DataInput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.OutputConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.OutputConfigInput()
        value.s3Data = try reader["S3Data"].readIfPresent(with: SageMakerGeospatialClientTypes.ExportS3DataInput.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.ExportS3DataInput {

    static func write(value: SageMakerGeospatialClientTypes.ExportS3DataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ExportS3DataInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ExportS3DataInput()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig {

    static func write(value: SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Data"].write(value.s3Data, with: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ExportVectorEnrichmentJobOutputConfig()
        value.s3Data = try reader["S3Data"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data {

    static func write(value: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.InputConfigOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.InputConfigOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.InputConfigOutput()
        value.previousEarthObservationJobArn = try reader["PreviousEarthObservationJobArn"].readIfPresent()
        value.rasterDataCollectionQuery = try reader["RasterDataCollectionQuery"].readIfPresent(with: SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.RasterDataCollectionQueryOutput()
        value.rasterDataCollectionArn = try reader["RasterDataCollectionArn"].readIfPresent() ?? ""
        value.rasterDataCollectionName = try reader["RasterDataCollectionName"].readIfPresent() ?? ""
        value.timeRangeFilter = try reader["TimeRangeFilter"].readIfPresent(with: SageMakerGeospatialClientTypes.TimeRangeFilterOutput.read(from:))
        value.areaOfInterest = try reader["AreaOfInterest"].readIfPresent(with: SageMakerGeospatialClientTypes.AreaOfInterest.read(from:))
        value.propertyFilters = try reader["PropertyFilters"].readIfPresent(with: SageMakerGeospatialClientTypes.PropertyFilters.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.PropertyFilters {

    static func write(value: SageMakerGeospatialClientTypes.PropertyFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogicalOperator"].write(value.logicalOperator)
        try writer["Properties"].writeList(value.properties, memberWritingClosure: SageMakerGeospatialClientTypes.PropertyFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.PropertyFilters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.PropertyFilters()
        value.properties = try reader["Properties"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.PropertyFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.logicalOperator = try reader["LogicalOperator"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.PropertyFilter {

    static func write(value: SageMakerGeospatialClientTypes.PropertyFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Property"].write(value.property, with: SageMakerGeospatialClientTypes.Property.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.PropertyFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.PropertyFilter()
        value.property = try reader["Property"].readIfPresent(with: SageMakerGeospatialClientTypes.Property.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.Property {

    static func write(value: SageMakerGeospatialClientTypes.Property?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .eocloudcover(eocloudcover):
                try writer["EoCloudCover"].write(eocloudcover, with: SageMakerGeospatialClientTypes.EoCloudCoverInput.write(value:to:))
            case let .landsatcloudcoverland(landsatcloudcoverland):
                try writer["LandsatCloudCoverLand"].write(landsatcloudcoverland, with: SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput.write(value:to:))
            case let .platform(platform):
                try writer["Platform"].write(platform, with: SageMakerGeospatialClientTypes.PlatformInput.write(value:to:))
            case let .viewoffnadir(viewoffnadir):
                try writer["ViewOffNadir"].write(viewoffnadir, with: SageMakerGeospatialClientTypes.ViewOffNadirInput.write(value:to:))
            case let .viewsunazimuth(viewsunazimuth):
                try writer["ViewSunAzimuth"].write(viewsunazimuth, with: SageMakerGeospatialClientTypes.ViewSunAzimuthInput.write(value:to:))
            case let .viewsunelevation(viewsunelevation):
                try writer["ViewSunElevation"].write(viewsunelevation, with: SageMakerGeospatialClientTypes.ViewSunElevationInput.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.Property {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "EoCloudCover":
                return .eocloudcover(try reader["EoCloudCover"].read(with: SageMakerGeospatialClientTypes.EoCloudCoverInput.read(from:)))
            case "ViewOffNadir":
                return .viewoffnadir(try reader["ViewOffNadir"].read(with: SageMakerGeospatialClientTypes.ViewOffNadirInput.read(from:)))
            case "ViewSunAzimuth":
                return .viewsunazimuth(try reader["ViewSunAzimuth"].read(with: SageMakerGeospatialClientTypes.ViewSunAzimuthInput.read(from:)))
            case "ViewSunElevation":
                return .viewsunelevation(try reader["ViewSunElevation"].read(with: SageMakerGeospatialClientTypes.ViewSunElevationInput.read(from:)))
            case "Platform":
                return .platform(try reader["Platform"].read(with: SageMakerGeospatialClientTypes.PlatformInput.read(from:)))
            case "LandsatCloudCoverLand":
                return .landsatcloudcoverland(try reader["LandsatCloudCoverLand"].read(with: SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput {

    static func write(value: SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LowerBound"].write(value.lowerBound)
        try writer["UpperBound"].write(value.upperBound)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.LandsatCloudCoverLandInput()
        value.lowerBound = try reader["LowerBound"].readIfPresent() ?? 0.0
        value.upperBound = try reader["UpperBound"].readIfPresent() ?? 0.0
        return value
    }
}

extension SageMakerGeospatialClientTypes.PlatformInput {

    static func write(value: SageMakerGeospatialClientTypes.PlatformInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.PlatformInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.PlatformInput()
        value.value = try reader["Value"].readIfPresent() ?? ""
        value.comparisonOperator = try reader["ComparisonOperator"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.ViewSunElevationInput {

    static func write(value: SageMakerGeospatialClientTypes.ViewSunElevationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LowerBound"].write(value.lowerBound)
        try writer["UpperBound"].write(value.upperBound)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ViewSunElevationInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ViewSunElevationInput()
        value.lowerBound = try reader["LowerBound"].readIfPresent() ?? 0.0
        value.upperBound = try reader["UpperBound"].readIfPresent() ?? 0.0
        return value
    }
}

extension SageMakerGeospatialClientTypes.ViewSunAzimuthInput {

    static func write(value: SageMakerGeospatialClientTypes.ViewSunAzimuthInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LowerBound"].write(value.lowerBound)
        try writer["UpperBound"].write(value.upperBound)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ViewSunAzimuthInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ViewSunAzimuthInput()
        value.lowerBound = try reader["LowerBound"].readIfPresent() ?? 0.0
        value.upperBound = try reader["UpperBound"].readIfPresent() ?? 0.0
        return value
    }
}

extension SageMakerGeospatialClientTypes.ViewOffNadirInput {

    static func write(value: SageMakerGeospatialClientTypes.ViewOffNadirInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LowerBound"].write(value.lowerBound)
        try writer["UpperBound"].write(value.upperBound)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ViewOffNadirInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ViewOffNadirInput()
        value.lowerBound = try reader["LowerBound"].readIfPresent() ?? 0.0
        value.upperBound = try reader["UpperBound"].readIfPresent() ?? 0.0
        return value
    }
}

extension SageMakerGeospatialClientTypes.EoCloudCoverInput {

    static func write(value: SageMakerGeospatialClientTypes.EoCloudCoverInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LowerBound"].write(value.lowerBound)
        try writer["UpperBound"].write(value.upperBound)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.EoCloudCoverInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.EoCloudCoverInput()
        value.lowerBound = try reader["LowerBound"].readIfPresent() ?? 0.0
        value.upperBound = try reader["UpperBound"].readIfPresent() ?? 0.0
        return value
    }
}

extension SageMakerGeospatialClientTypes.AreaOfInterest {

    static func write(value: SageMakerGeospatialClientTypes.AreaOfInterest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .areaofinterestgeometry(areaofinterestgeometry):
                try writer["AreaOfInterestGeometry"].write(areaofinterestgeometry, with: SageMakerGeospatialClientTypes.AreaOfInterestGeometry.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.AreaOfInterest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "AreaOfInterestGeometry":
                return .areaofinterestgeometry(try reader["AreaOfInterestGeometry"].read(with: SageMakerGeospatialClientTypes.AreaOfInterestGeometry.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerGeospatialClientTypes.AreaOfInterestGeometry {

    static func write(value: SageMakerGeospatialClientTypes.AreaOfInterestGeometry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .multipolygongeometry(multipolygongeometry):
                try writer["MultiPolygonGeometry"].write(multipolygongeometry, with: SageMakerGeospatialClientTypes.MultiPolygonGeometryInput.write(value:to:))
            case let .polygongeometry(polygongeometry):
                try writer["PolygonGeometry"].write(polygongeometry, with: SageMakerGeospatialClientTypes.PolygonGeometryInput.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.AreaOfInterestGeometry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "PolygonGeometry":
                return .polygongeometry(try reader["PolygonGeometry"].read(with: SageMakerGeospatialClientTypes.PolygonGeometryInput.read(from:)))
            case "MultiPolygonGeometry":
                return .multipolygongeometry(try reader["MultiPolygonGeometry"].read(with: SageMakerGeospatialClientTypes.MultiPolygonGeometryInput.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerGeospatialClientTypes.MultiPolygonGeometryInput {

    static func write(value: SageMakerGeospatialClientTypes.MultiPolygonGeometryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Coordinates"].writeList(value.coordinates, memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeDouble(value:to:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.MultiPolygonGeometryInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.MultiPolygonGeometryInput()
        value.coordinates = try reader["Coordinates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerGeospatialClientTypes.PolygonGeometryInput {

    static func write(value: SageMakerGeospatialClientTypes.PolygonGeometryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Coordinates"].writeList(value.coordinates, memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeDouble(value:to:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.PolygonGeometryInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.PolygonGeometryInput()
        value.coordinates = try reader["Coordinates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerGeospatialClientTypes.TimeRangeFilterOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.TimeRangeFilterOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.TimeRangeFilterOutput()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerGeospatialClientTypes.JobConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.JobConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .bandmathconfig(bandmathconfig):
                try writer["BandMathConfig"].write(bandmathconfig, with: SageMakerGeospatialClientTypes.BandMathConfigInput.write(value:to:))
            case let .cloudmaskingconfig(cloudmaskingconfig):
                try writer["CloudMaskingConfig"].write(cloudmaskingconfig, with: SageMakerGeospatialClientTypes.CloudMaskingConfigInput.write(value:to:))
            case let .cloudremovalconfig(cloudremovalconfig):
                try writer["CloudRemovalConfig"].write(cloudremovalconfig, with: SageMakerGeospatialClientTypes.CloudRemovalConfigInput.write(value:to:))
            case let .geomosaicconfig(geomosaicconfig):
                try writer["GeoMosaicConfig"].write(geomosaicconfig, with: SageMakerGeospatialClientTypes.GeoMosaicConfigInput.write(value:to:))
            case let .landcoversegmentationconfig(landcoversegmentationconfig):
                try writer["LandCoverSegmentationConfig"].write(landcoversegmentationconfig, with: SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput.write(value:to:))
            case let .resamplingconfig(resamplingconfig):
                try writer["ResamplingConfig"].write(resamplingconfig, with: SageMakerGeospatialClientTypes.ResamplingConfigInput.write(value:to:))
            case let .stackconfig(stackconfig):
                try writer["StackConfig"].write(stackconfig, with: SageMakerGeospatialClientTypes.StackConfigInput.write(value:to:))
            case let .temporalstatisticsconfig(temporalstatisticsconfig):
                try writer["TemporalStatisticsConfig"].write(temporalstatisticsconfig, with: SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput.write(value:to:))
            case let .zonalstatisticsconfig(zonalstatisticsconfig):
                try writer["ZonalStatisticsConfig"].write(zonalstatisticsconfig, with: SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.JobConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "BandMathConfig":
                return .bandmathconfig(try reader["BandMathConfig"].read(with: SageMakerGeospatialClientTypes.BandMathConfigInput.read(from:)))
            case "ResamplingConfig":
                return .resamplingconfig(try reader["ResamplingConfig"].read(with: SageMakerGeospatialClientTypes.ResamplingConfigInput.read(from:)))
            case "TemporalStatisticsConfig":
                return .temporalstatisticsconfig(try reader["TemporalStatisticsConfig"].read(with: SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput.read(from:)))
            case "CloudRemovalConfig":
                return .cloudremovalconfig(try reader["CloudRemovalConfig"].read(with: SageMakerGeospatialClientTypes.CloudRemovalConfigInput.read(from:)))
            case "ZonalStatisticsConfig":
                return .zonalstatisticsconfig(try reader["ZonalStatisticsConfig"].read(with: SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput.read(from:)))
            case "GeoMosaicConfig":
                return .geomosaicconfig(try reader["GeoMosaicConfig"].read(with: SageMakerGeospatialClientTypes.GeoMosaicConfigInput.read(from:)))
            case "StackConfig":
                return .stackconfig(try reader["StackConfig"].read(with: SageMakerGeospatialClientTypes.StackConfigInput.read(from:)))
            case "CloudMaskingConfig":
                return .cloudmaskingconfig(try reader["CloudMaskingConfig"].read(with: SageMakerGeospatialClientTypes.CloudMaskingConfigInput.read(from:)))
            case "LandCoverSegmentationConfig":
                return .landcoversegmentationconfig(try reader["LandCoverSegmentationConfig"].read(with: SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return SageMakerGeospatialClientTypes.LandCoverSegmentationConfigInput()
    }
}

extension SageMakerGeospatialClientTypes.CloudMaskingConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.CloudMaskingConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.CloudMaskingConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return SageMakerGeospatialClientTypes.CloudMaskingConfigInput()
    }
}

extension SageMakerGeospatialClientTypes.StackConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.StackConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OutputResolution"].write(value.outputResolution, with: SageMakerGeospatialClientTypes.OutputResolutionStackInput.write(value:to:))
        try writer["TargetBands"].writeList(value.targetBands, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.StackConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.StackConfigInput()
        value.outputResolution = try reader["OutputResolution"].readIfPresent(with: SageMakerGeospatialClientTypes.OutputResolutionStackInput.read(from:))
        value.targetBands = try reader["TargetBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.OutputResolutionStackInput {

    static func write(value: SageMakerGeospatialClientTypes.OutputResolutionStackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Predefined"].write(value.predefined)
        try writer["UserDefined"].write(value.userDefined, with: SageMakerGeospatialClientTypes.UserDefined.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.OutputResolutionStackInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.OutputResolutionStackInput()
        value.predefined = try reader["Predefined"].readIfPresent()
        value.userDefined = try reader["UserDefined"].readIfPresent(with: SageMakerGeospatialClientTypes.UserDefined.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.UserDefined {

    static func write(value: SageMakerGeospatialClientTypes.UserDefined?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Unit"].write(value.unit)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.UserDefined {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.UserDefined()
        value.value = try reader["Value"].readIfPresent() ?? 0.0
        value.unit = try reader["Unit"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerGeospatialClientTypes.GeoMosaicConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.GeoMosaicConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["TargetBands"].writeList(value.targetBands, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.GeoMosaicConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.GeoMosaicConfigInput()
        value.algorithmName = try reader["AlgorithmName"].readIfPresent()
        value.targetBands = try reader["TargetBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerGeospatialClientTypes.ZonalStatistics>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetBands"].writeList(value.targetBands, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ZoneS3Path"].write(value.zoneS3Path)
        try writer["ZoneS3PathKmsKeyId"].write(value.zoneS3PathKmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ZonalStatisticsConfigInput()
        value.zoneS3Path = try reader["ZoneS3Path"].readIfPresent() ?? ""
        value.statistics = try reader["Statistics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerGeospatialClientTypes.ZonalStatistics>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.targetBands = try reader["TargetBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.zoneS3PathKmsKeyId = try reader["ZoneS3PathKmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.CloudRemovalConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.CloudRemovalConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["InterpolationValue"].write(value.interpolationValue)
        try writer["TargetBands"].writeList(value.targetBands, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.CloudRemovalConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.CloudRemovalConfigInput()
        value.algorithmName = try reader["AlgorithmName"].readIfPresent()
        value.interpolationValue = try reader["InterpolationValue"].readIfPresent()
        value.targetBands = try reader["TargetBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupBy"].write(value.groupBy)
        try writer["Statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerGeospatialClientTypes.TemporalStatistics>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetBands"].writeList(value.targetBands, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.TemporalStatisticsConfigInput()
        value.groupBy = try reader["GroupBy"].readIfPresent()
        value.statistics = try reader["Statistics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerGeospatialClientTypes.TemporalStatistics>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.targetBands = try reader["TargetBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.ResamplingConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.ResamplingConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["OutputResolution"].write(value.outputResolution, with: SageMakerGeospatialClientTypes.OutputResolutionResamplingInput.write(value:to:))
        try writer["TargetBands"].writeList(value.targetBands, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ResamplingConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ResamplingConfigInput()
        value.outputResolution = try reader["OutputResolution"].readIfPresent(with: SageMakerGeospatialClientTypes.OutputResolutionResamplingInput.read(from:))
        value.algorithmName = try reader["AlgorithmName"].readIfPresent()
        value.targetBands = try reader["TargetBands"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.OutputResolutionResamplingInput {

    static func write(value: SageMakerGeospatialClientTypes.OutputResolutionResamplingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["UserDefined"].write(value.userDefined, with: SageMakerGeospatialClientTypes.UserDefined.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.OutputResolutionResamplingInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.OutputResolutionResamplingInput()
        value.userDefined = try reader["UserDefined"].readIfPresent(with: SageMakerGeospatialClientTypes.UserDefined.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.BandMathConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.BandMathConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomIndices"].write(value.customIndices, with: SageMakerGeospatialClientTypes.CustomIndicesInput.write(value:to:))
        try writer["PredefinedIndices"].writeList(value.predefinedIndices, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.BandMathConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.BandMathConfigInput()
        value.predefinedIndices = try reader["PredefinedIndices"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.customIndices = try reader["CustomIndices"].readIfPresent(with: SageMakerGeospatialClientTypes.CustomIndicesInput.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.CustomIndicesInput {

    static func write(value: SageMakerGeospatialClientTypes.CustomIndicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Operations"].writeList(value.operations, memberWritingClosure: SageMakerGeospatialClientTypes.Operation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.CustomIndicesInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.CustomIndicesInput()
        value.operations = try reader["Operations"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.Operation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.Operation {

    static func write(value: SageMakerGeospatialClientTypes.Operation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Equation"].write(value.equation)
        try writer["Name"].write(value.name)
        try writer["OutputType"].write(value.outputType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.Operation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.Operation()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.equation = try reader["Equation"].readIfPresent() ?? ""
        value.outputType = try reader["OutputType"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.OutputBand {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.OutputBand {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.OutputBand()
        value.bandName = try reader["BandName"].readIfPresent() ?? ""
        value.outputDataType = try reader["OutputDataType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerGeospatialClientTypes.EarthObservationJobErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.EarthObservationJobErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.EarthObservationJobErrorDetails()
        value.type = try reader["Type"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.ExportErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ExportErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ExportErrorDetails()
        value.exportResults = try reader["ExportResults"].readIfPresent(with: SageMakerGeospatialClientTypes.ExportErrorDetailsOutput.read(from:))
        value.exportSourceImages = try reader["ExportSourceImages"].readIfPresent(with: SageMakerGeospatialClientTypes.ExportErrorDetailsOutput.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.ExportErrorDetailsOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ExportErrorDetailsOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ExportErrorDetailsOutput()
        value.type = try reader["Type"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.Filter {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.Filter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.Filter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? ""
        value.minimum = try reader["Minimum"].readIfPresent()
        value.maximum = try reader["Maximum"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig {

    static func write(value: SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceConfig"].write(value.dataSourceConfig, with: SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput.write(value:to:))
        try writer["DocumentType"].write(value.documentType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.VectorEnrichmentJobInputConfig()
        value.documentType = try reader["DocumentType"].readIfPresent() ?? .sdkUnknown("")
        value.dataSourceConfig = try reader["DataSourceConfig"].readIfPresent(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .s3data(s3data):
                try writer["S3Data"].write(s3data, with: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.VectorEnrichmentJobDataSourceConfigInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "S3Data":
                return .s3data(try reader["S3Data"].read(with: SageMakerGeospatialClientTypes.VectorEnrichmentJobS3Data.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig {

    static func write(value: SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .mapmatchingconfig(mapmatchingconfig):
                try writer["MapMatchingConfig"].write(mapmatchingconfig, with: SageMakerGeospatialClientTypes.MapMatchingConfig.write(value:to:))
            case let .reversegeocodingconfig(reversegeocodingconfig):
                try writer["ReverseGeocodingConfig"].write(reversegeocodingconfig, with: SageMakerGeospatialClientTypes.ReverseGeocodingConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.VectorEnrichmentJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "ReverseGeocodingConfig":
                return .reversegeocodingconfig(try reader["ReverseGeocodingConfig"].read(with: SageMakerGeospatialClientTypes.ReverseGeocodingConfig.read(from:)))
            case "MapMatchingConfig":
                return .mapmatchingconfig(try reader["MapMatchingConfig"].read(with: SageMakerGeospatialClientTypes.MapMatchingConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerGeospatialClientTypes.MapMatchingConfig {

    static func write(value: SageMakerGeospatialClientTypes.MapMatchingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdAttributeName"].write(value.idAttributeName)
        try writer["TimestampAttributeName"].write(value.timestampAttributeName)
        try writer["XAttributeName"].write(value.xAttributeName)
        try writer["YAttributeName"].write(value.yAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.MapMatchingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.MapMatchingConfig()
        value.idAttributeName = try reader["IdAttributeName"].readIfPresent() ?? ""
        value.yAttributeName = try reader["YAttributeName"].readIfPresent() ?? ""
        value.xAttributeName = try reader["XAttributeName"].readIfPresent() ?? ""
        value.timestampAttributeName = try reader["TimestampAttributeName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerGeospatialClientTypes.ReverseGeocodingConfig {

    static func write(value: SageMakerGeospatialClientTypes.ReverseGeocodingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["XAttributeName"].write(value.xAttributeName)
        try writer["YAttributeName"].write(value.yAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ReverseGeocodingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ReverseGeocodingConfig()
        value.yAttributeName = try reader["YAttributeName"].readIfPresent() ?? ""
        value.xAttributeName = try reader["XAttributeName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.VectorEnrichmentJobErrorDetails()
        value.errorType = try reader["ErrorType"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.VectorEnrichmentJobExportErrorDetails()
        value.type = try reader["Type"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.ListEarthObservationJobOutputConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ListEarthObservationJobOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ListEarthObservationJobOutputConfig()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent() ?? 0
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.operationType = try reader["OperationType"].readIfPresent() ?? ""
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.RasterDataCollectionMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.RasterDataCollectionMetadata()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.description = try reader["Description"].readIfPresent() ?? ""
        value.descriptionPageUrl = try reader["DescriptionPageUrl"].readIfPresent()
        value.supportedFilters = try reader["SupportedFilters"].readListIfPresent(memberReadingClosure: SageMakerGeospatialClientTypes.Filter.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.ListVectorEnrichmentJobOutputConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ListVectorEnrichmentJobOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ListVectorEnrichmentJobOutputConfig()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent() ?? 0
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerGeospatialClientTypes.ItemSource {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.ItemSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.ItemSource()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.geometry = try reader["Geometry"].readIfPresent(with: SageMakerGeospatialClientTypes.Geometry.read(from:))
        value.assets = try reader["Assets"].readMapIfPresent(valueReadingClosure: SageMakerGeospatialClientTypes.AssetValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.dateTime = try reader["DateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.properties = try reader["Properties"].readIfPresent(with: SageMakerGeospatialClientTypes.Properties.read(from:))
        return value
    }
}

extension SageMakerGeospatialClientTypes.Properties {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.Properties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.Properties()
        value.eoCloudCover = try reader["EoCloudCover"].readIfPresent()
        value.viewOffNadir = try reader["ViewOffNadir"].readIfPresent()
        value.viewSunAzimuth = try reader["ViewSunAzimuth"].readIfPresent()
        value.viewSunElevation = try reader["ViewSunElevation"].readIfPresent()
        value.platform = try reader["Platform"].readIfPresent()
        value.landsatCloudCoverLand = try reader["LandsatCloudCoverLand"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.AssetValue {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.AssetValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.AssetValue()
        value.href = try reader["Href"].readIfPresent()
        return value
    }
}

extension SageMakerGeospatialClientTypes.Geometry {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerGeospatialClientTypes.Geometry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerGeospatialClientTypes.Geometry()
        value.type = try reader["Type"].readIfPresent() ?? ""
        value.coordinates = try reader["Coordinates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionQueryWithBandFilterInput {

    static func write(value: SageMakerGeospatialClientTypes.RasterDataCollectionQueryWithBandFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AreaOfInterest"].write(value.areaOfInterest, with: SageMakerGeospatialClientTypes.AreaOfInterest.write(value:to:))
        try writer["BandFilter"].writeList(value.bandFilter, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PropertyFilters"].write(value.propertyFilters, with: SageMakerGeospatialClientTypes.PropertyFilters.write(value:to:))
        try writer["TimeRangeFilter"].write(value.timeRangeFilter, with: SageMakerGeospatialClientTypes.TimeRangeFilterInput.write(value:to:))
    }
}

extension SageMakerGeospatialClientTypes.TimeRangeFilterInput {

    static func write(value: SageMakerGeospatialClientTypes.TimeRangeFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension SageMakerGeospatialClientTypes.InputConfigInput {

    static func write(value: SageMakerGeospatialClientTypes.InputConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PreviousEarthObservationJobArn"].write(value.previousEarthObservationJobArn)
        try writer["RasterDataCollectionQuery"].write(value.rasterDataCollectionQuery, with: SageMakerGeospatialClientTypes.RasterDataCollectionQueryInput.write(value:to:))
    }
}

extension SageMakerGeospatialClientTypes.RasterDataCollectionQueryInput {

    static func write(value: SageMakerGeospatialClientTypes.RasterDataCollectionQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AreaOfInterest"].write(value.areaOfInterest, with: SageMakerGeospatialClientTypes.AreaOfInterest.write(value:to:))
        try writer["PropertyFilters"].write(value.propertyFilters, with: SageMakerGeospatialClientTypes.PropertyFilters.write(value:to:))
        try writer["RasterDataCollectionArn"].write(value.rasterDataCollectionArn)
        try writer["TimeRangeFilter"].write(value.timeRangeFilter, with: SageMakerGeospatialClientTypes.TimeRangeFilterInput.write(value:to:))
    }
}

public enum SageMakerGeospatialClientTypes {}
