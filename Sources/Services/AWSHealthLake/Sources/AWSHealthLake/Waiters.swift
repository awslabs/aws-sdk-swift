//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class SmithyWaitersAPI.Waiter
import enum SmithyWaitersAPI.JMESUtils
import struct SmithyWaitersAPI.WaiterConfiguration
import struct SmithyWaitersAPI.WaiterOptions
import struct SmithyWaitersAPI.WaiterOutcome

extension HealthLakeClient {

    static func fhirDatastoreActiveWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRDatastoreInput, DescribeFHIRDatastoreOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRDatastoreInput, DescribeFHIRDatastoreOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFHIRDatastoreInput, result: Swift.Result<DescribeFHIRDatastoreOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DatastoreProperties.DatastoreStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ACTIVE"
                guard case .success(let output) = result else { return false }
                let datastoreProperties = output.datastoreProperties
                let datastoreStatus = datastoreProperties?.datastoreStatus
                return SmithyWaitersAPI.JMESUtils.compare(datastoreStatus, ==, "ACTIVE")
            }),
            .init(state: .failure, matcher: { (input: DescribeFHIRDatastoreInput, result: Swift.Result<DescribeFHIRDatastoreOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DatastoreProperties.DatastoreStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "CREATE_FAILED"
                guard case .success(let output) = result else { return false }
                let datastoreProperties = output.datastoreProperties
                let datastoreStatus = datastoreProperties?.datastoreStatus
                return SmithyWaitersAPI.JMESUtils.compare(datastoreStatus, ==, "CREATE_FAILED")
            }),
            .init(state: .failure, matcher: { (input: DescribeFHIRDatastoreInput, result: Swift.Result<DescribeFHIRDatastoreOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DatastoreProperties.DatastoreStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "DELETED"
                guard case .success(let output) = result else { return false }
                let datastoreProperties = output.datastoreProperties
                let datastoreStatus = datastoreProperties?.datastoreStatus
                return SmithyWaitersAPI.JMESUtils.compare(datastoreStatus, ==, "DELETED")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRDatastoreInput, DescribeFHIRDatastoreOutput>(acceptors: acceptors, minDelay: 60.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FHIRDatastoreActive event on the describeFHIRDatastore operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFHIRDatastoreInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFHIRDatastoreActive(options: SmithyWaitersAPI.WaiterOptions, input: DescribeFHIRDatastoreInput) async throws -> SmithyWaitersAPI.WaiterOutcome<DescribeFHIRDatastoreOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.fhirDatastoreActiveWaiterConfig(), operation: self.describeFHIRDatastore(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func fhirDatastoreDeletedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRDatastoreInput, DescribeFHIRDatastoreOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRDatastoreInput, DescribeFHIRDatastoreOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFHIRDatastoreInput, result: Swift.Result<DescribeFHIRDatastoreOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "DatastoreProperties.DatastoreStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "DELETED"
                guard case .success(let output) = result else { return false }
                let datastoreProperties = output.datastoreProperties
                let datastoreStatus = datastoreProperties?.datastoreStatus
                return SmithyWaitersAPI.JMESUtils.compare(datastoreStatus, ==, "DELETED")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRDatastoreInput, DescribeFHIRDatastoreOutput>(acceptors: acceptors, minDelay: 120.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FHIRDatastoreDeleted event on the describeFHIRDatastore operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFHIRDatastoreInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFHIRDatastoreDeleted(options: SmithyWaitersAPI.WaiterOptions, input: DescribeFHIRDatastoreInput) async throws -> SmithyWaitersAPI.WaiterOutcome<DescribeFHIRDatastoreOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.fhirDatastoreDeletedWaiterConfig(), operation: self.describeFHIRDatastore(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func fhirExportJobCompletedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRExportJobInput, DescribeFHIRExportJobOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRExportJobInput, DescribeFHIRExportJobOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFHIRExportJobInput, result: Swift.Result<DescribeFHIRExportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ExportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "COMPLETED"
                guard case .success(let output) = result else { return false }
                let exportJobProperties = output.exportJobProperties
                let jobStatus = exportJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "COMPLETED")
            }),
            .init(state: .success, matcher: { (input: DescribeFHIRExportJobInput, result: Swift.Result<DescribeFHIRExportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ExportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "COMPLETED_WITH_ERRORS"
                guard case .success(let output) = result else { return false }
                let exportJobProperties = output.exportJobProperties
                let jobStatus = exportJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "COMPLETED_WITH_ERRORS")
            }),
            .init(state: .failure, matcher: { (input: DescribeFHIRExportJobInput, result: Swift.Result<DescribeFHIRExportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ExportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "CANCEL_COMPLETED"
                guard case .success(let output) = result else { return false }
                let exportJobProperties = output.exportJobProperties
                let jobStatus = exportJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "CANCEL_COMPLETED")
            }),
            .init(state: .failure, matcher: { (input: DescribeFHIRExportJobInput, result: Swift.Result<DescribeFHIRExportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ExportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let exportJobProperties = output.exportJobProperties
                let jobStatus = exportJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "FAILED")
            }),
            .init(state: .failure, matcher: { (input: DescribeFHIRExportJobInput, result: Swift.Result<DescribeFHIRExportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ExportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "CANCEL_FAILED"
                guard case .success(let output) = result else { return false }
                let exportJobProperties = output.exportJobProperties
                let jobStatus = exportJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "CANCEL_FAILED")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRExportJobInput, DescribeFHIRExportJobOutput>(acceptors: acceptors, minDelay: 120.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FHIRExportJobCompleted event on the describeFHIRExportJob operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFHIRExportJobInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFHIRExportJobCompleted(options: SmithyWaitersAPI.WaiterOptions, input: DescribeFHIRExportJobInput) async throws -> SmithyWaitersAPI.WaiterOutcome<DescribeFHIRExportJobOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.fhirExportJobCompletedWaiterConfig(), operation: self.describeFHIRExportJob(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func fhirImportJobCompletedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRImportJobInput, DescribeFHIRImportJobOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRImportJobInput, DescribeFHIRImportJobOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFHIRImportJobInput, result: Swift.Result<DescribeFHIRImportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ImportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "COMPLETED"
                guard case .success(let output) = result else { return false }
                let importJobProperties = output.importJobProperties
                let jobStatus = importJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "COMPLETED")
            }),
            .init(state: .success, matcher: { (input: DescribeFHIRImportJobInput, result: Swift.Result<DescribeFHIRImportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ImportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "COMPLETED_WITH_ERRORS"
                guard case .success(let output) = result else { return false }
                let importJobProperties = output.importJobProperties
                let jobStatus = importJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "COMPLETED_WITH_ERRORS")
            }),
            .init(state: .failure, matcher: { (input: DescribeFHIRImportJobInput, result: Swift.Result<DescribeFHIRImportJobOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ImportJobProperties.JobStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let importJobProperties = output.importJobProperties
                let jobStatus = importJobProperties?.jobStatus
                return SmithyWaitersAPI.JMESUtils.compare(jobStatus, ==, "FAILED")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<DescribeFHIRImportJobInput, DescribeFHIRImportJobOutput>(acceptors: acceptors, minDelay: 120.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FHIRImportJobCompleted event on the describeFHIRImportJob operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFHIRImportJobInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFHIRImportJobCompleted(options: SmithyWaitersAPI.WaiterOptions, input: DescribeFHIRImportJobInput) async throws -> SmithyWaitersAPI.WaiterOutcome<DescribeFHIRImportJobOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.fhirImportJobCompletedWaiterConfig(), operation: self.describeFHIRImportJob(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
