// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListFHIRDatastoresOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFHIRDatastoresInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFHIRDatastoresOutputResponse`
extension HealthLakeClient {
    public func listFHIRDatastoresPaginated(input: ListFHIRDatastoresInput) -> ClientRuntime.PaginatorSequence<ListFHIRDatastoresInput, ListFHIRDatastoresOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFHIRDatastoresInput, ListFHIRDatastoresOutputResponse>(input: input, inputKey: \ListFHIRDatastoresInput.nextToken, outputKey: \ListFHIRDatastoresOutputResponse.nextToken, paginationFunction: self.listFHIRDatastores(input:))
    }
}

extension ListFHIRDatastoresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFHIRDatastoresInput {
        return ListFHIRDatastoresInput(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListFHIRExportJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFHIRExportJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFHIRExportJobsOutputResponse`
extension HealthLakeClient {
    public func listFHIRExportJobsPaginated(input: ListFHIRExportJobsInput) -> ClientRuntime.PaginatorSequence<ListFHIRExportJobsInput, ListFHIRExportJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFHIRExportJobsInput, ListFHIRExportJobsOutputResponse>(input: input, inputKey: \ListFHIRExportJobsInput.nextToken, outputKey: \ListFHIRExportJobsOutputResponse.nextToken, paginationFunction: self.listFHIRExportJobs(input:))
    }
}

extension ListFHIRExportJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFHIRExportJobsInput {
        return ListFHIRExportJobsInput(
            datastoreId: self.datastoreId,
            jobName: self.jobName,
            jobStatus: self.jobStatus,
            maxResults: self.maxResults,
            nextToken: token,
            submittedAfter: self.submittedAfter,
            submittedBefore: self.submittedBefore
        )}
}

/// Paginate over `[ListFHIRImportJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFHIRImportJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFHIRImportJobsOutputResponse`
extension HealthLakeClient {
    public func listFHIRImportJobsPaginated(input: ListFHIRImportJobsInput) -> ClientRuntime.PaginatorSequence<ListFHIRImportJobsInput, ListFHIRImportJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFHIRImportJobsInput, ListFHIRImportJobsOutputResponse>(input: input, inputKey: \ListFHIRImportJobsInput.nextToken, outputKey: \ListFHIRImportJobsOutputResponse.nextToken, paginationFunction: self.listFHIRImportJobs(input:))
    }
}

extension ListFHIRImportJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFHIRImportJobsInput {
        return ListFHIRImportJobsInput(
            datastoreId: self.datastoreId,
            jobName: self.jobName,
            jobStatus: self.jobStatus,
            maxResults: self.maxResults,
            nextToken: token,
            submittedAfter: self.submittedAfter,
            submittedBefore: self.submittedBefore
        )}
}
