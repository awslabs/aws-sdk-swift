// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[GetFindingsReportAccountSummaryOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetFindingsReportAccountSummaryInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetFindingsReportAccountSummaryOutputResponse`
extension CodeGuruProfilerClient {
    public func getFindingsReportAccountSummaryPaginated(input: GetFindingsReportAccountSummaryInput) -> ClientRuntime.PaginatorSequence<GetFindingsReportAccountSummaryInput, GetFindingsReportAccountSummaryOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetFindingsReportAccountSummaryInput, GetFindingsReportAccountSummaryOutputResponse>(input: input, inputKey: \GetFindingsReportAccountSummaryInput.nextToken, outputKey: \GetFindingsReportAccountSummaryOutputResponse.nextToken, paginationFunction: self.getFindingsReportAccountSummary(input:))
    }
}

extension GetFindingsReportAccountSummaryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetFindingsReportAccountSummaryInput {
        return GetFindingsReportAccountSummaryInput(
            dailyReportsOnly: self.dailyReportsOnly,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
