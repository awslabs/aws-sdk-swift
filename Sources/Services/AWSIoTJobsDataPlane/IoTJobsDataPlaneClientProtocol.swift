// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform remote troubleshooting operations. To create a job, you make a job document which is a description of the remote operations to be performed, and you specify a list of targets that should perform the operations. The targets can be individual things, thing groups or both. AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the execution of the job by downloading the job document, performing the operations it specifies, and reporting its progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and for all the targets of the job
public protocol IoTJobsDataPlaneClientProtocol {
    /// Gets details of a job execution.
    ///
    /// - Parameter DescribeJobExecutionInput : [no documentation found]
    ///
    /// - Returns: `DescribeJobExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CertificateValidationException` : The certificate is invalid.
    /// - `InvalidRequestException` : The contents of the request were invalid. For example, this code is returned when an UpdateJobExecution request contains invalid status details. The message contains details about the error.
    /// - `ResourceNotFoundException` : The specified resource does not exist.
    /// - `ServiceUnavailableException` : The service is temporarily unavailable.
    /// - `TerminalStateException` : The job is in a terminal state.
    /// - `ThrottlingException` : The rate exceeds the limit.
    func describeJobExecution(input: DescribeJobExecutionInput) async throws -> DescribeJobExecutionOutput
    /// Gets the list of all jobs for a thing that are not in a terminal status.
    ///
    /// - Parameter GetPendingJobExecutionsInput : [no documentation found]
    ///
    /// - Returns: `GetPendingJobExecutionsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CertificateValidationException` : The certificate is invalid.
    /// - `InvalidRequestException` : The contents of the request were invalid. For example, this code is returned when an UpdateJobExecution request contains invalid status details. The message contains details about the error.
    /// - `ResourceNotFoundException` : The specified resource does not exist.
    /// - `ServiceUnavailableException` : The service is temporarily unavailable.
    /// - `ThrottlingException` : The rate exceeds the limit.
    func getPendingJobExecutions(input: GetPendingJobExecutionsInput) async throws -> GetPendingJobExecutionsOutput
    /// Gets and starts the next pending (status IN_PROGRESS or QUEUED) job execution for a thing.
    ///
    /// - Parameter StartNextPendingJobExecutionInput : [no documentation found]
    ///
    /// - Returns: `StartNextPendingJobExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CertificateValidationException` : The certificate is invalid.
    /// - `InvalidRequestException` : The contents of the request were invalid. For example, this code is returned when an UpdateJobExecution request contains invalid status details. The message contains details about the error.
    /// - `ResourceNotFoundException` : The specified resource does not exist.
    /// - `ServiceUnavailableException` : The service is temporarily unavailable.
    /// - `ThrottlingException` : The rate exceeds the limit.
    func startNextPendingJobExecution(input: StartNextPendingJobExecutionInput) async throws -> StartNextPendingJobExecutionOutput
    /// Updates the status of a job execution.
    ///
    /// - Parameter UpdateJobExecutionInput : [no documentation found]
    ///
    /// - Returns: `UpdateJobExecutionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CertificateValidationException` : The certificate is invalid.
    /// - `InvalidRequestException` : The contents of the request were invalid. For example, this code is returned when an UpdateJobExecution request contains invalid status details. The message contains details about the error.
    /// - `InvalidStateTransitionException` : An update attempted to change the job execution to a state that is invalid because of the job execution's current state (for example, an attempt to change a request in state SUCCESS to state IN_PROGRESS). In this case, the body of the error message also contains the executionState field.
    /// - `ResourceNotFoundException` : The specified resource does not exist.
    /// - `ServiceUnavailableException` : The service is temporarily unavailable.
    /// - `ThrottlingException` : The rate exceeds the limit.
    func updateJobExecution(input: UpdateJobExecutionInput) async throws -> UpdateJobExecutionOutput
}

public enum IoTJobsDataPlaneClientTypes {}
