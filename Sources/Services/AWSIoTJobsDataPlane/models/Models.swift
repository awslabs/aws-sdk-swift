// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CertificateValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CertificateValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The certificate is invalid.
public struct CertificateValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Additional information about the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CertificateValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CertificateValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DescribeJobExecutionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let executionNumber = executionNumber {
                let executionNumberQueryItem = ClientRuntime.URLQueryItem(name: "executionNumber".urlPercentEncoding(), value: Swift.String(executionNumber).urlPercentEncoding())
                items.append(executionNumberQueryItem)
            }
            if let includeJobDocument = includeJobDocument {
                let includeJobDocumentQueryItem = ClientRuntime.URLQueryItem(name: "includeJobDocument".urlPercentEncoding(), value: Swift.String(includeJobDocument).urlPercentEncoding())
                items.append(includeJobDocumentQueryItem)
            }
            return items
        }
    }
}

extension DescribeJobExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let thingName = thingName else {
            return nil
        }
        guard let jobId = jobId else {
            return nil
        }
        return "/things/\(thingName.urlPercentEncoding())/jobs/\(jobId.urlPercentEncoding())"
    }
}

public struct DescribeJobExecutionInput: Swift.Equatable {
    /// Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.
    public var executionNumber: Swift.Int?
    /// Optional. When set to true, the response contains the job document. The default is false.
    public var includeJobDocument: Swift.Bool?
    /// The unique identifier assigned to this job when it was created.
    /// This member is required.
    public var jobId: Swift.String?
    /// The thing name associated with the device the job execution is running on.
    /// This member is required.
    public var thingName: Swift.String?

    public init (
        executionNumber: Swift.Int? = nil,
        includeJobDocument: Swift.Bool? = nil,
        jobId: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.executionNumber = executionNumber
        self.includeJobDocument = includeJobDocument
        self.jobId = jobId
        self.thingName = thingName
    }
}

struct DescribeJobExecutionInputBody: Swift.Equatable {
}

extension DescribeJobExecutionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeJobExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalStateException" : self = .terminalStateException(try TerminalStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeJobExecutionOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case terminalStateException(TerminalStateException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeJobExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.execution = output.execution
        } else {
            self.execution = nil
        }
    }
}

public struct DescribeJobExecutionOutputResponse: Swift.Equatable {
    /// Contains data about a job execution.
    public var execution: IoTJobsDataPlaneClientTypes.JobExecution?

    public init (
        execution: IoTJobsDataPlaneClientTypes.JobExecution? = nil
    )
    {
        self.execution = execution
    }
}

struct DescribeJobExecutionOutputResponseBody: Swift.Equatable {
    let execution: IoTJobsDataPlaneClientTypes.JobExecution?
}

extension DescribeJobExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case execution
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionDecoded = try containerValues.decodeIfPresent(IoTJobsDataPlaneClientTypes.JobExecution.self, forKey: .execution)
        execution = executionDecoded
    }
}

extension GetPendingJobExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let thingName = thingName else {
            return nil
        }
        return "/things/\(thingName.urlPercentEncoding())/jobs"
    }
}

public struct GetPendingJobExecutionsInput: Swift.Equatable {
    /// The name of the thing that is executing the job.
    /// This member is required.
    public var thingName: Swift.String?

    public init (
        thingName: Swift.String? = nil
    )
    {
        self.thingName = thingName
    }
}

struct GetPendingJobExecutionsInputBody: Swift.Equatable {
}

extension GetPendingJobExecutionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPendingJobExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPendingJobExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPendingJobExecutionsOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPendingJobExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPendingJobExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inProgressJobs = output.inProgressJobs
            self.queuedJobs = output.queuedJobs
        } else {
            self.inProgressJobs = nil
            self.queuedJobs = nil
        }
    }
}

public struct GetPendingJobExecutionsOutputResponse: Swift.Equatable {
    /// A list of JobExecutionSummary objects with status IN_PROGRESS.
    public var inProgressJobs: [IoTJobsDataPlaneClientTypes.JobExecutionSummary]?
    /// A list of JobExecutionSummary objects with status QUEUED.
    public var queuedJobs: [IoTJobsDataPlaneClientTypes.JobExecutionSummary]?

    public init (
        inProgressJobs: [IoTJobsDataPlaneClientTypes.JobExecutionSummary]? = nil,
        queuedJobs: [IoTJobsDataPlaneClientTypes.JobExecutionSummary]? = nil
    )
    {
        self.inProgressJobs = inProgressJobs
        self.queuedJobs = queuedJobs
    }
}

struct GetPendingJobExecutionsOutputResponseBody: Swift.Equatable {
    let inProgressJobs: [IoTJobsDataPlaneClientTypes.JobExecutionSummary]?
    let queuedJobs: [IoTJobsDataPlaneClientTypes.JobExecutionSummary]?
}

extension GetPendingJobExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inProgressJobs
        case queuedJobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inProgressJobsContainer = try containerValues.decodeIfPresent([IoTJobsDataPlaneClientTypes.JobExecutionSummary?].self, forKey: .inProgressJobs)
        var inProgressJobsDecoded0:[IoTJobsDataPlaneClientTypes.JobExecutionSummary]? = nil
        if let inProgressJobsContainer = inProgressJobsContainer {
            inProgressJobsDecoded0 = [IoTJobsDataPlaneClientTypes.JobExecutionSummary]()
            for structure0 in inProgressJobsContainer {
                if let structure0 = structure0 {
                    inProgressJobsDecoded0?.append(structure0)
                }
            }
        }
        inProgressJobs = inProgressJobsDecoded0
        let queuedJobsContainer = try containerValues.decodeIfPresent([IoTJobsDataPlaneClientTypes.JobExecutionSummary?].self, forKey: .queuedJobs)
        var queuedJobsDecoded0:[IoTJobsDataPlaneClientTypes.JobExecutionSummary]? = nil
        if let queuedJobsContainer = queuedJobsContainer {
            queuedJobsDecoded0 = [IoTJobsDataPlaneClientTypes.JobExecutionSummary]()
            for structure0 in queuedJobsContainer {
                if let structure0 = structure0 {
                    queuedJobsDecoded0?.append(structure0)
                }
            }
        }
        queuedJobs = queuedJobsDecoded0
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The contents of the request were invalid. For example, this code is returned when an UpdateJobExecution request contains invalid status details. The message contains details about the error.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStateTransitionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidStateTransitionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An update attempted to change the job execution to a state that is invalid because of the job execution's current state (for example, an attempt to change a request in state SUCCESS to state IN_PROGRESS). In this case, the body of the error message also contains the executionState field.
public struct InvalidStateTransitionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStateTransitionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidStateTransitionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IoTJobsDataPlaneClientTypes.JobExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateSecondsBeforeTimedOut
        case executionNumber
        case jobDocument
        case jobId
        case lastUpdatedAt
        case queuedAt
        case startedAt
        case status
        case statusDetails
        case thingName
        case versionNumber
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateSecondsBeforeTimedOut = self.approximateSecondsBeforeTimedOut {
            try encodeContainer.encode(approximateSecondsBeforeTimedOut, forKey: .approximateSecondsBeforeTimedOut)
        }
        if let executionNumber = self.executionNumber {
            try encodeContainer.encode(executionNumber, forKey: .executionNumber)
        }
        if let jobDocument = self.jobDocument {
            try encodeContainer.encode(jobDocument, forKey: .jobDocument)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if lastUpdatedAt != 0 {
            try encodeContainer.encode(lastUpdatedAt, forKey: .lastUpdatedAt)
        }
        if queuedAt != 0 {
            try encodeContainer.encode(queuedAt, forKey: .queuedAt)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = statusDetails {
            var statusDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusDetails)
            for (dictKey0, detailsMap0) in statusDetails {
                try statusDetailsContainer.encode(detailsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let thingName = self.thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTJobsDataPlaneClientTypes.JobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .statusDetails)
        var statusDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let statusDetailsContainer = statusDetailsContainer {
            statusDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in statusDetailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    statusDetailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        statusDetails = statusDetailsDecoded0
        let queuedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedAt) ?? 0
        queuedAt = queuedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedAt) ?? 0
        lastUpdatedAt = lastUpdatedAtDecoded
        let approximateSecondsBeforeTimedOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateSecondsBeforeTimedOut)
        approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOutDecoded
        let versionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionNumber) ?? 0
        versionNumber = versionNumberDecoded
        let executionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionNumber)
        executionNumber = executionNumberDecoded
        let jobDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDocument)
        jobDocument = jobDocumentDecoded
    }
}

extension IoTJobsDataPlaneClientTypes {
    /// Contains data about a job execution.
    public struct JobExecution: Swift.Equatable {
        /// The estimated number of seconds that remain before the job execution status will be changed to TIMED_OUT.
        public var approximateSecondsBeforeTimedOut: Swift.Int?
        /// A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.
        public var executionNumber: Swift.Int?
        /// The content of the job document.
        public var jobDocument: Swift.String?
        /// The unique identifier you assigned to this job when it was created.
        public var jobId: Swift.String?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public var lastUpdatedAt: Swift.Int
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public var queuedAt: Swift.Int
        /// The time, in milliseconds since the epoch, when the job execution was started.
        public var startedAt: Swift.Int?
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public var status: IoTJobsDataPlaneClientTypes.JobExecutionStatus?
        /// A collection of name/value pairs that describe the status of the job execution.
        public var statusDetails: [Swift.String:Swift.String]?
        /// The name of the thing that is executing the job.
        public var thingName: Swift.String?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public var versionNumber: Swift.Int

        public init (
            approximateSecondsBeforeTimedOut: Swift.Int? = nil,
            executionNumber: Swift.Int? = nil,
            jobDocument: Swift.String? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedAt: Swift.Int = 0,
            queuedAt: Swift.Int = 0,
            startedAt: Swift.Int? = nil,
            status: IoTJobsDataPlaneClientTypes.JobExecutionStatus? = nil,
            statusDetails: [Swift.String:Swift.String]? = nil,
            thingName: Swift.String? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
            self.executionNumber = executionNumber
            self.jobDocument = jobDocument
            self.jobId = jobId
            self.lastUpdatedAt = lastUpdatedAt
            self.queuedAt = queuedAt
            self.startedAt = startedAt
            self.status = status
            self.statusDetails = statusDetails
            self.thingName = thingName
            self.versionNumber = versionNumber
        }
    }

}

extension IoTJobsDataPlaneClientTypes.JobExecutionState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
        case statusDetails
        case versionNumber
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = statusDetails {
            var statusDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusDetails)
            for (dictKey0, detailsMap0) in statusDetails {
                try statusDetailsContainer.encode(detailsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(IoTJobsDataPlaneClientTypes.JobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .statusDetails)
        var statusDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let statusDetailsContainer = statusDetailsContainer {
            statusDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in statusDetailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    statusDetailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        statusDetails = statusDetailsDecoded0
        let versionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionNumber) ?? 0
        versionNumber = versionNumberDecoded
    }
}

extension IoTJobsDataPlaneClientTypes {
    /// Contains data about the state of a job execution.
    public struct JobExecutionState: Swift.Equatable {
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public var status: IoTJobsDataPlaneClientTypes.JobExecutionStatus?
        /// A collection of name/value pairs that describe the status of the job execution.
        public var statusDetails: [Swift.String:Swift.String]?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public var versionNumber: Swift.Int

        public init (
            status: IoTJobsDataPlaneClientTypes.JobExecutionStatus? = nil,
            statusDetails: [Swift.String:Swift.String]? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.status = status
            self.statusDetails = statusDetails
            self.versionNumber = versionNumber
        }
    }

}

extension IoTJobsDataPlaneClientTypes {
    public enum JobExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case failed
        case inProgress
        case queued
        case rejected
        case removed
        case succeeded
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [JobExecutionStatus] {
            return [
                .canceled,
                .failed,
                .inProgress,
                .queued,
                .rejected,
                .removed,
                .succeeded,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case .rejected: return "REJECTED"
            case .removed: return "REMOVED"
            case .succeeded: return "SUCCEEDED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobExecutionStatus(rawValue: rawValue) ?? JobExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension IoTJobsDataPlaneClientTypes.JobExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionNumber
        case jobId
        case lastUpdatedAt
        case queuedAt
        case startedAt
        case versionNumber
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionNumber = self.executionNumber {
            try encodeContainer.encode(executionNumber, forKey: .executionNumber)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if lastUpdatedAt != 0 {
            try encodeContainer.encode(lastUpdatedAt, forKey: .lastUpdatedAt)
        }
        if queuedAt != 0 {
            try encodeContainer.encode(queuedAt, forKey: .queuedAt)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let queuedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedAt) ?? 0
        queuedAt = queuedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedAt) ?? 0
        lastUpdatedAt = lastUpdatedAtDecoded
        let versionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionNumber) ?? 0
        versionNumber = versionNumberDecoded
        let executionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionNumber)
        executionNumber = executionNumberDecoded
    }
}

extension IoTJobsDataPlaneClientTypes {
    /// Contains a subset of information about a job execution.
    public struct JobExecutionSummary: Swift.Equatable {
        /// A number that identifies a particular job execution on a particular device.
        public var executionNumber: Swift.Int?
        /// The unique identifier you assigned to this job when it was created.
        public var jobId: Swift.String?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public var lastUpdatedAt: Swift.Int
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public var queuedAt: Swift.Int
        /// The time, in milliseconds since the epoch, when the job execution started.
        public var startedAt: Swift.Int?
        /// The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.
        public var versionNumber: Swift.Int

        public init (
            executionNumber: Swift.Int? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedAt: Swift.Int = 0,
            queuedAt: Swift.Int = 0,
            startedAt: Swift.Int? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.executionNumber = executionNumber
            self.jobId = jobId
            self.lastUpdatedAt = lastUpdatedAt
            self.queuedAt = queuedAt
            self.startedAt = startedAt
            self.versionNumber = versionNumber
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource does not exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service is temporarily unavailable.
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StartNextPendingJobExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statusDetails
        case stepTimeoutInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statusDetails = statusDetails {
            var statusDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusDetails)
            for (dictKey0, detailsMap0) in statusDetails {
                try statusDetailsContainer.encode(detailsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let stepTimeoutInMinutes = self.stepTimeoutInMinutes {
            try encodeContainer.encode(stepTimeoutInMinutes, forKey: .stepTimeoutInMinutes)
        }
    }
}

extension StartNextPendingJobExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let thingName = thingName else {
            return nil
        }
        return "/things/\(thingName.urlPercentEncoding())/jobs/$next"
    }
}

public struct StartNextPendingJobExecutionInput: Swift.Equatable {
    /// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
    public var statusDetails: [Swift.String:Swift.String]?
    /// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by calling UpdateJobExecution, setting the status to IN_PROGRESS and specifying a new timeout value in field stepTimeoutInMinutes) the job execution status will be automatically set to TIMED_OUT. Note that setting this timeout has no effect on that job execution timeout which may have been specified when the job was created (CreateJob using field timeoutConfig).
    public var stepTimeoutInMinutes: Swift.Int?
    /// The name of the thing associated with the device.
    /// This member is required.
    public var thingName: Swift.String?

    public init (
        statusDetails: [Swift.String:Swift.String]? = nil,
        stepTimeoutInMinutes: Swift.Int? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.statusDetails = statusDetails
        self.stepTimeoutInMinutes = stepTimeoutInMinutes
        self.thingName = thingName
    }
}

struct StartNextPendingJobExecutionInputBody: Swift.Equatable {
    let statusDetails: [Swift.String:Swift.String]?
    let stepTimeoutInMinutes: Swift.Int?
}

extension StartNextPendingJobExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statusDetails
        case stepTimeoutInMinutes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .statusDetails)
        var statusDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let statusDetailsContainer = statusDetailsContainer {
            statusDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in statusDetailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    statusDetailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        statusDetails = statusDetailsDecoded0
        let stepTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepTimeoutInMinutes)
        stepTimeoutInMinutes = stepTimeoutInMinutesDecoded
    }
}

extension StartNextPendingJobExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartNextPendingJobExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartNextPendingJobExecutionOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartNextPendingJobExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartNextPendingJobExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.execution = output.execution
        } else {
            self.execution = nil
        }
    }
}

public struct StartNextPendingJobExecutionOutputResponse: Swift.Equatable {
    /// A JobExecution object.
    public var execution: IoTJobsDataPlaneClientTypes.JobExecution?

    public init (
        execution: IoTJobsDataPlaneClientTypes.JobExecution? = nil
    )
    {
        self.execution = execution
    }
}

struct StartNextPendingJobExecutionOutputResponseBody: Swift.Equatable {
    let execution: IoTJobsDataPlaneClientTypes.JobExecution?
}

extension StartNextPendingJobExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case execution
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionDecoded = try containerValues.decodeIfPresent(IoTJobsDataPlaneClientTypes.JobExecution.self, forKey: .execution)
        execution = executionDecoded
    }
}

extension TerminalStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TerminalStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The job is in a terminal state.
public struct TerminalStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TerminalStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TerminalStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.payload = output.payload
        } else {
            self.message = nil
            self.payload = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The rate exceeds the limit.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message associated with the exception.
    public var message: Swift.String?
    /// The payload associated with the exception.
    public var payload: ClientRuntime.Data?

    public init (
        message: Swift.String? = nil,
        payload: ClientRuntime.Data? = nil
    )
    {
        self.message = message
        self.payload = payload
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let payload: ClientRuntime.Data?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case payload
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
        payload = payloadDecoded
    }
}

extension UpdateJobExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionNumber
        case expectedVersion
        case includeJobDocument
        case includeJobExecutionState
        case status
        case statusDetails
        case stepTimeoutInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionNumber = self.executionNumber {
            try encodeContainer.encode(executionNumber, forKey: .executionNumber)
        }
        if let expectedVersion = self.expectedVersion {
            try encodeContainer.encode(expectedVersion, forKey: .expectedVersion)
        }
        if let includeJobDocument = self.includeJobDocument {
            try encodeContainer.encode(includeJobDocument, forKey: .includeJobDocument)
        }
        if let includeJobExecutionState = self.includeJobExecutionState {
            try encodeContainer.encode(includeJobExecutionState, forKey: .includeJobExecutionState)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = statusDetails {
            var statusDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusDetails)
            for (dictKey0, detailsMap0) in statusDetails {
                try statusDetailsContainer.encode(detailsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let stepTimeoutInMinutes = self.stepTimeoutInMinutes {
            try encodeContainer.encode(stepTimeoutInMinutes, forKey: .stepTimeoutInMinutes)
        }
    }
}

extension UpdateJobExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let thingName = thingName else {
            return nil
        }
        guard let jobId = jobId else {
            return nil
        }
        return "/things/\(thingName.urlPercentEncoding())/jobs/\(jobId.urlPercentEncoding())"
    }
}

public struct UpdateJobExecutionInput: Swift.Equatable {
    /// Optional. A number that identifies a particular job execution on a particular device.
    public var executionNumber: Swift.Int?
    /// Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
    public var expectedVersion: Swift.Int?
    /// Optional. When set to true, the response contains the job document. The default is false.
    public var includeJobDocument: Swift.Bool?
    /// Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
    public var includeJobExecutionState: Swift.Bool?
    /// The unique identifier assigned to this job when it was created.
    /// This member is required.
    public var jobId: Swift.String?
    /// The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
    /// This member is required.
    public var status: IoTJobsDataPlaneClientTypes.JobExecutionStatus?
    /// Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
    public var statusDetails: [Swift.String:Swift.String]?
    /// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling UpdateJobExecution, setting the status to IN_PROGRESS and specifying a new timeout value in this field) the job execution status will be automatically set to TIMED_OUT. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (CreateJob using field timeoutConfig).
    public var stepTimeoutInMinutes: Swift.Int?
    /// The name of the thing associated with the device.
    /// This member is required.
    public var thingName: Swift.String?

    public init (
        executionNumber: Swift.Int? = nil,
        expectedVersion: Swift.Int? = nil,
        includeJobDocument: Swift.Bool? = nil,
        includeJobExecutionState: Swift.Bool? = nil,
        jobId: Swift.String? = nil,
        status: IoTJobsDataPlaneClientTypes.JobExecutionStatus? = nil,
        statusDetails: [Swift.String:Swift.String]? = nil,
        stepTimeoutInMinutes: Swift.Int? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.executionNumber = executionNumber
        self.expectedVersion = expectedVersion
        self.includeJobDocument = includeJobDocument
        self.includeJobExecutionState = includeJobExecutionState
        self.jobId = jobId
        self.status = status
        self.statusDetails = statusDetails
        self.stepTimeoutInMinutes = stepTimeoutInMinutes
        self.thingName = thingName
    }
}

struct UpdateJobExecutionInputBody: Swift.Equatable {
    let status: IoTJobsDataPlaneClientTypes.JobExecutionStatus?
    let statusDetails: [Swift.String:Swift.String]?
    let stepTimeoutInMinutes: Swift.Int?
    let expectedVersion: Swift.Int?
    let includeJobExecutionState: Swift.Bool?
    let includeJobDocument: Swift.Bool?
    let executionNumber: Swift.Int?
}

extension UpdateJobExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionNumber
        case expectedVersion
        case includeJobDocument
        case includeJobExecutionState
        case status
        case statusDetails
        case stepTimeoutInMinutes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(IoTJobsDataPlaneClientTypes.JobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .statusDetails)
        var statusDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let statusDetailsContainer = statusDetailsContainer {
            statusDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in statusDetailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    statusDetailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        statusDetails = statusDetailsDecoded0
        let stepTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepTimeoutInMinutes)
        stepTimeoutInMinutes = stepTimeoutInMinutesDecoded
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
        let includeJobExecutionStateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeJobExecutionState)
        includeJobExecutionState = includeJobExecutionStateDecoded
        let includeJobDocumentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeJobDocument)
        includeJobDocument = includeJobDocumentDecoded
        let executionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionNumber)
        executionNumber = executionNumberDecoded
    }
}

extension UpdateJobExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJobExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateTransitionException" : self = .invalidStateTransitionException(try InvalidStateTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateJobExecutionOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case invalidRequestException(InvalidRequestException)
    case invalidStateTransitionException(InvalidStateTransitionException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJobExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateJobExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionState = output.executionState
            self.jobDocument = output.jobDocument
        } else {
            self.executionState = nil
            self.jobDocument = nil
        }
    }
}

public struct UpdateJobExecutionOutputResponse: Swift.Equatable {
    /// A JobExecutionState object.
    public var executionState: IoTJobsDataPlaneClientTypes.JobExecutionState?
    /// The contents of the Job Documents.
    public var jobDocument: Swift.String?

    public init (
        executionState: IoTJobsDataPlaneClientTypes.JobExecutionState? = nil,
        jobDocument: Swift.String? = nil
    )
    {
        self.executionState = executionState
        self.jobDocument = jobDocument
    }
}

struct UpdateJobExecutionOutputResponseBody: Swift.Equatable {
    let executionState: IoTJobsDataPlaneClientTypes.JobExecutionState?
    let jobDocument: Swift.String?
}

extension UpdateJobExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionState
        case jobDocument
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionStateDecoded = try containerValues.decodeIfPresent(IoTJobsDataPlaneClientTypes.JobExecutionState.self, forKey: .executionState)
        executionState = executionStateDecoded
        let jobDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDocument)
        jobDocument = jobDocumentDecoded
    }
}
