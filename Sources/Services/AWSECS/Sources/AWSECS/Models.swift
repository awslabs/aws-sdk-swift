//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// You don't have authorization to perform the requested action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ECSClientTypes {

    public enum AgentUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case staged
        case staging
        case updated
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [AgentUpdateStatus] {
            return [
                .failed,
                .pending,
                .staged,
                .staging,
                .updated,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .staged: return "STAGED"
            case .staging: return "STAGING"
            case .updated: return "UPDATED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// These errors are usually caused by a client action. This client action might be using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Or, it might be specifying an identifier that isn't valid. The following list includes additional causes for the error:
///
/// * The RunTask could not be processed because you use managed scaling and there is a capacity error because the quota of tasks in the PROVISIONING per cluster has been reached. For information about the service quotas, see [Amazon ECS service quotas](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-quotas.html).
public struct ClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified parameter isn't valid. Review the available parameters for the API request.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The limit for the resource was exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// These errors are usually caused by a server issue.
public struct ServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There's already a current Amazon ECS container agent update in progress on the container instance that's specified. If the container agent becomes disconnected while it's in a transitional stage, such as PENDING or STAGING, the update process can get stuck in that state. However, when the agent reconnects, it resumes where it stopped previously.
public struct UpdateInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UpdateInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ECSClientTypes {

    public enum ManagedDraining: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedDraining] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum ManagedScalingStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedScalingStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The managed scaling settings for the Auto Scaling group capacity provider. When managed scaling is turned on, Amazon ECS manages the scale-in and scale-out actions of the Auto Scaling group. Amazon ECS manages a target tracking scaling policy using an Amazon ECS managed CloudWatch metric with the specified targetCapacity value as the target value for the metric. For more information, see [Using managed scaling](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/asg-capacity-providers.html#asg-capacity-providers-managed-scaling) in the Amazon Elastic Container Service Developer Guide. If managed scaling is off, the user must manage the scaling of the Auto Scaling group.
    public struct ManagedScaling: Swift.Sendable {
        /// The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
        public var instanceWarmupPeriod: Swift.Int?
        /// The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. If this parameter is omitted, the default value of 10000 is used.
        public var maximumScalingStepSize: Swift.Int?
        /// The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. If this parameter is omitted, the default value of 1 is used. When additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size. If you use a capacity provider with an Auto Scaling group configured with more than one Amazon EC2 instance type or Availability Zone, Amazon ECS will scale up by the exact minimum scaling step size value and will ignore both the maximum scaling step size as well as the capacity demand.
        public var minimumScalingStepSize: Swift.Int?
        /// Determines whether to use managed scaling for the capacity provider.
        public var status: ECSClientTypes.ManagedScalingStatus?
        /// The target capacity utilization as a percentage for the capacity provider. The specified value must be greater than 0 and less than or equal to 100. For example, if you want the capacity provider to maintain 10% spare capacity, then that means the utilization is 90%, so use a targetCapacity of 90. The default value of 100 percent results in the Amazon EC2 instances in your Auto Scaling group being completely used.
        public var targetCapacity: Swift.Int?

        public init(
            instanceWarmupPeriod: Swift.Int? = nil,
            maximumScalingStepSize: Swift.Int? = nil,
            minimumScalingStepSize: Swift.Int? = nil,
            status: ECSClientTypes.ManagedScalingStatus? = nil,
            targetCapacity: Swift.Int? = nil
        )
        {
            self.instanceWarmupPeriod = instanceWarmupPeriod
            self.maximumScalingStepSize = maximumScalingStepSize
            self.minimumScalingStepSize = minimumScalingStepSize
            self.status = status
            self.targetCapacity = targetCapacity
        }
    }
}

extension ECSClientTypes {

    public enum ManagedTerminationProtection: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedTerminationProtection] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The details of the Auto Scaling group for the capacity provider.
    public struct AutoScalingGroupProvider: Swift.Sendable {
        /// The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group name.
        /// This member is required.
        public var autoScalingGroupArn: Swift.String?
        /// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
        public var managedDraining: ECSClientTypes.ManagedDraining?
        /// The managed scaling settings for the Auto Scaling group capacity provider.
        public var managedScaling: ECSClientTypes.ManagedScaling?
        /// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off. When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work. When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the Auto Scaling User Guide. When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
        public var managedTerminationProtection: ECSClientTypes.ManagedTerminationProtection?

        public init(
            autoScalingGroupArn: Swift.String? = nil,
            managedDraining: ECSClientTypes.ManagedDraining? = nil,
            managedScaling: ECSClientTypes.ManagedScaling? = nil,
            managedTerminationProtection: ECSClientTypes.ManagedTerminationProtection? = nil
        )
        {
            self.autoScalingGroupArn = autoScalingGroupArn
            self.managedDraining = managedDraining
            self.managedScaling = managedScaling
            self.managedTerminationProtection = managedTerminationProtection
        }
    }
}

extension ECSClientTypes {

    /// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public struct Tag: Swift.Sendable {
        /// One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values.
        public var key: Swift.String?
        /// The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key).
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateCapacityProviderInput: Swift.Sendable {
    /// The details of the Auto Scaling group for the capacity provider.
    /// This member is required.
    public var autoScalingGroupProvider: ECSClientTypes.AutoScalingGroupProvider?
    /// The name of the capacity provider. Up to 255 characters are allowed. They include letters (both upper and lowercase letters), numbers, underscores (_), and hyphens (-). The name can't be prefixed with "aws", "ecs", or "fargate".
    /// This member is required.
    public var name: Swift.String?
    /// The metadata that you apply to the capacity provider to categorize and organize them more conveniently. Each tag consists of a key and an optional value. You define both of them. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?

    public init(
        autoScalingGroupProvider: ECSClientTypes.AutoScalingGroupProvider? = nil,
        name: Swift.String? = nil,
        tags: [ECSClientTypes.Tag]? = nil
    )
    {
        self.autoScalingGroupProvider = autoScalingGroupProvider
        self.name = name
        self.tags = tags
    }
}

extension ECSClientTypes {

    public enum CapacityProviderStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityProviderStatus] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum CapacityProviderUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case updateComplete
        case updateFailed
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityProviderUpdateStatus] {
            return [
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .updateComplete,
                .updateFailed,
                .updateInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The details for a capacity provider.
    public struct CapacityProvider: Swift.Sendable {
        /// The Auto Scaling group settings for the capacity provider.
        public var autoScalingGroupProvider: ECSClientTypes.AutoScalingGroupProvider?
        /// The Amazon Resource Name (ARN) that identifies the capacity provider.
        public var capacityProviderArn: Swift.String?
        /// The name of the capacity provider.
        public var name: Swift.String?
        /// The current status of the capacity provider. Only capacity providers in an ACTIVE state can be used in a cluster. When a capacity provider is successfully deleted, it has an INACTIVE status.
        public var status: ECSClientTypes.CapacityProviderStatus?
        /// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [ECSClientTypes.Tag]?
        /// The update status of the capacity provider. The following are the possible states that is returned. DELETE_IN_PROGRESS The capacity provider is in the process of being deleted. DELETE_COMPLETE The capacity provider was successfully deleted and has an INACTIVE status. DELETE_FAILED The capacity provider can't be deleted. The update status reason provides further details about why the delete failed.
        public var updateStatus: ECSClientTypes.CapacityProviderUpdateStatus?
        /// The update status reason. This provides further details about the update status for the capacity provider.
        public var updateStatusReason: Swift.String?

        public init(
            autoScalingGroupProvider: ECSClientTypes.AutoScalingGroupProvider? = nil,
            capacityProviderArn: Swift.String? = nil,
            name: Swift.String? = nil,
            status: ECSClientTypes.CapacityProviderStatus? = nil,
            tags: [ECSClientTypes.Tag]? = nil,
            updateStatus: ECSClientTypes.CapacityProviderUpdateStatus? = nil,
            updateStatusReason: Swift.String? = nil
        )
        {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.capacityProviderArn = capacityProviderArn
            self.name = name
            self.status = status
            self.tags = tags
            self.updateStatus = updateStatus
            self.updateStatusReason = updateStatusReason
        }
    }
}

public struct CreateCapacityProviderOutput: Swift.Sendable {
    /// The full description of the new capacity provider.
    public var capacityProvider: ECSClientTypes.CapacityProvider?

    public init(
        capacityProvider: ECSClientTypes.CapacityProvider? = nil
    )
    {
        self.capacityProvider = capacityProvider
    }
}

/// The specified namespace wasn't found.
public struct NamespaceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NamespaceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ECSClientTypes {

    /// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
    public struct ExecuteCommandLogConfiguration: Swift.Sendable {
        /// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
        public var cloudWatchEncryptionEnabled: Swift.Bool
        /// The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
        public var cloudWatchLogGroupName: Swift.String?
        /// The name of the S3 bucket to send logs to. The S3 bucket must already be created.
        public var s3BucketName: Swift.String?
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
        public var s3EncryptionEnabled: Swift.Bool
        /// An optional folder in the S3 bucket to place logs in.
        public var s3KeyPrefix: Swift.String?

        public init(
            cloudWatchEncryptionEnabled: Swift.Bool = false,
            cloudWatchLogGroupName: Swift.String? = nil,
            s3BucketName: Swift.String? = nil,
            s3EncryptionEnabled: Swift.Bool = false,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.cloudWatchEncryptionEnabled = cloudWatchEncryptionEnabled
            self.cloudWatchLogGroupName = cloudWatchLogGroupName
            self.s3BucketName = s3BucketName
            self.s3EncryptionEnabled = s3EncryptionEnabled
            self.s3KeyPrefix = s3KeyPrefix
        }
    }
}

extension ECSClientTypes {

    public enum ExecuteCommandLogging: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case `none`
        case `override`
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecuteCommandLogging] {
            return [
                .default,
                .none,
                .override
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .none: return "NONE"
            case .override: return "OVERRIDE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The details of the execute command configuration.
    public struct ExecuteCommandConfiguration: Swift.Sendable {
        /// Specify an Key Management Service key ID to encrypt the data between the local client and the container.
        public var kmsKeyId: Swift.String?
        /// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When logging=OVERRIDE is specified, a logConfiguration must be provided.
        public var logConfiguration: ECSClientTypes.ExecuteCommandLogConfiguration?
        /// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
        ///
        /// * NONE: The execute command session is not logged.
        ///
        /// * DEFAULT: The awslogs configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no awslogs log driver is configured in the task definition, the output won't be logged.
        ///
        /// * OVERRIDE: Specify the logging details as a part of logConfiguration. If the OVERRIDE logging option is specified, the logConfiguration is required.
        public var logging: ECSClientTypes.ExecuteCommandLogging?

        public init(
            kmsKeyId: Swift.String? = nil,
            logConfiguration: ECSClientTypes.ExecuteCommandLogConfiguration? = nil,
            logging: ECSClientTypes.ExecuteCommandLogging? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.logConfiguration = logConfiguration
            self.logging = logging
        }
    }
}

extension ECSClientTypes {

    /// The managed storage configuration for the cluster.
    public struct ManagedStorageConfiguration: Swift.Sendable {
        /// Specify the Key Management Service key ID for the Fargate ephemeral storage.
        public var fargateEphemeralStorageKmsKeyId: Swift.String?
        /// Specify a Amazon Web Services Key Management Service key ID to encrypt the managed storage.
        public var kmsKeyId: Swift.String?

        public init(
            fargateEphemeralStorageKmsKeyId: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.fargateEphemeralStorageKmsKeyId = fargateEphemeralStorageKmsKeyId
            self.kmsKeyId = kmsKeyId
        }
    }
}

extension ECSClientTypes {

    /// The execute command and managed storage configuration for the cluster.
    public struct ClusterConfiguration: Swift.Sendable {
        /// The details of the execute command configuration.
        public var executeCommandConfiguration: ECSClientTypes.ExecuteCommandConfiguration?
        /// The details of the managed storage configuration.
        public var managedStorageConfiguration: ECSClientTypes.ManagedStorageConfiguration?

        public init(
            executeCommandConfiguration: ECSClientTypes.ExecuteCommandConfiguration? = nil,
            managedStorageConfiguration: ECSClientTypes.ManagedStorageConfiguration? = nil
        )
        {
            self.executeCommandConfiguration = executeCommandConfiguration
            self.managedStorageConfiguration = managedStorageConfiguration
        }
    }
}

extension ECSClientTypes {

    /// The details of a capacity provider strategy. A capacity provider strategy can be set when using the [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)or [CreateCluster](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCluster.html) APIs or as the default capacity provider strategy for a cluster with the CreateCluster API. Only capacity providers that are already associated with a cluster and have an ACTIVE or UPDATING status can be used in a capacity provider strategy. The [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html) API is used to associate a capacity provider with a cluster. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the [CreateClusterCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html) API operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy. With FARGATE_SPOT, you can run interruption tolerant tasks at a rate that's discounted compared to the FARGATE price. FARGATE_SPOT runs tasks on spare compute capacity. When Amazon Web Services needs the capacity back, your tasks are interrupted with a two-minute warning. FARGATE_SPOT supports Linux tasks with the X86_64 architecture on platform version 1.3.0 or later. FARGATE_SPOT supports Linux tasks with the ARM64 architecture on platform version 1.4.0 or later. A capacity provider strategy may contain a maximum of 6 capacity providers.
    public struct CapacityProviderStrategyItem: Swift.Sendable {
        /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
        public var base: Swift.Int
        /// The short name of the capacity provider.
        /// This member is required.
        public var capacityProvider: Swift.String?
        /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. If no weight value is specified, the default value of 0 is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of 0 can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of 0, any RunTask or CreateService actions using the capacity provider strategy will fail. An example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of 1, then when the base is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of 1 for capacityProviderA and a weight of 4 for capacityProviderB, then for every one task that's run using capacityProviderA, four tasks would use capacityProviderB.
        public var weight: Swift.Int

        public init(
            base: Swift.Int = 0,
            capacityProvider: Swift.String? = nil,
            weight: Swift.Int = 0
        )
        {
            self.base = base
            self.capacityProvider = capacityProvider
            self.weight = weight
        }
    }
}

extension ECSClientTypes {

    /// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the enabled parameter to true in the ServiceConnectConfiguration. You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default parameter. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public struct ClusterServiceConnectDefaultsRequest: Swift.Sendable {
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/). If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this Amazon Web Services Region. If you enter a new name, a Cloud Map namespace will be created. Amazon ECS creates a Cloud Map namespace with the "API calls" method of instance discovery only. This instance discovery method is the "HTTP" namespace type in the Command Line Interface. Other types of instance discovery aren't used by Service Connect. If you update the cluster with an empty string "" for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in Cloud Map and must be deleted separately. For more information about Cloud Map, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the Cloud Map Developer Guide.
        /// This member is required.
        public var namespace: Swift.String?

        public init(
            namespace: Swift.String? = nil
        )
        {
            self.namespace = namespace
        }
    }
}

extension ECSClientTypes {

    public enum ClusterSettingName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case containerInsights
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterSettingName] {
            return [
                .containerInsights
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .containerInsights: return "containerInsights"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster.
    public struct ClusterSetting: Swift.Sendable {
        /// The name of the cluster setting. The value is containerInsights .
        public var name: ECSClientTypes.ClusterSettingName?
        /// The value to set for the cluster setting. The supported values are enabled and disabled. If you set name to containerInsights and value to enabled, CloudWatch Container Insights will be on for the cluster, otherwise it will be off unless the containerInsights account setting is turned on. If a cluster value is specified, it will override the containerInsights value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).
        public var value: Swift.String?

        public init(
            name: ECSClientTypes.ClusterSettingName? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

public struct CreateClusterInput: Swift.Sendable {
    /// The short name of one or more capacity providers to associate with the cluster. A capacity provider must be associated with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a capacity provider strategy when calling the [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) or [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) actions. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must be created but not associated with another cluster. New Auto Scaling group capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The [PutCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html) API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
    public var capacityProviders: [Swift.String]?
    /// The name of your cluster. If you don't specify a name for your cluster, you create a cluster that's named default. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
    public var clusterName: Swift.String?
    /// The execute command configuration for the cluster.
    public var configuration: ECSClientTypes.ClusterConfiguration?
    /// The capacity provider strategy to set as the default for the cluster. After a default capacity provider strategy is set for a cluster, when you call the [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) or [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) APIs with no capacity provider strategy or launch type specified, the default capacity provider strategy for the cluster is used. If a default capacity provider strategy isn't defined for a cluster when it was created, it can be defined later with the [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html) API operation.
    public var defaultCapacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
    /// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the enabled parameter to true in the ServiceConnectConfiguration. You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default parameter. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public var serviceConnectDefaults: ECSClientTypes.ClusterServiceConnectDefaultsRequest?
    /// The setting to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster. If this value is specified, it overrides the containerInsights value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).
    public var settings: [ECSClientTypes.ClusterSetting]?
    /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?

    public init(
        capacityProviders: [Swift.String]? = nil,
        clusterName: Swift.String? = nil,
        configuration: ECSClientTypes.ClusterConfiguration? = nil,
        defaultCapacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
        serviceConnectDefaults: ECSClientTypes.ClusterServiceConnectDefaultsRequest? = nil,
        settings: [ECSClientTypes.ClusterSetting]? = nil,
        tags: [ECSClientTypes.Tag]? = nil
    )
    {
        self.capacityProviders = capacityProviders
        self.clusterName = clusterName
        self.configuration = configuration
        self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
        self.serviceConnectDefaults = serviceConnectDefaults
        self.settings = settings
        self.tags = tags
    }
}

extension ECSClientTypes {

    /// A key-value pair object.
    public struct KeyValuePair: Swift.Sendable {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public var name: Swift.String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension ECSClientTypes {

    /// An object representing a container instance or task attachment.
    public struct Attachment: Swift.Sendable {
        /// Details of the attachment. For elastic network interfaces, this includes the network interface ID, the MAC address, the subnet ID, and the private IPv4 address. For Service Connect services, this includes portName, clientAliases, discoveryName, and ingressPortOverride. For Elastic Block Storage, this includes roleArn, deleteOnTermination, volumeName, volumeId, and statusReason (only when the attachment fails to create or attach).
        public var details: [ECSClientTypes.KeyValuePair]?
        /// The unique identifier for the attachment.
        public var id: Swift.String?
        /// The status of the attachment. Valid values are PRECREATED, CREATED, ATTACHING, ATTACHED, DETACHING, DETACHED, DELETED, and FAILED.
        public var status: Swift.String?
        /// The type of the attachment, such as ElasticNetworkInterface, Service Connect, and AmazonElasticBlockStorage.
        public var type: Swift.String?

        public init(
            details: [ECSClientTypes.KeyValuePair]? = nil,
            id: Swift.String? = nil,
            status: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.details = details
            self.id = id
            self.status = status
            self.type = type
        }
    }
}

extension ECSClientTypes {

    /// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the enabled parameter to true in the ServiceConnectConfiguration. You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default parameter. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public struct ClusterServiceConnectDefaults: Swift.Sendable {
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace. When you create a service and don't specify a Service Connect configuration, this namespace is used.
        public var namespace: Swift.String?

        public init(
            namespace: Swift.String? = nil
        )
        {
            self.namespace = namespace
        }
    }
}

extension ECSClientTypes {

    /// A regional grouping of one or more container instances where you can run task requests. Each account receives a default cluster the first time you use the Amazon ECS service, but you may also create other clusters. Clusters may contain more than one instance type simultaneously.
    public struct Cluster: Swift.Sendable {
        /// The number of services that are running on the cluster in an ACTIVE state. You can view these services with [PListServices](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListServices.html).
        public var activeServicesCount: Swift.Int
        /// The resources attached to a cluster. When using a capacity provider with a cluster, the capacity provider and associated resources are returned as cluster attachments.
        public var attachments: [ECSClientTypes.Attachment]?
        /// The status of the capacity providers associated with the cluster. The following are the states that are returned. UPDATE_IN_PROGRESS The available capacity providers for the cluster are updating. UPDATE_COMPLETE The capacity providers have successfully updated. UPDATE_FAILED The capacity provider updates failed.
        public var attachmentsStatus: Swift.String?
        /// The capacity providers associated with the cluster.
        public var capacityProviders: [Swift.String]?
        /// The Amazon Resource Name (ARN) that identifies the cluster. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
        public var clusterArn: Swift.String?
        /// A user-generated string that you use to identify your cluster.
        public var clusterName: Swift.String?
        /// The execute command configuration for the cluster.
        public var configuration: ECSClientTypes.ClusterConfiguration?
        /// The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
        public var defaultCapacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
        /// The number of tasks in the cluster that are in the PENDING state.
        public var pendingTasksCount: Swift.Int
        /// The number of container instances registered into the cluster. This includes container instances in both ACTIVE and DRAINING status.
        public var registeredContainerInstancesCount: Swift.Int
        /// The number of tasks in the cluster that are in the RUNNING state.
        public var runningTasksCount: Swift.Int
        /// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the enabled parameter to true in the ServiceConnectConfiguration. You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default parameter. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        public var serviceConnectDefaults: ECSClientTypes.ClusterServiceConnectDefaults?
        /// The settings for the cluster. This parameter indicates whether CloudWatch Container Insights is on or off for a cluster.
        public var settings: [ECSClientTypes.ClusterSetting]?
        /// Additional information about your clusters that are separated by launch type. They include the following:
        ///
        /// * runningEC2TasksCount
        ///
        /// * RunningFargateTasksCount
        ///
        /// * pendingEC2TasksCount
        ///
        /// * pendingFargateTasksCount
        ///
        /// * activeEC2ServiceCount
        ///
        /// * activeFargateServiceCount
        ///
        /// * drainingEC2ServiceCount
        ///
        /// * drainingFargateServiceCount
        public var statistics: [ECSClientTypes.KeyValuePair]?
        /// The status of the cluster. The following are the possible states that are returned. ACTIVE The cluster is ready to accept tasks and if applicable you can register container instances with the cluster. PROVISIONING The cluster has capacity providers that are associated with it and the resources needed for the capacity provider are being created. DEPROVISIONING The cluster has capacity providers that are associated with it and the resources needed for the capacity provider are being deleted. FAILED The cluster has capacity providers that are associated with it and the resources needed for the capacity provider have failed to create. INACTIVE The cluster has been deleted. Clusters with an INACTIVE status may remain discoverable in your account for a period of time. However, this behavior is subject to change in the future. We don't recommend that you rely on INACTIVE clusters persisting.
        public var status: Swift.String?
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [ECSClientTypes.Tag]?

        public init(
            activeServicesCount: Swift.Int = 0,
            attachments: [ECSClientTypes.Attachment]? = nil,
            attachmentsStatus: Swift.String? = nil,
            capacityProviders: [Swift.String]? = nil,
            clusterArn: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            configuration: ECSClientTypes.ClusterConfiguration? = nil,
            defaultCapacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
            pendingTasksCount: Swift.Int = 0,
            registeredContainerInstancesCount: Swift.Int = 0,
            runningTasksCount: Swift.Int = 0,
            serviceConnectDefaults: ECSClientTypes.ClusterServiceConnectDefaults? = nil,
            settings: [ECSClientTypes.ClusterSetting]? = nil,
            statistics: [ECSClientTypes.KeyValuePair]? = nil,
            status: Swift.String? = nil,
            tags: [ECSClientTypes.Tag]? = nil
        )
        {
            self.activeServicesCount = activeServicesCount
            self.attachments = attachments
            self.attachmentsStatus = attachmentsStatus
            self.capacityProviders = capacityProviders
            self.clusterArn = clusterArn
            self.clusterName = clusterName
            self.configuration = configuration
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
            self.pendingTasksCount = pendingTasksCount
            self.registeredContainerInstancesCount = registeredContainerInstancesCount
            self.runningTasksCount = runningTasksCount
            self.serviceConnectDefaults = serviceConnectDefaults
            self.settings = settings
            self.statistics = statistics
            self.status = status
            self.tags = tags
        }
    }
}

public struct CreateClusterOutput: Swift.Sendable {
    /// The full description of your new cluster.
    public var cluster: ECSClientTypes.Cluster?

    public init(
        cluster: ECSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// The specified cluster wasn't found. You can view your available clusters with [ListClusters](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListClusters.html). Amazon ECS clusters are Region specific.
public struct ClusterNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified platform version doesn't satisfy the required capabilities of the task definition.
public struct PlatformTaskDefinitionIncompatibilityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PlatformTaskDefinitionIncompatibilityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified platform version doesn't exist.
public struct PlatformUnknownException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PlatformUnknownException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified task isn't supported in this Region.
public struct UnsupportedFeatureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedFeatureException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ECSClientTypes {

    /// One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment. When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure. You can only use the DeploymentAlarms method to detect failures when the DeploymentController is set to ECS (rolling update). For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the Amazon Elastic Container Service Developer Guide .
    public struct DeploymentAlarms: Swift.Sendable {
        /// One or more CloudWatch alarm names. Use a "," to separate the alarms.
        /// This member is required.
        public var alarmNames: [Swift.String]?
        /// Determines whether to use the CloudWatch alarm option in the service deployment process.
        /// This member is required.
        public var enable: Swift.Bool
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// This member is required.
        public var rollback: Swift.Bool

        public init(
            alarmNames: [Swift.String]? = nil,
            enable: Swift.Bool = false,
            rollback: Swift.Bool = false
        )
        {
            self.alarmNames = alarmNames
            self.enable = enable
            self.rollback = rollback
        }
    }
}

extension ECSClientTypes {

    /// The deployment circuit breaker can only be used for services using the rolling update (ECS) deployment type. The deployment circuit breaker determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the Amazon Elastic Container Service Developer Guide. For more information about API failure reasons, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the Amazon Elastic Container Service Developer Guide.
    public struct DeploymentCircuitBreaker: Swift.Sendable {
        /// Determines whether to use the deployment circuit breaker logic for the service.
        /// This member is required.
        public var enable: Swift.Bool
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
        /// This member is required.
        public var rollback: Swift.Bool

        public init(
            enable: Swift.Bool = false,
            rollback: Swift.Bool = false
        )
        {
            self.enable = enable
            self.rollback = rollback
        }
    }
}

extension ECSClientTypes {

    /// Optional deployment parameters that control how many tasks run during the deployment and the failure detection methods.
    public struct DeploymentConfiguration: Swift.Sendable {
        /// Information about the CloudWatch alarms.
        public var alarms: ECSClientTypes.DeploymentAlarms?
        /// The deployment circuit breaker can only be used for services using the rolling update (ECS) deployment type. The deployment circuit breaker determines whether a service deployment will fail if the service can't reach a steady state. If you use the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the Amazon Elastic Container Service Developer Guide
        public var deploymentCircuitBreaker: ECSClientTypes.DeploymentCircuitBreaker?
        /// If a service is using the rolling update (ECS) deployment type, the maximumPercent parameter represents an upper limit on the number of your service's tasks that are allowed in the RUNNING or PENDING state during a deployment, as a percentage of the desiredCount (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the REPLICA service scheduler and has a desiredCount of four tasks and a maximumPercent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default maximumPercent value for a service using the REPLICA service scheduler is 200%. If a service is using either the blue/green (CODE_DEPLOY) or EXTERNAL deployment types, and tasks in the service use the EC2 launch type, the maximum percent value is set to the default value. The maximum percent value is used to define the upper limit on the number of the tasks in the service that remain in the RUNNING state while the container instances are in the DRAINING state. You can't specify a custom maximumPercent value for a service that uses either the blue/green (CODE_DEPLOY) or EXTERNAL deployment types and has tasks that use the EC2 launch type. If the tasks in the service use the Fargate launch type, the maximum percent value is not used, although it is returned when describing your service.
        public var maximumPercent: Swift.Int?
        /// If a service is using the rolling update (ECS) deployment type, the minimumHealthyPercent represents a lower limit on the number of your service's tasks that must remain in the RUNNING state during a deployment, as a percentage of the desiredCount (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a desiredCount of four tasks and a minimumHealthyPercent of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. For services that do not use a load balancer, the following should be noted:
        ///
        /// * A service is considered healthy if all essential containers within the tasks in the service pass their health checks.
        ///
        /// * If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a RUNNING state before the task is counted towards the minimum healthy percent total.
        ///
        /// * If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.
        ///
        ///
        /// For services that do use a load balancer, the following should be noted:
        ///
        /// * If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
        ///
        /// * If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
        ///
        ///
        /// The default value for a replica service for minimumHealthyPercent is 100%. The default minimumHealthyPercent value for a service using the DAEMON service schedule is 0% for the CLI, the Amazon Web Services SDKs, and the APIs and 50% for the Amazon Web Services Management Console. The minimum number of healthy tasks during a deployment is the desiredCount multiplied by the minimumHealthyPercent/100, rounded up to the nearest integer value. If a service is using either the blue/green (CODE_DEPLOY) or EXTERNAL deployment types and is running tasks that use the EC2 launch type, the minimum healthy percent value is set to the default value. The minimum healthy percent value is used to define the lower limit on the number of the tasks in the service that remain in the RUNNING state while the container instances are in the DRAINING state. You can't specify a custom minimumHealthyPercent value for a service that uses either the blue/green (CODE_DEPLOY) or EXTERNAL deployment types and has tasks that use the EC2 launch type. If a service is using either the blue/green (CODE_DEPLOY) or EXTERNAL deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
        public var minimumHealthyPercent: Swift.Int?

        public init(
            alarms: ECSClientTypes.DeploymentAlarms? = nil,
            deploymentCircuitBreaker: ECSClientTypes.DeploymentCircuitBreaker? = nil,
            maximumPercent: Swift.Int? = nil,
            minimumHealthyPercent: Swift.Int? = nil
        )
        {
            self.alarms = alarms
            self.deploymentCircuitBreaker = deploymentCircuitBreaker
            self.maximumPercent = maximumPercent
            self.minimumHealthyPercent = minimumHealthyPercent
        }
    }
}

extension ECSClientTypes {

    public enum DeploymentControllerType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codeDeploy
        case ecs
        case external
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentControllerType] {
            return [
                .codeDeploy,
                .ecs,
                .external
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codeDeploy: return "CODE_DEPLOY"
            case .ecs: return "ECS"
            case .external: return "EXTERNAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The deployment controller to use for the service. For more information, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) in the Amazon Elastic Container Service Developer Guide.
    public struct DeploymentController: Swift.Sendable {
        /// The deployment controller type to use. There are three deployment controller types available: ECS The rolling update (ECS) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the [DeploymentConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html). CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by CodeDeploy, which allows you to verify a new deployment of a service before sending production traffic to it. EXTERNAL The external (EXTERNAL) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.
        /// This member is required.
        public var type: ECSClientTypes.DeploymentControllerType?

        public init(
            type: ECSClientTypes.DeploymentControllerType? = nil
        )
        {
            self.type = type
        }
    }
}

extension ECSClientTypes {

    public enum LaunchType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case external
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [LaunchType] {
            return [
                .ec2,
                .external,
                .fargate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .external: return "EXTERNAL"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The load balancer configuration to use with a service or task set. When you add, update, or remove a load balancer configuration, Amazon ECS starts a new deployment with the updated Elastic Load Balancing configuration. This causes tasks to register to and deregister from load balancers. We recommend that you verify this on a test environment before you update the Elastic Load Balancing configuration. A service-linked role is required for services that use multiple target groups. For more information, see [Using service-linked roles](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the Amazon Elastic Container Service Developer Guide.
    public struct LoadBalancer: Swift.Sendable {
        /// The name of the container (as it appears in a container definition) to associate with the load balancer. You need to specify the container name when configuring the target group for an Amazon ECS load balancer.
        public var containerName: Swift.String?
        /// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the hostPort of the port mapping.
        public var containerPort: Swift.Int?
        /// The name of the load balancer to associate with the service or task set. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
        public var loadBalancerName: Swift.String?
        /// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode, you must choose ip as the target type, not instance. Do this when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.
        public var targetGroupArn: Swift.String?

        public init(
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            loadBalancerName: Swift.String? = nil,
            targetGroupArn: Swift.String? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.loadBalancerName = loadBalancerName
            self.targetGroupArn = targetGroupArn
        }
    }
}

extension ECSClientTypes {

    public enum AssignPublicIp: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignPublicIp] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// An object representing the networking details for a task or service. For example awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}.
    public struct AwsVpcConfiguration: Swift.Sendable {
        /// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
        public var assignPublicIp: ECSClientTypes.AssignPublicIp?
        /// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified per awsvpcConfiguration. All specified security groups must be from the same VPC.
        public var securityGroups: [Swift.String]?
        /// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified per awsvpcConfiguration. All specified subnets must be from the same VPC.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            assignPublicIp: ECSClientTypes.AssignPublicIp? = nil,
            securityGroups: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }
    }
}

extension ECSClientTypes {

    /// The network configuration for a task or service.
    public struct NetworkConfiguration: Swift.Sendable {
        /// The VPC subnets and security groups that are associated with a task. All specified subnets and security groups must be from the same VPC.
        public var awsvpcConfiguration: ECSClientTypes.AwsVpcConfiguration?

        public init(
            awsvpcConfiguration: ECSClientTypes.AwsVpcConfiguration? = nil
        )
        {
            self.awsvpcConfiguration = awsvpcConfiguration
        }
    }
}

extension ECSClientTypes {

    public enum PlacementConstraintType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case distinctInstance
        case memberOf
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementConstraintType] {
            return [
                .distinctInstance,
                .memberOf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .distinctInstance: return "distinctInstance"
            case .memberOf: return "memberOf"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// An object representing a constraint on task placement. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the Amazon Elastic Container Service Developer Guide. If you're using the Fargate launch type, task placement constraints aren't supported.
    public struct PlacementConstraint: Swift.Sendable {
        /// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is distinctInstance. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
        public var expression: Swift.String?
        /// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
        public var type: ECSClientTypes.PlacementConstraintType?

        public init(
            expression: Swift.String? = nil,
            type: ECSClientTypes.PlacementConstraintType? = nil
        )
        {
            self.expression = expression
            self.type = type
        }
    }
}

extension ECSClientTypes {

    public enum PlacementStrategyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binpack
        case random
        case spread
        case sdkUnknown(Swift.String)

        public static var allCases: [PlacementStrategyType] {
            return [
                .binpack,
                .random,
                .spread
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binpack: return "binpack"
            case .random: return "random"
            case .spread: return "spread"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The task placement strategy for a task or service. For more information, see [Task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the Amazon Elastic Container Service Developer Guide.
    public struct PlacementStrategy: Swift.Sendable {
        /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that's applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
        public var field: Swift.String?
        /// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that's specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
        public var type: ECSClientTypes.PlacementStrategyType?

        public init(
            field: Swift.String? = nil,
            type: ECSClientTypes.PlacementStrategyType? = nil
        )
        {
            self.field = field
            self.type = type
        }
    }
}

extension ECSClientTypes {

    public enum PropagateTags: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case service
        case taskDefinition
        case sdkUnknown(Swift.String)

        public static var allCases: [PropagateTags] {
            return [
                .none,
                .service,
                .taskDefinition
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .service: return "SERVICE"
            case .taskDefinition: return "TASK_DEFINITION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum SchedulingStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daemon
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [SchedulingStrategy] {
            return [
                .daemon,
                .replica
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daemon: return "DAEMON"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum LogDriver: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsfirelens
        case awslogs
        case fluentd
        case gelf
        case journald
        case jsonFile
        case splunk
        case syslog
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDriver] {
            return [
                .awsfirelens,
                .awslogs,
                .fluentd,
                .gelf,
                .journald,
                .jsonFile,
                .splunk,
                .syslog
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsfirelens: return "awsfirelens"
            case .awslogs: return "awslogs"
            case .fluentd: return "fluentd"
            case .gelf: return "gelf"
            case .journald: return "journald"
            case .jsonFile: return "json-file"
            case .splunk: return "splunk"
            case .syslog: return "syslog"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
    ///
    /// * To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
    ///
    /// * To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
    ///
    ///
    /// For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
    public struct Secret: Swift.Sendable {
        /// The name of the secret.
        /// This member is required.
        public var name: Swift.String?
        /// The secret to expose to the container. The supported values are either the full ARN of the Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store. For information about the require Identity and Access Management permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the Amazon Elastic Container Service Developer Guide. If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
        /// This member is required.
        public var valueFrom: Swift.String?

        public init(
            name: Swift.String? = nil,
            valueFrom: Swift.String? = nil
        )
        {
            self.name = name
            self.valueFrom = valueFrom
        }
    }
}

extension ECSClientTypes {

    /// The log configuration for the container. This parameter maps to LogConfig in the docker container create command and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. Understand the following when specifying a log configuration for your containers.
    ///
    /// * Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent. For tasks on Fargate, the supported log drivers are awslogs, splunk, and awsfirelens. For tasks hosted on Amazon EC2 instances, the supported log drivers are awslogs, fluentd, gelf, json-file, journald,syslog, splunk, and awsfirelens.
    ///
    /// * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
    ///
    /// * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
    ///
    /// * For tasks that are on Fargate, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
    public struct LogConfiguration: Swift.Sendable {
        /// The log driver to use for the container. For tasks on Fargate, the supported log drivers are awslogs, splunk, and awsfirelens. For tasks hosted on Amazon EC2 instances, the supported log drivers are awslogs, fluentd, gelf, json-file, journald, syslog, splunk, and awsfirelens. For more information about using the awslogs log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the Amazon Elastic Container Service Developer Guide. For more information about using the awsfirelens log driver, see [Send Amazon ECS logs to an Amazon Web Services service or Amazon Web Services Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html). If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
        /// This member is required.
        public var logDriver: ECSClientTypes.LogDriver?
        /// The configuration options to send to the log driver. The options you can specify depend on the log driver. Some of the options you can specify when you use the awslogs log driver to route logs to Amazon CloudWatch include the following: awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. awslogs-region Required: Yes Specify the Amazon Web Services Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. awslogs-stream-prefix Required: Yes, when using the Fargate launch type.Optional for the EC2 launch type, required for the Fargate launch type. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see [awslogs-datetime-format](https://docs.docker.com/config/containers/logging/awslogs/#awslogs-datetime-format). You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see [awslogs-multiline-pattern](https://docs.docker.com/config/containers/logging/awslogs/#awslogs-multiline-pattern). This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to CloudWatch Logs. The delivery mode you choose affects application availability when the flow of logs from container to CloudWatch is interrupted. If you use the blocking mode and the flow of logs to CloudWatch is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent to CloudWatch. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see [Preventing log loss with non-blocking mode in the ]awslogs container log driver(http://aws.amazon.com/blogs/containers/preventing-log-loss-with-non-blocking-mode-in-the-awslogs-container-log-driver/). max-buffer-size Required: No Default value: 1m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost. To route logs using the splunk log router, you need to specify a splunk-token and a splunk-url. When you use the awsfirelens log router to route logs to an Amazon Web Services Service or Amazon Web Services Partner Network destination for log storage and analytics, you can set the log-driver-buffer-limit option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker. Other options you can specify when using awsfirelens to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the Amazon Web Services Region with region and a name for the log stream with delivery_stream. When you export logs to Amazon Kinesis Data Streams, you can specify an Amazon Web Services Region with region and a data stream name with stream. When you export logs to Amazon OpenSearch Service, you can specify options like Name, Host (OpenSearch Service endpoint without protocol), Port, Index, Type, Aws_auth, Aws_region, Suppress_Type_Name, and tls. When you export logs to Amazon S3, you can specify the bucket using the bucket option. You can also specify region, total_file_size, upload_timeout, and use_put_object as options. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'
        public var options: [Swift.String: Swift.String]?
        /// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
        public var secretOptions: [ECSClientTypes.Secret]?

        public init(
            logDriver: ECSClientTypes.LogDriver? = nil,
            options: [Swift.String: Swift.String]? = nil,
            secretOptions: [ECSClientTypes.Secret]? = nil
        )
        {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }
    }
}

extension ECSClientTypes {

    /// Each alias ("endpoint") is a fully-qualified name and port number that other tasks ("clients") can use to connect to this service. Each name and port mapping must be unique within the namespace. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public struct ServiceConnectClientAlias: Swift.Sendable {
        /// The dnsName is the name that you use in the applications of client tasks to connect to this service. The name must be a valid DNS name but doesn't need to be fully-qualified. The name can include up to 127 characters. The name can include lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name can't start with a hyphen. If this parameter isn't specified, the default value of discoveryName.namespace is used. If the discoveryName isn't specified, the port mapping name from the task definition is used in portName.namespace. To avoid changing your applications in client Amazon ECS services, set this to the same name that the client application uses by default. For example, a few common names are database, db, or the lowercase name of a database, such as mysql or redis. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        public var dnsName: Swift.String?
        /// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace. To avoid changing your applications in client Amazon ECS services, set this to the same port that the client application uses by default. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        /// This member is required.
        public var port: Swift.Int?

        public init(
            dnsName: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.dnsName = dnsName
            self.port = port
        }
    }
}

extension ECSClientTypes {

    /// An object that represents the timeout configurations for Service Connect. If idleTimeout is set to a time that is less than perRequestTimeout, the connection will close when the idleTimeout is reached and not the perRequestTimeout.
    public struct TimeoutConfiguration: Swift.Sendable {
        /// The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout. The idleTimeout default for HTTP/HTTP2/GRPC is 5 minutes. The idleTimeout default for TCP is 1 hour.
        public var idleTimeoutSeconds: Swift.Int?
        /// The amount of time waiting for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. perRequestTimeout can only be set if Service Connect appProtocol isn't TCP. Only idleTimeout is allowed for TCPappProtocol.
        public var perRequestTimeoutSeconds: Swift.Int?

        public init(
            idleTimeoutSeconds: Swift.Int? = nil,
            perRequestTimeoutSeconds: Swift.Int? = nil
        )
        {
            self.idleTimeoutSeconds = idleTimeoutSeconds
            self.perRequestTimeoutSeconds = perRequestTimeoutSeconds
        }
    }
}

extension ECSClientTypes {

    /// The certificate root authority that secures your service.
    public struct ServiceConnectTlsCertificateAuthority: Swift.Sendable {
        /// The ARN of the Amazon Web Services Private Certificate Authority certificate.
        public var awsPcaAuthorityArn: Swift.String?

        public init(
            awsPcaAuthorityArn: Swift.String? = nil
        )
        {
            self.awsPcaAuthorityArn = awsPcaAuthorityArn
        }
    }
}

extension ECSClientTypes {

    /// The key that encrypts and decrypts your resources for Service Connect TLS.
    public struct ServiceConnectTlsConfiguration: Swift.Sendable {
        /// The signer certificate authority.
        /// This member is required.
        public var issuerCertificateAuthority: ECSClientTypes.ServiceConnectTlsCertificateAuthority?
        /// The Amazon Web Services Key Management Service key.
        public var kmsKey: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
        public var roleArn: Swift.String?

        public init(
            issuerCertificateAuthority: ECSClientTypes.ServiceConnectTlsCertificateAuthority? = nil,
            kmsKey: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.issuerCertificateAuthority = issuerCertificateAuthority
            self.kmsKey = kmsKey
            self.roleArn = roleArn
        }
    }
}

extension ECSClientTypes {

    /// The Service Connect service object configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public struct ServiceConnectService: Swift.Sendable {
        /// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. Each alias ("endpoint") is a fully-qualified name and port number that other Amazon ECS tasks ("clients") can use to connect to this service. Each name and port mapping must be unique within the namespace. For each ServiceConnectService, you must provide at least one clientAlias with one port.
        public var clientAliases: [ECSClientTypes.ServiceConnectClientAlias]?
        /// The discoveryName is the name of the new Cloud Map service that Amazon ECS creates for this Amazon ECS service. This must be unique within the Cloud Map namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen. If the discoveryName isn't specified, the port mapping name from the task definition is used in portName.namespace.
        public var discoveryName: Swift.String?
        /// The port number for the Service Connect proxy to listen on. Use the value of this field to bypass the proxy for traffic on the port number specified in the named portMapping in the task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service. In awsvpc mode and Fargate, the default value is the container port number. The container port number is in the portMapping in the task definition. In bridge mode, the default value is the ephemeral port of the Service Connect proxy.
        public var ingressPortOverride: Swift.Int?
        /// The portName must match the name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.
        /// This member is required.
        public var portName: Swift.String?
        /// A reference to an object that represents the configured timeouts for Service Connect.
        public var timeout: ECSClientTypes.TimeoutConfiguration?
        /// A reference to an object that represents a Transport Layer Security (TLS) configuration.
        public var tls: ECSClientTypes.ServiceConnectTlsConfiguration?

        public init(
            clientAliases: [ECSClientTypes.ServiceConnectClientAlias]? = nil,
            discoveryName: Swift.String? = nil,
            ingressPortOverride: Swift.Int? = nil,
            portName: Swift.String? = nil,
            timeout: ECSClientTypes.TimeoutConfiguration? = nil,
            tls: ECSClientTypes.ServiceConnectTlsConfiguration? = nil
        )
        {
            self.clientAliases = clientAliases
            self.discoveryName = discoveryName
            self.ingressPortOverride = ingressPortOverride
            self.portName = portName
            self.timeout = timeout
            self.tls = tls
        }
    }
}

extension ECSClientTypes {

    /// The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public struct ServiceConnectConfiguration: Swift.Sendable {
        /// Specifies whether to use Service Connect with this service.
        /// This member is required.
        public var enabled: Swift.Bool
        /// The log configuration for the container. This parameter maps to LogConfig in the docker container create command and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. Understand the following when specifying a log configuration for your containers.
        ///
        /// * Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent. For tasks on Fargate, the supported log drivers are awslogs, splunk, and awsfirelens. For tasks hosted on Amazon EC2 instances, the supported log drivers are awslogs, fluentd, gelf, json-file, journald,syslog, splunk, and awsfirelens.
        ///
        /// * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
        ///
        /// * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        ///
        /// * For tasks that are on Fargate, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
        public var logConfiguration: ECSClientTypes.LogConfiguration?
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace for use with Service Connect. The namespace must be in the same Amazon Web Services Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about Cloud Map, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the Cloud Map Developer Guide.
        public var namespace: Swift.String?
        /// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service. This field is not required for a "client" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means. An object selects a port from the task definition, assigns a name for the Cloud Map service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
        public var services: [ECSClientTypes.ServiceConnectService]?

        public init(
            enabled: Swift.Bool = false,
            logConfiguration: ECSClientTypes.LogConfiguration? = nil,
            namespace: Swift.String? = nil,
            services: [ECSClientTypes.ServiceConnectService]? = nil
        )
        {
            self.enabled = enabled
            self.logConfiguration = logConfiguration
            self.namespace = namespace
            self.services = services
        }
    }
}

extension ECSClientTypes {

    /// The details for the service registry. Each service may be associated with one service registry. Multiple service registries for each service are not supported. When you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.
    public struct ServiceRegistry: Swift.Sendable {
        /// The container name value to be used for your service discovery service. It's already specified in the task definition. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value. However, you can't specify both.
        public var containerName: Swift.String?
        /// The port value to be used for your service discovery service. It's already specified in the task definition. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value. However, you can't specify both.
        public var containerPort: Swift.Int?
        /// The port value used if your service discovery service specified an SRV record. This field might be used if both the awsvpc network mode and SRV records are used.
        public var port: Swift.Int?
        /// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is Cloud Map. For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html).
        public var registryArn: Swift.String?

        public init(
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            port: Swift.Int? = nil,
            registryArn: Swift.String? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.port = port
            self.registryArn = registryArn
        }
    }
}

extension ECSClientTypes {

    public enum TaskFilesystemType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ext3
        case ext4
        case ntfs
        case xfs
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskFilesystemType] {
            return [
                .ext3,
                .ext4,
                .ntfs,
                .xfs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ext3: return "ext3"
            case .ext4: return "ext4"
            case .ntfs: return "ntfs"
            case .xfs: return "xfs"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum EBSResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case volume
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSResourceType] {
            return [
                .volume
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .volume: return "volume"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The tag specifications of an Amazon EBS volume.
    public struct EBSTagSpecification: Swift.Sendable {
        /// Determines whether to propagate the tags from the task definition to  the Amazon EBS volume. Tags can only propagate to a SERVICE specified in  ServiceVolumeConfiguration. If no value is specified, the tags aren't  propagated.
        public var propagateTags: ECSClientTypes.PropagateTags?
        /// The type of volume resource.
        /// This member is required.
        public var resourceType: ECSClientTypes.EBSResourceType?
        /// The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.
        public var tags: [ECSClientTypes.Tag]?

        public init(
            propagateTags: ECSClientTypes.PropagateTags? = nil,
            resourceType: ECSClientTypes.EBSResourceType? = nil,
            tags: [ECSClientTypes.Tag]? = nil
        )
        {
            self.propagateTags = propagateTags
            self.resourceType = resourceType
            self.tags = tags
        }
    }
}

extension ECSClientTypes {

    /// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. For information about the supported launch types and operating systems, see [Supported operating systems and launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration) in the Amazon Elastic Container Service Developer Guide. Many of these parameters map 1:1 with the Amazon EBS CreateVolume API request parameters.
    public struct ServiceManagedEBSVolumeConfiguration: Swift.Sendable {
        /// Indicates whether the volume should be encrypted. If no value is specified, encryption is turned on by default. This parameter maps 1:1 with the Encrypted parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var encrypted: Swift.Bool?
        /// The filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the task will fail to start. The available Linux filesystem types are  ext3, ext4, and xfs. If no value is specified, the xfs filesystem type is used by default. The available Windows filesystem types are NTFS.
        public var filesystemType: ECSClientTypes.TaskFilesystemType?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type.
        ///
        /// * gp3: 3,000 - 16,000 IOPS
        ///
        /// * io1: 100 - 64,000 IOPS
        ///
        /// * io2: 100 - 256,000 IOPS
        ///
        ///
        /// This parameter is required for io1 and io2 volume types. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for st1, sc1, or standard volume types. This parameter maps 1:1 with the Iops parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var iops: Swift.Int?
        /// The Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption. When encryption is turned on and no Amazon Web Services Key Management Service key is specified, the default Amazon Web Services managed key for Amazon EBS volumes is used. This parameter maps 1:1 with the KmsKeyId parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. Amazon Web Services authenticates the Amazon Web Services Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
        public var kmsKeyId: Swift.String?
        /// The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. We recommend using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the Amazon ECS Developer Guide.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the Size parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. The following are the supported volume size values for each volume type.
        ///
        /// * gp2 and gp3: 1-16,384
        ///
        /// * io1 and io2: 4-16,384
        ///
        /// * st1 and sc1: 125-16,384
        ///
        /// * standard: 1-1,024
        public var sizeInGiB: Swift.Int?
        /// The snapshot that Amazon ECS uses to create the volume. You must specify either a snapshot ID or a volume size. This parameter maps 1:1 with the SnapshotId parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var snapshotId: Swift.String?
        /// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the TagSpecifications.N parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var tagSpecifications: [ECSClientTypes.EBSTagSpecification]?
        /// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the Throughput parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. This parameter is only supported for the gp3 volume type.
        public var throughput: Swift.Int?
        /// The volume type. This parameter maps 1:1 with the VolumeType parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the Amazon EC2 User Guide. The following are the supported volume types.
        ///
        /// * General Purpose SSD: gp2|gp3
        ///
        /// * Provisioned IOPS SSD: io1|io2
        ///
        /// * Throughput Optimized HDD: st1
        ///
        /// * Cold HDD: sc1
        ///
        /// * Magnetic: standard The magnetic volume type is not supported on Fargate.
        public var volumeType: Swift.String?

        public init(
            encrypted: Swift.Bool? = nil,
            filesystemType: ECSClientTypes.TaskFilesystemType? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            sizeInGiB: Swift.Int? = nil,
            snapshotId: Swift.String? = nil,
            tagSpecifications: [ECSClientTypes.EBSTagSpecification]? = nil,
            throughput: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.encrypted = encrypted
            self.filesystemType = filesystemType
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.roleArn = roleArn
            self.sizeInGiB = sizeInGiB
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.throughput = throughput
            self.volumeType = volumeType
        }
    }
}

extension ECSClientTypes {

    /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
    public struct ServiceVolumeConfiguration: Swift.Sendable {
        /// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are created.
        public var managedEBSVolume: ECSClientTypes.ServiceManagedEBSVolumeConfiguration?
        /// The name of the volume. This value must match the volume name from the Volume object in the task definition.
        /// This member is required.
        public var name: Swift.String?

        public init(
            managedEBSVolume: ECSClientTypes.ServiceManagedEBSVolumeConfiguration? = nil,
            name: Swift.String? = nil
        )
        {
            self.managedEBSVolume = managedEBSVolume
            self.name = name
        }
    }
}

public struct CreateServiceInput: Swift.Sendable {
    /// The capacity provider strategy to use for the service. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. A capacity provider strategy may contain a maximum of 6 capacity providers.
    public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
    /// An identifier that you provide to ensure the idempotency of the request. It must be unique and is case sensitive. Up to 36 ASCII characters in the range of 33-126 (inclusive) are allowed.
    public var clientToken: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// Optional deployment parameters that control how many tasks run during the deployment and the failure detection methods.
    public var deploymentConfiguration: ECSClientTypes.DeploymentConfiguration?
    /// The deployment controller to use for the service. If no deployment controller is specified, the default value of ECS is used.
    public var deploymentController: ECSClientTypes.DeploymentController?
    /// The number of instantiations of the specified task definition to place and keep running in your service. This is required if schedulingStrategy is REPLICA or isn't specified. If schedulingStrategy is DAEMON then this isn't required.
    public var desiredCount: Swift.Int?
    /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide. When you use Amazon ECS managed tags, you need to set the propagateTags request parameter.
    public var enableECSManagedTags: Swift.Bool?
    /// Determines whether the execute command functionality is turned on for the service. If true, this enables execute command functionality on all containers in the service tasks.
    public var enableExecuteCommand: Swift.Bool?
    /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of 0 is used. If you do not use an Elastic Load Balancing, we recommend that you use the startPeriod in the task definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html). If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
    public var healthCheckGracePeriodSeconds: Swift.Int?
    /// The infrastructure that you run your service on. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide. The FARGATE launch type runs your tasks on Fargate On-Demand infrastructure. Fargate Spot infrastructure is available for use but a capacity provider strategy must be used. For more information, see [Fargate capacity providers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-capacity-providers.html) in the Amazon ECS Developer Guide. The EC2 launch type runs your tasks on Amazon EC2 instances registered to your cluster. The EXTERNAL launch type runs your tasks on your on-premises server or virtual machine (VM) capacity registered to your cluster. A service can use either a launch type or a capacity provider strategy. If a launchType is specified, the capacityProviderStrategy parameter must be omitted.
    public var launchType: ECSClientTypes.LaunchType?
    /// A load balancer object representing the load balancers to use with your service. For more information, see [Service load balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the Amazon Elastic Container Service Developer Guide. If the service uses the rolling update (ECS) deployment controller and using either an Application Load Balancer or Network Load Balancer, you must specify one or more target group ARNs to attach to the service. The service-linked role is required for services that use multiple target groups. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the Amazon Elastic Container Service Developer Guide. If the service uses the CODE_DEPLOY deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When creating an CodeDeploy deployment group, you specify two target groups (referred to as a targetGroupPair). During a deployment, CodeDeploy determines which task set in your service has the status PRIMARY, and it associates one target group with it. Then, it also associates the other target group with the replacement task set. The load balancer can also have up to two listeners: a required listener for production traffic and an optional listener that you can use to perform validation tests with Lambda functions before routing production traffic to it. If you use the CODE_DEPLOY deployment controller, these values can be changed when updating the service. For Application Load Balancers and Network Load Balancers, this object must contain the load balancer target group ARN, the container name, and the container port to access from the load balancer. The container name must be as it appears in a container definition. The load balancer name parameter must be omitted. When a task from this service is placed on a container instance, the container instance and port combination is registered as a target in the target group that's specified here. For Classic Load Balancers, this object must contain the load balancer name, the container name , and the container port to access from the load balancer. The container name must be as it appears in a container definition. The target group ARN parameter must be omitted. When a task from this service is placed on a container instance, the container instance is registered with the load balancer that's specified here. Services with tasks that use the awsvpc network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers aren't supported. Also, when you create any target groups for these services, you must choose ip as the target type, not instance. This is because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
    public var loadBalancers: [ECSClientTypes.LoadBalancer]?
    /// The network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own elastic network interface, and it isn't supported for other network modes. For more information, see [Task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the Amazon Elastic Container Service Developer Guide.
    public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
    /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
    public var placementConstraints: [ECSClientTypes.PlacementConstraint]?
    /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
    public var placementStrategy: [ECSClientTypes.PlacementStrategy]?
    /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
    public var platformVersion: Swift.String?
    /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action. You must set this to a value other than NONE when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the Amazon Elastic Container Service Developer Guide. The default is NONE.
    public var propagateTags: ECSClientTypes.PropagateTags?
    /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the awsvpc network mode. If you specify the role parameter, you must also specify a load balancer object with the loadBalancers parameter. If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the awsvpc network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the Amazon Elastic Container Service Developer Guide. If your specified role has a path other than /, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name bar has a path of /foo/ then you would specify /foo/bar as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the IAM User Guide.
    public var role: Swift.String?
    /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html). There are two service scheduler strategies available:
    ///
    /// * REPLICA-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the CODE_DEPLOY or EXTERNAL deployment controller types.
    ///
    /// * DAEMON-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. Tasks using the Fargate launch type or the CODE_DEPLOY or EXTERNAL deployment controller types don't support the DAEMON scheduling strategy.
    public var schedulingStrategy: ECSClientTypes.SchedulingStrategy?
    /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public var serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration?
    /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html). Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
    public var serviceRegistries: [ECSClientTypes.ServiceRegistry]?
    /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The family and revision (family:revision) or full ARN of the task definition to run in your service. If a revision isn't specified, the latest ACTIVE revision is used. A task definition must be specified if the service uses either the ECS or CODE_DEPLOY deployment controllers. For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
    public var taskDefinition: Swift.String?
    /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
    public var volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]?

    public init(
        capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
        clientToken: Swift.String? = nil,
        cluster: Swift.String? = nil,
        deploymentConfiguration: ECSClientTypes.DeploymentConfiguration? = nil,
        deploymentController: ECSClientTypes.DeploymentController? = nil,
        desiredCount: Swift.Int? = nil,
        enableECSManagedTags: Swift.Bool? = false,
        enableExecuteCommand: Swift.Bool? = false,
        healthCheckGracePeriodSeconds: Swift.Int? = nil,
        launchType: ECSClientTypes.LaunchType? = nil,
        loadBalancers: [ECSClientTypes.LoadBalancer]? = nil,
        networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
        placementConstraints: [ECSClientTypes.PlacementConstraint]? = nil,
        placementStrategy: [ECSClientTypes.PlacementStrategy]? = nil,
        platformVersion: Swift.String? = nil,
        propagateTags: ECSClientTypes.PropagateTags? = nil,
        role: Swift.String? = nil,
        schedulingStrategy: ECSClientTypes.SchedulingStrategy? = nil,
        serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration? = nil,
        serviceName: Swift.String? = nil,
        serviceRegistries: [ECSClientTypes.ServiceRegistry]? = nil,
        tags: [ECSClientTypes.Tag]? = nil,
        taskDefinition: Swift.String? = nil,
        volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.clientToken = clientToken
        self.cluster = cluster
        self.deploymentConfiguration = deploymentConfiguration
        self.deploymentController = deploymentController
        self.desiredCount = desiredCount
        self.enableECSManagedTags = enableECSManagedTags
        self.enableExecuteCommand = enableExecuteCommand
        self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
        self.launchType = launchType
        self.loadBalancers = loadBalancers
        self.networkConfiguration = networkConfiguration
        self.placementConstraints = placementConstraints
        self.placementStrategy = placementStrategy
        self.platformVersion = platformVersion
        self.propagateTags = propagateTags
        self.role = role
        self.schedulingStrategy = schedulingStrategy
        self.serviceConnectConfiguration = serviceConnectConfiguration
        self.serviceName = serviceName
        self.serviceRegistries = serviceRegistries
        self.tags = tags
        self.taskDefinition = taskDefinition
        self.volumeConfigurations = volumeConfigurations
    }
}

extension ECSClientTypes {

    /// The amount of ephemeral storage to allocate for the deployment.
    public struct DeploymentEphemeralStorage: Swift.Sendable {
        /// Specify an Amazon Web Services Key Management Service key ID to encrypt the ephemeral storage for deployment.
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }
}

extension ECSClientTypes {

    public enum DeploymentRolloutState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentRolloutState] {
            return [
                .completed,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The Service Connect resource. Each configuration maps a discovery name to a Cloud Map service name. The data is stored in Cloud Map as part of the Service Connect configuration for each discovery name of this Amazon ECS service. A task can resolve the dnsName for each of the clientAliases of a service. However a task can't resolve the discovery names. If you want to connect to a service, refer to the ServiceConnectConfiguration of that service for the list of clientAliases that you can use.
    public struct ServiceConnectServiceResource: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the namespace in Cloud Map that matches the discovery name for this Service Connect resource. You can use this ARN in other integrations with Cloud Map. However, Service Connect can't ensure connectivity outside of Amazon ECS.
        public var discoveryArn: Swift.String?
        /// The discovery name of this Service Connect resource. The discoveryName is the name of the new Cloud Map service that Amazon ECS creates for this Amazon ECS service. This must be unique within the Cloud Map namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen. If the discoveryName isn't specified, the port mapping name from the task definition is used in portName.namespace.
        public var discoveryName: Swift.String?

        public init(
            discoveryArn: Swift.String? = nil,
            discoveryName: Swift.String? = nil
        )
        {
            self.discoveryArn = discoveryArn
            self.discoveryName = discoveryName
        }
    }
}

extension ECSClientTypes {

    /// The details of an Amazon ECS service deployment. This is used only when a service uses the ECS deployment controller type.
    public struct Deployment: Swift.Sendable {
        /// The capacity provider strategy that the deployment is using.
        public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
        /// The Unix timestamp for the time when the service deployment was created.
        public var createdAt: Foundation.Date?
        /// The most recent desired count of tasks that was specified for the service to deploy or maintain.
        public var desiredCount: Swift.Int
        /// The number of consecutively failed tasks in the deployment. A task is considered a failure if the service scheduler can't launch the task, the task doesn't transition to a RUNNING state, or if it fails any of its defined health checks and is stopped. Once a service deployment has one or more successfully running tasks, the failed task count resets to zero and stops being evaluated.
        public var failedTasks: Swift.Int
        /// The Fargate ephemeral storage settings for the deployment.
        public var fargateEphemeralStorage: ECSClientTypes.DeploymentEphemeralStorage?
        /// The ID of the deployment.
        public var id: Swift.String?
        /// The launch type the tasks in the service are using. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: ECSClientTypes.LaunchType?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
        /// The number of tasks in the deployment that are in the PENDING status.
        public var pendingCount: Swift.Int
        /// The operating system that your tasks in the service, or tasks are running on. A platform family is specified only for tasks using the Fargate launch type. All tasks that run as part of this service must use the same platformFamily value as the service, for example,  LINUX..
        public var platformFamily: Swift.String?
        /// The platform version that your tasks in the service run on. A platform version is only specified for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// The rolloutState of a service is only returned for services that use the rolling update (ECS) deployment type that aren't behind a Classic Load Balancer. The rollout state of the deployment. When a service deployment is started, it begins in an IN_PROGRESS state. When the service reaches a steady state, the deployment transitions to a COMPLETED state. If the service fails to reach a steady state and circuit breaker is turned on, the deployment transitions to a FAILED state. A deployment in FAILED state doesn't launch any new tasks. For more information, see [DeploymentCircuitBreaker](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentCircuitBreaker.html).
        public var rolloutState: ECSClientTypes.DeploymentRolloutState?
        /// A description of the rollout state of a deployment.
        public var rolloutStateReason: Swift.String?
        /// The number of tasks in the deployment that are in the RUNNING status.
        public var runningCount: Swift.Int
        /// The details of the Service Connect configuration that's used by this deployment. Compare the configuration between multiple deployments when troubleshooting issues with new deployments. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        public var serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration?
        /// The list of Service Connect resources that are associated with this deployment. Each list entry maps a discovery name to a Cloud Map service name.
        public var serviceConnectResources: [ECSClientTypes.ServiceConnectServiceResource]?
        /// The status of the deployment. The following describes each state. PRIMARY The most recent deployment of a service. ACTIVE A service deployment that still has running tasks, but are in the process of being replaced with a new PRIMARY deployment. INACTIVE A deployment that has been completely replaced.
        public var status: Swift.String?
        /// The most recent task definition that was specified for the tasks in the service to use.
        public var taskDefinition: Swift.String?
        /// The Unix timestamp for the time when the service deployment was last updated.
        public var updatedAt: Foundation.Date?
        /// The details of the volume that was configuredAtLaunch. You can configure different settings like the size, throughput, volumeType, and ecryption in [ServiceManagedEBSVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ServiceManagedEBSVolumeConfiguration.html). The name of the volume must match the name from the task definition.
        public var volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]?

        public init(
            capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
            createdAt: Foundation.Date? = nil,
            desiredCount: Swift.Int = 0,
            failedTasks: Swift.Int = 0,
            fargateEphemeralStorage: ECSClientTypes.DeploymentEphemeralStorage? = nil,
            id: Swift.String? = nil,
            launchType: ECSClientTypes.LaunchType? = nil,
            networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
            pendingCount: Swift.Int = 0,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            rolloutState: ECSClientTypes.DeploymentRolloutState? = nil,
            rolloutStateReason: Swift.String? = nil,
            runningCount: Swift.Int = 0,
            serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration? = nil,
            serviceConnectResources: [ECSClientTypes.ServiceConnectServiceResource]? = nil,
            status: Swift.String? = nil,
            taskDefinition: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil,
            volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.createdAt = createdAt
            self.desiredCount = desiredCount
            self.failedTasks = failedTasks
            self.fargateEphemeralStorage = fargateEphemeralStorage
            self.id = id
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.rolloutState = rolloutState
            self.rolloutStateReason = rolloutStateReason
            self.runningCount = runningCount
            self.serviceConnectConfiguration = serviceConnectConfiguration
            self.serviceConnectResources = serviceConnectResources
            self.status = status
            self.taskDefinition = taskDefinition
            self.updatedAt = updatedAt
            self.volumeConfigurations = volumeConfigurations
        }
    }
}

extension ECSClientTypes {

    /// The details for an event that's associated with a service.
    public struct ServiceEvent: Swift.Sendable {
        /// The Unix timestamp for the time when the event was triggered.
        public var createdAt: Foundation.Date?
        /// The ID string for the event.
        public var id: Swift.String?
        /// The event message.
        public var message: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.message = message
        }
    }
}

extension ECSClientTypes {

    public enum ScaleUnit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case percent
        case sdkUnknown(Swift.String)

        public static var allCases: [ScaleUnit] {
            return [
                .percent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .percent: return "PERCENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
    public struct Scale: Swift.Sendable {
        /// The unit of measure for the scale value.
        public var unit: ECSClientTypes.ScaleUnit?
        /// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
        public var value: Swift.Double

        public init(
            unit: ECSClientTypes.ScaleUnit? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.unit = unit
            self.value = value
        }
    }
}

extension ECSClientTypes {

    public enum StabilityStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case stabilizing
        case steadyState
        case sdkUnknown(Swift.String)

        public static var allCases: [StabilityStatus] {
            return [
                .stabilizing,
                .steadyState
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .stabilizing: return "STABILIZING"
            case .steadyState: return "STEADY_STATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// Information about a set of Amazon ECS tasks in either an CodeDeploy or an EXTERNAL deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.
    public struct TaskSet: Swift.Sendable {
        /// The capacity provider strategy that are associated with the task set.
        public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set exists in.
        public var clusterArn: Swift.String?
        /// The computed desired count for the task set. This is calculated by multiplying the service's desiredCount by the task set's scale percentage. The result is always rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.
        public var computedDesiredCount: Swift.Int
        /// The Unix timestamp for the time when the task set was created.
        public var createdAt: Foundation.Date?
        /// The external ID associated with the task set. If an CodeDeploy deployment created a task set, the externalId parameter contains the CodeDeploy deployment ID. If a task set is created for an external deployment and is associated with a service discovery registry, the externalId parameter contains the ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute.
        public var externalId: Swift.String?
        /// The Fargate ephemeral storage settings for the task set.
        public var fargateEphemeralStorage: ECSClientTypes.DeploymentEphemeralStorage?
        /// The ID of the task set.
        public var id: Swift.String?
        /// The launch type the tasks in the task set are using. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: ECSClientTypes.LaunchType?
        /// Details on a load balancer that are used with a task set.
        public var loadBalancers: [ECSClientTypes.LoadBalancer]?
        /// The network configuration for the task set.
        public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
        /// The number of tasks in the task set that are in the PENDING status during a deployment. A task in the PENDING state is preparing to enter the RUNNING state. A task set enters the PENDING status when it launches for the first time or when it's restarted after being in the STOPPED state.
        public var pendingCount: Swift.Int
        /// The operating system that your tasks in the set are running on. A platform family is specified only for tasks that use the Fargate launch type. All tasks in the set must have the same value.
        public var platformFamily: Swift.String?
        /// The Fargate platform version where the tasks in the task set are running. A platform version is only specified for tasks run on Fargate. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// The number of tasks in the task set that are in the RUNNING status during a deployment. A task in the RUNNING state is running and ready for use.
        public var runningCount: Swift.Int
        /// A floating-point percentage of your desired number of tasks to place and keep running in the task set.
        public var scale: ECSClientTypes.Scale?
        /// The Amazon Resource Name (ARN) of the service the task set exists in.
        public var serviceArn: Swift.String?
        /// The details for the service discovery registries to assign to this task set. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        public var serviceRegistries: [ECSClientTypes.ServiceRegistry]?
        /// The stability status. This indicates whether the task set has reached a steady state. If the following conditions are met, the task set are in STEADY_STATE:
        ///
        /// * The task runningCount is equal to the computedDesiredCount.
        ///
        /// * The pendingCount is 0.
        ///
        /// * There are no tasks that are running on container instances in the DRAINING status.
        ///
        /// * All tasks are reporting a healthy status from the load balancers, service discovery, and container health checks.
        ///
        ///
        /// If any of those conditions aren't met, the stability status returns STABILIZING.
        public var stabilityStatus: ECSClientTypes.StabilityStatus?
        /// The Unix timestamp for the time when the task set stability status was retrieved.
        public var stabilityStatusAt: Foundation.Date?
        /// The tag specified when a task set is started. If an CodeDeploy deployment created the task set, the startedBy parameter is CODE_DEPLOY. If an external deployment created the task set, the startedBy field isn't used.
        public var startedBy: Swift.String?
        /// The status of the task set. The following describes each state. PRIMARY The task set is serving production traffic. ACTIVE The task set isn't serving production traffic. DRAINING The tasks in the task set are being stopped, and their corresponding targets are being deregistered from their target group.
        public var status: Swift.String?
        /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [ECSClientTypes.Tag]?
        /// The task definition that the task set is using.
        public var taskDefinition: Swift.String?
        /// The Amazon Resource Name (ARN) of the task set.
        public var taskSetArn: Swift.String?
        /// The Unix timestamp for the time when the task set was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
            clusterArn: Swift.String? = nil,
            computedDesiredCount: Swift.Int = 0,
            createdAt: Foundation.Date? = nil,
            externalId: Swift.String? = nil,
            fargateEphemeralStorage: ECSClientTypes.DeploymentEphemeralStorage? = nil,
            id: Swift.String? = nil,
            launchType: ECSClientTypes.LaunchType? = nil,
            loadBalancers: [ECSClientTypes.LoadBalancer]? = nil,
            networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
            pendingCount: Swift.Int = 0,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            runningCount: Swift.Int = 0,
            scale: ECSClientTypes.Scale? = nil,
            serviceArn: Swift.String? = nil,
            serviceRegistries: [ECSClientTypes.ServiceRegistry]? = nil,
            stabilityStatus: ECSClientTypes.StabilityStatus? = nil,
            stabilityStatusAt: Foundation.Date? = nil,
            startedBy: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [ECSClientTypes.Tag]? = nil,
            taskDefinition: Swift.String? = nil,
            taskSetArn: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.computedDesiredCount = computedDesiredCount
            self.createdAt = createdAt
            self.externalId = externalId
            self.fargateEphemeralStorage = fargateEphemeralStorage
            self.id = id
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.runningCount = runningCount
            self.scale = scale
            self.serviceArn = serviceArn
            self.serviceRegistries = serviceRegistries
            self.stabilityStatus = stabilityStatus
            self.stabilityStatusAt = stabilityStatusAt
            self.startedBy = startedBy
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSetArn = taskSetArn
            self.updatedAt = updatedAt
        }
    }
}

extension ECSClientTypes {

    /// Details on a service within a cluster.
    public struct Service: Swift.Sendable {
        /// The capacity provider strategy the service uses. When using DescribeServices, this field is omitted if the service was created using a launch type.
        public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that hosts the service.
        public var clusterArn: Swift.String?
        /// The Unix timestamp for the time when the service was created.
        public var createdAt: Foundation.Date?
        /// The principal that created the service.
        public var createdBy: Swift.String?
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
        public var deploymentConfiguration: ECSClientTypes.DeploymentConfiguration?
        /// The deployment controller type the service is using.
        public var deploymentController: ECSClientTypes.DeploymentController?
        /// The current state of deployments for the service.
        public var deployments: [ECSClientTypes.Deployment]?
        /// The desired number of instantiations of the task definition to keep running on the service. This value is specified when the service is created with [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html) , and it can be modified with [UpdateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_UpdateService.html).
        public var desiredCount: Swift.Int
        /// Determines whether to use Amazon ECS managed tags for the tasks in the service. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
        public var enableECSManagedTags: Swift.Bool
        /// Determines whether the execute command functionality is turned on for the service. If true, the execute command functionality is turned on for all containers in tasks as part of the service.
        public var enableExecuteCommand: Swift.Bool
        /// The event stream for your service. A maximum of 100 of the latest events are displayed.
        public var events: [ECSClientTypes.ServiceEvent]?
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.
        public var healthCheckGracePeriodSeconds: Swift.Int?
        /// The launch type the service is using. When using the DescribeServices API, this field is omitted if the service was created using a capacity provider strategy.
        public var launchType: ECSClientTypes.LaunchType?
        /// A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the container name, and the container port to access from the load balancer. The container name is as it appears in a container definition.
        public var loadBalancers: [ECSClientTypes.LoadBalancer]?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
        /// The number of tasks in the cluster that are in the PENDING state.
        public var pendingCount: Swift.Int
        /// The placement constraints for the tasks in the service.
        public var placementConstraints: [ECSClientTypes.PlacementConstraint]?
        /// The placement strategy that determines how tasks for the service are placed.
        public var placementStrategy: [ECSClientTypes.PlacementStrategy]?
        /// The operating system that your tasks in the service run on. A platform family is specified only for tasks using the Fargate launch type. All tasks that run as part of this service must use the same platformFamily value as the service (for example, LINUX).
        public var platformFamily: Swift.String?
        /// The platform version to run your service on. A platform version is only specified for tasks that are hosted on Fargate. If one isn't specified, the LATEST platform version is used. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// Determines whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags aren't propagated.
        public var propagateTags: ECSClientTypes.PropagateTags?
        /// The ARN of the IAM role that's associated with the service. It allows the Amazon ECS container agent to register container instances with an Elastic Load Balancing load balancer.
        public var roleArn: Swift.String?
        /// The number of tasks in the cluster that are in the RUNNING state.
        public var runningCount: Swift.Int
        /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html). There are two service scheduler strategies available.
        ///
        /// * REPLICA-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions.
        ///
        /// * DAEMON-The daemon scheduling strategy deploys exactly one task on each active container instance. This task meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks. It stop tasks that don't meet the placement constraints. Fargate tasks don't support the DAEMON scheduling strategy.
        public var schedulingStrategy: ECSClientTypes.SchedulingStrategy?
        /// The ARN that identifies the service. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
        public var serviceArn: Swift.String?
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster. However, you can have similarly named services in multiple clusters within a Region or across multiple Regions.
        public var serviceName: Swift.String?
        /// The details for the service discovery registries to assign to this service. For more information, see [Service Discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        public var serviceRegistries: [ECSClientTypes.ServiceRegistry]?
        /// The status of the service. The valid values are ACTIVE, DRAINING, or INACTIVE.
        public var status: Swift.String?
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value. You define both the key and value. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [ECSClientTypes.Tag]?
        /// The task definition to use for tasks in the service. This value is specified when the service is created with [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html), and it can be modified with [UpdateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_UpdateService.html).
        public var taskDefinition: Swift.String?
        /// Information about a set of Amazon ECS tasks in either an CodeDeploy or an EXTERNAL deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.
        public var taskSets: [ECSClientTypes.TaskSet]?

        public init(
            capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
            clusterArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            createdBy: Swift.String? = nil,
            deploymentConfiguration: ECSClientTypes.DeploymentConfiguration? = nil,
            deploymentController: ECSClientTypes.DeploymentController? = nil,
            deployments: [ECSClientTypes.Deployment]? = nil,
            desiredCount: Swift.Int = 0,
            enableECSManagedTags: Swift.Bool = false,
            enableExecuteCommand: Swift.Bool = false,
            events: [ECSClientTypes.ServiceEvent]? = nil,
            healthCheckGracePeriodSeconds: Swift.Int? = nil,
            launchType: ECSClientTypes.LaunchType? = nil,
            loadBalancers: [ECSClientTypes.LoadBalancer]? = nil,
            networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
            pendingCount: Swift.Int = 0,
            placementConstraints: [ECSClientTypes.PlacementConstraint]? = nil,
            placementStrategy: [ECSClientTypes.PlacementStrategy]? = nil,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            propagateTags: ECSClientTypes.PropagateTags? = nil,
            roleArn: Swift.String? = nil,
            runningCount: Swift.Int = 0,
            schedulingStrategy: ECSClientTypes.SchedulingStrategy? = nil,
            serviceArn: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            serviceRegistries: [ECSClientTypes.ServiceRegistry]? = nil,
            status: Swift.String? = nil,
            tags: [ECSClientTypes.Tag]? = nil,
            taskDefinition: Swift.String? = nil,
            taskSets: [ECSClientTypes.TaskSet]? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.createdAt = createdAt
            self.createdBy = createdBy
            self.deploymentConfiguration = deploymentConfiguration
            self.deploymentController = deploymentController
            self.deployments = deployments
            self.desiredCount = desiredCount
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.events = events
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.roleArn = roleArn
            self.runningCount = runningCount
            self.schedulingStrategy = schedulingStrategy
            self.serviceArn = serviceArn
            self.serviceName = serviceName
            self.serviceRegistries = serviceRegistries
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSets = taskSets
        }
    }
}

public struct CreateServiceOutput: Swift.Sendable {
    /// The full description of your service following the create call. A service will return either a capacityProviderStrategy or launchType parameter, but not both, depending where one was specified when it was created. If a service is using the ECS deployment controller, the deploymentController and taskSets parameters will not be returned. if the service uses the CODE_DEPLOY deployment controller, the deploymentController, taskSets and deployments parameters will be returned, however the deployments parameter will be an empty list.
    public var service: ECSClientTypes.Service?

    public init(
        service: ECSClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

/// The specified service isn't active. You can't update a service that's inactive. If you have previously deleted a service, you can re-create it with [CreateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
public struct ServiceNotActiveException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceNotActiveException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified service wasn't found. You can view your available services with [ListServices](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListServices.html). Amazon ECS services are cluster specific and Region specific.
public struct ServiceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateTaskSetInput: Swift.Sendable {
    /// The capacity provider strategy to use for the task set. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html) API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the [CreateCapacityProviderProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProviderProvider.html)API operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html) API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
    public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
    /// An identifier that you provide to ensure the idempotency of the request. It must be unique and is case sensitive. Up to 36 ASCII characters in the range of 33-126 (inclusive) are allowed.
    public var clientToken: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
    /// This member is required.
    public var cluster: Swift.String?
    /// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute set to the provided value.
    public var externalId: Swift.String?
    /// The launch type that new tasks in the task set uses. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide. If a launchType is specified, the capacityProviderStrategy parameter must be omitted.
    public var launchType: ECSClientTypes.LaunchType?
    /// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
    public var loadBalancers: [ECSClientTypes.LoadBalancer]?
    /// An object representing the network configuration for a task set.
    public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
    /// The platform version that the tasks in the task set uses. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used.
    public var platformVersion: Swift.String?
    /// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
    public var scale: ECSClientTypes.Scale?
    /// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
    /// This member is required.
    public var service: Swift.String?
    /// The details of the service discovery registries to assign to this task set. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
    public var serviceRegistries: [ECSClientTypes.ServiceRegistry]?
    /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. When a service is deleted, the tags are deleted. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The task definition for the tasks in the task set to use. If a revision isn't specified, the latest ACTIVE revision is used.
    /// This member is required.
    public var taskDefinition: Swift.String?

    public init(
        capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
        clientToken: Swift.String? = nil,
        cluster: Swift.String? = nil,
        externalId: Swift.String? = nil,
        launchType: ECSClientTypes.LaunchType? = nil,
        loadBalancers: [ECSClientTypes.LoadBalancer]? = nil,
        networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
        platformVersion: Swift.String? = nil,
        scale: ECSClientTypes.Scale? = nil,
        service: Swift.String? = nil,
        serviceRegistries: [ECSClientTypes.ServiceRegistry]? = nil,
        tags: [ECSClientTypes.Tag]? = nil,
        taskDefinition: Swift.String? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.clientToken = clientToken
        self.cluster = cluster
        self.externalId = externalId
        self.launchType = launchType
        self.loadBalancers = loadBalancers
        self.networkConfiguration = networkConfiguration
        self.platformVersion = platformVersion
        self.scale = scale
        self.service = service
        self.serviceRegistries = serviceRegistries
        self.tags = tags
        self.taskDefinition = taskDefinition
    }
}

public struct CreateTaskSetOutput: Swift.Sendable {
    /// Information about a set of Amazon ECS tasks in either an CodeDeploy or an EXTERNAL deployment. A task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.
    public var taskSet: ECSClientTypes.TaskSet?

    public init(
        taskSet: ECSClientTypes.TaskSet? = nil
    )
    {
        self.taskSet = taskSet
    }
}

extension ECSClientTypes {

    public enum SettingName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsvpcTrunking
        case containerInsights
        case containerInstanceLongArnFormat
        case fargateFipsMode
        case fargateTaskRetirementWaitPeriod
        case guardDutyActivate
        case serviceLongArnFormat
        case tagResourceAuthorization
        case taskLongArnFormat
        case sdkUnknown(Swift.String)

        public static var allCases: [SettingName] {
            return [
                .awsvpcTrunking,
                .containerInsights,
                .containerInstanceLongArnFormat,
                .fargateFipsMode,
                .fargateTaskRetirementWaitPeriod,
                .guardDutyActivate,
                .serviceLongArnFormat,
                .tagResourceAuthorization,
                .taskLongArnFormat
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsvpcTrunking: return "awsvpcTrunking"
            case .containerInsights: return "containerInsights"
            case .containerInstanceLongArnFormat: return "containerInstanceLongArnFormat"
            case .fargateFipsMode: return "fargateFIPSMode"
            case .fargateTaskRetirementWaitPeriod: return "fargateTaskRetirementWaitPeriod"
            case .guardDutyActivate: return "guardDutyActivate"
            case .serviceLongArnFormat: return "serviceLongArnFormat"
            case .tagResourceAuthorization: return "tagResourceAuthorization"
            case .taskLongArnFormat: return "taskLongArnFormat"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteAccountSettingInput: Swift.Sendable {
    /// The resource name to disable the account setting for. If serviceLongArnFormat is specified, the ARN for your Amazon ECS services is affected. If taskLongArnFormat is specified, the ARN and resource ID for your Amazon ECS tasks is affected. If containerInstanceLongArnFormat is specified, the ARN and resource ID for your Amazon ECS container instances is affected. If awsvpcTrunking is specified, the ENI limit for your Amazon ECS container instances is affected.
    /// This member is required.
    public var name: ECSClientTypes.SettingName?
    /// The Amazon Resource Name (ARN) of the principal. It can be an user, role, or the root user. If you specify the root user, it disables the account setting for all users, roles, and the root user of the account unless a user or role explicitly overrides these settings. If this field is omitted, the setting is changed only for the authenticated user.
    public var principalArn: Swift.String?

    public init(
        name: ECSClientTypes.SettingName? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.name = name
        self.principalArn = principalArn
    }
}

extension ECSClientTypes {

    public enum SettingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsManaged
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [SettingType] {
            return [
                .awsManaged,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsManaged: return "aws_managed"
            case .user: return "user"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The current account setting for a resource.
    public struct Setting: Swift.Sendable {
        /// The Amazon ECS resource name.
        public var name: ECSClientTypes.SettingName?
        /// The ARN of the principal. It can be a user, role, or the root user. If this field is omitted, the authenticated user is assumed.
        public var principalArn: Swift.String?
        /// Indicates whether Amazon Web Services manages the account setting, or if the user manages it. aws_managed account settings are read-only, as Amazon Web Services manages such on the customer's behalf. Currently, the guardDutyActivate account setting is the only one Amazon Web Services manages.
        public var type: ECSClientTypes.SettingType?
        /// Determines whether the account setting is on or off for the specified resource.
        public var value: Swift.String?

        public init(
            name: ECSClientTypes.SettingName? = nil,
            principalArn: Swift.String? = nil,
            type: ECSClientTypes.SettingType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.principalArn = principalArn
            self.type = type
            self.value = value
        }
    }
}

public struct DeleteAccountSettingOutput: Swift.Sendable {
    /// The account setting for the specified principal ARN.
    public var setting: ECSClientTypes.Setting?

    public init(
        setting: ECSClientTypes.Setting? = nil
    )
    {
        self.setting = setting
    }
}

/// The specified target wasn't found. You can view your available container instances with [ListContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListContainerInstances.html). Amazon ECS container instances are cluster-specific and Region-specific.
public struct TargetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ECSClientTypes {

    public enum TargetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case containerInstance
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .containerInstance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .containerInstance: return "container-instance"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// An attribute is a name-value pair that's associated with an Amazon ECS object. Use attributes to extend the Amazon ECS data model by adding custom metadata to your resources. For more information, see [Attributes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes) in the Amazon Elastic Container Service Developer Guide.
    public struct Attribute: Swift.Sendable {
        /// The name of the attribute. The name must contain between 1 and 128 characters. The name may contain letters (uppercase and lowercase), numbers, hyphens (-), underscores (_), forward slashes (/), back slashes (\), or periods (.).
        /// This member is required.
        public var name: Swift.String?
        /// The ID of the target. You can specify the short form ID for a resource or the full Amazon Resource Name (ARN).
        public var targetId: Swift.String?
        /// The type of the target to attach the attribute with. This parameter is required if you use the short form ID for a resource instead of the full ARN.
        public var targetType: ECSClientTypes.TargetType?
        /// The value of the attribute. The value must contain between 1 and 128 characters. It can contain letters (uppercase and lowercase), numbers, hyphens (-), underscores (_), periods (.), at signs (@), forward slashes (/), back slashes (\), colons (:), or spaces. The value can't start or end with a space.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            targetId: Swift.String? = nil,
            targetType: ECSClientTypes.TargetType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.targetId = targetId
            self.targetType = targetType
            self.value = value
        }
    }
}

public struct DeleteAttributesInput: Swift.Sendable {
    /// The attributes to delete from your resource. You can specify up to 10 attributes for each request. For custom attributes, specify the attribute name and target ID, but don't specify the value. If you specify the target ID using the short form, you must also specify the target type.
    /// This member is required.
    public var attributes: [ECSClientTypes.Attribute]?
    /// The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to delete attributes. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?

    public init(
        attributes: [ECSClientTypes.Attribute]? = nil,
        cluster: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.cluster = cluster
    }
}

public struct DeleteAttributesOutput: Swift.Sendable {
    /// A list of attribute objects that were successfully deleted from your resource.
    public var attributes: [ECSClientTypes.Attribute]?

    public init(
        attributes: [ECSClientTypes.Attribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct DeleteCapacityProviderInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the capacity provider to delete.
    /// This member is required.
    public var capacityProvider: Swift.String?

    public init(
        capacityProvider: Swift.String? = nil
    )
    {
        self.capacityProvider = capacityProvider
    }
}

public struct DeleteCapacityProviderOutput: Swift.Sendable {
    /// The details of the capacity provider.
    public var capacityProvider: ECSClientTypes.CapacityProvider?

    public init(
        capacityProvider: ECSClientTypes.CapacityProvider? = nil
    )
    {
        self.capacityProvider = capacityProvider
    }
}

/// You can't delete a cluster that has registered container instances. First, deregister the container instances before you can delete the cluster. For more information, see [DeregisterContainerInstance](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterContainerInstance.html).
public struct ClusterContainsContainerInstancesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterContainsContainerInstancesException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You can't delete a cluster that contains services. First, update the service to reduce its desired task count to 0, and then delete the service. For more information, see [UpdateService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_UpdateService.html) and [DeleteService](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteService.html).
public struct ClusterContainsServicesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterContainsServicesException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You can't delete a cluster that has active tasks.
public struct ClusterContainsTasksException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClusterContainsTasksException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteClusterInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster to delete.
    /// This member is required.
    public var cluster: Swift.String?

    public init(
        cluster: Swift.String? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DeleteClusterOutput: Swift.Sendable {
    /// The full description of the deleted cluster.
    public var cluster: ECSClientTypes.Cluster?

    public init(
        cluster: ECSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DeleteServiceInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to delete. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// If true, allows you to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.
    public var force: Swift.Bool?
    /// The name of the service to delete.
    /// This member is required.
    public var service: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        force: Swift.Bool? = nil,
        service: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.force = force
        self.service = service
    }
}

public struct DeleteServiceOutput: Swift.Sendable {
    /// The full description of the deleted service.
    public var service: ECSClientTypes.Service?

    public init(
        service: ECSClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

public struct DeleteTaskDefinitionsInput: Swift.Sendable {
    /// The family and revision (family:revision) or full Amazon Resource Name (ARN) of the task definition to delete. You must specify a revision. You can specify up to 10 task definitions as a comma separated list.
    /// This member is required.
    public var taskDefinitions: [Swift.String]?

    public init(
        taskDefinitions: [Swift.String]? = nil
    )
    {
        self.taskDefinitions = taskDefinitions
    }
}

extension ECSClientTypes {

    /// A failed resource. For a list of common causes, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the Amazon Elastic Container Service Developer Guide.
    public struct Failure: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the failed resource.
        public var arn: Swift.String?
        /// The details of the failure.
        public var detail: Swift.String?
        /// The reason for the failure.
        public var reason: Swift.String?

        public init(
            arn: Swift.String? = nil,
            detail: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.arn = arn
            self.detail = detail
            self.reason = reason
        }
    }
}

extension ECSClientTypes {

    public enum Compatibility: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case external
        case fargate
        case sdkUnknown(Swift.String)

        public static var allCases: [Compatibility] {
            return [
                .ec2,
                .external,
                .fargate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .external: return "EXTERNAL"
            case .fargate: return "FARGATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum ContainerCondition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case healthy
        case start
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerCondition] {
            return [
                .complete,
                .healthy,
                .start,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .healthy: return "HEALTHY"
            case .start: return "START"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed. Your Amazon ECS container instances require at least version 1.26.0 of the container agent to use container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the Amazon Elastic Container Service Developer Guide. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the Amazon Elastic Container Service Developer Guide. For tasks that use the Fargate launch type, the task or service requires the following platforms:
    ///
    /// * Linux platform version 1.3.0 or later.
    ///
    /// * Windows platform version 1.0.0 or later.
    ///
    ///
    /// For more information about how to create a container dependency, see [Container dependency](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/example_task_definitions.html#example_task_definition-containerdependency) in the Amazon Elastic Container Service Developer Guide.
    public struct ContainerDependency: Swift.Sendable {
        /// The dependency condition of the container. The following are the available conditions and their behavior:
        ///
        /// * START - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
        ///
        /// * COMPLETE - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
        ///
        /// * SUCCESS - This condition is the same as COMPLETE, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
        ///
        /// * HEALTHY - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.
        /// This member is required.
        public var condition: ECSClientTypes.ContainerCondition?
        /// The name of a container.
        /// This member is required.
        public var containerName: Swift.String?

        public init(
            condition: ECSClientTypes.ContainerCondition? = nil,
            containerName: Swift.String? = nil
        )
        {
            self.condition = condition
            self.containerName = containerName
        }
    }
}

extension ECSClientTypes {

    public enum EnvironmentFileType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentFileType] {
            return [
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3: return "s3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a .env file extension. Each line in an environment file should contain an environment variable in VARIABLE=VALUE format. Lines beginning with # are treated as comments and are ignored. If there are environment variables specified using the environment parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Use a file to pass environment variables to a container](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html) in the Amazon Elastic Container Service Developer Guide. Environment variable files are objects in Amazon S3 and all Amazon S3 security considerations apply. You must use the following platforms for the Fargate launch type:
    ///
    /// * Linux platform version 1.4.0 or later.
    ///
    /// * Windows platform version 1.0.0 or later.
    ///
    ///
    /// Consider the following when using the Fargate launch type:
    ///
    /// * The file is handled like a native Docker env-file.
    ///
    /// * There is no support for shell escape handling.
    ///
    /// * The container entry point interperts the VARIABLE values.
    public struct EnvironmentFile: Swift.Sendable {
        /// The file type to use. Environment files are objects in Amazon S3. The only supported value is s3.
        /// This member is required.
        public var type: ECSClientTypes.EnvironmentFileType?
        /// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
        /// This member is required.
        public var value: Swift.String?

        public init(
            type: ECSClientTypes.EnvironmentFileType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }
}

extension ECSClientTypes {

    /// Hostnames and IP address entries that are added to the /etc/hosts file of a container via the extraHosts parameter of its [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).
    public struct HostEntry: Swift.Sendable {
        /// The hostname to use in the /etc/hosts entry.
        /// This member is required.
        public var hostname: Swift.String?
        /// The IP address to use in the /etc/hosts entry.
        /// This member is required.
        public var ipAddress: Swift.String?

        public init(
            hostname: Swift.String? = nil,
            ipAddress: Swift.String? = nil
        )
        {
            self.hostname = hostname
            self.ipAddress = ipAddress
        }
    }
}

extension ECSClientTypes {

    public enum FirelensConfigurationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fluentbit
        case fluentd
        case sdkUnknown(Swift.String)

        public static var allCases: [FirelensConfigurationType] {
            return [
                .fluentbit,
                .fluentd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fluentbit: return "fluentbit"
            case .fluentd: return "fluentd"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the Amazon Elastic Container Service Developer Guide.
    public struct FirelensConfiguration: Swift.Sendable {
        /// The options to use when configuring the log router. This field is optional and can be used to specify a custom configuration file or to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event. If specified, the syntax to use is "options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}. For more information, see [Creating a task definition that uses a FireLens configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef) in the Amazon Elastic Container Service Developer Guide. Tasks hosted on Fargate only support the file configuration file type.
        public var options: [Swift.String: Swift.String]?
        /// The log router to use. The valid values are fluentd or fluentbit.
        /// This member is required.
        public var type: ECSClientTypes.FirelensConfigurationType?

        public init(
            options: [Swift.String: Swift.String]? = nil,
            type: ECSClientTypes.FirelensConfigurationType? = nil
        )
        {
            self.options = options
            self.type = type
        }
    }
}

extension ECSClientTypes {

    /// An object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the HEALTHCHECK parameter of docker run. The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image. You can view the health status of both individual containers and a task with the DescribeTasks API operation or when viewing the task details in the console. The health check is designed to make sure that your containers survive agent restarts, upgrades, or temporary unavailability. Amazon ECS performs health checks on containers with the default that launched the container instance or the task. The following describes the possible healthStatus values for a container:
    ///
    /// * HEALTHY-The container health check has passed successfully.
    ///
    /// * UNHEALTHY-The container health check has failed.
    ///
    /// * UNKNOWN-The container health check is being evaluated, there's no container health check defined, or Amazon ECS doesn't have the health status of the container.
    ///
    ///
    /// The following describes the possible healthStatus values based on the container health checker status of essential containers in the task with the following priority order (high to low):
    ///
    /// * UNHEALTHY-One or more essential containers have failed their health check.
    ///
    /// * UNKNOWN-Any essential container running within the task is in an UNKNOWN state and no other essential containers have an UNHEALTHY state.
    ///
    /// * HEALTHY-All essential containers within the task have passed their health checks.
    ///
    ///
    /// Consider the following task health example with 2 containers.
    ///
    /// * If Container1 is UNHEALTHY and Container2 is UNKNOWN, the task health is UNHEALTHY.
    ///
    /// * If Container1 is UNHEALTHY and Container2 is HEALTHY, the task health is UNHEALTHY.
    ///
    /// * If Container1 is HEALTHY and Container2 is UNKNOWN, the task health is UNKNOWN.
    ///
    /// * If Container1 is HEALTHY and Container2 is HEALTHY, the task health is HEALTHY.
    ///
    ///
    /// Consider the following task health example with 3 containers.
    ///
    /// * If Container1 is UNHEALTHY and Container2 is UNKNOWN, and Container3 is UNKNOWN, the task health is UNHEALTHY.
    ///
    /// * If Container1 is UNHEALTHY and Container2 is UNKNOWN, and Container3 is HEALTHY, the task health is UNHEALTHY.
    ///
    /// * If Container1 is UNHEALTHY and Container2 is HEALTHY, and Container3 is HEALTHY, the task health is UNHEALTHY.
    ///
    /// * If Container1 is HEALTHY and Container2 is UNKNOWN, and Container3 is HEALTHY, the task health is UNKNOWN.
    ///
    /// * If Container1 is HEALTHY and Container2 is UNKNOWN, and Container3 is UNKNOWN, the task health is UNKNOWN.
    ///
    /// * If Container1 is HEALTHY and Container2 is HEALTHY, and Container3 is HEALTHY, the task health is HEALTHY.
    ///
    ///
    /// If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it. The following are notes about container health check support:
    ///
    /// * If the Amazon ECS container agent becomes disconnected from the Amazon ECS service, this won't cause a container to transition to an UNHEALTHY status. This is by design, to ensure that containers remain running during agent restarts or temporary unavailability. The health check status is the "last heard from" response from the Amazon ECS agent, so if the container was considered HEALTHY prior to the disconnect, that status will remain until the agent reconnects and another health check occurs. There are no assumptions made about the status of the container health checks.
    ///
    /// * Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS container agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
    ///
    /// * Container health checks are supported for Fargate tasks if you're using platform version 1.1.0 or greater. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
    ///
    /// * Container health checks aren't supported for tasks that are part of a service that's configured to use a Classic Load Balancer.
    public struct HealthCheck: Swift.Sendable {
        /// A string array representing the command that the container runs to determine if it is healthy. The string array must start with CMD to run the command arguments directly, or CMD-SHELL to run the command with the container's default shell. When you use the Amazon Web Services Management Console JSON panel, the Command Line Interface, or the APIs, enclose the list of commands in double quotes and brackets. [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ] You don't include the double quotes and brackets when you use the Amazon Web Services Management Console.  CMD-SHELL, curl -f http://localhost/ || exit 1 An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see HealthCheck in the docker container create command.
        /// This member is required.
        public var command: [Swift.String]?
        /// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
        public var interval: Swift.Int?
        /// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
        public var retries: Swift.Int?
        /// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the startPeriod is off. If a health check succeeds within the startPeriod, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
        public var startPeriod: Swift.Int?
        /// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
        public var timeout: Swift.Int?

        public init(
            command: [Swift.String]? = nil,
            interval: Swift.Int? = nil,
            retries: Swift.Int? = nil,
            startPeriod: Swift.Int? = nil,
            timeout: Swift.Int? = nil
        )
        {
            self.command = command
            self.interval = interval
            self.retries = retries
            self.startPeriod = startPeriod
            self.timeout = timeout
        }
    }
}

extension ECSClientTypes {

    /// The Linux capabilities to add or remove from the default Docker configuration for a container defined in the task definition. For more detailed information about these Linux capabilities, see the [capabilities(7)](http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
    public struct KernelCapabilities: Swift.Sendable {
        /// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to CapAdd in the docker container create command and the --cap-add option to docker run. Tasks launched on Fargate only support adding the SYS_PTRACE kernel capability. Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"
        public var add: [Swift.String]?
        /// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to CapDrop in the docker container create command and the --cap-drop option to docker run. Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"
        public var drop: [Swift.String]?

        public init(
            add: [Swift.String]? = nil,
            drop: [Swift.String]? = nil
        )
        {
            self.add = add
            self.drop = drop
        }
    }
}

extension ECSClientTypes {

    public enum DeviceCgroupPermission: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mknod
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceCgroupPermission] {
            return [
                .mknod,
                .read,
                .write
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mknod: return "mknod"
            case .read: return "read"
            case .write: return "write"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// An object representing a container instance host device.
    public struct Device: Swift.Sendable {
        /// The path inside the container at which to expose the host device.
        public var containerPath: Swift.String?
        /// The path for the device on the host container instance.
        /// This member is required.
        public var hostPath: Swift.String?
        /// The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
        public var permissions: [ECSClientTypes.DeviceCgroupPermission]?

        public init(
            containerPath: Swift.String? = nil,
            hostPath: Swift.String? = nil,
            permissions: [ECSClientTypes.DeviceCgroupPermission]? = nil
        )
        {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }
    }
}

extension ECSClientTypes {

    /// The container path, mount options, and size of the tmpfs mount.
    public struct Tmpfs: Swift.Sendable {
        /// The absolute file path where the tmpfs volume is to be mounted.
        /// This member is required.
        public var containerPath: Swift.String?
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
        public var mountOptions: [Swift.String]?
        /// The maximum size (in MiB) of the tmpfs volume.
        /// This member is required.
        public var size: Swift.Int

        public init(
            containerPath: Swift.String? = nil,
            mountOptions: [Swift.String]? = nil,
            size: Swift.Int = 0
        )
        {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }
    }
}

extension ECSClientTypes {

    /// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
    public struct LinuxParameters: Swift.Sendable {
        /// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker. For tasks that use the Fargate launch type, capabilities is supported for all platform versions but the add parameter is only supported if using platform version 1.4.0 or later.
        public var capabilities: ECSClientTypes.KernelCapabilities?
        /// Any host devices to expose to the container. This parameter maps to Devices in the docker container create command and the --device option to docker run. If you're using tasks that use the Fargate launch type, the devices parameter isn't supported.
        public var devices: [ECSClientTypes.Device]?
        /// Run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'
        public var initProcessEnabled: Swift.Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the --memory-swap option to docker run where the value would be the sum of the container memory plus the maxSwap value. If a maxSwap value of 0 is specified, the container will not use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container will use the swap configuration for the container instance it is running on. A maxSwap value must be set for the swappiness parameter to be used. If you're using tasks that use the Fargate launch type, the maxSwap parameter isn't supported. If you're using tasks on Amazon Linux 2023 the swappiness parameter isn't supported.
        public var maxSwap: Swift.Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run. If you are using tasks that use the Fargate launch type, the sharedMemorySize parameter is not supported.
        public var sharedMemorySize: Swift.Int?
        /// This allows you to tune a container's memory swappiness behavior. A swappiness value of 0 will cause swapping to not happen unless absolutely necessary. A swappiness value of 100 will cause pages to be swapped very aggressively. Accepted values are whole numbers between 0 and 100. If the swappiness parameter is not specified, a default value of 60 is used. If a value is not specified for maxSwap then this parameter is ignored. This parameter maps to the --memory-swappiness option to docker run. If you're using tasks that use the Fargate launch type, the swappiness parameter isn't supported. If you're using tasks on Amazon Linux 2023 the swappiness parameter isn't supported.
        public var swappiness: Swift.Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run. If you're using tasks that use the Fargate launch type, the tmpfs parameter isn't supported.
        public var tmpfs: [ECSClientTypes.Tmpfs]?

        public init(
            capabilities: ECSClientTypes.KernelCapabilities? = nil,
            devices: [ECSClientTypes.Device]? = nil,
            initProcessEnabled: Swift.Bool? = nil,
            maxSwap: Swift.Int? = nil,
            sharedMemorySize: Swift.Int? = nil,
            swappiness: Swift.Int? = nil,
            tmpfs: [ECSClientTypes.Tmpfs]? = nil
        )
        {
            self.capabilities = capabilities
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }
    }
}

extension ECSClientTypes {

    /// The details for a volume mount point that's used in a container definition.
    public struct MountPoint: Swift.Sendable {
        /// The path on the container to mount the host volume at.
        public var containerPath: Swift.String?
        /// If this value is true, the container has read-only access to the volume. If this value is false, then the container can write to the volume. The default value is false.
        public var readOnly: Swift.Bool?
        /// The name of the volume to mount. Must be a volume name referenced in the name parameter of task definition volume.
        public var sourceVolume: Swift.String?

        public init(
            containerPath: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            sourceVolume: Swift.String? = nil
        )
        {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }
    }
}

extension ECSClientTypes {

    public enum ApplicationProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case grpc
        case http
        case http2
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationProtocol] {
            return [
                .grpc,
                .http,
                .http2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .grpc: return "grpc"
            case .http: return "http"
            case .http2: return "http2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum TransportProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [TransportProtocol] {
            return [
                .tcp,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tcp: return "tcp"
            case .udp: return "udp"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// Port mappings expose your container's network ports to the outside world. this allows clients to access your application. It's also used for inter-container communication within the same task. For task definitions (both the Fargate and EC2 launch type) that use the awsvpc network mode, only specify the containerPort. The hostPort is always ignored, and the container port is automatically mapped to a random high-numbered port on the host. Most fields of this parameter (containerPort, hostPort, protocol) maps to PortBindings in the docker container create command and the --publish option to docker run. If the network mode of a task definition is set to host, host ports must either be undefined or match the container port in the port mapping. You can't expose the same container port for multiple protocols. If you attempt this, an error is returned. After a task reaches the RUNNING status, manual and automatic host and container port assignments are visible in the networkBindings section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
    public struct PortMapping: Swift.Sendable {
        /// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch. If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP. appProtocol is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        public var appProtocol: ECSClientTypes.ApplicationProtocol?
        /// The port number on the container that's bound to the user-specified or automatically assigned host port. For tasks that use the Fargate launch type or EC2 tasks that use the awsvpc network mode, you use containerPort to specify the exposed ports. For Windows containers on Fargate, you can't use port 3150 for the containerPort. This is because it's reserved. Suppose that you're using containers in a task with the EC2 launch type and you specify a container port and not a host port. Then, your container automatically receives a host port in the ephemeral port range. For more information, see hostPort. Port mappings that are automatically assigned in this way don't count toward the 100 reserved ports quota of a container instance.
        public var containerPort: Swift.Int?
        /// The port number range on the container that's bound to the dynamically mapped host port range. The following rules apply when you specify a containerPortRange:
        ///
        /// * You must use either the bridge network mode or the awsvpc network mode.
        ///
        /// * This parameter is available for both the EC2 and Fargate launch types.
        ///
        /// * This parameter is available for both the Linux and Windows operating systems.
        ///
        /// * The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ecs-init package
        ///
        /// * You can specify a maximum of 100 port ranges per container.
        ///
        /// * You do not specify a hostPortRange. The value of the hostPortRange is set as follows:
        ///
        /// * For containers in a task with the awsvpc network mode, the hostPortRange is set to the same value as the containerPortRange. This is a static mapping strategy.
        ///
        /// * For containers in a task with the bridge network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.
        ///
        ///
        ///
        ///
        /// * The containerPortRange valid values are between 1 and 65535.
        ///
        /// * A port can only be included in one port mapping per container.
        ///
        /// * You cannot specify overlapping port ranges.
        ///
        /// * The first port in the range must be less than last port in the range.
        ///
        /// * Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports. For more information, see [ Issue #11185](https://github.com/moby/moby/issues/11185) on the Github website. For information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the Amazon ECS Developer Guide.
        ///
        ///
        /// You can call [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the hostPortRange which are the host ports that are bound to the container ports.
        public var containerPortRange: Swift.String?
        /// The port number on the container instance to reserve for your container. If you specify a containerPortRange, leave this field empty and the value of the hostPort is set as follows:
        ///
        /// * For containers in a task with the awsvpc network mode, the hostPort is set to the same value as the containerPort. This is a static mapping strategy.
        ///
        /// * For containers in a task with the bridge network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
        ///
        ///
        /// If you use containers in a task with the awsvpc or host network mode, the hostPort can either be left blank or set to the same value as the containerPort. If you use containers in a task with the bridge network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the hostPort (or set it to 0) while specifying a containerPort and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version. The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under /proc/sys/net/ipv4/ip_local_port_range. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 (Linux) or 49152 through 65535 (Windows) is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range. The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running. That is, after a task stops, the host port is released. The current reserved ports are displayed in the remainingResources of [DescribeContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html) output. A container instance can have up to 100 reserved ports at a time. This number includes the default reserved ports. Automatically assigned ports aren't included in the 100 reserved ports quota.
        public var hostPort: Swift.Int?
        /// The name that's used for the port mapping. This parameter only applies to Service Connect. This parameter is the name that you use in the serviceConnectConfiguration of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        public var name: Swift.String?
        /// The protocol used for the port mapping. Valid values are tcp and udp. The default is tcp. protocol is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
        public var `protocol`: ECSClientTypes.TransportProtocol?

        public init(
            appProtocol: ECSClientTypes.ApplicationProtocol? = nil,
            containerPort: Swift.Int? = nil,
            containerPortRange: Swift.String? = nil,
            hostPort: Swift.Int? = nil,
            name: Swift.String? = nil,
            `protocol`: ECSClientTypes.TransportProtocol? = nil
        )
        {
            self.appProtocol = appProtocol
            self.containerPort = containerPort
            self.containerPortRange = containerPortRange
            self.hostPort = hostPort
            self.name = name
            self.`protocol` = `protocol`
        }
    }
}

extension ECSClientTypes {

    /// The repository credentials for private registry authentication.
    public struct RepositoryCredentials: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the secret containing the private repository credentials. When you use the Amazon ECS API, CLI, or Amazon Web Services SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the Amazon Web Services Management Console, you must specify the full ARN of the secret.
        /// This member is required.
        public var credentialsParameter: Swift.String?

        public init(
            credentialsParameter: Swift.String? = nil
        )
        {
            self.credentialsParameter = credentialsParameter
        }
    }
}

extension ECSClientTypes {

    public enum ResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gpu
        case inferenceAccelerator
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .gpu,
                .inferenceAccelerator
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case .inferenceAccelerator: return "InferenceAccelerator"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the Amazon Elastic Container Service Developer Guide
    public struct ResourceRequirement: Swift.Sendable {
        /// The type of resource to assign to a container.
        /// This member is required.
        public var type: ECSClientTypes.ResourceType?
        /// The value for the specified resource type. When the type is GPU, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. When the type is InferenceAccelerator, the value matches the deviceName for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
        /// This member is required.
        public var value: Swift.String?

        public init(
            type: ECSClientTypes.ResourceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }
}

extension ECSClientTypes {

    /// You can enable a restart policy for each container defined in your task definition, to overcome transient failures faster and maintain task availability. When you enable a restart policy for a container, Amazon ECS can restart the container if it exits, without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the Amazon Elastic Container Service Developer Guide.
    public struct ContainerRestartPolicy: Swift.Sendable {
        /// Specifies whether a restart policy is enabled for the container.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.
        public var ignoredExitCodes: [Swift.Int]?
        /// A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every restartAttemptPeriod seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum restartAttemptPeriod of 60 seconds and a maximum restartAttemptPeriod of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.
        public var restartAttemptPeriod: Swift.Int?

        public init(
            enabled: Swift.Bool? = nil,
            ignoredExitCodes: [Swift.Int]? = nil,
            restartAttemptPeriod: Swift.Int? = nil
        )
        {
            self.enabled = enabled
            self.ignoredExitCodes = ignoredExitCodes
            self.restartAttemptPeriod = restartAttemptPeriod
        }
    }
}

extension ECSClientTypes {

    /// A list of namespaced kernel parameters to set in the container. This parameter maps to Sysctls in the docker container create command and the --sysctl option to docker run. For example, you can configure net.ipv4.tcp_keepalive_time setting to maintain longer lived connections. We don't recommend that you specify network-related systemControls parameters for multiple containers in a single task that also uses either the awsvpc or host network mode. Doing this has the following disadvantages:
    ///
    /// * For tasks that use the awsvpc network mode including Fargate, if you set systemControls for any container, it applies to all containers in the task. If you set different systemControls for multiple containers in a single task, the container that's started last determines which systemControls take effect.
    ///
    /// * For tasks that use the host network mode, the network namespace systemControls aren't supported.
    ///
    ///
    /// If you're setting an IPC resource namespace to use for the containers in the task, the following conditions apply to your system controls. For more information, see [IPC mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).
    ///
    /// * For tasks that use the host IPC mode, IPC namespace systemControls aren't supported.
    ///
    /// * For tasks that use the task IPC mode, IPC namespace systemControls values apply to all containers within a task.
    ///
    ///
    /// This parameter is not supported for Windows containers. This parameter is only supported for tasks that are hosted on Fargate if the tasks are using platform version 1.4.0 or later (Linux). This isn't supported for Windows containers on Fargate.
    public struct SystemControl: Swift.Sendable {
        /// The namespaced kernel parameter to set a value for.
        public var namespace: Swift.String?
        /// The namespaced kernel parameter to set a value for. Valid IPC namespace values: "kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced", and Sysctls that start with "fs.mqueue.*" Valid network namespace values: Sysctls that start with "net.*" All of these values are supported by Fargate.
        public var value: Swift.String?

        public init(
            namespace: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.namespace = namespace
            self.value = value
        }
    }
}

extension ECSClientTypes {

    public enum UlimitName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case core
        case cpu
        case data
        case fsize
        case locks
        case memlock
        case msgqueue
        case nice
        case nofile
        case nproc
        case rss
        case rtprio
        case rttime
        case sigpending
        case stack
        case sdkUnknown(Swift.String)

        public static var allCases: [UlimitName] {
            return [
                .core,
                .cpu,
                .data,
                .fsize,
                .locks,
                .memlock,
                .msgqueue,
                .nice,
                .nofile,
                .nproc,
                .rss,
                .rtprio,
                .rttime,
                .sigpending,
                .stack
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .core: return "core"
            case .cpu: return "cpu"
            case .data: return "data"
            case .fsize: return "fsize"
            case .locks: return "locks"
            case .memlock: return "memlock"
            case .msgqueue: return "msgqueue"
            case .nice: return "nice"
            case .nofile: return "nofile"
            case .nproc: return "nproc"
            case .rss: return "rss"
            case .rtprio: return "rtprio"
            case .rttime: return "rttime"
            case .sigpending: return "sigpending"
            case .stack: return "stack"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The ulimit settings to pass to the container. Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is  65535 and the default hard limit is 65535. You can specify the ulimit settings for a container in a task definition.
    public struct Ulimit: Swift.Sendable {
        /// The hard limit for the ulimit type. The value can be specified in bytes, seconds, or as a count, depending on the type of the ulimit.
        /// This member is required.
        public var hardLimit: Swift.Int
        /// The type of the ulimit.
        /// This member is required.
        public var name: ECSClientTypes.UlimitName?
        /// The soft limit for the ulimit type. The value can be specified in bytes, seconds, or as a count, depending on the type of the ulimit.
        /// This member is required.
        public var softLimit: Swift.Int

        public init(
            hardLimit: Swift.Int = 0,
            name: ECSClientTypes.UlimitName? = nil,
            softLimit: Swift.Int = 0
        )
        {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }
    }
}

extension ECSClientTypes {

    /// Details on a data volume from another container in the same task definition.
    public struct VolumeFrom: Swift.Sendable {
        /// If this value is true, the container has read-only access to the volume. If this value is false, then the container can write to the volume. The default value is false.
        public var readOnly: Swift.Bool?
        /// The name of another container within the same task definition to mount volumes from.
        public var sourceContainer: Swift.String?

        public init(
            readOnly: Swift.Bool? = nil,
            sourceContainer: Swift.String? = nil
        )
        {
            self.readOnly = readOnly
            self.sourceContainer = sourceContainer
        }
    }
}

extension ECSClientTypes {

    /// Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
    public struct ContainerDefinition: Swift.Sendable {
        /// The command that's passed to the container. This parameter maps to Cmd in the docker container create command and the COMMAND parameter to docker run. If there are multiple arguments, each argument is a separated string in the array.
        public var command: [Swift.String]?
        /// The number of cpu units reserved for the container. This parameter maps to CpuShares in the docker container create commandand the --cpu-shares option to docker run. This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level cpu value. You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](http://aws.amazon.com/ec2/instance-types/) detail page by 1,024. Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that's the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float to higher CPU usage if the other container was not using it. If both tasks were 100% active all of the time, they would be limited to 512 CPU units. On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. The minimum valid CPU share value that the Linux kernel allows is 2, and the maximum valid CPU share value that the Linux kernel allows is 262144. However, the CPU parameter isn't required, and you can use CPU values below 2 or above 262144 in your container definitions. For CPU values below 2 (including null) or above 262144, the behavior varies based on your Amazon ECS container agent version:
        ///
        /// * Agent versions less than or equal to 1.1.0: Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.
        ///
        /// * Agent versions greater than or equal to 1.2.0: Null, zero, and CPU values of 1 are passed to Docker as 2.
        ///
        /// * Agent versions greater than or equal to 1.84.0: CPU values greater than 256 vCPU are passed to Docker as 256, which is equivalent to 262144 CPU shares.
        ///
        ///
        /// On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is passed to Docker as 0, which Windows interprets as 1% of one CPU.
        public var cpu: Swift.Int
        /// A list of ARNs in SSM or Amazon S3 to a credential spec (CredSpec) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the dockerSecurityOptions. The maximum number of ARNs is 1. There are two formats for each ARN. credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in Secrets Manager. You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition. In both formats, replace MyARN with the ARN in SSM or Amazon S3. If you provide a credentialspecdomainless:MyARN, the credspec must provide a ARN in Secrets Manager for a secret containing the username, password, and the domain to connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
        public var credentialSpecs: [Swift.String]?
        /// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies on other containers in a task definition. When a dependency is defined for container startup, for container shutdown it is reversed. For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the Amazon Elastic Container Service Developer Guide. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the Amazon Elastic Container Service Developer Guide. For tasks using the Fargate launch type, the task or service requires the following platforms:
        ///
        /// * Linux platform version 1.3.0 or later.
        ///
        /// * Windows platform version 1.0.0 or later.
        public var dependsOn: [ECSClientTypes.ContainerDependency]?
        /// When this parameter is true, networking is off within the container. This parameter maps to NetworkDisabled in the docker container create command. This parameter is not supported for Windows containers.
        public var disableNetworking: Swift.Bool?
        /// A list of DNS search domains that are presented to the container. This parameter maps to DnsSearch in the docker container create command and the --dns-search option to docker run. This parameter is not supported for Windows containers.
        public var dnsSearchDomains: [Swift.String]?
        /// A list of DNS servers that are presented to the container. This parameter maps to Dns in the docker container create command and the --dns option to docker run. This parameter is not supported for Windows containers.
        public var dnsServers: [Swift.String]?
        /// A key/value map of labels to add to the container. This parameter maps to Labels in the docker container create command and the --label option to docker run. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'
        public var dockerLabels: [Swift.String: Swift.String]?
        /// A list of strings to provide custom configuration for multiple security systems. This field isn't valid for containers in tasks using the Fargate launch type. For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems. For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the Amazon Elastic Container Service Developer Guide. This parameter maps to SecurityOpt in the docker container create command and the --security-opt option to docker run. The Amazon ECS container agent running on a container instance must register with the ECS_SELINUX_CAPABLE=true or ECS_APPARMOR_CAPABLE=true environment variables before containers placed on that instance can use these security options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide. Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" | "credentialspec:CredentialSpecFilePath"
        public var dockerSecurityOptions: [Swift.String]?
        /// Early versions of the Amazon ECS container agent don't properly handle entryPoint parameters. If you have problems using entryPoint, update your container agent or enter your commands and arguments as command array items instead. The entry point that's passed to the container. This parameter maps to Entrypoint in the docker container create command and the --entrypoint option to docker run.
        public var entryPoint: [Swift.String]?
        /// The environment variables to pass to a container. This parameter maps to Env in the docker container create command and the --env option to docker run. We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
        public var environment: [ECSClientTypes.KeyValuePair]?
        /// A list of files containing the environment variables to pass to a container. This parameter maps to the --env-file option to docker run. You can specify up to ten environment files. The file must have a .env file extension. Each line in an environment file contains an environment variable in VARIABLE=VALUE format. Lines beginning with # are treated as comments and are ignored. If there are environment variables specified using the environment parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying Environment Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the Amazon Elastic Container Service Developer Guide.
        public var environmentFiles: [ECSClientTypes.EnvironmentFile]?
        /// If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential. All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the Amazon Elastic Container Service Developer Guide.
        public var essential: Swift.Bool?
        /// A list of hostnames and IP address mappings to append to the /etc/hosts file on the container. This parameter maps to ExtraHosts in the docker container create command and the --add-host option to docker run. This parameter isn't supported for Windows containers or tasks that use the awsvpc network mode.
        public var extraHosts: [ECSClientTypes.HostEntry]?
        /// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the Amazon Elastic Container Service Developer Guide.
        public var firelensConfiguration: ECSClientTypes.FirelensConfiguration?
        /// The container health check command and associated configuration parameters for the container. This parameter maps to HealthCheck in the docker container create command and the HEALTHCHECK parameter of docker run.
        public var healthCheck: ECSClientTypes.HealthCheck?
        /// The hostname to use for your container. This parameter maps to Hostname in the docker container create command and the --hostname option to docker run. The hostname parameter is not supported if you're using the awsvpc network mode.
        public var hostname: Swift.String?
        /// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either  repository-url/image:tag  or  repository-url/image@digest . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the docker container create command and the IMAGE parameter of docker run.
        ///
        /// * When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.
        ///
        /// * Images in Amazon ECR repositories can be specified by either using the full registry/repository:tag or registry/repository@digest. For example, 012345678910.dkr.ecr..amazonaws.com/:latest or 012345678910.dkr.ecr..amazonaws.com/@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE.
        ///
        /// * Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).
        ///
        /// * Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).
        ///
        /// * Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
        public var image: Swift.String?
        /// When this parameter is true, you can deploy containerized applications that require stdin or a tty to be allocated. This parameter maps to OpenStdin in the docker container create command and the --interactive option to docker run.
        public var interactive: Swift.Bool?
        /// The links parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is bridge. The name:internalName construct is analogous to name:alias in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.. This parameter maps to Links in the docker container create command and the --link option to docker run. This parameter is not supported for Windows containers. Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.
        public var links: [Swift.String]?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html). This parameter is not supported for Windows containers.
        public var linuxParameters: ECSClientTypes.LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the docker container create command and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data type). Additional log drivers may be available in future releases of the Amazon ECS container agent. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
        public var logConfiguration: ECSClientTypes.LogConfiguration?
        /// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task memory value, if one is specified. This parameter maps to Memory in the docker container create command and the --memory option to docker run. If using the Fargate launch type, this parameter is optional. If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level memory and memoryReservation value, memory must be greater than memoryReservation. If you specify memoryReservation, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of memory is used. The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.
        public var memory: Swift.Int?
        /// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the memory parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to MemoryReservation in the docker container create command and the --memory-reservation option to docker run. If a task-level memory value is not specified, you must specify a non-zero integer for one or both of memory or memoryReservation in a container definition. If you specify both, memory must be greater than memoryReservation. If you specify memoryReservation, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of memory is used. For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a memoryReservation of 128 MiB, and a memory hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed. The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.
        public var memoryReservation: Swift.Int?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the docker container create command and the --volume option to docker run. Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
        public var mountPoints: [ECSClientTypes.MountPoint]?
        /// The name of a container. If you're linking multiple containers together in a task definition, the name of one container can be entered in the links of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to name in the docker container create command and the --name option to docker run.
        public var name: Swift.String?
        /// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic. For task definitions that use the awsvpc network mode, only specify the containerPort. The hostPort can be left blank or it must be the same value as the containerPort. Port mappings on Windows use the NetNAT gateway address rather than localhost. There's no loopback for port mappings on Windows, so you can't access a container's mapped port from the host itself. This parameter maps to PortBindings in the the docker container create command and the --publish option to docker run. If the network mode of a task definition is set to none, then you can't specify port mappings. If the network mode of a task definition is set to host, then host ports must either be undefined or they must match the container port in the port mapping. After a task reaches the RUNNING status, manual and automatic host and container port assignments are visible in the Network Bindings section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the networkBindings section [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
        public var portMappings: [ECSClientTypes.PortMapping]?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the docker container create command and the --privileged option to docker run This parameter is not supported for Windows containers or tasks run on Fargate.
        public var privileged: Swift.Bool?
        /// When this parameter is true, a TTY is allocated. This parameter maps to Tty in the docker container create command and the --tty option to docker run.
        public var pseudoTerminal: Swift.Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the docker container create command and the --read-only option to docker run. This parameter is not supported for Windows containers.
        public var readonlyRootFilesystem: Swift.Bool?
        /// The private repository authentication credentials to use.
        public var repositoryCredentials: ECSClientTypes.RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public var resourceRequirements: [ECSClientTypes.ResourceRequirement]?
        /// The restart policy for a container. When you set up a restart policy, Amazon ECS can restart the container without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the Amazon Elastic Container Service Developer Guide.
        public var restartPolicy: ECSClientTypes.ContainerRestartPolicy?
        /// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
        public var secrets: [ECSClientTypes.Secret]?
        /// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a COMPLETE, SUCCESS, or HEALTHY status. If a startTimeout value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a STOPPED state. When the ECS_CONTAINER_START_TIMEOUT container agent configuration variable is used, it's enforced independently from this start timeout value. For tasks using the Fargate launch type, the task or service requires the following platforms:
        ///
        /// * Linux platform version 1.3.0 or later.
        ///
        /// * Windows platform version 1.0.0 or later.
        ///
        ///
        /// For tasks using the EC2 launch type, your container instances require at least version 1.26.0 of the container agent to use a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the Amazon Elastic Container Service Developer Guide. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the Amazon Elastic Container Service Developer Guide. The valid values for Fargate are 2-120 seconds.
        public var startTimeout: Swift.Int?
        /// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own. For tasks using the Fargate launch type, the task or service requires the following platforms:
        ///
        /// * Linux platform version 1.3.0 or later.
        ///
        /// * Windows platform version 1.0.0 or later.
        ///
        ///
        /// For tasks that use the Fargate launch type, the max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used. For tasks that use the EC2 launch type, if the stopTimeout parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ECS_CONTAINER_STOP_TIMEOUT is used. If neither the stopTimeout parameter or the ECS_CONTAINER_STOP_TIMEOUT agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the Amazon Elastic Container Service Developer Guide. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ecs-init package. If your container instances are launched from version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the Amazon Elastic Container Service Developer Guide. The valid values for Fargate are 2-120 seconds.
        public var stopTimeout: Swift.Int?
        /// A list of namespaced kernel parameters to set in the container. This parameter maps to Sysctls in the docker container create command and the --sysctl option to docker run. For example, you can configure net.ipv4.tcp_keepalive_time setting to maintain longer lived connections.
        public var systemControls: [ECSClientTypes.SystemControl]?
        /// A list of ulimits to set in the container. If a ulimit value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to Ulimits in the docker container create command and the --ulimit option to docker run. Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is  65535 and the default hard limit is 65535. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}' This parameter is not supported for Windows containers.
        public var ulimits: [ECSClientTypes.Ulimit]?
        /// The user to use inside the container. This parameter maps to User in the docker container create command and the --user option to docker run. When running tasks using the host network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security. You can specify the user using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
        ///
        /// * user
        ///
        /// * user:group
        ///
        /// * uid
        ///
        /// * uid:gid
        ///
        /// * user:gid
        ///
        /// * uid:group
        ///
        ///
        /// This parameter is not supported for Windows containers.
        public var user: Swift.String?
        /// Data volumes to mount from another container. This parameter maps to VolumesFrom in the docker container create command and the --volumes-from option to docker run.
        public var volumesFrom: [ECSClientTypes.VolumeFrom]?
        /// The working directory to run commands inside the container in. This parameter maps to WorkingDir in the docker container create command and the --workdir option to docker run.
        public var workingDirectory: Swift.String?

        public init(
            command: [Swift.String]? = nil,
            cpu: Swift.Int = 0,
            credentialSpecs: [Swift.String]? = nil,
            dependsOn: [ECSClientTypes.ContainerDependency]? = nil,
            disableNetworking: Swift.Bool? = nil,
            dnsSearchDomains: [Swift.String]? = nil,
            dnsServers: [Swift.String]? = nil,
            dockerLabels: [Swift.String: Swift.String]? = nil,
            dockerSecurityOptions: [Swift.String]? = nil,
            entryPoint: [Swift.String]? = nil,
            environment: [ECSClientTypes.KeyValuePair]? = nil,
            environmentFiles: [ECSClientTypes.EnvironmentFile]? = nil,
            essential: Swift.Bool? = nil,
            extraHosts: [ECSClientTypes.HostEntry]? = nil,
            firelensConfiguration: ECSClientTypes.FirelensConfiguration? = nil,
            healthCheck: ECSClientTypes.HealthCheck? = nil,
            hostname: Swift.String? = nil,
            image: Swift.String? = nil,
            interactive: Swift.Bool? = nil,
            links: [Swift.String]? = nil,
            linuxParameters: ECSClientTypes.LinuxParameters? = nil,
            logConfiguration: ECSClientTypes.LogConfiguration? = nil,
            memory: Swift.Int? = nil,
            memoryReservation: Swift.Int? = nil,
            mountPoints: [ECSClientTypes.MountPoint]? = nil,
            name: Swift.String? = nil,
            portMappings: [ECSClientTypes.PortMapping]? = nil,
            privileged: Swift.Bool? = nil,
            pseudoTerminal: Swift.Bool? = nil,
            readonlyRootFilesystem: Swift.Bool? = nil,
            repositoryCredentials: ECSClientTypes.RepositoryCredentials? = nil,
            resourceRequirements: [ECSClientTypes.ResourceRequirement]? = nil,
            restartPolicy: ECSClientTypes.ContainerRestartPolicy? = nil,
            secrets: [ECSClientTypes.Secret]? = nil,
            startTimeout: Swift.Int? = nil,
            stopTimeout: Swift.Int? = nil,
            systemControls: [ECSClientTypes.SystemControl]? = nil,
            ulimits: [ECSClientTypes.Ulimit]? = nil,
            user: Swift.String? = nil,
            volumesFrom: [ECSClientTypes.VolumeFrom]? = nil,
            workingDirectory: Swift.String? = nil
        )
        {
            self.command = command
            self.cpu = cpu
            self.credentialSpecs = credentialSpecs
            self.dependsOn = dependsOn
            self.disableNetworking = disableNetworking
            self.dnsSearchDomains = dnsSearchDomains
            self.dnsServers = dnsServers
            self.dockerLabels = dockerLabels
            self.dockerSecurityOptions = dockerSecurityOptions
            self.entryPoint = entryPoint
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.essential = essential
            self.extraHosts = extraHosts
            self.firelensConfiguration = firelensConfiguration
            self.healthCheck = healthCheck
            self.hostname = hostname
            self.image = image
            self.interactive = interactive
            self.links = links
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.mountPoints = mountPoints
            self.name = name
            self.portMappings = portMappings
            self.privileged = privileged
            self.pseudoTerminal = pseudoTerminal
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.restartPolicy = restartPolicy
            self.secrets = secrets
            self.startTimeout = startTimeout
            self.stopTimeout = stopTimeout
            self.systemControls = systemControls
            self.ulimits = ulimits
            self.user = user
            self.volumesFrom = volumesFrom
            self.workingDirectory = workingDirectory
        }
    }
}

extension ECSClientTypes {

    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the Amazon ECS Developer Guide;. For tasks using the Fargate launch type, the task requires the following platforms:
    ///
    /// * Linux platform version 1.4.0 or later.
    ///
    /// * Windows platform version 1.0.0 or later.
    public struct EphemeralStorage: Swift.Sendable {
        /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 20 GiB and the maximum supported value is 200 GiB.
        /// This member is required.
        public var sizeInGiB: Swift.Int

        public init(
            sizeInGiB: Swift.Int = 0
        )
        {
            self.sizeInGiB = sizeInGiB
        }
    }
}

extension ECSClientTypes {

    /// Details on an Elastic Inference accelerator. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the Amazon Elastic Container Service Developer Guide.
    public struct InferenceAccelerator: Swift.Sendable {
        /// The Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a [ResourceRequirement](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ResourceRequirement.html).
        /// This member is required.
        public var deviceName: Swift.String?
        /// The Elastic Inference accelerator type to use.
        /// This member is required.
        public var deviceType: Swift.String?

        public init(
            deviceName: Swift.String? = nil,
            deviceType: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }
    }
}

extension ECSClientTypes {

    public enum IpcMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case host
        case `none`
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [IpcMode] {
            return [
                .host,
                .none,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .host: return "host"
            case .none: return "none"
            case .task: return "task"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum NetworkMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsvpc
        case bridge
        case host
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkMode] {
            return [
                .awsvpc,
                .bridge,
                .host,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsvpc: return "awsvpc"
            case .bridge: return "bridge"
            case .host: return "host"
            case .none: return "none"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum PidMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case host
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [PidMode] {
            return [
                .host,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .host: return "host"
            case .task: return "task"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum TaskDefinitionPlacementConstraintType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case memberOf
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskDefinitionPlacementConstraintType] {
            return [
                .memberOf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .memberOf: return "memberOf"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the Amazon Elastic Container Service Developer Guide. Task placement constraints aren't supported for tasks run on Fargate.
    public struct TaskDefinitionPlacementConstraint: Swift.Sendable {
        /// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
        public var expression: Swift.String?
        /// The type of constraint. The MemberOf constraint restricts selection to be from a group of valid candidates.
        public var type: ECSClientTypes.TaskDefinitionPlacementConstraintType?

        public init(
            expression: Swift.String? = nil,
            type: ECSClientTypes.TaskDefinitionPlacementConstraintType? = nil
        )
        {
            self.expression = expression
            self.type = type
        }
    }
}

extension ECSClientTypes {

    public enum ProxyConfigurationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appmesh
        case sdkUnknown(Swift.String)

        public static var allCases: [ProxyConfigurationType] {
            return [
                .appmesh
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appmesh: return "APPMESH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The configuration details for the App Mesh proxy. For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ecs-init package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
    public struct ProxyConfiguration: Swift.Sendable {
        /// The name of the container that will serve as the App Mesh proxy.
        /// This member is required.
        public var containerName: Swift.String?
        /// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
        ///
        /// * IgnoredUID - (Required) The user ID (UID) of the proxy container as defined by the user parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If IgnoredGID is specified, this field can be empty.
        ///
        /// * IgnoredGID - (Required) The group ID (GID) of the proxy container as defined by the user parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If IgnoredUID is specified, this field can be empty.
        ///
        /// * AppPorts - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ProxyIngressPort and ProxyEgressPort.
        ///
        /// * ProxyIngressPort - (Required) Specifies the port that incoming traffic to the AppPorts is directed to.
        ///
        /// * ProxyEgressPort - (Required) Specifies the port that outgoing traffic from the AppPorts is directed to.
        ///
        /// * EgressIgnoredPorts - (Required) The egress traffic going to the specified ports is ignored and not redirected to the ProxyEgressPort. It can be an empty list.
        ///
        /// * EgressIgnoredIPs - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the ProxyEgressPort. It can be an empty list.
        public var properties: [ECSClientTypes.KeyValuePair]?
        /// The proxy type. The only supported value is APPMESH.
        public var type: ECSClientTypes.ProxyConfigurationType?

        public init(
            containerName: Swift.String? = nil,
            properties: [ECSClientTypes.KeyValuePair]? = nil,
            type: ECSClientTypes.ProxyConfigurationType? = nil
        )
        {
            self.containerName = containerName
            self.properties = properties
            self.type = type
        }
    }
}

extension ECSClientTypes {

    public enum CPUArchitecture: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case arm64
        case x8664
        case sdkUnknown(Swift.String)

        public static var allCases: [CPUArchitecture] {
            return [
                .arm64,
                .x8664
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .arm64: return "ARM64"
            case .x8664: return "X86_64"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum OSFamily: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case linux
        case windowsServer2004Core
        case windowsServer2016Full
        case windowsServer2019Core
        case windowsServer2019Full
        case windowsServer2022Core
        case windowsServer2022Full
        case windowsServer20h2Core
        case sdkUnknown(Swift.String)

        public static var allCases: [OSFamily] {
            return [
                .linux,
                .windowsServer2004Core,
                .windowsServer2016Full,
                .windowsServer2019Core,
                .windowsServer2019Full,
                .windowsServer2022Core,
                .windowsServer2022Full,
                .windowsServer20h2Core
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .linux: return "LINUX"
            case .windowsServer2004Core: return "WINDOWS_SERVER_2004_CORE"
            case .windowsServer2016Full: return "WINDOWS_SERVER_2016_FULL"
            case .windowsServer2019Core: return "WINDOWS_SERVER_2019_CORE"
            case .windowsServer2019Full: return "WINDOWS_SERVER_2019_FULL"
            case .windowsServer2022Core: return "WINDOWS_SERVER_2022_CORE"
            case .windowsServer2022Full: return "WINDOWS_SERVER_2022_FULL"
            case .windowsServer20h2Core: return "WINDOWS_SERVER_20H2_CORE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// Information about the platform for the Amazon ECS service or task. For more information about RuntimePlatform, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the Amazon Elastic Container Service Developer Guide.
    public struct RuntimePlatform: Swift.Sendable {
        /// The CPU architecture. You can run your Linux tasks on an ARM-based platform by setting the value to ARM64. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate. The default is X86_64.
        public var cpuArchitecture: ECSClientTypes.CPUArchitecture?
        /// The operating system. The default is Linux.
        public var operatingSystemFamily: ECSClientTypes.OSFamily?

        public init(
            cpuArchitecture: ECSClientTypes.CPUArchitecture? = nil,
            operatingSystemFamily: ECSClientTypes.OSFamily? = nil
        )
        {
            self.cpuArchitecture = cpuArchitecture
            self.operatingSystemFamily = operatingSystemFamily
        }
    }
}

extension ECSClientTypes {

    public enum TaskDefinitionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleteInProgress
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskDefinitionStatus] {
            return [
                .active,
                .deleteInProgress,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum Scope: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case shared
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [Scope] {
            return [
                .shared,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .shared: return "shared"
            case .task: return "task"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// This parameter is specified when you're using Docker volumes. Docker volumes are only supported when you're using the EC2 launch type. Windows containers only support the use of the local driver. To use bind mounts, specify a host instead.
    public struct DockerVolumeConfiguration: Swift.Sendable {
        /// If this value is true, the Docker volume is created if it doesn't already exist. This field is only used if the scope is shared.
        public var autoprovision: Swift.Bool?
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use docker plugin ls to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. This parameter maps to Driver in the docker container create command and the xxdriver option to docker volume create.
        public var driver: Swift.String?
        /// A map of Docker driver-specific options passed through. This parameter maps to DriverOpts in the docker create-volume command and the xxopt option to docker volume create.
        public var driverOpts: [Swift.String: Swift.String]?
        /// Custom metadata to add to your Docker volume. This parameter maps to Labels in the docker container create command and the xxlabel option to docker volume create.
        public var labels: [Swift.String: Swift.String]?
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.
        public var scope: ECSClientTypes.Scope?

        public init(
            autoprovision: Swift.Bool? = nil,
            driver: Swift.String? = nil,
            driverOpts: [Swift.String: Swift.String]? = nil,
            labels: [Swift.String: Swift.String]? = nil,
            scope: ECSClientTypes.Scope? = nil
        )
        {
            self.autoprovision = autoprovision
            self.driver = driver
            self.driverOpts = driverOpts
            self.labels = labels
            self.scope = scope
        }
    }
}

extension ECSClientTypes {

    public enum EFSAuthorizationConfigIAM: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSAuthorizationConfigIAM] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The authorization configuration details for the Amazon EFS file system.
    public struct EFSAuthorizationConfig: Swift.Sendable {
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the EFSVolumeConfiguration. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the Amazon Elastic File System User Guide.
        public var accessPointId: Swift.String?
        /// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the Amazon Elastic Container Service Developer Guide.
        public var iam: ECSClientTypes.EFSAuthorizationConfigIAM?

        public init(
            accessPointId: Swift.String? = nil,
            iam: ECSClientTypes.EFSAuthorizationConfigIAM? = nil
        )
        {
            self.accessPointId = accessPointId
            self.iam = iam
        }
    }
}

extension ECSClientTypes {

    public enum EFSTransitEncryption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EFSTransitEncryption] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the Amazon Elastic Container Service Developer Guide.
    public struct EFSVolumeConfiguration: Swift.Sendable {
        /// The authorization configuration details for the Amazon EFS file system.
        public var authorizationConfig: ECSClientTypes.EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to / which will enforce the path set on the EFS access point.
        public var rootDirectory: Swift.String?
        /// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
        public var transitEncryption: ECSClientTypes.EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the Amazon Elastic File System User Guide.
        public var transitEncryptionPort: Swift.Int?

        public init(
            authorizationConfig: ECSClientTypes.EFSAuthorizationConfig? = nil,
            fileSystemId: Swift.String? = nil,
            rootDirectory: Swift.String? = nil,
            transitEncryption: ECSClientTypes.EFSTransitEncryption? = nil,
            transitEncryptionPort: Swift.Int? = nil
        )
        {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }
    }
}

extension ECSClientTypes {

    /// The authorization configuration details for Amazon FSx for Windows File Server file system. See [FSxWindowsFileServerVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html) in the Amazon ECS API Reference. For more information and the input format, see [Amazon FSx for Windows File Server Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the Amazon Elastic Container Service Developer Guide.
    public struct FSxWindowsFileServerAuthorizationConfig: Swift.Sendable {
        /// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an Secrets Manager secret or SSM Parameter Store parameter. The ARN refers to the stored credentials.
        /// This member is required.
        public var credentialsParameter: Swift.String?
        /// A fully qualified domain name hosted by an [Directory Service](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html) Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
        /// This member is required.
        public var domain: Swift.String?

        public init(
            credentialsParameter: Swift.String? = nil,
            domain: Swift.String? = nil
        )
        {
            self.credentialsParameter = credentialsParameter
            self.domain = domain
        }
    }
}

extension ECSClientTypes {

    /// This parameter is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage. For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the Amazon Elastic Container Service Developer Guide.
    public struct FSxWindowsFileServerVolumeConfiguration: Swift.Sendable {
        /// The authorization configuration details for the Amazon FSx for Windows File Server file system.
        /// This member is required.
        public var authorizationConfig: ECSClientTypes.FSxWindowsFileServerAuthorizationConfig?
        /// The Amazon FSx for Windows File Server file system ID to use.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
        /// This member is required.
        public var rootDirectory: Swift.String?

        public init(
            authorizationConfig: ECSClientTypes.FSxWindowsFileServerAuthorizationConfig? = nil,
            fileSystemId: Swift.String? = nil,
            rootDirectory: Swift.String? = nil
        )
        {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
        }
    }
}

extension ECSClientTypes {

    /// Details on a container instance bind mount host volume.
    public struct HostVolumeProperties: Swift.Sendable {
        /// When the host parameter is used, specify a sourcePath to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the host parameter contains a sourcePath file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the sourcePath value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported. If you're using the Fargate launch type, the sourcePath parameter is not supported.
        public var sourcePath: Swift.String?

        public init(
            sourcePath: Swift.String? = nil
        )
        {
            self.sourcePath = sourcePath
        }
    }
}

extension ECSClientTypes {

    /// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a name and one of either configuredAtLaunch, dockerVolumeConfiguration, efsVolumeConfiguration, fsxWindowsFileServerVolumeConfiguration, or host. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
    public struct Volume: Swift.Sendable {
        /// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration. To configure a volume at launch time, use this task definition revision and specify a volumeConfigurations object when calling the CreateService, UpdateService, RunTask or StartTask APIs.
        public var configuredAtLaunch: Swift.Bool?
        /// This parameter is specified when you use Docker volumes. Windows containers only support the use of the local driver. To use bind mounts, specify the host parameter instead. Docker volumes aren't supported by tasks run on Fargate.
        public var dockerVolumeConfiguration: ECSClientTypes.DockerVolumeConfiguration?
        /// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
        public var efsVolumeConfiguration: ECSClientTypes.EFSVolumeConfiguration?
        /// This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage.
        public var fsxWindowsFileServerVolumeConfiguration: ECSClientTypes.FSxWindowsFileServerVolumeConfiguration?
        /// This parameter is specified when you use bind mount host volumes. The contents of the host parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running. Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount C:\my\path:C:\my\path and D:\:D:\, but not D:\my\path:C:\my\path or D:\:C:\my\path.
        public var host: ECSClientTypes.HostVolumeProperties?
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. When using a volume configured at launch, the name is required and must also be specified as the volume name in the ServiceVolumeConfiguration or TaskVolumeConfiguration parameter when creating your service or standalone task. For all other types of volumes, this name is referenced in the sourceVolume parameter of the mountPoints object in the container definition. When a volume is using the efsVolumeConfiguration, the name is required.
        public var name: Swift.String?

        public init(
            configuredAtLaunch: Swift.Bool? = nil,
            dockerVolumeConfiguration: ECSClientTypes.DockerVolumeConfiguration? = nil,
            efsVolumeConfiguration: ECSClientTypes.EFSVolumeConfiguration? = nil,
            fsxWindowsFileServerVolumeConfiguration: ECSClientTypes.FSxWindowsFileServerVolumeConfiguration? = nil,
            host: ECSClientTypes.HostVolumeProperties? = nil,
            name: Swift.String? = nil
        )
        {
            self.configuredAtLaunch = configuredAtLaunch
            self.dockerVolumeConfiguration = dockerVolumeConfiguration
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.fsxWindowsFileServerVolumeConfiguration = fsxWindowsFileServerVolumeConfiguration
            self.host = host
            self.name = name
        }
    }
}

extension ECSClientTypes {

    /// The details of a task definition which describes the container and volume definitions of an Amazon Elastic Container Service task. You can specify which Docker images to use, the required resources, and other configurations related to launching the task definition through an Amazon ECS service or task.
    public struct TaskDefinition: Swift.Sendable {
        /// Amazon ECS validates the task definition parameters with those supported by the launch type. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var compatibilities: [ECSClientTypes.Compatibility]?
        /// A list of container definitions in JSON format that describe the different containers that make up your task. For more information about container definition parameters and defaults, see [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the Amazon Elastic Container Service Developer Guide.
        public var containerDefinitions: [ECSClientTypes.ContainerDefinition]?
        /// The number of cpu units used by the task. If you use the EC2 launch type, this field is optional. Any value can be used. If you use the Fargate launch type, this field is required. You must use one of the following values. The value that you choose determines your range of valid values for the memory parameter. If you use the EC2 launch type, this field is optional. Supported values are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs). The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.
        ///
        /// * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
        ///
        /// * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)
        ///
        /// * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        ///
        /// * 2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
        ///
        /// * 4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
        ///
        /// * 8192 (8 vCPU) - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.
        ///
        /// * 16384 (16vCPU) - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
        public var cpu: Swift.String?
        /// The Unix timestamp for the time when the task definition was deregistered.
        public var deregisteredAt: Foundation.Date?
        /// The ephemeral storage settings to use for tasks run with the task definition.
        public var ephemeralStorage: ECSClientTypes.EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make Amazon Web Services API calls on your behalf. For informationabout the required IAM roles for Amazon ECS, see [IAM roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html) in the Amazon Elastic Container Service Developer Guide.
        public var executionRoleArn: Swift.String?
        /// The name of a family that this task definition is registered to. Up to 255 characters are allowed. Letters (both uppercase and lowercase letters), numbers, hyphens (-), and underscores (_) are allowed. A family groups multiple versions of a task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers to each task definition that you add.
        public var family: Swift.String?
        /// The Elastic Inference accelerator that's associated with the task.
        public var inferenceAccelerators: [ECSClientTypes.InferenceAccelerator]?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference. If the host IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see [Docker security](https://docs.docker.com/engine/security/security/). If you are setting namespaced kernel parameters using systemControls for the containers in the task, the following will apply to your IPC resource namespace. For more information, see [System Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the Amazon Elastic Container Service Developer Guide.
        ///
        /// * For tasks that use the host IPC mode, IPC namespace related systemControls are not supported.
        ///
        /// * For tasks that use the task IPC mode, IPC namespace related systemControls will apply to all containers within a task.
        ///
        ///
        /// This parameter is not supported for Windows containers or tasks run on Fargate.
        public var ipcMode: ECSClientTypes.IpcMode?
        /// The amount (in MiB) of memory used by the task. If your tasks runs on Amazon EC2 instances, you must specify either a task-level memory value or a container-level memory value. This field is optional and any value can be used. If a task-level memory value is specified, the container-level memory value is optional. For more information regarding container-level memory and memory reservation, see [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html). If your tasks runs on Fargate, this field is required. You must use one of the following values. The value you choose determines your range of valid values for the cpu parameter.
        ///
        /// * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)
        ///
        /// * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)
        ///
        /// * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
        ///
        /// * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)
        ///
        /// * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)
        ///
        /// * Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.
        ///
        /// * Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
        public var memory: Swift.String?
        /// The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host. If no network mode is specified, the default is bridge. For Amazon ECS tasks on Fargate, the awsvpc network mode is required. For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances,  or awsvpc can be used. If the network mode is set to none, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The host and awsvpc network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the bridge mode. With the host and awsvpc network modes, exposed container ports are mapped directly to the corresponding host port (for the host network mode) or the attached elastic network interface port (for the awsvpc network mode), so you cannot take advantage of dynamic host port mappings. When using the host network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user. If the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a [NetworkConfiguration] value when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the Amazon Elastic Container Service Developer Guide. If the network mode is host, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used. For more information, see [Network settings](https://docs.docker.com/engine/reference/run/#network-settings) in the Docker run reference.
        public var networkMode: ECSClientTypes.NetworkMode?
        /// The process namespace to use for the containers in the task. The valid values are host or task. On Fargate for Linux containers, the only valid value is task. For example, monitoring sidecars might need pidMode to access information about other containers running in the same task. If host is specified, all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference. If the host PID mode is used, there's a heightened risk of undesired process namespace exposure. For more information, see [Docker security](https://docs.docker.com/engine/security/security/). This parameter is not supported for Windows containers. This parameter is only supported for tasks that are hosted on Fargate if the tasks are using platform version 1.4.0 or later (Linux). This isn't supported for Windows containers on Fargate.
        public var pidMode: ECSClientTypes.PidMode?
        /// An array of placement constraint objects to use for tasks. This parameter isn't supported for tasks run on Fargate.
        public var placementConstraints: [ECSClientTypes.TaskDefinitionPlacementConstraint]?
        /// The configuration details for the App Mesh proxy. Your Amazon ECS container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ecs-init package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version 20190301 or later, they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the Amazon Elastic Container Service Developer Guide.
        public var proxyConfiguration: ECSClientTypes.ProxyConfiguration?
        /// The Unix timestamp for the time when the task definition was registered.
        public var registeredAt: Foundation.Date?
        /// The principal that registered the task definition.
        public var registeredBy: Swift.String?
        /// The container instance attributes required by your task. When an Amazon EC2 instance is registered to your cluster, the Amazon ECS container agent assigns some standard attributes to the instance. You can apply custom attributes. These are specified as key-value pairs using the Amazon ECS console or the [PutAttributes](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAttributes.html) API. These attributes are used when determining task placement for tasks hosted on Amazon EC2 instances. For more information, see [Attributes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes) in the Amazon Elastic Container Service Developer Guide. This parameter isn't supported for tasks run on Fargate.
        public var requiresAttributes: [ECSClientTypes.Attribute]?
        /// The task launch types the task definition was validated against. The valid values are EC2, FARGATE, and EXTERNAL. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var requiresCompatibilities: [ECSClientTypes.Compatibility]?
        /// The revision of the task in a particular family. The revision is a version number of a task definition in a family. When you register a task definition for the first time, the revision is 1. Each time that you register a new revision of a task definition in the same family, the revision value always increases by one. This is even if you deregistered previous revisions in this family.
        public var revision: Swift.Int
        /// The operating system that your task definitions are running on. A platform family is specified only for tasks using the Fargate launch type. When you specify a task in a service, this value must match the runtimePlatform value of the service.
        public var runtimePlatform: ECSClientTypes.RuntimePlatform?
        /// The status of the task definition.
        public var status: ECSClientTypes.TaskDefinitionStatus?
        /// The full Amazon Resource Name (ARN) of the task definition.
        public var taskDefinitionArn: Swift.String?
        /// The short name or full Amazon Resource Name (ARN) of the Identity and Access Management role that grants containers in the task permission to call Amazon Web Services APIs on your behalf. For informationabout the required IAM roles for Amazon ECS, see [IAM roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html) in the Amazon Elastic Container Service Developer Guide.
        public var taskRoleArn: Swift.String?
        /// The list of data volume definitions for the task. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the Amazon Elastic Container Service Developer Guide. The host and sourcePath parameters aren't supported for tasks run on Fargate.
        public var volumes: [ECSClientTypes.Volume]?

        public init(
            compatibilities: [ECSClientTypes.Compatibility]? = nil,
            containerDefinitions: [ECSClientTypes.ContainerDefinition]? = nil,
            cpu: Swift.String? = nil,
            deregisteredAt: Foundation.Date? = nil,
            ephemeralStorage: ECSClientTypes.EphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            family: Swift.String? = nil,
            inferenceAccelerators: [ECSClientTypes.InferenceAccelerator]? = nil,
            ipcMode: ECSClientTypes.IpcMode? = nil,
            memory: Swift.String? = nil,
            networkMode: ECSClientTypes.NetworkMode? = nil,
            pidMode: ECSClientTypes.PidMode? = nil,
            placementConstraints: [ECSClientTypes.TaskDefinitionPlacementConstraint]? = nil,
            proxyConfiguration: ECSClientTypes.ProxyConfiguration? = nil,
            registeredAt: Foundation.Date? = nil,
            registeredBy: Swift.String? = nil,
            requiresAttributes: [ECSClientTypes.Attribute]? = nil,
            requiresCompatibilities: [ECSClientTypes.Compatibility]? = nil,
            revision: Swift.Int = 0,
            runtimePlatform: ECSClientTypes.RuntimePlatform? = nil,
            status: ECSClientTypes.TaskDefinitionStatus? = nil,
            taskDefinitionArn: Swift.String? = nil,
            taskRoleArn: Swift.String? = nil,
            volumes: [ECSClientTypes.Volume]? = nil
        )
        {
            self.compatibilities = compatibilities
            self.containerDefinitions = containerDefinitions
            self.cpu = cpu
            self.deregisteredAt = deregisteredAt
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.family = family
            self.inferenceAccelerators = inferenceAccelerators
            self.ipcMode = ipcMode
            self.memory = memory
            self.networkMode = networkMode
            self.pidMode = pidMode
            self.placementConstraints = placementConstraints
            self.proxyConfiguration = proxyConfiguration
            self.registeredAt = registeredAt
            self.registeredBy = registeredBy
            self.requiresAttributes = requiresAttributes
            self.requiresCompatibilities = requiresCompatibilities
            self.revision = revision
            self.runtimePlatform = runtimePlatform
            self.status = status
            self.taskDefinitionArn = taskDefinitionArn
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }
    }
}

public struct DeleteTaskDefinitionsOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// The list of deleted task definitions.
    public var taskDefinitions: [ECSClientTypes.TaskDefinition]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        taskDefinitions: [ECSClientTypes.TaskDefinition]? = nil
    )
    {
        self.failures = failures
        self.taskDefinitions = taskDefinitions
    }
}

/// The specified task set wasn't found. You can view your available task sets with [DescribeTaskSets](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTaskSets.html). Task sets are specific to each cluster, service and Region.
public struct TaskSetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TaskSetNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteTaskSetInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set found in to delete.
    /// This member is required.
    public var cluster: Swift.String?
    /// If true, you can delete a task set even if it hasn't been scaled down to zero.
    public var force: Swift.Bool?
    /// The short name or full Amazon Resource Name (ARN) of the service that hosts the task set to delete.
    /// This member is required.
    public var service: Swift.String?
    /// The task set ID or full Amazon Resource Name (ARN) of the task set to delete.
    /// This member is required.
    public var taskSet: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        force: Swift.Bool? = nil,
        service: Swift.String? = nil,
        taskSet: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.force = force
        self.service = service
        self.taskSet = taskSet
    }
}

public struct DeleteTaskSetOutput: Swift.Sendable {
    /// Details about the task set.
    public var taskSet: ECSClientTypes.TaskSet?

    public init(
        taskSet: ECSClientTypes.TaskSet? = nil
    )
    {
        self.taskSet = taskSet
    }
}

public struct DeregisterContainerInstanceInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to deregister. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The container instance ID or full ARN of the container instance to deregister. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
    /// This member is required.
    public var containerInstance: Swift.String?
    /// Forces the container instance to be deregistered. If you have tasks running on the container instance when you deregister it with the force option, these tasks remain running until you terminate the instance or the tasks stop through some other means, but they're orphaned (no longer monitored or accounted for by Amazon ECS). If an orphaned task on your container instance is part of an Amazon ECS service, then the service scheduler starts another copy of that task, on a different container instance if possible. Any containers in orphaned service tasks that are registered with a Classic Load Balancer or an Application Load Balancer target group are deregistered. They begin connection draining according to the settings on the load balancer or target group.
    public var force: Swift.Bool?

    public init(
        cluster: Swift.String? = nil,
        containerInstance: Swift.String? = nil,
        force: Swift.Bool? = nil
    )
    {
        self.cluster = cluster
        self.containerInstance = containerInstance
        self.force = force
    }
}

extension ECSClientTypes {

    public enum InstanceHealthCheckState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case impaired
        case initializing
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthCheckState] {
            return [
                .impaired,
                .initializing,
                .insufficientData,
                .ok
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .impaired: return "IMPAIRED"
            case .initializing: return "INITIALIZING"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum InstanceHealthCheckType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case containerRuntime
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthCheckType] {
            return [
                .containerRuntime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .containerRuntime: return "CONTAINER_RUNTIME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// An object representing the result of a container instance health status check.
    public struct InstanceHealthCheckResult: Swift.Sendable {
        /// The Unix timestamp for when the container instance health status last changed.
        public var lastStatusChange: Foundation.Date?
        /// The Unix timestamp for when the container instance health status was last updated.
        public var lastUpdated: Foundation.Date?
        /// The container instance health status.
        public var status: ECSClientTypes.InstanceHealthCheckState?
        /// The type of container instance health status that was verified.
        public var type: ECSClientTypes.InstanceHealthCheckType?

        public init(
            lastStatusChange: Foundation.Date? = nil,
            lastUpdated: Foundation.Date? = nil,
            status: ECSClientTypes.InstanceHealthCheckState? = nil,
            type: ECSClientTypes.InstanceHealthCheckType? = nil
        )
        {
            self.lastStatusChange = lastStatusChange
            self.lastUpdated = lastUpdated
            self.status = status
            self.type = type
        }
    }
}

extension ECSClientTypes {

    /// An object representing the health status of the container instance.
    public struct ContainerInstanceHealthStatus: Swift.Sendable {
        /// An array of objects representing the details of the container instance health status.
        public var details: [ECSClientTypes.InstanceHealthCheckResult]?
        /// The overall health status of the container instance. This is an aggregate status of all container instance health checks.
        public var overallStatus: ECSClientTypes.InstanceHealthCheckState?

        public init(
            details: [ECSClientTypes.InstanceHealthCheckResult]? = nil,
            overallStatus: ECSClientTypes.InstanceHealthCheckState? = nil
        )
        {
            self.details = details
            self.overallStatus = overallStatus
        }
    }
}

extension ECSClientTypes {

    /// Describes the resources available for a container instance.
    public struct Resource: Swift.Sendable {
        /// When the doubleValue type is set, the value of the resource must be a double precision floating-point type.
        public var doubleValue: Swift.Double
        /// When the integerValue type is set, the value of the resource must be an integer.
        public var integerValue: Swift.Int
        /// When the longValue type is set, the value of the resource must be an extended precision floating-point type.
        public var longValue: Swift.Int
        /// The name of the resource, such as CPU, MEMORY, PORTS, PORTS_UDP, or a user-defined resource.
        public var name: Swift.String?
        /// When the stringSetValue type is set, the value of the resource must be a string type.
        public var stringSetValue: [Swift.String]?
        /// The type of the resource. Valid values: INTEGER, DOUBLE, LONG, or STRINGSET.
        public var type: Swift.String?

        public init(
            doubleValue: Swift.Double = 0.0,
            integerValue: Swift.Int = 0,
            longValue: Swift.Int = 0,
            name: Swift.String? = nil,
            stringSetValue: [Swift.String]? = nil,
            type: Swift.String? = nil
        )
        {
            self.doubleValue = doubleValue
            self.integerValue = integerValue
            self.longValue = longValue
            self.name = name
            self.stringSetValue = stringSetValue
            self.type = type
        }
    }
}

extension ECSClientTypes {

    /// The Docker and Amazon ECS container agent version information about a container instance.
    public struct VersionInfo: Swift.Sendable {
        /// The Git commit hash for the Amazon ECS container agent build on the [amazon-ecs-agent ](https://github.com/aws/amazon-ecs-agent/commits/master) GitHub repository.
        public var agentHash: Swift.String?
        /// The version number of the Amazon ECS container agent.
        public var agentVersion: Swift.String?
        /// The Docker version that's running on the container instance.
        public var dockerVersion: Swift.String?

        public init(
            agentHash: Swift.String? = nil,
            agentVersion: Swift.String? = nil,
            dockerVersion: Swift.String? = nil
        )
        {
            self.agentHash = agentHash
            self.agentVersion = agentVersion
            self.dockerVersion = dockerVersion
        }
    }
}

extension ECSClientTypes {

    /// An Amazon EC2 or External instance that's running the Amazon ECS agent and has been registered with a cluster.
    public struct ContainerInstance: Swift.Sendable {
        /// This parameter returns true if the agent is connected to Amazon ECS. An instance with an agent that may be unhealthy or stopped return false. Only instances connected to an agent can accept task placement requests.
        public var agentConnected: Swift.Bool
        /// The status of the most recent agent update. If an update wasn't ever requested, this value is NULL.
        public var agentUpdateStatus: ECSClientTypes.AgentUpdateStatus?
        /// The resources attached to a container instance, such as an elastic network interface.
        public var attachments: [ECSClientTypes.Attachment]?
        /// The attributes set for the container instance, either by the Amazon ECS container agent at instance registration or manually with the [PutAttributes](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAttributes.html) operation.
        public var attributes: [ECSClientTypes.Attribute]?
        /// The capacity provider that's associated with the container instance.
        public var capacityProviderName: Swift.String?
        /// The Amazon Resource Name (ARN) of the container instance. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
        public var containerInstanceArn: Swift.String?
        /// The ID of the container instance. For Amazon EC2 instances, this value is the Amazon EC2 instance ID. For external instances, this value is the Amazon Web Services Systems Manager managed instance ID.
        public var ec2InstanceId: Swift.String?
        /// An object representing the health status of the container instance.
        public var healthStatus: ECSClientTypes.ContainerInstanceHealthStatus?
        /// The number of tasks on the container instance that are in the PENDING status.
        public var pendingTasksCount: Swift.Int
        /// The Unix timestamp for the time when the container instance was registered.
        public var registeredAt: Foundation.Date?
        /// For CPU and memory resource types, this parameter describes the amount of each resource that was available on the container instance when the container agent registered it with Amazon ECS. This value represents the total amount of CPU and memory that can be allocated on this container instance to tasks. For port resource types, this parameter describes the ports that were reserved by the Amazon ECS container agent when it registered the container instance with Amazon ECS.
        public var registeredResources: [ECSClientTypes.Resource]?
        /// For CPU and memory resource types, this parameter describes the remaining CPU and memory that wasn't already allocated to tasks and is therefore available for new tasks. For port resource types, this parameter describes the ports that were reserved by the Amazon ECS container agent (at instance registration time) and any task containers that have reserved port mappings on the host (with the host or bridge network mode). Any port that's not specified here is available for new tasks.
        public var remainingResources: [ECSClientTypes.Resource]?
        /// The number of tasks on the container instance that have a desired status (desiredStatus) of RUNNING.
        public var runningTasksCount: Swift.Int
        /// The status of the container instance. The valid values are REGISTERING, REGISTRATION_FAILED, ACTIVE, INACTIVE, DEREGISTERING, or DRAINING. If your account has opted in to the awsvpcTrunking account setting, then any newly registered container instance will transition to a REGISTERING status while the trunk elastic network interface is provisioned for the instance. If the registration fails, the instance will transition to a REGISTRATION_FAILED status. You can describe the container instance and see the reason for failure in the statusReason parameter. Once the container instance is terminated, the instance transitions to a DEREGISTERING status while the trunk elastic network interface is deprovisioned. The instance then transitions to an INACTIVE status. The ACTIVE status indicates that the container instance can accept tasks. The DRAINING indicates that new tasks aren't placed on the container instance and any service tasks running on the container instance are removed if possible. For more information, see [Container instance draining](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html) in the Amazon Elastic Container Service Developer Guide.
        public var status: Swift.String?
        /// The reason that the container instance reached its current status.
        public var statusReason: Swift.String?
        /// The metadata that you apply to the container instance to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [ECSClientTypes.Tag]?
        /// The version counter for the container instance. Every time a container instance experiences a change that triggers a CloudWatch event, the version counter is incremented. If you're replicating your Amazon ECS container instance state with CloudWatch Events, you can compare the version of a container instance reported by the Amazon ECS APIs with the version reported in CloudWatch Events for the container instance (inside the detail object) to verify that the version in your event stream is current.
        public var version: Swift.Int
        /// The version information for the Amazon ECS container agent and Docker daemon running on the container instance.
        public var versionInfo: ECSClientTypes.VersionInfo?

        public init(
            agentConnected: Swift.Bool = false,
            agentUpdateStatus: ECSClientTypes.AgentUpdateStatus? = nil,
            attachments: [ECSClientTypes.Attachment]? = nil,
            attributes: [ECSClientTypes.Attribute]? = nil,
            capacityProviderName: Swift.String? = nil,
            containerInstanceArn: Swift.String? = nil,
            ec2InstanceId: Swift.String? = nil,
            healthStatus: ECSClientTypes.ContainerInstanceHealthStatus? = nil,
            pendingTasksCount: Swift.Int = 0,
            registeredAt: Foundation.Date? = nil,
            registeredResources: [ECSClientTypes.Resource]? = nil,
            remainingResources: [ECSClientTypes.Resource]? = nil,
            runningTasksCount: Swift.Int = 0,
            status: Swift.String? = nil,
            statusReason: Swift.String? = nil,
            tags: [ECSClientTypes.Tag]? = nil,
            version: Swift.Int = 0,
            versionInfo: ECSClientTypes.VersionInfo? = nil
        )
        {
            self.agentConnected = agentConnected
            self.agentUpdateStatus = agentUpdateStatus
            self.attachments = attachments
            self.attributes = attributes
            self.capacityProviderName = capacityProviderName
            self.containerInstanceArn = containerInstanceArn
            self.ec2InstanceId = ec2InstanceId
            self.healthStatus = healthStatus
            self.pendingTasksCount = pendingTasksCount
            self.registeredAt = registeredAt
            self.registeredResources = registeredResources
            self.remainingResources = remainingResources
            self.runningTasksCount = runningTasksCount
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.version = version
            self.versionInfo = versionInfo
        }
    }
}

public struct DeregisterContainerInstanceOutput: Swift.Sendable {
    /// The container instance that was deregistered.
    public var containerInstance: ECSClientTypes.ContainerInstance?

    public init(
        containerInstance: ECSClientTypes.ContainerInstance? = nil
    )
    {
        self.containerInstance = containerInstance
    }
}

public struct DeregisterTaskDefinitionInput: Swift.Sendable {
    /// The family and revision (family:revision) or full Amazon Resource Name (ARN) of the task definition to deregister. You must specify a revision.
    /// This member is required.
    public var taskDefinition: Swift.String?

    public init(
        taskDefinition: Swift.String? = nil
    )
    {
        self.taskDefinition = taskDefinition
    }
}

public struct DeregisterTaskDefinitionOutput: Swift.Sendable {
    /// The full description of the deregistered task.
    public var taskDefinition: ECSClientTypes.TaskDefinition?

    public init(
        taskDefinition: ECSClientTypes.TaskDefinition? = nil
    )
    {
        self.taskDefinition = taskDefinition
    }
}

extension ECSClientTypes {

    public enum CapacityProviderField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityProviderField] {
            return [
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeCapacityProvidersInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of one or more capacity providers. Up to 100 capacity providers can be described in an action.
    public var capacityProviders: [Swift.String]?
    /// Specifies whether or not you want to see the resource tags for the capacity provider. If TAGS is specified, the tags are included in the response. If this field is omitted, tags aren't included in the response.
    public var include: [ECSClientTypes.CapacityProviderField]?
    /// The maximum number of account setting results returned by DescribeCapacityProviders in paginated output. When this parameter is used, DescribeCapacityProviders only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeCapacityProviders request with the returned nextToken value. This value can be between 1 and 10. If this parameter is not used, then DescribeCapacityProviders returns up to 10 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeCapacityProviders request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        capacityProviders: [Swift.String]? = nil,
        include: [ECSClientTypes.CapacityProviderField]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.capacityProviders = capacityProviders
        self.include = include
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct DescribeCapacityProvidersOutput: Swift.Sendable {
    /// The list of capacity providers.
    public var capacityProviders: [ECSClientTypes.CapacityProvider]?
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// The nextToken value to include in a future DescribeCapacityProviders request. When the results of a DescribeCapacityProviders request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        capacityProviders: [ECSClientTypes.CapacityProvider]? = nil,
        failures: [ECSClientTypes.Failure]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.capacityProviders = capacityProviders
        self.failures = failures
        self.nextToken = nextToken
    }
}

extension ECSClientTypes {

    public enum ClusterField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attachments
        case configurations
        case settings
        case statistics
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterField] {
            return [
                .attachments,
                .configurations,
                .settings,
                .statistics,
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attachments: return "ATTACHMENTS"
            case .configurations: return "CONFIGURATIONS"
            case .settings: return "SETTINGS"
            case .statistics: return "STATISTICS"
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeClustersInput: Swift.Sendable {
    /// A list of up to 100 cluster names or full cluster Amazon Resource Name (ARN) entries. If you do not specify a cluster, the default cluster is assumed.
    public var clusters: [Swift.String]?
    /// Determines whether to include additional information about the clusters in the response. If this field is omitted, this information isn't included. If ATTACHMENTS is specified, the attachments for the container instances or tasks within the cluster are included, for example the capacity providers. If SETTINGS is specified, the settings for the cluster are included. If CONFIGURATIONS is specified, the configuration for the cluster is included. If STATISTICS is specified, the task and service count is included, separated by launch type. If TAGS is specified, the metadata tags associated with the cluster are included.
    public var include: [ECSClientTypes.ClusterField]?

    public init(
        clusters: [Swift.String]? = nil,
        include: [ECSClientTypes.ClusterField]? = nil
    )
    {
        self.clusters = clusters
        self.include = include
    }
}

public struct DescribeClustersOutput: Swift.Sendable {
    /// The list of clusters.
    public var clusters: [ECSClientTypes.Cluster]?
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?

    public init(
        clusters: [ECSClientTypes.Cluster]? = nil,
        failures: [ECSClientTypes.Failure]? = nil
    )
    {
        self.clusters = clusters
        self.failures = failures
    }
}

extension ECSClientTypes {

    public enum ContainerInstanceField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case containerInstanceHealth
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerInstanceField] {
            return [
                .containerInstanceHealth,
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .containerInstanceHealth: return "CONTAINER_INSTANCE_HEALTH"
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeContainerInstancesInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the container instance or container instances you are describing were launched in any cluster other than the default cluster.
    public var cluster: Swift.String?
    /// A list of up to 100 container instance IDs or full Amazon Resource Name (ARN) entries.
    /// This member is required.
    public var containerInstances: [Swift.String]?
    /// Specifies whether you want to see the resource tags for the container instance. If TAGS is specified, the tags are included in the response. If CONTAINER_INSTANCE_HEALTH is specified, the container instance health is included in the response. If this field is omitted, tags and container instance health status aren't included in the response.
    public var include: [ECSClientTypes.ContainerInstanceField]?

    public init(
        cluster: Swift.String? = nil,
        containerInstances: [Swift.String]? = nil,
        include: [ECSClientTypes.ContainerInstanceField]? = nil
    )
    {
        self.cluster = cluster
        self.containerInstances = containerInstances
        self.include = include
    }
}

public struct DescribeContainerInstancesOutput: Swift.Sendable {
    /// The list of container instances.
    public var containerInstances: [ECSClientTypes.ContainerInstance]?
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?

    public init(
        containerInstances: [ECSClientTypes.ContainerInstance]? = nil,
        failures: [ECSClientTypes.Failure]? = nil
    )
    {
        self.containerInstances = containerInstances
        self.failures = failures
    }
}

public struct DescribeServiceDeploymentsInput: Swift.Sendable {
    /// The ARN of the service deployment. You can specify a maximum of 20 ARNs.
    /// This member is required.
    public var serviceDeploymentArns: [Swift.String]?

    public init(
        serviceDeploymentArns: [Swift.String]? = nil
    )
    {
        self.serviceDeploymentArns = serviceDeploymentArns
    }
}

extension ECSClientTypes {

    public enum ServiceDeploymentRollbackMonitorsStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case monitoring
        case monitoringComplete
        case triggered
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceDeploymentRollbackMonitorsStatus] {
            return [
                .disabled,
                .monitoring,
                .monitoringComplete,
                .triggered
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .monitoring: return "MONITORING"
            case .monitoringComplete: return "MONITORING_COMPLETE"
            case .triggered: return "TRIGGERED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The CloudWatch alarms used to determine a service deployment failed. Amazon ECS considers the service deployment as failed when any of the alarms move to the ALARM state. For more information, see [How CloudWatch alarms detect Amazon ECS deployment failures](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-alarm-failure.html) in the Amazon ECS Developer Guide.
    public struct ServiceDeploymentAlarms: Swift.Sendable {
        /// The name of the CloudWatch alarms that determine when a service deployment failed. A "," separates the alarms.
        public var alarmNames: [Swift.String]?
        /// The status of the alarms check. Amazon ECS is not using alarms for service deployment failures when the status is DISABLED.
        public var status: ECSClientTypes.ServiceDeploymentRollbackMonitorsStatus?
        /// One or more CloudWatch alarm names that have been triggered during the service deployment. A "," separates the alarm names.
        public var triggeredAlarmNames: [Swift.String]?

        public init(
            alarmNames: [Swift.String]? = nil,
            status: ECSClientTypes.ServiceDeploymentRollbackMonitorsStatus? = nil,
            triggeredAlarmNames: [Swift.String]? = nil
        )
        {
            self.alarmNames = alarmNames
            self.status = status
            self.triggeredAlarmNames = triggeredAlarmNames
        }
    }
}

extension ECSClientTypes {

    /// Information about the circuit breaker used to determine when a service deployment has failed. The deployment circuit breaker is the rolling update mechanism that determines if the tasks reach a steady state. The deployment circuit breaker has an option that will automatically roll back a failed deployment to the last cpompleted service revision. For more information, see [How the Amazon ECS deployment circuit breaker detects failures](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-circuit-breaker.html) in the Amazon ECS Developer Guide.
    public struct ServiceDeploymentCircuitBreaker: Swift.Sendable {
        /// The number of times the circuit breaker detected a service deploymeny failure.
        public var failureCount: Swift.Int
        /// The circuit breaker status. Amazon ECS is not using the circuit breaker for service deployment failures when the status is DISABLED.
        public var status: ECSClientTypes.ServiceDeploymentRollbackMonitorsStatus?
        /// The threshhold which determines that the service deployment failed. The deployment circuit breaker calculates the threshold value, and then uses the value to determine when to move the deployment to a FAILED state. The deployment circuit breaker has a minimum threshold of 3 and a maximum threshold of 200. and uses the values in the following formula to determine the deployment failure. 0.5 * desired task count
        public var threshold: Swift.Int

        public init(
            failureCount: Swift.Int = 0,
            status: ECSClientTypes.ServiceDeploymentRollbackMonitorsStatus? = nil,
            threshold: Swift.Int = 0
        )
        {
            self.failureCount = failureCount
            self.status = status
            self.threshold = threshold
        }
    }
}

extension ECSClientTypes {

    /// Information about the service deployment rollback.
    public struct Rollback: Swift.Sendable {
        /// The reason the rollback happened. For example, the circuit breaker initiated the rollback operation.
        public var reason: Swift.String?
        /// The ARN of the service revision deployed as part of the rollback. When the type is GPU, the value is the number of physical GPUs the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on. When the type is InferenceAccelerator, the value matches the deviceName for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
        public var serviceRevisionArn: Swift.String?
        /// Time time that the rollback started. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var startedAt: Foundation.Date?

        public init(
            reason: Swift.String? = nil,
            serviceRevisionArn: Swift.String? = nil,
            startedAt: Foundation.Date? = nil
        )
        {
            self.reason = reason
            self.serviceRevisionArn = serviceRevisionArn
            self.startedAt = startedAt
        }
    }
}

extension ECSClientTypes {

    /// The information about the number of requested, pending, and running tasks for a service revision.
    public struct ServiceRevisionSummary: Swift.Sendable {
        /// The ARN of the service revision.
        public var arn: Swift.String?
        /// The number of pending tasks for the service revision.
        public var pendingTaskCount: Swift.Int
        /// The number of requested tasks for the service revision.
        public var requestedTaskCount: Swift.Int
        /// The number of running tasks for the service revision.
        public var runningTaskCount: Swift.Int

        public init(
            arn: Swift.String? = nil,
            pendingTaskCount: Swift.Int = 0,
            requestedTaskCount: Swift.Int = 0,
            runningTaskCount: Swift.Int = 0
        )
        {
            self.arn = arn
            self.pendingTaskCount = pendingTaskCount
            self.requestedTaskCount = requestedTaskCount
            self.runningTaskCount = runningTaskCount
        }
    }
}

extension ECSClientTypes {

    public enum ServiceDeploymentStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inProgress
        case pending
        case rollbackFailed
        case rollbackInProgress
        case rollbackSuccessful
        case stopped
        case stopRequested
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceDeploymentStatus] {
            return [
                .inProgress,
                .pending,
                .rollbackFailed,
                .rollbackInProgress,
                .rollbackSuccessful,
                .stopped,
                .stopRequested,
                .successful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .rollbackInProgress: return "ROLLBACK_IN_PROGRESS"
            case .rollbackSuccessful: return "ROLLBACK_SUCCESSFUL"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .successful: return "SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// Information about the service deployment. Service deployments provide a comprehensive view of your deployments. For information about service deployments, see [View service history using Amazon ECS service deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-deployment.html) in the Amazon Elastic Container Service Developer Guide .
    public struct ServiceDeployment: Swift.Sendable {
        /// The CloudWatch alarms that determine when a service deployment fails.
        public var alarms: ECSClientTypes.ServiceDeploymentAlarms?
        /// The ARN of the cluster that hosts the service.
        public var clusterArn: Swift.String?
        /// The time the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var createdAt: Foundation.Date?
        /// The circuit breaker configuration that determines a service deployment failed.
        public var deploymentCircuitBreaker: ECSClientTypes.ServiceDeploymentCircuitBreaker?
        /// Optional deployment parameters that control how many tasks run during the deployment and the failure detection methods.
        public var deploymentConfiguration: ECSClientTypes.DeploymentConfiguration?
        /// The time the service deployment finished. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var finishedAt: Foundation.Date?
        /// The rollback options the service deployment uses when the deployment fails.
        public var rollback: ECSClientTypes.Rollback?
        /// The ARN of the service for this service deployment.
        public var serviceArn: Swift.String?
        /// The ARN of the service deployment.
        public var serviceDeploymentArn: Swift.String?
        /// The currently deployed workload configuration.
        public var sourceServiceRevisions: [ECSClientTypes.ServiceRevisionSummary]?
        /// The time the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var startedAt: Foundation.Date?
        /// The service deployment state.
        public var status: ECSClientTypes.ServiceDeploymentStatus?
        /// Information about why the service deployment is in the current status. For example, the circuit breaker detected a failure.
        public var statusReason: Swift.String?
        /// The time the service deployment stopped. The format is yyyy-MM-dd HH:mm:ss.SSSSSS. The service deployment stops when any of the following actions happen:
        ///
        /// * A user manually stops the deployment
        ///
        /// * The rollback option is not in use for the failure detection mechanism (the circuit breaker or alarm-based) and the service fails.
        public var stoppedAt: Foundation.Date?
        /// The workload configuration being deployed.
        public var targetServiceRevision: ECSClientTypes.ServiceRevisionSummary?
        /// The time that the service deployment was last updated. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var updatedAt: Foundation.Date?

        public init(
            alarms: ECSClientTypes.ServiceDeploymentAlarms? = nil,
            clusterArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentCircuitBreaker: ECSClientTypes.ServiceDeploymentCircuitBreaker? = nil,
            deploymentConfiguration: ECSClientTypes.DeploymentConfiguration? = nil,
            finishedAt: Foundation.Date? = nil,
            rollback: ECSClientTypes.Rollback? = nil,
            serviceArn: Swift.String? = nil,
            serviceDeploymentArn: Swift.String? = nil,
            sourceServiceRevisions: [ECSClientTypes.ServiceRevisionSummary]? = nil,
            startedAt: Foundation.Date? = nil,
            status: ECSClientTypes.ServiceDeploymentStatus? = nil,
            statusReason: Swift.String? = nil,
            stoppedAt: Foundation.Date? = nil,
            targetServiceRevision: ECSClientTypes.ServiceRevisionSummary? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.alarms = alarms
            self.clusterArn = clusterArn
            self.createdAt = createdAt
            self.deploymentCircuitBreaker = deploymentCircuitBreaker
            self.deploymentConfiguration = deploymentConfiguration
            self.finishedAt = finishedAt
            self.rollback = rollback
            self.serviceArn = serviceArn
            self.serviceDeploymentArn = serviceDeploymentArn
            self.sourceServiceRevisions = sourceServiceRevisions
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.targetServiceRevision = targetServiceRevision
            self.updatedAt = updatedAt
        }
    }
}

public struct DescribeServiceDeploymentsOutput: Swift.Sendable {
    /// Any failures associated with the call. If you decsribe a deployment with a service revision created before October 25, 2024, the call fails. The failure includes the service revision ARN and the reason set to MISSING.
    public var failures: [ECSClientTypes.Failure]?
    /// The list of service deployments described.
    public var serviceDeployments: [ECSClientTypes.ServiceDeployment]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        serviceDeployments: [ECSClientTypes.ServiceDeployment]? = nil
    )
    {
        self.failures = failures
        self.serviceDeployments = serviceDeployments
    }
}

public struct DescribeServiceRevisionsInput: Swift.Sendable {
    /// The ARN of the service revision. You can specify a maximum of 20 ARNs. You can call [ListServiceDeployments](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListServiceDeployments.html) to get the ARNs.
    /// This member is required.
    public var serviceRevisionArns: [Swift.String]?

    public init(
        serviceRevisionArns: [Swift.String]? = nil
    )
    {
        self.serviceRevisionArns = serviceRevisionArns
    }
}

extension ECSClientTypes {

    /// The details about the container image a service revision uses. To ensure that all tasks in a service use the same container image, Amazon ECS resolves container image names and any image tags specified in the task definition to container image digests. After the container image digest has been established, Amazon ECS uses the digest to start any other desired tasks, and for any future service and service revision updates. This leads to all tasks in a service always running identical container images, resulting in version consistency for your software. For more information, see [Container image resolution](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html#deployment-container-image-stability) in the Amazon ECS Developer Guide.
    public struct ContainerImage: Swift.Sendable {
        /// The name of the container.
        public var containerName: Swift.String?
        /// The container image.
        public var image: Swift.String?
        /// The container image digest.
        public var imageDigest: Swift.String?

        public init(
            containerName: Swift.String? = nil,
            image: Swift.String? = nil,
            imageDigest: Swift.String? = nil
        )
        {
            self.containerName = containerName
            self.image = image
            self.imageDigest = imageDigest
        }
    }
}

extension ECSClientTypes {

    /// Information about the service revision. A service revision contains a record of the workload configuration Amazon ECS is attempting to deploy. Whenever you create or deploy a service, Amazon ECS automatically creates and captures the configuration that you're trying to deploy in the service revision. For information about service revisions, see [Amazon ECS service revisions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-revision.html) in the Amazon Elastic Container Service Developer Guide .
    public struct ServiceRevision: Swift.Sendable {
        /// The capacity provider strategy the service revision uses.
        public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
        /// The ARN of the cluster that hosts the service.
        public var clusterArn: Swift.String?
        /// The container images the service revision uses.
        public var containerImages: [ECSClientTypes.ContainerImage]?
        /// The time that the service revision was created. The format is yyyy-mm-dd HH:mm:ss.SSSSS.
        public var createdAt: Foundation.Date?
        /// The amount of ephemeral storage to allocate for the deployment.
        public var fargateEphemeralStorage: ECSClientTypes.DeploymentEphemeralStorage?
        /// Indicates whether Runtime Monitoring is turned on.
        public var guardDutyEnabled: Swift.Bool
        /// The launch type the service revision uses.
        public var launchType: ECSClientTypes.LaunchType?
        /// The load balancers the service revision uses.
        public var loadBalancers: [ECSClientTypes.LoadBalancer]?
        /// The network configuration for a task or service.
        public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
        /// The platform family the service revision uses.
        public var platformFamily: Swift.String?
        /// For the Fargate launch type, the platform version the service revision uses.
        public var platformVersion: Swift.String?
        /// The ARN of the service for the service revision.
        public var serviceArn: Swift.String?
        /// The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
        public var serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration?
        /// The service registries (for Service Discovery) the service revision uses.
        public var serviceRegistries: [ECSClientTypes.ServiceRegistry]?
        /// The ARN of the service revision.
        public var serviceRevisionArn: Swift.String?
        /// The task definition the service revision uses.
        public var taskDefinition: Swift.String?
        /// The volumes that are configured at deployment that the service revision uses.
        public var volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]?

        public init(
            capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
            clusterArn: Swift.String? = nil,
            containerImages: [ECSClientTypes.ContainerImage]? = nil,
            createdAt: Foundation.Date? = nil,
            fargateEphemeralStorage: ECSClientTypes.DeploymentEphemeralStorage? = nil,
            guardDutyEnabled: Swift.Bool = false,
            launchType: ECSClientTypes.LaunchType? = nil,
            loadBalancers: [ECSClientTypes.LoadBalancer]? = nil,
            networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            serviceArn: Swift.String? = nil,
            serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration? = nil,
            serviceRegistries: [ECSClientTypes.ServiceRegistry]? = nil,
            serviceRevisionArn: Swift.String? = nil,
            taskDefinition: Swift.String? = nil,
            volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.containerImages = containerImages
            self.createdAt = createdAt
            self.fargateEphemeralStorage = fargateEphemeralStorage
            self.guardDutyEnabled = guardDutyEnabled
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.serviceArn = serviceArn
            self.serviceConnectConfiguration = serviceConnectConfiguration
            self.serviceRegistries = serviceRegistries
            self.serviceRevisionArn = serviceRevisionArn
            self.taskDefinition = taskDefinition
            self.volumeConfigurations = volumeConfigurations
        }
    }
}

public struct DescribeServiceRevisionsOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// The list of service revisions described.
    public var serviceRevisions: [ECSClientTypes.ServiceRevision]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        serviceRevisions: [ECSClientTypes.ServiceRevision]? = nil
    )
    {
        self.failures = failures
        self.serviceRevisions = serviceRevisions
    }
}

extension ECSClientTypes {

    public enum ServiceField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceField] {
            return [
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeServicesInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN)the cluster that hosts the service to describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the service or services you are describing were launched in any cluster other than the default cluster.
    public var cluster: Swift.String?
    /// Determines whether you want to see the resource tags for the service. If TAGS is specified, the tags are included in the response. If this field is omitted, tags aren't included in the response.
    public var include: [ECSClientTypes.ServiceField]?
    /// A list of services to describe. You may specify up to 10 services to describe in a single operation.
    /// This member is required.
    public var services: [Swift.String]?

    public init(
        cluster: Swift.String? = nil,
        include: [ECSClientTypes.ServiceField]? = nil,
        services: [Swift.String]? = nil
    )
    {
        self.cluster = cluster
        self.include = include
        self.services = services
    }
}

public struct DescribeServicesOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// The list of services described.
    public var services: [ECSClientTypes.Service]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        services: [ECSClientTypes.Service]? = nil
    )
    {
        self.failures = failures
        self.services = services
    }
}

extension ECSClientTypes {

    public enum TaskDefinitionField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskDefinitionField] {
            return [
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTaskDefinitionInput: Swift.Sendable {
    /// Determines whether to see the resource tags for the task definition. If TAGS is specified, the tags are included in the response. If this field is omitted, tags aren't included in the response.
    public var include: [ECSClientTypes.TaskDefinitionField]?
    /// The family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, or full Amazon Resource Name (ARN) of the task definition to describe.
    /// This member is required.
    public var taskDefinition: Swift.String?

    public init(
        include: [ECSClientTypes.TaskDefinitionField]? = nil,
        taskDefinition: Swift.String? = nil
    )
    {
        self.include = include
        self.taskDefinition = taskDefinition
    }
}

public struct DescribeTaskDefinitionOutput: Swift.Sendable {
    /// The metadata that's applied to the task definition to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The full task definition description.
    public var taskDefinition: ECSClientTypes.TaskDefinition?

    public init(
        tags: [ECSClientTypes.Tag]? = nil,
        taskDefinition: ECSClientTypes.TaskDefinition? = nil
    )
    {
        self.tags = tags
        self.taskDefinition = taskDefinition
    }
}

extension ECSClientTypes {

    public enum TaskField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskField] {
            return [
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTasksInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task or tasks to describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the task or tasks you are describing were launched in any cluster other than the default cluster.
    public var cluster: Swift.String?
    /// Specifies whether you want to see the resource tags for the task. If TAGS is specified, the tags are included in the response. If this field is omitted, tags aren't included in the response.
    public var include: [ECSClientTypes.TaskField]?
    /// A list of up to 100 task IDs or full ARN entries.
    /// This member is required.
    public var tasks: [Swift.String]?

    public init(
        cluster: Swift.String? = nil,
        include: [ECSClientTypes.TaskField]? = nil,
        tasks: [Swift.String]? = nil
    )
    {
        self.cluster = cluster
        self.include = include
        self.tasks = tasks
    }
}

extension ECSClientTypes {

    public enum Connectivity: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connected
        case disconnected
        case sdkUnknown(Swift.String)

        public static var allCases: [Connectivity] {
            return [
                .connected,
                .disconnected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .disconnected: return "DISCONNECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum HealthStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case healthy
        case unhealthy
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [HealthStatus] {
            return [
                .healthy,
                .unhealthy,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .healthy: return "HEALTHY"
            case .unhealthy: return "UNHEALTHY"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    public enum ManagedAgentName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case executecommandagent
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedAgentName] {
            return [
                .executecommandagent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .executecommandagent: return "ExecuteCommandAgent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// Details about the managed agent status for the container.
    public struct ManagedAgent: Swift.Sendable {
        /// The Unix timestamp for the time when the managed agent was last started.
        public var lastStartedAt: Foundation.Date?
        /// The last known status of the managed agent.
        public var lastStatus: Swift.String?
        /// The name of the managed agent. When the execute command feature is turned on, the managed agent name is ExecuteCommandAgent.
        public var name: ECSClientTypes.ManagedAgentName?
        /// The reason for why the managed agent is in the state it is in.
        public var reason: Swift.String?

        public init(
            lastStartedAt: Foundation.Date? = nil,
            lastStatus: Swift.String? = nil,
            name: ECSClientTypes.ManagedAgentName? = nil,
            reason: Swift.String? = nil
        )
        {
            self.lastStartedAt = lastStartedAt
            self.lastStatus = lastStatus
            self.name = name
            self.reason = reason
        }
    }
}

extension ECSClientTypes {

    /// Details on the network bindings between a container and its host container instance. After a task reaches the RUNNING status, manual and automatic host and container port assignments are visible in the networkBindings section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
    public struct NetworkBinding: Swift.Sendable {
        /// The IP address that the container is bound to on the container instance.
        public var bindIP: Swift.String?
        /// The port number on the container that's used with the network binding.
        public var containerPort: Swift.Int?
        /// The port number range on the container that's bound to the dynamically mapped host port range. The following rules apply when you specify a containerPortRange:
        ///
        /// * You must use either the bridge network mode or the awsvpc network mode.
        ///
        /// * This parameter is available for both the EC2 and Fargate launch types.
        ///
        /// * This parameter is available for both the Linux and Windows operating systems.
        ///
        /// * The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ecs-init package
        ///
        /// * You can specify a maximum of 100 port ranges per container.
        ///
        /// * You do not specify a hostPortRange. The value of the hostPortRange is set as follows:
        ///
        /// * For containers in a task with the awsvpc network mode, the hostPortRange is set to the same value as the containerPortRange. This is a static mapping strategy.
        ///
        /// * For containers in a task with the bridge network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.
        ///
        ///
        ///
        ///
        /// * The containerPortRange valid values are between 1 and 65535.
        ///
        /// * A port can only be included in one port mapping per container.
        ///
        /// * You cannot specify overlapping port ranges.
        ///
        /// * The first port in the range must be less than last port in the range.
        ///
        /// * Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports. For more information, see [ Issue #11185](https://github.com/moby/moby/issues/11185) on the Github website. For information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the Amazon ECS Developer Guide.
        ///
        ///
        /// You can call [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the hostPortRange which are the host ports that are bound to the container ports.
        public var containerPortRange: Swift.String?
        /// The port number on the host that's used with the network binding.
        public var hostPort: Swift.Int?
        /// The port number range on the host that's used with the network binding. This is assigned is assigned by Docker and delivered by the Amazon ECS agent.
        public var hostPortRange: Swift.String?
        /// The protocol used for the network binding.
        public var `protocol`: ECSClientTypes.TransportProtocol?

        public init(
            bindIP: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            containerPortRange: Swift.String? = nil,
            hostPort: Swift.Int? = nil,
            hostPortRange: Swift.String? = nil,
            `protocol`: ECSClientTypes.TransportProtocol? = nil
        )
        {
            self.bindIP = bindIP
            self.containerPort = containerPort
            self.containerPortRange = containerPortRange
            self.hostPort = hostPort
            self.hostPortRange = hostPortRange
            self.`protocol` = `protocol`
        }
    }
}

extension ECSClientTypes {

    /// An object representing the elastic network interface for tasks that use the awsvpc network mode.
    public struct NetworkInterface: Swift.Sendable {
        /// The attachment ID for the network interface.
        public var attachmentId: Swift.String?
        /// The private IPv6 address for the network interface.
        public var ipv6Address: Swift.String?
        /// The private IPv4 address for the network interface.
        public var privateIpv4Address: Swift.String?

        public init(
            attachmentId: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIpv4Address: Swift.String? = nil
        )
        {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }
    }
}

extension ECSClientTypes {

    /// A Docker container that's part of a task.
    public struct Container: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the container.
        public var containerArn: Swift.String?
        /// The number of CPU units set for the container. The value is 0 if no value was specified in the container definition when the task definition was registered.
        public var cpu: Swift.String?
        /// The exit code returned from the container.
        public var exitCode: Swift.Int?
        /// The IDs of each GPU assigned to the container.
        public var gpuIds: [Swift.String]?
        /// The health status of the container. If health checks aren't configured for this container in its task definition, then it reports the health status as UNKNOWN.
        public var healthStatus: ECSClientTypes.HealthStatus?
        /// The image used for the container.
        public var image: Swift.String?
        /// The container image manifest digest.
        public var imageDigest: Swift.String?
        /// The last known status of the container.
        public var lastStatus: Swift.String?
        /// The details of any Amazon ECS managed agents associated with the container.
        public var managedAgents: [ECSClientTypes.ManagedAgent]?
        /// The hard limit (in MiB) of memory set for the container.
        public var memory: Swift.String?
        /// The soft limit (in MiB) of memory set for the container.
        public var memoryReservation: Swift.String?
        /// The name of the container.
        public var name: Swift.String?
        /// The network bindings associated with the container.
        public var networkBindings: [ECSClientTypes.NetworkBinding]?
        /// The network interfaces associated with the container.
        public var networkInterfaces: [ECSClientTypes.NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public var reason: Swift.String?
        /// The ID of the Docker container.
        public var runtimeId: Swift.String?
        /// The ARN of the task.
        public var taskArn: Swift.String?

        public init(
            containerArn: Swift.String? = nil,
            cpu: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            gpuIds: [Swift.String]? = nil,
            healthStatus: ECSClientTypes.HealthStatus? = nil,
            image: Swift.String? = nil,
            imageDigest: Swift.String? = nil,
            lastStatus: Swift.String? = nil,
            managedAgents: [ECSClientTypes.ManagedAgent]? = nil,
            memory: Swift.String? = nil,
            memoryReservation: Swift.String? = nil,
            name: Swift.String? = nil,
            networkBindings: [ECSClientTypes.NetworkBinding]? = nil,
            networkInterfaces: [ECSClientTypes.NetworkInterface]? = nil,
            reason: Swift.String? = nil,
            runtimeId: Swift.String? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.containerArn = containerArn
            self.cpu = cpu
            self.exitCode = exitCode
            self.gpuIds = gpuIds
            self.healthStatus = healthStatus
            self.image = image
            self.imageDigest = imageDigest
            self.lastStatus = lastStatus
            self.managedAgents = managedAgents
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.networkBindings = networkBindings
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.runtimeId = runtimeId
            self.taskArn = taskArn
        }
    }
}

extension ECSClientTypes {

    /// The amount of ephemeral storage to allocate for the task.
    public struct TaskEphemeralStorage: Swift.Sendable {
        /// Specify an Amazon Web Services Key Management Service key ID to encrypt the ephemeral storage for the task.
        public var kmsKeyId: Swift.String?
        /// The total amount, in GiB, of the ephemeral storage to set for the task. The minimum supported value is 20 GiB and the maximum supported value is  200 GiB.
        public var sizeInGiB: Swift.Int

        public init(
            kmsKeyId: Swift.String? = nil,
            sizeInGiB: Swift.Int = 0
        )
        {
            self.kmsKeyId = kmsKeyId
            self.sizeInGiB = sizeInGiB
        }
    }
}

extension ECSClientTypes {

    /// The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is {"containerOverrides": [ ] }. If a non-empty container override is specified, the name parameter must be included. You can use Secrets Manager or Amazon Web Services Systems Manager Parameter Store to store the sensitive data. For more information, see [Retrieve secrets through environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/secrets-envvar.html) in the Amazon ECS Developer Guide.
    public struct ContainerOverride: Swift.Sendable {
        /// The command to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
        public var command: [Swift.String]?
        /// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
        public var cpu: Swift.Int?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
        public var environment: [ECSClientTypes.KeyValuePair]?
        /// A list of files containing the environment variables to pass to a container, instead of the value from the container definition.
        public var environmentFiles: [ECSClientTypes.EnvironmentFile]?
        /// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
        public var memory: Swift.Int?
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
        public var memoryReservation: Swift.Int?
        /// The name of the container that receives the override. This parameter is required if any override is specified.
        public var name: Swift.String?
        /// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU.
        public var resourceRequirements: [ECSClientTypes.ResourceRequirement]?

        public init(
            command: [Swift.String]? = nil,
            cpu: Swift.Int? = nil,
            environment: [ECSClientTypes.KeyValuePair]? = nil,
            environmentFiles: [ECSClientTypes.EnvironmentFile]? = nil,
            memory: Swift.Int? = nil,
            memoryReservation: Swift.Int? = nil,
            name: Swift.String? = nil,
            resourceRequirements: [ECSClientTypes.ResourceRequirement]? = nil
        )
        {
            self.command = command
            self.cpu = cpu
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.resourceRequirements = resourceRequirements
        }
    }
}

extension ECSClientTypes {

    /// Details on an Elastic Inference accelerator task override. This parameter is used to override the Elastic Inference accelerator specified in the task definition. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the Amazon Elastic Container Service Developer Guide.
    public struct InferenceAcceleratorOverride: Swift.Sendable {
        /// The Elastic Inference accelerator device name to override for the task. This parameter must match a deviceName specified in the task definition.
        public var deviceName: Swift.String?
        /// The Elastic Inference accelerator type to use.
        public var deviceType: Swift.String?

        public init(
            deviceName: Swift.String? = nil,
            deviceType: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }
    }
}

extension ECSClientTypes {

    /// The overrides that are associated with a task.
    public struct TaskOverride: Swift.Sendable {
        /// One or more container overrides that are sent to a task.
        public var containerOverrides: [ECSClientTypes.ContainerOverride]?
        /// The CPU override for the task.
        public var cpu: Swift.String?
        /// The ephemeral storage setting override for the task. This parameter is only supported for tasks hosted on Fargate that use the following platform versions:
        ///
        /// * Linux platform version 1.4.0 or later.
        ///
        /// * Windows platform version 1.0.0 or later.
        public var ephemeralStorage: ECSClientTypes.EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the task execution role override for the task. For more information, see [Amazon ECS task execution IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the Amazon Elastic Container Service Developer Guide.
        public var executionRoleArn: Swift.String?
        /// The Elastic Inference accelerator override for the task.
        public var inferenceAcceleratorOverrides: [ECSClientTypes.InferenceAcceleratorOverride]?
        /// The memory override for the task.
        public var memory: Swift.String?
        /// The Amazon Resource Name (ARN) of the role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role. For more information, see [IAM Role for Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
        public var taskRoleArn: Swift.String?

        public init(
            containerOverrides: [ECSClientTypes.ContainerOverride]? = nil,
            cpu: Swift.String? = nil,
            ephemeralStorage: ECSClientTypes.EphemeralStorage? = nil,
            executionRoleArn: Swift.String? = nil,
            inferenceAcceleratorOverrides: [ECSClientTypes.InferenceAcceleratorOverride]? = nil,
            memory: Swift.String? = nil,
            taskRoleArn: Swift.String? = nil
        )
        {
            self.containerOverrides = containerOverrides
            self.cpu = cpu
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides
            self.memory = memory
            self.taskRoleArn = taskRoleArn
        }
    }
}

extension ECSClientTypes {

    public enum TaskStopCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case essentialContainerExited
        case serviceSchedulerInitiated
        case spotInterruption
        case taskFailedToStart
        case terminationNotice
        case userInitiated
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskStopCode] {
            return [
                .essentialContainerExited,
                .serviceSchedulerInitiated,
                .spotInterruption,
                .taskFailedToStart,
                .terminationNotice,
                .userInitiated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .essentialContainerExited: return "EssentialContainerExited"
            case .serviceSchedulerInitiated: return "ServiceSchedulerInitiated"
            case .spotInterruption: return "SpotInterruption"
            case .taskFailedToStart: return "TaskFailedToStart"
            case .terminationNotice: return "TerminationNotice"
            case .userInitiated: return "UserInitiated"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// Details on a task in a cluster.
    public struct Task: Swift.Sendable {
        /// The Elastic Network Adapter that's associated with the task if the task uses the awsvpc network mode.
        public var attachments: [ECSClientTypes.Attachment]?
        /// The attributes of the task
        public var attributes: [ECSClientTypes.Attribute]?
        /// The Availability Zone for the task.
        public var availabilityZone: Swift.String?
        /// The capacity provider that's associated with the task.
        public var capacityProviderName: Swift.String?
        /// The ARN of the cluster that hosts the task.
        public var clusterArn: Swift.String?
        /// The connectivity status of a task.
        public var connectivity: ECSClientTypes.Connectivity?
        /// The Unix timestamp for the time when the task last went into CONNECTED status.
        public var connectivityAt: Foundation.Date?
        /// The ARN of the container instances that host the task.
        public var containerInstanceArn: Swift.String?
        /// The containers that's associated with the task.
        public var containers: [ECSClientTypes.Container]?
        /// The number of CPU units used by the task as expressed in a task definition. It can be expressed as an integer using CPU units (for example, 1024). It can also be expressed as a string using vCPUs (for example, 1 vCPU or 1 vcpu). String values are converted to an integer that indicates the CPU units when the task definition is registered. If you use the EC2 launch type, this field is optional. Supported values are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs). If you use the Fargate launch type, this field is required. You must use one of the following values. These values determine the range of supported values for the memory parameter: The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.
        ///
        /// * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
        ///
        /// * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)
        ///
        /// * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        ///
        /// * 2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
        ///
        /// * 4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
        ///
        /// * 8192 (8 vCPU) - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.
        ///
        /// * 16384 (16vCPU) - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
        public var cpu: Swift.String?
        /// The Unix timestamp for the time when the task was created. More specifically, it's for the time when the task entered the PENDING state.
        public var createdAt: Foundation.Date?
        /// The desired status of the task. For more information, see [Task Lifecycle](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).
        public var desiredStatus: Swift.String?
        /// Determines whether execute command functionality is turned on for this task. If true, execute command functionality is turned on all the containers in the task.
        public var enableExecuteCommand: Swift.Bool
        /// The ephemeral storage settings for the task.
        public var ephemeralStorage: ECSClientTypes.EphemeralStorage?
        /// The Unix timestamp for the time when the task execution stopped.
        public var executionStoppedAt: Foundation.Date?
        /// The Fargate ephemeral storage settings for the task.
        public var fargateEphemeralStorage: ECSClientTypes.TaskEphemeralStorage?
        /// The name of the task group that's associated with the task.
        public var group: Swift.String?
        /// The health status for the task. It's determined by the health of the essential containers in the task. If all essential containers in the task are reporting as HEALTHY, the task status also reports as HEALTHY. If any essential containers in the task are reporting as UNHEALTHY or UNKNOWN, the task status also reports as UNHEALTHY or UNKNOWN. The Amazon ECS container agent doesn't monitor or report on Docker health checks that are embedded in a container image and not specified in the container definition. For example, this includes those specified in a parent image or from the image's Dockerfile. Health check parameters that are specified in a container definition override any Docker health checks that are found in the container image.
        public var healthStatus: ECSClientTypes.HealthStatus?
        /// The Elastic Inference accelerator that's associated with the task.
        public var inferenceAccelerators: [ECSClientTypes.InferenceAccelerator]?
        /// The last known status for the task. For more information, see [Task Lifecycle](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).
        public var lastStatus: Swift.String?
        /// The infrastructure where your task runs on. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: ECSClientTypes.LaunchType?
        /// The amount of memory (in MiB) that the task uses as expressed in a task definition. It can be expressed as an integer using MiB (for example, 1024). If it's expressed as a string using GB (for example, 1GB or 1 GB), it's converted to an integer indicating the MiB when the task definition is registered. If you use the EC2 launch type, this field is optional. If you use the Fargate launch type, this field is required. You must use one of the following values. The value that you choose determines the range of supported values for the cpu parameter.
        ///
        /// * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)
        ///
        /// * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)
        ///
        /// * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
        ///
        /// * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)
        ///
        /// * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)
        ///
        /// * Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.
        ///
        /// * Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
        public var memory: Swift.String?
        /// One or more container overrides.
        public var overrides: ECSClientTypes.TaskOverride?
        /// The operating system that your tasks are running on. A platform family is specified only for tasks that use the Fargate launch type. All tasks that run as part of this service must use the same platformFamily value as the service (for example, LINUX.).
        public var platformFamily: Swift.String?
        /// The platform version where your task runs on. A platform version is only specified for tasks that use the Fargate launch type. If you didn't specify one, the LATEST platform version is used. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// The Unix timestamp for the time when the container image pull began.
        public var pullStartedAt: Foundation.Date?
        /// The Unix timestamp for the time when the container image pull completed.
        public var pullStoppedAt: Foundation.Date?
        /// The Unix timestamp for the time when the task started. More specifically, it's for the time when the task transitioned from the PENDING state to the RUNNING state.
        public var startedAt: Foundation.Date?
        /// The tag specified when a task is started. If an Amazon ECS service started the task, the startedBy parameter contains the deployment ID of that service.
        public var startedBy: Swift.String?
        /// The stop code indicating why a task was stopped. The stoppedReason might contain additional details. For more information about stop code, see [Stopped tasks error codes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/stopped-task-error-codes.html) in the Amazon ECS Developer Guide.
        public var stopCode: ECSClientTypes.TaskStopCode?
        /// The Unix timestamp for the time when the task was stopped. More specifically, it's for the time when the task transitioned from the RUNNING state to the STOPPED state.
        public var stoppedAt: Foundation.Date?
        /// The reason that the task was stopped.
        public var stoppedReason: Swift.String?
        /// The Unix timestamp for the time when the task stops. More specifically, it's for the time when the task transitions from the RUNNING state to STOPPING.
        public var stoppingAt: Foundation.Date?
        /// The metadata that you apply to the task to help you categorize and organize the task. Each tag consists of a key and an optional value. You define both the key and value. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [ECSClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the task.
        public var taskArn: Swift.String?
        /// The ARN of the task definition that creates the task.
        public var taskDefinitionArn: Swift.String?
        /// The version counter for the task. Every time a task experiences a change that starts a CloudWatch event, the version counter is incremented. If you replicate your Amazon ECS task state with CloudWatch Events, you can compare the version of a task reported by the Amazon ECS API actions with the version reported in CloudWatch Events for the task (inside the detail object) to verify that the version in your event stream is current.
        public var version: Swift.Int

        public init(
            attachments: [ECSClientTypes.Attachment]? = nil,
            attributes: [ECSClientTypes.Attribute]? = nil,
            availabilityZone: Swift.String? = nil,
            capacityProviderName: Swift.String? = nil,
            clusterArn: Swift.String? = nil,
            connectivity: ECSClientTypes.Connectivity? = nil,
            connectivityAt: Foundation.Date? = nil,
            containerInstanceArn: Swift.String? = nil,
            containers: [ECSClientTypes.Container]? = nil,
            cpu: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            desiredStatus: Swift.String? = nil,
            enableExecuteCommand: Swift.Bool = false,
            ephemeralStorage: ECSClientTypes.EphemeralStorage? = nil,
            executionStoppedAt: Foundation.Date? = nil,
            fargateEphemeralStorage: ECSClientTypes.TaskEphemeralStorage? = nil,
            group: Swift.String? = nil,
            healthStatus: ECSClientTypes.HealthStatus? = nil,
            inferenceAccelerators: [ECSClientTypes.InferenceAccelerator]? = nil,
            lastStatus: Swift.String? = nil,
            launchType: ECSClientTypes.LaunchType? = nil,
            memory: Swift.String? = nil,
            overrides: ECSClientTypes.TaskOverride? = nil,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            pullStartedAt: Foundation.Date? = nil,
            pullStoppedAt: Foundation.Date? = nil,
            startedAt: Foundation.Date? = nil,
            startedBy: Swift.String? = nil,
            stopCode: ECSClientTypes.TaskStopCode? = nil,
            stoppedAt: Foundation.Date? = nil,
            stoppedReason: Swift.String? = nil,
            stoppingAt: Foundation.Date? = nil,
            tags: [ECSClientTypes.Tag]? = nil,
            taskArn: Swift.String? = nil,
            taskDefinitionArn: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.attachments = attachments
            self.attributes = attributes
            self.availabilityZone = availabilityZone
            self.capacityProviderName = capacityProviderName
            self.clusterArn = clusterArn
            self.connectivity = connectivity
            self.connectivityAt = connectivityAt
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.cpu = cpu
            self.createdAt = createdAt
            self.desiredStatus = desiredStatus
            self.enableExecuteCommand = enableExecuteCommand
            self.ephemeralStorage = ephemeralStorage
            self.executionStoppedAt = executionStoppedAt
            self.fargateEphemeralStorage = fargateEphemeralStorage
            self.group = group
            self.healthStatus = healthStatus
            self.inferenceAccelerators = inferenceAccelerators
            self.lastStatus = lastStatus
            self.launchType = launchType
            self.memory = memory
            self.overrides = overrides
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.pullStartedAt = pullStartedAt
            self.pullStoppedAt = pullStoppedAt
            self.startedAt = startedAt
            self.startedBy = startedBy
            self.stopCode = stopCode
            self.stoppedAt = stoppedAt
            self.stoppedReason = stoppedReason
            self.stoppingAt = stoppingAt
            self.tags = tags
            self.taskArn = taskArn
            self.taskDefinitionArn = taskDefinitionArn
            self.version = version
        }
    }
}

public struct DescribeTasksOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// The list of tasks.
    public var tasks: [ECSClientTypes.Task]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        tasks: [ECSClientTypes.Task]? = nil
    )
    {
        self.failures = failures
        self.tasks = tasks
    }
}

extension ECSClientTypes {

    public enum TaskSetField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tags
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskSetField] {
            return [
                .tags
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tags: return "TAGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTaskSetsInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task sets exist in.
    /// This member is required.
    public var cluster: Swift.String?
    /// Specifies whether to see the resource tags for the task set. If TAGS is specified, the tags are included in the response. If this field is omitted, tags aren't included in the response.
    public var include: [ECSClientTypes.TaskSetField]?
    /// The short name or full Amazon Resource Name (ARN) of the service that the task sets exist in.
    /// This member is required.
    public var service: Swift.String?
    /// The ID or full Amazon Resource Name (ARN) of task sets to describe.
    public var taskSets: [Swift.String]?

    public init(
        cluster: Swift.String? = nil,
        include: [ECSClientTypes.TaskSetField]? = nil,
        service: Swift.String? = nil,
        taskSets: [Swift.String]? = nil
    )
    {
        self.cluster = cluster
        self.include = include
        self.service = service
        self.taskSets = taskSets
    }
}

public struct DescribeTaskSetsOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// The list of task sets described.
    public var taskSets: [ECSClientTypes.TaskSet]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        taskSets: [ECSClientTypes.TaskSet]? = nil
    )
    {
        self.failures = failures
        self.taskSets = taskSets
    }
}

public struct DiscoverPollEndpointInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that the container instance belongs to.
    public var cluster: Swift.String?
    /// The container instance ID or full ARN of the container instance. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
    public var containerInstance: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        containerInstance: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.containerInstance = containerInstance
    }
}

public struct DiscoverPollEndpointOutput: Swift.Sendable {
    /// The endpoint for the Amazon ECS agent to poll.
    public var endpoint: Swift.String?
    /// The endpoint for the Amazon ECS agent to poll for Service Connect configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public var serviceConnectEndpoint: Swift.String?
    /// The telemetry endpoint for the Amazon ECS agent.
    public var telemetryEndpoint: Swift.String?

    public init(
        endpoint: Swift.String? = nil,
        serviceConnectEndpoint: Swift.String? = nil,
        telemetryEndpoint: Swift.String? = nil
    )
    {
        self.endpoint = endpoint
        self.serviceConnectEndpoint = serviceConnectEndpoint
        self.telemetryEndpoint = telemetryEndpoint
    }
}

/// The execute command cannot run. This error can be caused by any of the following configuration issues:
///
/// * Incorrect IAM permissions
///
/// * The SSM agent is not installed or is not running
///
/// * There is an interface Amazon VPC endpoint for Amazon ECS, but there is not one for Systems Manager Session Manager
///
///
/// For information about how to troubleshoot the issues, see [Troubleshooting issues with ECS Exec](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html) in the Amazon Elastic Container Service Developer Guide.
public struct TargetNotConnectedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetNotConnectedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ExecuteCommandInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) or short name of the cluster the task is running in. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The command to run on the container.
    /// This member is required.
    public var command: Swift.String?
    /// The name of the container to execute the command on. A container name only needs to be specified for tasks containing multiple containers.
    public var container: Swift.String?
    /// Use this flag to run your command in interactive mode.
    /// This member is required.
    public var interactive: Swift.Bool?
    /// The Amazon Resource Name (ARN) or ID of the task the container is part of.
    /// This member is required.
    public var task: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        command: Swift.String? = nil,
        container: Swift.String? = nil,
        interactive: Swift.Bool? = false,
        task: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.command = command
        self.container = container
        self.interactive = interactive
        self.task = task
    }
}

extension ECSClientTypes {

    /// The details for the execute command session.
    public struct Session: Swift.Sendable {
        /// The ID of the execute command session.
        public var sessionId: Swift.String?
        /// A URL to the managed agent on the container that the SSM Session Manager client uses to send commands and receive output from the container.
        public var streamUrl: Swift.String?
        /// An encrypted token value containing session and caller information. It's used to authenticate the connection to the container.
        public var tokenValue: Swift.String?

        public init(
            sessionId: Swift.String? = nil,
            streamUrl: Swift.String? = nil,
            tokenValue: Swift.String? = nil
        )
        {
            self.sessionId = sessionId
            self.streamUrl = streamUrl
            self.tokenValue = tokenValue
        }
    }
}

extension ECSClientTypes.Session: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Session(sessionId: \(Swift.String(describing: sessionId)), streamUrl: \(Swift.String(describing: streamUrl)), tokenValue: \"CONTENT_REDACTED\")"}
}

public struct ExecuteCommandOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the cluster.
    public var clusterArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the container.
    public var containerArn: Swift.String?
    /// The name of the container.
    public var containerName: Swift.String?
    /// Determines whether the execute command session is running in interactive mode. Amazon ECS only supports initiating interactive sessions, so you must specify true for this value.
    public var interactive: Swift.Bool
    /// The details of the SSM session that was created for this instance of execute-command.
    public var session: ECSClientTypes.Session?
    /// The Amazon Resource Name (ARN) of the task.
    public var taskArn: Swift.String?

    public init(
        clusterArn: Swift.String? = nil,
        containerArn: Swift.String? = nil,
        containerName: Swift.String? = nil,
        interactive: Swift.Bool = false,
        session: ECSClientTypes.Session? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.containerArn = containerArn
        self.containerName = containerName
        self.interactive = interactive
        self.session = session
        self.taskArn = taskArn
    }
}

/// The specified resource wasn't found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetTaskProtectionInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task sets exist in.
    /// This member is required.
    public var cluster: Swift.String?
    /// A list of up to 100 task IDs or full ARN entries.
    public var tasks: [Swift.String]?

    public init(
        cluster: Swift.String? = nil,
        tasks: [Swift.String]? = nil
    )
    {
        self.cluster = cluster
        self.tasks = tasks
    }
}

extension ECSClientTypes {

    /// An object representing the protection status details for a task. You can set the protection status with the [UpdateTaskProtection](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_UpdateTaskProtection.html) API and get the status of tasks with the [GetTaskProtection](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_GetTaskProtection.html) API.
    public struct ProtectedTask: Swift.Sendable {
        /// The epoch time when protection for the task will expire.
        public var expirationDate: Foundation.Date?
        /// The protection status of the task. If scale-in protection is on for a task, the value is true. Otherwise, it is false.
        public var protectionEnabled: Swift.Bool
        /// The task ARN.
        public var taskArn: Swift.String?

        public init(
            expirationDate: Foundation.Date? = nil,
            protectionEnabled: Swift.Bool = false,
            taskArn: Swift.String? = nil
        )
        {
            self.expirationDate = expirationDate
            self.protectionEnabled = protectionEnabled
            self.taskArn = taskArn
        }
    }
}

public struct GetTaskProtectionOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// A list of tasks with the following information.
    ///
    /// * taskArn: The task ARN.
    ///
    /// * protectionEnabled: The protection status of the task. If scale-in protection is turned on for a task, the value is true. Otherwise, it is false.
    ///
    /// * expirationDate: The epoch time when protection for the task will expire.
    public var protectedTasks: [ECSClientTypes.ProtectedTask]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        protectedTasks: [ECSClientTypes.ProtectedTask]? = nil
    )
    {
        self.failures = failures
        self.protectedTasks = protectedTasks
    }
}

public struct ListAccountSettingsInput: Swift.Sendable {
    /// Determines whether to return the effective settings. If true, the account settings for the root user or the default setting for the principalArn are returned. If false, the account settings for the principalArn are returned if they're set. Otherwise, no account settings are returned.
    public var effectiveSettings: Swift.Bool?
    /// The maximum number of account setting results returned by ListAccountSettings in paginated output. When this parameter is used, ListAccountSettings only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListAccountSettings request with the returned nextToken value. This value can be between 1 and 10. If this parameter isn't used, then ListAccountSettings returns up to 10 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The name of the account setting you want to list the settings for.
    public var name: ECSClientTypes.SettingName?
    /// The nextToken value returned from a ListAccountSettings request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it's possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The ARN of the principal, which can be a user, role, or the root user. If this field is omitted, the account settings are listed only for the authenticated user. Federated users assume the account setting of the root user and can't have explicit account settings set for them.
    public var principalArn: Swift.String?
    /// The value of the account settings to filter results with. You must also specify an account setting name to use this parameter.
    public var value: Swift.String?

    public init(
        effectiveSettings: Swift.Bool? = false,
        maxResults: Swift.Int? = 0,
        name: ECSClientTypes.SettingName? = nil,
        nextToken: Swift.String? = nil,
        principalArn: Swift.String? = nil,
        value: Swift.String? = nil
    )
    {
        self.effectiveSettings = effectiveSettings
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.principalArn = principalArn
        self.value = value
    }
}

public struct ListAccountSettingsOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListAccountSettings request. When the results of a ListAccountSettings request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// The account settings for the resource.
    public var settings: [ECSClientTypes.Setting]?

    public init(
        nextToken: Swift.String? = nil,
        settings: [ECSClientTypes.Setting]? = nil
    )
    {
        self.nextToken = nextToken
        self.settings = settings
    }
}

public struct ListAttributesInput: Swift.Sendable {
    /// The name of the attribute to filter the results with.
    public var attributeName: Swift.String?
    /// The value of the attribute to filter results with. You must also specify an attribute name to use this parameter.
    public var attributeValue: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the cluster to list attributes. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The maximum number of cluster results that ListAttributes returned in paginated output. When this parameter is used, ListAttributes only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListAttributes request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListAttributes returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListAttributes request indicating that more results are available to fulfill the request and further calls are needed. If maxResults was provided, it's possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The type of the target to list attributes with.
    /// This member is required.
    public var targetType: ECSClientTypes.TargetType?

    public init(
        attributeName: Swift.String? = nil,
        attributeValue: Swift.String? = nil,
        cluster: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        targetType: ECSClientTypes.TargetType? = nil
    )
    {
        self.attributeName = attributeName
        self.attributeValue = attributeValue
        self.cluster = cluster
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.targetType = targetType
    }
}

public struct ListAttributesOutput: Swift.Sendable {
    /// A list of attribute objects that meet the criteria of the request.
    public var attributes: [ECSClientTypes.Attribute]?
    /// The nextToken value to include in a future ListAttributes request. When the results of a ListAttributes request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        attributes: [ECSClientTypes.Attribute]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.nextToken = nextToken
    }
}

public struct ListClustersInput: Swift.Sendable {
    /// The maximum number of cluster results that ListClusters returned in paginated output. When this parameter is used, ListClusters only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListClusters request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListClusters returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListClusters request indicating that more results are available to fulfill the request and further calls are needed. If maxResults was provided, it's possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListClustersOutput: Swift.Sendable {
    /// The list of full Amazon Resource Name (ARN) entries for each cluster that's associated with your account.
    public var clusterArns: [Swift.String]?
    /// The nextToken value to include in a future ListClusters request. When the results of a ListClusters request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        clusterArns: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterArns = clusterArns
        self.nextToken = nextToken
    }
}

extension ECSClientTypes {

    public enum ContainerInstanceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deregistering
        case draining
        case registering
        case registrationFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerInstanceStatus] {
            return [
                .active,
                .deregistering,
                .draining,
                .registering,
                .registrationFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deregistering: return "DEREGISTERING"
            case .draining: return "DRAINING"
            case .registering: return "REGISTERING"
            case .registrationFailed: return "REGISTRATION_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListContainerInstancesInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to list. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// You can filter the results of a ListContainerInstances operation with cluster query language statements. For more information, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
    public var filter: Swift.String?
    /// The maximum number of container instance results that ListContainerInstances returned in paginated output. When this parameter is used, ListContainerInstances only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListContainerInstances request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListContainerInstances returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListContainerInstances request indicating that more results are available to fulfill the request and further calls are needed. If maxResults was provided, it's possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// Filters the container instances by status. For example, if you specify the DRAINING status, the results include only container instances that have been set to DRAINING using [UpdateContainerInstancesState](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_UpdateContainerInstancesState.html). If you don't specify this parameter, the default is to include container instances set to all states other than INACTIVE.
    public var status: ECSClientTypes.ContainerInstanceStatus?

    public init(
        cluster: Swift.String? = nil,
        filter: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: ECSClientTypes.ContainerInstanceStatus? = nil
    )
    {
        self.cluster = cluster
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

public struct ListContainerInstancesOutput: Swift.Sendable {
    /// The list of container instances with full ARN entries for each container instance associated with the specified cluster.
    public var containerInstanceArns: [Swift.String]?
    /// The nextToken value to include in a future ListContainerInstances request. When the results of a ListContainerInstances request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        containerInstanceArns: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.containerInstanceArns = containerInstanceArns
        self.nextToken = nextToken
    }
}

extension ECSClientTypes {

    /// The optional filter to narrow the ListServiceDeployment results. If you do not specify a value, service deployments that were created before the current time are included in the result.
    public struct CreatedAt: Swift.Sendable {
        /// Include service deployments in the result that were created after this time. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var after: Foundation.Date?
        /// Include service deployments in the result that were created before this time. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var before: Foundation.Date?

        public init(
            after: Foundation.Date? = nil,
            before: Foundation.Date? = nil
        )
        {
            self.after = after
            self.before = before
        }
    }
}

public struct ListServiceDeploymentsInput: Swift.Sendable {
    /// The cluster that hosts the service. This can either be the cluster name or ARN. Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performanceIf you don't specify a cluster, deault is used.
    public var cluster: Swift.String?
    /// An optional filter you can use to narrow the results by the service creation date. If you do not specify a value, the result includes all services created before the current time. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
    public var createdAt: ECSClientTypes.CreatedAt?
    /// The maximum number of service deployment results that ListServiceDeployments returned in paginated output. When this parameter is used, ListServiceDeployments only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListServiceDeployments request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListServiceDeployments returns up to 20 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListServiceDeployments request indicating that more results are available to fulfill the request and further calls are needed. If you provided maxResults, it's possible the number of results is fewer than maxResults.
    public var nextToken: Swift.String?
    /// The ARN or name of the service
    /// This member is required.
    public var service: Swift.String?
    /// An optional filter you can use to narrow the results. If you do not specify a status, then all status values are included in the result.
    public var status: [ECSClientTypes.ServiceDeploymentStatus]?

    public init(
        cluster: Swift.String? = nil,
        createdAt: ECSClientTypes.CreatedAt? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        service: Swift.String? = nil,
        status: [ECSClientTypes.ServiceDeploymentStatus]? = nil
    )
    {
        self.cluster = cluster
        self.createdAt = createdAt
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.service = service
        self.status = status
    }
}

extension ECSClientTypes {

    /// The service deployment properties that are retured when you call ListServiceDeployments. This provides a high-level overview of the service deployment.
    public struct ServiceDeploymentBrief: Swift.Sendable {
        /// The ARN of the cluster that hosts the service.
        public var clusterArn: Swift.String?
        /// The time that the service deployment was created. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var createdAt: Foundation.Date?
        /// The time that the service deployment completed. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var finishedAt: Foundation.Date?
        /// The ARN of the service for this service deployment.
        public var serviceArn: Swift.String?
        /// The ARN of the service deployment.
        public var serviceDeploymentArn: Swift.String?
        /// The time that the service deployment statred. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.
        public var startedAt: Foundation.Date?
        /// The status of the service deployment
        public var status: ECSClientTypes.ServiceDeploymentStatus?
        /// Information about why the service deployment is in the current status. For example, the circuit breaker detected a deployment failure.
        public var statusReason: Swift.String?
        /// The ARN of the service revision being deplyed.
        public var targetServiceRevisionArn: Swift.String?

        public init(
            clusterArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            finishedAt: Foundation.Date? = nil,
            serviceArn: Swift.String? = nil,
            serviceDeploymentArn: Swift.String? = nil,
            startedAt: Foundation.Date? = nil,
            status: ECSClientTypes.ServiceDeploymentStatus? = nil,
            statusReason: Swift.String? = nil,
            targetServiceRevisionArn: Swift.String? = nil
        )
        {
            self.clusterArn = clusterArn
            self.createdAt = createdAt
            self.finishedAt = finishedAt
            self.serviceArn = serviceArn
            self.serviceDeploymentArn = serviceDeploymentArn
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.targetServiceRevisionArn = targetServiceRevisionArn
        }
    }
}

public struct ListServiceDeploymentsOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListServiceDeployments request. When the results of a ListServiceDeployments request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// An overview of the service deployment, including the following properties:
    ///
    /// * The ARN of the service deployment.
    ///
    /// * The ARN of the service being deployed.
    ///
    /// * The ARN of the cluster that hosts the service in the service deployment.
    ///
    /// * The time that the service deployment started.
    ///
    /// * The time that the service deployment completed.
    ///
    /// * The service deployment status.
    ///
    /// * Information about why the service deployment is in the current state.
    ///
    /// * The ARN of the service revision that is being deployed.
    public var serviceDeployments: [ECSClientTypes.ServiceDeploymentBrief]?

    public init(
        nextToken: Swift.String? = nil,
        serviceDeployments: [ECSClientTypes.ServiceDeploymentBrief]? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceDeployments = serviceDeployments
    }
}

public struct ListServicesInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the ListServices results. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The launch type to use when filtering the ListServices results.
    public var launchType: ECSClientTypes.LaunchType?
    /// The maximum number of service results that ListServices returned in paginated output. When this parameter is used, ListServices only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListServices request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListServices returns up to 10 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListServices request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The scheduling strategy to use when filtering the ListServices results.
    public var schedulingStrategy: ECSClientTypes.SchedulingStrategy?

    public init(
        cluster: Swift.String? = nil,
        launchType: ECSClientTypes.LaunchType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        schedulingStrategy: ECSClientTypes.SchedulingStrategy? = nil
    )
    {
        self.cluster = cluster
        self.launchType = launchType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.schedulingStrategy = schedulingStrategy
    }
}

public struct ListServicesOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListServices request. When the results of a ListServices request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// The list of full ARN entries for each service that's associated with the specified cluster.
    public var serviceArns: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        serviceArns: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceArns = serviceArns
    }
}

public struct ListServicesByNamespaceInput: Swift.Sendable {
    /// The maximum number of service results that ListServicesByNamespace returns in paginated output. When this parameter is used, ListServicesByNamespace only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListServicesByNamespace request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListServicesByNamespace returns up to 10 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace to list the services in. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    /// This member is required.
    public var namespace: Swift.String?
    /// The nextToken value that's returned from a ListServicesByNamespace request. It indicates that more results are available to fulfill the request and further calls are needed. If maxResults is returned, it is possible the number of results is less than maxResults.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.namespace = namespace
        self.nextToken = nextToken
    }
}

public struct ListServicesByNamespaceOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListServicesByNamespace request. When the results of a ListServicesByNamespace request exceed maxResults, this value can be used to retrieve the next page of results. When there are no more results to return, this value is null.
    public var nextToken: Swift.String?
    /// The list of full ARN entries for each service that's associated with the specified namespace.
    public var serviceArns: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        serviceArns: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceArns = serviceArns
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon ECS tasks, services, task definitions, clusters, and container instances.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags for the resource.
    public var tags: [ECSClientTypes.Tag]?

    public init(
        tags: [ECSClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension ECSClientTypes {

    public enum TaskDefinitionFamilyStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case all
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskDefinitionFamilyStatus] {
            return [
                .active,
                .all,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .all: return "ALL"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListTaskDefinitionFamiliesInput: Swift.Sendable {
    /// The familyPrefix is a string that's used to filter the results of ListTaskDefinitionFamilies. If you specify a familyPrefix, only task definition family names that begin with the familyPrefix string are returned.
    public var familyPrefix: Swift.String?
    /// The maximum number of task definition family results that ListTaskDefinitionFamilies returned in paginated output. When this parameter is used, ListTaskDefinitions only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListTaskDefinitionFamilies request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListTaskDefinitionFamilies returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListTaskDefinitionFamilies request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The task definition family status to filter the ListTaskDefinitionFamilies results with. By default, both ACTIVE and INACTIVE task definition families are listed. If this parameter is set to ACTIVE, only task definition families that have an ACTIVE task definition revision are returned. If this parameter is set to INACTIVE, only task definition families that do not have any ACTIVE task definition revisions are returned. If you paginate the resulting output, be sure to keep the status value constant in each subsequent request.
    public var status: ECSClientTypes.TaskDefinitionFamilyStatus?

    public init(
        familyPrefix: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: ECSClientTypes.TaskDefinitionFamilyStatus? = nil
    )
    {
        self.familyPrefix = familyPrefix
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

public struct ListTaskDefinitionFamiliesOutput: Swift.Sendable {
    /// The list of task definition family names that match the ListTaskDefinitionFamilies request.
    public var families: [Swift.String]?
    /// The nextToken value to include in a future ListTaskDefinitionFamilies request. When the results of a ListTaskDefinitionFamilies request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        families: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.families = families
        self.nextToken = nextToken
    }
}

extension ECSClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .asc,
                .desc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "ASC"
            case .desc: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListTaskDefinitionsInput: Swift.Sendable {
    /// The full family name to filter the ListTaskDefinitions results with. Specifying a familyPrefix limits the listed task definitions to task definition revisions that belong to that family.
    public var familyPrefix: Swift.String?
    /// The maximum number of task definition results that ListTaskDefinitions returned in paginated output. When this parameter is used, ListTaskDefinitions only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListTaskDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListTaskDefinitions returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListTaskDefinitions request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it is possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The order to sort the results in. Valid values are ASC and DESC. By default, (ASC) task definitions are listed lexicographically by family name and in ascending numerical order by revision so that the newest task definitions in a family are listed last. Setting this parameter to DESC reverses the sort order on family name and revision. This is so that the newest task definitions in a family are listed first.
    public var sort: ECSClientTypes.SortOrder?
    /// The task definition status to filter the ListTaskDefinitions results with. By default, only ACTIVE task definitions are listed. By setting this parameter to INACTIVE, you can view task definitions that are INACTIVE as long as an active task or service still references them. If you paginate the resulting output, be sure to keep the status value constant in each subsequent request.
    public var status: ECSClientTypes.TaskDefinitionStatus?

    public init(
        familyPrefix: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sort: ECSClientTypes.SortOrder? = nil,
        status: ECSClientTypes.TaskDefinitionStatus? = nil
    )
    {
        self.familyPrefix = familyPrefix
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sort = sort
        self.status = status
    }
}

public struct ListTaskDefinitionsOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListTaskDefinitions request. When the results of a ListTaskDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// The list of task definition Amazon Resource Name (ARN) entries for the ListTaskDefinitions request.
    public var taskDefinitionArns: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        taskDefinitionArns: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.taskDefinitionArns = taskDefinitionArns
    }
}

extension ECSClientTypes {

    public enum DesiredStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pending
        case running
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [DesiredStatus] {
            return [
                .pending,
                .running,
                .stopped
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListTasksInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the ListTasks results. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The container instance ID or full ARN of the container instance to use when filtering the ListTasks results. Specifying a containerInstance limits the results to tasks that belong to that container instance.
    public var containerInstance: Swift.String?
    /// The task desired status to use when filtering the ListTasks results. Specifying a desiredStatus of STOPPED limits the results to tasks that Amazon ECS has set the desired status to STOPPED. This can be useful for debugging tasks that aren't starting properly or have died or finished. The default status filter is RUNNING, which shows tasks that Amazon ECS has set the desired status to RUNNING. Although you can filter results based on a desired status of PENDING, this doesn't return any results. Amazon ECS never sets the desired status of a task to that value (only a task's lastStatus may have a value of PENDING).
    public var desiredStatus: ECSClientTypes.DesiredStatus?
    /// The name of the task definition family to use when filtering the ListTasks results. Specifying a family limits the results to tasks that belong to that family.
    public var family: Swift.String?
    /// The launch type to use when filtering the ListTasks results.
    public var launchType: ECSClientTypes.LaunchType?
    /// The maximum number of task results that ListTasks returned in paginated output. When this parameter is used, ListTasks only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListTasks request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListTasks returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a ListTasks request indicating that more results are available to fulfill the request and further calls will be needed. If maxResults was provided, it's possible the number of results to be fewer than maxResults. This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The name of the service to use when filtering the ListTasks results. Specifying a serviceName limits the results to tasks that belong to that service.
    public var serviceName: Swift.String?
    /// The startedBy value to filter the task results with. Specifying a startedBy value limits the results to tasks that were started with that value. When you specify startedBy as the filter, it must be the only filter that you use.
    public var startedBy: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        containerInstance: Swift.String? = nil,
        desiredStatus: ECSClientTypes.DesiredStatus? = nil,
        family: Swift.String? = nil,
        launchType: ECSClientTypes.LaunchType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        startedBy: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.containerInstance = containerInstance
        self.desiredStatus = desiredStatus
        self.family = family
        self.launchType = launchType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceName = serviceName
        self.startedBy = startedBy
    }
}

public struct ListTasksOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListTasks request. When the results of a ListTasks request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// The list of task ARN entries for the ListTasks request.
    public var taskArns: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        taskArns: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.taskArns = taskArns
    }
}

public struct PutAccountSettingInput: Swift.Sendable {
    /// The Amazon ECS account setting name to modify. The following are the valid values for the account setting name.
    ///
    /// * serviceLongArnFormat - When modified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.
    ///
    /// * taskLongArnFormat - When modified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.
    ///
    /// * containerInstanceLongArnFormat - When modified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.
    ///
    /// * awsvpcTrunking - When modified, the elastic network interface (ENI) limit for any new container instances that support the feature is changed. If awsvpcTrunking is turned on, any new container instances that support the feature are launched have the increased ENI limits available to them. For more information, see [Elastic Network Interface Trunking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html) in the Amazon Elastic Container Service Developer Guide.
    ///
    /// * containerInsights - When modified, the default setting indicating whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed. If containerInsights is turned on, any new clusters that are created will have Container Insights turned on unless you disable it during cluster creation. For more information, see [CloudWatch Container Insights](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html) in the Amazon Elastic Container Service Developer Guide.
    ///
    /// * dualStackIPv6 - When turned on, when using a VPC in dual stack mode, your tasks using the awsvpc network mode can have an IPv6 address assigned. For more information on using IPv6 with tasks launched on Amazon EC2 instances, see [Using a VPC in dual-stack mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking-awsvpc.html#task-networking-vpc-dual-stack). For more information on using IPv6 with tasks launched on Fargate, see [Using a VPC in dual-stack mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html#fargate-task-networking-vpc-dual-stack).
    ///
    /// * fargateTaskRetirementWaitPeriod - When Amazon Web Services determines that a security or infrastructure update is needed for an Amazon ECS task hosted on Fargate, the tasks need to be stopped and new tasks launched to replace them. Use fargateTaskRetirementWaitPeriod to configure the wait time to retire a Fargate task. For information about the Fargate tasks maintenance, see [Amazon Web Services Fargate task maintenance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-maintenance.html) in the Amazon ECS Developer Guide.
    ///
    /// * tagResourceAuthorization - Amazon ECS is introducing tagging authorization for resource creation. Users must have permissions for actions that create the resource, such as ecsCreateCluster. If tags are specified when you create a resource, Amazon Web Services performs additional authorization to verify if users or roles have permissions to create tags. Therefore, you must grant explicit permissions to use the ecs:TagResource action. For more information, see [Grant permission to tag resources on creation](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html) in the Amazon ECS Developer Guide.
    ///
    /// * guardDutyActivate - The guardDutyActivate parameter is read-only in Amazon ECS and indicates whether Amazon ECS Runtime Monitoring is enabled or disabled by your security administrator in your Amazon ECS account. Amazon GuardDuty controls this account setting on your behalf. For more information, see [Protecting Amazon ECS workloads with Amazon ECS Runtime Monitoring](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-guard-duty-integration.html).
    /// This member is required.
    public var name: ECSClientTypes.SettingName?
    /// The ARN of the principal, which can be a user, role, or the root user. If you specify the root user, it modifies the account setting for all users, roles, and the root user of the account unless a user or role explicitly overrides these settings. If this field is omitted, the setting is changed only for the authenticated user. You must use the root user when you set the Fargate wait time (fargateTaskRetirementWaitPeriod). Federated users assume the account setting of the root user and can't have explicit account settings set for them.
    public var principalArn: Swift.String?
    /// The account setting value for the specified principal ARN. Accepted values are enabled, disabled, on, and off. When you specify fargateTaskRetirementWaitPeriod for the name, the following are the valid values:
    ///
    /// * 0 - Amazon Web Services sends the notification, and immediately retires the affected tasks.
    ///
    /// * 7 - Amazon Web Services sends the notification, and waits 7 calendar days to retire the tasks.
    ///
    /// * 14 - Amazon Web Services sends the notification, and waits 14 calendar days to retire the tasks.
    /// This member is required.
    public var value: Swift.String?

    public init(
        name: ECSClientTypes.SettingName? = nil,
        principalArn: Swift.String? = nil,
        value: Swift.String? = nil
    )
    {
        self.name = name
        self.principalArn = principalArn
        self.value = value
    }
}

public struct PutAccountSettingOutput: Swift.Sendable {
    /// The current account setting for a resource.
    public var setting: ECSClientTypes.Setting?

    public init(
        setting: ECSClientTypes.Setting? = nil
    )
    {
        self.setting = setting
    }
}

public struct PutAccountSettingDefaultInput: Swift.Sendable {
    /// The resource name for which to modify the account setting. The following are the valid values for the account setting name.
    ///
    /// * serviceLongArnFormat - When modified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.
    ///
    /// * taskLongArnFormat - When modified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.
    ///
    /// * containerInstanceLongArnFormat - When modified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified user, role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource is defined by the opt-in status of the user or role that created the resource. You must turn on this setting to use Amazon ECS features such as resource tagging.
    ///
    /// * awsvpcTrunking - When modified, the elastic network interface (ENI) limit for any new container instances that support the feature is changed. If awsvpcTrunking is turned on, any new container instances that support the feature are launched have the increased ENI limits available to them. For more information, see [Elastic Network Interface Trunking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html) in the Amazon Elastic Container Service Developer Guide.
    ///
    /// * containerInsights - When modified, the default setting indicating whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed. If containerInsights is turned on, any new clusters that are created will have Container Insights turned on unless you disable it during cluster creation. For more information, see [CloudWatch Container Insights](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html) in the Amazon Elastic Container Service Developer Guide.
    ///
    /// * dualStackIPv6 - When turned on, when using a VPC in dual stack mode, your tasks using the awsvpc network mode can have an IPv6 address assigned. For more information on using IPv6 with tasks launched on Amazon EC2 instances, see [Using a VPC in dual-stack mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking-awsvpc.html#task-networking-vpc-dual-stack). For more information on using IPv6 with tasks launched on Fargate, see [Using a VPC in dual-stack mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html#fargate-task-networking-vpc-dual-stack).
    ///
    /// * fargateFIPSMode - If you specify fargateFIPSMode, Fargate FIPS 140 compliance is affected.
    ///
    /// * fargateTaskRetirementWaitPeriod - When Amazon Web Services determines that a security or infrastructure update is needed for an Amazon ECS task hosted on Fargate, the tasks need to be stopped and new tasks launched to replace them. Use fargateTaskRetirementWaitPeriod to configure the wait time to retire a Fargate task. For information about the Fargate tasks maintenance, see [Amazon Web Services Fargate task maintenance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-maintenance.html) in the Amazon ECS Developer Guide.
    ///
    /// * tagResourceAuthorization - Amazon ECS is introducing tagging authorization for resource creation. Users must have permissions for actions that create the resource, such as ecsCreateCluster. If tags are specified when you create a resource, Amazon Web Services performs additional authorization to verify if users or roles have permissions to create tags. Therefore, you must grant explicit permissions to use the ecs:TagResource action. For more information, see [Grant permission to tag resources on creation](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html) in the Amazon ECS Developer Guide.
    ///
    /// * guardDutyActivate - The guardDutyActivate parameter is read-only in Amazon ECS and indicates whether Amazon ECS Runtime Monitoring is enabled or disabled by your security administrator in your Amazon ECS account. Amazon GuardDuty controls this account setting on your behalf. For more information, see [Protecting Amazon ECS workloads with Amazon ECS Runtime Monitoring](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-guard-duty-integration.html).
    /// This member is required.
    public var name: ECSClientTypes.SettingName?
    /// The account setting value for the specified principal ARN. Accepted values are enabled, disabled, on, and off. When you specify fargateTaskRetirementWaitPeriod for the name, the following are the valid values:
    ///
    /// * 0 - Amazon Web Services sends the notification, and immediately retires the affected tasks.
    ///
    /// * 7 - Amazon Web Services sends the notification, and waits 7 calendar days to retire the tasks.
    ///
    /// * 14 - Amazon Web Services sends the notification, and waits 14 calendar days to retire the tasks.
    /// This member is required.
    public var value: Swift.String?

    public init(
        name: ECSClientTypes.SettingName? = nil,
        value: Swift.String? = nil
    )
    {
        self.name = name
        self.value = value
    }
}

public struct PutAccountSettingDefaultOutput: Swift.Sendable {
    /// The current setting for a resource.
    public var setting: ECSClientTypes.Setting?

    public init(
        setting: ECSClientTypes.Setting? = nil
    )
    {
        self.setting = setting
    }
}

/// You can apply up to 10 custom attributes for each resource. You can view the attributes of a resource with [ListAttributes](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListAttributes.html). You can remove existing attributes on a resource with [DeleteAttributes](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteAttributes.html).
public struct AttributeLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AttributeLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutAttributesInput: Swift.Sendable {
    /// The attributes to apply to your resource. You can specify up to 10 custom attributes for each resource. You can specify up to 10 attributes in a single call.
    /// This member is required.
    public var attributes: [ECSClientTypes.Attribute]?
    /// The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to apply attributes. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?

    public init(
        attributes: [ECSClientTypes.Attribute]? = nil,
        cluster: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.cluster = cluster
    }
}

public struct PutAttributesOutput: Swift.Sendable {
    /// The attributes applied to your resource.
    public var attributes: [ECSClientTypes.Attribute]?

    public init(
        attributes: [ECSClientTypes.Attribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

/// The specified resource is in-use and can't be removed.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutClusterCapacityProvidersInput: Swift.Sendable {
    /// The name of one or more capacity providers to associate with the cluster. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.
    /// This member is required.
    public var capacityProviders: [Swift.String]?
    /// The short name or full Amazon Resource Name (ARN) of the cluster to modify the capacity provider settings for. If you don't specify a cluster, the default cluster is assumed.
    /// This member is required.
    public var cluster: Swift.String?
    /// The capacity provider strategy to use by default for the cluster. When creating a service or running a task on a cluster, if no capacity provider or launch type is specified then the default capacity provider strategy for the cluster is used. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html) API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the [CreateCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html) API operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.
    /// This member is required.
    public var defaultCapacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?

    public init(
        capacityProviders: [Swift.String]? = nil,
        cluster: Swift.String? = nil,
        defaultCapacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil
    )
    {
        self.capacityProviders = capacityProviders
        self.cluster = cluster
        self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
    }
}

public struct PutClusterCapacityProvidersOutput: Swift.Sendable {
    /// Details about the cluster.
    public var cluster: ECSClientTypes.Cluster?

    public init(
        cluster: ECSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

extension ECSClientTypes {

    public enum PlatformDeviceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gpu
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformDeviceType] {
            return [
                .gpu
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gpu: return "GPU"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ECSClientTypes {

    /// The devices that are available on the container instance. The only supported device type is a GPU.
    public struct PlatformDevice: Swift.Sendable {
        /// The ID for the GPUs on the container instance. The available GPU IDs can also be obtained on the container instance in the /var/lib/ecs/gpu/nvidia_gpu_info.json file.
        /// This member is required.
        public var id: Swift.String?
        /// The type of device that's available on the container instance. The only supported value is GPU.
        /// This member is required.
        public var type: ECSClientTypes.PlatformDeviceType?

        public init(
            id: Swift.String? = nil,
            type: ECSClientTypes.PlatformDeviceType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }
}

public struct RegisterContainerInstanceInput: Swift.Sendable {
    /// The container instance attributes that this container instance supports.
    public var attributes: [ECSClientTypes.Attribute]?
    /// The short name or full Amazon Resource Name (ARN) of the cluster to register your container instance with. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The ARN of the container instance (if it was previously registered).
    public var containerInstanceArn: Swift.String?
    /// The instance identity document for the EC2 instance to register. This document can be found by running the following command from the instance: curl http://169.254.169.254/latest/dynamic/instance-identity/document/
    public var instanceIdentityDocument: Swift.String?
    /// The instance identity document signature for the EC2 instance to register. This signature can be found by running the following command from the instance: curl http://169.254.169.254/latest/dynamic/instance-identity/signature/
    public var instanceIdentityDocumentSignature: Swift.String?
    /// The devices that are available on the container instance. The only supported device type is a GPU.
    public var platformDevices: [ECSClientTypes.PlatformDevice]?
    /// The metadata that you apply to the container instance to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The resources available on the instance.
    public var totalResources: [ECSClientTypes.Resource]?
    /// The version information for the Amazon ECS container agent and Docker daemon that runs on the container instance.
    public var versionInfo: ECSClientTypes.VersionInfo?

    public init(
        attributes: [ECSClientTypes.Attribute]? = nil,
        cluster: Swift.String? = nil,
        containerInstanceArn: Swift.String? = nil,
        instanceIdentityDocument: Swift.String? = nil,
        instanceIdentityDocumentSignature: Swift.String? = nil,
        platformDevices: [ECSClientTypes.PlatformDevice]? = nil,
        tags: [ECSClientTypes.Tag]? = nil,
        totalResources: [ECSClientTypes.Resource]? = nil,
        versionInfo: ECSClientTypes.VersionInfo? = nil
    )
    {
        self.attributes = attributes
        self.cluster = cluster
        self.containerInstanceArn = containerInstanceArn
        self.instanceIdentityDocument = instanceIdentityDocument
        self.instanceIdentityDocumentSignature = instanceIdentityDocumentSignature
        self.platformDevices = platformDevices
        self.tags = tags
        self.totalResources = totalResources
        self.versionInfo = versionInfo
    }
}

public struct RegisterContainerInstanceOutput: Swift.Sendable {
    /// The container instance that was registered.
    public var containerInstance: ECSClientTypes.ContainerInstance?

    public init(
        containerInstance: ECSClientTypes.ContainerInstance? = nil
    )
    {
        self.containerInstance = containerInstance
    }
}

public struct RegisterTaskDefinitionInput: Swift.Sendable {
    /// A list of container definitions in JSON format that describe the different containers that make up your task.
    /// This member is required.
    public var containerDefinitions: [ECSClientTypes.ContainerDefinition]?
    /// The number of CPU units used by the task. It can be expressed as an integer using CPU units (for example, 1024) or as a string using vCPUs (for example, 1 vCPU or 1 vcpu) in a task definition. String values are converted to an integer indicating the CPU units when the task definition is registered. Task-level CPU and memory parameters are ignored for Windows containers. We recommend specifying container-level resources for Windows containers. If you're using the EC2 launch type, this field is optional. Supported values are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs). If you do not specify a value, the parameter is ignored. If you're using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of supported values for the memory parameter: The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.
    ///
    /// * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
    ///
    /// * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)
    ///
    /// * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
    ///
    /// * 2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
    ///
    /// * 4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
    ///
    /// * 8192 (8 vCPU) - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.
    ///
    /// * 16384 (16vCPU) - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
    public var cpu: Swift.String?
    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the Amazon ECS Developer Guide. For tasks using the Fargate launch type, the task requires the following platforms:
    ///
    /// * Linux platform version 1.4.0 or later.
    ///
    /// * Windows platform version 1.0.0 or later.
    public var ephemeralStorage: ECSClientTypes.EphemeralStorage?
    /// The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make Amazon Web Services API calls on your behalf. For informationabout the required IAM roles for Amazon ECS, see [IAM roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html) in the Amazon Elastic Container Service Developer Guide.
    public var executionRoleArn: Swift.String?
    /// You must specify a family for a task definition. You can use it track multiple versions of the same task definition. The family is used as a name for your task definition. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
    /// This member is required.
    public var family: Swift.String?
    /// The Elastic Inference accelerators to use for the containers in the task.
    public var inferenceAccelerators: [ECSClientTypes.InferenceAccelerator]?
    /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference. If the host IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see [Docker security](https://docs.docker.com/engine/security/security/). If you are setting namespaced kernel parameters using systemControls for the containers in the task, the following will apply to your IPC resource namespace. For more information, see [System Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the Amazon Elastic Container Service Developer Guide.
    ///
    /// * For tasks that use the host IPC mode, IPC namespace related systemControls are not supported.
    ///
    /// * For tasks that use the task IPC mode, IPC namespace related systemControls will apply to all containers within a task.
    ///
    ///
    /// This parameter is not supported for Windows containers or tasks run on Fargate.
    public var ipcMode: ECSClientTypes.IpcMode?
    /// The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB (for example ,1024) or as a string using GB (for example, 1GB or 1 GB) in a task definition. String values are converted to an integer indicating the MiB when the task definition is registered. Task-level CPU and memory parameters are ignored for Windows containers. We recommend specifying container-level resources for Windows containers. If using the EC2 launch type, this field is optional. If using the Fargate launch type, this field is required and you must use one of the following values. This determines your range of supported values for the cpu parameter. The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.
    ///
    /// * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)
    ///
    /// * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)
    ///
    /// * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
    ///
    /// * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)
    ///
    /// * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)
    ///
    /// * Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.
    ///
    /// * Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
    public var memory: Swift.String?
    /// The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host. If no network mode is specified, the default is bridge. For Amazon ECS tasks on Fargate, the awsvpc network mode is required. For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances,  or awsvpc can be used. If the network mode is set to none, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The host and awsvpc network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the bridge mode. With the host and awsvpc network modes, exposed container ports are mapped directly to the corresponding host port (for the host network mode) or the attached elastic network interface port (for the awsvpc network mode), so you cannot take advantage of dynamic host port mappings. When using the host network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user. If the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a [NetworkConfiguration] value when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the Amazon Elastic Container Service Developer Guide. If the network mode is host, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used. For more information, see [Network settings](https://docs.docker.com/engine/reference/run/#network-settings) in the Docker run reference.
    public var networkMode: ECSClientTypes.NetworkMode?
    /// The process namespace to use for the containers in the task. The valid values are host or task. On Fargate for Linux containers, the only valid value is task. For example, monitoring sidecars might need pidMode to access information about other containers running in the same task. If host is specified, all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference. If the host PID mode is used, there's a heightened risk of undesired process namespace exposure. For more information, see [Docker security](https://docs.docker.com/engine/security/security/). This parameter is not supported for Windows containers. This parameter is only supported for tasks that are hosted on Fargate if the tasks are using platform version 1.4.0 or later (Linux). This isn't supported for Windows containers on Fargate.
    public var pidMode: ECSClientTypes.PidMode?
    /// An array of placement constraint objects to use for the task. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
    public var placementConstraints: [ECSClientTypes.TaskDefinitionPlacementConstraint]?
    /// The configuration details for the App Mesh proxy. For tasks hosted on Amazon EC2 instances, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ecs-init package to use a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version 20190301 or later, then they contain the required versions of the container agent and ecs-init. For more information, see [Amazon ECS-optimized AMI versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-ami-versions.html) in the Amazon Elastic Container Service Developer Guide.
    public var proxyConfiguration: ECSClientTypes.ProxyConfiguration?
    /// The task launch type that Amazon ECS validates the task definition against. A client exception is returned if the task definition doesn't validate against the compatibilities specified. If no value is specified, the parameter is omitted from the response.
    public var requiresCompatibilities: [ECSClientTypes.Compatibility]?
    /// The operating system that your tasks definitions run on. A platform family is specified only for tasks using the Fargate launch type.
    public var runtimePlatform: ECSClientTypes.RuntimePlatform?
    /// The metadata that you apply to the task definition to help you categorize and organize them. Each tag consists of a key and an optional value. You define both of them. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The short name or full Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role. For more information, see [IAM Roles for Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
    public var taskRoleArn: Swift.String?
    /// A list of volume definitions in JSON format that containers in your task might use.
    public var volumes: [ECSClientTypes.Volume]?

    public init(
        containerDefinitions: [ECSClientTypes.ContainerDefinition]? = nil,
        cpu: Swift.String? = nil,
        ephemeralStorage: ECSClientTypes.EphemeralStorage? = nil,
        executionRoleArn: Swift.String? = nil,
        family: Swift.String? = nil,
        inferenceAccelerators: [ECSClientTypes.InferenceAccelerator]? = nil,
        ipcMode: ECSClientTypes.IpcMode? = nil,
        memory: Swift.String? = nil,
        networkMode: ECSClientTypes.NetworkMode? = nil,
        pidMode: ECSClientTypes.PidMode? = nil,
        placementConstraints: [ECSClientTypes.TaskDefinitionPlacementConstraint]? = nil,
        proxyConfiguration: ECSClientTypes.ProxyConfiguration? = nil,
        requiresCompatibilities: [ECSClientTypes.Compatibility]? = nil,
        runtimePlatform: ECSClientTypes.RuntimePlatform? = nil,
        tags: [ECSClientTypes.Tag]? = nil,
        taskRoleArn: Swift.String? = nil,
        volumes: [ECSClientTypes.Volume]? = nil
    )
    {
        self.containerDefinitions = containerDefinitions
        self.cpu = cpu
        self.ephemeralStorage = ephemeralStorage
        self.executionRoleArn = executionRoleArn
        self.family = family
        self.inferenceAccelerators = inferenceAccelerators
        self.ipcMode = ipcMode
        self.memory = memory
        self.networkMode = networkMode
        self.pidMode = pidMode
        self.placementConstraints = placementConstraints
        self.proxyConfiguration = proxyConfiguration
        self.requiresCompatibilities = requiresCompatibilities
        self.runtimePlatform = runtimePlatform
        self.tags = tags
        self.taskRoleArn = taskRoleArn
        self.volumes = volumes
    }
}

public struct RegisterTaskDefinitionOutput: Swift.Sendable {
    /// The list of tags associated with the task definition.
    public var tags: [ECSClientTypes.Tag]?
    /// The full description of the registered task definition.
    public var taskDefinition: ECSClientTypes.TaskDefinition?

    public init(
        tags: [ECSClientTypes.Tag]? = nil,
        taskDefinition: ECSClientTypes.TaskDefinition? = nil
    )
    {
        self.tags = tags
        self.taskDefinition = taskDefinition
    }
}

/// Your Amazon Web Services account was blocked. For more information, contact [ Amazon Web Services Support](http://aws.amazon.com/contact-us/).
public struct BlockedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BlockedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The RunTask request could not be processed due to conflicts. The provided clientToken is already in use with a different RunTask request. The resourceIds are the existing task ARNs which are already associated with the clientToken. To fix this issue:
///
/// * Run RunTask with a unique clientToken.
///
/// * Run RunTask with the clientToken and the original set of parameters
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
        /// The existing task ARNs which are already associated with the clientToken.
        public internal(set) var resourceIds: [Swift.String]? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceIds: [Swift.String]? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceIds = resourceIds
    }
}

extension ECSClientTypes {

    /// The termination policy for the Amazon EBS volume when the task exits. For more information, see [Amazon ECS volume termination policy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volume-types).
    public struct TaskManagedEBSVolumeTerminationPolicy: Swift.Sendable {
        /// Indicates whether the volume should be deleted on when the task stops. If a value of true is specified,  Amazon ECS deletes the Amazon EBS volume on your behalf when the task goes into the STOPPED state. If no value is specified, the  default value is true is used. When set to false, Amazon ECS leaves the volume in your  account.
        /// This member is required.
        public var deleteOnTermination: Swift.Bool?

        public init(
            deleteOnTermination: Swift.Bool? = nil
        )
        {
            self.deleteOnTermination = deleteOnTermination
        }
    }
}

extension ECSClientTypes {

    /// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task.
    public struct TaskManagedEBSVolumeConfiguration: Swift.Sendable {
        /// Indicates whether the volume should be encrypted. If no value is specified, encryption is turned on by default. This parameter maps 1:1 with the Encrypted parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var encrypted: Swift.Bool?
        /// The Linux filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the task will fail to start. The available filesystem types are  ext3, ext4, and xfs. If no value is specified, the xfs filesystem type is used by default.
        public var filesystemType: ECSClientTypes.TaskFilesystemType?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type.
        ///
        /// * gp3: 3,000 - 16,000 IOPS
        ///
        /// * io1: 100 - 64,000 IOPS
        ///
        /// * io2: 100 - 256,000 IOPS
        ///
        ///
        /// This parameter is required for io1 and io2 volume types. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for st1, sc1, or standard volume types. This parameter maps 1:1 with the Iops parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var iops: Swift.Int?
        /// The Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption. When encryption is turned on and no Amazon Web Services Key Management Service key is specified, the default Amazon Web Services managed key for Amazon EBS volumes is used. This parameter maps 1:1 with the KmsKeyId parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. Amazon Web Services authenticates the Amazon Web Services Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
        public var kmsKeyId: Swift.String?
        /// The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. We recommend using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the Amazon ECS Developer Guide.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the Size parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. The following are the supported volume size values for each volume type.
        ///
        /// * gp2 and gp3: 1-16,384
        ///
        /// * io1 and io2: 4-16,384
        ///
        /// * st1 and sc1: 125-16,384
        ///
        /// * standard: 1-1,024
        public var sizeInGiB: Swift.Int?
        /// The snapshot that Amazon ECS uses to create the volume. You must specify either a snapshot ID or a volume size. This parameter maps 1:1 with the SnapshotId parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var snapshotId: Swift.String?
        /// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the TagSpecifications.N parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference.
        public var tagSpecifications: [ECSClientTypes.EBSTagSpecification]?
        /// The termination policy for the volume when the task exits. This provides a way to control whether Amazon ECS terminates the Amazon EBS volume when the task stops.
        public var terminationPolicy: ECSClientTypes.TaskManagedEBSVolumeTerminationPolicy?
        /// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the Throughput parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. This parameter is only supported for the gp3 volume type.
        public var throughput: Swift.Int?
        /// The volume type. This parameter maps 1:1 with the VolumeType parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the Amazon EC2 API Reference. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the Amazon EC2 User Guide. The following are the supported volume types.
        ///
        /// * General Purpose SSD: gp2|gp3
        ///
        /// * Provisioned IOPS SSD: io1|io2
        ///
        /// * Throughput Optimized HDD: st1
        ///
        /// * Cold HDD: sc1
        ///
        /// * Magnetic: standard The magnetic volume type is not supported on Fargate.
        public var volumeType: Swift.String?

        public init(
            encrypted: Swift.Bool? = nil,
            filesystemType: ECSClientTypes.TaskFilesystemType? = nil,
            iops: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            sizeInGiB: Swift.Int? = nil,
            snapshotId: Swift.String? = nil,
            tagSpecifications: [ECSClientTypes.EBSTagSpecification]? = nil,
            terminationPolicy: ECSClientTypes.TaskManagedEBSVolumeTerminationPolicy? = nil,
            throughput: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.encrypted = encrypted
            self.filesystemType = filesystemType
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.roleArn = roleArn
            self.sizeInGiB = sizeInGiB
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.terminationPolicy = terminationPolicy
            self.throughput = throughput
            self.volumeType = volumeType
        }
    }
}

extension ECSClientTypes {

    /// Configuration settings for the task volume that was configuredAtLaunch that weren't set during RegisterTaskDef.
    public struct TaskVolumeConfiguration: Swift.Sendable {
        /// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are created.
        public var managedEBSVolume: ECSClientTypes.TaskManagedEBSVolumeConfiguration?
        /// The name of the volume. This value must match the volume name from the Volume object in the task definition.
        /// This member is required.
        public var name: Swift.String?

        public init(
            managedEBSVolume: ECSClientTypes.TaskManagedEBSVolumeConfiguration? = nil,
            name: Swift.String? = nil
        )
        {
            self.managedEBSVolume = managedEBSVolume
            self.name = name
        }
    }
}

public struct RunTaskInput: Swift.Sendable {
    /// The capacity provider strategy to use for the task. If a capacityProviderStrategy is specified, the launchType parameter must be omitted. If no capacityProviderStrategy or launchType is specified, the defaultCapacityProviderStrategy for the cluster is used. When you use cluster auto scaling, you must specify capacityProviderStrategy and not launchType. A capacity provider strategy may contain a maximum of 6 capacity providers.
    public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
    /// An identifier that you provide to ensure the idempotency of the request. It must be unique and is case sensitive. Up to 64 characters are allowed. The valid characters are characters in the range of 33-126, inclusive. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/ECS_Idempotency.html).
    public var clientToken: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the cluster to run your task on. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The number of instantiations of the specified task to place on your cluster. You can specify up to 10 tasks for each call.
    public var count: Swift.Int?
    /// Specifies whether to use Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
    public var enableECSManagedTags: Swift.Bool?
    /// Determines whether to use the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task. If true, then the task definition must have a task role, or you must provide one as an override.
    public var enableExecuteCommand: Swift.Bool?
    /// The name of the task group to associate with the task. The default value is the family name of the task definition (for example, family:my-family-name).
    public var group: Swift.String?
    /// The infrastructure to run your standalone task on. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide. The FARGATE launch type runs your tasks on Fargate On-Demand infrastructure. Fargate Spot infrastructure is available for use but a capacity provider strategy must be used. For more information, see [Fargate capacity providers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-capacity-providers.html) in the Amazon ECS Developer Guide. The EC2 launch type runs your tasks on Amazon EC2 instances registered to your cluster. The EXTERNAL launch type runs your tasks on your on-premises server or virtual machine (VM) capacity registered to your cluster. A task can use either a launch type or a capacity provider strategy. If a launchType is specified, the capacityProviderStrategy parameter must be omitted. When you use cluster auto scaling, you must specify capacityProviderStrategy and not launchType.
    public var launchType: ECSClientTypes.LaunchType?
    /// The network configuration for the task. This parameter is required for task definitions that use the awsvpc network mode to receive their own elastic network interface, and it isn't supported for other network modes. For more information, see [Task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the Amazon Elastic Container Service Developer Guide.
    public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
    /// A list of container overrides in JSON format that specify the name of a container in the specified task definition and the overrides it should receive. You can override the default command for a container (that's specified in the task definition or Docker image) with a command override. You can also override existing environment variables (that are specified in the task definition or Docker image) on a container or add new environment variables to it with an environment override. A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting characters of the override structure.
    public var overrides: ECSClientTypes.TaskOverride?
    /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints for each task (including constraints in the task definition and those specified at runtime).
    public var placementConstraints: [ECSClientTypes.PlacementConstraint]?
    /// The placement strategy objects to use for the task. You can specify a maximum of 5 strategy rules for each task.
    public var placementStrategy: [ECSClientTypes.PlacementStrategy]?
    /// The platform version the task uses. A platform version is only specified for tasks hosted on Fargate. If one isn't specified, the LATEST platform version is used. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
    public var platformVersion: Swift.String?
    /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the[TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action. An error will be received if you specify the SERVICE option when running a task.
    public var propagateTags: ECSClientTypes.PropagateTags?
    /// This parameter is only used by Amazon ECS. It is not intended for use by customers.
    public var referenceId: Swift.String?
    /// An optional tag specified when a task is started. For example, if you automatically trigger a task to run a batch process job, you could apply a unique identifier for that job to your task with the startedBy parameter. You can then identify which tasks belong to that job by filtering the results of a [ListTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListTasks.html) call with the startedBy value. Up to 128 letters (uppercase and lowercase), numbers, hyphens (-), forward slash (/), and underscores (_) are allowed. If a task is started by an Amazon ECS service, then the startedBy parameter contains the deployment ID of the service that starts it.
    public var startedBy: Swift.String?
    /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The family and revision (family:revision) or full ARN of the task definition to run. If a revision isn't specified, the latest ACTIVE revision is used. The full ARN value must match the value that you specified as the Resource of the principal's permissions policy. When you specify a task definition, you must either specify a specific revision, or all revisions in the ARN. To specify a specific revision, include the revision number in the ARN. For example, to specify revision 2, use arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:2. To specify all revisions, use the wildcard (*) in the ARN. For example, to specify all revisions, use arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*. For more information, see [Policy Resources for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-resources) in the Amazon Elastic Container Service Developer Guide.
    /// This member is required.
    public var taskDefinition: Swift.String?
    /// The details of the volume that was configuredAtLaunch. You can configure the size, volumeType, IOPS, throughput, snapshot and encryption in in [TaskManagedEBSVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TaskManagedEBSVolumeConfiguration.html). The name of the volume must match the name from the task definition.
    public var volumeConfigurations: [ECSClientTypes.TaskVolumeConfiguration]?

    public init(
        capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
        clientToken: Swift.String? = nil,
        cluster: Swift.String? = nil,
        count: Swift.Int? = nil,
        enableECSManagedTags: Swift.Bool? = false,
        enableExecuteCommand: Swift.Bool? = false,
        group: Swift.String? = nil,
        launchType: ECSClientTypes.LaunchType? = nil,
        networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
        overrides: ECSClientTypes.TaskOverride? = nil,
        placementConstraints: [ECSClientTypes.PlacementConstraint]? = nil,
        placementStrategy: [ECSClientTypes.PlacementStrategy]? = nil,
        platformVersion: Swift.String? = nil,
        propagateTags: ECSClientTypes.PropagateTags? = nil,
        referenceId: Swift.String? = nil,
        startedBy: Swift.String? = nil,
        tags: [ECSClientTypes.Tag]? = nil,
        taskDefinition: Swift.String? = nil,
        volumeConfigurations: [ECSClientTypes.TaskVolumeConfiguration]? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.clientToken = clientToken
        self.cluster = cluster
        self.count = count
        self.enableECSManagedTags = enableECSManagedTags
        self.enableExecuteCommand = enableExecuteCommand
        self.group = group
        self.launchType = launchType
        self.networkConfiguration = networkConfiguration
        self.overrides = overrides
        self.placementConstraints = placementConstraints
        self.placementStrategy = placementStrategy
        self.platformVersion = platformVersion
        self.propagateTags = propagateTags
        self.referenceId = referenceId
        self.startedBy = startedBy
        self.tags = tags
        self.taskDefinition = taskDefinition
        self.volumeConfigurations = volumeConfigurations
    }
}

public struct RunTaskOutput: Swift.Sendable {
    /// Any failures associated with the call. For information about how to address failures, see [Service event messages](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-event-messages.html#service-event-messages-list) and [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the Amazon Elastic Container Service Developer Guide.
    public var failures: [ECSClientTypes.Failure]?
    /// A full description of the tasks that were run. The tasks that were successfully placed on your cluster are described here.
    public var tasks: [ECSClientTypes.Task]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        tasks: [ECSClientTypes.Task]? = nil
    )
    {
        self.failures = failures
        self.tasks = tasks
    }
}

public struct StartTaskInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster where to start your task. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The container instance IDs or full ARN entries for the container instances where you would like to place your task. You can specify up to 10 container instances.
    /// This member is required.
    public var containerInstances: [Swift.String]?
    /// Specifies whether to use Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
    public var enableECSManagedTags: Swift.Bool?
    /// Whether or not the execute command functionality is turned on for the task. If true, this turns on the execute command functionality on all containers in the task.
    public var enableExecuteCommand: Swift.Bool?
    /// The name of the task group to associate with the task. The default value is the family name of the task definition (for example, family:my-family-name).
    public var group: Swift.String?
    /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
    public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
    /// A list of container overrides in JSON format that specify the name of a container in the specified task definition and the overrides it receives. You can override the default command for a container (that's specified in the task definition or Docker image) with a command override. You can also override existing environment variables (that are specified in the task definition or Docker image) on a container or add new environment variables to it with an environment override. A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting characters of the override structure.
    public var overrides: ECSClientTypes.TaskOverride?
    /// Specifies whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags aren't propagated.
    public var propagateTags: ECSClientTypes.PropagateTags?
    /// This parameter is only used by Amazon ECS. It is not intended for use by customers.
    public var referenceId: Swift.String?
    /// An optional tag specified when a task is started. For example, if you automatically trigger a task to run a batch process job, you could apply a unique identifier for that job to your task with the startedBy parameter. You can then identify which tasks belong to that job by filtering the results of a [ListTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListTasks.html) call with the startedBy value. Up to 36 letters (uppercase and lowercase), numbers, hyphens (-), forward slash (/), and underscores (_) are allowed. If a task is started by an Amazon ECS service, the startedBy parameter contains the deployment ID of the service that starts it.
    public var startedBy: Swift.String?
    /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [ECSClientTypes.Tag]?
    /// The family and revision (family:revision) or full ARN of the task definition to start. If a revision isn't specified, the latest ACTIVE revision is used.
    /// This member is required.
    public var taskDefinition: Swift.String?
    /// The details of the volume that was configuredAtLaunch. You can configure the size, volumeType, IOPS, throughput, snapshot and encryption in [TaskManagedEBSVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TaskManagedEBSVolumeConfiguration.html). The name of the volume must match the name from the task definition.
    public var volumeConfigurations: [ECSClientTypes.TaskVolumeConfiguration]?

    public init(
        cluster: Swift.String? = nil,
        containerInstances: [Swift.String]? = nil,
        enableECSManagedTags: Swift.Bool? = false,
        enableExecuteCommand: Swift.Bool? = false,
        group: Swift.String? = nil,
        networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
        overrides: ECSClientTypes.TaskOverride? = nil,
        propagateTags: ECSClientTypes.PropagateTags? = nil,
        referenceId: Swift.String? = nil,
        startedBy: Swift.String? = nil,
        tags: [ECSClientTypes.Tag]? = nil,
        taskDefinition: Swift.String? = nil,
        volumeConfigurations: [ECSClientTypes.TaskVolumeConfiguration]? = nil
    )
    {
        self.cluster = cluster
        self.containerInstances = containerInstances
        self.enableECSManagedTags = enableECSManagedTags
        self.enableExecuteCommand = enableExecuteCommand
        self.group = group
        self.networkConfiguration = networkConfiguration
        self.overrides = overrides
        self.propagateTags = propagateTags
        self.referenceId = referenceId
        self.startedBy = startedBy
        self.tags = tags
        self.taskDefinition = taskDefinition
        self.volumeConfigurations = volumeConfigurations
    }
}

public struct StartTaskOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// A full description of the tasks that were started. Each task that was successfully placed on your container instances is described.
    public var tasks: [ECSClientTypes.Task]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        tasks: [ECSClientTypes.Task]? = nil
    )
    {
        self.failures = failures
        self.tasks = tasks
    }
}

public struct StopTaskInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task to stop. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// An optional message specified when a task is stopped. For example, if you're using a custom scheduler, you can use this parameter to specify the reason for stopping the task here, and the message appears in subsequent [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html)> API operations on this task.
    public var reason: Swift.String?
    /// The task ID of the task to stop.
    /// This member is required.
    public var task: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        reason: Swift.String? = nil,
        task: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.reason = reason
        self.task = task
    }
}

public struct StopTaskOutput: Swift.Sendable {
    /// The task that was stopped.
    public var task: ECSClientTypes.Task?

    public init(
        task: ECSClientTypes.Task? = nil
    )
    {
        self.task = task
    }
}

extension ECSClientTypes {

    /// An object representing a change in state for a task attachment.
    public struct AttachmentStateChange: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the attachment.
        /// This member is required.
        public var attachmentArn: Swift.String?
        /// The status of the attachment.
        /// This member is required.
        public var status: Swift.String?

        public init(
            attachmentArn: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.attachmentArn = attachmentArn
            self.status = status
        }
    }
}

public struct SubmitAttachmentStateChangesInput: Swift.Sendable {
    /// Any attachments associated with the state change request.
    /// This member is required.
    public var attachments: [ECSClientTypes.AttachmentStateChange]?
    /// The short name or full ARN of the cluster that hosts the container instance the attachment belongs to.
    public var cluster: Swift.String?

    public init(
        attachments: [ECSClientTypes.AttachmentStateChange]? = nil,
        cluster: Swift.String? = nil
    )
    {
        self.attachments = attachments
        self.cluster = cluster
    }
}

public struct SubmitAttachmentStateChangesOutput: Swift.Sendable {
    /// Acknowledgement of the state change.
    public var acknowledgment: Swift.String?

    public init(
        acknowledgment: Swift.String? = nil
    )
    {
        self.acknowledgment = acknowledgment
    }
}

public struct SubmitContainerStateChangeInput: Swift.Sendable {
    /// The short name or full ARN of the cluster that hosts the container.
    public var cluster: Swift.String?
    /// The name of the container.
    public var containerName: Swift.String?
    /// The exit code that's returned for the state change request.
    public var exitCode: Swift.Int?
    /// The network bindings of the container.
    public var networkBindings: [ECSClientTypes.NetworkBinding]?
    /// The reason for the state change request.
    public var reason: Swift.String?
    /// The ID of the Docker container.
    public var runtimeId: Swift.String?
    /// The status of the state change request.
    public var status: Swift.String?
    /// The task ID or full Amazon Resource Name (ARN) of the task that hosts the container.
    public var task: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        containerName: Swift.String? = nil,
        exitCode: Swift.Int? = nil,
        networkBindings: [ECSClientTypes.NetworkBinding]? = nil,
        reason: Swift.String? = nil,
        runtimeId: Swift.String? = nil,
        status: Swift.String? = nil,
        task: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.containerName = containerName
        self.exitCode = exitCode
        self.networkBindings = networkBindings
        self.reason = reason
        self.runtimeId = runtimeId
        self.status = status
        self.task = task
    }
}

public struct SubmitContainerStateChangeOutput: Swift.Sendable {
    /// Acknowledgement of the state change.
    public var acknowledgment: Swift.String?

    public init(
        acknowledgment: Swift.String? = nil
    )
    {
        self.acknowledgment = acknowledgment
    }
}

extension ECSClientTypes {

    /// An object that represents a change in state for a container.
    public struct ContainerStateChange: Swift.Sendable {
        /// The name of the container.
        public var containerName: Swift.String?
        /// The exit code for the container, if the state change is a result of the container exiting.
        public var exitCode: Swift.Int?
        /// The container image SHA 256 digest.
        public var imageDigest: Swift.String?
        /// Any network bindings that are associated with the container.
        public var networkBindings: [ECSClientTypes.NetworkBinding]?
        /// The reason for the state change.
        public var reason: Swift.String?
        /// The ID of the Docker container.
        public var runtimeId: Swift.String?
        /// The status of the container.
        public var status: Swift.String?

        public init(
            containerName: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            imageDigest: Swift.String? = nil,
            networkBindings: [ECSClientTypes.NetworkBinding]? = nil,
            reason: Swift.String? = nil,
            runtimeId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.containerName = containerName
            self.exitCode = exitCode
            self.imageDigest = imageDigest
            self.networkBindings = networkBindings
            self.reason = reason
            self.runtimeId = runtimeId
            self.status = status
        }
    }
}

extension ECSClientTypes {

    /// An object representing a change in state for a managed agent.
    public struct ManagedAgentStateChange: Swift.Sendable {
        /// The name of the container that's associated with the managed agent.
        /// This member is required.
        public var containerName: Swift.String?
        /// The name of the managed agent.
        /// This member is required.
        public var managedAgentName: ECSClientTypes.ManagedAgentName?
        /// The reason for the status of the managed agent.
        public var reason: Swift.String?
        /// The status of the managed agent.
        /// This member is required.
        public var status: Swift.String?

        public init(
            containerName: Swift.String? = nil,
            managedAgentName: ECSClientTypes.ManagedAgentName? = nil,
            reason: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.containerName = containerName
            self.managedAgentName = managedAgentName
            self.reason = reason
            self.status = status
        }
    }
}

public struct SubmitTaskStateChangeInput: Swift.Sendable {
    /// Any attachments associated with the state change request.
    public var attachments: [ECSClientTypes.AttachmentStateChange]?
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task.
    public var cluster: Swift.String?
    /// Any containers that's associated with the state change request.
    public var containers: [ECSClientTypes.ContainerStateChange]?
    /// The Unix timestamp for the time when the task execution stopped.
    public var executionStoppedAt: Foundation.Date?
    /// The details for the managed agent that's associated with the task.
    public var managedAgents: [ECSClientTypes.ManagedAgentStateChange]?
    /// The Unix timestamp for the time when the container image pull started.
    public var pullStartedAt: Foundation.Date?
    /// The Unix timestamp for the time when the container image pull completed.
    public var pullStoppedAt: Foundation.Date?
    /// The reason for the state change request.
    public var reason: Swift.String?
    /// The status of the state change request.
    public var status: Swift.String?
    /// The task ID or full ARN of the task in the state change request.
    public var task: Swift.String?

    public init(
        attachments: [ECSClientTypes.AttachmentStateChange]? = nil,
        cluster: Swift.String? = nil,
        containers: [ECSClientTypes.ContainerStateChange]? = nil,
        executionStoppedAt: Foundation.Date? = nil,
        managedAgents: [ECSClientTypes.ManagedAgentStateChange]? = nil,
        pullStartedAt: Foundation.Date? = nil,
        pullStoppedAt: Foundation.Date? = nil,
        reason: Swift.String? = nil,
        status: Swift.String? = nil,
        task: Swift.String? = nil
    )
    {
        self.attachments = attachments
        self.cluster = cluster
        self.containers = containers
        self.executionStoppedAt = executionStoppedAt
        self.managedAgents = managedAgents
        self.pullStartedAt = pullStartedAt
        self.pullStoppedAt = pullStoppedAt
        self.reason = reason
        self.status = status
        self.task = task
    }
}

public struct SubmitTaskStateChangeOutput: Swift.Sendable {
    /// Acknowledgement of the state change.
    public var acknowledgment: Swift.String?

    public init(
        acknowledgment: Swift.String? = nil
    )
    {
        self.acknowledgment = acknowledgment
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to add tags to. Currently, the supported resources are Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container instances.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to add to the resource. A tag is an array of key-value pairs. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource - 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length - 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length - 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    /// This member is required.
    public var tags: [ECSClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [ECSClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to delete tags from. Currently, the supported resources are Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container instances.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension ECSClientTypes {

    /// The details of the Auto Scaling group capacity provider to update.
    public struct AutoScalingGroupProviderUpdate: Swift.Sendable {
        /// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
        public var managedDraining: ECSClientTypes.ManagedDraining?
        /// The managed scaling settings for the Auto Scaling group capacity provider.
        public var managedScaling: ECSClientTypes.ManagedScaling?
        /// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work. When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the Auto Scaling User Guide. When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
        public var managedTerminationProtection: ECSClientTypes.ManagedTerminationProtection?

        public init(
            managedDraining: ECSClientTypes.ManagedDraining? = nil,
            managedScaling: ECSClientTypes.ManagedScaling? = nil,
            managedTerminationProtection: ECSClientTypes.ManagedTerminationProtection? = nil
        )
        {
            self.managedDraining = managedDraining
            self.managedScaling = managedScaling
            self.managedTerminationProtection = managedTerminationProtection
        }
    }
}

public struct UpdateCapacityProviderInput: Swift.Sendable {
    /// An object that represent the parameters to update for the Auto Scaling group capacity provider.
    /// This member is required.
    public var autoScalingGroupProvider: ECSClientTypes.AutoScalingGroupProviderUpdate?
    /// The name of the capacity provider to update.
    /// This member is required.
    public var name: Swift.String?

    public init(
        autoScalingGroupProvider: ECSClientTypes.AutoScalingGroupProviderUpdate? = nil,
        name: Swift.String? = nil
    )
    {
        self.autoScalingGroupProvider = autoScalingGroupProvider
        self.name = name
    }
}

public struct UpdateCapacityProviderOutput: Swift.Sendable {
    /// Details about the capacity provider.
    public var capacityProvider: ECSClientTypes.CapacityProvider?

    public init(
        capacityProvider: ECSClientTypes.CapacityProvider? = nil
    )
    {
        self.capacityProvider = capacityProvider
    }
}

public struct UpdateClusterInput: Swift.Sendable {
    /// The name of the cluster to modify the settings for.
    /// This member is required.
    public var cluster: Swift.String?
    /// The execute command configuration for the cluster.
    public var configuration: ECSClientTypes.ClusterConfiguration?
    /// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the enabled parameter to true in the ServiceConnectConfiguration. You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default parameter. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public var serviceConnectDefaults: ECSClientTypes.ClusterServiceConnectDefaultsRequest?
    /// The cluster settings for your cluster.
    public var settings: [ECSClientTypes.ClusterSetting]?

    public init(
        cluster: Swift.String? = nil,
        configuration: ECSClientTypes.ClusterConfiguration? = nil,
        serviceConnectDefaults: ECSClientTypes.ClusterServiceConnectDefaultsRequest? = nil,
        settings: [ECSClientTypes.ClusterSetting]? = nil
    )
    {
        self.cluster = cluster
        self.configuration = configuration
        self.serviceConnectDefaults = serviceConnectDefaults
        self.settings = settings
    }
}

public struct UpdateClusterOutput: Swift.Sendable {
    /// Details about the cluster.
    public var cluster: ECSClientTypes.Cluster?

    public init(
        cluster: ECSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct UpdateClusterSettingsInput: Swift.Sendable {
    /// The name of the cluster to modify the settings for.
    /// This member is required.
    public var cluster: Swift.String?
    /// The setting to use by default for a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster. If this value is specified, it overrides the containerInsights value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html). Currently, if you delete an existing cluster that does not have Container Insights turned on, and then create a new cluster with the same name with Container Insights tuned on, Container Insights will not actually be turned on. If you want to preserve the same name for your existing cluster and turn on Container Insights, you must wait 7 days before you can re-create it.
    /// This member is required.
    public var settings: [ECSClientTypes.ClusterSetting]?

    public init(
        cluster: Swift.String? = nil,
        settings: [ECSClientTypes.ClusterSetting]? = nil
    )
    {
        self.cluster = cluster
        self.settings = settings
    }
}

public struct UpdateClusterSettingsOutput: Swift.Sendable {
    /// Details about the cluster
    public var cluster: ECSClientTypes.Cluster?

    public init(
        cluster: ECSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

/// Amazon ECS can't determine the current version of the Amazon ECS container agent on the container instance and doesn't have enough information to proceed with an update. This could be because the agent running on the container instance is a previous or custom version that doesn't use our version information.
public struct MissingVersionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingVersionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There's no update available for this Amazon ECS container agent. This might be because the agent is already running the latest version or because it's so old that there's no update path to the current version.
public struct NoUpdateAvailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Message that describes the cause of the exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoUpdateAvailableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateContainerAgentInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is running on. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// The container instance ID or full ARN entries for the container instance where you would like to update the Amazon ECS container agent.
    /// This member is required.
    public var containerInstance: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        containerInstance: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.containerInstance = containerInstance
    }
}

public struct UpdateContainerAgentOutput: Swift.Sendable {
    /// The container instance that the container agent was updated for.
    public var containerInstance: ECSClientTypes.ContainerInstance?

    public init(
        containerInstance: ECSClientTypes.ContainerInstance? = nil
    )
    {
        self.containerInstance = containerInstance
    }
}

public struct UpdateContainerInstancesStateInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to update. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// A list of up to 10 container instance IDs or full ARN entries.
    /// This member is required.
    public var containerInstances: [Swift.String]?
    /// The container instance state to update the container instance with. The only valid values for this action are ACTIVE and DRAINING. A container instance can only be updated to DRAINING status once it has reached an ACTIVE state. If a container instance is in REGISTERING, DEREGISTERING, or REGISTRATION_FAILED state you can describe the container instance but can't update the container instance state.
    /// This member is required.
    public var status: ECSClientTypes.ContainerInstanceStatus?

    public init(
        cluster: Swift.String? = nil,
        containerInstances: [Swift.String]? = nil,
        status: ECSClientTypes.ContainerInstanceStatus? = nil
    )
    {
        self.cluster = cluster
        self.containerInstances = containerInstances
        self.status = status
    }
}

public struct UpdateContainerInstancesStateOutput: Swift.Sendable {
    /// The list of container instances.
    public var containerInstances: [ECSClientTypes.ContainerInstance]?
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?

    public init(
        containerInstances: [ECSClientTypes.ContainerInstance]? = nil,
        failures: [ECSClientTypes.Failure]? = nil
    )
    {
        self.containerInstances = containerInstances
        self.failures = failures
    }
}

public struct UpdateServiceInput: Swift.Sendable {
    /// The capacity provider strategy to update the service to use. if the service uses the default capacity provider strategy for the cluster, the service can be updated to use one or more capacity providers as opposed to the default capacity provider strategy. However, when a service is using a capacity provider strategy that's not the default capacity provider strategy, the service can't be updated to use the cluster's default capacity provider strategy. A capacity provider strategy consists of one or more capacity providers along with the base and weight to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html) API is used to associate a capacity provider with a cluster. Only capacity providers with an ACTIVE or UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the [CreateClusterCapacityProvider](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html) API operation. To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT capacity providers. The Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used. The [PutClusterCapacityProviders](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html)API operation is used to update the list of available capacity providers for a cluster after the cluster is created.
    public var capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]?
    /// The short name or full Amazon Resource Name (ARN) of the cluster that your service runs on. If you do not specify a cluster, the default cluster is assumed.
    public var cluster: Swift.String?
    /// Optional deployment parameters that control how many tasks run during the deployment and the failure detection methods.
    public var deploymentConfiguration: ECSClientTypes.DeploymentConfiguration?
    /// The number of instantiations of the task to place and keep running in your service.
    public var desiredCount: Swift.Int?
    /// Determines whether to turn on Amazon ECS managed tags for the tasks in the service. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide. Only tasks launched after the update will reflect the update. To update the tags on all tasks, set forceNewDeployment to true, so that Amazon ECS starts new tasks with the updated tags.
    public var enableECSManagedTags: Swift.Bool?
    /// If true, this enables execute command functionality on all task containers. If you do not want to override the value that was set when the service was created, you can set this to null when performing this action.
    public var enableExecuteCommand: Swift.Bool?
    /// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (my_image:latest) or to roll Fargate tasks onto a newer platform version.
    public var forceNewDeployment: Swift.Bool?
    /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only valid if your service is configured to use a load balancer. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores the Elastic Load Balancing health check status. This grace period can prevent the ECS service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
    public var healthCheckGracePeriodSeconds: Swift.Int?
    /// A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the container name, and the container port to access from the load balancer. The container name is as it appears in a container definition. When you add, update, or remove a load balancer configuration, Amazon ECS starts new tasks with the updated Elastic Load Balancing configuration, and then stops the old tasks when the new tasks are running. For services that use rolling updates, you can add, update, or remove Elastic Load Balancing target groups. You can update from a single target group to multiple target groups and from multiple target groups to a single target group. For services that use blue/green deployments, you can update Elastic Load Balancing target groups by using [CreateDeployment](https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html) through CodeDeploy. Note that multiple target groups are not supported for blue/green deployments. For more information see [Register multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the Amazon Elastic Container Service Developer Guide. For services that use the external deployment controller, you can add, update, or remove load balancers by using [CreateTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateTaskSet.html). Note that multiple target groups are not supported for external deployments. For more information see [Register multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the Amazon Elastic Container Service Developer Guide. You can remove existing loadBalancers by passing an empty list.
    public var loadBalancers: [ECSClientTypes.LoadBalancer]?
    /// An object representing the network configuration for the service.
    public var networkConfiguration: ECSClientTypes.NetworkConfiguration?
    /// An array of task placement constraint objects to update the service to use. If no value is specified, the existing placement constraints for the service will remain unchanged. If this value is specified, it will override any existing placement constraints defined for the service. To remove all existing placement constraints, specify an empty array. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
    public var placementConstraints: [ECSClientTypes.PlacementConstraint]?
    /// The task placement strategy objects to update the service to use. If no value is specified, the existing placement strategy for the service will remain unchanged. If this value is specified, it will override the existing placement strategy defined for the service. To remove an existing placement strategy, specify an empty object. You can specify a maximum of five strategy rules for each service.
    public var placementStrategy: [ECSClientTypes.PlacementStrategy]?
    /// The platform version that your tasks in the service run on. A platform version is only specified for tasks using the Fargate launch type. If a platform version is not specified, the LATEST platform version is used. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
    public var platformVersion: Swift.String?
    /// Determines whether to propagate the tags from the task definition or the service to the task. If no value is specified, the tags aren't propagated. Only tasks launched after the update will reflect the update. To update the tags on all tasks, set forceNewDeployment to true, so that Amazon ECS starts new tasks with the updated tags.
    public var propagateTags: ECSClientTypes.PropagateTags?
    /// The name of the service to update.
    /// This member is required.
    public var service: Swift.String?
    /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the Amazon Elastic Container Service Developer Guide.
    public var serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration?
    /// The details for the service discovery registries to assign to this service. For more information, see [Service Discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html). When you add, update, or remove the service registries configuration, Amazon ECS starts new tasks with the updated service registries configuration, and then stops the old tasks when the new tasks are running. You can remove existing serviceRegistries by passing an empty list.
    public var serviceRegistries: [ECSClientTypes.ServiceRegistry]?
    /// The family and revision (family:revision) or full ARN of the task definition to run in your service. If a revision is not specified, the latest ACTIVE revision is used. If you modify the task definition with UpdateService, Amazon ECS spawns a task with the new version of the task definition and then stops an old task after the new version is running.
    public var taskDefinition: Swift.String?
    /// The details of the volume that was configuredAtLaunch. You can configure the size, volumeType, IOPS, throughput, snapshot and encryption in [ServiceManagedEBSVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ServiceManagedEBSVolumeConfiguration.html). The name of the volume must match the name from the task definition. If set to null, no new deployment is triggered. Otherwise, if this configuration differs from the existing one, it triggers a new deployment.
    public var volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]?

    public init(
        capacityProviderStrategy: [ECSClientTypes.CapacityProviderStrategyItem]? = nil,
        cluster: Swift.String? = nil,
        deploymentConfiguration: ECSClientTypes.DeploymentConfiguration? = nil,
        desiredCount: Swift.Int? = nil,
        enableECSManagedTags: Swift.Bool? = nil,
        enableExecuteCommand: Swift.Bool? = nil,
        forceNewDeployment: Swift.Bool? = false,
        healthCheckGracePeriodSeconds: Swift.Int? = nil,
        loadBalancers: [ECSClientTypes.LoadBalancer]? = nil,
        networkConfiguration: ECSClientTypes.NetworkConfiguration? = nil,
        placementConstraints: [ECSClientTypes.PlacementConstraint]? = nil,
        placementStrategy: [ECSClientTypes.PlacementStrategy]? = nil,
        platformVersion: Swift.String? = nil,
        propagateTags: ECSClientTypes.PropagateTags? = nil,
        service: Swift.String? = nil,
        serviceConnectConfiguration: ECSClientTypes.ServiceConnectConfiguration? = nil,
        serviceRegistries: [ECSClientTypes.ServiceRegistry]? = nil,
        taskDefinition: Swift.String? = nil,
        volumeConfigurations: [ECSClientTypes.ServiceVolumeConfiguration]? = nil
    )
    {
        self.capacityProviderStrategy = capacityProviderStrategy
        self.cluster = cluster
        self.deploymentConfiguration = deploymentConfiguration
        self.desiredCount = desiredCount
        self.enableECSManagedTags = enableECSManagedTags
        self.enableExecuteCommand = enableExecuteCommand
        self.forceNewDeployment = forceNewDeployment
        self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
        self.loadBalancers = loadBalancers
        self.networkConfiguration = networkConfiguration
        self.placementConstraints = placementConstraints
        self.placementStrategy = placementStrategy
        self.platformVersion = platformVersion
        self.propagateTags = propagateTags
        self.service = service
        self.serviceConnectConfiguration = serviceConnectConfiguration
        self.serviceRegistries = serviceRegistries
        self.taskDefinition = taskDefinition
        self.volumeConfigurations = volumeConfigurations
    }
}

public struct UpdateServiceOutput: Swift.Sendable {
    /// The full description of your service following the update call.
    public var service: ECSClientTypes.Service?

    public init(
        service: ECSClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

public struct UpdateServicePrimaryTaskSetInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set exists in.
    /// This member is required.
    public var cluster: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the task set to set as the primary task set in the deployment.
    /// This member is required.
    public var primaryTaskSet: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the service that the task set exists in.
    /// This member is required.
    public var service: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        primaryTaskSet: Swift.String? = nil,
        service: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.primaryTaskSet = primaryTaskSet
        self.service = service
    }
}

public struct UpdateServicePrimaryTaskSetOutput: Swift.Sendable {
    /// The details about the task set.
    public var taskSet: ECSClientTypes.TaskSet?

    public init(
        taskSet: ECSClientTypes.TaskSet? = nil
    )
    {
        self.taskSet = taskSet
    }
}

public struct UpdateTaskProtectionInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task sets exist in.
    /// This member is required.
    public var cluster: Swift.String?
    /// If you set protectionEnabled to true, you can specify the duration for task protection in minutes. You can specify a value from 1 minute to up to 2,880 minutes (48 hours). During this time, your task will not be terminated by scale-in events from Service Auto Scaling or deployments. After this time period lapses, protectionEnabled will be reset to false. If you don’t specify the time, then the task is automatically protected for 120 minutes (2 hours).
    public var expiresInMinutes: Swift.Int?
    /// Specify true to mark a task for protection and false to unset protection, making it eligible for termination.
    /// This member is required.
    public var protectionEnabled: Swift.Bool?
    /// A list of up to 10 task IDs or full ARN entries.
    /// This member is required.
    public var tasks: [Swift.String]?

    public init(
        cluster: Swift.String? = nil,
        expiresInMinutes: Swift.Int? = nil,
        protectionEnabled: Swift.Bool? = false,
        tasks: [Swift.String]? = nil
    )
    {
        self.cluster = cluster
        self.expiresInMinutes = expiresInMinutes
        self.protectionEnabled = protectionEnabled
        self.tasks = tasks
    }
}

public struct UpdateTaskProtectionOutput: Swift.Sendable {
    /// Any failures associated with the call.
    public var failures: [ECSClientTypes.Failure]?
    /// A list of tasks with the following information.
    ///
    /// * taskArn: The task ARN.
    ///
    /// * protectionEnabled: The protection status of the task. If scale-in protection is turned on for a task, the value is true. Otherwise, it is false.
    ///
    /// * expirationDate: The epoch time when protection for the task will expire.
    public var protectedTasks: [ECSClientTypes.ProtectedTask]?

    public init(
        failures: [ECSClientTypes.Failure]? = nil,
        protectedTasks: [ECSClientTypes.ProtectedTask]? = nil
    )
    {
        self.failures = failures
        self.protectedTasks = protectedTasks
    }
}

public struct UpdateTaskSetInput: Swift.Sendable {
    /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set is found in.
    /// This member is required.
    public var cluster: Swift.String?
    /// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
    /// This member is required.
    public var scale: ECSClientTypes.Scale?
    /// The short name or full Amazon Resource Name (ARN) of the service that the task set is found in.
    /// This member is required.
    public var service: Swift.String?
    /// The short name or full Amazon Resource Name (ARN) of the task set to update.
    /// This member is required.
    public var taskSet: Swift.String?

    public init(
        cluster: Swift.String? = nil,
        scale: ECSClientTypes.Scale? = nil,
        service: Swift.String? = nil,
        taskSet: Swift.String? = nil
    )
    {
        self.cluster = cluster
        self.scale = scale
        self.service = service
        self.taskSet = taskSet
    }
}

public struct UpdateTaskSetOutput: Swift.Sendable {
    /// Details about the task set.
    public var taskSet: ECSClientTypes.TaskSet?

    public init(
        taskSet: ECSClientTypes.TaskSet? = nil
    )
    {
        self.taskSet = taskSet
    }
}

extension CreateCapacityProviderInput {

    static func urlPathProvider(_ value: CreateCapacityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServiceInput {

    static func urlPathProvider(_ value: CreateServiceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTaskSetInput {

    static func urlPathProvider(_ value: CreateTaskSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAccountSettingInput {

    static func urlPathProvider(_ value: DeleteAccountSettingInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAttributesInput {

    static func urlPathProvider(_ value: DeleteAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCapacityProviderInput {

    static func urlPathProvider(_ value: DeleteCapacityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServiceInput {

    static func urlPathProvider(_ value: DeleteServiceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTaskDefinitionsInput {

    static func urlPathProvider(_ value: DeleteTaskDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTaskSetInput {

    static func urlPathProvider(_ value: DeleteTaskSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterContainerInstanceInput {

    static func urlPathProvider(_ value: DeregisterContainerInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterTaskDefinitionInput {

    static func urlPathProvider(_ value: DeregisterTaskDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCapacityProvidersInput {

    static func urlPathProvider(_ value: DescribeCapacityProvidersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClustersInput {

    static func urlPathProvider(_ value: DescribeClustersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeContainerInstancesInput {

    static func urlPathProvider(_ value: DescribeContainerInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeServiceDeploymentsInput {

    static func urlPathProvider(_ value: DescribeServiceDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeServiceRevisionsInput {

    static func urlPathProvider(_ value: DescribeServiceRevisionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeServicesInput {

    static func urlPathProvider(_ value: DescribeServicesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTaskDefinitionInput {

    static func urlPathProvider(_ value: DescribeTaskDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTasksInput {

    static func urlPathProvider(_ value: DescribeTasksInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTaskSetsInput {

    static func urlPathProvider(_ value: DescribeTaskSetsInput) -> Swift.String? {
        return "/"
    }
}

extension DiscoverPollEndpointInput {

    static func urlPathProvider(_ value: DiscoverPollEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension ExecuteCommandInput {

    static func urlPathProvider(_ value: ExecuteCommandInput) -> Swift.String? {
        return "/"
    }
}

extension GetTaskProtectionInput {

    static func urlPathProvider(_ value: GetTaskProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension ListAccountSettingsInput {

    static func urlPathProvider(_ value: ListAccountSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAttributesInput {

    static func urlPathProvider(_ value: ListAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension ListClustersInput {

    static func urlPathProvider(_ value: ListClustersInput) -> Swift.String? {
        return "/"
    }
}

extension ListContainerInstancesInput {

    static func urlPathProvider(_ value: ListContainerInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServiceDeploymentsInput {

    static func urlPathProvider(_ value: ListServiceDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListServicesInput {

    static func urlPathProvider(_ value: ListServicesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServicesByNamespaceInput {

    static func urlPathProvider(_ value: ListServicesByNamespaceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTaskDefinitionFamiliesInput {

    static func urlPathProvider(_ value: ListTaskDefinitionFamiliesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTaskDefinitionsInput {

    static func urlPathProvider(_ value: ListTaskDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTasksInput {

    static func urlPathProvider(_ value: ListTasksInput) -> Swift.String? {
        return "/"
    }
}

extension PutAccountSettingInput {

    static func urlPathProvider(_ value: PutAccountSettingInput) -> Swift.String? {
        return "/"
    }
}

extension PutAccountSettingDefaultInput {

    static func urlPathProvider(_ value: PutAccountSettingDefaultInput) -> Swift.String? {
        return "/"
    }
}

extension PutAttributesInput {

    static func urlPathProvider(_ value: PutAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension PutClusterCapacityProvidersInput {

    static func urlPathProvider(_ value: PutClusterCapacityProvidersInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterContainerInstanceInput {

    static func urlPathProvider(_ value: RegisterContainerInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterTaskDefinitionInput {

    static func urlPathProvider(_ value: RegisterTaskDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension RunTaskInput {

    static func urlPathProvider(_ value: RunTaskInput) -> Swift.String? {
        return "/"
    }
}

extension StartTaskInput {

    static func urlPathProvider(_ value: StartTaskInput) -> Swift.String? {
        return "/"
    }
}

extension StopTaskInput {

    static func urlPathProvider(_ value: StopTaskInput) -> Swift.String? {
        return "/"
    }
}

extension SubmitAttachmentStateChangesInput {

    static func urlPathProvider(_ value: SubmitAttachmentStateChangesInput) -> Swift.String? {
        return "/"
    }
}

extension SubmitContainerStateChangeInput {

    static func urlPathProvider(_ value: SubmitContainerStateChangeInput) -> Swift.String? {
        return "/"
    }
}

extension SubmitTaskStateChangeInput {

    static func urlPathProvider(_ value: SubmitTaskStateChangeInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateCapacityProviderInput {

    static func urlPathProvider(_ value: UpdateCapacityProviderInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateClusterInput {

    static func urlPathProvider(_ value: UpdateClusterInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateClusterSettingsInput {

    static func urlPathProvider(_ value: UpdateClusterSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateContainerAgentInput {

    static func urlPathProvider(_ value: UpdateContainerAgentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateContainerInstancesStateInput {

    static func urlPathProvider(_ value: UpdateContainerInstancesStateInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceInput {

    static func urlPathProvider(_ value: UpdateServiceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServicePrimaryTaskSetInput {

    static func urlPathProvider(_ value: UpdateServicePrimaryTaskSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTaskProtectionInput {

    static func urlPathProvider(_ value: UpdateTaskProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTaskSetInput {

    static func urlPathProvider(_ value: UpdateTaskSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCapacityProviderInput {

    static func write(value: CreateCapacityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoScalingGroupProvider"].write(value.autoScalingGroupProvider, with: ECSClientTypes.AutoScalingGroupProvider.write(value:to:))
        try writer["name"].write(value.name)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateClusterInput {

    static func write(value: CreateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviders"].writeList(value.capacityProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clusterName"].write(value.clusterName)
        try writer["configuration"].write(value.configuration, with: ECSClientTypes.ClusterConfiguration.write(value:to:))
        try writer["defaultCapacityProviderStrategy"].writeList(value.defaultCapacityProviderStrategy, memberWritingClosure: ECSClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceConnectDefaults"].write(value.serviceConnectDefaults, with: ECSClientTypes.ClusterServiceConnectDefaultsRequest.write(value:to:))
        try writer["settings"].writeList(value.settings, memberWritingClosure: ECSClientTypes.ClusterSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateServiceInput {

    static func write(value: CreateServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviderStrategy"].writeList(value.capacityProviderStrategy, memberWritingClosure: ECSClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clientToken"].write(value.clientToken)
        try writer["cluster"].write(value.cluster)
        try writer["deploymentConfiguration"].write(value.deploymentConfiguration, with: ECSClientTypes.DeploymentConfiguration.write(value:to:))
        try writer["deploymentController"].write(value.deploymentController, with: ECSClientTypes.DeploymentController.write(value:to:))
        try writer["desiredCount"].write(value.desiredCount)
        try writer["enableECSManagedTags"].write(value.enableECSManagedTags)
        try writer["enableExecuteCommand"].write(value.enableExecuteCommand)
        try writer["healthCheckGracePeriodSeconds"].write(value.healthCheckGracePeriodSeconds)
        try writer["launchType"].write(value.launchType)
        try writer["loadBalancers"].writeList(value.loadBalancers, memberWritingClosure: ECSClientTypes.LoadBalancer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: ECSClientTypes.NetworkConfiguration.write(value:to:))
        try writer["placementConstraints"].writeList(value.placementConstraints, memberWritingClosure: ECSClientTypes.PlacementConstraint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["placementStrategy"].writeList(value.placementStrategy, memberWritingClosure: ECSClientTypes.PlacementStrategy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["platformVersion"].write(value.platformVersion)
        try writer["propagateTags"].write(value.propagateTags)
        try writer["role"].write(value.role)
        try writer["schedulingStrategy"].write(value.schedulingStrategy)
        try writer["serviceConnectConfiguration"].write(value.serviceConnectConfiguration, with: ECSClientTypes.ServiceConnectConfiguration.write(value:to:))
        try writer["serviceName"].write(value.serviceName)
        try writer["serviceRegistries"].writeList(value.serviceRegistries, memberWritingClosure: ECSClientTypes.ServiceRegistry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskDefinition"].write(value.taskDefinition)
        try writer["volumeConfigurations"].writeList(value.volumeConfigurations, memberWritingClosure: ECSClientTypes.ServiceVolumeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateTaskSetInput {

    static func write(value: CreateTaskSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviderStrategy"].writeList(value.capacityProviderStrategy, memberWritingClosure: ECSClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clientToken"].write(value.clientToken)
        try writer["cluster"].write(value.cluster)
        try writer["externalId"].write(value.externalId)
        try writer["launchType"].write(value.launchType)
        try writer["loadBalancers"].writeList(value.loadBalancers, memberWritingClosure: ECSClientTypes.LoadBalancer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: ECSClientTypes.NetworkConfiguration.write(value:to:))
        try writer["platformVersion"].write(value.platformVersion)
        try writer["scale"].write(value.scale, with: ECSClientTypes.Scale.write(value:to:))
        try writer["service"].write(value.service)
        try writer["serviceRegistries"].writeList(value.serviceRegistries, memberWritingClosure: ECSClientTypes.ServiceRegistry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskDefinition"].write(value.taskDefinition)
    }
}

extension DeleteAccountSettingInput {

    static func write(value: DeleteAccountSettingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["principalArn"].write(value.principalArn)
    }
}

extension DeleteAttributesInput {

    static func write(value: DeleteAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeList(value.attributes, memberWritingClosure: ECSClientTypes.Attribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
    }
}

extension DeleteCapacityProviderInput {

    static func write(value: DeleteCapacityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProvider"].write(value.capacityProvider)
    }
}

extension DeleteClusterInput {

    static func write(value: DeleteClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
    }
}

extension DeleteServiceInput {

    static func write(value: DeleteServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["force"].write(value.force)
        try writer["service"].write(value.service)
    }
}

extension DeleteTaskDefinitionsInput {

    static func write(value: DeleteTaskDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["taskDefinitions"].writeList(value.taskDefinitions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteTaskSetInput {

    static func write(value: DeleteTaskSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["force"].write(value.force)
        try writer["service"].write(value.service)
        try writer["taskSet"].write(value.taskSet)
    }
}

extension DeregisterContainerInstanceInput {

    static func write(value: DeregisterContainerInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstance"].write(value.containerInstance)
        try writer["force"].write(value.force)
    }
}

extension DeregisterTaskDefinitionInput {

    static func write(value: DeregisterTaskDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["taskDefinition"].write(value.taskDefinition)
    }
}

extension DescribeCapacityProvidersInput {

    static func write(value: DescribeCapacityProvidersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviders"].writeList(value.capacityProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.CapacityProviderField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeClustersInput {

    static func write(value: DescribeClustersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusters"].writeList(value.clusters, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.ClusterField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeContainerInstancesInput {

    static func write(value: DescribeContainerInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstances"].writeList(value.containerInstances, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.ContainerInstanceField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeServiceDeploymentsInput {

    static func write(value: DescribeServiceDeploymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceDeploymentArns"].writeList(value.serviceDeploymentArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeServiceRevisionsInput {

    static func write(value: DescribeServiceRevisionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceRevisionArns"].writeList(value.serviceRevisionArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeServicesInput {

    static func write(value: DescribeServicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.ServiceField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["services"].writeList(value.services, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeTaskDefinitionInput {

    static func write(value: DescribeTaskDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.TaskDefinitionField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskDefinition"].write(value.taskDefinition)
    }
}

extension DescribeTasksInput {

    static func write(value: DescribeTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.TaskField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tasks"].writeList(value.tasks, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeTaskSetsInput {

    static func write(value: DescribeTaskSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.TaskSetField>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["service"].write(value.service)
        try writer["taskSets"].writeList(value.taskSets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DiscoverPollEndpointInput {

    static func write(value: DiscoverPollEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstance"].write(value.containerInstance)
    }
}

extension ExecuteCommandInput {

    static func write(value: ExecuteCommandInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["command"].write(value.command)
        try writer["container"].write(value.container)
        try writer["interactive"].write(value.interactive)
        try writer["task"].write(value.task)
    }
}

extension GetTaskProtectionInput {

    static func write(value: GetTaskProtectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["tasks"].writeList(value.tasks, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListAccountSettingsInput {

    static func write(value: ListAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["effectiveSettings"].write(value.effectiveSettings)
        try writer["maxResults"].write(value.maxResults)
        try writer["name"].write(value.name)
        try writer["nextToken"].write(value.nextToken)
        try writer["principalArn"].write(value.principalArn)
        try writer["value"].write(value.value)
    }
}

extension ListAttributesInput {

    static func write(value: ListAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["attributeValue"].write(value.attributeValue)
        try writer["cluster"].write(value.cluster)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["targetType"].write(value.targetType)
    }
}

extension ListClustersInput {

    static func write(value: ListClustersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListContainerInstancesInput {

    static func write(value: ListContainerInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["filter"].write(value.filter)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["status"].write(value.status)
    }
}

extension ListServiceDeploymentsInput {

    static func write(value: ListServiceDeploymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["createdAt"].write(value.createdAt, with: ECSClientTypes.CreatedAt.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["service"].write(value.service)
        try writer["status"].writeList(value.status, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.ServiceDeploymentStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListServicesInput {

    static func write(value: ListServicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["launchType"].write(value.launchType)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["schedulingStrategy"].write(value.schedulingStrategy)
    }
}

extension ListServicesByNamespaceInput {

    static func write(value: ListServicesByNamespaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["namespace"].write(value.namespace)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension ListTaskDefinitionFamiliesInput {

    static func write(value: ListTaskDefinitionFamiliesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["familyPrefix"].write(value.familyPrefix)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["status"].write(value.status)
    }
}

extension ListTaskDefinitionsInput {

    static func write(value: ListTaskDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["familyPrefix"].write(value.familyPrefix)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sort"].write(value.sort)
        try writer["status"].write(value.status)
    }
}

extension ListTasksInput {

    static func write(value: ListTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstance"].write(value.containerInstance)
        try writer["desiredStatus"].write(value.desiredStatus)
        try writer["family"].write(value.family)
        try writer["launchType"].write(value.launchType)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceName"].write(value.serviceName)
        try writer["startedBy"].write(value.startedBy)
    }
}

extension PutAccountSettingInput {

    static func write(value: PutAccountSettingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["principalArn"].write(value.principalArn)
        try writer["value"].write(value.value)
    }
}

extension PutAccountSettingDefaultInput {

    static func write(value: PutAccountSettingDefaultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }
}

extension PutAttributesInput {

    static func write(value: PutAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeList(value.attributes, memberWritingClosure: ECSClientTypes.Attribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
    }
}

extension PutClusterCapacityProvidersInput {

    static func write(value: PutClusterCapacityProvidersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviders"].writeList(value.capacityProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
        try writer["defaultCapacityProviderStrategy"].writeList(value.defaultCapacityProviderStrategy, memberWritingClosure: ECSClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RegisterContainerInstanceInput {

    static func write(value: RegisterContainerInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeList(value.attributes, memberWritingClosure: ECSClientTypes.Attribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
        try writer["containerInstanceArn"].write(value.containerInstanceArn)
        try writer["instanceIdentityDocument"].write(value.instanceIdentityDocument)
        try writer["instanceIdentityDocumentSignature"].write(value.instanceIdentityDocumentSignature)
        try writer["platformDevices"].writeList(value.platformDevices, memberWritingClosure: ECSClientTypes.PlatformDevice.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["totalResources"].writeList(value.totalResources, memberWritingClosure: ECSClientTypes.Resource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["versionInfo"].write(value.versionInfo, with: ECSClientTypes.VersionInfo.write(value:to:))
    }
}

extension RegisterTaskDefinitionInput {

    static func write(value: RegisterTaskDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerDefinitions"].writeList(value.containerDefinitions, memberWritingClosure: ECSClientTypes.ContainerDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cpu"].write(value.cpu)
        try writer["ephemeralStorage"].write(value.ephemeralStorage, with: ECSClientTypes.EphemeralStorage.write(value:to:))
        try writer["executionRoleArn"].write(value.executionRoleArn)
        try writer["family"].write(value.family)
        try writer["inferenceAccelerators"].writeList(value.inferenceAccelerators, memberWritingClosure: ECSClientTypes.InferenceAccelerator.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ipcMode"].write(value.ipcMode)
        try writer["memory"].write(value.memory)
        try writer["networkMode"].write(value.networkMode)
        try writer["pidMode"].write(value.pidMode)
        try writer["placementConstraints"].writeList(value.placementConstraints, memberWritingClosure: ECSClientTypes.TaskDefinitionPlacementConstraint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["proxyConfiguration"].write(value.proxyConfiguration, with: ECSClientTypes.ProxyConfiguration.write(value:to:))
        try writer["requiresCompatibilities"].writeList(value.requiresCompatibilities, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.Compatibility>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["runtimePlatform"].write(value.runtimePlatform, with: ECSClientTypes.RuntimePlatform.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskRoleArn"].write(value.taskRoleArn)
        try writer["volumes"].writeList(value.volumes, memberWritingClosure: ECSClientTypes.Volume.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RunTaskInput {

    static func write(value: RunTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviderStrategy"].writeList(value.capacityProviderStrategy, memberWritingClosure: ECSClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["clientToken"].write(value.clientToken)
        try writer["cluster"].write(value.cluster)
        try writer["count"].write(value.count)
        try writer["enableECSManagedTags"].write(value.enableECSManagedTags)
        try writer["enableExecuteCommand"].write(value.enableExecuteCommand)
        try writer["group"].write(value.group)
        try writer["launchType"].write(value.launchType)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: ECSClientTypes.NetworkConfiguration.write(value:to:))
        try writer["overrides"].write(value.overrides, with: ECSClientTypes.TaskOverride.write(value:to:))
        try writer["placementConstraints"].writeList(value.placementConstraints, memberWritingClosure: ECSClientTypes.PlacementConstraint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["placementStrategy"].writeList(value.placementStrategy, memberWritingClosure: ECSClientTypes.PlacementStrategy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["platformVersion"].write(value.platformVersion)
        try writer["propagateTags"].write(value.propagateTags)
        try writer["referenceId"].write(value.referenceId)
        try writer["startedBy"].write(value.startedBy)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskDefinition"].write(value.taskDefinition)
        try writer["volumeConfigurations"].writeList(value.volumeConfigurations, memberWritingClosure: ECSClientTypes.TaskVolumeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartTaskInput {

    static func write(value: StartTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstances"].writeList(value.containerInstances, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["enableECSManagedTags"].write(value.enableECSManagedTags)
        try writer["enableExecuteCommand"].write(value.enableExecuteCommand)
        try writer["group"].write(value.group)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: ECSClientTypes.NetworkConfiguration.write(value:to:))
        try writer["overrides"].write(value.overrides, with: ECSClientTypes.TaskOverride.write(value:to:))
        try writer["propagateTags"].write(value.propagateTags)
        try writer["referenceId"].write(value.referenceId)
        try writer["startedBy"].write(value.startedBy)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskDefinition"].write(value.taskDefinition)
        try writer["volumeConfigurations"].writeList(value.volumeConfigurations, memberWritingClosure: ECSClientTypes.TaskVolumeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StopTaskInput {

    static func write(value: StopTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["reason"].write(value.reason)
        try writer["task"].write(value.task)
    }
}

extension SubmitAttachmentStateChangesInput {

    static func write(value: SubmitAttachmentStateChangesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attachments"].writeList(value.attachments, memberWritingClosure: ECSClientTypes.AttachmentStateChange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
    }
}

extension SubmitContainerStateChangeInput {

    static func write(value: SubmitContainerStateChangeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerName"].write(value.containerName)
        try writer["exitCode"].write(value.exitCode)
        try writer["networkBindings"].writeList(value.networkBindings, memberWritingClosure: ECSClientTypes.NetworkBinding.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["reason"].write(value.reason)
        try writer["runtimeId"].write(value.runtimeId)
        try writer["status"].write(value.status)
        try writer["task"].write(value.task)
    }
}

extension SubmitTaskStateChangeInput {

    static func write(value: SubmitTaskStateChangeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attachments"].writeList(value.attachments, memberWritingClosure: ECSClientTypes.AttachmentStateChange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
        try writer["containers"].writeList(value.containers, memberWritingClosure: ECSClientTypes.ContainerStateChange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["executionStoppedAt"].writeTimestamp(value.executionStoppedAt, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["managedAgents"].writeList(value.managedAgents, memberWritingClosure: ECSClientTypes.ManagedAgentStateChange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["pullStartedAt"].writeTimestamp(value.pullStartedAt, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["pullStoppedAt"].writeTimestamp(value.pullStoppedAt, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["reason"].write(value.reason)
        try writer["status"].write(value.status)
        try writer["task"].write(value.task)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateCapacityProviderInput {

    static func write(value: UpdateCapacityProviderInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoScalingGroupProvider"].write(value.autoScalingGroupProvider, with: ECSClientTypes.AutoScalingGroupProviderUpdate.write(value:to:))
        try writer["name"].write(value.name)
    }
}

extension UpdateClusterInput {

    static func write(value: UpdateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["configuration"].write(value.configuration, with: ECSClientTypes.ClusterConfiguration.write(value:to:))
        try writer["serviceConnectDefaults"].write(value.serviceConnectDefaults, with: ECSClientTypes.ClusterServiceConnectDefaultsRequest.write(value:to:))
        try writer["settings"].writeList(value.settings, memberWritingClosure: ECSClientTypes.ClusterSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateClusterSettingsInput {

    static func write(value: UpdateClusterSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["settings"].writeList(value.settings, memberWritingClosure: ECSClientTypes.ClusterSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateContainerAgentInput {

    static func write(value: UpdateContainerAgentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstance"].write(value.containerInstance)
    }
}

extension UpdateContainerInstancesStateInput {

    static func write(value: UpdateContainerInstancesStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["containerInstances"].writeList(value.containerInstances, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["status"].write(value.status)
    }
}

extension UpdateServiceInput {

    static func write(value: UpdateServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capacityProviderStrategy"].writeList(value.capacityProviderStrategy, memberWritingClosure: ECSClientTypes.CapacityProviderStrategyItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cluster"].write(value.cluster)
        try writer["deploymentConfiguration"].write(value.deploymentConfiguration, with: ECSClientTypes.DeploymentConfiguration.write(value:to:))
        try writer["desiredCount"].write(value.desiredCount)
        try writer["enableECSManagedTags"].write(value.enableECSManagedTags)
        try writer["enableExecuteCommand"].write(value.enableExecuteCommand)
        try writer["forceNewDeployment"].write(value.forceNewDeployment)
        try writer["healthCheckGracePeriodSeconds"].write(value.healthCheckGracePeriodSeconds)
        try writer["loadBalancers"].writeList(value.loadBalancers, memberWritingClosure: ECSClientTypes.LoadBalancer.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["networkConfiguration"].write(value.networkConfiguration, with: ECSClientTypes.NetworkConfiguration.write(value:to:))
        try writer["placementConstraints"].writeList(value.placementConstraints, memberWritingClosure: ECSClientTypes.PlacementConstraint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["placementStrategy"].writeList(value.placementStrategy, memberWritingClosure: ECSClientTypes.PlacementStrategy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["platformVersion"].write(value.platformVersion)
        try writer["propagateTags"].write(value.propagateTags)
        try writer["service"].write(value.service)
        try writer["serviceConnectConfiguration"].write(value.serviceConnectConfiguration, with: ECSClientTypes.ServiceConnectConfiguration.write(value:to:))
        try writer["serviceRegistries"].writeList(value.serviceRegistries, memberWritingClosure: ECSClientTypes.ServiceRegistry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["taskDefinition"].write(value.taskDefinition)
        try writer["volumeConfigurations"].writeList(value.volumeConfigurations, memberWritingClosure: ECSClientTypes.ServiceVolumeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateServicePrimaryTaskSetInput {

    static func write(value: UpdateServicePrimaryTaskSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["primaryTaskSet"].write(value.primaryTaskSet)
        try writer["service"].write(value.service)
    }
}

extension UpdateTaskProtectionInput {

    static func write(value: UpdateTaskProtectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["expiresInMinutes"].write(value.expiresInMinutes)
        try writer["protectionEnabled"].write(value.protectionEnabled)
        try writer["tasks"].writeList(value.tasks, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateTaskSetInput {

    static func write(value: UpdateTaskSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cluster"].write(value.cluster)
        try writer["scale"].write(value.scale, with: ECSClientTypes.Scale.write(value:to:))
        try writer["service"].write(value.service)
        try writer["taskSet"].write(value.taskSet)
    }
}

extension CreateCapacityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCapacityProviderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCapacityProviderOutput()
        value.capacityProvider = try reader["capacityProvider"].readIfPresent(with: ECSClientTypes.CapacityProvider.read(from:))
        return value
    }
}

extension CreateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: ECSClientTypes.Cluster.read(from:))
        return value
    }
}

extension CreateServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ECSClientTypes.Service.read(from:))
        return value
    }
}

extension CreateTaskSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTaskSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTaskSetOutput()
        value.taskSet = try reader["taskSet"].readIfPresent(with: ECSClientTypes.TaskSet.read(from:))
        return value
    }
}

extension DeleteAccountSettingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccountSettingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAccountSettingOutput()
        value.setting = try reader["setting"].readIfPresent(with: ECSClientTypes.Setting.read(from:))
        return value
    }
}

extension DeleteAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAttributesOutput()
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteCapacityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCapacityProviderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteCapacityProviderOutput()
        value.capacityProvider = try reader["capacityProvider"].readIfPresent(with: ECSClientTypes.CapacityProvider.read(from:))
        return value
    }
}

extension DeleteClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: ECSClientTypes.Cluster.read(from:))
        return value
    }
}

extension DeleteServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ECSClientTypes.Service.read(from:))
        return value
    }
}

extension DeleteTaskDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTaskDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTaskDefinitionsOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskDefinitions = try reader["taskDefinitions"].readListIfPresent(memberReadingClosure: ECSClientTypes.TaskDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteTaskSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTaskSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTaskSetOutput()
        value.taskSet = try reader["taskSet"].readIfPresent(with: ECSClientTypes.TaskSet.read(from:))
        return value
    }
}

extension DeregisterContainerInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterContainerInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeregisterContainerInstanceOutput()
        value.containerInstance = try reader["containerInstance"].readIfPresent(with: ECSClientTypes.ContainerInstance.read(from:))
        return value
    }
}

extension DeregisterTaskDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterTaskDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeregisterTaskDefinitionOutput()
        value.taskDefinition = try reader["taskDefinition"].readIfPresent(with: ECSClientTypes.TaskDefinition.read(from:))
        return value
    }
}

extension DescribeCapacityProvidersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCapacityProvidersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCapacityProvidersOutput()
        value.capacityProviders = try reader["capacityProviders"].readListIfPresent(memberReadingClosure: ECSClientTypes.CapacityProvider.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClustersOutput()
        value.clusters = try reader["clusters"].readListIfPresent(memberReadingClosure: ECSClientTypes.Cluster.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeContainerInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeContainerInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeContainerInstancesOutput()
        value.containerInstances = try reader["containerInstances"].readListIfPresent(memberReadingClosure: ECSClientTypes.ContainerInstance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeServiceDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeServiceDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeServiceDeploymentsOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceDeployments = try reader["serviceDeployments"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceDeployment.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeServiceRevisionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeServiceRevisionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeServiceRevisionsOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRevisions = try reader["serviceRevisions"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceRevision.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeServicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeServicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeServicesOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.services = try reader["services"].readListIfPresent(memberReadingClosure: ECSClientTypes.Service.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTaskDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTaskDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTaskDefinitionOutput()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskDefinition = try reader["taskDefinition"].readIfPresent(with: ECSClientTypes.TaskDefinition.read(from:))
        return value
    }
}

extension DescribeTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTasksOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tasks = try reader["tasks"].readListIfPresent(memberReadingClosure: ECSClientTypes.Task.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTaskSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTaskSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTaskSetsOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskSets = try reader["taskSets"].readListIfPresent(memberReadingClosure: ECSClientTypes.TaskSet.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DiscoverPollEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DiscoverPollEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DiscoverPollEndpointOutput()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.serviceConnectEndpoint = try reader["serviceConnectEndpoint"].readIfPresent()
        value.telemetryEndpoint = try reader["telemetryEndpoint"].readIfPresent()
        return value
    }
}

extension ExecuteCommandOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExecuteCommandOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExecuteCommandOutput()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.containerArn = try reader["containerArn"].readIfPresent()
        value.containerName = try reader["containerName"].readIfPresent()
        value.interactive = try reader["interactive"].readIfPresent() ?? false
        value.session = try reader["session"].readIfPresent(with: ECSClientTypes.Session.read(from:))
        value.taskArn = try reader["taskArn"].readIfPresent()
        return value
    }
}

extension GetTaskProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTaskProtectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTaskProtectionOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.protectedTasks = try reader["protectedTasks"].readListIfPresent(memberReadingClosure: ECSClientTypes.ProtectedTask.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccountSettingsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.settings = try reader["settings"].readListIfPresent(memberReadingClosure: ECSClientTypes.Setting.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAttributesOutput()
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClustersOutput()
        value.clusterArns = try reader["clusterArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListContainerInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListContainerInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListContainerInstancesOutput()
        value.containerInstanceArns = try reader["containerInstanceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListServiceDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServiceDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServiceDeploymentsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.serviceDeployments = try reader["serviceDeployments"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceDeploymentBrief.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListServicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.serviceArns = try reader["serviceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListServicesByNamespaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicesByNamespaceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicesByNamespaceOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.serviceArns = try reader["serviceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTaskDefinitionFamiliesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTaskDefinitionFamiliesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTaskDefinitionFamiliesOutput()
        value.families = try reader["families"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTaskDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTaskDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTaskDefinitionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.taskDefinitionArns = try reader["taskDefinitionArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTasksOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.taskArns = try reader["taskArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAccountSettingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountSettingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAccountSettingOutput()
        value.setting = try reader["setting"].readIfPresent(with: ECSClientTypes.Setting.read(from:))
        return value
    }
}

extension PutAccountSettingDefaultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountSettingDefaultOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAccountSettingDefaultOutput()
        value.setting = try reader["setting"].readIfPresent(with: ECSClientTypes.Setting.read(from:))
        return value
    }
}

extension PutAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAttributesOutput()
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutClusterCapacityProvidersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutClusterCapacityProvidersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutClusterCapacityProvidersOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: ECSClientTypes.Cluster.read(from:))
        return value
    }
}

extension RegisterContainerInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterContainerInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterContainerInstanceOutput()
        value.containerInstance = try reader["containerInstance"].readIfPresent(with: ECSClientTypes.ContainerInstance.read(from:))
        return value
    }
}

extension RegisterTaskDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterTaskDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterTaskDefinitionOutput()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskDefinition = try reader["taskDefinition"].readIfPresent(with: ECSClientTypes.TaskDefinition.read(from:))
        return value
    }
}

extension RunTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RunTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RunTaskOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tasks = try reader["tasks"].readListIfPresent(memberReadingClosure: ECSClientTypes.Task.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTaskOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tasks = try reader["tasks"].readListIfPresent(memberReadingClosure: ECSClientTypes.Task.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StopTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopTaskOutput()
        value.task = try reader["task"].readIfPresent(with: ECSClientTypes.Task.read(from:))
        return value
    }
}

extension SubmitAttachmentStateChangesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SubmitAttachmentStateChangesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SubmitAttachmentStateChangesOutput()
        value.acknowledgment = try reader["acknowledgment"].readIfPresent()
        return value
    }
}

extension SubmitContainerStateChangeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SubmitContainerStateChangeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SubmitContainerStateChangeOutput()
        value.acknowledgment = try reader["acknowledgment"].readIfPresent()
        return value
    }
}

extension SubmitTaskStateChangeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SubmitTaskStateChangeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SubmitTaskStateChangeOutput()
        value.acknowledgment = try reader["acknowledgment"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateCapacityProviderOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCapacityProviderOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateCapacityProviderOutput()
        value.capacityProvider = try reader["capacityProvider"].readIfPresent(with: ECSClientTypes.CapacityProvider.read(from:))
        return value
    }
}

extension UpdateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: ECSClientTypes.Cluster.read(from:))
        return value
    }
}

extension UpdateClusterSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterSettingsOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: ECSClientTypes.Cluster.read(from:))
        return value
    }
}

extension UpdateContainerAgentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContainerAgentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateContainerAgentOutput()
        value.containerInstance = try reader["containerInstance"].readIfPresent(with: ECSClientTypes.ContainerInstance.read(from:))
        return value
    }
}

extension UpdateContainerInstancesStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContainerInstancesStateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateContainerInstancesStateOutput()
        value.containerInstances = try reader["containerInstances"].readListIfPresent(memberReadingClosure: ECSClientTypes.ContainerInstance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ECSClientTypes.Service.read(from:))
        return value
    }
}

extension UpdateServicePrimaryTaskSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServicePrimaryTaskSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServicePrimaryTaskSetOutput()
        value.taskSet = try reader["taskSet"].readIfPresent(with: ECSClientTypes.TaskSet.read(from:))
        return value
    }
}

extension UpdateTaskProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTaskProtectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTaskProtectionOutput()
        value.failures = try reader["failures"].readListIfPresent(memberReadingClosure: ECSClientTypes.Failure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.protectedTasks = try reader["protectedTasks"].readListIfPresent(memberReadingClosure: ECSClientTypes.ProtectedTask.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateTaskSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTaskSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTaskSetOutput()
        value.taskSet = try reader["taskSet"].readIfPresent(with: ECSClientTypes.TaskSet.read(from:))
        return value
    }
}

enum CreateCapacityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UpdateInProgressException": return try UpdateInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NamespaceNotFoundException": return try NamespaceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NamespaceNotFoundException": return try NamespaceNotFoundException.makeError(baseError: baseError)
            case "PlatformTaskDefinitionIncompatibilityException": return try PlatformTaskDefinitionIncompatibilityException.makeError(baseError: baseError)
            case "PlatformUnknownException": return try PlatformUnknownException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTaskSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NamespaceNotFoundException": return try NamespaceNotFoundException.makeError(baseError: baseError)
            case "PlatformTaskDefinitionIncompatibilityException": return try PlatformTaskDefinitionIncompatibilityException.makeError(baseError: baseError)
            case "PlatformUnknownException": return try PlatformUnknownException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotActiveException": return try ServiceNotActiveException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccountSettingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCapacityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterContainsContainerInstancesException": return try ClusterContainsContainerInstancesException.makeError(baseError: baseError)
            case "ClusterContainsServicesException": return try ClusterContainsServicesException.makeError(baseError: baseError)
            case "ClusterContainsTasksException": return try ClusterContainsTasksException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UpdateInProgressException": return try UpdateInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTaskDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTaskSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotActiveException": return try ServiceNotActiveException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "TaskSetNotFoundException": return try TaskSetNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterContainerInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterTaskDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCapacityProvidersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeContainerInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeServiceDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeServiceRevisionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeServicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTaskDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTaskSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotActiveException": return try ServiceNotActiveException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DiscoverPollEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExecuteCommandOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "TargetNotConnectedException": return try TargetNotConnectedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTaskProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListContainerInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServiceDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicesByNamespaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NamespaceNotFoundException": return try NamespaceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTaskDefinitionFamiliesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTaskDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountSettingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountSettingDefaultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AttributeLimitExceededException": return try AttributeLimitExceededException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutClusterCapacityProvidersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UpdateInProgressException": return try UpdateInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterContainerInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterTaskDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RunTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BlockedException": return try BlockedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "PlatformTaskDefinitionIncompatibilityException": return try PlatformTaskDefinitionIncompatibilityException.makeError(baseError: baseError)
            case "PlatformUnknownException": return try PlatformUnknownException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SubmitAttachmentStateChangesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SubmitContainerStateChangeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SubmitTaskStateChangeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCapacityProviderOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NamespaceNotFoundException": return try NamespaceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContainerAgentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "MissingVersionException": return try MissingVersionException.makeError(baseError: baseError)
            case "NoUpdateAvailableException": return try NoUpdateAvailableException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UpdateInProgressException": return try UpdateInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContainerInstancesStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "NamespaceNotFoundException": return try NamespaceNotFoundException.makeError(baseError: baseError)
            case "PlatformTaskDefinitionIncompatibilityException": return try PlatformTaskDefinitionIncompatibilityException.makeError(baseError: baseError)
            case "PlatformUnknownException": return try PlatformUnknownException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotActiveException": return try ServiceNotActiveException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServicePrimaryTaskSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotActiveException": return try ServiceNotActiveException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "TaskSetNotFoundException": return try TaskSetNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTaskProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTaskSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ClusterNotFoundException": return try ClusterNotFoundException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceNotActiveException": return try ServiceNotActiveException.makeError(baseError: baseError)
            case "ServiceNotFoundException": return try ServiceNotFoundException.makeError(baseError: baseError)
            case "TaskSetNotFoundException": return try TaskSetNotFoundException.makeError(baseError: baseError)
            case "UnsupportedFeatureException": return try UnsupportedFeatureException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServerException {
        let reader = baseError.errorBodyReader
        var value = ServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UpdateInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UpdateInProgressException {
        let reader = baseError.errorBodyReader
        var value = UpdateInProgressException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClientException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ClientException {
        let reader = baseError.errorBodyReader
        var value = ClientException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NamespaceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NamespaceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = NamespaceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ClusterNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ClusterNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PlatformUnknownException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PlatformUnknownException {
        let reader = baseError.errorBodyReader
        var value = PlatformUnknownException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedFeatureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedFeatureException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedFeatureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PlatformTaskDefinitionIncompatibilityException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PlatformTaskDefinitionIncompatibilityException {
        let reader = baseError.errorBodyReader
        var value = PlatformTaskDefinitionIncompatibilityException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ServiceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceNotActiveException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceNotActiveException {
        let reader = baseError.errorBodyReader
        var value = ServiceNotActiveException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TargetNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TargetNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TargetNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterContainsServicesException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ClusterContainsServicesException {
        let reader = baseError.errorBodyReader
        var value = ClusterContainsServicesException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterContainsTasksException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ClusterContainsTasksException {
        let reader = baseError.errorBodyReader
        var value = ClusterContainsTasksException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClusterContainsContainerInstancesException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ClusterContainsContainerInstancesException {
        let reader = baseError.errorBodyReader
        var value = ClusterContainsContainerInstancesException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TaskSetNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TaskSetNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TaskSetNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TargetNotConnectedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TargetNotConnectedException {
        let reader = baseError.errorBodyReader
        var value = TargetNotConnectedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AttributeLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AttributeLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = AttributeLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BlockedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BlockedException {
        let reader = baseError.errorBodyReader
        var value = BlockedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceIds = try reader["resourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingVersionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MissingVersionException {
        let reader = baseError.errorBodyReader
        var value = MissingVersionException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NoUpdateAvailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NoUpdateAvailableException {
        let reader = baseError.errorBodyReader
        var value = NoUpdateAvailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ECSClientTypes.CapacityProvider {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.CapacityProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.CapacityProvider()
        value.capacityProviderArn = try reader["capacityProviderArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.autoScalingGroupProvider = try reader["autoScalingGroupProvider"].readIfPresent(with: ECSClientTypes.AutoScalingGroupProvider.read(from:))
        value.updateStatus = try reader["updateStatus"].readIfPresent()
        value.updateStatusReason = try reader["updateStatusReason"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.Tag {

    static func write(value: ECSClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Tag()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.AutoScalingGroupProvider {

    static func write(value: ECSClientTypes.AutoScalingGroupProvider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoScalingGroupArn"].write(value.autoScalingGroupArn)
        try writer["managedDraining"].write(value.managedDraining)
        try writer["managedScaling"].write(value.managedScaling, with: ECSClientTypes.ManagedScaling.write(value:to:))
        try writer["managedTerminationProtection"].write(value.managedTerminationProtection)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.AutoScalingGroupProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.AutoScalingGroupProvider()
        value.autoScalingGroupArn = try reader["autoScalingGroupArn"].readIfPresent() ?? ""
        value.managedScaling = try reader["managedScaling"].readIfPresent(with: ECSClientTypes.ManagedScaling.read(from:))
        value.managedTerminationProtection = try reader["managedTerminationProtection"].readIfPresent()
        value.managedDraining = try reader["managedDraining"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ManagedScaling {

    static func write(value: ECSClientTypes.ManagedScaling?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceWarmupPeriod"].write(value.instanceWarmupPeriod)
        try writer["maximumScalingStepSize"].write(value.maximumScalingStepSize)
        try writer["minimumScalingStepSize"].write(value.minimumScalingStepSize)
        try writer["status"].write(value.status)
        try writer["targetCapacity"].write(value.targetCapacity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ManagedScaling {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ManagedScaling()
        value.status = try reader["status"].readIfPresent()
        value.targetCapacity = try reader["targetCapacity"].readIfPresent()
        value.minimumScalingStepSize = try reader["minimumScalingStepSize"].readIfPresent()
        value.maximumScalingStepSize = try reader["maximumScalingStepSize"].readIfPresent()
        value.instanceWarmupPeriod = try reader["instanceWarmupPeriod"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Cluster {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Cluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Cluster()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.configuration = try reader["configuration"].readIfPresent(with: ECSClientTypes.ClusterConfiguration.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.registeredContainerInstancesCount = try reader["registeredContainerInstancesCount"].readIfPresent() ?? 0
        value.runningTasksCount = try reader["runningTasksCount"].readIfPresent() ?? 0
        value.pendingTasksCount = try reader["pendingTasksCount"].readIfPresent() ?? 0
        value.activeServicesCount = try reader["activeServicesCount"].readIfPresent() ?? 0
        value.statistics = try reader["statistics"].readListIfPresent(memberReadingClosure: ECSClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.settings = try reader["settings"].readListIfPresent(memberReadingClosure: ECSClientTypes.ClusterSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.capacityProviders = try reader["capacityProviders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.defaultCapacityProviderStrategy = try reader["defaultCapacityProviderStrategy"].readListIfPresent(memberReadingClosure: ECSClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attachments = try reader["attachments"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attachmentsStatus = try reader["attachmentsStatus"].readIfPresent()
        value.serviceConnectDefaults = try reader["serviceConnectDefaults"].readIfPresent(with: ECSClientTypes.ClusterServiceConnectDefaults.read(from:))
        return value
    }
}

extension ECSClientTypes.ClusterServiceConnectDefaults {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ClusterServiceConnectDefaults {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ClusterServiceConnectDefaults()
        value.namespace = try reader["namespace"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Attachment {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Attachment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Attachment()
        value.id = try reader["id"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.details = try reader["details"].readListIfPresent(memberReadingClosure: ECSClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.KeyValuePair {

    static func write(value: ECSClientTypes.KeyValuePair?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.KeyValuePair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.KeyValuePair()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.CapacityProviderStrategyItem {

    static func write(value: ECSClientTypes.CapacityProviderStrategyItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["base"].write(value.base)
        try writer["capacityProvider"].write(value.capacityProvider)
        try writer["weight"].write(value.weight)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.CapacityProviderStrategyItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.CapacityProviderStrategyItem()
        value.capacityProvider = try reader["capacityProvider"].readIfPresent() ?? ""
        value.weight = try reader["weight"].readIfPresent() ?? 0
        value.base = try reader["base"].readIfPresent() ?? 0
        return value
    }
}

extension ECSClientTypes.ClusterSetting {

    static func write(value: ECSClientTypes.ClusterSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ClusterSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ClusterSetting()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ClusterConfiguration {

    static func write(value: ECSClientTypes.ClusterConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["executeCommandConfiguration"].write(value.executeCommandConfiguration, with: ECSClientTypes.ExecuteCommandConfiguration.write(value:to:))
        try writer["managedStorageConfiguration"].write(value.managedStorageConfiguration, with: ECSClientTypes.ManagedStorageConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ClusterConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ClusterConfiguration()
        value.executeCommandConfiguration = try reader["executeCommandConfiguration"].readIfPresent(with: ECSClientTypes.ExecuteCommandConfiguration.read(from:))
        value.managedStorageConfiguration = try reader["managedStorageConfiguration"].readIfPresent(with: ECSClientTypes.ManagedStorageConfiguration.read(from:))
        return value
    }
}

extension ECSClientTypes.ManagedStorageConfiguration {

    static func write(value: ECSClientTypes.ManagedStorageConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fargateEphemeralStorageKmsKeyId"].write(value.fargateEphemeralStorageKmsKeyId)
        try writer["kmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ManagedStorageConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ManagedStorageConfiguration()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.fargateEphemeralStorageKmsKeyId = try reader["fargateEphemeralStorageKmsKeyId"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ExecuteCommandConfiguration {

    static func write(value: ECSClientTypes.ExecuteCommandConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["logConfiguration"].write(value.logConfiguration, with: ECSClientTypes.ExecuteCommandLogConfiguration.write(value:to:))
        try writer["logging"].write(value.logging)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ExecuteCommandConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ExecuteCommandConfiguration()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.logging = try reader["logging"].readIfPresent()
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: ECSClientTypes.ExecuteCommandLogConfiguration.read(from:))
        return value
    }
}

extension ECSClientTypes.ExecuteCommandLogConfiguration {

    static func write(value: ECSClientTypes.ExecuteCommandLogConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cloudWatchEncryptionEnabled"].write(value.cloudWatchEncryptionEnabled)
        try writer["cloudWatchLogGroupName"].write(value.cloudWatchLogGroupName)
        try writer["s3BucketName"].write(value.s3BucketName)
        try writer["s3EncryptionEnabled"].write(value.s3EncryptionEnabled)
        try writer["s3KeyPrefix"].write(value.s3KeyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ExecuteCommandLogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ExecuteCommandLogConfiguration()
        value.cloudWatchLogGroupName = try reader["cloudWatchLogGroupName"].readIfPresent()
        value.cloudWatchEncryptionEnabled = try reader["cloudWatchEncryptionEnabled"].readIfPresent() ?? false
        value.s3BucketName = try reader["s3BucketName"].readIfPresent()
        value.s3EncryptionEnabled = try reader["s3EncryptionEnabled"].readIfPresent() ?? false
        value.s3KeyPrefix = try reader["s3KeyPrefix"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Service {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Service {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Service()
        value.serviceArn = try reader["serviceArn"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.loadBalancers = try reader["loadBalancers"].readListIfPresent(memberReadingClosure: ECSClientTypes.LoadBalancer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRegistries = try reader["serviceRegistries"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceRegistry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.desiredCount = try reader["desiredCount"].readIfPresent() ?? 0
        value.runningCount = try reader["runningCount"].readIfPresent() ?? 0
        value.pendingCount = try reader["pendingCount"].readIfPresent() ?? 0
        value.launchType = try reader["launchType"].readIfPresent()
        value.capacityProviderStrategy = try reader["capacityProviderStrategy"].readListIfPresent(memberReadingClosure: ECSClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.platformFamily = try reader["platformFamily"].readIfPresent()
        value.taskDefinition = try reader["taskDefinition"].readIfPresent()
        value.deploymentConfiguration = try reader["deploymentConfiguration"].readIfPresent(with: ECSClientTypes.DeploymentConfiguration.read(from:))
        value.taskSets = try reader["taskSets"].readListIfPresent(memberReadingClosure: ECSClientTypes.TaskSet.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.deployments = try reader["deployments"].readListIfPresent(memberReadingClosure: ECSClientTypes.Deployment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.placementConstraints = try reader["placementConstraints"].readListIfPresent(memberReadingClosure: ECSClientTypes.PlacementConstraint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.placementStrategy = try reader["placementStrategy"].readListIfPresent(memberReadingClosure: ECSClientTypes.PlacementStrategy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: ECSClientTypes.NetworkConfiguration.read(from:))
        value.healthCheckGracePeriodSeconds = try reader["healthCheckGracePeriodSeconds"].readIfPresent()
        value.schedulingStrategy = try reader["schedulingStrategy"].readIfPresent()
        value.deploymentController = try reader["deploymentController"].readIfPresent(with: ECSClientTypes.DeploymentController.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdBy = try reader["createdBy"].readIfPresent()
        value.enableECSManagedTags = try reader["enableECSManagedTags"].readIfPresent() ?? false
        value.propagateTags = try reader["propagateTags"].readIfPresent()
        value.enableExecuteCommand = try reader["enableExecuteCommand"].readIfPresent() ?? false
        return value
    }
}

extension ECSClientTypes.DeploymentController {

    static func write(value: ECSClientTypes.DeploymentController?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.DeploymentController {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.DeploymentController()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ECSClientTypes.NetworkConfiguration {

    static func write(value: ECSClientTypes.NetworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["awsvpcConfiguration"].write(value.awsvpcConfiguration, with: ECSClientTypes.AwsVpcConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.NetworkConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.NetworkConfiguration()
        value.awsvpcConfiguration = try reader["awsvpcConfiguration"].readIfPresent(with: ECSClientTypes.AwsVpcConfiguration.read(from:))
        return value
    }
}

extension ECSClientTypes.AwsVpcConfiguration {

    static func write(value: ECSClientTypes.AwsVpcConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["assignPublicIp"].write(value.assignPublicIp)
        try writer["securityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.AwsVpcConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.AwsVpcConfiguration()
        value.subnets = try reader["subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.securityGroups = try reader["securityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.assignPublicIp = try reader["assignPublicIp"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.PlacementStrategy {

    static func write(value: ECSClientTypes.PlacementStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["field"].write(value.field)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.PlacementStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.PlacementStrategy()
        value.type = try reader["type"].readIfPresent()
        value.field = try reader["field"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.PlacementConstraint {

    static func write(value: ECSClientTypes.PlacementConstraint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expression"].write(value.expression)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.PlacementConstraint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.PlacementConstraint()
        value.type = try reader["type"].readIfPresent()
        value.expression = try reader["expression"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceEvent()
        value.id = try reader["id"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Deployment {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Deployment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Deployment()
        value.id = try reader["id"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.taskDefinition = try reader["taskDefinition"].readIfPresent()
        value.desiredCount = try reader["desiredCount"].readIfPresent() ?? 0
        value.pendingCount = try reader["pendingCount"].readIfPresent() ?? 0
        value.runningCount = try reader["runningCount"].readIfPresent() ?? 0
        value.failedTasks = try reader["failedTasks"].readIfPresent() ?? 0
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.capacityProviderStrategy = try reader["capacityProviderStrategy"].readListIfPresent(memberReadingClosure: ECSClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.launchType = try reader["launchType"].readIfPresent()
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.platformFamily = try reader["platformFamily"].readIfPresent()
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: ECSClientTypes.NetworkConfiguration.read(from:))
        value.rolloutState = try reader["rolloutState"].readIfPresent()
        value.rolloutStateReason = try reader["rolloutStateReason"].readIfPresent()
        value.serviceConnectConfiguration = try reader["serviceConnectConfiguration"].readIfPresent(with: ECSClientTypes.ServiceConnectConfiguration.read(from:))
        value.serviceConnectResources = try reader["serviceConnectResources"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceConnectServiceResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumeConfigurations = try reader["volumeConfigurations"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceVolumeConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fargateEphemeralStorage = try reader["fargateEphemeralStorage"].readIfPresent(with: ECSClientTypes.DeploymentEphemeralStorage.read(from:))
        return value
    }
}

extension ECSClientTypes.DeploymentEphemeralStorage {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.DeploymentEphemeralStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.DeploymentEphemeralStorage()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceVolumeConfiguration {

    static func write(value: ECSClientTypes.ServiceVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["managedEBSVolume"].write(value.managedEBSVolume, with: ECSClientTypes.ServiceManagedEBSVolumeConfiguration.write(value:to:))
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceVolumeConfiguration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.managedEBSVolume = try reader["managedEBSVolume"].readIfPresent(with: ECSClientTypes.ServiceManagedEBSVolumeConfiguration.read(from:))
        return value
    }
}

extension ECSClientTypes.ServiceManagedEBSVolumeConfiguration {

    static func write(value: ECSClientTypes.ServiceManagedEBSVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encrypted"].write(value.encrypted)
        try writer["filesystemType"].write(value.filesystemType)
        try writer["iops"].write(value.iops)
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["roleArn"].write(value.roleArn)
        try writer["sizeInGiB"].write(value.sizeInGiB)
        try writer["snapshotId"].write(value.snapshotId)
        try writer["tagSpecifications"].writeList(value.tagSpecifications, memberWritingClosure: ECSClientTypes.EBSTagSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["throughput"].write(value.throughput)
        try writer["volumeType"].write(value.volumeType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceManagedEBSVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceManagedEBSVolumeConfiguration()
        value.encrypted = try reader["encrypted"].readIfPresent()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.volumeType = try reader["volumeType"].readIfPresent()
        value.sizeInGiB = try reader["sizeInGiB"].readIfPresent()
        value.snapshotId = try reader["snapshotId"].readIfPresent()
        value.iops = try reader["iops"].readIfPresent()
        value.throughput = try reader["throughput"].readIfPresent()
        value.tagSpecifications = try reader["tagSpecifications"].readListIfPresent(memberReadingClosure: ECSClientTypes.EBSTagSpecification.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.filesystemType = try reader["filesystemType"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.EBSTagSpecification {

    static func write(value: ECSClientTypes.EBSTagSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["propagateTags"].write(value.propagateTags)
        try writer["resourceType"].write(value.resourceType)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ECSClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.EBSTagSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.EBSTagSpecification()
        value.resourceType = try reader["resourceType"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.propagateTags = try reader["propagateTags"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceConnectServiceResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceConnectServiceResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceConnectServiceResource()
        value.discoveryName = try reader["discoveryName"].readIfPresent()
        value.discoveryArn = try reader["discoveryArn"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceConnectConfiguration {

    static func write(value: ECSClientTypes.ServiceConnectConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
        try writer["logConfiguration"].write(value.logConfiguration, with: ECSClientTypes.LogConfiguration.write(value:to:))
        try writer["namespace"].write(value.namespace)
        try writer["services"].writeList(value.services, memberWritingClosure: ECSClientTypes.ServiceConnectService.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceConnectConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceConnectConfiguration()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.namespace = try reader["namespace"].readIfPresent()
        value.services = try reader["services"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceConnectService.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: ECSClientTypes.LogConfiguration.read(from:))
        return value
    }
}

extension ECSClientTypes.LogConfiguration {

    static func write(value: ECSClientTypes.LogConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logDriver"].write(value.logDriver)
        try writer["options"].writeMap(value.options, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["secretOptions"].writeList(value.secretOptions, memberWritingClosure: ECSClientTypes.Secret.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.LogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.LogConfiguration()
        value.logDriver = try reader["logDriver"].readIfPresent() ?? .sdkUnknown("")
        value.options = try reader["options"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.secretOptions = try reader["secretOptions"].readListIfPresent(memberReadingClosure: ECSClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.Secret {

    static func write(value: ECSClientTypes.Secret?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["valueFrom"].write(value.valueFrom)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Secret {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Secret()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.valueFrom = try reader["valueFrom"].readIfPresent() ?? ""
        return value
    }
}

extension ECSClientTypes.ServiceConnectService {

    static func write(value: ECSClientTypes.ServiceConnectService?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientAliases"].writeList(value.clientAliases, memberWritingClosure: ECSClientTypes.ServiceConnectClientAlias.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["discoveryName"].write(value.discoveryName)
        try writer["ingressPortOverride"].write(value.ingressPortOverride)
        try writer["portName"].write(value.portName)
        try writer["timeout"].write(value.timeout, with: ECSClientTypes.TimeoutConfiguration.write(value:to:))
        try writer["tls"].write(value.tls, with: ECSClientTypes.ServiceConnectTlsConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceConnectService {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceConnectService()
        value.portName = try reader["portName"].readIfPresent() ?? ""
        value.discoveryName = try reader["discoveryName"].readIfPresent()
        value.clientAliases = try reader["clientAliases"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceConnectClientAlias.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ingressPortOverride = try reader["ingressPortOverride"].readIfPresent()
        value.timeout = try reader["timeout"].readIfPresent(with: ECSClientTypes.TimeoutConfiguration.read(from:))
        value.tls = try reader["tls"].readIfPresent(with: ECSClientTypes.ServiceConnectTlsConfiguration.read(from:))
        return value
    }
}

extension ECSClientTypes.ServiceConnectTlsConfiguration {

    static func write(value: ECSClientTypes.ServiceConnectTlsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["issuerCertificateAuthority"].write(value.issuerCertificateAuthority, with: ECSClientTypes.ServiceConnectTlsCertificateAuthority.write(value:to:))
        try writer["kmsKey"].write(value.kmsKey)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceConnectTlsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceConnectTlsConfiguration()
        value.issuerCertificateAuthority = try reader["issuerCertificateAuthority"].readIfPresent(with: ECSClientTypes.ServiceConnectTlsCertificateAuthority.read(from:))
        value.kmsKey = try reader["kmsKey"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceConnectTlsCertificateAuthority {

    static func write(value: ECSClientTypes.ServiceConnectTlsCertificateAuthority?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["awsPcaAuthorityArn"].write(value.awsPcaAuthorityArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceConnectTlsCertificateAuthority {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceConnectTlsCertificateAuthority()
        value.awsPcaAuthorityArn = try reader["awsPcaAuthorityArn"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.TimeoutConfiguration {

    static func write(value: ECSClientTypes.TimeoutConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["idleTimeoutSeconds"].write(value.idleTimeoutSeconds)
        try writer["perRequestTimeoutSeconds"].write(value.perRequestTimeoutSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.TimeoutConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.TimeoutConfiguration()
        value.idleTimeoutSeconds = try reader["idleTimeoutSeconds"].readIfPresent()
        value.perRequestTimeoutSeconds = try reader["perRequestTimeoutSeconds"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceConnectClientAlias {

    static func write(value: ECSClientTypes.ServiceConnectClientAlias?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dnsName"].write(value.dnsName)
        try writer["port"].write(value.port)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceConnectClientAlias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceConnectClientAlias()
        value.port = try reader["port"].readIfPresent() ?? 0
        value.dnsName = try reader["dnsName"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.TaskSet {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.TaskSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.TaskSet()
        value.id = try reader["id"].readIfPresent()
        value.taskSetArn = try reader["taskSetArn"].readIfPresent()
        value.serviceArn = try reader["serviceArn"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.startedBy = try reader["startedBy"].readIfPresent()
        value.externalId = try reader["externalId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.taskDefinition = try reader["taskDefinition"].readIfPresent()
        value.computedDesiredCount = try reader["computedDesiredCount"].readIfPresent() ?? 0
        value.pendingCount = try reader["pendingCount"].readIfPresent() ?? 0
        value.runningCount = try reader["runningCount"].readIfPresent() ?? 0
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.launchType = try reader["launchType"].readIfPresent()
        value.capacityProviderStrategy = try reader["capacityProviderStrategy"].readListIfPresent(memberReadingClosure: ECSClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.platformFamily = try reader["platformFamily"].readIfPresent()
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: ECSClientTypes.NetworkConfiguration.read(from:))
        value.loadBalancers = try reader["loadBalancers"].readListIfPresent(memberReadingClosure: ECSClientTypes.LoadBalancer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRegistries = try reader["serviceRegistries"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceRegistry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scale = try reader["scale"].readIfPresent(with: ECSClientTypes.Scale.read(from:))
        value.stabilityStatus = try reader["stabilityStatus"].readIfPresent()
        value.stabilityStatusAt = try reader["stabilityStatusAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fargateEphemeralStorage = try reader["fargateEphemeralStorage"].readIfPresent(with: ECSClientTypes.DeploymentEphemeralStorage.read(from:))
        return value
    }
}

extension ECSClientTypes.Scale {

    static func write(value: ECSClientTypes.Scale?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["unit"].write(value.unit)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Scale {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Scale()
        value.value = try reader["value"].readIfPresent() ?? 0
        value.unit = try reader["unit"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceRegistry {

    static func write(value: ECSClientTypes.ServiceRegistry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerName"].write(value.containerName)
        try writer["containerPort"].write(value.containerPort)
        try writer["port"].write(value.port)
        try writer["registryArn"].write(value.registryArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceRegistry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceRegistry()
        value.registryArn = try reader["registryArn"].readIfPresent()
        value.port = try reader["port"].readIfPresent()
        value.containerName = try reader["containerName"].readIfPresent()
        value.containerPort = try reader["containerPort"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.LoadBalancer {

    static func write(value: ECSClientTypes.LoadBalancer?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerName"].write(value.containerName)
        try writer["containerPort"].write(value.containerPort)
        try writer["loadBalancerName"].write(value.loadBalancerName)
        try writer["targetGroupArn"].write(value.targetGroupArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.LoadBalancer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.LoadBalancer()
        value.targetGroupArn = try reader["targetGroupArn"].readIfPresent()
        value.loadBalancerName = try reader["loadBalancerName"].readIfPresent()
        value.containerName = try reader["containerName"].readIfPresent()
        value.containerPort = try reader["containerPort"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.DeploymentConfiguration {

    static func write(value: ECSClientTypes.DeploymentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarms"].write(value.alarms, with: ECSClientTypes.DeploymentAlarms.write(value:to:))
        try writer["deploymentCircuitBreaker"].write(value.deploymentCircuitBreaker, with: ECSClientTypes.DeploymentCircuitBreaker.write(value:to:))
        try writer["maximumPercent"].write(value.maximumPercent)
        try writer["minimumHealthyPercent"].write(value.minimumHealthyPercent)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.DeploymentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.DeploymentConfiguration()
        value.deploymentCircuitBreaker = try reader["deploymentCircuitBreaker"].readIfPresent(with: ECSClientTypes.DeploymentCircuitBreaker.read(from:))
        value.maximumPercent = try reader["maximumPercent"].readIfPresent()
        value.minimumHealthyPercent = try reader["minimumHealthyPercent"].readIfPresent()
        value.alarms = try reader["alarms"].readIfPresent(with: ECSClientTypes.DeploymentAlarms.read(from:))
        return value
    }
}

extension ECSClientTypes.DeploymentAlarms {

    static func write(value: ECSClientTypes.DeploymentAlarms?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmNames"].writeList(value.alarmNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["enable"].write(value.enable)
        try writer["rollback"].write(value.rollback)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.DeploymentAlarms {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.DeploymentAlarms()
        value.alarmNames = try reader["alarmNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.rollback = try reader["rollback"].readIfPresent() ?? false
        value.enable = try reader["enable"].readIfPresent() ?? false
        return value
    }
}

extension ECSClientTypes.DeploymentCircuitBreaker {

    static func write(value: ECSClientTypes.DeploymentCircuitBreaker?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enable"].write(value.enable)
        try writer["rollback"].write(value.rollback)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.DeploymentCircuitBreaker {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.DeploymentCircuitBreaker()
        value.enable = try reader["enable"].readIfPresent() ?? false
        value.rollback = try reader["rollback"].readIfPresent() ?? false
        return value
    }
}

extension ECSClientTypes.Setting {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Setting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Setting()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        value.principalArn = try reader["principalArn"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Attribute {

    static func write(value: ECSClientTypes.Attribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["targetId"].write(value.targetId)
        try writer["targetType"].write(value.targetType)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Attribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Attribute()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent()
        value.targetType = try reader["targetType"].readIfPresent()
        value.targetId = try reader["targetId"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.TaskDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.TaskDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.TaskDefinition()
        value.taskDefinitionArn = try reader["taskDefinitionArn"].readIfPresent()
        value.containerDefinitions = try reader["containerDefinitions"].readListIfPresent(memberReadingClosure: ECSClientTypes.ContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.family = try reader["family"].readIfPresent()
        value.taskRoleArn = try reader["taskRoleArn"].readIfPresent()
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent()
        value.networkMode = try reader["networkMode"].readIfPresent()
        value.revision = try reader["revision"].readIfPresent() ?? 0
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.requiresAttributes = try reader["requiresAttributes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.placementConstraints = try reader["placementConstraints"].readListIfPresent(memberReadingClosure: ECSClientTypes.TaskDefinitionPlacementConstraint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.compatibilities = try reader["compatibilities"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ECSClientTypes.Compatibility>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.runtimePlatform = try reader["runtimePlatform"].readIfPresent(with: ECSClientTypes.RuntimePlatform.read(from:))
        value.requiresCompatibilities = try reader["requiresCompatibilities"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ECSClientTypes.Compatibility>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cpu = try reader["cpu"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.inferenceAccelerators = try reader["inferenceAccelerators"].readListIfPresent(memberReadingClosure: ECSClientTypes.InferenceAccelerator.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pidMode = try reader["pidMode"].readIfPresent()
        value.ipcMode = try reader["ipcMode"].readIfPresent()
        value.proxyConfiguration = try reader["proxyConfiguration"].readIfPresent(with: ECSClientTypes.ProxyConfiguration.read(from:))
        value.registeredAt = try reader["registeredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deregisteredAt = try reader["deregisteredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.registeredBy = try reader["registeredBy"].readIfPresent()
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: ECSClientTypes.EphemeralStorage.read(from:))
        return value
    }
}

extension ECSClientTypes.EphemeralStorage {

    static func write(value: ECSClientTypes.EphemeralStorage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sizeInGiB"].write(value.sizeInGiB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.EphemeralStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.EphemeralStorage()
        value.sizeInGiB = try reader["sizeInGiB"].readIfPresent() ?? 0
        return value
    }
}

extension ECSClientTypes.ProxyConfiguration {

    static func write(value: ECSClientTypes.ProxyConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerName"].write(value.containerName)
        try writer["properties"].writeList(value.properties, memberWritingClosure: ECSClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ProxyConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ProxyConfiguration()
        value.type = try reader["type"].readIfPresent()
        value.containerName = try reader["containerName"].readIfPresent() ?? ""
        value.properties = try reader["properties"].readListIfPresent(memberReadingClosure: ECSClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.InferenceAccelerator {

    static func write(value: ECSClientTypes.InferenceAccelerator?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deviceName"].write(value.deviceName)
        try writer["deviceType"].write(value.deviceType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.InferenceAccelerator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.InferenceAccelerator()
        value.deviceName = try reader["deviceName"].readIfPresent() ?? ""
        value.deviceType = try reader["deviceType"].readIfPresent() ?? ""
        return value
    }
}

extension ECSClientTypes.RuntimePlatform {

    static func write(value: ECSClientTypes.RuntimePlatform?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cpuArchitecture"].write(value.cpuArchitecture)
        try writer["operatingSystemFamily"].write(value.operatingSystemFamily)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.RuntimePlatform {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.RuntimePlatform()
        value.cpuArchitecture = try reader["cpuArchitecture"].readIfPresent()
        value.operatingSystemFamily = try reader["operatingSystemFamily"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.TaskDefinitionPlacementConstraint {

    static func write(value: ECSClientTypes.TaskDefinitionPlacementConstraint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expression"].write(value.expression)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.TaskDefinitionPlacementConstraint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.TaskDefinitionPlacementConstraint()
        value.type = try reader["type"].readIfPresent()
        value.expression = try reader["expression"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Volume {

    static func write(value: ECSClientTypes.Volume?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuredAtLaunch"].write(value.configuredAtLaunch)
        try writer["dockerVolumeConfiguration"].write(value.dockerVolumeConfiguration, with: ECSClientTypes.DockerVolumeConfiguration.write(value:to:))
        try writer["efsVolumeConfiguration"].write(value.efsVolumeConfiguration, with: ECSClientTypes.EFSVolumeConfiguration.write(value:to:))
        try writer["fsxWindowsFileServerVolumeConfiguration"].write(value.fsxWindowsFileServerVolumeConfiguration, with: ECSClientTypes.FSxWindowsFileServerVolumeConfiguration.write(value:to:))
        try writer["host"].write(value.host, with: ECSClientTypes.HostVolumeProperties.write(value:to:))
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Volume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Volume()
        value.name = try reader["name"].readIfPresent()
        value.host = try reader["host"].readIfPresent(with: ECSClientTypes.HostVolumeProperties.read(from:))
        value.dockerVolumeConfiguration = try reader["dockerVolumeConfiguration"].readIfPresent(with: ECSClientTypes.DockerVolumeConfiguration.read(from:))
        value.efsVolumeConfiguration = try reader["efsVolumeConfiguration"].readIfPresent(with: ECSClientTypes.EFSVolumeConfiguration.read(from:))
        value.fsxWindowsFileServerVolumeConfiguration = try reader["fsxWindowsFileServerVolumeConfiguration"].readIfPresent(with: ECSClientTypes.FSxWindowsFileServerVolumeConfiguration.read(from:))
        value.configuredAtLaunch = try reader["configuredAtLaunch"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.FSxWindowsFileServerVolumeConfiguration {

    static func write(value: ECSClientTypes.FSxWindowsFileServerVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authorizationConfig"].write(value.authorizationConfig, with: ECSClientTypes.FSxWindowsFileServerAuthorizationConfig.write(value:to:))
        try writer["fileSystemId"].write(value.fileSystemId)
        try writer["rootDirectory"].write(value.rootDirectory)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.FSxWindowsFileServerVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.FSxWindowsFileServerVolumeConfiguration()
        value.fileSystemId = try reader["fileSystemId"].readIfPresent() ?? ""
        value.rootDirectory = try reader["rootDirectory"].readIfPresent() ?? ""
        value.authorizationConfig = try reader["authorizationConfig"].readIfPresent(with: ECSClientTypes.FSxWindowsFileServerAuthorizationConfig.read(from:))
        return value
    }
}

extension ECSClientTypes.FSxWindowsFileServerAuthorizationConfig {

    static func write(value: ECSClientTypes.FSxWindowsFileServerAuthorizationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["credentialsParameter"].write(value.credentialsParameter)
        try writer["domain"].write(value.domain)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.FSxWindowsFileServerAuthorizationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.FSxWindowsFileServerAuthorizationConfig()
        value.credentialsParameter = try reader["credentialsParameter"].readIfPresent() ?? ""
        value.domain = try reader["domain"].readIfPresent() ?? ""
        return value
    }
}

extension ECSClientTypes.EFSVolumeConfiguration {

    static func write(value: ECSClientTypes.EFSVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authorizationConfig"].write(value.authorizationConfig, with: ECSClientTypes.EFSAuthorizationConfig.write(value:to:))
        try writer["fileSystemId"].write(value.fileSystemId)
        try writer["rootDirectory"].write(value.rootDirectory)
        try writer["transitEncryption"].write(value.transitEncryption)
        try writer["transitEncryptionPort"].write(value.transitEncryptionPort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.EFSVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.EFSVolumeConfiguration()
        value.fileSystemId = try reader["fileSystemId"].readIfPresent() ?? ""
        value.rootDirectory = try reader["rootDirectory"].readIfPresent()
        value.transitEncryption = try reader["transitEncryption"].readIfPresent()
        value.transitEncryptionPort = try reader["transitEncryptionPort"].readIfPresent()
        value.authorizationConfig = try reader["authorizationConfig"].readIfPresent(with: ECSClientTypes.EFSAuthorizationConfig.read(from:))
        return value
    }
}

extension ECSClientTypes.EFSAuthorizationConfig {

    static func write(value: ECSClientTypes.EFSAuthorizationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessPointId"].write(value.accessPointId)
        try writer["iam"].write(value.iam)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.EFSAuthorizationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.EFSAuthorizationConfig()
        value.accessPointId = try reader["accessPointId"].readIfPresent()
        value.iam = try reader["iam"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.DockerVolumeConfiguration {

    static func write(value: ECSClientTypes.DockerVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoprovision"].write(value.autoprovision)
        try writer["driver"].write(value.driver)
        try writer["driverOpts"].writeMap(value.driverOpts, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["labels"].writeMap(value.labels, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["scope"].write(value.scope)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.DockerVolumeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.DockerVolumeConfiguration()
        value.scope = try reader["scope"].readIfPresent()
        value.autoprovision = try reader["autoprovision"].readIfPresent()
        value.driver = try reader["driver"].readIfPresent()
        value.driverOpts = try reader["driverOpts"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.labels = try reader["labels"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.HostVolumeProperties {

    static func write(value: ECSClientTypes.HostVolumeProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourcePath"].write(value.sourcePath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.HostVolumeProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.HostVolumeProperties()
        value.sourcePath = try reader["sourcePath"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ContainerDefinition {

    static func write(value: ECSClientTypes.ContainerDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cpu"].write(value.cpu)
        try writer["credentialSpecs"].writeList(value.credentialSpecs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dependsOn"].writeList(value.dependsOn, memberWritingClosure: ECSClientTypes.ContainerDependency.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["disableNetworking"].write(value.disableNetworking)
        try writer["dnsSearchDomains"].writeList(value.dnsSearchDomains, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dnsServers"].writeList(value.dnsServers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dockerLabels"].writeMap(value.dockerLabels, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["dockerSecurityOptions"].writeList(value.dockerSecurityOptions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["entryPoint"].writeList(value.entryPoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environment"].writeList(value.environment, memberWritingClosure: ECSClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environmentFiles"].writeList(value.environmentFiles, memberWritingClosure: ECSClientTypes.EnvironmentFile.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["essential"].write(value.essential)
        try writer["extraHosts"].writeList(value.extraHosts, memberWritingClosure: ECSClientTypes.HostEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["firelensConfiguration"].write(value.firelensConfiguration, with: ECSClientTypes.FirelensConfiguration.write(value:to:))
        try writer["healthCheck"].write(value.healthCheck, with: ECSClientTypes.HealthCheck.write(value:to:))
        try writer["hostname"].write(value.hostname)
        try writer["image"].write(value.image)
        try writer["interactive"].write(value.interactive)
        try writer["links"].writeList(value.links, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["linuxParameters"].write(value.linuxParameters, with: ECSClientTypes.LinuxParameters.write(value:to:))
        try writer["logConfiguration"].write(value.logConfiguration, with: ECSClientTypes.LogConfiguration.write(value:to:))
        try writer["memory"].write(value.memory)
        try writer["memoryReservation"].write(value.memoryReservation)
        try writer["mountPoints"].writeList(value.mountPoints, memberWritingClosure: ECSClientTypes.MountPoint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["portMappings"].writeList(value.portMappings, memberWritingClosure: ECSClientTypes.PortMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["privileged"].write(value.privileged)
        try writer["pseudoTerminal"].write(value.pseudoTerminal)
        try writer["readonlyRootFilesystem"].write(value.readonlyRootFilesystem)
        try writer["repositoryCredentials"].write(value.repositoryCredentials, with: ECSClientTypes.RepositoryCredentials.write(value:to:))
        try writer["resourceRequirements"].writeList(value.resourceRequirements, memberWritingClosure: ECSClientTypes.ResourceRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["restartPolicy"].write(value.restartPolicy, with: ECSClientTypes.ContainerRestartPolicy.write(value:to:))
        try writer["secrets"].writeList(value.secrets, memberWritingClosure: ECSClientTypes.Secret.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["startTimeout"].write(value.startTimeout)
        try writer["stopTimeout"].write(value.stopTimeout)
        try writer["systemControls"].writeList(value.systemControls, memberWritingClosure: ECSClientTypes.SystemControl.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ulimits"].writeList(value.ulimits, memberWritingClosure: ECSClientTypes.Ulimit.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["user"].write(value.user)
        try writer["volumesFrom"].writeList(value.volumesFrom, memberWritingClosure: ECSClientTypes.VolumeFrom.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["workingDirectory"].write(value.workingDirectory)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerDefinition()
        value.name = try reader["name"].readIfPresent()
        value.image = try reader["image"].readIfPresent()
        value.repositoryCredentials = try reader["repositoryCredentials"].readIfPresent(with: ECSClientTypes.RepositoryCredentials.read(from:))
        value.cpu = try reader["cpu"].readIfPresent() ?? 0
        value.memory = try reader["memory"].readIfPresent()
        value.memoryReservation = try reader["memoryReservation"].readIfPresent()
        value.links = try reader["links"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.portMappings = try reader["portMappings"].readListIfPresent(memberReadingClosure: ECSClientTypes.PortMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.essential = try reader["essential"].readIfPresent()
        value.restartPolicy = try reader["restartPolicy"].readIfPresent(with: ECSClientTypes.ContainerRestartPolicy.read(from:))
        value.entryPoint = try reader["entryPoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readListIfPresent(memberReadingClosure: ECSClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environmentFiles = try reader["environmentFiles"].readListIfPresent(memberReadingClosure: ECSClientTypes.EnvironmentFile.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.mountPoints = try reader["mountPoints"].readListIfPresent(memberReadingClosure: ECSClientTypes.MountPoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumesFrom = try reader["volumesFrom"].readListIfPresent(memberReadingClosure: ECSClientTypes.VolumeFrom.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.linuxParameters = try reader["linuxParameters"].readIfPresent(with: ECSClientTypes.LinuxParameters.read(from:))
        value.secrets = try reader["secrets"].readListIfPresent(memberReadingClosure: ECSClientTypes.Secret.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dependsOn = try reader["dependsOn"].readListIfPresent(memberReadingClosure: ECSClientTypes.ContainerDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.startTimeout = try reader["startTimeout"].readIfPresent()
        value.stopTimeout = try reader["stopTimeout"].readIfPresent()
        value.hostname = try reader["hostname"].readIfPresent()
        value.user = try reader["user"].readIfPresent()
        value.workingDirectory = try reader["workingDirectory"].readIfPresent()
        value.disableNetworking = try reader["disableNetworking"].readIfPresent()
        value.privileged = try reader["privileged"].readIfPresent()
        value.readonlyRootFilesystem = try reader["readonlyRootFilesystem"].readIfPresent()
        value.dnsServers = try reader["dnsServers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.dnsSearchDomains = try reader["dnsSearchDomains"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.extraHosts = try reader["extraHosts"].readListIfPresent(memberReadingClosure: ECSClientTypes.HostEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dockerSecurityOptions = try reader["dockerSecurityOptions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.interactive = try reader["interactive"].readIfPresent()
        value.pseudoTerminal = try reader["pseudoTerminal"].readIfPresent()
        value.dockerLabels = try reader["dockerLabels"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.ulimits = try reader["ulimits"].readListIfPresent(memberReadingClosure: ECSClientTypes.Ulimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.logConfiguration = try reader["logConfiguration"].readIfPresent(with: ECSClientTypes.LogConfiguration.read(from:))
        value.healthCheck = try reader["healthCheck"].readIfPresent(with: ECSClientTypes.HealthCheck.read(from:))
        value.systemControls = try reader["systemControls"].readListIfPresent(memberReadingClosure: ECSClientTypes.SystemControl.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceRequirements = try reader["resourceRequirements"].readListIfPresent(memberReadingClosure: ECSClientTypes.ResourceRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.firelensConfiguration = try reader["firelensConfiguration"].readIfPresent(with: ECSClientTypes.FirelensConfiguration.read(from:))
        value.credentialSpecs = try reader["credentialSpecs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.FirelensConfiguration {

    static func write(value: ECSClientTypes.FirelensConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["options"].writeMap(value.options, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.FirelensConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.FirelensConfiguration()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.options = try reader["options"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.ResourceRequirement {

    static func write(value: ECSClientTypes.ResourceRequirement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ResourceRequirement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ResourceRequirement()
        value.value = try reader["value"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ECSClientTypes.SystemControl {

    static func write(value: ECSClientTypes.SystemControl?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["namespace"].write(value.namespace)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.SystemControl {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.SystemControl()
        value.namespace = try reader["namespace"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.HealthCheck {

    static func write(value: ECSClientTypes.HealthCheck?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["interval"].write(value.interval)
        try writer["retries"].write(value.retries)
        try writer["startPeriod"].write(value.startPeriod)
        try writer["timeout"].write(value.timeout)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.HealthCheck {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.HealthCheck()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.interval = try reader["interval"].readIfPresent()
        value.timeout = try reader["timeout"].readIfPresent()
        value.retries = try reader["retries"].readIfPresent()
        value.startPeriod = try reader["startPeriod"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Ulimit {

    static func write(value: ECSClientTypes.Ulimit?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hardLimit"].write(value.hardLimit)
        try writer["name"].write(value.name)
        try writer["softLimit"].write(value.softLimit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Ulimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Ulimit()
        value.name = try reader["name"].readIfPresent() ?? .sdkUnknown("")
        value.softLimit = try reader["softLimit"].readIfPresent() ?? 0
        value.hardLimit = try reader["hardLimit"].readIfPresent() ?? 0
        return value
    }
}

extension ECSClientTypes.HostEntry {

    static func write(value: ECSClientTypes.HostEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["hostname"].write(value.hostname)
        try writer["ipAddress"].write(value.ipAddress)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.HostEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.HostEntry()
        value.hostname = try reader["hostname"].readIfPresent() ?? ""
        value.ipAddress = try reader["ipAddress"].readIfPresent() ?? ""
        return value
    }
}

extension ECSClientTypes.ContainerDependency {

    static func write(value: ECSClientTypes.ContainerDependency?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["condition"].write(value.condition)
        try writer["containerName"].write(value.containerName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerDependency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerDependency()
        value.containerName = try reader["containerName"].readIfPresent() ?? ""
        value.condition = try reader["condition"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ECSClientTypes.LinuxParameters {

    static func write(value: ECSClientTypes.LinuxParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["capabilities"].write(value.capabilities, with: ECSClientTypes.KernelCapabilities.write(value:to:))
        try writer["devices"].writeList(value.devices, memberWritingClosure: ECSClientTypes.Device.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["initProcessEnabled"].write(value.initProcessEnabled)
        try writer["maxSwap"].write(value.maxSwap)
        try writer["sharedMemorySize"].write(value.sharedMemorySize)
        try writer["swappiness"].write(value.swappiness)
        try writer["tmpfs"].writeList(value.tmpfs, memberWritingClosure: ECSClientTypes.Tmpfs.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.LinuxParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.LinuxParameters()
        value.capabilities = try reader["capabilities"].readIfPresent(with: ECSClientTypes.KernelCapabilities.read(from:))
        value.devices = try reader["devices"].readListIfPresent(memberReadingClosure: ECSClientTypes.Device.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.initProcessEnabled = try reader["initProcessEnabled"].readIfPresent()
        value.sharedMemorySize = try reader["sharedMemorySize"].readIfPresent()
        value.tmpfs = try reader["tmpfs"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tmpfs.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.maxSwap = try reader["maxSwap"].readIfPresent()
        value.swappiness = try reader["swappiness"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Tmpfs {

    static func write(value: ECSClientTypes.Tmpfs?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerPath"].write(value.containerPath)
        try writer["mountOptions"].writeList(value.mountOptions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["size"].write(value.size)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Tmpfs {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Tmpfs()
        value.containerPath = try reader["containerPath"].readIfPresent() ?? ""
        value.size = try reader["size"].readIfPresent() ?? 0
        value.mountOptions = try reader["mountOptions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.Device {

    static func write(value: ECSClientTypes.Device?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerPath"].write(value.containerPath)
        try writer["hostPath"].write(value.hostPath)
        try writer["permissions"].writeList(value.permissions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ECSClientTypes.DeviceCgroupPermission>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Device {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Device()
        value.hostPath = try reader["hostPath"].readIfPresent() ?? ""
        value.containerPath = try reader["containerPath"].readIfPresent()
        value.permissions = try reader["permissions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ECSClientTypes.DeviceCgroupPermission>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.KernelCapabilities {

    static func write(value: ECSClientTypes.KernelCapabilities?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["add"].writeList(value.add, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["drop"].writeList(value.drop, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.KernelCapabilities {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.KernelCapabilities()
        value.add = try reader["add"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.drop = try reader["drop"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.VolumeFrom {

    static func write(value: ECSClientTypes.VolumeFrom?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["readOnly"].write(value.readOnly)
        try writer["sourceContainer"].write(value.sourceContainer)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.VolumeFrom {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.VolumeFrom()
        value.sourceContainer = try reader["sourceContainer"].readIfPresent()
        value.readOnly = try reader["readOnly"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.MountPoint {

    static func write(value: ECSClientTypes.MountPoint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerPath"].write(value.containerPath)
        try writer["readOnly"].write(value.readOnly)
        try writer["sourceVolume"].write(value.sourceVolume)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.MountPoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.MountPoint()
        value.sourceVolume = try reader["sourceVolume"].readIfPresent()
        value.containerPath = try reader["containerPath"].readIfPresent()
        value.readOnly = try reader["readOnly"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.EnvironmentFile {

    static func write(value: ECSClientTypes.EnvironmentFile?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.EnvironmentFile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.EnvironmentFile()
        value.value = try reader["value"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ECSClientTypes.ContainerRestartPolicy {

    static func write(value: ECSClientTypes.ContainerRestartPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
        try writer["ignoredExitCodes"].writeList(value.ignoredExitCodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["restartAttemptPeriod"].write(value.restartAttemptPeriod)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerRestartPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerRestartPolicy()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.ignoredExitCodes = try reader["ignoredExitCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.restartAttemptPeriod = try reader["restartAttemptPeriod"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.PortMapping {

    static func write(value: ECSClientTypes.PortMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appProtocol"].write(value.appProtocol)
        try writer["containerPort"].write(value.containerPort)
        try writer["containerPortRange"].write(value.containerPortRange)
        try writer["hostPort"].write(value.hostPort)
        try writer["name"].write(value.name)
        try writer["protocol"].write(value.`protocol`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.PortMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.PortMapping()
        value.containerPort = try reader["containerPort"].readIfPresent()
        value.hostPort = try reader["hostPort"].readIfPresent()
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.appProtocol = try reader["appProtocol"].readIfPresent()
        value.containerPortRange = try reader["containerPortRange"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.RepositoryCredentials {

    static func write(value: ECSClientTypes.RepositoryCredentials?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["credentialsParameter"].write(value.credentialsParameter)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.RepositoryCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.RepositoryCredentials()
        value.credentialsParameter = try reader["credentialsParameter"].readIfPresent() ?? ""
        return value
    }
}

extension ECSClientTypes.Failure {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Failure {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Failure()
        value.arn = try reader["arn"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.detail = try reader["detail"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ContainerInstance {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerInstance()
        value.containerInstanceArn = try reader["containerInstanceArn"].readIfPresent()
        value.ec2InstanceId = try reader["ec2InstanceId"].readIfPresent()
        value.capacityProviderName = try reader["capacityProviderName"].readIfPresent()
        value.version = try reader["version"].readIfPresent() ?? 0
        value.versionInfo = try reader["versionInfo"].readIfPresent(with: ECSClientTypes.VersionInfo.read(from:))
        value.remainingResources = try reader["remainingResources"].readListIfPresent(memberReadingClosure: ECSClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.registeredResources = try reader["registeredResources"].readListIfPresent(memberReadingClosure: ECSClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.agentConnected = try reader["agentConnected"].readIfPresent() ?? false
        value.runningTasksCount = try reader["runningTasksCount"].readIfPresent() ?? 0
        value.pendingTasksCount = try reader["pendingTasksCount"].readIfPresent() ?? 0
        value.agentUpdateStatus = try reader["agentUpdateStatus"].readIfPresent()
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.registeredAt = try reader["registeredAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.attachments = try reader["attachments"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.healthStatus = try reader["healthStatus"].readIfPresent(with: ECSClientTypes.ContainerInstanceHealthStatus.read(from:))
        return value
    }
}

extension ECSClientTypes.ContainerInstanceHealthStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerInstanceHealthStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerInstanceHealthStatus()
        value.overallStatus = try reader["overallStatus"].readIfPresent()
        value.details = try reader["details"].readListIfPresent(memberReadingClosure: ECSClientTypes.InstanceHealthCheckResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.InstanceHealthCheckResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.InstanceHealthCheckResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.InstanceHealthCheckResult()
        value.type = try reader["type"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStatusChange = try reader["lastStatusChange"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ECSClientTypes.Resource {

    static func write(value: ECSClientTypes.Resource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["doubleValue"].write(value.doubleValue)
        try writer["integerValue"].write(value.integerValue)
        try writer["longValue"].write(value.longValue)
        try writer["name"].write(value.name)
        try writer["stringSetValue"].writeList(value.stringSetValue, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Resource()
        value.name = try reader["name"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.doubleValue = try reader["doubleValue"].readIfPresent() ?? 0
        value.longValue = try reader["longValue"].readIfPresent() ?? 0
        value.integerValue = try reader["integerValue"].readIfPresent() ?? 0
        value.stringSetValue = try reader["stringSetValue"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.VersionInfo {

    static func write(value: ECSClientTypes.VersionInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["agentHash"].write(value.agentHash)
        try writer["agentVersion"].write(value.agentVersion)
        try writer["dockerVersion"].write(value.dockerVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.VersionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.VersionInfo()
        value.agentVersion = try reader["agentVersion"].readIfPresent()
        value.agentHash = try reader["agentHash"].readIfPresent()
        value.dockerVersion = try reader["dockerVersion"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceDeployment {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceDeployment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceDeployment()
        value.serviceDeploymentArn = try reader["serviceDeploymentArn"].readIfPresent()
        value.serviceArn = try reader["serviceArn"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.finishedAt = try reader["finishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.stoppedAt = try reader["stoppedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.sourceServiceRevisions = try reader["sourceServiceRevisions"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceRevisionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetServiceRevision = try reader["targetServiceRevision"].readIfPresent(with: ECSClientTypes.ServiceRevisionSummary.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        value.deploymentConfiguration = try reader["deploymentConfiguration"].readIfPresent(with: ECSClientTypes.DeploymentConfiguration.read(from:))
        value.rollback = try reader["rollback"].readIfPresent(with: ECSClientTypes.Rollback.read(from:))
        value.deploymentCircuitBreaker = try reader["deploymentCircuitBreaker"].readIfPresent(with: ECSClientTypes.ServiceDeploymentCircuitBreaker.read(from:))
        value.alarms = try reader["alarms"].readIfPresent(with: ECSClientTypes.ServiceDeploymentAlarms.read(from:))
        return value
    }
}

extension ECSClientTypes.ServiceDeploymentAlarms {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceDeploymentAlarms {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceDeploymentAlarms()
        value.status = try reader["status"].readIfPresent()
        value.alarmNames = try reader["alarmNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.triggeredAlarmNames = try reader["triggeredAlarmNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.ServiceDeploymentCircuitBreaker {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceDeploymentCircuitBreaker {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceDeploymentCircuitBreaker()
        value.status = try reader["status"].readIfPresent()
        value.failureCount = try reader["failureCount"].readIfPresent() ?? 0
        value.threshold = try reader["threshold"].readIfPresent() ?? 0
        return value
    }
}

extension ECSClientTypes.Rollback {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Rollback {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Rollback()
        value.reason = try reader["reason"].readIfPresent()
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.serviceRevisionArn = try reader["serviceRevisionArn"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ServiceRevisionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceRevisionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceRevisionSummary()
        value.arn = try reader["arn"].readIfPresent()
        value.requestedTaskCount = try reader["requestedTaskCount"].readIfPresent() ?? 0
        value.runningTaskCount = try reader["runningTaskCount"].readIfPresent() ?? 0
        value.pendingTaskCount = try reader["pendingTaskCount"].readIfPresent() ?? 0
        return value
    }
}

extension ECSClientTypes.ServiceRevision {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceRevision()
        value.serviceRevisionArn = try reader["serviceRevisionArn"].readIfPresent()
        value.serviceArn = try reader["serviceArn"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.taskDefinition = try reader["taskDefinition"].readIfPresent()
        value.capacityProviderStrategy = try reader["capacityProviderStrategy"].readListIfPresent(memberReadingClosure: ECSClientTypes.CapacityProviderStrategyItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.launchType = try reader["launchType"].readIfPresent()
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.platformFamily = try reader["platformFamily"].readIfPresent()
        value.loadBalancers = try reader["loadBalancers"].readListIfPresent(memberReadingClosure: ECSClientTypes.LoadBalancer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRegistries = try reader["serviceRegistries"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceRegistry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkConfiguration = try reader["networkConfiguration"].readIfPresent(with: ECSClientTypes.NetworkConfiguration.read(from:))
        value.containerImages = try reader["containerImages"].readListIfPresent(memberReadingClosure: ECSClientTypes.ContainerImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.guardDutyEnabled = try reader["guardDutyEnabled"].readIfPresent() ?? false
        value.serviceConnectConfiguration = try reader["serviceConnectConfiguration"].readIfPresent(with: ECSClientTypes.ServiceConnectConfiguration.read(from:))
        value.volumeConfigurations = try reader["volumeConfigurations"].readListIfPresent(memberReadingClosure: ECSClientTypes.ServiceVolumeConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.fargateEphemeralStorage = try reader["fargateEphemeralStorage"].readIfPresent(with: ECSClientTypes.DeploymentEphemeralStorage.read(from:))
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ECSClientTypes.ContainerImage {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerImage()
        value.containerName = try reader["containerName"].readIfPresent()
        value.imageDigest = try reader["imageDigest"].readIfPresent()
        value.image = try reader["image"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Task {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Task {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Task()
        value.attachments = try reader["attachments"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attachment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: ECSClientTypes.Attribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.capacityProviderName = try reader["capacityProviderName"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.connectivity = try reader["connectivity"].readIfPresent()
        value.connectivityAt = try reader["connectivityAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.containerInstanceArn = try reader["containerInstanceArn"].readIfPresent()
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: ECSClientTypes.Container.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cpu = try reader["cpu"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.desiredStatus = try reader["desiredStatus"].readIfPresent()
        value.enableExecuteCommand = try reader["enableExecuteCommand"].readIfPresent() ?? false
        value.executionStoppedAt = try reader["executionStoppedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.group = try reader["group"].readIfPresent()
        value.healthStatus = try reader["healthStatus"].readIfPresent()
        value.inferenceAccelerators = try reader["inferenceAccelerators"].readListIfPresent(memberReadingClosure: ECSClientTypes.InferenceAccelerator.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastStatus = try reader["lastStatus"].readIfPresent()
        value.launchType = try reader["launchType"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.overrides = try reader["overrides"].readIfPresent(with: ECSClientTypes.TaskOverride.read(from:))
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.platformFamily = try reader["platformFamily"].readIfPresent()
        value.pullStartedAt = try reader["pullStartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.pullStoppedAt = try reader["pullStoppedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedBy = try reader["startedBy"].readIfPresent()
        value.stopCode = try reader["stopCode"].readIfPresent()
        value.stoppedAt = try reader["stoppedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.stoppedReason = try reader["stoppedReason"].readIfPresent()
        value.stoppingAt = try reader["stoppingAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ECSClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.taskDefinitionArn = try reader["taskDefinitionArn"].readIfPresent()
        value.version = try reader["version"].readIfPresent() ?? 0
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: ECSClientTypes.EphemeralStorage.read(from:))
        value.fargateEphemeralStorage = try reader["fargateEphemeralStorage"].readIfPresent(with: ECSClientTypes.TaskEphemeralStorage.read(from:))
        return value
    }
}

extension ECSClientTypes.TaskEphemeralStorage {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.TaskEphemeralStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.TaskEphemeralStorage()
        value.sizeInGiB = try reader["sizeInGiB"].readIfPresent() ?? 0
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.TaskOverride {

    static func write(value: ECSClientTypes.TaskOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerOverrides"].writeList(value.containerOverrides, memberWritingClosure: ECSClientTypes.ContainerOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cpu"].write(value.cpu)
        try writer["ephemeralStorage"].write(value.ephemeralStorage, with: ECSClientTypes.EphemeralStorage.write(value:to:))
        try writer["executionRoleArn"].write(value.executionRoleArn)
        try writer["inferenceAcceleratorOverrides"].writeList(value.inferenceAcceleratorOverrides, memberWritingClosure: ECSClientTypes.InferenceAcceleratorOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["memory"].write(value.memory)
        try writer["taskRoleArn"].write(value.taskRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.TaskOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.TaskOverride()
        value.containerOverrides = try reader["containerOverrides"].readListIfPresent(memberReadingClosure: ECSClientTypes.ContainerOverride.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cpu = try reader["cpu"].readIfPresent()
        value.inferenceAcceleratorOverrides = try reader["inferenceAcceleratorOverrides"].readListIfPresent(memberReadingClosure: ECSClientTypes.InferenceAcceleratorOverride.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.taskRoleArn = try reader["taskRoleArn"].readIfPresent()
        value.ephemeralStorage = try reader["ephemeralStorage"].readIfPresent(with: ECSClientTypes.EphemeralStorage.read(from:))
        return value
    }
}

extension ECSClientTypes.InferenceAcceleratorOverride {

    static func write(value: ECSClientTypes.InferenceAcceleratorOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deviceName"].write(value.deviceName)
        try writer["deviceType"].write(value.deviceType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.InferenceAcceleratorOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.InferenceAcceleratorOverride()
        value.deviceName = try reader["deviceName"].readIfPresent()
        value.deviceType = try reader["deviceType"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ContainerOverride {

    static func write(value: ECSClientTypes.ContainerOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["cpu"].write(value.cpu)
        try writer["environment"].writeList(value.environment, memberWritingClosure: ECSClientTypes.KeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["environmentFiles"].writeList(value.environmentFiles, memberWritingClosure: ECSClientTypes.EnvironmentFile.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["memory"].write(value.memory)
        try writer["memoryReservation"].write(value.memoryReservation)
        try writer["name"].write(value.name)
        try writer["resourceRequirements"].writeList(value.resourceRequirements, memberWritingClosure: ECSClientTypes.ResourceRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ContainerOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ContainerOverride()
        value.name = try reader["name"].readIfPresent()
        value.command = try reader["command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["environment"].readListIfPresent(memberReadingClosure: ECSClientTypes.KeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environmentFiles = try reader["environmentFiles"].readListIfPresent(memberReadingClosure: ECSClientTypes.EnvironmentFile.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cpu = try reader["cpu"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.memoryReservation = try reader["memoryReservation"].readIfPresent()
        value.resourceRequirements = try reader["resourceRequirements"].readListIfPresent(memberReadingClosure: ECSClientTypes.ResourceRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.Container {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Container {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Container()
        value.containerArn = try reader["containerArn"].readIfPresent()
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.image = try reader["image"].readIfPresent()
        value.imageDigest = try reader["imageDigest"].readIfPresent()
        value.runtimeId = try reader["runtimeId"].readIfPresent()
        value.lastStatus = try reader["lastStatus"].readIfPresent()
        value.exitCode = try reader["exitCode"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.networkBindings = try reader["networkBindings"].readListIfPresent(memberReadingClosure: ECSClientTypes.NetworkBinding.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkInterfaces = try reader["networkInterfaces"].readListIfPresent(memberReadingClosure: ECSClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.healthStatus = try reader["healthStatus"].readIfPresent()
        value.managedAgents = try reader["managedAgents"].readListIfPresent(memberReadingClosure: ECSClientTypes.ManagedAgent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.cpu = try reader["cpu"].readIfPresent()
        value.memory = try reader["memory"].readIfPresent()
        value.memoryReservation = try reader["memoryReservation"].readIfPresent()
        value.gpuIds = try reader["gpuIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ECSClientTypes.ManagedAgent {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ManagedAgent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ManagedAgent()
        value.lastStartedAt = try reader["lastStartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        value.lastStatus = try reader["lastStatus"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.NetworkInterface {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.NetworkInterface {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.NetworkInterface()
        value.attachmentId = try reader["attachmentId"].readIfPresent()
        value.privateIpv4Address = try reader["privateIpv4Address"].readIfPresent()
        value.ipv6Address = try reader["ipv6Address"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.NetworkBinding {

    static func write(value: ECSClientTypes.NetworkBinding?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindIP"].write(value.bindIP)
        try writer["containerPort"].write(value.containerPort)
        try writer["containerPortRange"].write(value.containerPortRange)
        try writer["hostPort"].write(value.hostPort)
        try writer["hostPortRange"].write(value.hostPortRange)
        try writer["protocol"].write(value.`protocol`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.NetworkBinding {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.NetworkBinding()
        value.bindIP = try reader["bindIP"].readIfPresent()
        value.containerPort = try reader["containerPort"].readIfPresent()
        value.hostPort = try reader["hostPort"].readIfPresent()
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.containerPortRange = try reader["containerPortRange"].readIfPresent()
        value.hostPortRange = try reader["hostPortRange"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.Session {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.Session {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.Session()
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.streamUrl = try reader["streamUrl"].readIfPresent()
        value.tokenValue = try reader["tokenValue"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ProtectedTask {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ProtectedTask {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ProtectedTask()
        value.taskArn = try reader["taskArn"].readIfPresent()
        value.protectionEnabled = try reader["protectionEnabled"].readIfPresent() ?? false
        value.expirationDate = try reader["expirationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ECSClientTypes.ServiceDeploymentBrief {

    static func read(from reader: SmithyJSON.Reader) throws -> ECSClientTypes.ServiceDeploymentBrief {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ECSClientTypes.ServiceDeploymentBrief()
        value.serviceDeploymentArn = try reader["serviceDeploymentArn"].readIfPresent()
        value.serviceArn = try reader["serviceArn"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.finishedAt = try reader["finishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.targetServiceRevisionArn = try reader["targetServiceRevisionArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReason = try reader["statusReason"].readIfPresent()
        return value
    }
}

extension ECSClientTypes.ClusterServiceConnectDefaultsRequest {

    static func write(value: ECSClientTypes.ClusterServiceConnectDefaultsRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["namespace"].write(value.namespace)
    }
}

extension ECSClientTypes.CreatedAt {

    static func write(value: ECSClientTypes.CreatedAt?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["after"].writeTimestamp(value.after, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["before"].writeTimestamp(value.before, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ECSClientTypes.PlatformDevice {

    static func write(value: ECSClientTypes.PlatformDevice?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["type"].write(value.type)
    }
}

extension ECSClientTypes.TaskVolumeConfiguration {

    static func write(value: ECSClientTypes.TaskVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["managedEBSVolume"].write(value.managedEBSVolume, with: ECSClientTypes.TaskManagedEBSVolumeConfiguration.write(value:to:))
        try writer["name"].write(value.name)
    }
}

extension ECSClientTypes.TaskManagedEBSVolumeConfiguration {

    static func write(value: ECSClientTypes.TaskManagedEBSVolumeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encrypted"].write(value.encrypted)
        try writer["filesystemType"].write(value.filesystemType)
        try writer["iops"].write(value.iops)
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["roleArn"].write(value.roleArn)
        try writer["sizeInGiB"].write(value.sizeInGiB)
        try writer["snapshotId"].write(value.snapshotId)
        try writer["tagSpecifications"].writeList(value.tagSpecifications, memberWritingClosure: ECSClientTypes.EBSTagSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["terminationPolicy"].write(value.terminationPolicy, with: ECSClientTypes.TaskManagedEBSVolumeTerminationPolicy.write(value:to:))
        try writer["throughput"].write(value.throughput)
        try writer["volumeType"].write(value.volumeType)
    }
}

extension ECSClientTypes.TaskManagedEBSVolumeTerminationPolicy {

    static func write(value: ECSClientTypes.TaskManagedEBSVolumeTerminationPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deleteOnTermination"].write(value.deleteOnTermination)
    }
}

extension ECSClientTypes.AttachmentStateChange {

    static func write(value: ECSClientTypes.AttachmentStateChange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attachmentArn"].write(value.attachmentArn)
        try writer["status"].write(value.status)
    }
}

extension ECSClientTypes.ContainerStateChange {

    static func write(value: ECSClientTypes.ContainerStateChange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerName"].write(value.containerName)
        try writer["exitCode"].write(value.exitCode)
        try writer["imageDigest"].write(value.imageDigest)
        try writer["networkBindings"].writeList(value.networkBindings, memberWritingClosure: ECSClientTypes.NetworkBinding.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["reason"].write(value.reason)
        try writer["runtimeId"].write(value.runtimeId)
        try writer["status"].write(value.status)
    }
}

extension ECSClientTypes.ManagedAgentStateChange {

    static func write(value: ECSClientTypes.ManagedAgentStateChange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["containerName"].write(value.containerName)
        try writer["managedAgentName"].write(value.managedAgentName)
        try writer["reason"].write(value.reason)
        try writer["status"].write(value.status)
    }
}

extension ECSClientTypes.AutoScalingGroupProviderUpdate {

    static func write(value: ECSClientTypes.AutoScalingGroupProviderUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["managedDraining"].write(value.managedDraining)
        try writer["managedScaling"].write(value.managedScaling, with: ECSClientTypes.ManagedScaling.write(value:to:))
        try writer["managedTerminationProtection"].write(value.managedTerminationProtection)
    }
}

public enum ECSClientTypes {}
