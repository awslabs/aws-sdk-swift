// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ECSClient {
    /// Paginate over `[ListAccountSettingsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAccountSettingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAccountSettingsOutput`
    public func listAccountSettingsPaginated(input: ListAccountSettingsInput) -> ClientRuntime.PaginatorSequence<ListAccountSettingsInput, ListAccountSettingsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListAccountSettingsInput, ListAccountSettingsOutput>(input: input, inputKey: \ListAccountSettingsInput.nextToken, outputKey: \ListAccountSettingsOutput.nextToken, paginationFunction: self.listAccountSettings(input:))
=======
        return ClientRuntime.PaginatorSequence<ListAccountSettingsInput, ListAccountSettingsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAccountSettings(input:))
>>>>>>> main
    }
}

extension ListAccountSettingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAccountSettingsInput {
        return ListAccountSettingsInput(
            effectiveSettings: self.effectiveSettings,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            principalArn: self.principalArn,
            value: self.value
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListAccountSettingsInput, Output == ListAccountSettingsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListAccountSettingsInput, OperationStackOutput == ListAccountSettingsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listAccountSettingsPaginated`
    /// to access the nested member `[ECSClientTypes.Setting]`
    /// - Returns: `[ECSClientTypes.Setting]`
    public func settings() async throws -> [ECSClientTypes.Setting] {
        return try await self.asyncCompactMap { item in item.settings }
    }
}
extension ECSClient {
    /// Paginate over `[ListAttributesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAttributesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAttributesOutput`
    public func listAttributesPaginated(input: ListAttributesInput) -> ClientRuntime.PaginatorSequence<ListAttributesInput, ListAttributesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListAttributesInput, ListAttributesOutput>(input: input, inputKey: \ListAttributesInput.nextToken, outputKey: \ListAttributesOutput.nextToken, paginationFunction: self.listAttributes(input:))
=======
        return ClientRuntime.PaginatorSequence<ListAttributesInput, ListAttributesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAttributes(input:))
>>>>>>> main
    }
}

extension ListAttributesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAttributesInput {
        return ListAttributesInput(
            attributeName: self.attributeName,
            attributeValue: self.attributeValue,
            cluster: self.cluster,
            maxResults: self.maxResults,
            nextToken: token,
            targetType: self.targetType
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListAttributesInput, Output == ListAttributesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListAttributesInput, OperationStackOutput == ListAttributesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listAttributesPaginated`
    /// to access the nested member `[ECSClientTypes.Attribute]`
    /// - Returns: `[ECSClientTypes.Attribute]`
    public func attributes() async throws -> [ECSClientTypes.Attribute] {
        return try await self.asyncCompactMap { item in item.attributes }
    }
}
extension ECSClient {
    /// Paginate over `[ListClustersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListClustersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListClustersOutput`
    public func listClustersPaginated(input: ListClustersInput) -> ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutput>(input: input, inputKey: \ListClustersInput.nextToken, outputKey: \ListClustersOutput.nextToken, paginationFunction: self.listClusters(input:))
=======
        return ClientRuntime.PaginatorSequence<ListClustersInput, ListClustersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listClusters(input:))
>>>>>>> main
    }
}

extension ListClustersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListClustersInput {
        return ListClustersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListClustersInput, Output == ListClustersOutput {
=======
extension PaginatorSequence where OperationStackInput == ListClustersInput, OperationStackOutput == ListClustersOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listClustersPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func clusterArns() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.clusterArns }
    }
}
extension ECSClient {
    /// Paginate over `[ListContainerInstancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListContainerInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListContainerInstancesOutput`
    public func listContainerInstancesPaginated(input: ListContainerInstancesInput) -> ClientRuntime.PaginatorSequence<ListContainerInstancesInput, ListContainerInstancesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListContainerInstancesInput, ListContainerInstancesOutput>(input: input, inputKey: \ListContainerInstancesInput.nextToken, outputKey: \ListContainerInstancesOutput.nextToken, paginationFunction: self.listContainerInstances(input:))
=======
        return ClientRuntime.PaginatorSequence<ListContainerInstancesInput, ListContainerInstancesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listContainerInstances(input:))
>>>>>>> main
    }
}

extension ListContainerInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContainerInstancesInput {
        return ListContainerInstancesInput(
            cluster: self.cluster,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListContainerInstancesInput, Output == ListContainerInstancesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListContainerInstancesInput, OperationStackOutput == ListContainerInstancesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listContainerInstancesPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func containerInstanceArns() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.containerInstanceArns }
    }
}
extension ECSClient {
    /// Paginate over `[ListServicesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListServicesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListServicesOutput`
    public func listServicesPaginated(input: ListServicesInput) -> ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput>(input: input, inputKey: \ListServicesInput.nextToken, outputKey: \ListServicesOutput.nextToken, paginationFunction: self.listServices(input:))
=======
        return ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listServices(input:))
>>>>>>> main
    }
}

extension ListServicesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServicesInput {
        return ListServicesInput(
            cluster: self.cluster,
            launchType: self.launchType,
            maxResults: self.maxResults,
            nextToken: token,
            schedulingStrategy: self.schedulingStrategy
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListServicesInput, Output == ListServicesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListServicesInput, OperationStackOutput == ListServicesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listServicesPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func serviceArns() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.serviceArns }
    }
}
extension ECSClient {
    /// Paginate over `[ListServicesByNamespaceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListServicesByNamespaceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListServicesByNamespaceOutput`
    public func listServicesByNamespacePaginated(input: ListServicesByNamespaceInput) -> ClientRuntime.PaginatorSequence<ListServicesByNamespaceInput, ListServicesByNamespaceOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListServicesByNamespaceInput, ListServicesByNamespaceOutput>(input: input, inputKey: \ListServicesByNamespaceInput.nextToken, outputKey: \ListServicesByNamespaceOutput.nextToken, paginationFunction: self.listServicesByNamespace(input:))
=======
        return ClientRuntime.PaginatorSequence<ListServicesByNamespaceInput, ListServicesByNamespaceOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listServicesByNamespace(input:))
>>>>>>> main
    }
}

extension ListServicesByNamespaceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServicesByNamespaceInput {
        return ListServicesByNamespaceInput(
            maxResults: self.maxResults,
            namespace: self.namespace,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListServicesByNamespaceInput, Output == ListServicesByNamespaceOutput {
=======
extension PaginatorSequence where OperationStackInput == ListServicesByNamespaceInput, OperationStackOutput == ListServicesByNamespaceOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listServicesByNamespacePaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func serviceArns() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.serviceArns }
    }
}
extension ECSClient {
    /// Paginate over `[ListTaskDefinitionFamiliesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTaskDefinitionFamiliesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTaskDefinitionFamiliesOutput`
    public func listTaskDefinitionFamiliesPaginated(input: ListTaskDefinitionFamiliesInput) -> ClientRuntime.PaginatorSequence<ListTaskDefinitionFamiliesInput, ListTaskDefinitionFamiliesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTaskDefinitionFamiliesInput, ListTaskDefinitionFamiliesOutput>(input: input, inputKey: \ListTaskDefinitionFamiliesInput.nextToken, outputKey: \ListTaskDefinitionFamiliesOutput.nextToken, paginationFunction: self.listTaskDefinitionFamilies(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTaskDefinitionFamiliesInput, ListTaskDefinitionFamiliesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTaskDefinitionFamilies(input:))
>>>>>>> main
    }
}

extension ListTaskDefinitionFamiliesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTaskDefinitionFamiliesInput {
        return ListTaskDefinitionFamiliesInput(
            familyPrefix: self.familyPrefix,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTaskDefinitionFamiliesInput, Output == ListTaskDefinitionFamiliesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTaskDefinitionFamiliesInput, OperationStackOutput == ListTaskDefinitionFamiliesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTaskDefinitionFamiliesPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func families() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.families }
    }
}
extension ECSClient {
    /// Paginate over `[ListTaskDefinitionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTaskDefinitionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTaskDefinitionsOutput`
    public func listTaskDefinitionsPaginated(input: ListTaskDefinitionsInput) -> ClientRuntime.PaginatorSequence<ListTaskDefinitionsInput, ListTaskDefinitionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTaskDefinitionsInput, ListTaskDefinitionsOutput>(input: input, inputKey: \ListTaskDefinitionsInput.nextToken, outputKey: \ListTaskDefinitionsOutput.nextToken, paginationFunction: self.listTaskDefinitions(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTaskDefinitionsInput, ListTaskDefinitionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTaskDefinitions(input:))
>>>>>>> main
    }
}

extension ListTaskDefinitionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTaskDefinitionsInput {
        return ListTaskDefinitionsInput(
            familyPrefix: self.familyPrefix,
            maxResults: self.maxResults,
            nextToken: token,
            sort: self.sort,
            status: self.status
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTaskDefinitionsInput, Output == ListTaskDefinitionsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTaskDefinitionsInput, OperationStackOutput == ListTaskDefinitionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTaskDefinitionsPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func taskDefinitionArns() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.taskDefinitionArns }
    }
}
extension ECSClient {
    /// Paginate over `[ListTasksOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTasksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTasksOutput`
    public func listTasksPaginated(input: ListTasksInput) -> ClientRuntime.PaginatorSequence<ListTasksInput, ListTasksOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTasksInput, ListTasksOutput>(input: input, inputKey: \ListTasksInput.nextToken, outputKey: \ListTasksOutput.nextToken, paginationFunction: self.listTasks(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTasksInput, ListTasksOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTasks(input:))
>>>>>>> main
    }
}

extension ListTasksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTasksInput {
        return ListTasksInput(
            cluster: self.cluster,
            containerInstance: self.containerInstance,
            desiredStatus: self.desiredStatus,
            family: self.family,
            launchType: self.launchType,
            maxResults: self.maxResults,
            nextToken: token,
            serviceName: self.serviceName,
            startedBy: self.startedBy
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTasksInput, Output == ListTasksOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTasksInput, OperationStackOutput == ListTasksOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTasksPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func taskArns() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.taskArns }
    }
}
