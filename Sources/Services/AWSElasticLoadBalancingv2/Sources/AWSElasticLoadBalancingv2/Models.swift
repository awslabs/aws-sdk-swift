//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
@_spi(SmithyReadWrite) import class SmithyFormURL.Writer
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSQueryError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension ElasticLoadBalancingv2ClientTypes {

    public enum AuthenticateCognitoActionConditionalBehaviorEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case authenticate
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticateCognitoActionConditionalBehaviorEnum] {
            return [
                .allow,
                .authenticate,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "allow"
            case .authenticate: return "authenticate"
            case .deny: return "deny"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Request parameters to use when integrating with Amazon Cognito to authenticate users.
    public struct AuthenticateCognitoActionConfig {
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public var authenticationRequestExtraParams: [Swift.String: Swift.String]?
        /// The behavior if the user is not authenticated. The following are possible values:
        ///
        /// * deny - Return an HTTP 401 Unauthorized error.
        ///
        /// * allow - Allow the request to be forwarded to the target.
        ///
        /// * authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.
        public var onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConditionalBehaviorEnum?
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public var scope: Swift.String?
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public var sessionCookieName: Swift.String?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public var sessionTimeout: Swift.Int?
        /// The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
        /// This member is required.
        public var userPoolArn: Swift.String?
        /// The ID of the Amazon Cognito user pool client.
        /// This member is required.
        public var userPoolClientId: Swift.String?
        /// The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
        /// This member is required.
        public var userPoolDomain: Swift.String?

        public init(
            authenticationRequestExtraParams: [Swift.String: Swift.String]? = nil,
            onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConditionalBehaviorEnum? = nil,
            scope: Swift.String? = nil,
            sessionCookieName: Swift.String? = nil,
            sessionTimeout: Swift.Int? = nil,
            userPoolArn: Swift.String? = nil,
            userPoolClientId: Swift.String? = nil,
            userPoolDomain: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.scope = scope
            self.sessionCookieName = sessionCookieName
            self.sessionTimeout = sessionTimeout
            self.userPoolArn = userPoolArn
            self.userPoolClientId = userPoolClientId
            self.userPoolDomain = userPoolDomain
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {

    public enum AuthenticateOidcActionConditionalBehaviorEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case authenticate
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticateOidcActionConditionalBehaviorEnum] {
            return [
                .allow,
                .authenticate,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "allow"
            case .authenticate: return "authenticate"
            case .deny: return "deny"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
    public struct AuthenticateOidcActionConfig {
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public var authenticationRequestExtraParams: [Swift.String: Swift.String]?
        /// The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var authorizationEndpoint: Swift.String?
        /// The OAuth 2.0 client identifier.
        /// This member is required.
        public var clientId: Swift.String?
        /// The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set UseExistingClientSecret to true.
        public var clientSecret: Swift.String?
        /// The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var issuer: Swift.String?
        /// The behavior if the user is not authenticated. The following are possible values:
        ///
        /// * deny - Return an HTTP 401 Unauthorized error.
        ///
        /// * allow - Allow the request to be forwarded to the target.
        ///
        /// * authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.
        public var onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum?
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public var scope: Swift.String?
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public var sessionCookieName: Swift.String?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public var sessionTimeout: Swift.Int?
        /// The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var tokenEndpoint: Swift.String?
        /// Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
        public var useExistingClientSecret: Swift.Bool?
        /// The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var userInfoEndpoint: Swift.String?

        public init(
            authenticationRequestExtraParams: [Swift.String: Swift.String]? = nil,
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            issuer: Swift.String? = nil,
            onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum? = nil,
            scope: Swift.String? = nil,
            sessionCookieName: Swift.String? = nil,
            sessionTimeout: Swift.Int? = nil,
            tokenEndpoint: Swift.String? = nil,
            useExistingClientSecret: Swift.Bool? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.scope = scope
            self.sessionCookieName = sessionCookieName
            self.sessionTimeout = sessionTimeout
            self.tokenEndpoint = tokenEndpoint
            self.useExistingClientSecret = useExistingClientSecret
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an action that returns a custom HTTP response.
    public struct FixedResponseActionConfig {
        /// The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json
        public var contentType: Swift.String?
        /// The message.
        public var messageBody: Swift.String?
        /// The HTTP response code (2XX, 4XX, or 5XX).
        /// This member is required.
        public var statusCode: Swift.String?

        public init(
            contentType: Swift.String? = nil,
            messageBody: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.contentType = contentType
            self.messageBody = messageBody
            self.statusCode = statusCode
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about how traffic will be distributed between multiple target groups in a forward rule.
    public struct TargetGroupTuple {
        /// The Amazon Resource Name (ARN) of the target group.
        public var targetGroupArn: Swift.String?
        /// The weight. The range is 0 to 999.
        public var weight: Swift.Int?

        public init(
            targetGroupArn: Swift.String? = nil,
            weight: Swift.Int? = nil
        )
        {
            self.targetGroupArn = targetGroupArn
            self.weight = weight
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the target group stickiness for a rule.
    public struct TargetGroupStickinessConfig {
        /// The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        public var durationSeconds: Swift.Int?
        /// Indicates whether target group stickiness is enabled.
        public var enabled: Swift.Bool?

        public init(
            durationSeconds: Swift.Int? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.durationSeconds = durationSeconds
            self.enabled = enabled
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a forward action.
    public struct ForwardActionConfig {
        /// The target group stickiness for the rule.
        public var targetGroupStickinessConfig: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig?
        /// The target groups. For Network Load Balancers, you can specify a single target group.
        public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroupTuple]?

        public init(
            targetGroupStickinessConfig: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig? = nil,
            targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroupTuple]? = nil
        )
        {
            self.targetGroupStickinessConfig = targetGroupStickinessConfig
            self.targetGroups = targetGroups
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {

    public enum RedirectActionStatusCodeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case http301
        case http302
        case sdkUnknown(Swift.String)

        public static var allCases: [RedirectActionStatusCodeEnum] {
            return [
                .http301,
                .http302
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .http301: return "HTTP_301"
            case .http302: return "HTTP_302"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a redirect action. A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values. You can reuse URI components using the following reserved keywords:
    ///
    /// * #{protocol}
    ///
    /// * #{host}
    ///
    /// * #{port}
    ///
    /// * #{path} (the leading "/" is removed)
    ///
    /// * #{query}
    ///
    ///
    /// For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&value=xyz".
    public struct RedirectActionConfig {
        /// The hostname. This component is not percent-encoded. The hostname can contain #{host}.
        public var host: Swift.String?
        /// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
        public var path: Swift.String?
        /// The port. You can specify a value from 1 to 65535 or #{port}.
        public var port: Swift.String?
        /// The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
        public var `protocol`: Swift.String?
        /// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
        public var query: Swift.String?
        /// The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
        /// This member is required.
        public var statusCode: ElasticLoadBalancingv2ClientTypes.RedirectActionStatusCodeEnum?

        public init(
            host: Swift.String? = nil,
            path: Swift.String? = nil,
            port: Swift.String? = nil,
            `protocol`: Swift.String? = nil,
            query: Swift.String? = nil,
            statusCode: ElasticLoadBalancingv2ClientTypes.RedirectActionStatusCodeEnum? = nil
        )
        {
            self.host = host
            self.path = path
            self.port = port
            self.`protocol` = `protocol`
            self.query = query
            self.statusCode = statusCode
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {

    public enum ActionTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authenticateCognito
        case authenticateOidc
        case fixedResponse
        case forward
        case redirect
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionTypeEnum] {
            return [
                .authenticateCognito,
                .authenticateOidc,
                .fixedResponse,
                .forward,
                .redirect
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authenticateCognito: return "authenticate-cognito"
            case .authenticateOidc: return "authenticate-oidc"
            case .fixedResponse: return "fixed-response"
            case .forward: return "forward"
            case .redirect: return "redirect"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an action. Each rule must include exactly one of the following types of actions: forward, fixed-response, or redirect, and it must be the last action to be performed.
    public struct Action {
        /// [HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when Type is authenticate-cognito.
        public var authenticateCognitoConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig?
        /// [HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when Type is authenticate-oidc.
        public var authenticateOidcConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig?
        /// [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when Type is fixed-response.
        public var fixedResponseConfig: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig?
        /// Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when Type is forward. If you specify both ForwardConfig and TargetGroupArn, you can specify only one target group using ForwardConfig and it must be the same target group specified in TargetGroupArn.
        public var forwardConfig: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig?
        /// The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
        public var order: Swift.Int?
        /// [Application Load Balancer] Information for creating a redirect action. Specify only when Type is redirect.
        public var redirectConfig: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig?
        /// The Amazon Resource Name (ARN) of the target group. Specify only when Type is forward and you want to route to a single target group. To route to one or more target groups, use ForwardConfig instead.
        public var targetGroupArn: Swift.String?
        /// The type of action.
        /// This member is required.
        public var type: ElasticLoadBalancingv2ClientTypes.ActionTypeEnum?

        public init(
            authenticateCognitoConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig? = nil,
            authenticateOidcConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig? = nil,
            fixedResponseConfig: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig? = nil,
            forwardConfig: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig? = nil,
            order: Swift.Int? = nil,
            redirectConfig: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig? = nil,
            targetGroupArn: Swift.String? = nil,
            type: ElasticLoadBalancingv2ClientTypes.ActionTypeEnum? = nil
        )
        {
            self.authenticateCognitoConfig = authenticateCognitoConfig
            self.authenticateOidcConfig = authenticateOidcConfig
            self.fixedResponseConfig = fixedResponseConfig
            self.forwardConfig = forwardConfig
            self.order = order
            self.redirectConfig = redirectConfig
            self.targetGroupArn = targetGroupArn
            self.type = type
        }
    }

}

/// The specified certificate does not exist.
public struct CertificateNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CertificateNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified listener does not exist.
public struct ListenerNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ListenerNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of certificates per load balancer.
public struct TooManyCertificatesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCertificates" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an SSL server certificate.
    public struct Certificate {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var certificateArn: Swift.String?
        /// Indicates whether the certificate is the default certificate. Do not set this value when specifying a certificate as an input. This value is not included in the output when describing a listener, but is included when describing listener certificates.
        public var isDefault: Swift.Bool?

        public init(
            certificateArn: Swift.String? = nil,
            isDefault: Swift.Bool? = nil
        )
        {
            self.certificateArn = certificateArn
            self.isDefault = isDefault
        }
    }

}

public struct AddListenerCertificatesInput {
    /// The certificate to add. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
    /// This member is required.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        listenerArn: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.listenerArn = listenerArn
    }
}

public struct AddListenerCertificatesOutput {
    /// Information about the certificates in the certificate list.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil
    )
    {
        self.certificates = certificates
    }
}

/// A tag key was specified more than once.
public struct DuplicateTagKeysException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateTagKeys" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified load balancer does not exist.
public struct LoadBalancerNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LoadBalancerNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified rule does not exist.
public struct RuleNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RuleNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified target group does not exist.
public struct TargetGroupNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetGroupNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of tags for this resource.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTags" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified trust store does not exist.
public struct TrustStoreNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustStoreNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a tag.
    public struct Tag {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct AddTagsInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArns: [Swift.String]?
    /// The tags.
    /// This member is required.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        resourceArns: [Swift.String]? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.resourceArns = resourceArns
        self.tags = tags
    }
}

public struct AddTagsOutput {

    public init() { }
}

/// The provided revocation file is an invalid format, or uses an incorrect algorithm.
public struct InvalidRevocationContentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRevocationContent" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified revocation file does not exist.
public struct RevocationContentNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RevocationContentNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified trust store has too many revocation entries.
public struct TooManyTrustStoreRevocationEntriesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTrustStoreRevocationEntries" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum RevocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case crl
        case sdkUnknown(Swift.String)

        public static var allCases: [RevocationType] {
            return [
                .crl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .crl: return "CRL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a revocation file.
    public struct RevocationContent {
        /// The type of revocation file.
        public var revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType?
        /// The Amazon S3 bucket for the revocation file.
        public var s3Bucket: Swift.String?
        /// The Amazon S3 path for the revocation file.
        public var s3Key: Swift.String?
        /// The Amazon S3 object version of the revocation file.
        public var s3ObjectVersion: Swift.String?

        public init(
            revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType? = nil,
            s3Bucket: Swift.String? = nil,
            s3Key: Swift.String? = nil,
            s3ObjectVersion: Swift.String? = nil
        )
        {
            self.revocationType = revocationType
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
            self.s3ObjectVersion = s3ObjectVersion
        }
    }

}

public struct AddTrustStoreRevocationsInput {
    /// The revocation file to add.
    public var revocationContents: [ElasticLoadBalancingv2ClientTypes.RevocationContent]?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        revocationContents: [ElasticLoadBalancingv2ClientTypes.RevocationContent]? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.revocationContents = revocationContents
        self.trustStoreArn = trustStoreArn
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a revocation file in use by a trust store.
    public struct TrustStoreRevocation {
        /// The number of revoked certificates.
        public var numberOfRevokedEntries: Swift.Int?
        /// The revocation ID of the revocation file.
        public var revocationId: Swift.Int?
        /// The type of revocation file.
        public var revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            numberOfRevokedEntries: Swift.Int? = nil,
            revocationId: Swift.Int? = nil,
            revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.numberOfRevokedEntries = numberOfRevokedEntries
            self.revocationId = revocationId
            self.revocationType = revocationType
            self.trustStoreArn = trustStoreArn
        }
    }

}

public struct AddTrustStoreRevocationsOutput {
    /// Information about the revocation file added to the trust store.
    public var trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation]?

    public init(
        trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation]? = nil
    )
    {
        self.trustStoreRevocations = trustStoreRevocations
    }
}

/// The specified allocation ID does not exist.
public struct AllocationIdNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AllocationIdNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified ALPN policy is not supported.
public struct ALPNPolicyNotSupportedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ALPNPolicyNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum MitigationInEffectEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [MitigationInEffectEnum] {
            return [
                .no,
                .yes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .no: return "no"
            case .yes: return "yes"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum AnomalyResultEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case anomalous
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyResultEnum] {
            return [
                .anomalous,
                .normal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .anomalous: return "anomalous"
            case .normal: return "normal"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about anomaly detection and mitigation.
    public struct AnomalyDetection {
        /// Indicates whether anomaly mitigation is in progress.
        public var mitigationInEffect: ElasticLoadBalancingv2ClientTypes.MitigationInEffectEnum?
        /// The latest anomaly detection result.
        public var result: ElasticLoadBalancingv2ClientTypes.AnomalyResultEnum?

        public init(
            mitigationInEffect: ElasticLoadBalancingv2ClientTypes.MitigationInEffectEnum? = nil,
            result: ElasticLoadBalancingv2ClientTypes.AnomalyResultEnum? = nil
        )
        {
            self.mitigationInEffect = mitigationInEffect
            self.result = result
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a static IP address for a load balancer.
    public struct LoadBalancerAddress {
        /// [Network Load Balancers] The allocation ID of the Elastic IP address for an internal-facing load balancer.
        public var allocationId: Swift.String?
        /// The static IP address.
        public var ipAddress: Swift.String?
        /// [Network Load Balancers] The IPv6 address.
        public var ipv6Address: Swift.String?
        /// [Network Load Balancers] The private IPv4 address for an internal load balancer.
        public var privateIPv4Address: Swift.String?

        public init(
            allocationId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIPv4Address: Swift.String? = nil
        )
        {
            self.allocationId = allocationId
            self.ipAddress = ipAddress
            self.ipv6Address = ipv6Address
            self.privateIPv4Address = privateIPv4Address
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an Availability Zone.
    public struct AvailabilityZone {
        /// [Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.
        public var loadBalancerAddresses: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress]?
        /// [Application Load Balancers on Outposts] The ID of the Outpost.
        public var outpostId: Swift.String?
        /// The ID of the subnet. You can specify one subnet per Availability Zone.
        public var subnetId: Swift.String?
        /// The name of the Availability Zone.
        public var zoneName: Swift.String?

        public init(
            loadBalancerAddresses: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress]? = nil,
            outpostId: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            zoneName: Swift.String? = nil
        )
        {
            self.loadBalancerAddresses = loadBalancerAddresses
            self.outpostId = outpostId
            self.subnetId = subnetId
            self.zoneName = zoneName
        }
    }

}

/// The specified Availability Zone is not supported.
public struct AvailabilityZoneNotSupportedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AvailabilityZoneNotSupported" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified ca certificate bundle does not exist.
public struct CaCertificatesBundleNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CaCertificatesBundleNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a cipher used in a policy.
    public struct Cipher {
        /// The name of the cipher.
        public var name: Swift.String?
        /// The priority of the cipher.
        public var priority: Swift.Int?

        public init(
            name: Swift.String? = nil,
            priority: Swift.Int? = nil
        )
        {
            self.name = name
            self.priority = priority
        }
    }

}

/// A listener with the specified port already exists.
public struct DuplicateListenerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateListener" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified configuration is not valid with this protocol.
public struct IncompatibleProtocolsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleProtocols" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested configuration is not valid.
public struct InvalidConfigurationRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidConfigurationRequest" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested action is not valid.
public struct InvalidLoadBalancerActionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLoadBalancerAction" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified SSL policy does not exist.
public struct SSLPolicyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SSLPolicyNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of load balancers per target group.
public struct TargetGroupAssociationLimitException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetGroupAssociationLimit" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of actions per rule.
public struct TooManyActionsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyActions" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of listeners per load balancer.
public struct TooManyListenersException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyListeners" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of times a target can be registered with a load balancer.
public struct TooManyRegistrationsForTargetIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRegistrationsForTargetId" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of targets.
public struct TooManyTargetsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTargets" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of unique target groups per load balancer across all listeners. If a target group is used by multiple actions for a load balancer, it is counted as only one use.
public struct TooManyUniqueTargetGroupsPerLoadBalancerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyUniqueTargetGroupsPerLoadBalancer" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified trust store is not active.
public struct TrustStoreNotReadyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustStoreNotReady" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified protocol is not supported.
public struct UnsupportedProtocolException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedProtocol" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum TrustStoreAssociationStatusEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case removed
        case sdkUnknown(Swift.String)

        public static var allCases: [TrustStoreAssociationStatusEnum] {
            return [
                .active,
                .removed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .removed: return "removed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the mutual authentication attributes of a listener.
    public struct MutualAuthenticationAttributes {
        /// Indicates whether expired client certificates are ignored.
        public var ignoreClientCertificateExpiry: Swift.Bool?
        /// The client certificate handling method. Options are off, passthrough or verify. The default value is off.
        public var mode: Swift.String?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?
        /// Indicates a shared trust stores association status.
        public var trustStoreAssociationStatus: ElasticLoadBalancingv2ClientTypes.TrustStoreAssociationStatusEnum?

        public init(
            ignoreClientCertificateExpiry: Swift.Bool? = nil,
            mode: Swift.String? = nil,
            trustStoreArn: Swift.String? = nil,
            trustStoreAssociationStatus: ElasticLoadBalancingv2ClientTypes.TrustStoreAssociationStatusEnum? = nil
        )
        {
            self.ignoreClientCertificateExpiry = ignoreClientCertificateExpiry
            self.mode = mode
            self.trustStoreArn = trustStoreArn
            self.trustStoreAssociationStatus = trustStoreAssociationStatus
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {

    public enum ProtocolEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case geneve
        case http
        case https
        case tcp
        case tcpUdp
        case tls
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtocolEnum] {
            return [
                .geneve,
                .http,
                .https,
                .tcp,
                .tcpUdp,
                .tls,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .geneve: return "GENEVE"
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case .tcp: return "TCP"
            case .tcpUdp: return "TCP_UDP"
            case .tls: return "TLS"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateListenerInput {
    /// [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:
    ///
    /// * HTTP1Only
    ///
    /// * HTTP2Only
    ///
    /// * HTTP2Optional
    ///
    /// * HTTP2Preferred
    ///
    /// * None
    ///
    ///
    /// For more information, see [ALPN policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies) in the Network Load Balancers Guide.
    public var alpnPolicy: [Swift.String]?
    /// [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The actions for the default rule.
    /// This member is required.
    public var defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?
    /// The mutual authentication configuration information.
    public var mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?
    /// The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.
    public var port: Swift.Int?
    /// The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.
    public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the Application Load Balancers Guide and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the Network Load Balancers Guide.
    public var sslPolicy: Swift.String?
    /// The tags to assign to the listener.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        alpnPolicy: [Swift.String]? = nil,
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        loadBalancerArn: Swift.String? = nil,
        mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes? = nil,
        port: Swift.Int? = nil,
        `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        sslPolicy: Swift.String? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.alpnPolicy = alpnPolicy
        self.certificates = certificates
        self.defaultActions = defaultActions
        self.loadBalancerArn = loadBalancerArn
        self.mutualAuthentication = mutualAuthentication
        self.port = port
        self.`protocol` = `protocol`
        self.sslPolicy = sslPolicy
        self.tags = tags
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a listener.
    public struct Listener {
        /// [TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.
        public var alpnPolicy: [Swift.String]?
        /// [HTTPS or TLS listener] The default certificate for the listener.
        public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
        /// The default actions for the listener.
        public var defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]?
        /// The Amazon Resource Name (ARN) of the listener.
        public var listenerArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var loadBalancerArn: Swift.String?
        /// The mutual authentication configuration information.
        public var mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?
        /// The port on which the load balancer is listening.
        public var port: Swift.Int?
        /// The protocol for connections from clients to the load balancer.
        public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
        /// [HTTPS or TLS listener] The security policy that defines which protocols and ciphers are supported.
        public var sslPolicy: Swift.String?

        public init(
            alpnPolicy: [Swift.String]? = nil,
            certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
            defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
            listenerArn: Swift.String? = nil,
            loadBalancerArn: Swift.String? = nil,
            mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes? = nil,
            port: Swift.Int? = nil,
            `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
            sslPolicy: Swift.String? = nil
        )
        {
            self.alpnPolicy = alpnPolicy
            self.certificates = certificates
            self.defaultActions = defaultActions
            self.listenerArn = listenerArn
            self.loadBalancerArn = loadBalancerArn
            self.mutualAuthentication = mutualAuthentication
            self.port = port
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
        }
    }

}

public struct CreateListenerOutput {
    /// Information about the listener.
    public var listeners: [ElasticLoadBalancingv2ClientTypes.Listener]?

    public init(
        listeners: [ElasticLoadBalancingv2ClientTypes.Listener]? = nil
    )
    {
        self.listeners = listeners
    }
}

/// A load balancer with the specified name already exists.
public struct DuplicateLoadBalancerNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateLoadBalancerName" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested scheme is not valid.
public struct InvalidSchemeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidScheme" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified security group does not exist.
public struct InvalidSecurityGroupException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSecurityGroup" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified subnet is out of available addresses.
public struct InvalidSubnetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This operation is not allowed.
public struct OperationNotPermittedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationNotPermitted" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A specified resource is in use.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified subnet does not exist.
public struct SubnetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of load balancers for your Amazon Web Services account.
public struct TooManyLoadBalancersException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyLoadBalancers" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum IpAddressType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dualstack
        case dualstackWithoutPublicIpv4
        case ipv4
        case sdkUnknown(Swift.String)

        public static var allCases: [IpAddressType] {
            return [
                .dualstack,
                .dualstackWithoutPublicIpv4,
                .ipv4
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dualstack: return "dualstack"
            case .dualstackWithoutPublicIpv4: return "dualstack-without-public-ipv4"
            case .ipv4: return "ipv4"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum LoadBalancerSchemeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `internal`
        case internetFacing
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerSchemeEnum] {
            return [
                .internal,
                .internetFacing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .internal: return "internal"
            case .internetFacing: return "internet-facing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a subnet mapping.
    public struct SubnetMapping {
        /// [Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.
        public var allocationId: Swift.String?
        /// [Network Load Balancers] The IPv6 address.
        public var ipv6Address: Swift.String?
        /// [Network Load Balancers] The private IPv4 address for an internal load balancer.
        public var privateIPv4Address: Swift.String?
        /// The ID of the subnet.
        public var subnetId: Swift.String?

        public init(
            allocationId: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIPv4Address: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.allocationId = allocationId
            self.ipv6Address = ipv6Address
            self.privateIPv4Address = privateIPv4Address
            self.subnetId = subnetId
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {

    public enum LoadBalancerTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case application
        case gateway
        case network
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTypeEnum] {
            return [
                .application,
                .gateway,
                .network
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .application: return "application"
            case .gateway: return "gateway"
            case .network: return "network"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateLoadBalancerInput {
    /// [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool).
    public var customerOwnedIpv4Pool: Swift.String?
    /// Note: Internal load balancers must use the ipv4 IP address type. [Application Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses), dualstack (for IPv4 and IPv6 addresses), and dualstack-without-public-ipv4 (for IPv6 only public addresses, with private IPv4 and IPv6 addresses). [Network Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). You can’t specify dualstack for a load balancer with a UDP or TCP_UDP listener. [Gateway Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
    /// The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
    /// This member is required.
    public var name: Swift.String?
    /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a scheme for a Gateway Load Balancer.
    public var scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum?
    /// [Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.
    public var securityGroups: [Swift.String]?
    /// The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.
    public var subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]?
    /// The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    public var subnets: [Swift.String]?
    /// The tags to assign to the load balancer.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?
    /// The type of load balancer. The default is application.
    public var type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum?

    public init(
        customerOwnedIpv4Pool: Swift.String? = nil,
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
        name: Swift.String? = nil,
        scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum? = nil,
        securityGroups: [Swift.String]? = nil,
        subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]? = nil,
        subnets: [Swift.String]? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil,
        type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum? = nil
    )
    {
        self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
        self.ipAddressType = ipAddressType
        self.name = name
        self.scheme = scheme
        self.securityGroups = securityGroups
        self.subnetMappings = subnetMappings
        self.subnets = subnets
        self.tags = tags
        self.type = type
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum LoadBalancerStateEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case activeImpaired
        case failed
        case provisioning
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerStateEnum] {
            return [
                .active,
                .activeImpaired,
                .failed,
                .provisioning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .activeImpaired: return "active_impaired"
            case .failed: return "failed"
            case .provisioning: return "provisioning"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the state of the load balancer.
    public struct LoadBalancerState {
        /// The state code. The initial state of the load balancer is provisioning. After the load balancer is fully set up and ready to route traffic, its state is active. If load balancer is routing traffic but does not have the resources it needs to scale, its state isactive_impaired. If the load balancer could not be set up, its state is failed.
        public var code: ElasticLoadBalancingv2ClientTypes.LoadBalancerStateEnum?
        /// A description of the state.
        public var reason: Swift.String?

        public init(
            code: ElasticLoadBalancingv2ClientTypes.LoadBalancerStateEnum? = nil,
            reason: Swift.String? = nil
        )
        {
            self.code = code
            self.reason = reason
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a load balancer.
    public struct LoadBalancer {
        /// The subnets for the load balancer.
        public var availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]?
        /// The ID of the Amazon Route 53 hosted zone associated with the load balancer.
        public var canonicalHostedZoneId: Swift.String?
        /// The date and time the load balancer was created.
        public var createdTime: Foundation.Date?
        /// [Application Load Balancers on Outposts] The ID of the customer-owned address pool.
        public var customerOwnedIpv4Pool: Swift.String?
        /// The public DNS name of the load balancer.
        public var dnsName: Swift.String?
        /// Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through Amazon Web Services PrivateLink.
        public var enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: Swift.String?
        /// [Application Load Balancers] The type of IP addresses used for public or private connections by the subnets attached to your load balancer. The possible values are ipv4 (for only IPv4 addresses), dualstack (for IPv4 and IPv6 addresses), and dualstack-without-public-ipv4 (for IPv6 only public addresses, with private IPv4 and IPv6 addresses). [Network Load Balancers and Gateway Load Balancers] The type of IP addresses used for public or private connections by the subnets attached to your load balancer. The possible values are ipv4 (for only IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
        public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var loadBalancerArn: Swift.String?
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.
        public var scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum?
        /// The IDs of the security groups for the load balancer.
        public var securityGroups: [Swift.String]?
        /// The state of the load balancer.
        public var state: ElasticLoadBalancingv2ClientTypes.LoadBalancerState?
        /// The type of load balancer.
        public var type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum?
        /// The ID of the VPC for the load balancer.
        public var vpcId: Swift.String?

        public init(
            availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]? = nil,
            canonicalHostedZoneId: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            customerOwnedIpv4Pool: Swift.String? = nil,
            dnsName: Swift.String? = nil,
            enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: Swift.String? = nil,
            ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
            loadBalancerArn: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum? = nil,
            securityGroups: [Swift.String]? = nil,
            state: ElasticLoadBalancingv2ClientTypes.LoadBalancerState? = nil,
            type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.createdTime = createdTime
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.dnsName = dnsName
            self.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
            self.ipAddressType = ipAddressType
            self.loadBalancerArn = loadBalancerArn
            self.loadBalancerName = loadBalancerName
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.state = state
            self.type = type
            self.vpcId = vpcId
        }
    }

}

public struct CreateLoadBalancerOutput {
    /// Information about the load balancer.
    public var loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]?

    public init(
        loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]? = nil
    )
    {
        self.loadBalancers = loadBalancers
    }
}

/// The specified priority is in use.
public struct PriorityInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PriorityInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of rules per load balancer.
public struct TooManyRulesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRules" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of target groups for your Amazon Web Services account.
public struct TooManyTargetGroupsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTargetGroups" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a host header condition.
    public struct HostHeaderConditionConfig {
        /// The host names. The maximum size of each name is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If you specify multiple strings, the condition is satisfied if one of the strings matches the host name.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an HTTP header condition. There is a set of standard HTTP header fields. You can also define custom HTTP header fields.
    public struct HttpHeaderConditionConfig {
        /// The name of the HTTP header field. The maximum size is 40 characters. The header name is case insensitive. The allowed characters are specified by RFC 7230. Wildcards are not supported. You can't use an HTTP header condition to specify the host header. Use [HostHeaderConditionConfig] to specify a host header condition.
        public var httpHeaderName: Swift.String?
        /// The strings to compare against the value of the HTTP header. The maximum size of each string is 128 characters. The comparison strings are case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request, we search them in order until a match is found. If you specify multiple strings, the condition is satisfied if one of the strings matches the value of the HTTP header. To require that all of the strings are a match, create one condition per string.
        public var values: [Swift.String]?

        public init(
            httpHeaderName: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.httpHeaderName = httpHeaderName
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an HTTP method condition. HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the [HTTP Method Registry](https://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also define custom HTTP methods.
    public struct HttpRequestMethodConditionConfig {
        /// The name of the request method. The maximum size is 40 characters. The allowed characters are A-Z, hyphen (-), and underscore (_). The comparison is case sensitive. Wildcards are not supported; therefore, the method name must be an exact match. If you specify multiple strings, the condition is satisfied if one of the strings matches the HTTP request method. We recommend that you route GET and HEAD requests in the same way, because the response to a HEAD request may be cached.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a path pattern condition.
    public struct PathPatternConditionConfig {
        /// The path patterns to compare against the request URL. The maximum size of each string is 128 characters. The comparison is case sensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If you specify multiple strings, the condition is satisfied if one of them matches the request URL. The path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use [QueryStringConditionConfig].
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a key/value pair.
    public struct QueryStringKeyValuePair {
        /// The key. You can omit the key.
        public var key: Swift.String?
        /// The value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a query string condition. The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.
    public struct QueryStringConditionConfig {
        /// The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in Values using a '\' character. If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.
        public var values: [ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair]?

        public init(
            values: [ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a source IP condition. You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.
    public struct SourceIpConditionConfig {
        /// The source IP addresses, in CIDR format. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. If you specify multiple addresses, the condition is satisfied if the source IP address of the request matches one of the CIDR blocks. This condition is not satisfied by the addresses in the X-Forwarded-For header. To search for addresses in the X-Forwarded-For header, use [HttpHeaderConditionConfig]. The total number of values must be less than, or equal to five.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a condition for a rule. Each rule can optionally include up to one of each of the following conditions: http-request-method, host-header, path-pattern, and source-ip. Each rule can also optionally include one or more of each of the following conditions: http-header and query-string. Note that the value for a condition cannot be empty. For more information, see [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html).
    public struct RuleCondition {
        /// The field in the HTTP request. The following are the possible values:
        ///
        /// * http-header
        ///
        /// * http-request-method
        ///
        /// * host-header
        ///
        /// * path-pattern
        ///
        /// * query-string
        ///
        /// * source-ip
        public var field: Swift.String?
        /// Information for a host header condition. Specify only when Field is host-header.
        public var hostHeaderConfig: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig?
        /// Information for an HTTP header condition. Specify only when Field is http-header.
        public var httpHeaderConfig: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig?
        /// Information for an HTTP method condition. Specify only when Field is http-request-method.
        public var httpRequestMethodConfig: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig?
        /// Information for a path pattern condition. Specify only when Field is path-pattern.
        public var pathPatternConfig: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig?
        /// Information for a query string condition. Specify only when Field is query-string.
        public var queryStringConfig: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig?
        /// Information for a source IP condition. Specify only when Field is source-ip.
        public var sourceIpConfig: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig?
        /// The condition value. Specify only when Field is host-header or path-pattern. Alternatively, to specify multiple host names or multiple path patterns, use HostHeaderConfig or PathPatternConfig. If Field is host-header and you are not using HostHeaderConfig, you can specify a single host name (for example, my.example.com) in Values. A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.
        ///
        /// * A-Z, a-z, 0-9
        ///
        /// * - .
        ///
        /// * * (matches 0 or more characters)
        ///
        /// * ? (matches exactly 1 character)
        ///
        ///
        /// If Field is path-pattern and you are not using PathPatternConfig, you can specify a single path pattern (for example, /img/*) in Values. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.
        ///
        /// * A-Z, a-z, 0-9
        ///
        /// * _ - . $ / ~ " ' @ : +
        ///
        /// * & (using &)
        ///
        /// * * (matches 0 or more characters)
        ///
        /// * ? (matches exactly 1 character)
        public var values: [Swift.String]?

        public init(
            field: Swift.String? = nil,
            hostHeaderConfig: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig? = nil,
            httpHeaderConfig: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig? = nil,
            httpRequestMethodConfig: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig? = nil,
            pathPatternConfig: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig? = nil,
            queryStringConfig: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig? = nil,
            sourceIpConfig: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.field = field
            self.hostHeaderConfig = hostHeaderConfig
            self.httpHeaderConfig = httpHeaderConfig
            self.httpRequestMethodConfig = httpRequestMethodConfig
            self.pathPatternConfig = pathPatternConfig
            self.queryStringConfig = queryStringConfig
            self.sourceIpConfig = sourceIpConfig
            self.values = values
        }
    }

}

public struct CreateRuleInput {
    /// The actions.
    /// This member is required.
    public var actions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The conditions.
    /// This member is required.
    public var conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?
    /// The rule priority. A listener can't have multiple rules with the same priority.
    /// This member is required.
    public var priority: Swift.Int?
    /// The tags to assign to the rule.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        actions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]? = nil,
        listenerArn: Swift.String? = nil,
        priority: Swift.Int? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.actions = actions
        self.conditions = conditions
        self.listenerArn = listenerArn
        self.priority = priority
        self.tags = tags
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a rule.
    public struct Rule {
        /// The actions. Each rule must include exactly one of the following types of actions: forward, redirect, or fixed-response, and it must be the last action to be performed.
        public var actions: [ElasticLoadBalancingv2ClientTypes.Action]?
        /// The conditions. Each rule can include zero or one of the following conditions: http-request-method, host-header, path-pattern, and source-ip, and zero or more of the following conditions: http-header and query-string.
        public var conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]?
        /// Indicates whether this is the default rule.
        public var isDefault: Swift.Bool?
        /// The priority.
        public var priority: Swift.String?
        /// The Amazon Resource Name (ARN) of the rule.
        public var ruleArn: Swift.String?

        public init(
            actions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
            conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]? = nil,
            isDefault: Swift.Bool? = nil,
            priority: Swift.String? = nil,
            ruleArn: Swift.String? = nil
        )
        {
            self.actions = actions
            self.conditions = conditions
            self.isDefault = isDefault
            self.priority = priority
            self.ruleArn = ruleArn
        }
    }

}

public struct CreateRuleOutput {
    /// Information about the rule.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.rules = rules
    }
}

/// A target group with the specified name already exists.
public struct DuplicateTargetGroupNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateTargetGroupName" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum TargetGroupIpAddressTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetGroupIpAddressTypeEnum] {
            return [
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes.
    public struct Matcher {
        /// You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.
        public var grpcCode: Swift.String?
        /// For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Gateway Load Balancers, this must be "200–399". Note that when using shorthand syntax, some values such as commas need to be escaped.
        public var httpCode: Swift.String?

        public init(
            grpcCode: Swift.String? = nil,
            httpCode: Swift.String? = nil
        )
        {
            self.grpcCode = grpcCode
            self.httpCode = httpCode
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {

    public enum TargetTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alb
        case instance
        case ip
        case lambda
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetTypeEnum] {
            return [
                .alb,
                .instance,
                .ip,
                .lambda
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alb: return "alb"
            case .instance: return "instance"
            case .ip: return "ip"
            case .lambda: return "lambda"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateTargetGroupInput {
    /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
    public var healthCheckEnabled: Swift.Bool?
    /// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is lambda, the default is 35 seconds.
    public var healthCheckIntervalSeconds: Swift.Int?
    /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    public var healthCheckPath: Swift.String?
    /// The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is traffic-port, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.
    public var healthCheckPort: Swift.String?
    /// The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    public var healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
    public var healthCheckTimeoutSeconds: Swift.Int?
    /// The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is lambda, the default is 5.
    public var healthyThresholdCount: Swift.Int?
    /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. This is an optional parameter. If not specified, the IP address type defaults to ipv4.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum?
    /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.
    public var matcher: ElasticLoadBalancingv2ClientTypes.Matcher?
    /// The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    /// This member is required.
    public var name: Swift.String?
    /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
    public var port: Swift.Int?
    /// The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.
    public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1.
    public var protocolVersion: Swift.String?
    /// The tags to assign to the target group.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?
    /// The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
    ///
    /// * instance - Register targets by instance ID. This is the default value.
    ///
    /// * ip - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.
    ///
    /// * lambda - Register a single Lambda function as a target.
    ///
    /// * alb - Register a single Application Load Balancer as a target.
    public var targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum?
    /// The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is lambda, the default is 5.
    public var unhealthyThresholdCount: Swift.Int?
    /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.
    public var vpcId: Swift.String?

    public init(
        healthCheckEnabled: Swift.Bool? = nil,
        healthCheckIntervalSeconds: Swift.Int? = nil,
        healthCheckPath: Swift.String? = nil,
        healthCheckPort: Swift.String? = nil,
        healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Swift.Int? = nil,
        healthyThresholdCount: Swift.Int? = nil,
        ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum? = nil,
        matcher: ElasticLoadBalancingv2ClientTypes.Matcher? = nil,
        name: Swift.String? = nil,
        port: Swift.Int? = nil,
        `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        protocolVersion: Swift.String? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil,
        targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum? = nil,
        unhealthyThresholdCount: Swift.Int? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.ipAddressType = ipAddressType
        self.matcher = matcher
        self.name = name
        self.port = port
        self.`protocol` = `protocol`
        self.protocolVersion = protocolVersion
        self.tags = tags
        self.targetType = targetType
        self.unhealthyThresholdCount = unhealthyThresholdCount
        self.vpcId = vpcId
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a target group.
    public struct TargetGroup {
        /// Indicates whether health checks are enabled.
        public var healthCheckEnabled: Swift.Bool?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public var healthCheckIntervalSeconds: Swift.Int?
        /// The destination for health checks on the targets.
        public var healthCheckPath: Swift.String?
        /// The port to use to connect with the target.
        public var healthCheckPort: Swift.String?
        /// The protocol to use to connect with the target. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
        public var healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
        /// The amount of time, in seconds, during which no response means a failed health check.
        public var healthCheckTimeoutSeconds: Swift.Int?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public var healthyThresholdCount: Swift.Int?
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. This is an optional parameter. If not specified, the IP address type defaults to ipv4.
        public var ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum?
        /// The Amazon Resource Name (ARN) of the load balancer that routes traffic to this target group. You can use each target group with only one load balancer.
        public var loadBalancerArns: [Swift.String]?
        /// The HTTP or gRPC codes to use when checking for a successful response from a target.
        public var matcher: ElasticLoadBalancingv2ClientTypes.Matcher?
        /// The port on which the targets are listening. This parameter is not used if the target is a Lambda function.
        public var port: Swift.Int?
        /// The protocol to use for routing traffic to the targets.
        public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        public var protocolVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the target group.
        public var targetGroupArn: Swift.String?
        /// The name of the target group.
        public var targetGroupName: Swift.String?
        /// The type of target that you must specify when registering targets with this target group. The possible values are instance (register targets by instance ID), ip (register targets by IP address), lambda (register a single Lambda function as a target), or alb (register a single Application Load Balancer as a target).
        public var targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public var unhealthyThresholdCount: Swift.Int?
        /// The ID of the VPC for the targets.
        public var vpcId: Swift.String?

        public init(
            healthCheckEnabled: Swift.Bool? = nil,
            healthCheckIntervalSeconds: Swift.Int? = nil,
            healthCheckPath: Swift.String? = nil,
            healthCheckPort: Swift.String? = nil,
            healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
            healthCheckTimeoutSeconds: Swift.Int? = nil,
            healthyThresholdCount: Swift.Int? = nil,
            ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum? = nil,
            loadBalancerArns: [Swift.String]? = nil,
            matcher: ElasticLoadBalancingv2ClientTypes.Matcher? = nil,
            port: Swift.Int? = nil,
            `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
            protocolVersion: Swift.String? = nil,
            targetGroupArn: Swift.String? = nil,
            targetGroupName: Swift.String? = nil,
            targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum? = nil,
            unhealthyThresholdCount: Swift.Int? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.healthCheckEnabled = healthCheckEnabled
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckPath = healthCheckPath
            self.healthCheckPort = healthCheckPort
            self.healthCheckProtocol = healthCheckProtocol
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.ipAddressType = ipAddressType
            self.loadBalancerArns = loadBalancerArns
            self.matcher = matcher
            self.port = port
            self.`protocol` = `protocol`
            self.protocolVersion = protocolVersion
            self.targetGroupArn = targetGroupArn
            self.targetGroupName = targetGroupName
            self.targetType = targetType
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.vpcId = vpcId
        }
    }

}

public struct CreateTargetGroupOutput {
    /// Information about the target group.
    public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]?

    public init(
        targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]? = nil
    )
    {
        self.targetGroups = targetGroups
    }
}

/// A trust store with the specified name already exists.
public struct DuplicateTrustStoreNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateTrustStoreName" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified ca certificate bundle is in an invalid format, or corrupt.
public struct InvalidCaCertificatesBundleException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCaCertificatesBundle" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've reached the limit on the number of trust stores for your Amazon Web Services account.
public struct TooManyTrustStoresException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTrustStores" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateTrustStoreInput {
    /// The Amazon S3 bucket for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Bucket: Swift.String?
    /// The Amazon S3 path for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Key: Swift.String?
    /// The Amazon S3 object version for the ca certificates bundle. If undefined the current version is used.
    public var caCertificatesBundleS3ObjectVersion: Swift.String?
    /// The name of the trust store. This name must be unique per region and cannot be changed after creation.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to assign to the trust store.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        caCertificatesBundleS3Bucket: Swift.String? = nil,
        caCertificatesBundleS3Key: Swift.String? = nil,
        caCertificatesBundleS3ObjectVersion: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket
        self.caCertificatesBundleS3Key = caCertificatesBundleS3Key
        self.caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion
        self.name = name
        self.tags = tags
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum TrustStoreStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case sdkUnknown(Swift.String)

        public static var allCases: [TrustStoreStatus] {
            return [
                .active,
                .creating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a trust store.
    public struct TrustStore {
        /// The name of the trust store.
        public var name: Swift.String?
        /// The number of ca certificates in the trust store.
        public var numberOfCaCertificates: Swift.Int?
        /// The current status of the trust store.
        public var status: ElasticLoadBalancingv2ClientTypes.TrustStoreStatus?
        /// The number of revoked certificates in the trust store.
        public var totalRevokedEntries: Swift.Int?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            name: Swift.String? = nil,
            numberOfCaCertificates: Swift.Int? = nil,
            status: ElasticLoadBalancingv2ClientTypes.TrustStoreStatus? = nil,
            totalRevokedEntries: Swift.Int? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.name = name
            self.numberOfCaCertificates = numberOfCaCertificates
            self.status = status
            self.totalRevokedEntries = totalRevokedEntries
            self.trustStoreArn = trustStoreArn
        }
    }

}

public struct CreateTrustStoreOutput {
    /// Information about the trust store created.
    public var trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]?

    public init(
        trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]? = nil
    )
    {
        self.trustStores = trustStores
    }
}

/// The specified association cannot be within the same account.
public struct DeleteAssociationSameAccountException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeleteAssociationSameAccount" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteListenerInput {
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        listenerArn: Swift.String? = nil
    )
    {
        self.listenerArn = listenerArn
    }
}

public struct DeleteListenerOutput {

    public init() { }
}

public struct DeleteLoadBalancerInput {
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.loadBalancerArn = loadBalancerArn
    }
}

public struct DeleteLoadBalancerOutput {

    public init() { }
}

public struct DeleteRuleInput {
    /// The Amazon Resource Name (ARN) of the rule.
    /// This member is required.
    public var ruleArn: Swift.String?

    public init(
        ruleArn: Swift.String? = nil
    )
    {
        self.ruleArn = ruleArn
    }
}

public struct DeleteRuleOutput {

    public init() { }
}

/// The specified association does not exist.
public struct TrustStoreAssociationNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AssociationNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteSharedTrustStoreAssociationInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.trustStoreArn = trustStoreArn
    }
}

public struct DeleteSharedTrustStoreAssociationOutput {

    public init() { }
}

public struct DeleteTargetGroupInput {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?

    public init(
        targetGroupArn: Swift.String? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
    }
}

public struct DeleteTargetGroupOutput {

    public init() { }
}

/// The specified trust store is currently in use.
public struct TrustStoreInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustStoreInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteTrustStoreInput {
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        trustStoreArn: Swift.String? = nil
    )
    {
        self.trustStoreArn = trustStoreArn
    }
}

public struct DeleteTrustStoreOutput {

    public init() { }
}

/// The specified target does not exist, is not in the same VPC as the target group, or has an unsupported instance type.
public struct InvalidTargetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTarget" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a target.
    public struct TargetDescription {
        /// An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer. For Application Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is off. Otherwise the parameter is ignored and treated as all. This parameter is not supported if the target type of the target group is instance or alb. If the target type is ip and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required. For Application Load Balancer target groups with cross-zone load balancing off, if the target type is ip and the IP address is outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group. If the target type is lambda, this parameter is optional and the only supported value is all.
        public var availabilityZone: Swift.String?
        /// The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target.
        /// This member is required.
        public var id: Swift.String?
        /// The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. This parameter is not used if the target is a Lambda function.
        public var port: Swift.Int?

        public init(
            availabilityZone: Swift.String? = nil,
            id: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.id = id
            self.port = port
        }
    }

}

public struct DeregisterTargetsInput {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
    /// This member is required.
    public var targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]?

    public init(
        targetGroupArn: Swift.String? = nil,
        targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
        self.targets = targets
    }
}

public struct DeregisterTargetsOutput {

    public init() { }
}

public struct DescribeAccountLimitsInput {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an Elastic Load Balancing resource limit for your Amazon Web Services account. For more information, see the following:
    ///
    /// * [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html)
    ///
    /// * [Quotas for your Network Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html)
    ///
    /// * [Quotas for your Gateway Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html)
    public struct Limit {
        /// The maximum value of the limit.
        public var max: Swift.String?
        /// The name of the limit. The possible values are:
        ///
        /// * application-load-balancers
        ///
        /// * condition-values-per-alb-rule
        ///
        /// * condition-wildcards-per-alb-rule
        ///
        /// * gateway-load-balancers
        ///
        /// * gateway-load-balancers-per-vpc
        ///
        /// * geneve-target-groups
        ///
        /// * listeners-per-application-load-balancer
        ///
        /// * listeners-per-network-load-balancer
        ///
        /// * network-load-balancers
        ///
        /// * rules-per-application-load-balancer
        ///
        /// * target-groups
        ///
        /// * target-groups-per-action-on-application-load-balancer
        ///
        /// * target-groups-per-action-on-network-load-balancer
        ///
        /// * target-groups-per-application-load-balancer
        ///
        /// * targets-per-application-load-balancer
        ///
        /// * targets-per-availability-zone-per-gateway-load-balancer
        ///
        /// * targets-per-availability-zone-per-network-load-balancer
        ///
        /// * targets-per-network-load-balancer
        public var name: Swift.String?

        public init(
            max: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.max = max
            self.name = name
        }
    }

}

public struct DescribeAccountLimitsOutput {
    /// Information about the limits.
    public var limits: [ElasticLoadBalancingv2ClientTypes.Limit]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        limits: [ElasticLoadBalancingv2ClientTypes.Limit]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.limits = limits
        self.nextMarker = nextMarker
    }
}

public struct DescribeListenerAttributesInput {
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        listenerArn: Swift.String? = nil
    )
    {
        self.listenerArn = listenerArn
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a listener attribute.
    public struct ListenerAttribute {
        /// The name of the attribute. The following attribute is supported by Network Load Balancers, and Gateway Load Balancers.
        ///
        /// * tcp.idle_timeout.seconds - The tcp idle timeout value, in seconds. The valid range is 60-6000 seconds. The default is 350 seconds.
        public var key: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct DescribeListenerAttributesOutput {
    /// Information about the listener attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.ListenerAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.ListenerAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct DescribeListenerCertificatesInput {
    /// The Amazon Resource Names (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        listenerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.listenerArn = listenerArn
        self.marker = marker
        self.pageSize = pageSize
    }
}

public struct DescribeListenerCertificatesOutput {
    /// Information about the certificates.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.nextMarker = nextMarker
    }
}

public struct DescribeListenersInput {
    /// The Amazon Resource Names (ARN) of the listeners.
    public var listenerArns: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the load balancer.
    public var loadBalancerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        listenerArns: [Swift.String]? = nil,
        loadBalancerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.listenerArns = listenerArns
        self.loadBalancerArn = loadBalancerArn
        self.marker = marker
        self.pageSize = pageSize
    }
}

public struct DescribeListenersOutput {
    /// Information about the listeners.
    public var listeners: [ElasticLoadBalancingv2ClientTypes.Listener]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        listeners: [ElasticLoadBalancingv2ClientTypes.Listener]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.listeners = listeners
        self.nextMarker = nextMarker
    }
}

public struct DescribeLoadBalancerAttributesInput {
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.loadBalancerArn = loadBalancerArn
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a load balancer attribute.
    public struct LoadBalancerAttribute {
        /// The name of the attribute. The following attributes are supported by all load balancers:
        ///
        /// * deletion_protection.enabled - Indicates whether deletion protection is enabled. The value is true or false. The default is false.
        ///
        /// * load_balancing.cross_zone.enabled - Indicates whether cross-zone load balancing is enabled. The possible values are true and false. The default for Network Load Balancers and Gateway Load Balancers is false. The default for Application Load Balancers is true, and cannot be changed.
        ///
        ///
        /// The following attributes are supported by both Application Load Balancers and Network Load Balancers:
        ///
        /// * access_logs.s3.enabled - Indicates whether access logs are enabled. The value is true or false. The default is false.
        ///
        /// * access_logs.s3.bucket - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
        ///
        /// * access_logs.s3.prefix - The prefix for the location in the S3 bucket for the access logs.
        ///
        /// * ipv6.deny_all_igw_traffic - Blocks internet gateway (IGW) access to the load balancer. It is set to false for internet-facing load balancers and true for internal load balancers, preventing unintended access to your internal load balancer through an internet gateway.
        ///
        ///
        /// The following attributes are supported by only Application Load Balancers:
        ///
        /// * idle_timeout.timeout_seconds - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds.
        ///
        /// * client_keep_alive.seconds - The client keep alive value, in seconds. The valid range is 60-604800 seconds. The default is 3600 seconds.
        ///
        /// * connection_logs.s3.enabled - Indicates whether connection logs are enabled. The value is true or false. The default is false.
        ///
        /// * connection_logs.s3.bucket - The name of the S3 bucket for the connection logs. This attribute is required if connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
        ///
        /// * connection_logs.s3.prefix - The prefix for the location in the S3 bucket for the connection logs.
        ///
        /// * routing.http.desync_mitigation_mode - Determines how the load balancer handles requests that might pose a security risk to your application. The possible values are monitor, defensive, and strictest. The default is defensive.
        ///
        /// * routing.http.drop_invalid_header_fields.enabled - Indicates whether HTTP headers with invalid header fields are removed by the load balancer (true) or routed to targets (false). The default is false.
        ///
        /// * routing.http.preserve_host_header.enabled - Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. The possible values are true and false. The default is false.
        ///
        /// * routing.http.x_amzn_tls_version_and_cipher_suite.enabled - Indicates whether the two headers (x-amzn-tls-version and x-amzn-tls-cipher-suite), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. The x-amzn-tls-version header has information about the TLS protocol version negotiated with the client, and the x-amzn-tls-cipher-suite header has information about the cipher suite negotiated with the client. Both headers are in OpenSSL format. The possible values for the attribute are true and false. The default is false.
        ///
        /// * routing.http.xff_client_port.enabled - Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer. The possible values are true and false. The default is false.
        ///
        /// * routing.http.xff_header_processing.mode - Enables you to modify, preserve, or remove the X-Forwarded-For header in the HTTP request before the Application Load Balancer sends the request to the target. The possible values are append, preserve, and remove. The default is append.
        ///
        /// * If the value is append, the Application Load Balancer adds the client IP address (of the last hop) to the X-Forwarded-For header in the HTTP request before it sends it to targets.
        ///
        /// * If the value is preserve the Application Load Balancer preserves the X-Forwarded-For header in the HTTP request, and sends it to targets without any change.
        ///
        /// * If the value is remove, the Application Load Balancer removes the X-Forwarded-For header in the HTTP request before it sends it to targets.
        ///
        ///
        ///
        ///
        /// * routing.http2.enabled - Indicates whether HTTP/2 is enabled. The possible values are true and false. The default is true. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens.
        ///
        /// * waf.fail_open.enabled - Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to Amazon Web Services WAF. The possible values are true and false. The default is false.
        ///
        ///
        /// The following attributes are supported by only Network Load Balancers:
        ///
        /// * dns_record.client_routing_policy - Indicates how traffic is distributed among the load balancer Availability Zones. The possible values are availability_zone_affinity with 100 percent zonal affinity, partial_availability_zone_affinity with 85 percent zonal affinity, and any_availability_zone with 0 percent zonal affinity.
        public var key: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct DescribeLoadBalancerAttributesOutput {
    /// Information about the load balancer attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct DescribeLoadBalancersInput {
    /// The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    public var loadBalancerArns: [Swift.String]?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the load balancers.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        loadBalancerArns: [Swift.String]? = nil,
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.loadBalancerArns = loadBalancerArns
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
    }
}

public struct DescribeLoadBalancersOutput {
    /// Information about the load balancers.
    public var loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextMarker = nextMarker
    }
}

public struct DescribeRulesInput {
    /// The Amazon Resource Name (ARN) of the listener.
    public var listenerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Names (ARN) of the rules.
    public var ruleArns: [Swift.String]?

    public init(
        listenerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        ruleArns: [Swift.String]? = nil
    )
    {
        self.listenerArn = listenerArn
        self.marker = marker
        self.pageSize = pageSize
        self.ruleArns = ruleArns
    }
}

public struct DescribeRulesOutput {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the rules.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        nextMarker: Swift.String? = nil,
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.rules = rules
    }
}

public struct DescribeSSLPoliciesInput {
    /// The type of load balancer. The default lists the SSL policies for all load balancers.
    public var loadBalancerType: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the policies.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        loadBalancerType: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum? = nil,
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.loadBalancerType = loadBalancerType
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a policy used for SSL negotiation.
    public struct SslPolicy {
        /// The ciphers.
        public var ciphers: [ElasticLoadBalancingv2ClientTypes.Cipher]?
        /// The name of the policy.
        public var name: Swift.String?
        /// The protocols.
        public var sslProtocols: [Swift.String]?
        /// The supported load balancers.
        public var supportedLoadBalancerTypes: [Swift.String]?

        public init(
            ciphers: [ElasticLoadBalancingv2ClientTypes.Cipher]? = nil,
            name: Swift.String? = nil,
            sslProtocols: [Swift.String]? = nil,
            supportedLoadBalancerTypes: [Swift.String]? = nil
        )
        {
            self.ciphers = ciphers
            self.name = name
            self.sslProtocols = sslProtocols
            self.supportedLoadBalancerTypes = supportedLoadBalancerTypes
        }
    }

}

public struct DescribeSSLPoliciesOutput {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the security policies.
    public var sslPolicies: [ElasticLoadBalancingv2ClientTypes.SslPolicy]?

    public init(
        nextMarker: Swift.String? = nil,
        sslPolicies: [ElasticLoadBalancingv2ClientTypes.SslPolicy]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.sslPolicies = sslPolicies
    }
}

public struct DescribeTagsInput {
    /// The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init(
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// The tags associated with a resource.
    public struct TagDescription {
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceArn: Swift.String?
        /// Information about the tags.
        public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

        public init(
            resourceArn: Swift.String? = nil,
            tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
        )
        {
            self.resourceArn = resourceArn
            self.tags = tags
        }
    }

}

public struct DescribeTagsOutput {
    /// Information about the tags.
    public var tagDescriptions: [ElasticLoadBalancingv2ClientTypes.TagDescription]?

    public init(
        tagDescriptions: [ElasticLoadBalancingv2ClientTypes.TagDescription]? = nil
    )
    {
        self.tagDescriptions = tagDescriptions
    }
}

public struct DescribeTargetGroupAttributesInput {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?

    public init(
        targetGroupArn: Swift.String? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a target group attribute.
    public struct TargetGroupAttribute {
        /// The name of the attribute. The following attributes are supported by all load balancers:
        ///
        /// * deregistration_delay.timeout_seconds - The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds. If the target is a Lambda function, this attribute is not supported.
        ///
        /// * stickiness.enabled - Indicates whether target stickiness is enabled. The value is true or false. The default is false.
        ///
        /// * stickiness.type - Indicates the type of stickiness. The possible values are:
        ///
        /// * lb_cookie and app_cookie for Application Load Balancers.
        ///
        /// * source_ip for Network Load Balancers.
        ///
        /// * source_ip_dest_ip and source_ip_dest_ip_proto for Gateway Load Balancers.
        ///
        ///
        ///
        ///
        ///
        /// The following attributes are supported by Application Load Balancers and Network Load Balancers:
        ///
        /// * load_balancing.cross_zone.enabled - Indicates whether cross zone load balancing is enabled. The value is true, false or use_load_balancer_configuration. The default is use_load_balancer_configuration.
        ///
        /// * target_group_health.dns_failover.minimum_healthy_targets.count - The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to the maximum number of targets. The default is off.
        ///
        /// * target_group_health.dns_failover.minimum_healthy_targets.percentage - The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to 100. The default is off.
        ///
        /// * target_group_health.unhealthy_state_routing.minimum_healthy_targets.count - The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are 1 to the maximum number of targets. The default is 1.
        ///
        /// * target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage - The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are off or an integer from 1 to 100. The default is off.
        ///
        ///
        /// The following attributes are supported only if the load balancer is an Application Load Balancer and the target is an instance or an IP address:
        ///
        /// * load_balancing.algorithm.type - The load balancing algorithm determines how the load balancer selects targets when routing requests. The value is round_robin, least_outstanding_requests, or weighted_random. The default is round_robin.
        ///
        /// * load_balancing.algorithm.anomaly_mitigation - Only available when load_balancing.algorithm.type is weighted_random. Indicates whether anomaly mitigation is enabled. The value is on or off. The default is off.
        ///
        /// * slow_start.duration_seconds - The time period, in seconds, during which a newly registered target receives an increasing share of the traffic to the target group. After this time period ends, the target receives its full share of traffic. The range is 30-900 seconds (15 minutes). The default is 0 seconds (disabled).
        ///
        /// * stickiness.app_cookie.cookie_name - Indicates the name of the application-based cookie. Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP, and AWSALBTG; they're reserved for use by the load balancer.
        ///
        /// * stickiness.app_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the application-based cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        ///
        /// * stickiness.lb_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        ///
        ///
        /// The following attribute is supported only if the load balancer is an Application Load Balancer and the target is a Lambda function:
        ///
        /// * lambda.multi_value_headers.enabled - Indicates whether the request and response headers that are exchanged between the load balancer and the Lambda function include arrays of values or strings. The value is true or false. The default is false. If the value is false and the request contains a duplicate header field name or query parameter key, the load balancer uses the last value sent by the client.
        ///
        ///
        /// The following attributes are supported only by Network Load Balancers:
        ///
        /// * deregistration_delay.connection_termination.enabled - Indicates whether the load balancer terminates connections at the end of the deregistration timeout. The value is true or false. For new UDP/TCP_UDP target groups the default is true. Otherwise, the default is false.
        ///
        /// * preserve_client_ip.enabled - Indicates whether client IP preservation is enabled. The value is true or false. The default is disabled if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, the default is enabled. Client IP preservation cannot be disabled for UDP and TCP_UDP target groups.
        ///
        /// * proxy_protocol_v2.enabled - Indicates whether Proxy Protocol version 2 is enabled. The value is true or false. The default is false.
        ///
        /// * target_health_state.unhealthy.connection_termination.enabled - Indicates whether the load balancer terminates connections to unhealthy targets. The value is true or false. The default is true.
        ///
        /// * target_health_state.unhealthy.draining_interval_seconds - The amount of time for Elastic Load Balancing to wait before changing the state of an unhealthy target from unhealthy.draining to unhealthy. The range is 0-360000 seconds. The default value is 0 seconds. Note: This attribute can only be configured when target_health_state.unhealthy.connection_termination.enabled is false.
        ///
        ///
        /// The following attributes are supported only by Gateway Load Balancers:
        ///
        /// * target_failover.on_deregistration - Indicates how the Gateway Load Balancer handles existing flows when a target is deregistered. The possible values are rebalance and no_rebalance. The default is no_rebalance. The two attributes (target_failover.on_deregistration and target_failover.on_unhealthy) can't be set independently. The value you set for both attributes must be the same.
        ///
        /// * target_failover.on_unhealthy - Indicates how the Gateway Load Balancer handles existing flows when a target is unhealthy. The possible values are rebalance and no_rebalance. The default is no_rebalance. The two attributes (target_failover.on_deregistration and target_failover.on_unhealthy) cannot be set independently. The value you set for both attributes must be the same.
        public var key: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct DescribeTargetGroupAttributesOutput {
    /// Information about the target group attributes
    public var attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct DescribeTargetGroupsInput {
    /// The Amazon Resource Name (ARN) of the load balancer.
    public var loadBalancerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the target groups.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Names (ARN) of the target groups.
    public var targetGroupArns: [Swift.String]?

    public init(
        loadBalancerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil,
        targetGroupArns: [Swift.String]? = nil
    )
    {
        self.loadBalancerArn = loadBalancerArn
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
        self.targetGroupArns = targetGroupArns
    }
}

public struct DescribeTargetGroupsOutput {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the target groups.
    public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]?

    public init(
        nextMarker: Swift.String? = nil,
        targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.targetGroups = targetGroups
    }
}

/// The health of the specified targets could not be retrieved due to an internal error.
public struct HealthUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HealthUnavailable" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum DescribeTargetHealthInputIncludeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case anomaly
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribeTargetHealthInputIncludeEnum] {
            return [
                .all,
                .anomaly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .anomaly: return "AnomalyDetection"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTargetHealthInput {
    /// Used to include anomaly detection information.
    public var include: [ElasticLoadBalancingv2ClientTypes.DescribeTargetHealthInputIncludeEnum]?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The targets.
    public var targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]?

    public init(
        include: [ElasticLoadBalancingv2ClientTypes.DescribeTargetHealthInputIncludeEnum]? = nil,
        targetGroupArn: Swift.String? = nil,
        targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]? = nil
    )
    {
        self.include = include
        self.targetGroupArn = targetGroupArn
        self.targets = targets
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum TargetHealthReasonEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deregistrationInProgress
        case failedHealthChecks
        case healthCheckDisabled
        case initialHealthChecking
        case internalError
        case invalidState
        case ipUnusable
        case notInUse
        case notRegistered
        case registrationInProgress
        case responseCodeMismatch
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetHealthReasonEnum] {
            return [
                .deregistrationInProgress,
                .failedHealthChecks,
                .healthCheckDisabled,
                .initialHealthChecking,
                .internalError,
                .invalidState,
                .ipUnusable,
                .notInUse,
                .notRegistered,
                .registrationInProgress,
                .responseCodeMismatch,
                .timeout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deregistrationInProgress: return "Target.DeregistrationInProgress"
            case .failedHealthChecks: return "Target.FailedHealthChecks"
            case .healthCheckDisabled: return "Target.HealthCheckDisabled"
            case .initialHealthChecking: return "Elb.InitialHealthChecking"
            case .internalError: return "Elb.InternalError"
            case .invalidState: return "Target.InvalidState"
            case .ipUnusable: return "Target.IpUnusable"
            case .notInUse: return "Target.NotInUse"
            case .notRegistered: return "Target.NotRegistered"
            case .registrationInProgress: return "Elb.RegistrationInProgress"
            case .responseCodeMismatch: return "Target.ResponseCodeMismatch"
            case .timeout: return "Target.Timeout"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum TargetHealthStateEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case draining
        case healthy
        case initial
        case unavailable
        case unhealthy
        case unhealthyDraining
        case unused
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetHealthStateEnum] {
            return [
                .draining,
                .healthy,
                .initial,
                .unavailable,
                .unhealthy,
                .unhealthyDraining,
                .unused
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .draining: return "draining"
            case .healthy: return "healthy"
            case .initial: return "initial"
            case .unavailable: return "unavailable"
            case .unhealthy: return "unhealthy"
            case .unhealthyDraining: return "unhealthy.draining"
            case .unused: return "unused"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the current health of a target.
    public struct TargetHealth {
        /// A description of the target health that provides additional details. If the state is healthy, a description is not provided.
        public var description: Swift.String?
        /// The reason code. If the target state is healthy, a reason code is not provided. If the target state is initial, the reason code can be one of the following values:
        ///
        /// * Elb.RegistrationInProgress - The target is in the process of being registered with the load balancer.
        ///
        /// * Elb.InitialHealthChecking - The load balancer is still sending the target the minimum number of health checks required to determine its health status.
        ///
        ///
        /// If the target state is unhealthy, the reason code can be one of the following values:
        ///
        /// * Target.ResponseCodeMismatch - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers.
        ///
        /// * Target.Timeout - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.
        ///
        /// * Target.FailedHealthChecks - The load balancer received an error while establishing a connection to the target or the target response was malformed.
        ///
        /// * Elb.InternalError - The health checks failed due to an internal error. Applies only to Application Load Balancers.
        ///
        ///
        /// If the target state is unused, the reason code can be one of the following values:
        ///
        /// * Target.NotRegistered - The target is not registered with the target group.
        ///
        /// * Target.NotInUse - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.
        ///
        /// * Target.InvalidState - The target is in the stopped or terminated state.
        ///
        /// * Target.IpUnusable - The target IP address is reserved for use by a load balancer.
        ///
        ///
        /// If the target state is draining, the reason code can be the following value:
        ///
        /// * Target.DeregistrationInProgress - The target is in the process of being deregistered and the deregistration delay period has not expired.
        ///
        ///
        /// If the target state is unavailable, the reason code can be the following value:
        ///
        /// * Target.HealthCheckDisabled - Health checks are disabled for the target group. Applies only to Application Load Balancers.
        ///
        /// * Elb.InternalError - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.
        public var reason: ElasticLoadBalancingv2ClientTypes.TargetHealthReasonEnum?
        /// The state of the target.
        public var state: ElasticLoadBalancingv2ClientTypes.TargetHealthStateEnum?

        public init(
            description: Swift.String? = nil,
            reason: ElasticLoadBalancingv2ClientTypes.TargetHealthReasonEnum? = nil,
            state: ElasticLoadBalancingv2ClientTypes.TargetHealthStateEnum? = nil
        )
        {
            self.description = description
            self.reason = reason
            self.state = state
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the health of a target.
    public struct TargetHealthDescription {
        /// The anomaly detection result for the target. If no anomalies were detected, the result is normal. If anomalies were detected, the result is anomalous.
        public var anomalyDetection: ElasticLoadBalancingv2ClientTypes.AnomalyDetection?
        /// The port to use to connect with the target.
        public var healthCheckPort: Swift.String?
        /// The description of the target.
        public var target: ElasticLoadBalancingv2ClientTypes.TargetDescription?
        /// The health information for the target.
        public var targetHealth: ElasticLoadBalancingv2ClientTypes.TargetHealth?

        public init(
            anomalyDetection: ElasticLoadBalancingv2ClientTypes.AnomalyDetection? = nil,
            healthCheckPort: Swift.String? = nil,
            target: ElasticLoadBalancingv2ClientTypes.TargetDescription? = nil,
            targetHealth: ElasticLoadBalancingv2ClientTypes.TargetHealth? = nil
        )
        {
            self.anomalyDetection = anomalyDetection
            self.healthCheckPort = healthCheckPort
            self.target = target
            self.targetHealth = targetHealth
        }
    }

}

public struct DescribeTargetHealthOutput {
    /// Information about the health of the targets.
    public var targetHealthDescriptions: [ElasticLoadBalancingv2ClientTypes.TargetHealthDescription]?

    public init(
        targetHealthDescriptions: [ElasticLoadBalancingv2ClientTypes.TargetHealthDescription]? = nil
    )
    {
        self.targetHealthDescriptions = targetHealthDescriptions
    }
}

public struct DescribeTrustStoreAssociationsInput {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.trustStoreArn = trustStoreArn
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the resources a trust store is associated with.
    public struct TrustStoreAssociation {
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceArn: Swift.String?

        public init(
            resourceArn: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
        }
    }

}

public struct DescribeTrustStoreAssociationsOutput {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the resources the trust store is associated to.
    public var trustStoreAssociations: [ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation]?

    public init(
        nextMarker: Swift.String? = nil,
        trustStoreAssociations: [ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.trustStoreAssociations = trustStoreAssociations
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the revocations used by a trust store.
    public struct DescribeTrustStoreRevocation {
        /// The number of revoked certificates.
        public var numberOfRevokedEntries: Swift.Int?
        /// The revocation ID of a revocation file in use.
        public var revocationId: Swift.Int?
        /// The type of revocation file.
        public var revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            numberOfRevokedEntries: Swift.Int? = nil,
            revocationId: Swift.Int? = nil,
            revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.numberOfRevokedEntries = numberOfRevokedEntries
            self.revocationId = revocationId
            self.revocationType = revocationType
            self.trustStoreArn = trustStoreArn
        }
    }

}

/// The specified revocation ID does not exist.
public struct RevocationIdNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RevocationIdNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeTrustStoreRevocationsInput {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The revocation IDs of the revocation files you want to describe.
    public var revocationIds: [Swift.Int]?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        revocationIds: [Swift.Int]? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.revocationIds = revocationIds
        self.trustStoreArn = trustStoreArn
    }
}

public struct DescribeTrustStoreRevocationsOutput {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the revocation file in the trust store.
    public var trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation]?

    public init(
        nextMarker: Swift.String? = nil,
        trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.trustStoreRevocations = trustStoreRevocations
    }
}

public struct DescribeTrustStoresInput {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the trust stores.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Name (ARN) of the trust store.
    public var trustStoreArns: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil,
        trustStoreArns: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
        self.trustStoreArns = trustStoreArns
    }
}

public struct DescribeTrustStoresOutput {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the trust stores.
    public var trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]?

    public init(
        nextMarker: Swift.String? = nil,
        trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.trustStores = trustStores
    }
}

/// The specified resource does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetResourcePolicyOutput {
    /// The content of the resource policy.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

public struct GetTrustStoreCaCertificatesBundleInput {
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        trustStoreArn: Swift.String? = nil
    )
    {
        self.trustStoreArn = trustStoreArn
    }
}

public struct GetTrustStoreCaCertificatesBundleOutput {
    /// The ca certificate bundles Amazon S3 URI.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

public struct GetTrustStoreRevocationContentInput {
    /// The revocation ID of the revocation file.
    /// This member is required.
    public var revocationId: Swift.Int?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        revocationId: Swift.Int? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.revocationId = revocationId
        self.trustStoreArn = trustStoreArn
    }
}

public struct GetTrustStoreRevocationContentOutput {
    /// The revocation files Amazon S3 URI.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

public struct ModifyListenerInput {
    /// [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:
    ///
    /// * HTTP1Only
    ///
    /// * HTTP2Only
    ///
    /// * HTTP2Optional
    ///
    /// * HTTP2Preferred
    ///
    /// * None
    ///
    ///
    /// For more information, see [ALPN policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies) in the Network Load Balancers Guide.
    public var alpnPolicy: [Swift.String]?
    /// [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The actions for the default rule.
    public var defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?
    /// The mutual authentication configuration information.
    public var mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?
    /// The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer.
    public var port: Swift.Int?
    /// The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.
    public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the Application Load Balancers Guide or [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the Network Load Balancers Guide.
    public var sslPolicy: Swift.String?

    public init(
        alpnPolicy: [Swift.String]? = nil,
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        listenerArn: Swift.String? = nil,
        mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes? = nil,
        port: Swift.Int? = nil,
        `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        sslPolicy: Swift.String? = nil
    )
    {
        self.alpnPolicy = alpnPolicy
        self.certificates = certificates
        self.defaultActions = defaultActions
        self.listenerArn = listenerArn
        self.mutualAuthentication = mutualAuthentication
        self.port = port
        self.`protocol` = `protocol`
        self.sslPolicy = sslPolicy
    }
}

public struct ModifyListenerOutput {
    /// Information about the modified listener.
    public var listeners: [ElasticLoadBalancingv2ClientTypes.Listener]?

    public init(
        listeners: [ElasticLoadBalancingv2ClientTypes.Listener]? = nil
    )
    {
        self.listeners = listeners
    }
}

public struct ModifyListenerAttributesInput {
    /// The listener attributes.
    /// This member is required.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.ListenerAttribute]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.ListenerAttribute]? = nil,
        listenerArn: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.listenerArn = listenerArn
    }
}

public struct ModifyListenerAttributesOutput {
    /// Information about the listener attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.ListenerAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.ListenerAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct ModifyLoadBalancerAttributesInput {
    /// The load balancer attributes.
    /// This member is required.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]? = nil,
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.loadBalancerArn = loadBalancerArn
    }
}

public struct ModifyLoadBalancerAttributesOutput {
    /// Information about the load balancer attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct ModifyRuleInput {
    /// The actions.
    public var actions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The conditions.
    public var conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]?
    /// The Amazon Resource Name (ARN) of the rule.
    /// This member is required.
    public var ruleArn: Swift.String?

    public init(
        actions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]? = nil,
        ruleArn: Swift.String? = nil
    )
    {
        self.actions = actions
        self.conditions = conditions
        self.ruleArn = ruleArn
    }
}

public struct ModifyRuleOutput {
    /// Information about the modified rule.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.rules = rules
    }
}

public struct ModifyTargetGroupInput {
    /// Indicates whether health checks are enabled.
    public var healthCheckEnabled: Swift.Bool?
    /// The approximate amount of time, in seconds, between health checks of an individual target.
    public var healthCheckIntervalSeconds: Swift.Int?
    /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    public var healthCheckPath: Swift.String?
    /// The port the load balancer uses when performing health checks on targets.
    public var healthCheckPort: Swift.String?
    /// The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    public var healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
    public var healthCheckTimeoutSeconds: Swift.Int?
    /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
    public var healthyThresholdCount: Swift.Int?
    /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.
    public var matcher: ElasticLoadBalancingv2ClientTypes.Matcher?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The number of consecutive health check failures required before considering the target unhealthy.
    public var unhealthyThresholdCount: Swift.Int?

    public init(
        healthCheckEnabled: Swift.Bool? = nil,
        healthCheckIntervalSeconds: Swift.Int? = nil,
        healthCheckPath: Swift.String? = nil,
        healthCheckPort: Swift.String? = nil,
        healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Swift.Int? = nil,
        healthyThresholdCount: Swift.Int? = nil,
        matcher: ElasticLoadBalancingv2ClientTypes.Matcher? = nil,
        targetGroupArn: Swift.String? = nil,
        unhealthyThresholdCount: Swift.Int? = nil
    )
    {
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.matcher = matcher
        self.targetGroupArn = targetGroupArn
        self.unhealthyThresholdCount = unhealthyThresholdCount
    }
}

public struct ModifyTargetGroupOutput {
    /// Information about the modified target group.
    public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]?

    public init(
        targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]? = nil
    )
    {
        self.targetGroups = targetGroups
    }
}

public struct ModifyTargetGroupAttributesInput {
    /// The target group attributes.
    /// This member is required.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]? = nil,
        targetGroupArn: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.targetGroupArn = targetGroupArn
    }
}

public struct ModifyTargetGroupAttributesOutput {
    /// Information about the target group attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

public struct ModifyTrustStoreInput {
    /// The Amazon S3 bucket for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Bucket: Swift.String?
    /// The Amazon S3 path for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Key: Swift.String?
    /// The Amazon S3 object version for the ca certificates bundle. If undefined the current version is used.
    public var caCertificatesBundleS3ObjectVersion: Swift.String?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        caCertificatesBundleS3Bucket: Swift.String? = nil,
        caCertificatesBundleS3Key: Swift.String? = nil,
        caCertificatesBundleS3ObjectVersion: Swift.String? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket
        self.caCertificatesBundleS3Key = caCertificatesBundleS3Key
        self.caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion
        self.trustStoreArn = trustStoreArn
    }
}

public struct ModifyTrustStoreOutput {
    /// Information about the modified trust store.
    public var trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]?

    public init(
        trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]? = nil
    )
    {
        self.trustStores = trustStores
    }
}

public struct RegisterTargetsInput {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The targets.
    /// This member is required.
    public var targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]?

    public init(
        targetGroupArn: Swift.String? = nil,
        targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
        self.targets = targets
    }
}

public struct RegisterTargetsOutput {

    public init() { }
}

public struct RemoveListenerCertificatesInput {
    /// The certificate to remove. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
    /// This member is required.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        listenerArn: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.listenerArn = listenerArn
    }
}

public struct RemoveListenerCertificatesOutput {

    public init() { }
}

public struct RemoveTagsInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArns: [Swift.String]?
    /// The tag keys for the tags to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArns: [Swift.String]? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
        self.tagKeys = tagKeys
    }
}

public struct RemoveTagsOutput {

    public init() { }
}

public struct RemoveTrustStoreRevocationsInput {
    /// The revocation IDs of the revocation files you want to remove.
    /// This member is required.
    public var revocationIds: [Swift.Int]?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        revocationIds: [Swift.Int]? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.revocationIds = revocationIds
        self.trustStoreArn = trustStoreArn
    }
}

public struct RemoveTrustStoreRevocationsOutput {

    public init() { }
}

public struct SetIpAddressTypeInput {
    /// Note: Internal load balancers must use the ipv4 IP address type. [Application Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses), dualstack (for IPv4 and IPv6 addresses), and dualstack-without-public-ipv4 (for IPv6 only public addresses, with private IPv4 and IPv6 addresses). Note: Application Load Balancer authentication only supports IPv4 addresses when connecting to an Identity Provider (IdP) or Amazon Cognito endpoint. Without a public IPv4 address the load balancer cannot complete the authentication process, resulting in HTTP 500 errors. [Network Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). You can’t specify dualstack for a load balancer with a UDP or TCP_UDP listener. [Gateway Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
    /// This member is required.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.ipAddressType = ipAddressType
        self.loadBalancerArn = loadBalancerArn
    }
}

public struct SetIpAddressTypeOutput {
    /// The IP address type.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?

    public init(
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil
    )
    {
        self.ipAddressType = ipAddressType
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the priorities for the rules for a listener.
    public struct RulePriorityPair {
        /// The rule priority.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the rule.
        public var ruleArn: Swift.String?

        public init(
            priority: Swift.Int? = nil,
            ruleArn: Swift.String? = nil
        )
        {
            self.priority = priority
            self.ruleArn = ruleArn
        }
    }

}

public struct SetRulePrioritiesInput {
    /// The rule priorities.
    /// This member is required.
    public var rulePriorities: [ElasticLoadBalancingv2ClientTypes.RulePriorityPair]?

    public init(
        rulePriorities: [ElasticLoadBalancingv2ClientTypes.RulePriorityPair]? = nil
    )
    {
        self.rulePriorities = rulePriorities
    }
}

public struct SetRulePrioritiesOutput {
    /// Information about the rules.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.rules = rules
    }
}

extension ElasticLoadBalancingv2ClientTypes {

    public enum EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case off
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum] {
            return [
                .off,
                .on
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .off: return "off"
            case .on: return "on"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct SetSecurityGroupsInput {
    /// Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through Amazon Web Services PrivateLink. The default is on.
    public var enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?
    /// The IDs of the security groups.
    /// This member is required.
    public var securityGroups: [Swift.String]?

    public init(
        enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum? = nil,
        loadBalancerArn: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil
    )
    {
        self.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
        self.loadBalancerArn = loadBalancerArn
        self.securityGroups = securityGroups
    }
}

public struct SetSecurityGroupsOutput {
    /// Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through Amazon Web Services PrivateLink.
    public var enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum?
    /// The IDs of the security groups associated with the load balancer.
    public var securityGroupIds: [Swift.String]?

    public init(
        enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum? = nil,
        securityGroupIds: [Swift.String]? = nil
    )
    {
        self.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
        self.securityGroupIds = securityGroupIds
    }
}

public struct SetSubnetsInput {
    /// [Application Load Balancers] The IP address type. The possible values are ipv4 (for only IPv4 addresses), dualstack (for IPv4 and IPv6 addresses), and dualstack-without-public-ipv4 (for IPv6 only public addresses, with private IPv4 and IPv6 addresses). [Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). You can’t specify dualstack for a load balancer with a UDP or TCP_UDP listener. [Gateway Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?
    /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    public var subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]?
    /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    public var subnets: [Swift.String]?

    public init(
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
        loadBalancerArn: Swift.String? = nil,
        subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]? = nil,
        subnets: [Swift.String]? = nil
    )
    {
        self.ipAddressType = ipAddressType
        self.loadBalancerArn = loadBalancerArn
        self.subnetMappings = subnetMappings
        self.subnets = subnets
    }
}

public struct SetSubnetsOutput {
    /// Information about the subnets.
    public var availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]?
    /// [Application Load Balancers] The IP address type. [Network Load Balancers] The IP address type. [Gateway Load Balancers] The IP address type.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?

    public init(
        availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]? = nil,
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.ipAddressType = ipAddressType
    }
}

extension AddListenerCertificatesInput {

    static func urlPathProvider(_ value: AddListenerCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsInput {

    static func urlPathProvider(_ value: AddTagsInput) -> Swift.String? {
        return "/"
    }
}

extension AddTrustStoreRevocationsInput {

    static func urlPathProvider(_ value: AddTrustStoreRevocationsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateListenerInput {

    static func urlPathProvider(_ value: CreateListenerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLoadBalancerInput {

    static func urlPathProvider(_ value: CreateLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRuleInput {

    static func urlPathProvider(_ value: CreateRuleInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTargetGroupInput {

    static func urlPathProvider(_ value: CreateTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTrustStoreInput {

    static func urlPathProvider(_ value: CreateTrustStoreInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteListenerInput {

    static func urlPathProvider(_ value: DeleteListenerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLoadBalancerInput {

    static func urlPathProvider(_ value: DeleteLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRuleInput {

    static func urlPathProvider(_ value: DeleteRuleInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSharedTrustStoreAssociationInput {

    static func urlPathProvider(_ value: DeleteSharedTrustStoreAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTargetGroupInput {

    static func urlPathProvider(_ value: DeleteTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTrustStoreInput {

    static func urlPathProvider(_ value: DeleteTrustStoreInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterTargetsInput {

    static func urlPathProvider(_ value: DeregisterTargetsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccountLimitsInput {

    static func urlPathProvider(_ value: DescribeAccountLimitsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeListenerAttributesInput {

    static func urlPathProvider(_ value: DescribeListenerAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeListenerCertificatesInput {

    static func urlPathProvider(_ value: DescribeListenerCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeListenersInput {

    static func urlPathProvider(_ value: DescribeListenersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLoadBalancerAttributesInput {

    static func urlPathProvider(_ value: DescribeLoadBalancerAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLoadBalancersInput {

    static func urlPathProvider(_ value: DescribeLoadBalancersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRulesInput {

    static func urlPathProvider(_ value: DescribeRulesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSSLPoliciesInput {

    static func urlPathProvider(_ value: DescribeSSLPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTagsInput {

    static func urlPathProvider(_ value: DescribeTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTargetGroupAttributesInput {

    static func urlPathProvider(_ value: DescribeTargetGroupAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTargetGroupsInput {

    static func urlPathProvider(_ value: DescribeTargetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTargetHealthInput {

    static func urlPathProvider(_ value: DescribeTargetHealthInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrustStoreAssociationsInput {

    static func urlPathProvider(_ value: DescribeTrustStoreAssociationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrustStoreRevocationsInput {

    static func urlPathProvider(_ value: DescribeTrustStoreRevocationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrustStoresInput {

    static func urlPathProvider(_ value: DescribeTrustStoresInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetTrustStoreCaCertificatesBundleInput {

    static func urlPathProvider(_ value: GetTrustStoreCaCertificatesBundleInput) -> Swift.String? {
        return "/"
    }
}

extension GetTrustStoreRevocationContentInput {

    static func urlPathProvider(_ value: GetTrustStoreRevocationContentInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyListenerInput {

    static func urlPathProvider(_ value: ModifyListenerInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyListenerAttributesInput {

    static func urlPathProvider(_ value: ModifyListenerAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyLoadBalancerAttributesInput {

    static func urlPathProvider(_ value: ModifyLoadBalancerAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyRuleInput {

    static func urlPathProvider(_ value: ModifyRuleInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyTargetGroupInput {

    static func urlPathProvider(_ value: ModifyTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyTargetGroupAttributesInput {

    static func urlPathProvider(_ value: ModifyTargetGroupAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension ModifyTrustStoreInput {

    static func urlPathProvider(_ value: ModifyTrustStoreInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterTargetsInput {

    static func urlPathProvider(_ value: RegisterTargetsInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveListenerCertificatesInput {

    static func urlPathProvider(_ value: RemoveListenerCertificatesInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsInput {

    static func urlPathProvider(_ value: RemoveTagsInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTrustStoreRevocationsInput {

    static func urlPathProvider(_ value: RemoveTrustStoreRevocationsInput) -> Swift.String? {
        return "/"
    }
}

extension SetIpAddressTypeInput {

    static func urlPathProvider(_ value: SetIpAddressTypeInput) -> Swift.String? {
        return "/"
    }
}

extension SetRulePrioritiesInput {

    static func urlPathProvider(_ value: SetRulePrioritiesInput) -> Swift.String? {
        return "/"
    }
}

extension SetSecurityGroupsInput {

    static func urlPathProvider(_ value: SetSecurityGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension SetSubnetsInput {

    static func urlPathProvider(_ value: SetSubnetsInput) -> Swift.String? {
        return "/"
    }
}

extension AddListenerCertificatesInput {

    static func write(value: AddListenerCertificatesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Certificates"].writeList(value.certificates, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Action"].write("AddListenerCertificates")
        try writer["Version"].write("2015-12-01")
    }
}

extension AddTagsInput {

    static func write(value: AddTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("AddTags")
        try writer["Version"].write("2015-12-01")
    }
}

extension AddTrustStoreRevocationsInput {

    static func write(value: AddTrustStoreRevocationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RevocationContents"].writeList(value.revocationContents, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.RevocationContent.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("AddTrustStoreRevocations")
        try writer["Version"].write("2015-12-01")
    }
}

extension CreateListenerInput {

    static func write(value: CreateListenerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlpnPolicy"].writeList(value.alpnPolicy, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Certificates"].writeList(value.certificates, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultActions"].writeList(value.defaultActions, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["MutualAuthentication"].write(value.mutualAuthentication, with: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes.write(value:to:))
        try writer["Port"].write(value.port)
        try writer["Protocol"].write(value.`protocol`)
        try writer["SslPolicy"].write(value.sslPolicy)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateListener")
        try writer["Version"].write("2015-12-01")
    }
}

extension CreateLoadBalancerInput {

    static func write(value: CreateLoadBalancerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CustomerOwnedIpv4Pool"].write(value.customerOwnedIpv4Pool)
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["Name"].write(value.name)
        try writer["Scheme"].write(value.scheme)
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetMappings"].writeList(value.subnetMappings, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.SubnetMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
        try writer["Action"].write("CreateLoadBalancer")
        try writer["Version"].write("2015-12-01")
    }
}

extension CreateRuleInput {

    static func write(value: CreateRuleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeList(value.actions, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Conditions"].writeList(value.conditions, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.RuleCondition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Priority"].write(value.priority)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateRule")
        try writer["Version"].write("2015-12-01")
    }
}

extension CreateTargetGroupInput {

    static func write(value: CreateTargetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HealthCheckEnabled"].write(value.healthCheckEnabled)
        try writer["HealthCheckIntervalSeconds"].write(value.healthCheckIntervalSeconds)
        try writer["HealthCheckPath"].write(value.healthCheckPath)
        try writer["HealthCheckPort"].write(value.healthCheckPort)
        try writer["HealthCheckProtocol"].write(value.healthCheckProtocol)
        try writer["HealthCheckTimeoutSeconds"].write(value.healthCheckTimeoutSeconds)
        try writer["HealthyThresholdCount"].write(value.healthyThresholdCount)
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["Matcher"].write(value.matcher, with: ElasticLoadBalancingv2ClientTypes.Matcher.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["Port"].write(value.port)
        try writer["Protocol"].write(value.`protocol`)
        try writer["ProtocolVersion"].write(value.protocolVersion)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetType"].write(value.targetType)
        try writer["UnhealthyThresholdCount"].write(value.unhealthyThresholdCount)
        try writer["VpcId"].write(value.vpcId)
        try writer["Action"].write("CreateTargetGroup")
        try writer["Version"].write("2015-12-01")
    }
}

extension CreateTrustStoreInput {

    static func write(value: CreateTrustStoreInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CaCertificatesBundleS3Bucket"].write(value.caCertificatesBundleS3Bucket)
        try writer["CaCertificatesBundleS3Key"].write(value.caCertificatesBundleS3Key)
        try writer["CaCertificatesBundleS3ObjectVersion"].write(value.caCertificatesBundleS3ObjectVersion)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateTrustStore")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeleteListenerInput {

    static func write(value: DeleteListenerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Action"].write("DeleteListener")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeleteLoadBalancerInput {

    static func write(value: DeleteLoadBalancerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["Action"].write("DeleteLoadBalancer")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeleteRuleInput {

    static func write(value: DeleteRuleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RuleArn"].write(value.ruleArn)
        try writer["Action"].write("DeleteRule")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeleteSharedTrustStoreAssociationInput {

    static func write(value: DeleteSharedTrustStoreAssociationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("DeleteSharedTrustStoreAssociation")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeleteTargetGroupInput {

    static func write(value: DeleteTargetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Action"].write("DeleteTargetGroup")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeleteTrustStoreInput {

    static func write(value: DeleteTrustStoreInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("DeleteTrustStore")
        try writer["Version"].write("2015-12-01")
    }
}

extension DeregisterTargetsInput {

    static func write(value: DeregisterTargetsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Targets"].writeList(value.targets, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.TargetDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DeregisterTargets")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeAccountLimitsInput {

    static func write(value: DescribeAccountLimitsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["PageSize"].write(value.pageSize)
        try writer["Action"].write("DescribeAccountLimits")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeListenerAttributesInput {

    static func write(value: DescribeListenerAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Action"].write("DescribeListenerAttributes")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeListenerCertificatesInput {

    static func write(value: DescribeListenerCertificatesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Marker"].write(value.marker)
        try writer["PageSize"].write(value.pageSize)
        try writer["Action"].write("DescribeListenerCertificates")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeListenersInput {

    static func write(value: DescribeListenersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ListenerArns"].writeList(value.listenerArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["Marker"].write(value.marker)
        try writer["PageSize"].write(value.pageSize)
        try writer["Action"].write("DescribeListeners")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeLoadBalancerAttributesInput {

    static func write(value: DescribeLoadBalancerAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["Action"].write("DescribeLoadBalancerAttributes")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeLoadBalancersInput {

    static func write(value: DescribeLoadBalancersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LoadBalancerArns"].writeList(value.loadBalancerArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PageSize"].write(value.pageSize)
        try writer["Action"].write("DescribeLoadBalancers")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeRulesInput {

    static func write(value: DescribeRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Marker"].write(value.marker)
        try writer["PageSize"].write(value.pageSize)
        try writer["RuleArns"].writeList(value.ruleArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeRules")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeSSLPoliciesInput {

    static func write(value: DescribeSSLPoliciesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LoadBalancerType"].write(value.loadBalancerType)
        try writer["Marker"].write(value.marker)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PageSize"].write(value.pageSize)
        try writer["Action"].write("DescribeSSLPolicies")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTagsInput {

    static func write(value: DescribeTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeTags")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTargetGroupAttributesInput {

    static func write(value: DescribeTargetGroupAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Action"].write("DescribeTargetGroupAttributes")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTargetGroupsInput {

    static func write(value: DescribeTargetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["Marker"].write(value.marker)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PageSize"].write(value.pageSize)
        try writer["TargetGroupArns"].writeList(value.targetGroupArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeTargetGroups")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTargetHealthInput {

    static func write(value: DescribeTargetHealthInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Include"].writeList(value.include, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ElasticLoadBalancingv2ClientTypes.DescribeTargetHealthInputIncludeEnum>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Targets"].writeList(value.targets, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.TargetDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeTargetHealth")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTrustStoreAssociationsInput {

    static func write(value: DescribeTrustStoreAssociationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["PageSize"].write(value.pageSize)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("DescribeTrustStoreAssociations")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTrustStoreRevocationsInput {

    static func write(value: DescribeTrustStoreRevocationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["PageSize"].write(value.pageSize)
        try writer["RevocationIds"].writeList(value.revocationIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("DescribeTrustStoreRevocations")
        try writer["Version"].write("2015-12-01")
    }
}

extension DescribeTrustStoresInput {

    static func write(value: DescribeTrustStoresInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Marker"].write(value.marker)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PageSize"].write(value.pageSize)
        try writer["TrustStoreArns"].writeList(value.trustStoreArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeTrustStores")
        try writer["Version"].write("2015-12-01")
    }
}

extension GetResourcePolicyInput {

    static func write(value: GetResourcePolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Action"].write("GetResourcePolicy")
        try writer["Version"].write("2015-12-01")
    }
}

extension GetTrustStoreCaCertificatesBundleInput {

    static func write(value: GetTrustStoreCaCertificatesBundleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("GetTrustStoreCaCertificatesBundle")
        try writer["Version"].write("2015-12-01")
    }
}

extension GetTrustStoreRevocationContentInput {

    static func write(value: GetTrustStoreRevocationContentInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RevocationId"].write(value.revocationId)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("GetTrustStoreRevocationContent")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyListenerInput {

    static func write(value: ModifyListenerInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlpnPolicy"].writeList(value.alpnPolicy, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Certificates"].writeList(value.certificates, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultActions"].writeList(value.defaultActions, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["MutualAuthentication"].write(value.mutualAuthentication, with: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes.write(value:to:))
        try writer["Port"].write(value.port)
        try writer["Protocol"].write(value.`protocol`)
        try writer["SslPolicy"].write(value.sslPolicy)
        try writer["Action"].write("ModifyListener")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyListenerAttributesInput {

    static func write(value: ModifyListenerAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeList(value.attributes, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.ListenerAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Action"].write("ModifyListenerAttributes")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyLoadBalancerAttributesInput {

    static func write(value: ModifyLoadBalancerAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeList(value.attributes, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["Action"].write("ModifyLoadBalancerAttributes")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyRuleInput {

    static func write(value: ModifyRuleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeList(value.actions, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Action.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Conditions"].writeList(value.conditions, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.RuleCondition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RuleArn"].write(value.ruleArn)
        try writer["Action"].write("ModifyRule")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyTargetGroupInput {

    static func write(value: ModifyTargetGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HealthCheckEnabled"].write(value.healthCheckEnabled)
        try writer["HealthCheckIntervalSeconds"].write(value.healthCheckIntervalSeconds)
        try writer["HealthCheckPath"].write(value.healthCheckPath)
        try writer["HealthCheckPort"].write(value.healthCheckPort)
        try writer["HealthCheckProtocol"].write(value.healthCheckProtocol)
        try writer["HealthCheckTimeoutSeconds"].write(value.healthCheckTimeoutSeconds)
        try writer["HealthyThresholdCount"].write(value.healthyThresholdCount)
        try writer["Matcher"].write(value.matcher, with: ElasticLoadBalancingv2ClientTypes.Matcher.write(value:to:))
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["UnhealthyThresholdCount"].write(value.unhealthyThresholdCount)
        try writer["Action"].write("ModifyTargetGroup")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyTargetGroupAttributesInput {

    static func write(value: ModifyTargetGroupAttributesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Attributes"].writeList(value.attributes, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Action"].write("ModifyTargetGroupAttributes")
        try writer["Version"].write("2015-12-01")
    }
}

extension ModifyTrustStoreInput {

    static func write(value: ModifyTrustStoreInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CaCertificatesBundleS3Bucket"].write(value.caCertificatesBundleS3Bucket)
        try writer["CaCertificatesBundleS3Key"].write(value.caCertificatesBundleS3Key)
        try writer["CaCertificatesBundleS3ObjectVersion"].write(value.caCertificatesBundleS3ObjectVersion)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("ModifyTrustStore")
        try writer["Version"].write("2015-12-01")
    }
}

extension RegisterTargetsInput {

    static func write(value: RegisterTargetsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Targets"].writeList(value.targets, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.TargetDescription.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("RegisterTargets")
        try writer["Version"].write("2015-12-01")
    }
}

extension RemoveListenerCertificatesInput {

    static func write(value: RemoveListenerCertificatesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Certificates"].writeList(value.certificates, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ListenerArn"].write(value.listenerArn)
        try writer["Action"].write("RemoveListenerCertificates")
        try writer["Version"].write("2015-12-01")
    }
}

extension RemoveTagsInput {

    static func write(value: RemoveTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("RemoveTags")
        try writer["Version"].write("2015-12-01")
    }
}

extension RemoveTrustStoreRevocationsInput {

    static func write(value: RemoveTrustStoreRevocationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RevocationIds"].writeList(value.revocationIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["Action"].write("RemoveTrustStoreRevocations")
        try writer["Version"].write("2015-12-01")
    }
}

extension SetIpAddressTypeInput {

    static func write(value: SetIpAddressTypeInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["Action"].write("SetIpAddressType")
        try writer["Version"].write("2015-12-01")
    }
}

extension SetRulePrioritiesInput {

    static func write(value: SetRulePrioritiesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RulePriorities"].writeList(value.rulePriorities, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.RulePriorityPair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("SetRulePriorities")
        try writer["Version"].write("2015-12-01")
    }
}

extension SetSecurityGroupsInput {

    static func write(value: SetSecurityGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"].write(value.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic)
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("SetSecurityGroups")
        try writer["Version"].write("2015-12-01")
    }
}

extension SetSubnetsInput {

    static func write(value: SetSubnetsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["IpAddressType"].write(value.ipAddressType)
        try writer["LoadBalancerArn"].write(value.loadBalancerArn)
        try writer["SubnetMappings"].writeList(value.subnetMappings, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.SubnetMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("SetSubnets")
        try writer["Version"].write("2015-12-01")
    }
}

extension AddListenerCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddListenerCertificatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AddListenerCertificatesResult"]
        var value = AddListenerCertificatesOutput()
        value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AddTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsOutput {
        return AddTagsOutput()
    }
}

extension AddTrustStoreRevocationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTrustStoreRevocationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["AddTrustStoreRevocationsResult"]
        var value = AddTrustStoreRevocationsOutput()
        value.trustStoreRevocations = try reader["TrustStoreRevocations"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateListenerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateListenerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateListenerResult"]
        var value = CreateListenerOutput()
        value.listeners = try reader["Listeners"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Listener.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLoadBalancerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateLoadBalancerResult"]
        var value = CreateLoadBalancerOutput()
        value.loadBalancers = try reader["LoadBalancers"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancer.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateRuleResult"]
        var value = CreateRuleOutput()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateTargetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTargetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateTargetGroupResult"]
        var value = CreateTargetGroupOutput()
        value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateTrustStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTrustStoreOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CreateTrustStoreResult"]
        var value = CreateTrustStoreOutput()
        value.trustStores = try reader["TrustStores"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStore.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteListenerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteListenerOutput {
        return DeleteListenerOutput()
    }
}

extension DeleteLoadBalancerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLoadBalancerOutput {
        return DeleteLoadBalancerOutput()
    }
}

extension DeleteRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRuleOutput {
        return DeleteRuleOutput()
    }
}

extension DeleteSharedTrustStoreAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSharedTrustStoreAssociationOutput {
        return DeleteSharedTrustStoreAssociationOutput()
    }
}

extension DeleteTargetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTargetGroupOutput {
        return DeleteTargetGroupOutput()
    }
}

extension DeleteTrustStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTrustStoreOutput {
        return DeleteTrustStoreOutput()
    }
}

extension DeregisterTargetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterTargetsOutput {
        return DeregisterTargetsOutput()
    }
}

extension DescribeAccountLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAccountLimitsResult"]
        var value = DescribeAccountLimitsOutput()
        value.limits = try reader["Limits"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Limit.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension DescribeListenerAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeListenerAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeListenerAttributesResult"]
        var value = DescribeListenerAttributesOutput()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.ListenerAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeListenerCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeListenerCertificatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeListenerCertificatesResult"]
        var value = DescribeListenerCertificatesOutput()
        value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension DescribeListenersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeListenersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeListenersResult"]
        var value = DescribeListenersOutput()
        value.listeners = try reader["Listeners"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Listener.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension DescribeLoadBalancerAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoadBalancerAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLoadBalancerAttributesResult"]
        var value = DescribeLoadBalancerAttributesOutput()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeLoadBalancersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoadBalancersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLoadBalancersResult"]
        var value = DescribeLoadBalancersOutput()
        value.loadBalancers = try reader["LoadBalancers"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension DescribeRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeRulesResult"]
        var value = DescribeRulesOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeSSLPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSSLPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeSSLPoliciesResult"]
        var value = DescribeSSLPoliciesOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.sslPolicies = try reader["SslPolicies"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.SslPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTagsResult"]
        var value = DescribeTagsOutput()
        value.tagDescriptions = try reader["TagDescriptions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TagDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTargetGroupAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTargetGroupAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTargetGroupAttributesResult"]
        var value = DescribeTargetGroupAttributesOutput()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTargetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTargetGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTargetGroupsResult"]
        var value = DescribeTargetGroupsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTargetHealthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTargetHealthOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTargetHealthResult"]
        var value = DescribeTargetHealthOutput()
        value.targetHealthDescriptions = try reader["TargetHealthDescriptions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetHealthDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTrustStoreAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrustStoreAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTrustStoreAssociationsResult"]
        var value = DescribeTrustStoreAssociationsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.trustStoreAssociations = try reader["TrustStoreAssociations"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTrustStoreRevocationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrustStoreRevocationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTrustStoreRevocationsResult"]
        var value = DescribeTrustStoreRevocationsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.trustStoreRevocations = try reader["TrustStoreRevocations"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTrustStoresOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrustStoresOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTrustStoresResult"]
        var value = DescribeTrustStoresOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.trustStores = try reader["TrustStores"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStore.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetResourcePolicyResult"]
        var value = GetResourcePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension GetTrustStoreCaCertificatesBundleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTrustStoreCaCertificatesBundleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetTrustStoreCaCertificatesBundleResult"]
        var value = GetTrustStoreCaCertificatesBundleOutput()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension GetTrustStoreRevocationContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTrustStoreRevocationContentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetTrustStoreRevocationContentResult"]
        var value = GetTrustStoreRevocationContentOutput()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension ModifyListenerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyListenerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyListenerResult"]
        var value = ModifyListenerOutput()
        value.listeners = try reader["Listeners"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Listener.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyListenerAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyListenerAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyListenerAttributesResult"]
        var value = ModifyListenerAttributesOutput()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.ListenerAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyLoadBalancerAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyLoadBalancerAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyLoadBalancerAttributesResult"]
        var value = ModifyLoadBalancerAttributesOutput()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyRuleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyRuleResult"]
        var value = ModifyRuleOutput()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyTargetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyTargetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyTargetGroupResult"]
        var value = ModifyTargetGroupOutput()
        value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyTargetGroupAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyTargetGroupAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyTargetGroupAttributesResult"]
        var value = ModifyTargetGroupAttributesOutput()
        value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ModifyTrustStoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ModifyTrustStoreOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ModifyTrustStoreResult"]
        var value = ModifyTrustStoreOutput()
        value.trustStores = try reader["TrustStores"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStore.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RegisterTargetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterTargetsOutput {
        return RegisterTargetsOutput()
    }
}

extension RemoveListenerCertificatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveListenerCertificatesOutput {
        return RemoveListenerCertificatesOutput()
    }
}

extension RemoveTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsOutput {
        return RemoveTagsOutput()
    }
}

extension RemoveTrustStoreRevocationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTrustStoreRevocationsOutput {
        return RemoveTrustStoreRevocationsOutput()
    }
}

extension SetIpAddressTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetIpAddressTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["SetIpAddressTypeResult"]
        var value = SetIpAddressTypeOutput()
        value.ipAddressType = try reader["IpAddressType"].readIfPresent()
        return value
    }
}

extension SetRulePrioritiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetRulePrioritiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["SetRulePrioritiesResult"]
        var value = SetRulePrioritiesOutput()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SetSecurityGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetSecurityGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["SetSecurityGroupsResult"]
        var value = SetSecurityGroupsOutput()
        value.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = try reader["EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"].readIfPresent()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SetSubnetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetSubnetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["SetSubnetsResult"]
        var value = SetSubnetsOutput()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.AvailabilityZone.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ipAddressType = try reader["IpAddressType"].readIfPresent()
        return value
    }
}

enum AddListenerCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CertificateNotFound": return try CertificateNotFoundException.makeError(baseError: baseError)
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "TooManyCertificates": return try TooManyCertificatesException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DuplicateTagKeys": return try DuplicateTagKeysException.makeError(baseError: baseError)
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTrustStoreRevocationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidRevocationContent": return try InvalidRevocationContentException.makeError(baseError: baseError)
            case "RevocationContentNotFound": return try RevocationContentNotFoundException.makeError(baseError: baseError)
            case "TooManyTrustStoreRevocationEntries": return try TooManyTrustStoreRevocationEntriesException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateListenerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ALPNPolicyNotFound": return try ALPNPolicyNotSupportedException.makeError(baseError: baseError)
            case "CertificateNotFound": return try CertificateNotFoundException.makeError(baseError: baseError)
            case "DuplicateListener": return try DuplicateListenerException.makeError(baseError: baseError)
            case "IncompatibleProtocols": return try IncompatibleProtocolsException.makeError(baseError: baseError)
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidLoadBalancerAction": return try InvalidLoadBalancerActionException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "SSLPolicyNotFound": return try SSLPolicyNotFoundException.makeError(baseError: baseError)
            case "TargetGroupAssociationLimit": return try TargetGroupAssociationLimitException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyActions": return try TooManyActionsException.makeError(baseError: baseError)
            case "TooManyCertificates": return try TooManyCertificatesException.makeError(baseError: baseError)
            case "TooManyListeners": return try TooManyListenersException.makeError(baseError: baseError)
            case "TooManyRegistrationsForTargetId": return try TooManyRegistrationsForTargetIdException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            case "TooManyTargets": return try TooManyTargetsException.makeError(baseError: baseError)
            case "TooManyUniqueTargetGroupsPerLoadBalancer": return try TooManyUniqueTargetGroupsPerLoadBalancerException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotReady": return try TrustStoreNotReadyException.makeError(baseError: baseError)
            case "UnsupportedProtocol": return try UnsupportedProtocolException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AllocationIdNotFound": return try AllocationIdNotFoundException.makeError(baseError: baseError)
            case "AvailabilityZoneNotSupported": return try AvailabilityZoneNotSupportedException.makeError(baseError: baseError)
            case "DuplicateLoadBalancerName": return try DuplicateLoadBalancerNameException.makeError(baseError: baseError)
            case "DuplicateTagKeys": return try DuplicateTagKeysException.makeError(baseError: baseError)
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidScheme": return try InvalidSchemeException.makeError(baseError: baseError)
            case "InvalidSecurityGroup": return try InvalidSecurityGroupException.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnetException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseException.makeError(baseError: baseError)
            case "SubnetNotFound": return try SubnetNotFoundException.makeError(baseError: baseError)
            case "TooManyLoadBalancers": return try TooManyLoadBalancersException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IncompatibleProtocols": return try IncompatibleProtocolsException.makeError(baseError: baseError)
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidLoadBalancerAction": return try InvalidLoadBalancerActionException.makeError(baseError: baseError)
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "PriorityInUse": return try PriorityInUseException.makeError(baseError: baseError)
            case "TargetGroupAssociationLimit": return try TargetGroupAssociationLimitException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyActions": return try TooManyActionsException.makeError(baseError: baseError)
            case "TooManyRegistrationsForTargetId": return try TooManyRegistrationsForTargetIdException.makeError(baseError: baseError)
            case "TooManyRules": return try TooManyRulesException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            case "TooManyTargetGroups": return try TooManyTargetGroupsException.makeError(baseError: baseError)
            case "TooManyTargets": return try TooManyTargetsException.makeError(baseError: baseError)
            case "TooManyUniqueTargetGroupsPerLoadBalancer": return try TooManyUniqueTargetGroupsPerLoadBalancerException.makeError(baseError: baseError)
            case "UnsupportedProtocol": return try UnsupportedProtocolException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTargetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DuplicateTargetGroupName": return try DuplicateTargetGroupNameException.makeError(baseError: baseError)
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            case "TooManyTargetGroups": return try TooManyTargetGroupsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTrustStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CaCertificatesBundleNotFound": return try CaCertificatesBundleNotFoundException.makeError(baseError: baseError)
            case "DuplicateTagKeys": return try DuplicateTagKeysException.makeError(baseError: baseError)
            case "DuplicateTrustStoreName": return try DuplicateTrustStoreNameException.makeError(baseError: baseError)
            case "InvalidCaCertificatesBundle": return try InvalidCaCertificatesBundleException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            case "TooManyTrustStores": return try TooManyTrustStoresException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteListenerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLoadBalancerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSharedTrustStoreAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeleteAssociationSameAccount": return try DeleteAssociationSameAccountException.makeError(baseError: baseError)
            case "AssociationNotFound": return try TrustStoreAssociationNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTargetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTrustStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "TrustStoreInUse": return try TrustStoreInUseException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterTargetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidTarget": return try InvalidTargetException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeListenerAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeListenerCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeListenersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "UnsupportedProtocol": return try UnsupportedProtocolException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoadBalancerAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoadBalancersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            case "UnsupportedProtocol": return try UnsupportedProtocolException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSSLPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "SSLPolicyNotFound": return try SSLPolicyNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTargetGroupAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTargetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTargetHealthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "HealthUnavailable": return try HealthUnavailableException.makeError(baseError: baseError)
            case "InvalidTarget": return try InvalidTargetException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrustStoreAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrustStoreRevocationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RevocationIdNotFound": return try RevocationIdNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrustStoresOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTrustStoreCaCertificatesBundleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTrustStoreRevocationContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RevocationIdNotFound": return try RevocationIdNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyListenerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ALPNPolicyNotFound": return try ALPNPolicyNotSupportedException.makeError(baseError: baseError)
            case "CertificateNotFound": return try CertificateNotFoundException.makeError(baseError: baseError)
            case "DuplicateListener": return try DuplicateListenerException.makeError(baseError: baseError)
            case "IncompatibleProtocols": return try IncompatibleProtocolsException.makeError(baseError: baseError)
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidLoadBalancerAction": return try InvalidLoadBalancerActionException.makeError(baseError: baseError)
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "SSLPolicyNotFound": return try SSLPolicyNotFoundException.makeError(baseError: baseError)
            case "TargetGroupAssociationLimit": return try TargetGroupAssociationLimitException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyActions": return try TooManyActionsException.makeError(baseError: baseError)
            case "TooManyCertificates": return try TooManyCertificatesException.makeError(baseError: baseError)
            case "TooManyListeners": return try TooManyListenersException.makeError(baseError: baseError)
            case "TooManyRegistrationsForTargetId": return try TooManyRegistrationsForTargetIdException.makeError(baseError: baseError)
            case "TooManyTargets": return try TooManyTargetsException.makeError(baseError: baseError)
            case "TooManyUniqueTargetGroupsPerLoadBalancer": return try TooManyUniqueTargetGroupsPerLoadBalancerException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotReady": return try TrustStoreNotReadyException.makeError(baseError: baseError)
            case "UnsupportedProtocol": return try UnsupportedProtocolException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyListenerAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyLoadBalancerAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IncompatibleProtocols": return try IncompatibleProtocolsException.makeError(baseError: baseError)
            case "InvalidLoadBalancerAction": return try InvalidLoadBalancerActionException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            case "TargetGroupAssociationLimit": return try TargetGroupAssociationLimitException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyActions": return try TooManyActionsException.makeError(baseError: baseError)
            case "TooManyRegistrationsForTargetId": return try TooManyRegistrationsForTargetIdException.makeError(baseError: baseError)
            case "TooManyTargets": return try TooManyTargetsException.makeError(baseError: baseError)
            case "TooManyUniqueTargetGroupsPerLoadBalancer": return try TooManyUniqueTargetGroupsPerLoadBalancerException.makeError(baseError: baseError)
            case "UnsupportedProtocol": return try UnsupportedProtocolException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyTargetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyTargetGroupAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ModifyTrustStoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "CaCertificatesBundleNotFound": return try CaCertificatesBundleNotFoundException.makeError(baseError: baseError)
            case "InvalidCaCertificatesBundle": return try InvalidCaCertificatesBundleException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterTargetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidTarget": return try InvalidTargetException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyRegistrationsForTargetId": return try TooManyRegistrationsForTargetIdException.makeError(baseError: baseError)
            case "TooManyTargets": return try TooManyTargetsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveListenerCertificatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ListenerNotFound": return try ListenerNotFoundException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            case "TargetGroupNotFound": return try TargetGroupNotFoundException.makeError(baseError: baseError)
            case "TooManyTags": return try TooManyTagsException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTrustStoreRevocationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RevocationIdNotFound": return try RevocationIdNotFoundException.makeError(baseError: baseError)
            case "TrustStoreNotFound": return try TrustStoreNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetIpAddressTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnetException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetRulePrioritiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "OperationNotPermitted": return try OperationNotPermittedException.makeError(baseError: baseError)
            case "PriorityInUse": return try PriorityInUseException.makeError(baseError: baseError)
            case "RuleNotFound": return try RuleNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetSecurityGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidSecurityGroup": return try InvalidSecurityGroupException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetSubnetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AllocationIdNotFound": return try AllocationIdNotFoundException.makeError(baseError: baseError)
            case "AvailabilityZoneNotSupported": return try AvailabilityZoneNotSupportedException.makeError(baseError: baseError)
            case "InvalidConfigurationRequest": return try InvalidConfigurationRequestException.makeError(baseError: baseError)
            case "InvalidSubnet": return try InvalidSubnetException.makeError(baseError: baseError)
            case "LoadBalancerNotFound": return try LoadBalancerNotFoundException.makeError(baseError: baseError)
            case "SubnetNotFound": return try SubnetNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListenerNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ListenerNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ListenerNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CertificateNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CertificateNotFoundException {
        let reader = baseError.errorBodyReader
        var value = CertificateNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyCertificatesException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyCertificatesException {
        let reader = baseError.errorBodyReader
        var value = TooManyCertificatesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RuleNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> RuleNotFoundException {
        let reader = baseError.errorBodyReader
        var value = RuleNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateTagKeysException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DuplicateTagKeysException {
        let reader = baseError.errorBodyReader
        var value = DuplicateTagKeysException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TargetGroupNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TargetGroupNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TargetGroupNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LoadBalancerNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> LoadBalancerNotFoundException {
        let reader = baseError.errorBodyReader
        var value = LoadBalancerNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TrustStoreNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TrustStoreNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TrustStoreNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRevocationContentException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidRevocationContentException {
        let reader = baseError.errorBodyReader
        var value = InvalidRevocationContentException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RevocationContentNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> RevocationContentNotFoundException {
        let reader = baseError.errorBodyReader
        var value = RevocationContentNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTrustStoreRevocationEntriesException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyTrustStoreRevocationEntriesException {
        let reader = baseError.errorBodyReader
        var value = TooManyTrustStoreRevocationEntriesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ALPNPolicyNotSupportedException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ALPNPolicyNotSupportedException {
        let reader = baseError.errorBodyReader
        var value = ALPNPolicyNotSupportedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRegistrationsForTargetIdException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyRegistrationsForTargetIdException {
        let reader = baseError.errorBodyReader
        var value = TooManyRegistrationsForTargetIdException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TrustStoreNotReadyException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TrustStoreNotReadyException {
        let reader = baseError.errorBodyReader
        var value = TrustStoreNotReadyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidLoadBalancerActionException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidLoadBalancerActionException {
        let reader = baseError.errorBodyReader
        var value = InvalidLoadBalancerActionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTargetsException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyTargetsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTargetsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyActionsException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyActionsException {
        let reader = baseError.errorBodyReader
        var value = TooManyActionsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateListenerException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DuplicateListenerException {
        let reader = baseError.errorBodyReader
        var value = DuplicateListenerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SSLPolicyNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SSLPolicyNotFoundException {
        let reader = baseError.errorBodyReader
        var value = SSLPolicyNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TargetGroupAssociationLimitException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TargetGroupAssociationLimitException {
        let reader = baseError.errorBodyReader
        var value = TargetGroupAssociationLimitException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IncompatibleProtocolsException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IncompatibleProtocolsException {
        let reader = baseError.errorBodyReader
        var value = IncompatibleProtocolsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedProtocolException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> UnsupportedProtocolException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedProtocolException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyUniqueTargetGroupsPerLoadBalancerException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyUniqueTargetGroupsPerLoadBalancerException {
        let reader = baseError.errorBodyReader
        var value = TooManyUniqueTargetGroupsPerLoadBalancerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidConfigurationRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidConfigurationRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidConfigurationRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyListenersException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyListenersException {
        let reader = baseError.errorBodyReader
        var value = TooManyListenersException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AvailabilityZoneNotSupportedException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AvailabilityZoneNotSupportedException {
        let reader = baseError.errorBodyReader
        var value = AvailabilityZoneNotSupportedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateLoadBalancerNameException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DuplicateLoadBalancerNameException {
        let reader = baseError.errorBodyReader
        var value = DuplicateLoadBalancerNameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyLoadBalancersException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyLoadBalancersException {
        let reader = baseError.errorBodyReader
        var value = TooManyLoadBalancersException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSubnetException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSubnetException {
        let reader = baseError.errorBodyReader
        var value = InvalidSubnetException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AllocationIdNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AllocationIdNotFoundException {
        let reader = baseError.errorBodyReader
        var value = AllocationIdNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SubnetNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> SubnetNotFoundException {
        let reader = baseError.errorBodyReader
        var value = SubnetNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSchemeException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSchemeException {
        let reader = baseError.errorBodyReader
        var value = InvalidSchemeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSecurityGroupException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidSecurityGroupException {
        let reader = baseError.errorBodyReader
        var value = InvalidSecurityGroupException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OperationNotPermittedException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> OperationNotPermittedException {
        let reader = baseError.errorBodyReader
        var value = OperationNotPermittedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTargetGroupsException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyTargetGroupsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTargetGroupsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PriorityInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> PriorityInUseException {
        let reader = baseError.errorBodyReader
        var value = PriorityInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRulesException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyRulesException {
        let reader = baseError.errorBodyReader
        var value = TooManyRulesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateTargetGroupNameException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DuplicateTargetGroupNameException {
        let reader = baseError.errorBodyReader
        var value = DuplicateTargetGroupNameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCaCertificatesBundleException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidCaCertificatesBundleException {
        let reader = baseError.errorBodyReader
        var value = InvalidCaCertificatesBundleException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateTrustStoreNameException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DuplicateTrustStoreNameException {
        let reader = baseError.errorBodyReader
        var value = DuplicateTrustStoreNameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CaCertificatesBundleNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> CaCertificatesBundleNotFoundException {
        let reader = baseError.errorBodyReader
        var value = CaCertificatesBundleNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTrustStoresException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TooManyTrustStoresException {
        let reader = baseError.errorBodyReader
        var value = TooManyTrustStoresException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeleteAssociationSameAccountException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DeleteAssociationSameAccountException {
        let reader = baseError.errorBodyReader
        var value = DeleteAssociationSameAccountException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TrustStoreAssociationNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TrustStoreAssociationNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TrustStoreAssociationNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TrustStoreInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> TrustStoreInUseException {
        let reader = baseError.errorBodyReader
        var value = TrustStoreInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTargetException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidTargetException {
        let reader = baseError.errorBodyReader
        var value = InvalidTargetException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HealthUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> HealthUnavailableException {
        let reader = baseError.errorBodyReader
        var value = HealthUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RevocationIdNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> RevocationIdNotFoundException {
        let reader = baseError.errorBodyReader
        var value = RevocationIdNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Certificate {

    static func write(value: ElasticLoadBalancingv2ClientTypes.Certificate?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CertificateArn"].write(value.certificateArn)
        try writer["IsDefault"].write(value.isDefault)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Certificate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Certificate()
        value.certificateArn = try reader["CertificateArn"].readIfPresent()
        value.isDefault = try reader["IsDefault"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation()
        value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
        value.revocationId = try reader["RevocationId"].readIfPresent()
        value.revocationType = try reader["RevocationType"].readIfPresent()
        value.numberOfRevokedEntries = try reader["NumberOfRevokedEntries"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Listener {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Listener {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Listener()
        value.listenerArn = try reader["ListenerArn"].readIfPresent()
        value.loadBalancerArn = try reader["LoadBalancerArn"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.`protocol` = try reader["Protocol"].readIfPresent()
        value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sslPolicy = try reader["SslPolicy"].readIfPresent()
        value.defaultActions = try reader["DefaultActions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Action.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.alpnPolicy = try reader["AlpnPolicy"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.mutualAuthentication = try reader["MutualAuthentication"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes.read(from:))
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes {

    static func write(value: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["IgnoreClientCertificateExpiry"].write(value.ignoreClientCertificateExpiry)
        try writer["Mode"].write(value.mode)
        try writer["TrustStoreArn"].write(value.trustStoreArn)
        try writer["TrustStoreAssociationStatus"].write(value.trustStoreAssociationStatus)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes()
        value.mode = try reader["Mode"].readIfPresent()
        value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
        value.ignoreClientCertificateExpiry = try reader["IgnoreClientCertificateExpiry"].readIfPresent()
        value.trustStoreAssociationStatus = try reader["TrustStoreAssociationStatus"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Action {

    static func write(value: ElasticLoadBalancingv2ClientTypes.Action?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticateCognitoConfig"].write(value.authenticateCognitoConfig, with: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig.write(value:to:))
        try writer["AuthenticateOidcConfig"].write(value.authenticateOidcConfig, with: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig.write(value:to:))
        try writer["FixedResponseConfig"].write(value.fixedResponseConfig, with: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig.write(value:to:))
        try writer["ForwardConfig"].write(value.forwardConfig, with: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig.write(value:to:))
        try writer["Order"].write(value.order)
        try writer["RedirectConfig"].write(value.redirectConfig, with: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig.write(value:to:))
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Action {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Action()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
        value.authenticateOidcConfig = try reader["AuthenticateOidcConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig.read(from:))
        value.authenticateCognitoConfig = try reader["AuthenticateCognitoConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig.read(from:))
        value.order = try reader["Order"].readIfPresent()
        value.redirectConfig = try reader["RedirectConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig.read(from:))
        value.fixedResponseConfig = try reader["FixedResponseConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig.read(from:))
        value.forwardConfig = try reader["ForwardConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig.read(from:))
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.ForwardActionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TargetGroupStickinessConfig"].write(value.targetGroupStickinessConfig, with: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig.write(value:to:))
        try writer["TargetGroups"].writeList(value.targetGroups, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupTuple.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.ForwardActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.ForwardActionConfig()
        value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupTuple.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetGroupStickinessConfig = try reader["TargetGroupStickinessConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig.read(from:))
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DurationSeconds"].write(value.durationSeconds)
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.durationSeconds = try reader["DurationSeconds"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetGroupTuple {

    static func write(value: ElasticLoadBalancingv2ClientTypes.TargetGroupTuple?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["TargetGroupArn"].write(value.targetGroupArn)
        try writer["Weight"].write(value.weight)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetGroupTuple {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetGroupTuple()
        value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
        value.weight = try reader["Weight"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ContentType"].write(value.contentType)
        try writer["MessageBody"].write(value.messageBody)
        try writer["StatusCode"].write(value.statusCode)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig()
        value.messageBody = try reader["MessageBody"].readIfPresent()
        value.statusCode = try reader["StatusCode"].readIfPresent() ?? ""
        value.contentType = try reader["ContentType"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.RedirectActionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Host"].write(value.host)
        try writer["Path"].write(value.path)
        try writer["Port"].write(value.port)
        try writer["Protocol"].write(value.`protocol`)
        try writer["Query"].write(value.query)
        try writer["StatusCode"].write(value.statusCode)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.RedirectActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.RedirectActionConfig()
        value.`protocol` = try reader["Protocol"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.host = try reader["Host"].readIfPresent()
        value.path = try reader["Path"].readIfPresent()
        value.query = try reader["Query"].readIfPresent()
        value.statusCode = try reader["StatusCode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationRequestExtraParams"].writeMap(value.authenticationRequestExtraParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["OnUnauthenticatedRequest"].write(value.onUnauthenticatedRequest)
        try writer["Scope"].write(value.scope)
        try writer["SessionCookieName"].write(value.sessionCookieName)
        try writer["SessionTimeout"].write(value.sessionTimeout)
        try writer["UserPoolArn"].write(value.userPoolArn)
        try writer["UserPoolClientId"].write(value.userPoolClientId)
        try writer["UserPoolDomain"].write(value.userPoolDomain)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig()
        value.userPoolArn = try reader["UserPoolArn"].readIfPresent() ?? ""
        value.userPoolClientId = try reader["UserPoolClientId"].readIfPresent() ?? ""
        value.userPoolDomain = try reader["UserPoolDomain"].readIfPresent() ?? ""
        value.sessionCookieName = try reader["SessionCookieName"].readIfPresent()
        value.scope = try reader["Scope"].readIfPresent()
        value.sessionTimeout = try reader["SessionTimeout"].readIfPresent()
        value.authenticationRequestExtraParams = try reader["AuthenticationRequestExtraParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.onUnauthenticatedRequest = try reader["OnUnauthenticatedRequest"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationRequestExtraParams"].writeMap(value.authenticationRequestExtraParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["AuthorizationEndpoint"].write(value.authorizationEndpoint)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientSecret"].write(value.clientSecret)
        try writer["Issuer"].write(value.issuer)
        try writer["OnUnauthenticatedRequest"].write(value.onUnauthenticatedRequest)
        try writer["Scope"].write(value.scope)
        try writer["SessionCookieName"].write(value.sessionCookieName)
        try writer["SessionTimeout"].write(value.sessionTimeout)
        try writer["TokenEndpoint"].write(value.tokenEndpoint)
        try writer["UseExistingClientSecret"].write(value.useExistingClientSecret)
        try writer["UserInfoEndpoint"].write(value.userInfoEndpoint)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig()
        value.issuer = try reader["Issuer"].readIfPresent() ?? ""
        value.authorizationEndpoint = try reader["AuthorizationEndpoint"].readIfPresent() ?? ""
        value.tokenEndpoint = try reader["TokenEndpoint"].readIfPresent() ?? ""
        value.userInfoEndpoint = try reader["UserInfoEndpoint"].readIfPresent() ?? ""
        value.clientId = try reader["ClientId"].readIfPresent() ?? ""
        value.clientSecret = try reader["ClientSecret"].readIfPresent()
        value.sessionCookieName = try reader["SessionCookieName"].readIfPresent()
        value.scope = try reader["Scope"].readIfPresent()
        value.sessionTimeout = try reader["SessionTimeout"].readIfPresent()
        value.authenticationRequestExtraParams = try reader["AuthenticationRequestExtraParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.onUnauthenticatedRequest = try reader["OnUnauthenticatedRequest"].readIfPresent()
        value.useExistingClientSecret = try reader["UseExistingClientSecret"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancer {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.LoadBalancer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.LoadBalancer()
        value.loadBalancerArn = try reader["LoadBalancerArn"].readIfPresent()
        value.dnsName = try reader["DNSName"].readIfPresent()
        value.canonicalHostedZoneId = try reader["CanonicalHostedZoneId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.loadBalancerName = try reader["LoadBalancerName"].readIfPresent()
        value.scheme = try reader["Scheme"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.state = try reader["State"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.LoadBalancerState.read(from:))
        value.type = try reader["Type"].readIfPresent()
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.AvailabilityZone.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ipAddressType = try reader["IpAddressType"].readIfPresent()
        value.customerOwnedIpv4Pool = try reader["CustomerOwnedIpv4Pool"].readIfPresent()
        value.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = try reader["EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.AvailabilityZone {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.AvailabilityZone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.AvailabilityZone()
        value.zoneName = try reader["ZoneName"].readIfPresent()
        value.subnetId = try reader["SubnetId"].readIfPresent()
        value.outpostId = try reader["OutpostId"].readIfPresent()
        value.loadBalancerAddresses = try reader["LoadBalancerAddresses"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.allocationId = try reader["AllocationId"].readIfPresent()
        value.privateIPv4Address = try reader["PrivateIPv4Address"].readIfPresent()
        value.ipv6Address = try reader["IPv6Address"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancerState {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.LoadBalancerState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.LoadBalancerState()
        value.code = try reader["Code"].readIfPresent()
        value.reason = try reader["Reason"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Rule {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Rule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Rule()
        value.ruleArn = try reader["RuleArn"].readIfPresent()
        value.priority = try reader["Priority"].readIfPresent()
        value.conditions = try reader["Conditions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.RuleCondition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.actions = try reader["Actions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Action.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.isDefault = try reader["IsDefault"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.RuleCondition {

    static func write(value: ElasticLoadBalancingv2ClientTypes.RuleCondition?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Field"].write(value.field)
        try writer["HostHeaderConfig"].write(value.hostHeaderConfig, with: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig.write(value:to:))
        try writer["HttpHeaderConfig"].write(value.httpHeaderConfig, with: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig.write(value:to:))
        try writer["HttpRequestMethodConfig"].write(value.httpRequestMethodConfig, with: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig.write(value:to:))
        try writer["PathPatternConfig"].write(value.pathPatternConfig, with: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig.write(value:to:))
        try writer["QueryStringConfig"].write(value.queryStringConfig, with: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig.write(value:to:))
        try writer["SourceIpConfig"].write(value.sourceIpConfig, with: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig.write(value:to:))
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.RuleCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.RuleCondition()
        value.field = try reader["Field"].readIfPresent()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hostHeaderConfig = try reader["HostHeaderConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig.read(from:))
        value.pathPatternConfig = try reader["PathPatternConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig.read(from:))
        value.httpHeaderConfig = try reader["HttpHeaderConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig.read(from:))
        value.queryStringConfig = try reader["QueryStringConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig.read(from:))
        value.httpRequestMethodConfig = try reader["HttpRequestMethodConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig.read(from:))
        value.sourceIpConfig = try reader["SourceIpConfig"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig.read(from:))
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Values"].writeList(value.values, memberWritingClosure: ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair {

    static func write(value: ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HttpHeaderName"].write(value.httpHeaderName)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig()
        value.httpHeaderName = try reader["HttpHeaderName"].readIfPresent()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig {

    static func write(value: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetGroup {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetGroup()
        value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
        value.targetGroupName = try reader["TargetGroupName"].readIfPresent()
        value.`protocol` = try reader["Protocol"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.healthCheckProtocol = try reader["HealthCheckProtocol"].readIfPresent()
        value.healthCheckPort = try reader["HealthCheckPort"].readIfPresent()
        value.healthCheckEnabled = try reader["HealthCheckEnabled"].readIfPresent()
        value.healthCheckIntervalSeconds = try reader["HealthCheckIntervalSeconds"].readIfPresent()
        value.healthCheckTimeoutSeconds = try reader["HealthCheckTimeoutSeconds"].readIfPresent()
        value.healthyThresholdCount = try reader["HealthyThresholdCount"].readIfPresent()
        value.unhealthyThresholdCount = try reader["UnhealthyThresholdCount"].readIfPresent()
        value.healthCheckPath = try reader["HealthCheckPath"].readIfPresent()
        value.matcher = try reader["Matcher"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.Matcher.read(from:))
        value.loadBalancerArns = try reader["LoadBalancerArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetType = try reader["TargetType"].readIfPresent()
        value.protocolVersion = try reader["ProtocolVersion"].readIfPresent()
        value.ipAddressType = try reader["IpAddressType"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Matcher {

    static func write(value: ElasticLoadBalancingv2ClientTypes.Matcher?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["GrpcCode"].write(value.grpcCode)
        try writer["HttpCode"].write(value.httpCode)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Matcher {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Matcher()
        value.httpCode = try reader["HttpCode"].readIfPresent()
        value.grpcCode = try reader["GrpcCode"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TrustStore {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TrustStore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TrustStore()
        value.name = try reader["Name"].readIfPresent()
        value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.numberOfCaCertificates = try reader["NumberOfCaCertificates"].readIfPresent()
        value.totalRevokedEntries = try reader["TotalRevokedEntries"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Limit {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Limit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Limit()
        value.name = try reader["Name"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.ListenerAttribute {

    static func write(value: ElasticLoadBalancingv2ClientTypes.ListenerAttribute?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.ListenerAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.ListenerAttribute()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute {

    static func write(value: ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.SslPolicy {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.SslPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.SslPolicy()
        value.sslProtocols = try reader["SslProtocols"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ciphers = try reader["Ciphers"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Cipher.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent()
        value.supportedLoadBalancerTypes = try reader["SupportedLoadBalancerTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Cipher {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Cipher {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Cipher()
        value.name = try reader["Name"].readIfPresent()
        value.priority = try reader["Priority"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TagDescription {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TagDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TagDescription()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.Tag {

    static func write(value: ElasticLoadBalancingv2ClientTypes.Tag?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute {

    static func write(value: ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetHealthDescription {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetHealthDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetHealthDescription()
        value.target = try reader["Target"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.TargetDescription.read(from:))
        value.healthCheckPort = try reader["HealthCheckPort"].readIfPresent()
        value.targetHealth = try reader["TargetHealth"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.TargetHealth.read(from:))
        value.anomalyDetection = try reader["AnomalyDetection"].readIfPresent(with: ElasticLoadBalancingv2ClientTypes.AnomalyDetection.read(from:))
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.AnomalyDetection {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.AnomalyDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.AnomalyDetection()
        value.result = try reader["Result"].readIfPresent()
        value.mitigationInEffect = try reader["MitigationInEffect"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetHealth {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetHealth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetHealth()
        value.state = try reader["State"].readIfPresent()
        value.reason = try reader["Reason"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetDescription {

    static func write(value: ElasticLoadBalancingv2ClientTypes.TargetDescription?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["Id"].write(value.id)
        try writer["Port"].write(value.port)
    }

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TargetDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TargetDescription()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.port = try reader["Port"].readIfPresent()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation {

    static func read(from reader: SmithyXML.Reader) throws -> ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation()
        value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
        value.revocationId = try reader["RevocationId"].readIfPresent()
        value.revocationType = try reader["RevocationType"].readIfPresent()
        value.numberOfRevokedEntries = try reader["NumberOfRevokedEntries"].readIfPresent()
        return value
    }
}

extension ElasticLoadBalancingv2ClientTypes.RevocationContent {

    static func write(value: ElasticLoadBalancingv2ClientTypes.RevocationContent?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RevocationType"].write(value.revocationType)
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3Key"].write(value.s3Key)
        try writer["S3ObjectVersion"].write(value.s3ObjectVersion)
    }
}

extension ElasticLoadBalancingv2ClientTypes.SubnetMapping {

    static func write(value: ElasticLoadBalancingv2ClientTypes.SubnetMapping?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AllocationId"].write(value.allocationId)
        try writer["IPv6Address"].write(value.ipv6Address)
        try writer["PrivateIPv4Address"].write(value.privateIPv4Address)
        try writer["SubnetId"].write(value.subnetId)
    }
}

extension ElasticLoadBalancingv2ClientTypes.RulePriorityPair {

    static func write(value: ElasticLoadBalancingv2ClientTypes.RulePriorityPair?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Priority"].write(value.priority)
        try writer["RuleArn"].write(value.ruleArn)
    }
}

public enum ElasticLoadBalancingv2ClientTypes {}
