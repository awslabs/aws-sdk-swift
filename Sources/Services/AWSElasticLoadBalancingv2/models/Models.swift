// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyReadWrite
import SmithyXML

extension ALPNPolicyNotSupportedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ALPNPolicyNotSupportedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified ALPN policy is not supported.
public struct ALPNPolicyNotSupportedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ALPNPolicyNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.Action: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticateCognitoConfig = "AuthenticateCognitoConfig"
        case authenticateOidcConfig = "AuthenticateOidcConfig"
        case fixedResponseConfig = "FixedResponseConfig"
        case forwardConfig = "ForwardConfig"
        case order = "Order"
        case redirectConfig = "RedirectConfig"
        case targetGroupArn = "TargetGroupArn"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticateCognitoConfig = authenticateCognitoConfig {
            try container.encode(authenticateCognitoConfig, forKey: ClientRuntime.Key("AuthenticateCognitoConfig"))
        }
        if let authenticateOidcConfig = authenticateOidcConfig {
            try container.encode(authenticateOidcConfig, forKey: ClientRuntime.Key("AuthenticateOidcConfig"))
        }
        if let fixedResponseConfig = fixedResponseConfig {
            try container.encode(fixedResponseConfig, forKey: ClientRuntime.Key("FixedResponseConfig"))
        }
        if let forwardConfig = forwardConfig {
            try container.encode(forwardConfig, forKey: ClientRuntime.Key("ForwardConfig"))
        }
        if let order = order {
            try container.encode(order, forKey: ClientRuntime.Key("Order"))
        }
        if let redirectConfig = redirectConfig {
            try container.encode(redirectConfig, forKey: ClientRuntime.Key("RedirectConfig"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Action, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Action()
            value.type = try reader["Type"].readIfPresent()
            value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
            value.authenticateOidcConfig = try reader["AuthenticateOidcConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig.readingClosure)
            value.authenticateCognitoConfig = try reader["AuthenticateCognitoConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig.readingClosure)
            value.order = try reader["Order"].readIfPresent()
            value.redirectConfig = try reader["RedirectConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig.readingClosure)
            value.fixedResponseConfig = try reader["FixedResponseConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig.readingClosure)
            value.forwardConfig = try reader["ForwardConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig.readingClosure)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an action. Each rule must include exactly one of the following types of actions: forward, fixed-response, or redirect, and it must be the last action to be performed.
    public struct Action: Swift.Equatable {
        /// [HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when Type is authenticate-cognito.
        public var authenticateCognitoConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig?
        /// [HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when Type is authenticate-oidc.
        public var authenticateOidcConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig?
        /// [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when Type is fixed-response.
        public var fixedResponseConfig: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig?
        /// Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when Type is forward. If you specify both ForwardConfig and TargetGroupArn, you can specify only one target group using ForwardConfig and it must be the same target group specified in TargetGroupArn.
        public var forwardConfig: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig?
        /// The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
        public var order: Swift.Int?
        /// [Application Load Balancer] Information for creating a redirect action. Specify only when Type is redirect.
        public var redirectConfig: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig?
        /// The Amazon Resource Name (ARN) of the target group. Specify only when Type is forward and you want to route to a single target group. To route to one or more target groups, use ForwardConfig instead.
        public var targetGroupArn: Swift.String?
        /// The type of action.
        /// This member is required.
        public var type: ElasticLoadBalancingv2ClientTypes.ActionTypeEnum?

        public init(
            authenticateCognitoConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig? = nil,
            authenticateOidcConfig: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig? = nil,
            fixedResponseConfig: ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig? = nil,
            forwardConfig: ElasticLoadBalancingv2ClientTypes.ForwardActionConfig? = nil,
            order: Swift.Int? = nil,
            redirectConfig: ElasticLoadBalancingv2ClientTypes.RedirectActionConfig? = nil,
            targetGroupArn: Swift.String? = nil,
            type: ElasticLoadBalancingv2ClientTypes.ActionTypeEnum? = nil
        )
        {
            self.authenticateCognitoConfig = authenticateCognitoConfig
            self.authenticateOidcConfig = authenticateOidcConfig
            self.fixedResponseConfig = fixedResponseConfig
            self.forwardConfig = forwardConfig
            self.order = order
            self.redirectConfig = redirectConfig
            self.targetGroupArn = targetGroupArn
            self.type = type
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum ActionTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticateCognito
        case authenticateOidc
        case fixedResponse
        case forward
        case redirect
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionTypeEnum] {
            return [
                .authenticateCognito,
                .authenticateOidc,
                .fixedResponse,
                .forward,
                .redirect,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticateCognito: return "authenticate-cognito"
            case .authenticateOidc: return "authenticate-oidc"
            case .fixedResponse: return "fixed-response"
            case .forward: return "forward"
            case .redirect: return "redirect"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionTypeEnum(rawValue: rawValue) ?? ActionTypeEnum.sdkUnknown(rawValue)
        }
    }
}

extension AddListenerCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates = "Certificates"
        case listenerArn = "ListenerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificates = certificates {
            if !certificates.isEmpty {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                for (index0, certificate0) in certificates.enumerated() {
                    try certificatesContainer.encode(certificate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                try certificatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        try container.encode("AddListenerCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddListenerCertificatesInput {

    static func urlPathProvider(_ value: AddListenerCertificatesInput) -> Swift.String? {
        return "/"
    }
}

public struct AddListenerCertificatesInput: Swift.Equatable {
    /// The certificate to add. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
    /// This member is required.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        listenerArn: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.listenerArn = listenerArn
    }
}

extension AddListenerCertificatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddListenerCertificatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AddListenerCertificatesResult"]
            var value = AddListenerCertificatesOutput()
            value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct AddListenerCertificatesOutput: Swift.Equatable {
    /// Information about the certificates in the certificate list.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil
    )
    {
        self.certificates = certificates
    }
}

enum AddListenerCertificatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CertificateNotFound": return try await CertificateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyCertificates": return try await TooManyCertificatesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AddTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns = "ResourceArns"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArns = resourceArns {
            if !resourceArns.isEmpty {
                var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
                for (index0, resourcearn0) in resourceArns.enumerated() {
                    try resourceArnsContainer.encode(resourcearn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
                try resourceArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("AddTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddTagsInput {

    static func urlPathProvider(_ value: AddTagsInput) -> Swift.String? {
        return "/"
    }
}

public struct AddTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArns: [Swift.String]?
    /// The tags.
    /// This member is required.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        resourceArns: [Swift.String]? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.resourceArns = resourceArns
        self.tags = tags
    }
}

extension AddTagsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddTagsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return AddTagsOutput()
        }
    }
}

public struct AddTagsOutput: Swift.Equatable {

    public init() { }
}

enum AddTagsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DuplicateTagKeys": return try await DuplicateTagKeysException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AddTrustStoreRevocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case revocationContents = "RevocationContents"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let revocationContents = revocationContents {
            if !revocationContents.isEmpty {
                var revocationContentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevocationContents"))
                for (index0, revocationcontent0) in revocationContents.enumerated() {
                    try revocationContentsContainer.encode(revocationcontent0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var revocationContentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevocationContents"))
                try revocationContentsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("AddTrustStoreRevocations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddTrustStoreRevocationsInput {

    static func urlPathProvider(_ value: AddTrustStoreRevocationsInput) -> Swift.String? {
        return "/"
    }
}

public struct AddTrustStoreRevocationsInput: Swift.Equatable {
    /// The revocation file to add.
    public var revocationContents: [ElasticLoadBalancingv2ClientTypes.RevocationContent]?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        revocationContents: [ElasticLoadBalancingv2ClientTypes.RevocationContent]? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.revocationContents = revocationContents
        self.trustStoreArn = trustStoreArn
    }
}

extension AddTrustStoreRevocationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<AddTrustStoreRevocationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["AddTrustStoreRevocationsResult"]
            var value = AddTrustStoreRevocationsOutput()
            value.trustStoreRevocations = try reader["TrustStoreRevocations"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct AddTrustStoreRevocationsOutput: Swift.Equatable {
    /// Information about the revocation file added to the trust store.
    public var trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation]?

    public init(
        trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation]? = nil
    )
    {
        self.trustStoreRevocations = trustStoreRevocations
    }
}

enum AddTrustStoreRevocationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidRevocationContent": return try await InvalidRevocationContentException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RevocationContentNotFound": return try await RevocationContentNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTrustStoreRevocationEntries": return try await TooManyTrustStoreRevocationEntriesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AllocationIdNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AllocationIdNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified allocation ID does not exist.
public struct AllocationIdNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AllocationIdNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.AnomalyDetection: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mitigationInEffect = "MitigationInEffect"
        case result = "Result"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let mitigationInEffect = mitigationInEffect {
            try container.encode(mitigationInEffect, forKey: ClientRuntime.Key("MitigationInEffect"))
        }
        if let result = result {
            try container.encode(result, forKey: ClientRuntime.Key("Result"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.AnomalyDetection, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.AnomalyDetection()
            value.result = try reader["Result"].readIfPresent()
            value.mitigationInEffect = try reader["MitigationInEffect"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about anomaly detection and mitigation.
    public struct AnomalyDetection: Swift.Equatable {
        /// Indicates whether anomaly mitigation is in progress.
        public var mitigationInEffect: ElasticLoadBalancingv2ClientTypes.MitigationInEffectEnum?
        /// The latest anomaly detection result.
        public var result: ElasticLoadBalancingv2ClientTypes.AnomalyResultEnum?

        public init(
            mitigationInEffect: ElasticLoadBalancingv2ClientTypes.MitigationInEffectEnum? = nil,
            result: ElasticLoadBalancingv2ClientTypes.AnomalyResultEnum? = nil
        )
        {
            self.mitigationInEffect = mitigationInEffect
            self.result = result
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum AnomalyResultEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anomalous
        case normal
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyResultEnum] {
            return [
                .anomalous,
                .normal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anomalous: return "anomalous"
            case .normal: return "normal"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyResultEnum(rawValue: rawValue) ?? AnomalyResultEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum AuthenticateCognitoActionConditionalBehaviorEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case authenticate
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticateCognitoActionConditionalBehaviorEnum] {
            return [
                .allow,
                .authenticate,
                .deny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "allow"
            case .authenticate: return "authenticate"
            case .deny: return "deny"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthenticateCognitoActionConditionalBehaviorEnum(rawValue: rawValue) ?? AuthenticateCognitoActionConditionalBehaviorEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
        case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
        case scope = "Scope"
        case sessionCookieName = "SessionCookieName"
        case sessionTimeout = "SessionTimeout"
        case userPoolArn = "UserPoolArn"
        case userPoolClientId = "UserPoolClientId"
        case userPoolDomain = "UserPoolDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationRequestExtraParams = authenticationRequestExtraParams {
            var authenticationRequestExtraParamsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthenticationRequestExtraParams"))
            for (index0, element0) in authenticationRequestExtraParams.sorted(by: { $0.key < $1.key }).enumerated() {
                let authenticatecognitoactionauthenticationrequestparamnameKey0 = element0.key
                let authenticatecognitoactionauthenticationrequestparamvalueValue0 = element0.value
                var entryContainer0 = authenticationRequestExtraParamsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(authenticatecognitoactionauthenticationrequestparamnameKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(authenticatecognitoactionauthenticationrequestparamvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let onUnauthenticatedRequest = onUnauthenticatedRequest {
            try container.encode(onUnauthenticatedRequest, forKey: ClientRuntime.Key("OnUnauthenticatedRequest"))
        }
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let sessionCookieName = sessionCookieName {
            try container.encode(sessionCookieName, forKey: ClientRuntime.Key("SessionCookieName"))
        }
        if let sessionTimeout = sessionTimeout {
            try container.encode(sessionTimeout, forKey: ClientRuntime.Key("SessionTimeout"))
        }
        if let userPoolArn = userPoolArn {
            try container.encode(userPoolArn, forKey: ClientRuntime.Key("UserPoolArn"))
        }
        if let userPoolClientId = userPoolClientId {
            try container.encode(userPoolClientId, forKey: ClientRuntime.Key("UserPoolClientId"))
        }
        if let userPoolDomain = userPoolDomain {
            try container.encode(userPoolDomain, forKey: ClientRuntime.Key("UserPoolDomain"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConfig()
            value.userPoolArn = try reader["UserPoolArn"].readIfPresent()
            value.userPoolClientId = try reader["UserPoolClientId"].readIfPresent()
            value.userPoolDomain = try reader["UserPoolDomain"].readIfPresent()
            value.sessionCookieName = try reader["SessionCookieName"].readIfPresent()
            value.scope = try reader["Scope"].readIfPresent()
            value.sessionTimeout = try reader["SessionTimeout"].readIfPresent()
            value.authenticationRequestExtraParams = try reader["AuthenticationRequestExtraParams"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.onUnauthenticatedRequest = try reader["OnUnauthenticatedRequest"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Request parameters to use when integrating with Amazon Cognito to authenticate users.
    public struct AuthenticateCognitoActionConfig: Swift.Equatable {
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public var authenticationRequestExtraParams: [Swift.String:Swift.String]?
        /// The behavior if the user is not authenticated. The following are possible values:
        ///
        /// * deny - Return an HTTP 401 Unauthorized error.
        ///
        /// * allow - Allow the request to be forwarded to the target.
        ///
        /// * authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.
        public var onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConditionalBehaviorEnum?
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public var scope: Swift.String?
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public var sessionCookieName: Swift.String?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public var sessionTimeout: Swift.Int?
        /// The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
        /// This member is required.
        public var userPoolArn: Swift.String?
        /// The ID of the Amazon Cognito user pool client.
        /// This member is required.
        public var userPoolClientId: Swift.String?
        /// The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
        /// This member is required.
        public var userPoolDomain: Swift.String?

        public init(
            authenticationRequestExtraParams: [Swift.String:Swift.String]? = nil,
            onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateCognitoActionConditionalBehaviorEnum? = nil,
            scope: Swift.String? = nil,
            sessionCookieName: Swift.String? = nil,
            sessionTimeout: Swift.Int? = nil,
            userPoolArn: Swift.String? = nil,
            userPoolClientId: Swift.String? = nil,
            userPoolDomain: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.scope = scope
            self.sessionCookieName = sessionCookieName
            self.sessionTimeout = sessionTimeout
            self.userPoolArn = userPoolArn
            self.userPoolClientId = userPoolClientId
            self.userPoolDomain = userPoolDomain
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum AuthenticateOidcActionConditionalBehaviorEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case authenticate
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticateOidcActionConditionalBehaviorEnum] {
            return [
                .allow,
                .authenticate,
                .deny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "allow"
            case .authenticate: return "authenticate"
            case .deny: return "deny"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthenticateOidcActionConditionalBehaviorEnum(rawValue: rawValue) ?? AuthenticateOidcActionConditionalBehaviorEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case issuer = "Issuer"
        case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
        case scope = "Scope"
        case sessionCookieName = "SessionCookieName"
        case sessionTimeout = "SessionTimeout"
        case tokenEndpoint = "TokenEndpoint"
        case useExistingClientSecret = "UseExistingClientSecret"
        case userInfoEndpoint = "UserInfoEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationRequestExtraParams = authenticationRequestExtraParams {
            var authenticationRequestExtraParamsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthenticationRequestExtraParams"))
            for (index0, element0) in authenticationRequestExtraParams.sorted(by: { $0.key < $1.key }).enumerated() {
                let authenticateoidcactionauthenticationrequestparamnameKey0 = element0.key
                let authenticateoidcactionauthenticationrequestparamvalueValue0 = element0.value
                var entryContainer0 = authenticationRequestExtraParamsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(authenticateoidcactionauthenticationrequestparamnameKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(authenticateoidcactionauthenticationrequestparamvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let authorizationEndpoint = authorizationEndpoint {
            try container.encode(authorizationEndpoint, forKey: ClientRuntime.Key("AuthorizationEndpoint"))
        }
        if let clientId = clientId {
            try container.encode(clientId, forKey: ClientRuntime.Key("ClientId"))
        }
        if let clientSecret = clientSecret {
            try container.encode(clientSecret, forKey: ClientRuntime.Key("ClientSecret"))
        }
        if let issuer = issuer {
            try container.encode(issuer, forKey: ClientRuntime.Key("Issuer"))
        }
        if let onUnauthenticatedRequest = onUnauthenticatedRequest {
            try container.encode(onUnauthenticatedRequest, forKey: ClientRuntime.Key("OnUnauthenticatedRequest"))
        }
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let sessionCookieName = sessionCookieName {
            try container.encode(sessionCookieName, forKey: ClientRuntime.Key("SessionCookieName"))
        }
        if let sessionTimeout = sessionTimeout {
            try container.encode(sessionTimeout, forKey: ClientRuntime.Key("SessionTimeout"))
        }
        if let tokenEndpoint = tokenEndpoint {
            try container.encode(tokenEndpoint, forKey: ClientRuntime.Key("TokenEndpoint"))
        }
        if let useExistingClientSecret = useExistingClientSecret {
            try container.encode(useExistingClientSecret, forKey: ClientRuntime.Key("UseExistingClientSecret"))
        }
        if let userInfoEndpoint = userInfoEndpoint {
            try container.encode(userInfoEndpoint, forKey: ClientRuntime.Key("UserInfoEndpoint"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConfig()
            value.issuer = try reader["Issuer"].readIfPresent()
            value.authorizationEndpoint = try reader["AuthorizationEndpoint"].readIfPresent()
            value.tokenEndpoint = try reader["TokenEndpoint"].readIfPresent()
            value.userInfoEndpoint = try reader["UserInfoEndpoint"].readIfPresent()
            value.clientId = try reader["ClientId"].readIfPresent()
            value.clientSecret = try reader["ClientSecret"].readIfPresent()
            value.sessionCookieName = try reader["SessionCookieName"].readIfPresent()
            value.scope = try reader["Scope"].readIfPresent()
            value.sessionTimeout = try reader["SessionTimeout"].readIfPresent()
            value.authenticationRequestExtraParams = try reader["AuthenticationRequestExtraParams"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.onUnauthenticatedRequest = try reader["OnUnauthenticatedRequest"].readIfPresent()
            value.useExistingClientSecret = try reader["UseExistingClientSecret"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
    public struct AuthenticateOidcActionConfig: Swift.Equatable {
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public var authenticationRequestExtraParams: [Swift.String:Swift.String]?
        /// The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var authorizationEndpoint: Swift.String?
        /// The OAuth 2.0 client identifier.
        /// This member is required.
        public var clientId: Swift.String?
        /// The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set UseExistingClientSecret to true.
        public var clientSecret: Swift.String?
        /// The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var issuer: Swift.String?
        /// The behavior if the user is not authenticated. The following are possible values:
        ///
        /// * deny - Return an HTTP 401 Unauthorized error.
        ///
        /// * allow - Allow the request to be forwarded to the target.
        ///
        /// * authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.
        public var onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum?
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public var scope: Swift.String?
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public var sessionCookieName: Swift.String?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public var sessionTimeout: Swift.Int?
        /// The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var tokenEndpoint: Swift.String?
        /// Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
        public var useExistingClientSecret: Swift.Bool?
        /// The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var userInfoEndpoint: Swift.String?

        public init(
            authenticationRequestExtraParams: [Swift.String:Swift.String]? = nil,
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            issuer: Swift.String? = nil,
            onUnauthenticatedRequest: ElasticLoadBalancingv2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum? = nil,
            scope: Swift.String? = nil,
            sessionCookieName: Swift.String? = nil,
            sessionTimeout: Swift.Int? = nil,
            tokenEndpoint: Swift.String? = nil,
            useExistingClientSecret: Swift.Bool? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.scope = scope
            self.sessionCookieName = sessionCookieName
            self.sessionTimeout = sessionTimeout
            self.tokenEndpoint = tokenEndpoint
            self.useExistingClientSecret = useExistingClientSecret
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.AvailabilityZone: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerAddresses = "LoadBalancerAddresses"
        case outpostId = "OutpostId"
        case subnetId = "SubnetId"
        case zoneName = "ZoneName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerAddresses = loadBalancerAddresses {
            if !loadBalancerAddresses.isEmpty {
                var loadBalancerAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerAddresses"))
                for (index0, loadbalanceraddress0) in loadBalancerAddresses.enumerated() {
                    try loadBalancerAddressesContainer.encode(loadbalanceraddress0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerAddresses"))
                try loadBalancerAddressesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let outpostId = outpostId {
            try container.encode(outpostId, forKey: ClientRuntime.Key("OutpostId"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
        if let zoneName = zoneName {
            try container.encode(zoneName, forKey: ClientRuntime.Key("ZoneName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.AvailabilityZone, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.AvailabilityZone()
            value.zoneName = try reader["ZoneName"].readIfPresent()
            value.subnetId = try reader["SubnetId"].readIfPresent()
            value.outpostId = try reader["OutpostId"].readIfPresent()
            value.loadBalancerAddresses = try reader["LoadBalancerAddresses"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an Availability Zone.
    public struct AvailabilityZone: Swift.Equatable {
        /// [Network Load Balancers] If you need static IP addresses for your load balancer, you can specify one Elastic IP address per Availability Zone when you create an internal-facing load balancer. For internal load balancers, you can specify a private IP address from the IPv4 range of the subnet.
        public var loadBalancerAddresses: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress]?
        /// [Application Load Balancers on Outposts] The ID of the Outpost.
        public var outpostId: Swift.String?
        /// The ID of the subnet. You can specify one subnet per Availability Zone.
        public var subnetId: Swift.String?
        /// The name of the Availability Zone.
        public var zoneName: Swift.String?

        public init(
            loadBalancerAddresses: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress]? = nil,
            outpostId: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            zoneName: Swift.String? = nil
        )
        {
            self.loadBalancerAddresses = loadBalancerAddresses
            self.outpostId = outpostId
            self.subnetId = subnetId
            self.zoneName = zoneName
        }
    }

}

extension AvailabilityZoneNotSupportedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AvailabilityZoneNotSupportedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified Availability Zone is not supported.
public struct AvailabilityZoneNotSupportedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AvailabilityZoneNotSupported" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CaCertificatesBundleNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CaCertificatesBundleNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified ca certificate bundle does not exist.
public struct CaCertificatesBundleNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CaCertificatesBundleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.Certificate: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case isDefault = "IsDefault"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateArn = certificateArn {
            try container.encode(certificateArn, forKey: ClientRuntime.Key("CertificateArn"))
        }
        if let isDefault = isDefault {
            try container.encode(isDefault, forKey: ClientRuntime.Key("IsDefault"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Certificate, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Certificate()
            value.certificateArn = try reader["CertificateArn"].readIfPresent()
            value.isDefault = try reader["IsDefault"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an SSL server certificate.
    public struct Certificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var certificateArn: Swift.String?
        /// Indicates whether the certificate is the default certificate. Do not set this value when specifying a certificate as an input. This value is not included in the output when describing a listener, but is included when describing listener certificates.
        public var isDefault: Swift.Bool?

        public init(
            certificateArn: Swift.String? = nil,
            isDefault: Swift.Bool? = nil
        )
        {
            self.certificateArn = certificateArn
            self.isDefault = isDefault
        }
    }

}

extension CertificateNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CertificateNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified certificate does not exist.
public struct CertificateNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CertificateNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.Cipher: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case priority = "Priority"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let priority = priority {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Cipher, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Cipher()
            value.name = try reader["Name"].readIfPresent()
            value.priority = try reader["Priority"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a cipher used in a policy.
    public struct Cipher: Swift.Equatable {
        /// The name of the cipher.
        public var name: Swift.String?
        /// The priority of the cipher.
        public var priority: Swift.Int?

        public init(
            name: Swift.String? = nil,
            priority: Swift.Int? = nil
        )
        {
            self.name = name
            self.priority = priority
        }
    }

}

extension CreateListenerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alpnPolicy = "AlpnPolicy"
        case certificates = "Certificates"
        case defaultActions = "DefaultActions"
        case loadBalancerArn = "LoadBalancerArn"
        case mutualAuthentication = "MutualAuthentication"
        case port = "Port"
        case `protocol` = "Protocol"
        case sslPolicy = "SslPolicy"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alpnPolicy = alpnPolicy {
            if !alpnPolicy.isEmpty {
                var alpnPolicyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlpnPolicy"))
                for (index0, alpnpolicyvalue0) in alpnPolicy.enumerated() {
                    try alpnPolicyContainer.encode(alpnpolicyvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alpnPolicyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlpnPolicy"))
                try alpnPolicyContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let certificates = certificates {
            if !certificates.isEmpty {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                for (index0, certificate0) in certificates.enumerated() {
                    try certificatesContainer.encode(certificate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                try certificatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let defaultActions = defaultActions {
            if !defaultActions.isEmpty {
                var defaultActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultActions"))
                for (index0, action0) in defaultActions.enumerated() {
                    try defaultActionsContainer.encode(action0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var defaultActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultActions"))
                try defaultActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let mutualAuthentication = mutualAuthentication {
            try container.encode(mutualAuthentication, forKey: ClientRuntime.Key("MutualAuthentication"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let sslPolicy = sslPolicy {
            try container.encode(sslPolicy, forKey: ClientRuntime.Key("SslPolicy"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateListener", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateListenerInput {

    static func urlPathProvider(_ value: CreateListenerInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateListenerInput: Swift.Equatable {
    /// [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:
    ///
    /// * HTTP1Only
    ///
    /// * HTTP2Only
    ///
    /// * HTTP2Optional
    ///
    /// * HTTP2Preferred
    ///
    /// * None
    ///
    ///
    /// For more information, see [ALPN policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies) in the Network Load Balancers Guide.
    public var alpnPolicy: [Swift.String]?
    /// [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The actions for the default rule.
    /// This member is required.
    public var defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?
    /// The mutual authentication configuration information.
    public var mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?
    /// The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.
    public var port: Swift.Int?
    /// The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.
    public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the Application Load Balancers Guide and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the Network Load Balancers Guide.
    public var sslPolicy: Swift.String?
    /// The tags to assign to the listener.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        alpnPolicy: [Swift.String]? = nil,
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        loadBalancerArn: Swift.String? = nil,
        mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes? = nil,
        port: Swift.Int? = nil,
        `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        sslPolicy: Swift.String? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.alpnPolicy = alpnPolicy
        self.certificates = certificates
        self.defaultActions = defaultActions
        self.loadBalancerArn = loadBalancerArn
        self.mutualAuthentication = mutualAuthentication
        self.port = port
        self.`protocol` = `protocol`
        self.sslPolicy = sslPolicy
        self.tags = tags
    }
}

extension CreateListenerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateListenerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateListenerResult"]
            var value = CreateListenerOutput()
            value.listeners = try reader["Listeners"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Listener.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct CreateListenerOutput: Swift.Equatable {
    /// Information about the listener.
    public var listeners: [ElasticLoadBalancingv2ClientTypes.Listener]?

    public init(
        listeners: [ElasticLoadBalancingv2ClientTypes.Listener]? = nil
    )
    {
        self.listeners = listeners
    }
}

enum CreateListenerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ALPNPolicyNotFound": return try await ALPNPolicyNotSupportedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CertificateNotFound": return try await CertificateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DuplicateListener": return try await DuplicateListenerException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IncompatibleProtocols": return try await IncompatibleProtocolsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidLoadBalancerAction": return try await InvalidLoadBalancerActionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SSLPolicyNotFound": return try await SSLPolicyNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupAssociationLimit": return try await TargetGroupAssociationLimitException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyActions": return try await TooManyActionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyCertificates": return try await TooManyCertificatesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyListeners": return try await TooManyListenersException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyRegistrationsForTargetId": return try await TooManyRegistrationsForTargetIdException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargets": return try await TooManyTargetsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyUniqueTargetGroupsPerLoadBalancer": return try await TooManyUniqueTargetGroupsPerLoadBalancerException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotReady": return try await TrustStoreNotReadyException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedProtocol": return try await UnsupportedProtocolException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
        case ipAddressType = "IpAddressType"
        case name = "Name"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case subnetMappings = "SubnetMappings"
        case subnets = "Subnets"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customerOwnedIpv4Pool = customerOwnedIpv4Pool {
            try container.encode(customerOwnedIpv4Pool, forKey: ClientRuntime.Key("CustomerOwnedIpv4Pool"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let scheme = scheme {
            try container.encode(scheme, forKey: ClientRuntime.Key("Scheme"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                for (index0, securitygroupid0) in securityGroups.enumerated() {
                    try securityGroupsContainer.encode(securitygroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                try securityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let subnetMappings = subnetMappings {
            if !subnetMappings.isEmpty {
                var subnetMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetMappings"))
                for (index0, subnetmapping0) in subnetMappings.enumerated() {
                    try subnetMappingsContainer.encode(subnetmapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetMappings"))
                try subnetMappingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let subnets = subnets {
            if !subnets.isEmpty {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                for (index0, subnetid0) in subnets.enumerated() {
                    try subnetsContainer.encode(subnetid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                try subnetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        try container.encode("CreateLoadBalancer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateLoadBalancerInput {

    static func urlPathProvider(_ value: CreateLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateLoadBalancerInput: Swift.Equatable {
    /// [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool).
    public var customerOwnedIpv4Pool: Swift.String?
    /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
    /// The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
    /// This member is required.
    public var name: Swift.String?
    /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a scheme for a Gateway Load Balancer.
    public var scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum?
    /// [Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.
    public var securityGroups: [Swift.String]?
    /// The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.
    public var subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]?
    /// The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    public var subnets: [Swift.String]?
    /// The tags to assign to the load balancer.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?
    /// The type of load balancer. The default is application.
    public var type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum?

    public init(
        customerOwnedIpv4Pool: Swift.String? = nil,
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
        name: Swift.String? = nil,
        scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum? = nil,
        securityGroups: [Swift.String]? = nil,
        subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]? = nil,
        subnets: [Swift.String]? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil,
        type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum? = nil
    )
    {
        self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
        self.ipAddressType = ipAddressType
        self.name = name
        self.scheme = scheme
        self.securityGroups = securityGroups
        self.subnetMappings = subnetMappings
        self.subnets = subnets
        self.tags = tags
        self.type = type
    }
}

extension CreateLoadBalancerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateLoadBalancerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateLoadBalancerResult"]
            var value = CreateLoadBalancerOutput()
            value.loadBalancers = try reader["LoadBalancers"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancer.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct CreateLoadBalancerOutput: Swift.Equatable {
    /// Information about the load balancer.
    public var loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]?

    public init(
        loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]? = nil
    )
    {
        self.loadBalancers = loadBalancers
    }
}

enum CreateLoadBalancerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AllocationIdNotFound": return try await AllocationIdNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AvailabilityZoneNotSupported": return try await AvailabilityZoneNotSupportedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DuplicateLoadBalancerName": return try await DuplicateLoadBalancerNameException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DuplicateTagKeys": return try await DuplicateTagKeysException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidScheme": return try await InvalidSchemeException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSecurityGroup": return try await InvalidSecurityGroupException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotPermitted": return try await OperationNotPermittedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceInUse": return try await ResourceInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubnetNotFound": return try await SubnetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyLoadBalancers": return try await TooManyLoadBalancersException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case conditions = "Conditions"
        case listenerArn = "ListenerArn"
        case priority = "Priority"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            if !actions.isEmpty {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                for (index0, action0) in actions.enumerated() {
                    try actionsContainer.encode(action0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                try actionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let conditions = conditions {
            if !conditions.isEmpty {
                var conditionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Conditions"))
                for (index0, rulecondition0) in conditions.enumerated() {
                    try conditionsContainer.encode(rulecondition0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var conditionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Conditions"))
                try conditionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        if let priority = priority {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateRuleInput {

    static func urlPathProvider(_ value: CreateRuleInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateRuleInput: Swift.Equatable {
    /// The actions.
    /// This member is required.
    public var actions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The conditions.
    /// This member is required.
    public var conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?
    /// The rule priority. A listener can't have multiple rules with the same priority.
    /// This member is required.
    public var priority: Swift.Int?
    /// The tags to assign to the rule.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        actions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]? = nil,
        listenerArn: Swift.String? = nil,
        priority: Swift.Int? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.actions = actions
        self.conditions = conditions
        self.listenerArn = listenerArn
        self.priority = priority
        self.tags = tags
    }
}

extension CreateRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateRuleResult"]
            var value = CreateRuleOutput()
            value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct CreateRuleOutput: Swift.Equatable {
    /// Information about the rule.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.rules = rules
    }
}

enum CreateRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "IncompatibleProtocols": return try await IncompatibleProtocolsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidLoadBalancerAction": return try await InvalidLoadBalancerActionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "PriorityInUse": return try await PriorityInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupAssociationLimit": return try await TargetGroupAssociationLimitException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyActions": return try await TooManyActionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyRegistrationsForTargetId": return try await TooManyRegistrationsForTargetIdException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyRules": return try await TooManyRulesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargetGroups": return try await TooManyTargetGroupsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargets": return try await TooManyTargetsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyUniqueTargetGroupsPerLoadBalancer": return try await TooManyUniqueTargetGroupsPerLoadBalancerException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedProtocol": return try await UnsupportedProtocolException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateTargetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckEnabled = "HealthCheckEnabled"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        case healthyThresholdCount = "HealthyThresholdCount"
        case ipAddressType = "IpAddressType"
        case matcher = "Matcher"
        case name = "Name"
        case port = "Port"
        case `protocol` = "Protocol"
        case protocolVersion = "ProtocolVersion"
        case tags = "Tags"
        case targetType = "TargetType"
        case unhealthyThresholdCount = "UnhealthyThresholdCount"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthCheckEnabled = healthCheckEnabled {
            try container.encode(healthCheckEnabled, forKey: ClientRuntime.Key("HealthCheckEnabled"))
        }
        if let healthCheckIntervalSeconds = healthCheckIntervalSeconds {
            try container.encode(healthCheckIntervalSeconds, forKey: ClientRuntime.Key("HealthCheckIntervalSeconds"))
        }
        if let healthCheckPath = healthCheckPath {
            try container.encode(healthCheckPath, forKey: ClientRuntime.Key("HealthCheckPath"))
        }
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: ClientRuntime.Key("HealthCheckPort"))
        }
        if let healthCheckProtocol = healthCheckProtocol {
            try container.encode(healthCheckProtocol, forKey: ClientRuntime.Key("HealthCheckProtocol"))
        }
        if let healthCheckTimeoutSeconds = healthCheckTimeoutSeconds {
            try container.encode(healthCheckTimeoutSeconds, forKey: ClientRuntime.Key("HealthCheckTimeoutSeconds"))
        }
        if let healthyThresholdCount = healthyThresholdCount {
            try container.encode(healthyThresholdCount, forKey: ClientRuntime.Key("HealthyThresholdCount"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let matcher = matcher {
            try container.encode(matcher, forKey: ClientRuntime.Key("Matcher"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let protocolVersion = protocolVersion {
            try container.encode(protocolVersion, forKey: ClientRuntime.Key("ProtocolVersion"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetType = targetType {
            try container.encode(targetType, forKey: ClientRuntime.Key("TargetType"))
        }
        if let unhealthyThresholdCount = unhealthyThresholdCount {
            try container.encode(unhealthyThresholdCount, forKey: ClientRuntime.Key("UnhealthyThresholdCount"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        try container.encode("CreateTargetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTargetGroupInput {

    static func urlPathProvider(_ value: CreateTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateTargetGroupInput: Swift.Equatable {
    /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
    public var healthCheckEnabled: Swift.Bool?
    /// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is lambda, the default is 35 seconds.
    public var healthCheckIntervalSeconds: Swift.Int?
    /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    public var healthCheckPath: Swift.String?
    /// The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is traffic-port, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.
    public var healthCheckPort: Swift.String?
    /// The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    public var healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
    public var healthCheckTimeoutSeconds: Swift.Int?
    /// The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is lambda, the default is 5.
    public var healthyThresholdCount: Swift.Int?
    /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. This is an optional parameter. If not specified, the IP address type defaults to ipv4.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum?
    /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.
    public var matcher: ElasticLoadBalancingv2ClientTypes.Matcher?
    /// The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    /// This member is required.
    public var name: Swift.String?
    /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
    public var port: Swift.Int?
    /// The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.
    public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1.
    public var protocolVersion: Swift.String?
    /// The tags to assign to the target group.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?
    /// The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
    ///
    /// * instance - Register targets by instance ID. This is the default value.
    ///
    /// * ip - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.
    ///
    /// * lambda - Register a single Lambda function as a target.
    ///
    /// * alb - Register a single Application Load Balancer as a target.
    public var targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum?
    /// The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is lambda, the default is 5.
    public var unhealthyThresholdCount: Swift.Int?
    /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.
    public var vpcId: Swift.String?

    public init(
        healthCheckEnabled: Swift.Bool? = nil,
        healthCheckIntervalSeconds: Swift.Int? = nil,
        healthCheckPath: Swift.String? = nil,
        healthCheckPort: Swift.String? = nil,
        healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Swift.Int? = nil,
        healthyThresholdCount: Swift.Int? = nil,
        ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum? = nil,
        matcher: ElasticLoadBalancingv2ClientTypes.Matcher? = nil,
        name: Swift.String? = nil,
        port: Swift.Int? = nil,
        `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        protocolVersion: Swift.String? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil,
        targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum? = nil,
        unhealthyThresholdCount: Swift.Int? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.ipAddressType = ipAddressType
        self.matcher = matcher
        self.name = name
        self.port = port
        self.`protocol` = `protocol`
        self.protocolVersion = protocolVersion
        self.tags = tags
        self.targetType = targetType
        self.unhealthyThresholdCount = unhealthyThresholdCount
        self.vpcId = vpcId
    }
}

extension CreateTargetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateTargetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateTargetGroupResult"]
            var value = CreateTargetGroupOutput()
            value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroup.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct CreateTargetGroupOutput: Swift.Equatable {
    /// Information about the target group.
    public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]?

    public init(
        targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]? = nil
    )
    {
        self.targetGroups = targetGroups
    }
}

enum CreateTargetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "DuplicateTargetGroupName": return try await DuplicateTargetGroupNameException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargetGroups": return try await TooManyTargetGroupsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateTrustStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificatesBundleS3Bucket = "CaCertificatesBundleS3Bucket"
        case caCertificatesBundleS3Key = "CaCertificatesBundleS3Key"
        case caCertificatesBundleS3ObjectVersion = "CaCertificatesBundleS3ObjectVersion"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket {
            try container.encode(caCertificatesBundleS3Bucket, forKey: ClientRuntime.Key("CaCertificatesBundleS3Bucket"))
        }
        if let caCertificatesBundleS3Key = caCertificatesBundleS3Key {
            try container.encode(caCertificatesBundleS3Key, forKey: ClientRuntime.Key("CaCertificatesBundleS3Key"))
        }
        if let caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion {
            try container.encode(caCertificatesBundleS3ObjectVersion, forKey: ClientRuntime.Key("CaCertificatesBundleS3ObjectVersion"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("CreateTrustStore", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateTrustStoreInput {

    static func urlPathProvider(_ value: CreateTrustStoreInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateTrustStoreInput: Swift.Equatable {
    /// The Amazon S3 bucket for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Bucket: Swift.String?
    /// The Amazon S3 path for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Key: Swift.String?
    /// The Amazon S3 object version for the ca certificates bundle. If undefined the current version is used.
    public var caCertificatesBundleS3ObjectVersion: Swift.String?
    /// The name of the trust store. This name must be unique per region and cannot be changed after creation.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to assign to the trust store.
    public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

    public init(
        caCertificatesBundleS3Bucket: Swift.String? = nil,
        caCertificatesBundleS3Key: Swift.String? = nil,
        caCertificatesBundleS3ObjectVersion: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
    )
    {
        self.caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket
        self.caCertificatesBundleS3Key = caCertificatesBundleS3Key
        self.caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion
        self.name = name
        self.tags = tags
    }
}

extension CreateTrustStoreOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateTrustStoreOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateTrustStoreResult"]
            var value = CreateTrustStoreOutput()
            value.trustStores = try reader["TrustStores"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStore.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct CreateTrustStoreOutput: Swift.Equatable {
    /// Information about the trust store created.
    public var trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]?

    public init(
        trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]? = nil
    )
    {
        self.trustStores = trustStores
    }
}

enum CreateTrustStoreOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CaCertificatesBundleNotFound": return try await CaCertificatesBundleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DuplicateTagKeys": return try await DuplicateTagKeysException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DuplicateTrustStoreName": return try await DuplicateTrustStoreNameException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidCaCertificatesBundle": return try await InvalidCaCertificatesBundleException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTrustStores": return try await TooManyTrustStoresException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteListenerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArn = "ListenerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        try container.encode("DeleteListener", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteListenerInput {

    static func urlPathProvider(_ value: DeleteListenerInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteListenerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        listenerArn: Swift.String? = nil
    )
    {
        self.listenerArn = listenerArn
    }
}

extension DeleteListenerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteListenerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteListenerOutput()
        }
    }
}

public struct DeleteListenerOutput: Swift.Equatable {

    public init() { }
}

enum DeleteListenerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceInUse": return try await ResourceInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteLoadBalancerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerArn = "LoadBalancerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        try container.encode("DeleteLoadBalancer", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteLoadBalancerInput {

    static func urlPathProvider(_ value: DeleteLoadBalancerInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteLoadBalancerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.loadBalancerArn = loadBalancerArn
    }
}

extension DeleteLoadBalancerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteLoadBalancerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteLoadBalancerOutput()
        }
    }
}

public struct DeleteLoadBalancerOutput: Swift.Equatable {

    public init() { }
}

enum DeleteLoadBalancerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotPermitted": return try await OperationNotPermittedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceInUse": return try await ResourceInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleArn = "RuleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleArn = ruleArn {
            try container.encode(ruleArn, forKey: ClientRuntime.Key("RuleArn"))
        }
        try container.encode("DeleteRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteRuleInput {

    static func urlPathProvider(_ value: DeleteRuleInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteRuleInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule.
    /// This member is required.
    public var ruleArn: Swift.String?

    public init(
        ruleArn: Swift.String? = nil
    )
    {
        self.ruleArn = ruleArn
    }
}

extension DeleteRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteRuleOutput()
        }
    }
}

public struct DeleteRuleOutput: Swift.Equatable {

    public init() { }
}

enum DeleteRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OperationNotPermitted": return try await OperationNotPermittedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteTargetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupArn = "TargetGroupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        try container.encode("DeleteTargetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTargetGroupInput {

    static func urlPathProvider(_ value: DeleteTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteTargetGroupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?

    public init(
        targetGroupArn: Swift.String? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
    }
}

extension DeleteTargetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteTargetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteTargetGroupOutput()
        }
    }
}

public struct DeleteTargetGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteTargetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceInUse": return try await ResourceInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteTrustStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("DeleteTrustStore", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteTrustStoreInput {

    static func urlPathProvider(_ value: DeleteTrustStoreInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteTrustStoreInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        trustStoreArn: Swift.String? = nil
    )
    {
        self.trustStoreArn = trustStoreArn
    }
}

extension DeleteTrustStoreOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteTrustStoreOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteTrustStoreOutput()
        }
    }
}

public struct DeleteTrustStoreOutput: Swift.Equatable {

    public init() { }
}

enum DeleteTrustStoreOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TrustStoreInUse": return try await TrustStoreInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeregisterTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupArn = "TargetGroupArn"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let targets = targets {
            if !targets.isEmpty {
                var targetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Targets"))
                for (index0, targetdescription0) in targets.enumerated() {
                    try targetsContainer.encode(targetdescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Targets"))
                try targetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeregisterTargets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeregisterTargetsInput {

    static func urlPathProvider(_ value: DeregisterTargetsInput) -> Swift.String? {
        return "/"
    }
}

public struct DeregisterTargetsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
    /// This member is required.
    public var targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]?

    public init(
        targetGroupArn: Swift.String? = nil,
        targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
        self.targets = targets
    }
}

extension DeregisterTargetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeregisterTargetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeregisterTargetsOutput()
        }
    }
}

public struct DeregisterTargetsOutput: Swift.Equatable {

    public init() { }
}

enum DeregisterTargetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTarget": return try await InvalidTargetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeAccountLimitsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case pageSize = "PageSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        try container.encode("DescribeAccountLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountLimitsInput {

    static func urlPathProvider(_ value: DescribeAccountLimitsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeAccountLimitsInput: Swift.Equatable {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
    }
}

extension DescribeAccountLimitsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeAccountLimitsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeAccountLimitsResult"]
            var value = DescribeAccountLimitsOutput()
            value.limits = try reader["Limits"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Limit.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeAccountLimitsOutput: Swift.Equatable {
    /// Information about the limits.
    public var limits: [ElasticLoadBalancingv2ClientTypes.Limit]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        limits: [ElasticLoadBalancingv2ClientTypes.Limit]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.limits = limits
        self.nextMarker = nextMarker
    }
}

enum DescribeAccountLimitsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeListenerCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArn = "ListenerArn"
        case marker = "Marker"
        case pageSize = "PageSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        try container.encode("DescribeListenerCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeListenerCertificatesInput {

    static func urlPathProvider(_ value: DescribeListenerCertificatesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeListenerCertificatesInput: Swift.Equatable {
    /// The Amazon Resource Names (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        listenerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.listenerArn = listenerArn
        self.marker = marker
        self.pageSize = pageSize
    }
}

extension DescribeListenerCertificatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeListenerCertificatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeListenerCertificatesResult"]
            var value = DescribeListenerCertificatesOutput()
            value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeListenerCertificatesOutput: Swift.Equatable {
    /// Information about the certificates.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.nextMarker = nextMarker
    }
}

enum DescribeListenerCertificatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeListenersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArns = "ListenerArns"
        case loadBalancerArn = "LoadBalancerArn"
        case marker = "Marker"
        case pageSize = "PageSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let listenerArns = listenerArns {
            if !listenerArns.isEmpty {
                var listenerArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ListenerArns"))
                for (index0, listenerarn0) in listenerArns.enumerated() {
                    try listenerArnsContainer.encode(listenerarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var listenerArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ListenerArns"))
                try listenerArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        try container.encode("DescribeListeners", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeListenersInput {

    static func urlPathProvider(_ value: DescribeListenersInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeListenersInput: Swift.Equatable {
    /// The Amazon Resource Names (ARN) of the listeners.
    public var listenerArns: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the load balancer.
    public var loadBalancerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        listenerArns: [Swift.String]? = nil,
        loadBalancerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.listenerArns = listenerArns
        self.loadBalancerArn = loadBalancerArn
        self.marker = marker
        self.pageSize = pageSize
    }
}

extension DescribeListenersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeListenersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeListenersResult"]
            var value = DescribeListenersOutput()
            value.listeners = try reader["Listeners"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Listener.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeListenersOutput: Swift.Equatable {
    /// Information about the listeners.
    public var listeners: [ElasticLoadBalancingv2ClientTypes.Listener]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        listeners: [ElasticLoadBalancingv2ClientTypes.Listener]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.listeners = listeners
        self.nextMarker = nextMarker
    }
}

enum DescribeListenersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedProtocol": return try await UnsupportedProtocolException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeLoadBalancerAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerArn = "LoadBalancerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        try container.encode("DescribeLoadBalancerAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLoadBalancerAttributesInput {

    static func urlPathProvider(_ value: DescribeLoadBalancerAttributesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeLoadBalancerAttributesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.loadBalancerArn = loadBalancerArn
    }
}

extension DescribeLoadBalancerAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeLoadBalancerAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeLoadBalancerAttributesResult"]
            var value = DescribeLoadBalancerAttributesOutput()
            value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeLoadBalancerAttributesOutput: Swift.Equatable {
    /// Information about the load balancer attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

enum DescribeLoadBalancerAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeLoadBalancersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerArns = "LoadBalancerArns"
        case marker = "Marker"
        case names = "Names"
        case pageSize = "PageSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerArns = loadBalancerArns {
            if !loadBalancerArns.isEmpty {
                var loadBalancerArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerArns"))
                for (index0, loadbalancerarn0) in loadBalancerArns.enumerated() {
                    try loadBalancerArnsContainer.encode(loadbalancerarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerArns"))
                try loadBalancerArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let names = names {
            if !names.isEmpty {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                for (index0, loadbalancername0) in names.enumerated() {
                    try namesContainer.encode(loadbalancername0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                try namesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        try container.encode("DescribeLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeLoadBalancersInput {

    static func urlPathProvider(_ value: DescribeLoadBalancersInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeLoadBalancersInput: Swift.Equatable {
    /// The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    public var loadBalancerArns: [Swift.String]?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the load balancers.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        loadBalancerArns: [Swift.String]? = nil,
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.loadBalancerArns = loadBalancerArns
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
    }
}

extension DescribeLoadBalancersOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeLoadBalancersOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeLoadBalancersResult"]
            var value = DescribeLoadBalancersOutput()
            value.loadBalancers = try reader["LoadBalancers"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancer.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            return value
        }
    }
}

public struct DescribeLoadBalancersOutput: Swift.Equatable {
    /// Information about the load balancers.
    public var loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]?
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?

    public init(
        loadBalancers: [ElasticLoadBalancingv2ClientTypes.LoadBalancer]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextMarker = nextMarker
    }
}

enum DescribeLoadBalancersOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeRulesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArn = "ListenerArn"
        case marker = "Marker"
        case pageSize = "PageSize"
        case ruleArns = "RuleArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        if let ruleArns = ruleArns {
            if !ruleArns.isEmpty {
                var ruleArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleArns"))
                for (index0, rulearn0) in ruleArns.enumerated() {
                    try ruleArnsContainer.encode(rulearn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ruleArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleArns"))
                try ruleArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeRulesInput {

    static func urlPathProvider(_ value: DescribeRulesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeRulesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the listener.
    public var listenerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Names (ARN) of the rules.
    public var ruleArns: [Swift.String]?

    public init(
        listenerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        ruleArns: [Swift.String]? = nil
    )
    {
        self.listenerArn = listenerArn
        self.marker = marker
        self.pageSize = pageSize
        self.ruleArns = ruleArns
    }
}

extension DescribeRulesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeRulesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeRulesResult"]
            var value = DescribeRulesOutput()
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeRulesOutput: Swift.Equatable {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the rules.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        nextMarker: Swift.String? = nil,
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.rules = rules
    }
}

enum DescribeRulesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedProtocol": return try await UnsupportedProtocolException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeSSLPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerType = "LoadBalancerType"
        case marker = "Marker"
        case names = "Names"
        case pageSize = "PageSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerType = loadBalancerType {
            try container.encode(loadBalancerType, forKey: ClientRuntime.Key("LoadBalancerType"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let names = names {
            if !names.isEmpty {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                for (index0, sslpolicyname0) in names.enumerated() {
                    try namesContainer.encode(sslpolicyname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                try namesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        try container.encode("DescribeSSLPolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSSLPoliciesInput {

    static func urlPathProvider(_ value: DescribeSSLPoliciesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeSSLPoliciesInput: Swift.Equatable {
    /// The type of load balancer. The default lists the SSL policies for all load balancers.
    public var loadBalancerType: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the policies.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?

    public init(
        loadBalancerType: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum? = nil,
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.loadBalancerType = loadBalancerType
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
    }
}

extension DescribeSSLPoliciesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeSSLPoliciesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeSSLPoliciesResult"]
            var value = DescribeSSLPoliciesOutput()
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            value.sslPolicies = try reader["SslPolicies"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.SslPolicy.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeSSLPoliciesOutput: Swift.Equatable {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the security policies.
    public var sslPolicies: [ElasticLoadBalancingv2ClientTypes.SslPolicy]?

    public init(
        nextMarker: Swift.String? = nil,
        sslPolicies: [ElasticLoadBalancingv2ClientTypes.SslPolicy]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.sslPolicies = sslPolicies
    }
}

enum DescribeSSLPoliciesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "SSLPolicyNotFound": return try await SSLPolicyNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns = "ResourceArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArns = resourceArns {
            if !resourceArns.isEmpty {
                var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
                for (index0, resourcearn0) in resourceArns.enumerated() {
                    try resourceArnsContainer.encode(resourcearn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
                try resourceArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTagsInput {

    static func urlPathProvider(_ value: DescribeTagsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTagsInput: Swift.Equatable {
    /// The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init(
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

extension DescribeTagsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTagsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTagsResult"]
            var value = DescribeTagsOutput()
            value.tagDescriptions = try reader["TagDescriptions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TagDescription.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTagsOutput: Swift.Equatable {
    /// Information about the tags.
    public var tagDescriptions: [ElasticLoadBalancingv2ClientTypes.TagDescription]?

    public init(
        tagDescriptions: [ElasticLoadBalancingv2ClientTypes.TagDescription]? = nil
    )
    {
        self.tagDescriptions = tagDescriptions
    }
}

enum DescribeTagsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTargetGroupAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupArn = "TargetGroupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        try container.encode("DescribeTargetGroupAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTargetGroupAttributesInput {

    static func urlPathProvider(_ value: DescribeTargetGroupAttributesInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTargetGroupAttributesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?

    public init(
        targetGroupArn: Swift.String? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
    }
}

extension DescribeTargetGroupAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTargetGroupAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTargetGroupAttributesResult"]
            var value = DescribeTargetGroupAttributesOutput()
            value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTargetGroupAttributesOutput: Swift.Equatable {
    /// Information about the target group attributes
    public var attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

enum DescribeTargetGroupAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTargetGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerArn = "LoadBalancerArn"
        case marker = "Marker"
        case names = "Names"
        case pageSize = "PageSize"
        case targetGroupArns = "TargetGroupArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let names = names {
            if !names.isEmpty {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                for (index0, targetgroupname0) in names.enumerated() {
                    try namesContainer.encode(targetgroupname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                try namesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        if let targetGroupArns = targetGroupArns {
            if !targetGroupArns.isEmpty {
                var targetGroupArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupArns"))
                for (index0, targetgrouparn0) in targetGroupArns.enumerated() {
                    try targetGroupArnsContainer.encode(targetgrouparn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetGroupArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupArns"))
                try targetGroupArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTargetGroupsInput {

    static func urlPathProvider(_ value: DescribeTargetGroupsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTargetGroupsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the load balancer.
    public var loadBalancerArn: Swift.String?
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the target groups.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Names (ARN) of the target groups.
    public var targetGroupArns: [Swift.String]?

    public init(
        loadBalancerArn: Swift.String? = nil,
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil,
        targetGroupArns: [Swift.String]? = nil
    )
    {
        self.loadBalancerArn = loadBalancerArn
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
        self.targetGroupArns = targetGroupArns
    }
}

extension DescribeTargetGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTargetGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTargetGroupsResult"]
            var value = DescribeTargetGroupsOutput()
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroup.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTargetGroupsOutput: Swift.Equatable {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the target groups.
    public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]?

    public init(
        nextMarker: Swift.String? = nil,
        targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.targetGroups = targetGroups
    }
}

enum DescribeTargetGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTargetHealthInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case include = "Include"
        case targetGroupArn = "TargetGroupArn"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let include = include {
            if !include.isEmpty {
                var includeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Include"))
                for (index0, describetargethealthinputincludeenum0) in include.enumerated() {
                    try includeContainer.encode(describetargethealthinputincludeenum0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var includeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Include"))
                try includeContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let targets = targets {
            if !targets.isEmpty {
                var targetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Targets"))
                for (index0, targetdescription0) in targets.enumerated() {
                    try targetsContainer.encode(targetdescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Targets"))
                try targetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeTargetHealth", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTargetHealthInput {

    static func urlPathProvider(_ value: DescribeTargetHealthInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTargetHealthInput: Swift.Equatable {
    /// Used to inclue anomaly detection information.
    public var include: [ElasticLoadBalancingv2ClientTypes.DescribeTargetHealthInputIncludeEnum]?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The targets.
    public var targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]?

    public init(
        include: [ElasticLoadBalancingv2ClientTypes.DescribeTargetHealthInputIncludeEnum]? = nil,
        targetGroupArn: Swift.String? = nil,
        targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]? = nil
    )
    {
        self.include = include
        self.targetGroupArn = targetGroupArn
        self.targets = targets
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum DescribeTargetHealthInputIncludeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case anomaly
        case sdkUnknown(Swift.String)

        public static var allCases: [DescribeTargetHealthInputIncludeEnum] {
            return [
                .all,
                .anomaly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .anomaly: return "AnomalyDetection"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DescribeTargetHealthInputIncludeEnum(rawValue: rawValue) ?? DescribeTargetHealthInputIncludeEnum.sdkUnknown(rawValue)
        }
    }
}

extension DescribeTargetHealthOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTargetHealthOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTargetHealthResult"]
            var value = DescribeTargetHealthOutput()
            value.targetHealthDescriptions = try reader["TargetHealthDescriptions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetHealthDescription.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTargetHealthOutput: Swift.Equatable {
    /// Information about the health of the targets.
    public var targetHealthDescriptions: [ElasticLoadBalancingv2ClientTypes.TargetHealthDescription]?

    public init(
        targetHealthDescriptions: [ElasticLoadBalancingv2ClientTypes.TargetHealthDescription]? = nil
    )
    {
        self.targetHealthDescriptions = targetHealthDescriptions
    }
}

enum DescribeTargetHealthOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "HealthUnavailable": return try await HealthUnavailableException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidTarget": return try await InvalidTargetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTrustStoreAssociationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case pageSize = "PageSize"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("DescribeTrustStoreAssociations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTrustStoreAssociationsInput {

    static func urlPathProvider(_ value: DescribeTrustStoreAssociationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTrustStoreAssociationsInput: Swift.Equatable {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.trustStoreArn = trustStoreArn
    }
}

extension DescribeTrustStoreAssociationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTrustStoreAssociationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTrustStoreAssociationsResult"]
            var value = DescribeTrustStoreAssociationsOutput()
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            value.trustStoreAssociations = try reader["TrustStoreAssociations"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTrustStoreAssociationsOutput: Swift.Equatable {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the resources the trust store is associated to.
    public var trustStoreAssociations: [ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation]?

    public init(
        nextMarker: Swift.String? = nil,
        trustStoreAssociations: [ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.trustStoreAssociations = trustStoreAssociations
    }
}

enum DescribeTrustStoreAssociationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfRevokedEntries = "NumberOfRevokedEntries"
        case revocationId = "RevocationId"
        case revocationType = "RevocationType"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let numberOfRevokedEntries = numberOfRevokedEntries {
            try container.encode(numberOfRevokedEntries, forKey: ClientRuntime.Key("NumberOfRevokedEntries"))
        }
        if let revocationId = revocationId {
            try container.encode(revocationId, forKey: ClientRuntime.Key("RevocationId"))
        }
        if let revocationType = revocationType {
            try container.encode(revocationType, forKey: ClientRuntime.Key("RevocationType"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation()
            value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
            value.revocationId = try reader["RevocationId"].readIfPresent()
            value.revocationType = try reader["RevocationType"].readIfPresent()
            value.numberOfRevokedEntries = try reader["NumberOfRevokedEntries"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the revocations used by a trust store.
    public struct DescribeTrustStoreRevocation: Swift.Equatable {
        /// The number of revoked certificates.
        public var numberOfRevokedEntries: Swift.Int?
        /// The revocation ID of a revocation file in use.
        public var revocationId: Swift.Int?
        /// The type of revocation file.
        public var revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            numberOfRevokedEntries: Swift.Int? = nil,
            revocationId: Swift.Int? = nil,
            revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.numberOfRevokedEntries = numberOfRevokedEntries
            self.revocationId = revocationId
            self.revocationType = revocationType
            self.trustStoreArn = trustStoreArn
        }
    }

}

extension DescribeTrustStoreRevocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case pageSize = "PageSize"
        case revocationIds = "RevocationIds"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        if let revocationIds = revocationIds {
            if !revocationIds.isEmpty {
                var revocationIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevocationIds"))
                for (index0, revocationid0) in revocationIds.enumerated() {
                    try revocationIdsContainer.encode(revocationid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var revocationIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevocationIds"))
                try revocationIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("DescribeTrustStoreRevocations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTrustStoreRevocationsInput {

    static func urlPathProvider(_ value: DescribeTrustStoreRevocationsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTrustStoreRevocationsInput: Swift.Equatable {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The revocation IDs of the revocation files you want to describe.
    public var revocationIds: [Swift.Int]?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        revocationIds: [Swift.Int]? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.revocationIds = revocationIds
        self.trustStoreArn = trustStoreArn
    }
}

extension DescribeTrustStoreRevocationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTrustStoreRevocationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTrustStoreRevocationsResult"]
            var value = DescribeTrustStoreRevocationsOutput()
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            value.trustStoreRevocations = try reader["TrustStoreRevocations"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTrustStoreRevocationsOutput: Swift.Equatable {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the revocation file in the trust store.
    public var trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation]?

    public init(
        nextMarker: Swift.String? = nil,
        trustStoreRevocations: [ElasticLoadBalancingv2ClientTypes.DescribeTrustStoreRevocation]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.trustStoreRevocations = trustStoreRevocations
    }
}

enum DescribeTrustStoreRevocationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RevocationIdNotFound": return try await RevocationIdNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTrustStoresInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case names = "Names"
        case pageSize = "PageSize"
        case trustStoreArns = "TrustStoreArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let names = names {
            if !names.isEmpty {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                for (index0, truststorename0) in names.enumerated() {
                    try namesContainer.encode(truststorename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                try namesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let pageSize = pageSize {
            try container.encode(pageSize, forKey: ClientRuntime.Key("PageSize"))
        }
        if let trustStoreArns = trustStoreArns {
            if !trustStoreArns.isEmpty {
                var trustStoreArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrustStoreArns"))
                for (index0, truststorearn0) in trustStoreArns.enumerated() {
                    try trustStoreArnsContainer.encode(truststorearn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var trustStoreArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrustStoreArns"))
                try trustStoreArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeTrustStores", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTrustStoresInput {

    static func urlPathProvider(_ value: DescribeTrustStoresInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTrustStoresInput: Swift.Equatable {
    /// The marker for the next set of results. (You received this marker from a previous call.)
    public var marker: Swift.String?
    /// The names of the trust stores.
    public var names: [Swift.String]?
    /// The maximum number of results to return with this call.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Name (ARN) of the trust store.
    public var trustStoreArns: [Swift.String]?

    public init(
        marker: Swift.String? = nil,
        names: [Swift.String]? = nil,
        pageSize: Swift.Int? = nil,
        trustStoreArns: [Swift.String]? = nil
    )
    {
        self.marker = marker
        self.names = names
        self.pageSize = pageSize
        self.trustStoreArns = trustStoreArns
    }
}

extension DescribeTrustStoresOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTrustStoresOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTrustStoresResult"]
            var value = DescribeTrustStoresOutput()
            value.nextMarker = try reader["NextMarker"].readIfPresent()
            value.trustStores = try reader["TrustStores"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStore.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeTrustStoresOutput: Swift.Equatable {
    /// If there are additional results, this is the marker for the next set of results. Otherwise, this is null.
    public var nextMarker: Swift.String?
    /// Information about the trust stores.
    public var trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]?

    public init(
        nextMarker: Swift.String? = nil,
        trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.trustStores = trustStores
    }
}

enum DescribeTrustStoresOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DuplicateListenerException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DuplicateListenerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A listener with the specified port already exists.
public struct DuplicateListenerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateListener" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DuplicateLoadBalancerNameException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DuplicateLoadBalancerNameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A load balancer with the specified name already exists.
public struct DuplicateLoadBalancerNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateLoadBalancerName" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DuplicateTagKeysException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DuplicateTagKeysException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A tag key was specified more than once.
public struct DuplicateTagKeysException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateTagKeys" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DuplicateTargetGroupNameException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DuplicateTargetGroupNameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A target group with the specified name already exists.
public struct DuplicateTargetGroupNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateTargetGroupName" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DuplicateTrustStoreNameException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = DuplicateTrustStoreNameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A trust store with the specified name already exists.
public struct DuplicateTrustStoreNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateTrustStoreName" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum] {
            return [
                .off,
                .on,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "off"
            case .on: return "on"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum(rawValue: rawValue) ?? EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentType = "ContentType"
        case messageBody = "MessageBody"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let contentType = contentType {
            try container.encode(contentType, forKey: ClientRuntime.Key("ContentType"))
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: ClientRuntime.Key("MessageBody"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.FixedResponseActionConfig()
            value.messageBody = try reader["MessageBody"].readIfPresent()
            value.statusCode = try reader["StatusCode"].readIfPresent()
            value.contentType = try reader["ContentType"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an action that returns a custom HTTP response.
    public struct FixedResponseActionConfig: Swift.Equatable {
        /// The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json
        public var contentType: Swift.String?
        /// The message.
        public var messageBody: Swift.String?
        /// The HTTP response code (2XX, 4XX, or 5XX).
        /// This member is required.
        public var statusCode: Swift.String?

        public init(
            contentType: Swift.String? = nil,
            messageBody: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.contentType = contentType
            self.messageBody = messageBody
            self.statusCode = statusCode
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.ForwardActionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupStickinessConfig = "TargetGroupStickinessConfig"
        case targetGroups = "TargetGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let targetGroupStickinessConfig = targetGroupStickinessConfig {
            try container.encode(targetGroupStickinessConfig, forKey: ClientRuntime.Key("TargetGroupStickinessConfig"))
        }
        if let targetGroups = targetGroups {
            if !targetGroups.isEmpty {
                var targetGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroups"))
                for (index0, targetgrouptuple0) in targetGroups.enumerated() {
                    try targetGroupsContainer.encode(targetgrouptuple0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroups"))
                try targetGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.ForwardActionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.ForwardActionConfig()
            value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupTuple.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.targetGroupStickinessConfig = try reader["TargetGroupStickinessConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig.readingClosure)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a forward action.
    public struct ForwardActionConfig: Swift.Equatable {
        /// The target group stickiness for the rule.
        public var targetGroupStickinessConfig: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig?
        /// The target groups. For Network Load Balancers, you can specify a single target group.
        public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroupTuple]?

        public init(
            targetGroupStickinessConfig: ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig? = nil,
            targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroupTuple]? = nil
        )
        {
            self.targetGroupStickinessConfig = targetGroupStickinessConfig
            self.targetGroups = targetGroups
        }
    }

}

extension GetTrustStoreCaCertificatesBundleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("GetTrustStoreCaCertificatesBundle", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTrustStoreCaCertificatesBundleInput {

    static func urlPathProvider(_ value: GetTrustStoreCaCertificatesBundleInput) -> Swift.String? {
        return "/"
    }
}

public struct GetTrustStoreCaCertificatesBundleInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        trustStoreArn: Swift.String? = nil
    )
    {
        self.trustStoreArn = trustStoreArn
    }
}

extension GetTrustStoreCaCertificatesBundleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetTrustStoreCaCertificatesBundleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetTrustStoreCaCertificatesBundleResult"]
            var value = GetTrustStoreCaCertificatesBundleOutput()
            value.location = try reader["Location"].readIfPresent()
            return value
        }
    }
}

public struct GetTrustStoreCaCertificatesBundleOutput: Swift.Equatable {
    /// The ca certificate bundles Amazon S3 URI.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

enum GetTrustStoreCaCertificatesBundleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetTrustStoreRevocationContentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case revocationId = "RevocationId"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let revocationId = revocationId {
            try container.encode(revocationId, forKey: ClientRuntime.Key("RevocationId"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("GetTrustStoreRevocationContent", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTrustStoreRevocationContentInput {

    static func urlPathProvider(_ value: GetTrustStoreRevocationContentInput) -> Swift.String? {
        return "/"
    }
}

public struct GetTrustStoreRevocationContentInput: Swift.Equatable {
    /// The revocation ID of the revocation file.
    /// This member is required.
    public var revocationId: Swift.Int?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        revocationId: Swift.Int? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.revocationId = revocationId
        self.trustStoreArn = trustStoreArn
    }
}

extension GetTrustStoreRevocationContentOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetTrustStoreRevocationContentOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetTrustStoreRevocationContentResult"]
            var value = GetTrustStoreRevocationContentOutput()
            value.location = try reader["Location"].readIfPresent()
            return value
        }
    }
}

public struct GetTrustStoreRevocationContentOutput: Swift.Equatable {
    /// The revocation files Amazon S3 URI.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

enum GetTrustStoreRevocationContentOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RevocationIdNotFound": return try await RevocationIdNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension HealthUnavailableException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = HealthUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The health of the specified targets could not be retrieved due to an internal error.
public struct HealthUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HealthUnavailable" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, stringvalue0) in values.enumerated() {
                    try valuesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a host header condition.
    public struct HostHeaderConditionConfig: Swift.Equatable {
        /// The host names. The maximum size of each name is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If you specify multiple strings, the condition is satisfied if one of the strings matches the host name.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpHeaderName = "HttpHeaderName"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let httpHeaderName = httpHeaderName {
            try container.encode(httpHeaderName, forKey: ClientRuntime.Key("HttpHeaderName"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, stringvalue0) in values.enumerated() {
                    try valuesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig()
            value.httpHeaderName = try reader["HttpHeaderName"].readIfPresent()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an HTTP header condition. There is a set of standard HTTP header fields. You can also define custom HTTP header fields.
    public struct HttpHeaderConditionConfig: Swift.Equatable {
        /// The name of the HTTP header field. The maximum size is 40 characters. The header name is case insensitive. The allowed characters are specified by RFC 7230. Wildcards are not supported. You can't use an HTTP header condition to specify the host header. Use [HostHeaderConditionConfig] to specify a host header condition.
        public var httpHeaderName: Swift.String?
        /// The strings to compare against the value of the HTTP header. The maximum size of each string is 128 characters. The comparison strings are case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request, we search them in order until a match is found. If you specify multiple strings, the condition is satisfied if one of the strings matches the value of the HTTP header. To require that all of the strings are a match, create one condition per string.
        public var values: [Swift.String]?

        public init(
            httpHeaderName: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.httpHeaderName = httpHeaderName
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, stringvalue0) in values.enumerated() {
                    try valuesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an HTTP method condition. HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the [HTTP Method Registry](https://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also define custom HTTP methods.
    public struct HttpRequestMethodConditionConfig: Swift.Equatable {
        /// The name of the request method. The maximum size is 40 characters. The allowed characters are A-Z, hyphen (-), and underscore (_). The comparison is case sensitive. Wildcards are not supported; therefore, the method name must be an exact match. If you specify multiple strings, the condition is satisfied if one of the strings matches the HTTP request method. We recommend that you route GET and HEAD requests in the same way, because the response to a HEAD request may be cached.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension IncompatibleProtocolsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = IncompatibleProtocolsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified configuration is not valid with this protocol.
public struct IncompatibleProtocolsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IncompatibleProtocols" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidCaCertificatesBundleException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidCaCertificatesBundleException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified ca certificate bundle is in an invalid format, or corrupt.
public struct InvalidCaCertificatesBundleException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCaCertificatesBundle" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidConfigurationRequestException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidConfigurationRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested configuration is not valid.
public struct InvalidConfigurationRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidConfigurationRequest" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidLoadBalancerActionException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidLoadBalancerActionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested action is not valid.
public struct InvalidLoadBalancerActionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLoadBalancerAction" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRevocationContentException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidRevocationContentException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The provided revocation file is an invalid format, or uses an incorrect algorithm.
public struct InvalidRevocationContentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRevocationContent" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSchemeException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSchemeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The requested scheme is not valid.
public struct InvalidSchemeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidScheme" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSecurityGroupException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSecurityGroupException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified security group does not exist.
public struct InvalidSecurityGroupException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSecurityGroup" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidSubnetException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidSubnetException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified subnet is out of available addresses.
public struct InvalidSubnetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSubnet" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidTargetException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidTargetException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified target does not exist, is not in the same VPC as the target group, or has an unsupported instance type.
public struct InvalidTargetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTarget" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum IpAddressType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dualstack
        case ipv4
        case sdkUnknown(Swift.String)

        public static var allCases: [IpAddressType] {
            return [
                .dualstack,
                .ipv4,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dualstack: return "dualstack"
            case .ipv4: return "ipv4"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IpAddressType(rawValue: rawValue) ?? IpAddressType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.Limit: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case max = "Max"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let max = max {
            try container.encode(max, forKey: ClientRuntime.Key("Max"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Limit, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Limit()
            value.name = try reader["Name"].readIfPresent()
            value.max = try reader["Max"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about an Elastic Load Balancing resource limit for your Amazon Web Services account. For more information, see the following:
    ///
    /// * [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html)
    ///
    /// * [Quotas for your Network Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html)
    ///
    /// * [Quotas for your Gateway Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html)
    public struct Limit: Swift.Equatable {
        /// The maximum value of the limit.
        public var max: Swift.String?
        /// The name of the limit. The possible values are:
        ///
        /// * application-load-balancers
        ///
        /// * condition-values-per-alb-rule
        ///
        /// * condition-wildcards-per-alb-rule
        ///
        /// * gateway-load-balancers
        ///
        /// * gateway-load-balancers-per-vpc
        ///
        /// * geneve-target-groups
        ///
        /// * listeners-per-application-load-balancer
        ///
        /// * listeners-per-network-load-balancer
        ///
        /// * network-load-balancers
        ///
        /// * rules-per-application-load-balancer
        ///
        /// * target-groups
        ///
        /// * target-groups-per-action-on-application-load-balancer
        ///
        /// * target-groups-per-action-on-network-load-balancer
        ///
        /// * target-groups-per-application-load-balancer
        ///
        /// * targets-per-application-load-balancer
        ///
        /// * targets-per-availability-zone-per-gateway-load-balancer
        ///
        /// * targets-per-availability-zone-per-network-load-balancer
        ///
        /// * targets-per-network-load-balancer
        public var name: Swift.String?

        public init(
            max: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.max = max
            self.name = name
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.Listener: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alpnPolicy = "AlpnPolicy"
        case certificates = "Certificates"
        case defaultActions = "DefaultActions"
        case listenerArn = "ListenerArn"
        case loadBalancerArn = "LoadBalancerArn"
        case mutualAuthentication = "MutualAuthentication"
        case port = "Port"
        case `protocol` = "Protocol"
        case sslPolicy = "SslPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alpnPolicy = alpnPolicy {
            if !alpnPolicy.isEmpty {
                var alpnPolicyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlpnPolicy"))
                for (index0, alpnpolicyvalue0) in alpnPolicy.enumerated() {
                    try alpnPolicyContainer.encode(alpnpolicyvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alpnPolicyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlpnPolicy"))
                try alpnPolicyContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let certificates = certificates {
            if !certificates.isEmpty {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                for (index0, certificate0) in certificates.enumerated() {
                    try certificatesContainer.encode(certificate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                try certificatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let defaultActions = defaultActions {
            if !defaultActions.isEmpty {
                var defaultActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultActions"))
                for (index0, action0) in defaultActions.enumerated() {
                    try defaultActionsContainer.encode(action0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var defaultActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultActions"))
                try defaultActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let mutualAuthentication = mutualAuthentication {
            try container.encode(mutualAuthentication, forKey: ClientRuntime.Key("MutualAuthentication"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let sslPolicy = sslPolicy {
            try container.encode(sslPolicy, forKey: ClientRuntime.Key("SslPolicy"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Listener, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Listener()
            value.listenerArn = try reader["ListenerArn"].readIfPresent()
            value.loadBalancerArn = try reader["LoadBalancerArn"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.`protocol` = try reader["Protocol"].readIfPresent()
            value.certificates = try reader["Certificates"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Certificate.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.sslPolicy = try reader["SslPolicy"].readIfPresent()
            value.defaultActions = try reader["DefaultActions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Action.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.alpnPolicy = try reader["AlpnPolicy"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.mutualAuthentication = try reader["MutualAuthentication"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes.readingClosure)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a listener.
    public struct Listener: Swift.Equatable {
        /// [TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.
        public var alpnPolicy: [Swift.String]?
        /// [HTTPS or TLS listener] The default certificate for the listener.
        public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
        /// The default actions for the listener.
        public var defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]?
        /// The Amazon Resource Name (ARN) of the listener.
        public var listenerArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var loadBalancerArn: Swift.String?
        /// The mutual authentication configuration information.
        public var mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?
        /// The port on which the load balancer is listening.
        public var port: Swift.Int?
        /// The protocol for connections from clients to the load balancer.
        public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
        /// [HTTPS or TLS listener] The security policy that defines which protocols and ciphers are supported.
        public var sslPolicy: Swift.String?

        public init(
            alpnPolicy: [Swift.String]? = nil,
            certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
            defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
            listenerArn: Swift.String? = nil,
            loadBalancerArn: Swift.String? = nil,
            mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes? = nil,
            port: Swift.Int? = nil,
            `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
            sslPolicy: Swift.String? = nil
        )
        {
            self.alpnPolicy = alpnPolicy
            self.certificates = certificates
            self.defaultActions = defaultActions
            self.listenerArn = listenerArn
            self.loadBalancerArn = loadBalancerArn
            self.mutualAuthentication = mutualAuthentication
            self.port = port
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
        }
    }

}

extension ListenerNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ListenerNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified listener does not exist.
public struct ListenerNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ListenerNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancer: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case canonicalHostedZoneId = "CanonicalHostedZoneId"
        case createdTime = "CreatedTime"
        case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
        case dnsName = "DNSName"
        case enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"
        case ipAddressType = "IpAddressType"
        case loadBalancerArn = "LoadBalancerArn"
        case loadBalancerName = "LoadBalancerName"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case state = "State"
        case type = "Type"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZones = availabilityZones {
            if !availabilityZones.isEmpty {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                for (index0, availabilityzone0) in availabilityZones.enumerated() {
                    try availabilityZonesContainer.encode(availabilityzone0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
                try availabilityZonesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let canonicalHostedZoneId = canonicalHostedZoneId {
            try container.encode(canonicalHostedZoneId, forKey: ClientRuntime.Key("CanonicalHostedZoneId"))
        }
        if let createdTime = createdTime {
            try container.encodeTimestamp(createdTime, format: .dateTime, forKey: ClientRuntime.Key("CreatedTime"))
        }
        if let customerOwnedIpv4Pool = customerOwnedIpv4Pool {
            try container.encode(customerOwnedIpv4Pool, forKey: ClientRuntime.Key("CustomerOwnedIpv4Pool"))
        }
        if let dnsName = dnsName {
            try container.encode(dnsName, forKey: ClientRuntime.Key("DNSName"))
        }
        if let enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic {
            try container.encode(enforceSecurityGroupInboundRulesOnPrivateLinkTraffic, forKey: ClientRuntime.Key("EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let loadBalancerName = loadBalancerName {
            try container.encode(loadBalancerName, forKey: ClientRuntime.Key("LoadBalancerName"))
        }
        if let scheme = scheme {
            try container.encode(scheme, forKey: ClientRuntime.Key("Scheme"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                for (index0, securitygroupid0) in securityGroups.enumerated() {
                    try securityGroupsContainer.encode(securitygroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                try securityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.LoadBalancer, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.LoadBalancer()
            value.loadBalancerArn = try reader["LoadBalancerArn"].readIfPresent()
            value.dnsName = try reader["DNSName"].readIfPresent()
            value.canonicalHostedZoneId = try reader["CanonicalHostedZoneId"].readIfPresent()
            value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: .dateTime)
            value.loadBalancerName = try reader["LoadBalancerName"].readIfPresent()
            value.scheme = try reader["Scheme"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.state = try reader["State"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerState.readingClosure)
            value.type = try reader["Type"].readIfPresent()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.AvailabilityZone.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.ipAddressType = try reader["IpAddressType"].readIfPresent()
            value.customerOwnedIpv4Pool = try reader["CustomerOwnedIpv4Pool"].readIfPresent()
            value.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = try reader["EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a load balancer.
    public struct LoadBalancer: Swift.Equatable {
        /// The subnets for the load balancer.
        public var availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]?
        /// The ID of the Amazon Route 53 hosted zone associated with the load balancer.
        public var canonicalHostedZoneId: Swift.String?
        /// The date and time the load balancer was created.
        public var createdTime: ClientRuntime.Date?
        /// [Application Load Balancers on Outposts] The ID of the customer-owned address pool.
        public var customerOwnedIpv4Pool: Swift.String?
        /// The public DNS name of the load balancer.
        public var dnsName: Swift.String?
        /// Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through Amazon Web Services PrivateLink.
        public var enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: Swift.String?
        /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
        public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var loadBalancerArn: Swift.String?
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.
        public var scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum?
        /// The IDs of the security groups for the load balancer.
        public var securityGroups: [Swift.String]?
        /// The state of the load balancer.
        public var state: ElasticLoadBalancingv2ClientTypes.LoadBalancerState?
        /// The type of load balancer.
        public var type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum?
        /// The ID of the VPC for the load balancer.
        public var vpcId: Swift.String?

        public init(
            availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]? = nil,
            canonicalHostedZoneId: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            customerOwnedIpv4Pool: Swift.String? = nil,
            dnsName: Swift.String? = nil,
            enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: Swift.String? = nil,
            ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
            loadBalancerArn: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            scheme: ElasticLoadBalancingv2ClientTypes.LoadBalancerSchemeEnum? = nil,
            securityGroups: [Swift.String]? = nil,
            state: ElasticLoadBalancingv2ClientTypes.LoadBalancerState? = nil,
            type: ElasticLoadBalancingv2ClientTypes.LoadBalancerTypeEnum? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.createdTime = createdTime
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.dnsName = dnsName
            self.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
            self.ipAddressType = ipAddressType
            self.loadBalancerArn = loadBalancerArn
            self.loadBalancerName = loadBalancerName
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.state = state
            self.type = type
            self.vpcId = vpcId
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationId = "AllocationId"
        case ipv6Address = "IPv6Address"
        case ipAddress = "IpAddress"
        case privateIPv4Address = "PrivateIPv4Address"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocationId = allocationId {
            try container.encode(allocationId, forKey: ClientRuntime.Key("AllocationId"))
        }
        if let ipv6Address = ipv6Address {
            try container.encode(ipv6Address, forKey: ClientRuntime.Key("IPv6Address"))
        }
        if let ipAddress = ipAddress {
            try container.encode(ipAddress, forKey: ClientRuntime.Key("IpAddress"))
        }
        if let privateIPv4Address = privateIPv4Address {
            try container.encode(privateIPv4Address, forKey: ClientRuntime.Key("PrivateIPv4Address"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.LoadBalancerAddress()
            value.ipAddress = try reader["IpAddress"].readIfPresent()
            value.allocationId = try reader["AllocationId"].readIfPresent()
            value.privateIPv4Address = try reader["PrivateIPv4Address"].readIfPresent()
            value.ipv6Address = try reader["IPv6Address"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a static IP address for a load balancer.
    public struct LoadBalancerAddress: Swift.Equatable {
        /// [Network Load Balancers] The allocation ID of the Elastic IP address for an internal-facing load balancer.
        public var allocationId: Swift.String?
        /// The static IP address.
        public var ipAddress: Swift.String?
        /// [Network Load Balancers] The IPv6 address.
        public var ipv6Address: Swift.String?
        /// [Network Load Balancers] The private IPv4 address for an internal load balancer.
        public var privateIPv4Address: Swift.String?

        public init(
            allocationId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIPv4Address: Swift.String? = nil
        )
        {
            self.allocationId = allocationId
            self.ipAddress = ipAddress
            self.ipv6Address = ipv6Address
            self.privateIPv4Address = privateIPv4Address
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a load balancer attribute.
    public struct LoadBalancerAttribute: Swift.Equatable {
        /// The name of the attribute. The following attributes are supported by all load balancers:
        ///
        /// * deletion_protection.enabled - Indicates whether deletion protection is enabled. The value is true or false. The default is false.
        ///
        /// * load_balancing.cross_zone.enabled - Indicates whether cross-zone load balancing is enabled. The possible values are true and false. The default for Network Load Balancers and Gateway Load Balancers is false. The default for Application Load Balancers is true, and cannot be changed.
        ///
        ///
        /// The following attributes are supported by both Application Load Balancers and Network Load Balancers:
        ///
        /// * access_logs.s3.enabled - Indicates whether access logs are enabled. The value is true or false. The default is false.
        ///
        /// * access_logs.s3.bucket - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
        ///
        /// * access_logs.s3.prefix - The prefix for the location in the S3 bucket for the access logs.
        ///
        /// * ipv6.deny_all_igw_traffic - Blocks internet gateway (IGW) access to the load balancer. It is set to false for internet-facing load balancers and true for internal load balancers, preventing unintended access to your internal load balancer through an internet gateway.
        ///
        ///
        /// The following attributes are supported by only Application Load Balancers:
        ///
        /// * idle_timeout.timeout_seconds - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds.
        ///
        /// * connection_logs.s3.enabled - Indicates whether connection logs are enabled. The value is true or false. The default is false.
        ///
        /// * connection_logs.s3.bucket - The name of the S3 bucket for the connection logs. This attribute is required if connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
        ///
        /// * connection_logs.s3.prefix - The prefix for the location in the S3 bucket for the connection logs.
        ///
        /// * routing.http.desync_mitigation_mode - Determines how the load balancer handles requests that might pose a security risk to your application. The possible values are monitor, defensive, and strictest. The default is defensive.
        ///
        /// * routing.http.drop_invalid_header_fields.enabled - Indicates whether HTTP headers with invalid header fields are removed by the load balancer (true) or routed to targets (false). The default is false.
        ///
        /// * routing.http.preserve_host_header.enabled - Indicates whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. The possible values are true and false. The default is false.
        ///
        /// * routing.http.x_amzn_tls_version_and_cipher_suite.enabled - Indicates whether the two headers (x-amzn-tls-version and x-amzn-tls-cipher-suite), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. The x-amzn-tls-version header has information about the TLS protocol version negotiated with the client, and the x-amzn-tls-cipher-suite header has information about the cipher suite negotiated with the client. Both headers are in OpenSSL format. The possible values for the attribute are true and false. The default is false.
        ///
        /// * routing.http.xff_client_port.enabled - Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer. The possible values are true and false. The default is false.
        ///
        /// * routing.http.xff_header_processing.mode - Enables you to modify, preserve, or remove the X-Forwarded-For header in the HTTP request before the Application Load Balancer sends the request to the target. The possible values are append, preserve, and remove. The default is append.
        ///
        /// * If the value is append, the Application Load Balancer adds the client IP address (of the last hop) to the X-Forwarded-For header in the HTTP request before it sends it to targets.
        ///
        /// * If the value is preserve the Application Load Balancer preserves the X-Forwarded-For header in the HTTP request, and sends it to targets without any change.
        ///
        /// * If the value is remove, the Application Load Balancer removes the X-Forwarded-For header in the HTTP request before it sends it to targets.
        ///
        ///
        ///
        ///
        /// * routing.http2.enabled - Indicates whether HTTP/2 is enabled. The possible values are true and false. The default is true. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens.
        ///
        /// * waf.fail_open.enabled - Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to Amazon Web Services WAF. The possible values are true and false. The default is false.
        ///
        ///
        /// The following attributes are supported by only Network Load Balancers:
        ///
        /// * dns_record.client_routing_policy - Indicates how traffic is distributed among the load balancer Availability Zones. The possible values are availability_zone_affinity with 100 percent zonal affinity, partial_availability_zone_affinity with 85 percent zonal affinity, and any_availability_zone with 0 percent zonal affinity.
        public var key: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension LoadBalancerNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = LoadBalancerNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified load balancer does not exist.
public struct LoadBalancerNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LoadBalancerNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum LoadBalancerSchemeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `internal`
        case internetFacing
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerSchemeEnum] {
            return [
                .internal,
                .internetFacing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .internal: return "internal"
            case .internetFacing: return "internet-facing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerSchemeEnum(rawValue: rawValue) ?? LoadBalancerSchemeEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.LoadBalancerState: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let reason = reason {
            try container.encode(reason, forKey: ClientRuntime.Key("Reason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.LoadBalancerState, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.LoadBalancerState()
            value.code = try reader["Code"].readIfPresent()
            value.reason = try reader["Reason"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the state of the load balancer.
    public struct LoadBalancerState: Swift.Equatable {
        /// The state code. The initial state of the load balancer is provisioning. After the load balancer is fully set up and ready to route traffic, its state is active. If load balancer is routing traffic but does not have the resources it needs to scale, its state isactive_impaired. If the load balancer could not be set up, its state is failed.
        public var code: ElasticLoadBalancingv2ClientTypes.LoadBalancerStateEnum?
        /// A description of the state.
        public var reason: Swift.String?

        public init(
            code: ElasticLoadBalancingv2ClientTypes.LoadBalancerStateEnum? = nil,
            reason: Swift.String? = nil
        )
        {
            self.code = code
            self.reason = reason
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum LoadBalancerStateEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case activeImpaired
        case failed
        case provisioning
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerStateEnum] {
            return [
                .active,
                .activeImpaired,
                .failed,
                .provisioning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .activeImpaired: return "active_impaired"
            case .failed: return "failed"
            case .provisioning: return "provisioning"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerStateEnum(rawValue: rawValue) ?? LoadBalancerStateEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum LoadBalancerTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case application
        case gateway
        case network
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTypeEnum] {
            return [
                .application,
                .gateway,
                .network,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .application: return "application"
            case .gateway: return "gateway"
            case .network: return "network"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTypeEnum(rawValue: rawValue) ?? LoadBalancerTypeEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.Matcher: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpcCode = "GrpcCode"
        case httpCode = "HttpCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let grpcCode = grpcCode {
            try container.encode(grpcCode, forKey: ClientRuntime.Key("GrpcCode"))
        }
        if let httpCode = httpCode {
            try container.encode(httpCode, forKey: ClientRuntime.Key("HttpCode"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Matcher, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Matcher()
            value.httpCode = try reader["HttpCode"].readIfPresent()
            value.grpcCode = try reader["GrpcCode"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes.
    public struct Matcher: Swift.Equatable {
        /// You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.
        public var grpcCode: Swift.String?
        /// For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Gateway Load Balancers, this must be "200–399". Note that when using shorthand syntax, some values such as commas need to be escaped.
        public var httpCode: Swift.String?

        public init(
            grpcCode: Swift.String? = nil,
            httpCode: Swift.String? = nil
        )
        {
            self.grpcCode = grpcCode
            self.httpCode = httpCode
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum MitigationInEffectEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [MitigationInEffectEnum] {
            return [
                .no,
                .yes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .no: return "no"
            case .yes: return "yes"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MitigationInEffectEnum(rawValue: rawValue) ?? MitigationInEffectEnum.sdkUnknown(rawValue)
        }
    }
}

extension ModifyListenerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alpnPolicy = "AlpnPolicy"
        case certificates = "Certificates"
        case defaultActions = "DefaultActions"
        case listenerArn = "ListenerArn"
        case mutualAuthentication = "MutualAuthentication"
        case port = "Port"
        case `protocol` = "Protocol"
        case sslPolicy = "SslPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alpnPolicy = alpnPolicy {
            if !alpnPolicy.isEmpty {
                var alpnPolicyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlpnPolicy"))
                for (index0, alpnpolicyvalue0) in alpnPolicy.enumerated() {
                    try alpnPolicyContainer.encode(alpnpolicyvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alpnPolicyContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlpnPolicy"))
                try alpnPolicyContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let certificates = certificates {
            if !certificates.isEmpty {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                for (index0, certificate0) in certificates.enumerated() {
                    try certificatesContainer.encode(certificate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                try certificatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let defaultActions = defaultActions {
            if !defaultActions.isEmpty {
                var defaultActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultActions"))
                for (index0, action0) in defaultActions.enumerated() {
                    try defaultActionsContainer.encode(action0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var defaultActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultActions"))
                try defaultActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        if let mutualAuthentication = mutualAuthentication {
            try container.encode(mutualAuthentication, forKey: ClientRuntime.Key("MutualAuthentication"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let sslPolicy = sslPolicy {
            try container.encode(sslPolicy, forKey: ClientRuntime.Key("SslPolicy"))
        }
        try container.encode("ModifyListener", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyListenerInput {

    static func urlPathProvider(_ value: ModifyListenerInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyListenerInput: Swift.Equatable {
    /// [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:
    ///
    /// * HTTP1Only
    ///
    /// * HTTP2Only
    ///
    /// * HTTP2Optional
    ///
    /// * HTTP2Preferred
    ///
    /// * None
    ///
    ///
    /// For more information, see [ALPN policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies) in the Network Load Balancers Guide.
    public var alpnPolicy: [Swift.String]?
    /// [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The actions for the default rule.
    public var defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?
    /// The mutual authentication configuration information.
    public var mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes?
    /// The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer.
    public var port: Swift.Int?
    /// The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.
    public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the Application Load Balancers Guide or [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the Network Load Balancers Guide.
    public var sslPolicy: Swift.String?

    public init(
        alpnPolicy: [Swift.String]? = nil,
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        defaultActions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        listenerArn: Swift.String? = nil,
        mutualAuthentication: ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes? = nil,
        port: Swift.Int? = nil,
        `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        sslPolicy: Swift.String? = nil
    )
    {
        self.alpnPolicy = alpnPolicy
        self.certificates = certificates
        self.defaultActions = defaultActions
        self.listenerArn = listenerArn
        self.mutualAuthentication = mutualAuthentication
        self.port = port
        self.`protocol` = `protocol`
        self.sslPolicy = sslPolicy
    }
}

extension ModifyListenerOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyListenerOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyListenerResult"]
            var value = ModifyListenerOutput()
            value.listeners = try reader["Listeners"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Listener.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ModifyListenerOutput: Swift.Equatable {
    /// Information about the modified listener.
    public var listeners: [ElasticLoadBalancingv2ClientTypes.Listener]?

    public init(
        listeners: [ElasticLoadBalancingv2ClientTypes.Listener]? = nil
    )
    {
        self.listeners = listeners
    }
}

enum ModifyListenerOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ALPNPolicyNotFound": return try await ALPNPolicyNotSupportedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "CertificateNotFound": return try await CertificateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "DuplicateListener": return try await DuplicateListenerException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "IncompatibleProtocols": return try await IncompatibleProtocolsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidLoadBalancerAction": return try await InvalidLoadBalancerActionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SSLPolicyNotFound": return try await SSLPolicyNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupAssociationLimit": return try await TargetGroupAssociationLimitException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyActions": return try await TooManyActionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyCertificates": return try await TooManyCertificatesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyListeners": return try await TooManyListenersException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyRegistrationsForTargetId": return try await TooManyRegistrationsForTargetIdException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargets": return try await TooManyTargetsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyUniqueTargetGroupsPerLoadBalancer": return try await TooManyUniqueTargetGroupsPerLoadBalancerException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotReady": return try await TrustStoreNotReadyException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedProtocol": return try await UnsupportedProtocolException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyLoadBalancerAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case loadBalancerArn = "LoadBalancerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                var attributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attributes"))
                for (index0, loadbalancerattribute0) in attributes.enumerated() {
                    try attributesContainer.encode(loadbalancerattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attributes"))
                try attributesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        try container.encode("ModifyLoadBalancerAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyLoadBalancerAttributesInput {

    static func urlPathProvider(_ value: ModifyLoadBalancerAttributesInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyLoadBalancerAttributesInput: Swift.Equatable {
    /// The load balancer attributes.
    /// This member is required.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]? = nil,
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.loadBalancerArn = loadBalancerArn
    }
}

extension ModifyLoadBalancerAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyLoadBalancerAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyLoadBalancerAttributesResult"]
            var value = ModifyLoadBalancerAttributesOutput()
            value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ModifyLoadBalancerAttributesOutput: Swift.Equatable {
    /// Information about the load balancer attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.LoadBalancerAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

enum ModifyLoadBalancerAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyRuleInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case conditions = "Conditions"
        case ruleArn = "RuleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            if !actions.isEmpty {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                for (index0, action0) in actions.enumerated() {
                    try actionsContainer.encode(action0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                try actionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let conditions = conditions {
            if !conditions.isEmpty {
                var conditionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Conditions"))
                for (index0, rulecondition0) in conditions.enumerated() {
                    try conditionsContainer.encode(rulecondition0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var conditionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Conditions"))
                try conditionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let ruleArn = ruleArn {
            try container.encode(ruleArn, forKey: ClientRuntime.Key("RuleArn"))
        }
        try container.encode("ModifyRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyRuleInput {

    static func urlPathProvider(_ value: ModifyRuleInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyRuleInput: Swift.Equatable {
    /// The actions.
    public var actions: [ElasticLoadBalancingv2ClientTypes.Action]?
    /// The conditions.
    public var conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]?
    /// The Amazon Resource Name (ARN) of the rule.
    /// This member is required.
    public var ruleArn: Swift.String?

    public init(
        actions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
        conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]? = nil,
        ruleArn: Swift.String? = nil
    )
    {
        self.actions = actions
        self.conditions = conditions
        self.ruleArn = ruleArn
    }
}

extension ModifyRuleOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyRuleOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyRuleResult"]
            var value = ModifyRuleOutput()
            value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ModifyRuleOutput: Swift.Equatable {
    /// Information about the modified rule.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.rules = rules
    }
}

enum ModifyRuleOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "IncompatibleProtocols": return try await IncompatibleProtocolsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidLoadBalancerAction": return try await InvalidLoadBalancerActionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotPermitted": return try await OperationNotPermittedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupAssociationLimit": return try await TargetGroupAssociationLimitException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyActions": return try await TooManyActionsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyRegistrationsForTargetId": return try await TooManyRegistrationsForTargetIdException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargets": return try await TooManyTargetsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyUniqueTargetGroupsPerLoadBalancer": return try await TooManyUniqueTargetGroupsPerLoadBalancerException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "UnsupportedProtocol": return try await UnsupportedProtocolException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyTargetGroupAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case targetGroupArn = "TargetGroupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attributes = attributes {
            if !attributes.isEmpty {
                var attributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attributes"))
                for (index0, targetgroupattribute0) in attributes.enumerated() {
                    try attributesContainer.encode(targetgroupattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var attributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Attributes"))
                try attributesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        try container.encode("ModifyTargetGroupAttributes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyTargetGroupAttributesInput {

    static func urlPathProvider(_ value: ModifyTargetGroupAttributesInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyTargetGroupAttributesInput: Swift.Equatable {
    /// The attributes.
    /// This member is required.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]? = nil,
        targetGroupArn: Swift.String? = nil
    )
    {
        self.attributes = attributes
        self.targetGroupArn = targetGroupArn
    }
}

extension ModifyTargetGroupAttributesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyTargetGroupAttributesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyTargetGroupAttributesResult"]
            var value = ModifyTargetGroupAttributesOutput()
            value.attributes = try reader["Attributes"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ModifyTargetGroupAttributesOutput: Swift.Equatable {
    /// Information about the attributes.
    public var attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]?

    public init(
        attributes: [ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute]? = nil
    )
    {
        self.attributes = attributes
    }
}

enum ModifyTargetGroupAttributesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyTargetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckEnabled = "HealthCheckEnabled"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        case healthyThresholdCount = "HealthyThresholdCount"
        case matcher = "Matcher"
        case targetGroupArn = "TargetGroupArn"
        case unhealthyThresholdCount = "UnhealthyThresholdCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthCheckEnabled = healthCheckEnabled {
            try container.encode(healthCheckEnabled, forKey: ClientRuntime.Key("HealthCheckEnabled"))
        }
        if let healthCheckIntervalSeconds = healthCheckIntervalSeconds {
            try container.encode(healthCheckIntervalSeconds, forKey: ClientRuntime.Key("HealthCheckIntervalSeconds"))
        }
        if let healthCheckPath = healthCheckPath {
            try container.encode(healthCheckPath, forKey: ClientRuntime.Key("HealthCheckPath"))
        }
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: ClientRuntime.Key("HealthCheckPort"))
        }
        if let healthCheckProtocol = healthCheckProtocol {
            try container.encode(healthCheckProtocol, forKey: ClientRuntime.Key("HealthCheckProtocol"))
        }
        if let healthCheckTimeoutSeconds = healthCheckTimeoutSeconds {
            try container.encode(healthCheckTimeoutSeconds, forKey: ClientRuntime.Key("HealthCheckTimeoutSeconds"))
        }
        if let healthyThresholdCount = healthyThresholdCount {
            try container.encode(healthyThresholdCount, forKey: ClientRuntime.Key("HealthyThresholdCount"))
        }
        if let matcher = matcher {
            try container.encode(matcher, forKey: ClientRuntime.Key("Matcher"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let unhealthyThresholdCount = unhealthyThresholdCount {
            try container.encode(unhealthyThresholdCount, forKey: ClientRuntime.Key("UnhealthyThresholdCount"))
        }
        try container.encode("ModifyTargetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyTargetGroupInput {

    static func urlPathProvider(_ value: ModifyTargetGroupInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyTargetGroupInput: Swift.Equatable {
    /// Indicates whether health checks are enabled.
    public var healthCheckEnabled: Swift.Bool?
    /// The approximate amount of time, in seconds, between health checks of an individual target.
    public var healthCheckIntervalSeconds: Swift.Int?
    /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    public var healthCheckPath: Swift.String?
    /// The port the load balancer uses when performing health checks on targets.
    public var healthCheckPort: Swift.String?
    /// The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    public var healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
    /// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
    public var healthCheckTimeoutSeconds: Swift.Int?
    /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
    public var healthyThresholdCount: Swift.Int?
    /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.
    public var matcher: ElasticLoadBalancingv2ClientTypes.Matcher?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The number of consecutive health check failures required before considering the target unhealthy.
    public var unhealthyThresholdCount: Swift.Int?

    public init(
        healthCheckEnabled: Swift.Bool? = nil,
        healthCheckIntervalSeconds: Swift.Int? = nil,
        healthCheckPath: Swift.String? = nil,
        healthCheckPort: Swift.String? = nil,
        healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Swift.Int? = nil,
        healthyThresholdCount: Swift.Int? = nil,
        matcher: ElasticLoadBalancingv2ClientTypes.Matcher? = nil,
        targetGroupArn: Swift.String? = nil,
        unhealthyThresholdCount: Swift.Int? = nil
    )
    {
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.matcher = matcher
        self.targetGroupArn = targetGroupArn
        self.unhealthyThresholdCount = unhealthyThresholdCount
    }
}

extension ModifyTargetGroupOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyTargetGroupOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyTargetGroupResult"]
            var value = ModifyTargetGroupOutput()
            value.targetGroups = try reader["TargetGroups"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TargetGroup.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ModifyTargetGroupOutput: Swift.Equatable {
    /// Information about the modified target group.
    public var targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]?

    public init(
        targetGroups: [ElasticLoadBalancingv2ClientTypes.TargetGroup]? = nil
    )
    {
        self.targetGroups = targetGroups
    }
}

enum ModifyTargetGroupOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ModifyTrustStoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificatesBundleS3Bucket = "CaCertificatesBundleS3Bucket"
        case caCertificatesBundleS3Key = "CaCertificatesBundleS3Key"
        case caCertificatesBundleS3ObjectVersion = "CaCertificatesBundleS3ObjectVersion"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket {
            try container.encode(caCertificatesBundleS3Bucket, forKey: ClientRuntime.Key("CaCertificatesBundleS3Bucket"))
        }
        if let caCertificatesBundleS3Key = caCertificatesBundleS3Key {
            try container.encode(caCertificatesBundleS3Key, forKey: ClientRuntime.Key("CaCertificatesBundleS3Key"))
        }
        if let caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion {
            try container.encode(caCertificatesBundleS3ObjectVersion, forKey: ClientRuntime.Key("CaCertificatesBundleS3ObjectVersion"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("ModifyTrustStore", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyTrustStoreInput {

    static func urlPathProvider(_ value: ModifyTrustStoreInput) -> Swift.String? {
        return "/"
    }
}

public struct ModifyTrustStoreInput: Swift.Equatable {
    /// The Amazon S3 bucket for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Bucket: Swift.String?
    /// The Amazon S3 path for the ca certificates bundle.
    /// This member is required.
    public var caCertificatesBundleS3Key: Swift.String?
    /// The Amazon S3 object version for the ca certificates bundle. If undefined the current version is used.
    public var caCertificatesBundleS3ObjectVersion: Swift.String?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        caCertificatesBundleS3Bucket: Swift.String? = nil,
        caCertificatesBundleS3Key: Swift.String? = nil,
        caCertificatesBundleS3ObjectVersion: Swift.String? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.caCertificatesBundleS3Bucket = caCertificatesBundleS3Bucket
        self.caCertificatesBundleS3Key = caCertificatesBundleS3Key
        self.caCertificatesBundleS3ObjectVersion = caCertificatesBundleS3ObjectVersion
        self.trustStoreArn = trustStoreArn
    }
}

extension ModifyTrustStoreOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ModifyTrustStoreOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ModifyTrustStoreResult"]
            var value = ModifyTrustStoreOutput()
            value.trustStores = try reader["TrustStores"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.TrustStore.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ModifyTrustStoreOutput: Swift.Equatable {
    /// Information about the modified trust store.
    public var trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]?

    public init(
        trustStores: [ElasticLoadBalancingv2ClientTypes.TrustStore]? = nil
    )
    {
        self.trustStores = trustStores
    }
}

enum ModifyTrustStoreOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CaCertificatesBundleNotFound": return try await CaCertificatesBundleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidCaCertificatesBundle": return try await InvalidCaCertificatesBundleException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ignoreClientCertificateExpiry = "IgnoreClientCertificateExpiry"
        case mode = "Mode"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ignoreClientCertificateExpiry = ignoreClientCertificateExpiry {
            try container.encode(ignoreClientCertificateExpiry, forKey: ClientRuntime.Key("IgnoreClientCertificateExpiry"))
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.MutualAuthenticationAttributes()
            value.mode = try reader["Mode"].readIfPresent()
            value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
            value.ignoreClientCertificateExpiry = try reader["IgnoreClientCertificateExpiry"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the mutual authentication attributes of a listener.
    public struct MutualAuthenticationAttributes: Swift.Equatable {
        /// Indicates whether expired client certificates are ignored.
        public var ignoreClientCertificateExpiry: Swift.Bool?
        /// The client certificate handling method. Options are off, passthrough or verify. The default value is off.
        public var mode: Swift.String?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            ignoreClientCertificateExpiry: Swift.Bool? = nil,
            mode: Swift.String? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.ignoreClientCertificateExpiry = ignoreClientCertificateExpiry
            self.mode = mode
            self.trustStoreArn = trustStoreArn
        }
    }

}

extension OperationNotPermittedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OperationNotPermittedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// This operation is not allowed.
public struct OperationNotPermittedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationNotPermitted" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, stringvalue0) in values.enumerated() {
                    try valuesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a path pattern condition.
    public struct PathPatternConditionConfig: Swift.Equatable {
        /// The path patterns to compare against the request URL. The maximum size of each string is 128 characters. The comparison is case sensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If you specify multiple strings, the condition is satisfied if one of them matches the request URL. The path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use [QueryStringConditionConfig].
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension PriorityInUseException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = PriorityInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified priority is in use.
public struct PriorityInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PriorityInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum ProtocolEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case geneve
        case http
        case https
        case tcp
        case tcpUdp
        case tls
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtocolEnum] {
            return [
                .geneve,
                .http,
                .https,
                .tcp,
                .tcpUdp,
                .tls,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .geneve: return "GENEVE"
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case .tcp: return "TCP"
            case .tcpUdp: return "TCP_UDP"
            case .tls: return "TLS"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProtocolEnum(rawValue: rawValue) ?? ProtocolEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, querystringkeyvaluepair0) in values.enumerated() {
                    try valuesContainer.encode(querystringkeyvaluepair0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a query string condition. The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.
    public struct QueryStringConditionConfig: Swift.Equatable {
        /// The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in Values using a '\' character. If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.
        public var values: [ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair]?

        public init(
            values: [ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.QueryStringKeyValuePair()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a key/value pair.
    public struct QueryStringKeyValuePair: Swift.Equatable {
        /// The key. You can omit the key.
        public var key: Swift.String?
        /// The value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.RedirectActionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case host = "Host"
        case path = "Path"
        case port = "Port"
        case `protocol` = "Protocol"
        case query = "Query"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let host = host {
            try container.encode(host, forKey: ClientRuntime.Key("Host"))
        }
        if let path = path {
            try container.encode(path, forKey: ClientRuntime.Key("Path"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let query = query {
            try container.encode(query, forKey: ClientRuntime.Key("Query"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.RedirectActionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.RedirectActionConfig()
            value.`protocol` = try reader["Protocol"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.host = try reader["Host"].readIfPresent()
            value.path = try reader["Path"].readIfPresent()
            value.query = try reader["Query"].readIfPresent()
            value.statusCode = try reader["StatusCode"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a redirect action. A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values. You can reuse URI components using the following reserved keywords:
    ///
    /// * #{protocol}
    ///
    /// * #{host}
    ///
    /// * #{port}
    ///
    /// * #{path} (the leading "/" is removed)
    ///
    /// * #{query}
    ///
    ///
    /// For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&value=xyz".
    public struct RedirectActionConfig: Swift.Equatable {
        /// The hostname. This component is not percent-encoded. The hostname can contain #{host}.
        public var host: Swift.String?
        /// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
        public var path: Swift.String?
        /// The port. You can specify a value from 1 to 65535 or #{port}.
        public var port: Swift.String?
        /// The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
        public var `protocol`: Swift.String?
        /// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
        public var query: Swift.String?
        /// The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
        /// This member is required.
        public var statusCode: ElasticLoadBalancingv2ClientTypes.RedirectActionStatusCodeEnum?

        public init(
            host: Swift.String? = nil,
            path: Swift.String? = nil,
            port: Swift.String? = nil,
            `protocol`: Swift.String? = nil,
            query: Swift.String? = nil,
            statusCode: ElasticLoadBalancingv2ClientTypes.RedirectActionStatusCodeEnum? = nil
        )
        {
            self.host = host
            self.path = path
            self.port = port
            self.`protocol` = `protocol`
            self.query = query
            self.statusCode = statusCode
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum RedirectActionStatusCodeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http301
        case http302
        case sdkUnknown(Swift.String)

        public static var allCases: [RedirectActionStatusCodeEnum] {
            return [
                .http301,
                .http302,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http301: return "HTTP_301"
            case .http302: return "HTTP_302"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RedirectActionStatusCodeEnum(rawValue: rawValue) ?? RedirectActionStatusCodeEnum.sdkUnknown(rawValue)
        }
    }
}

extension RegisterTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupArn = "TargetGroupArn"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let targets = targets {
            if !targets.isEmpty {
                var targetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Targets"))
                for (index0, targetdescription0) in targets.enumerated() {
                    try targetsContainer.encode(targetdescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var targetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Targets"))
                try targetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RegisterTargets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RegisterTargetsInput {

    static func urlPathProvider(_ value: RegisterTargetsInput) -> Swift.String? {
        return "/"
    }
}

public struct RegisterTargetsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The targets.
    /// This member is required.
    public var targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]?

    public init(
        targetGroupArn: Swift.String? = nil,
        targets: [ElasticLoadBalancingv2ClientTypes.TargetDescription]? = nil
    )
    {
        self.targetGroupArn = targetGroupArn
        self.targets = targets
    }
}

extension RegisterTargetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RegisterTargetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RegisterTargetsOutput()
        }
    }
}

public struct RegisterTargetsOutput: Swift.Equatable {

    public init() { }
}

enum RegisterTargetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidTarget": return try await InvalidTargetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyRegistrationsForTargetId": return try await TooManyRegistrationsForTargetIdException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTargets": return try await TooManyTargetsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveListenerCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates = "Certificates"
        case listenerArn = "ListenerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificates = certificates {
            if !certificates.isEmpty {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                for (index0, certificate0) in certificates.enumerated() {
                    try certificatesContainer.encode(certificate0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var certificatesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Certificates"))
                try certificatesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let listenerArn = listenerArn {
            try container.encode(listenerArn, forKey: ClientRuntime.Key("ListenerArn"))
        }
        try container.encode("RemoveListenerCertificates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveListenerCertificatesInput {

    static func urlPathProvider(_ value: RemoveListenerCertificatesInput) -> Swift.String? {
        return "/"
    }
}

public struct RemoveListenerCertificatesInput: Swift.Equatable {
    /// The certificate to remove. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
    /// This member is required.
    public var certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]?
    /// The Amazon Resource Name (ARN) of the listener.
    /// This member is required.
    public var listenerArn: Swift.String?

    public init(
        certificates: [ElasticLoadBalancingv2ClientTypes.Certificate]? = nil,
        listenerArn: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.listenerArn = listenerArn
    }
}

extension RemoveListenerCertificatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveListenerCertificatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RemoveListenerCertificatesOutput()
        }
    }
}

public struct RemoveListenerCertificatesOutput: Swift.Equatable {

    public init() { }
}

enum RemoveListenerCertificatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotPermitted": return try await OperationNotPermittedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns = "ResourceArns"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArns = resourceArns {
            if !resourceArns.isEmpty {
                var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
                for (index0, resourcearn0) in resourceArns.enumerated() {
                    try resourceArnsContainer.encode(resourcearn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceArns"))
                try resourceArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, tagkey0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(tagkey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("RemoveTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveTagsInput {

    static func urlPathProvider(_ value: RemoveTagsInput) -> Swift.String? {
        return "/"
    }
}

public struct RemoveTagsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArns: [Swift.String]?
    /// The tag keys for the tags to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArns: [Swift.String]? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
        self.tagKeys = tagKeys
    }
}

extension RemoveTagsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveTagsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RemoveTagsOutput()
        }
    }
}

public struct RemoveTagsOutput: Swift.Equatable {

    public init() { }
}

enum RemoveTagsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ListenerNotFound": return try await ListenerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TargetGroupNotFound": return try await TargetGroupNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TooManyTags": return try await TooManyTagsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RemoveTrustStoreRevocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case revocationIds = "RevocationIds"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let revocationIds = revocationIds {
            if !revocationIds.isEmpty {
                var revocationIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevocationIds"))
                for (index0, revocationid0) in revocationIds.enumerated() {
                    try revocationIdsContainer.encode(revocationid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var revocationIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevocationIds"))
                try revocationIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
        try container.encode("RemoveTrustStoreRevocations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveTrustStoreRevocationsInput {

    static func urlPathProvider(_ value: RemoveTrustStoreRevocationsInput) -> Swift.String? {
        return "/"
    }
}

public struct RemoveTrustStoreRevocationsInput: Swift.Equatable {
    /// The revocation IDs of the revocation files you want to remove.
    /// This member is required.
    public var revocationIds: [Swift.Int]?
    /// The Amazon Resource Name (ARN) of the trust store.
    /// This member is required.
    public var trustStoreArn: Swift.String?

    public init(
        revocationIds: [Swift.Int]? = nil,
        trustStoreArn: Swift.String? = nil
    )
    {
        self.revocationIds = revocationIds
        self.trustStoreArn = trustStoreArn
    }
}

extension RemoveTrustStoreRevocationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RemoveTrustStoreRevocationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RemoveTrustStoreRevocationsOutput()
        }
    }
}

public struct RemoveTrustStoreRevocationsOutput: Swift.Equatable {

    public init() { }
}

enum RemoveTrustStoreRevocationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "RevocationIdNotFound": return try await RevocationIdNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TrustStoreNotFound": return try await TrustStoreNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ResourceInUseException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResourceInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A specified resource is in use.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.RevocationContent: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case revocationType = "RevocationType"
        case s3Bucket = "S3Bucket"
        case s3Key = "S3Key"
        case s3ObjectVersion = "S3ObjectVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let revocationType = revocationType {
            try container.encode(revocationType, forKey: ClientRuntime.Key("RevocationType"))
        }
        if let s3Bucket = s3Bucket {
            try container.encode(s3Bucket, forKey: ClientRuntime.Key("S3Bucket"))
        }
        if let s3Key = s3Key {
            try container.encode(s3Key, forKey: ClientRuntime.Key("S3Key"))
        }
        if let s3ObjectVersion = s3ObjectVersion {
            try container.encode(s3ObjectVersion, forKey: ClientRuntime.Key("S3ObjectVersion"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.RevocationContent, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.RevocationContent()
            value.s3Bucket = try reader["S3Bucket"].readIfPresent()
            value.s3Key = try reader["S3Key"].readIfPresent()
            value.s3ObjectVersion = try reader["S3ObjectVersion"].readIfPresent()
            value.revocationType = try reader["RevocationType"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a revocation file.
    public struct RevocationContent: Swift.Equatable {
        /// The type of revocation file.
        public var revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType?
        /// The Amazon S3 bucket for the revocation file.
        public var s3Bucket: Swift.String?
        /// The Amazon S3 path for the revocation file.
        public var s3Key: Swift.String?
        /// The Amazon S3 object version of the revocation file.
        public var s3ObjectVersion: Swift.String?

        public init(
            revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType? = nil,
            s3Bucket: Swift.String? = nil,
            s3Key: Swift.String? = nil,
            s3ObjectVersion: Swift.String? = nil
        )
        {
            self.revocationType = revocationType
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
            self.s3ObjectVersion = s3ObjectVersion
        }
    }

}

extension RevocationContentNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RevocationContentNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified revocation file does not exist.
public struct RevocationContentNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RevocationContentNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RevocationIdNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RevocationIdNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified revocation ID does not exist.
public struct RevocationIdNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RevocationIdNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum RevocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case crl
        case sdkUnknown(Swift.String)

        public static var allCases: [RevocationType] {
            return [
                .crl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .crl: return "CRL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RevocationType(rawValue: rawValue) ?? RevocationType.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.Rule: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case conditions = "Conditions"
        case isDefault = "IsDefault"
        case priority = "Priority"
        case ruleArn = "RuleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            if !actions.isEmpty {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                for (index0, action0) in actions.enumerated() {
                    try actionsContainer.encode(action0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
                try actionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let conditions = conditions {
            if !conditions.isEmpty {
                var conditionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Conditions"))
                for (index0, rulecondition0) in conditions.enumerated() {
                    try conditionsContainer.encode(rulecondition0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var conditionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Conditions"))
                try conditionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let isDefault = isDefault {
            try container.encode(isDefault, forKey: ClientRuntime.Key("IsDefault"))
        }
        if let priority = priority {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
        if let ruleArn = ruleArn {
            try container.encode(ruleArn, forKey: ClientRuntime.Key("RuleArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Rule, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Rule()
            value.ruleArn = try reader["RuleArn"].readIfPresent()
            value.priority = try reader["Priority"].readIfPresent()
            value.conditions = try reader["Conditions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.RuleCondition.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.actions = try reader["Actions"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Action.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.isDefault = try reader["IsDefault"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a rule.
    public struct Rule: Swift.Equatable {
        /// The actions. Each rule must include exactly one of the following types of actions: forward, redirect, or fixed-response, and it must be the last action to be performed.
        public var actions: [ElasticLoadBalancingv2ClientTypes.Action]?
        /// The conditions. Each rule can include zero or one of the following conditions: http-request-method, host-header, path-pattern, and source-ip, and zero or more of the following conditions: http-header and query-string.
        public var conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]?
        /// Indicates whether this is the default rule.
        public var isDefault: Swift.Bool?
        /// The priority.
        public var priority: Swift.String?
        /// The Amazon Resource Name (ARN) of the rule.
        public var ruleArn: Swift.String?

        public init(
            actions: [ElasticLoadBalancingv2ClientTypes.Action]? = nil,
            conditions: [ElasticLoadBalancingv2ClientTypes.RuleCondition]? = nil,
            isDefault: Swift.Bool? = nil,
            priority: Swift.String? = nil,
            ruleArn: Swift.String? = nil
        )
        {
            self.actions = actions
            self.conditions = conditions
            self.isDefault = isDefault
            self.priority = priority
            self.ruleArn = ruleArn
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.RuleCondition: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field = "Field"
        case hostHeaderConfig = "HostHeaderConfig"
        case httpHeaderConfig = "HttpHeaderConfig"
        case httpRequestMethodConfig = "HttpRequestMethodConfig"
        case pathPatternConfig = "PathPatternConfig"
        case queryStringConfig = "QueryStringConfig"
        case sourceIpConfig = "SourceIpConfig"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let field = field {
            try container.encode(field, forKey: ClientRuntime.Key("Field"))
        }
        if let hostHeaderConfig = hostHeaderConfig {
            try container.encode(hostHeaderConfig, forKey: ClientRuntime.Key("HostHeaderConfig"))
        }
        if let httpHeaderConfig = httpHeaderConfig {
            try container.encode(httpHeaderConfig, forKey: ClientRuntime.Key("HttpHeaderConfig"))
        }
        if let httpRequestMethodConfig = httpRequestMethodConfig {
            try container.encode(httpRequestMethodConfig, forKey: ClientRuntime.Key("HttpRequestMethodConfig"))
        }
        if let pathPatternConfig = pathPatternConfig {
            try container.encode(pathPatternConfig, forKey: ClientRuntime.Key("PathPatternConfig"))
        }
        if let queryStringConfig = queryStringConfig {
            try container.encode(queryStringConfig, forKey: ClientRuntime.Key("QueryStringConfig"))
        }
        if let sourceIpConfig = sourceIpConfig {
            try container.encode(sourceIpConfig, forKey: ClientRuntime.Key("SourceIpConfig"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, stringvalue0) in values.enumerated() {
                    try valuesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.RuleCondition, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.RuleCondition()
            value.field = try reader["Field"].readIfPresent()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.hostHeaderConfig = try reader["HostHeaderConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig.readingClosure)
            value.pathPatternConfig = try reader["PathPatternConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig.readingClosure)
            value.httpHeaderConfig = try reader["HttpHeaderConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig.readingClosure)
            value.queryStringConfig = try reader["QueryStringConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig.readingClosure)
            value.httpRequestMethodConfig = try reader["HttpRequestMethodConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig.readingClosure)
            value.sourceIpConfig = try reader["SourceIpConfig"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig.readingClosure)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a condition for a rule. Each rule can optionally include up to one of each of the following conditions: http-request-method, host-header, path-pattern, and source-ip. Each rule can also optionally include one or more of each of the following conditions: http-header and query-string. Note that the value for a condition cannot be empty. For more information, see [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html).
    public struct RuleCondition: Swift.Equatable {
        /// The field in the HTTP request. The following are the possible values:
        ///
        /// * http-header
        ///
        /// * http-request-method
        ///
        /// * host-header
        ///
        /// * path-pattern
        ///
        /// * query-string
        ///
        /// * source-ip
        public var field: Swift.String?
        /// Information for a host header condition. Specify only when Field is host-header.
        public var hostHeaderConfig: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig?
        /// Information for an HTTP header condition. Specify only when Field is http-header.
        public var httpHeaderConfig: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig?
        /// Information for an HTTP method condition. Specify only when Field is http-request-method.
        public var httpRequestMethodConfig: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig?
        /// Information for a path pattern condition. Specify only when Field is path-pattern.
        public var pathPatternConfig: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig?
        /// Information for a query string condition. Specify only when Field is query-string.
        public var queryStringConfig: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig?
        /// Information for a source IP condition. Specify only when Field is source-ip.
        public var sourceIpConfig: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig?
        /// The condition value. Specify only when Field is host-header or path-pattern. Alternatively, to specify multiple host names or multiple path patterns, use HostHeaderConfig or PathPatternConfig. If Field is host-header and you are not using HostHeaderConfig, you can specify a single host name (for example, my.example.com) in Values. A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.
        ///
        /// * A-Z, a-z, 0-9
        ///
        /// * - .
        ///
        /// * * (matches 0 or more characters)
        ///
        /// * ? (matches exactly 1 character)
        ///
        ///
        /// If Field is path-pattern and you are not using PathPatternConfig, you can specify a single path pattern (for example, /img/*) in Values. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.
        ///
        /// * A-Z, a-z, 0-9
        ///
        /// * _ - . $ / ~ " ' @ : +
        ///
        /// * & (using &)
        ///
        /// * * (matches 0 or more characters)
        ///
        /// * ? (matches exactly 1 character)
        public var values: [Swift.String]?

        public init(
            field: Swift.String? = nil,
            hostHeaderConfig: ElasticLoadBalancingv2ClientTypes.HostHeaderConditionConfig? = nil,
            httpHeaderConfig: ElasticLoadBalancingv2ClientTypes.HttpHeaderConditionConfig? = nil,
            httpRequestMethodConfig: ElasticLoadBalancingv2ClientTypes.HttpRequestMethodConditionConfig? = nil,
            pathPatternConfig: ElasticLoadBalancingv2ClientTypes.PathPatternConditionConfig? = nil,
            queryStringConfig: ElasticLoadBalancingv2ClientTypes.QueryStringConditionConfig? = nil,
            sourceIpConfig: ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.field = field
            self.hostHeaderConfig = hostHeaderConfig
            self.httpHeaderConfig = httpHeaderConfig
            self.httpRequestMethodConfig = httpRequestMethodConfig
            self.pathPatternConfig = pathPatternConfig
            self.queryStringConfig = queryStringConfig
            self.sourceIpConfig = sourceIpConfig
            self.values = values
        }
    }

}

extension RuleNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = RuleNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified rule does not exist.
public struct RuleNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RuleNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.RulePriorityPair: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case priority = "Priority"
        case ruleArn = "RuleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let priority = priority {
            try container.encode(priority, forKey: ClientRuntime.Key("Priority"))
        }
        if let ruleArn = ruleArn {
            try container.encode(ruleArn, forKey: ClientRuntime.Key("RuleArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.RulePriorityPair, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.RulePriorityPair()
            value.ruleArn = try reader["RuleArn"].readIfPresent()
            value.priority = try reader["Priority"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the priorities for the rules for a listener.
    public struct RulePriorityPair: Swift.Equatable {
        /// The rule priority.
        public var priority: Swift.Int?
        /// The Amazon Resource Name (ARN) of the rule.
        public var ruleArn: Swift.String?

        public init(
            priority: Swift.Int? = nil,
            ruleArn: Swift.String? = nil
        )
        {
            self.priority = priority
            self.ruleArn = ruleArn
        }
    }

}

extension SSLPolicyNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SSLPolicyNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified SSL policy does not exist.
public struct SSLPolicyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SSLPolicyNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SetIpAddressTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressType = "IpAddressType"
        case loadBalancerArn = "LoadBalancerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        try container.encode("SetIpAddressType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetIpAddressTypeInput {

    static func urlPathProvider(_ value: SetIpAddressTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct SetIpAddressTypeInput: Swift.Equatable {
    /// The IP address type. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). You can’t specify dualstack for a load balancer with a UDP or TCP_UDP listener.
    /// This member is required.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?

    public init(
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
        loadBalancerArn: Swift.String? = nil
    )
    {
        self.ipAddressType = ipAddressType
        self.loadBalancerArn = loadBalancerArn
    }
}

extension SetIpAddressTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetIpAddressTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SetIpAddressTypeResult"]
            var value = SetIpAddressTypeOutput()
            value.ipAddressType = try reader["IpAddressType"].readIfPresent()
            return value
        }
    }
}

public struct SetIpAddressTypeOutput: Swift.Equatable {
    /// The IP address type.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?

    public init(
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil
    )
    {
        self.ipAddressType = ipAddressType
    }
}

enum SetIpAddressTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetRulePrioritiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rulePriorities = "RulePriorities"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let rulePriorities = rulePriorities {
            if !rulePriorities.isEmpty {
                var rulePrioritiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RulePriorities"))
                for (index0, ruleprioritypair0) in rulePriorities.enumerated() {
                    try rulePrioritiesContainer.encode(ruleprioritypair0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var rulePrioritiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RulePriorities"))
                try rulePrioritiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SetRulePriorities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetRulePrioritiesInput {

    static func urlPathProvider(_ value: SetRulePrioritiesInput) -> Swift.String? {
        return "/"
    }
}

public struct SetRulePrioritiesInput: Swift.Equatable {
    /// The rule priorities.
    /// This member is required.
    public var rulePriorities: [ElasticLoadBalancingv2ClientTypes.RulePriorityPair]?

    public init(
        rulePriorities: [ElasticLoadBalancingv2ClientTypes.RulePriorityPair]? = nil
    )
    {
        self.rulePriorities = rulePriorities
    }
}

extension SetRulePrioritiesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetRulePrioritiesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SetRulePrioritiesResult"]
            var value = SetRulePrioritiesOutput()
            value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Rule.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct SetRulePrioritiesOutput: Swift.Equatable {
    /// Information about the rules.
    public var rules: [ElasticLoadBalancingv2ClientTypes.Rule]?

    public init(
        rules: [ElasticLoadBalancingv2ClientTypes.Rule]? = nil
    )
    {
        self.rules = rules
    }
}

enum SetRulePrioritiesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OperationNotPermitted": return try await OperationNotPermittedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "PriorityInUse": return try await PriorityInUseException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "RuleNotFound": return try await RuleNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetSecurityGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"
        case loadBalancerArn = "LoadBalancerArn"
        case securityGroups = "SecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic {
            try container.encode(enforceSecurityGroupInboundRulesOnPrivateLinkTraffic, forKey: ClientRuntime.Key("EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"))
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let securityGroups = securityGroups {
            if !securityGroups.isEmpty {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                for (index0, securitygroupid0) in securityGroups.enumerated() {
                    try securityGroupsContainer.encode(securitygroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
                try securityGroupsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SetSecurityGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetSecurityGroupsInput {

    static func urlPathProvider(_ value: SetSecurityGroupsInput) -> Swift.String? {
        return "/"
    }
}

public struct SetSecurityGroupsInput: Swift.Equatable {
    /// Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through Amazon Web Services PrivateLink. The default is on.
    public var enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?
    /// The IDs of the security groups.
    /// This member is required.
    public var securityGroups: [Swift.String]?

    public init(
        enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum? = nil,
        loadBalancerArn: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil
    )
    {
        self.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
        self.loadBalancerArn = loadBalancerArn
        self.securityGroups = securityGroups
    }
}

extension SetSecurityGroupsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetSecurityGroupsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SetSecurityGroupsResult"]
            var value = SetSecurityGroupsOutput()
            value.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = try reader["EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"].readIfPresent()
            value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct SetSecurityGroupsOutput: Swift.Equatable {
    /// Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through Amazon Web Services PrivateLink.
    public var enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum?
    /// The IDs of the security groups associated with the load balancer.
    public var securityGroupIds: [Swift.String]?

    public init(
        enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ElasticLoadBalancingv2ClientTypes.EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum? = nil,
        securityGroupIds: [Swift.String]? = nil
    )
    {
        self.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
        self.securityGroupIds = securityGroupIds
    }
}

enum SetSecurityGroupsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSecurityGroup": return try await InvalidSecurityGroupException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetSubnetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressType = "IpAddressType"
        case loadBalancerArn = "LoadBalancerArn"
        case subnetMappings = "SubnetMappings"
        case subnets = "Subnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let loadBalancerArn = loadBalancerArn {
            try container.encode(loadBalancerArn, forKey: ClientRuntime.Key("LoadBalancerArn"))
        }
        if let subnetMappings = subnetMappings {
            if !subnetMappings.isEmpty {
                var subnetMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetMappings"))
                for (index0, subnetmapping0) in subnetMappings.enumerated() {
                    try subnetMappingsContainer.encode(subnetmapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetMappings"))
                try subnetMappingsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let subnets = subnets {
            if !subnets.isEmpty {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                for (index0, subnetid0) in subnets.enumerated() {
                    try subnetsContainer.encode(subnetid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
                try subnetsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("SetSubnets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetSubnetsInput {

    static func urlPathProvider(_ value: SetSubnetsInput) -> Swift.String? {
        return "/"
    }
}

public struct SetSubnetsInput: Swift.Equatable {
    /// [Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). You can’t specify dualstack for a load balancer with a UDP or TCP_UDP listener. [Gateway Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?
    /// The Amazon Resource Name (ARN) of the load balancer.
    /// This member is required.
    public var loadBalancerArn: Swift.String?
    /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    public var subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]?
    /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    public var subnets: [Swift.String]?

    public init(
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil,
        loadBalancerArn: Swift.String? = nil,
        subnetMappings: [ElasticLoadBalancingv2ClientTypes.SubnetMapping]? = nil,
        subnets: [Swift.String]? = nil
    )
    {
        self.ipAddressType = ipAddressType
        self.loadBalancerArn = loadBalancerArn
        self.subnetMappings = subnetMappings
        self.subnets = subnets
    }
}

extension SetSubnetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetSubnetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SetSubnetsResult"]
            var value = SetSubnetsOutput()
            value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.AvailabilityZone.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.ipAddressType = try reader["IpAddressType"].readIfPresent()
            return value
        }
    }
}

public struct SetSubnetsOutput: Swift.Equatable {
    /// Information about the subnets.
    public var availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]?
    /// [Network Load Balancers] The IP address type. [Gateway Load Balancers] The IP address type.
    public var ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType?

    public init(
        availabilityZones: [ElasticLoadBalancingv2ClientTypes.AvailabilityZone]? = nil,
        ipAddressType: ElasticLoadBalancingv2ClientTypes.IpAddressType? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.ipAddressType = ipAddressType
    }
}

enum SetSubnetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AllocationIdNotFound": return try await AllocationIdNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "AvailabilityZoneNotSupported": return try await AvailabilityZoneNotSupportedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidConfigurationRequest": return try await InvalidConfigurationRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidSubnet": return try await InvalidSubnetException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LoadBalancerNotFound": return try await LoadBalancerNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "SubnetNotFound": return try await SubnetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, stringvalue0) in values.enumerated() {
                    try valuesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.SourceIpConditionConfig()
            value.values = try reader["Values"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a source IP condition. You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.
    public struct SourceIpConditionConfig: Swift.Equatable {
        /// The source IP addresses, in CIDR format. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. If you specify multiple addresses, the condition is satisfied if the source IP address of the request matches one of the CIDR blocks. This condition is not satisfied by the addresses in the X-Forwarded-For header. To search for addresses in the X-Forwarded-For header, use [HttpHeaderConditionConfig]. The total number of values must be less than, or equal to five.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.SslPolicy: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphers = "Ciphers"
        case name = "Name"
        case sslProtocols = "SslProtocols"
        case supportedLoadBalancerTypes = "SupportedLoadBalancerTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ciphers = ciphers {
            if !ciphers.isEmpty {
                var ciphersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ciphers"))
                for (index0, cipher0) in ciphers.enumerated() {
                    try ciphersContainer.encode(cipher0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ciphersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Ciphers"))
                try ciphersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let sslProtocols = sslProtocols {
            if !sslProtocols.isEmpty {
                var sslProtocolsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SslProtocols"))
                for (index0, sslprotocol0) in sslProtocols.enumerated() {
                    try sslProtocolsContainer.encode(sslprotocol0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var sslProtocolsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SslProtocols"))
                try sslProtocolsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let supportedLoadBalancerTypes = supportedLoadBalancerTypes {
            if !supportedLoadBalancerTypes.isEmpty {
                var supportedLoadBalancerTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedLoadBalancerTypes"))
                for (index0, stringvalue0) in supportedLoadBalancerTypes.enumerated() {
                    try supportedLoadBalancerTypesContainer.encode(stringvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedLoadBalancerTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedLoadBalancerTypes"))
                try supportedLoadBalancerTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.SslPolicy, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.SslPolicy()
            value.sslProtocols = try reader["SslProtocols"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.ciphers = try reader["Ciphers"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Cipher.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.name = try reader["Name"].readIfPresent()
            value.supportedLoadBalancerTypes = try reader["SupportedLoadBalancerTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a policy used for SSL negotiation.
    public struct SslPolicy: Swift.Equatable {
        /// The ciphers.
        public var ciphers: [ElasticLoadBalancingv2ClientTypes.Cipher]?
        /// The name of the policy.
        public var name: Swift.String?
        /// The protocols.
        public var sslProtocols: [Swift.String]?
        /// The supported load balancers.
        public var supportedLoadBalancerTypes: [Swift.String]?

        public init(
            ciphers: [ElasticLoadBalancingv2ClientTypes.Cipher]? = nil,
            name: Swift.String? = nil,
            sslProtocols: [Swift.String]? = nil,
            supportedLoadBalancerTypes: [Swift.String]? = nil
        )
        {
            self.ciphers = ciphers
            self.name = name
            self.sslProtocols = sslProtocols
            self.supportedLoadBalancerTypes = supportedLoadBalancerTypes
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.SubnetMapping: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationId = "AllocationId"
        case ipv6Address = "IPv6Address"
        case privateIPv4Address = "PrivateIPv4Address"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allocationId = allocationId {
            try container.encode(allocationId, forKey: ClientRuntime.Key("AllocationId"))
        }
        if let ipv6Address = ipv6Address {
            try container.encode(ipv6Address, forKey: ClientRuntime.Key("IPv6Address"))
        }
        if let privateIPv4Address = privateIPv4Address {
            try container.encode(privateIPv4Address, forKey: ClientRuntime.Key("PrivateIPv4Address"))
        }
        if let subnetId = subnetId {
            try container.encode(subnetId, forKey: ClientRuntime.Key("SubnetId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.SubnetMapping, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.SubnetMapping()
            value.subnetId = try reader["SubnetId"].readIfPresent()
            value.allocationId = try reader["AllocationId"].readIfPresent()
            value.privateIPv4Address = try reader["PrivateIPv4Address"].readIfPresent()
            value.ipv6Address = try reader["IPv6Address"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a subnet mapping.
    public struct SubnetMapping: Swift.Equatable {
        /// [Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.
        public var allocationId: Swift.String?
        /// [Network Load Balancers] The IPv6 address.
        public var ipv6Address: Swift.String?
        /// [Network Load Balancers] The private IPv4 address for an internal load balancer.
        public var privateIPv4Address: Swift.String?
        /// The ID of the subnet.
        public var subnetId: Swift.String?

        public init(
            allocationId: Swift.String? = nil,
            ipv6Address: Swift.String? = nil,
            privateIPv4Address: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.allocationId = allocationId
            self.ipv6Address = ipv6Address
            self.privateIPv4Address = privateIPv4Address
            self.subnetId = subnetId
        }
    }

}

extension SubnetNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = SubnetNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified subnet does not exist.
public struct SubnetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SubnetNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.Tag: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.Tag, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.Tag()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a tag.
    public struct Tag: Swift.Equatable {
        /// The key of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TagDescription: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TagDescription, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TagDescription()
            value.resourceArn = try reader["ResourceArn"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ElasticLoadBalancingv2ClientTypes.Tag.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// The tags associated with a resource.
    public struct TagDescription: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceArn: Swift.String?
        /// Information about the tags.
        public var tags: [ElasticLoadBalancingv2ClientTypes.Tag]?

        public init(
            resourceArn: Swift.String? = nil,
            tags: [ElasticLoadBalancingv2ClientTypes.Tag]? = nil
        )
        {
            self.resourceArn = resourceArn
            self.tags = tags
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TargetDescription: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case id = "Id"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetDescription, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetDescription()
            value.id = try reader["Id"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a target.
    public struct TargetDescription: Swift.Equatable {
        /// An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer. For Application Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is off. Otherwise the parameter is ignored and treated as all. This parameter is not supported if the target type of the target group is instance or alb. If the target type is ip and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required. For Application Load Balancer target groups with cross-zone load balancing off, if the target type is ip and the IP address is outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group. If the target type is lambda, this parameter is optional and the only supported value is all.
        public var availabilityZone: Swift.String?
        /// The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target.
        /// This member is required.
        public var id: Swift.String?
        /// The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. This parameter is not used if the target is a Lambda function.
        public var port: Swift.Int?

        public init(
            availabilityZone: Swift.String? = nil,
            id: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.id = id
            self.port = port
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TargetGroup: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckEnabled = "HealthCheckEnabled"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        case healthyThresholdCount = "HealthyThresholdCount"
        case ipAddressType = "IpAddressType"
        case loadBalancerArns = "LoadBalancerArns"
        case matcher = "Matcher"
        case port = "Port"
        case `protocol` = "Protocol"
        case protocolVersion = "ProtocolVersion"
        case targetGroupArn = "TargetGroupArn"
        case targetGroupName = "TargetGroupName"
        case targetType = "TargetType"
        case unhealthyThresholdCount = "UnhealthyThresholdCount"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthCheckEnabled = healthCheckEnabled {
            try container.encode(healthCheckEnabled, forKey: ClientRuntime.Key("HealthCheckEnabled"))
        }
        if let healthCheckIntervalSeconds = healthCheckIntervalSeconds {
            try container.encode(healthCheckIntervalSeconds, forKey: ClientRuntime.Key("HealthCheckIntervalSeconds"))
        }
        if let healthCheckPath = healthCheckPath {
            try container.encode(healthCheckPath, forKey: ClientRuntime.Key("HealthCheckPath"))
        }
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: ClientRuntime.Key("HealthCheckPort"))
        }
        if let healthCheckProtocol = healthCheckProtocol {
            try container.encode(healthCheckProtocol, forKey: ClientRuntime.Key("HealthCheckProtocol"))
        }
        if let healthCheckTimeoutSeconds = healthCheckTimeoutSeconds {
            try container.encode(healthCheckTimeoutSeconds, forKey: ClientRuntime.Key("HealthCheckTimeoutSeconds"))
        }
        if let healthyThresholdCount = healthyThresholdCount {
            try container.encode(healthyThresholdCount, forKey: ClientRuntime.Key("HealthyThresholdCount"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let loadBalancerArns = loadBalancerArns {
            if !loadBalancerArns.isEmpty {
                var loadBalancerArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerArns"))
                for (index0, loadbalancerarn0) in loadBalancerArns.enumerated() {
                    try loadBalancerArnsContainer.encode(loadbalancerarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var loadBalancerArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerArns"))
                try loadBalancerArnsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let matcher = matcher {
            try container.encode(matcher, forKey: ClientRuntime.Key("Matcher"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let protocolVersion = protocolVersion {
            try container.encode(protocolVersion, forKey: ClientRuntime.Key("ProtocolVersion"))
        }
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let targetGroupName = targetGroupName {
            try container.encode(targetGroupName, forKey: ClientRuntime.Key("TargetGroupName"))
        }
        if let targetType = targetType {
            try container.encode(targetType, forKey: ClientRuntime.Key("TargetType"))
        }
        if let unhealthyThresholdCount = unhealthyThresholdCount {
            try container.encode(unhealthyThresholdCount, forKey: ClientRuntime.Key("UnhealthyThresholdCount"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetGroup, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetGroup()
            value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
            value.targetGroupName = try reader["TargetGroupName"].readIfPresent()
            value.`protocol` = try reader["Protocol"].readIfPresent()
            value.port = try reader["Port"].readIfPresent()
            value.vpcId = try reader["VpcId"].readIfPresent()
            value.healthCheckProtocol = try reader["HealthCheckProtocol"].readIfPresent()
            value.healthCheckPort = try reader["HealthCheckPort"].readIfPresent()
            value.healthCheckEnabled = try reader["HealthCheckEnabled"].readIfPresent()
            value.healthCheckIntervalSeconds = try reader["HealthCheckIntervalSeconds"].readIfPresent()
            value.healthCheckTimeoutSeconds = try reader["HealthCheckTimeoutSeconds"].readIfPresent()
            value.healthyThresholdCount = try reader["HealthyThresholdCount"].readIfPresent()
            value.unhealthyThresholdCount = try reader["UnhealthyThresholdCount"].readIfPresent()
            value.healthCheckPath = try reader["HealthCheckPath"].readIfPresent()
            value.matcher = try reader["Matcher"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.Matcher.readingClosure)
            value.loadBalancerArns = try reader["LoadBalancerArns"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.targetType = try reader["TargetType"].readIfPresent()
            value.protocolVersion = try reader["ProtocolVersion"].readIfPresent()
            value.ipAddressType = try reader["IpAddressType"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a target group.
    public struct TargetGroup: Swift.Equatable {
        /// Indicates whether health checks are enabled.
        public var healthCheckEnabled: Swift.Bool?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public var healthCheckIntervalSeconds: Swift.Int?
        /// The destination for health checks on the targets.
        public var healthCheckPath: Swift.String?
        /// The port to use to connect with the target.
        public var healthCheckPort: Swift.String?
        /// The protocol to use to connect with the target. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
        public var healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
        /// The amount of time, in seconds, during which no response means a failed health check.
        public var healthCheckTimeoutSeconds: Swift.Int?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public var healthyThresholdCount: Swift.Int?
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. This is an optional parameter. If not specified, the IP address type defaults to ipv4.
        public var ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum?
        /// The Amazon Resource Name (ARN) of the load balancer that routes traffic to this target group. You can use each target group with only one load balancer.
        public var loadBalancerArns: [Swift.String]?
        /// The HTTP or gRPC codes to use when checking for a successful response from a target.
        public var matcher: ElasticLoadBalancingv2ClientTypes.Matcher?
        /// The port on which the targets are listening. This parameter is not used if the target is a Lambda function.
        public var port: Swift.Int?
        /// The protocol to use for routing traffic to the targets.
        public var `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum?
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        public var protocolVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the target group.
        public var targetGroupArn: Swift.String?
        /// The name of the target group.
        public var targetGroupName: Swift.String?
        /// The type of target that you must specify when registering targets with this target group. The possible values are instance (register targets by instance ID), ip (register targets by IP address), lambda (register a single Lambda function as a target), or alb (register a single Application Load Balancer as a target).
        public var targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public var unhealthyThresholdCount: Swift.Int?
        /// The ID of the VPC for the targets.
        public var vpcId: Swift.String?

        public init(
            healthCheckEnabled: Swift.Bool? = nil,
            healthCheckIntervalSeconds: Swift.Int? = nil,
            healthCheckPath: Swift.String? = nil,
            healthCheckPort: Swift.String? = nil,
            healthCheckProtocol: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
            healthCheckTimeoutSeconds: Swift.Int? = nil,
            healthyThresholdCount: Swift.Int? = nil,
            ipAddressType: ElasticLoadBalancingv2ClientTypes.TargetGroupIpAddressTypeEnum? = nil,
            loadBalancerArns: [Swift.String]? = nil,
            matcher: ElasticLoadBalancingv2ClientTypes.Matcher? = nil,
            port: Swift.Int? = nil,
            `protocol`: ElasticLoadBalancingv2ClientTypes.ProtocolEnum? = nil,
            protocolVersion: Swift.String? = nil,
            targetGroupArn: Swift.String? = nil,
            targetGroupName: Swift.String? = nil,
            targetType: ElasticLoadBalancingv2ClientTypes.TargetTypeEnum? = nil,
            unhealthyThresholdCount: Swift.Int? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.healthCheckEnabled = healthCheckEnabled
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckPath = healthCheckPath
            self.healthCheckPort = healthCheckPort
            self.healthCheckProtocol = healthCheckProtocol
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.ipAddressType = ipAddressType
            self.loadBalancerArns = loadBalancerArns
            self.matcher = matcher
            self.port = port
            self.`protocol` = `protocol`
            self.protocolVersion = protocolVersion
            self.targetGroupArn = targetGroupArn
            self.targetGroupName = targetGroupName
            self.targetType = targetType
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.vpcId = vpcId
        }
    }

}

extension TargetGroupAssociationLimitException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TargetGroupAssociationLimitException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of load balancers per target group.
public struct TargetGroupAssociationLimitException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetGroupAssociationLimit" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetGroupAttribute()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a target group attribute.
    public struct TargetGroupAttribute: Swift.Equatable {
        /// The name of the attribute. The following attributes are supported by all load balancers:
        ///
        /// * deregistration_delay.timeout_seconds - The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds. If the target is a Lambda function, this attribute is not supported.
        ///
        /// * stickiness.enabled - Indicates whether target stickiness is enabled. The value is true or false. The default is false.
        ///
        /// * stickiness.type - Indicates the type of stickiness. The possible values are:
        ///
        /// * lb_cookie and app_cookie for Application Load Balancers.
        ///
        /// * source_ip for Network Load Balancers.
        ///
        /// * source_ip_dest_ip and source_ip_dest_ip_proto for Gateway Load Balancers.
        ///
        ///
        ///
        ///
        ///
        /// The following attributes are supported by Application Load Balancers and Network Load Balancers:
        ///
        /// * load_balancing.cross_zone.enabled - Indicates whether cross zone load balancing is enabled. The value is true, false or use_load_balancer_configuration. The default is use_load_balancer_configuration.
        ///
        /// * target_group_health.dns_failover.minimum_healthy_targets.count - The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to the maximum number of targets. The default is off.
        ///
        /// * target_group_health.dns_failover.minimum_healthy_targets.percentage - The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to 100. The default is off.
        ///
        /// * target_group_health.unhealthy_state_routing.minimum_healthy_targets.count - The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are 1 to the maximum number of targets. The default is 1.
        ///
        /// * target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage - The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are off or an integer from 1 to 100. The default is off.
        ///
        ///
        /// The following attributes are supported only if the load balancer is an Application Load Balancer and the target is an instance or an IP address:
        ///
        /// * load_balancing.algorithm.type - The load balancing algorithm determines how the load balancer selects targets when routing requests. The value is round_robin, least_outstanding_requests, or weighted_random. The default is round_robin.
        ///
        /// * load_balancing.algorithm.anomaly_mitigation - Only available when load_balancing.algorithm.type is weighted_random. Indicates whether anomaly mitigation is enabled. The value is on or off. The default is off.
        ///
        /// * slow_start.duration_seconds - The time period, in seconds, during which a newly registered target receives an increasing share of the traffic to the target group. After this time period ends, the target receives its full share of traffic. The range is 30-900 seconds (15 minutes). The default is 0 seconds (disabled).
        ///
        /// * stickiness.app_cookie.cookie_name - Indicates the name of the application-based cookie. Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP, and AWSALBTG; they're reserved for use by the load balancer.
        ///
        /// * stickiness.app_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the application-based cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        ///
        /// * stickiness.lb_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
        ///
        ///
        /// The following attribute is supported only if the load balancer is an Application Load Balancer and the target is a Lambda function:
        ///
        /// * lambda.multi_value_headers.enabled - Indicates whether the request and response headers that are exchanged between the load balancer and the Lambda function include arrays of values or strings. The value is true or false. The default is false. If the value is false and the request contains a duplicate header field name or query parameter key, the load balancer uses the last value sent by the client.
        ///
        ///
        /// The following attributes are supported only by Network Load Balancers:
        ///
        /// * deregistration_delay.connection_termination.enabled - Indicates whether the load balancer terminates connections at the end of the deregistration timeout. The value is true or false. For new UDP/TCP_UDP target groups the default is true. Otherwise, the default is false.
        ///
        /// * preserve_client_ip.enabled - Indicates whether client IP preservation is enabled. The value is true or false. The default is disabled if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, the default is enabled. Client IP preservation cannot be disabled for UDP and TCP_UDP target groups.
        ///
        /// * proxy_protocol_v2.enabled - Indicates whether Proxy Protocol version 2 is enabled. The value is true or false. The default is false.
        ///
        /// * target_health_state.unhealthy.connection_termination.enabled - Indicates whether the load balancer terminates connections to unhealthy targets. The value is true or false. The default is true.
        ///
        /// * target_health_state.unhealthy.draining_interval_seconds - The amount of time for Elastic Load Balancing to wait before changing the state of an unhealthy target from unhealthy.draining to unhealthy. The range is 0-360000 seconds. The default value is 0 seconds. Note: This attribute can only be configured when target_health_state.unhealthy.connection_termination.enabled is false.
        ///
        ///
        /// The following attributes are supported only by Gateway Load Balancers:
        ///
        /// * target_failover.on_deregistration - Indicates how the Gateway Load Balancer handles existing flows when a target is deregistered. The possible values are rebalance and no_rebalance. The default is no_rebalance. The two attributes (target_failover.on_deregistration and target_failover.on_unhealthy) can't be set independently. The value you set for both attributes must be the same.
        ///
        /// * target_failover.on_unhealthy - Indicates how the Gateway Load Balancer handles existing flows when a target is unhealthy. The possible values are rebalance and no_rebalance. The default is no_rebalance. The two attributes (target_failover.on_deregistration and target_failover.on_unhealthy) cannot be set independently. The value you set for both attributes must be the same.
        public var key: Swift.String?
        /// The value of the attribute.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum TargetGroupIpAddressTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetGroupIpAddressTypeEnum] {
            return [
                .ipv4,
                .ipv6,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetGroupIpAddressTypeEnum(rawValue: rawValue) ?? TargetGroupIpAddressTypeEnum.sdkUnknown(rawValue)
        }
    }
}

extension TargetGroupNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TargetGroupNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified target group does not exist.
public struct TargetGroupNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetGroupNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationSeconds = "DurationSeconds"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let durationSeconds = durationSeconds {
            try container.encode(durationSeconds, forKey: ClientRuntime.Key("DurationSeconds"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetGroupStickinessConfig()
            value.enabled = try reader["Enabled"].readIfPresent()
            value.durationSeconds = try reader["DurationSeconds"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the target group stickiness for a rule.
    public struct TargetGroupStickinessConfig: Swift.Equatable {
        /// The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
        public var durationSeconds: Swift.Int?
        /// Indicates whether target group stickiness is enabled.
        public var enabled: Swift.Bool?

        public init(
            durationSeconds: Swift.Int? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.durationSeconds = durationSeconds
            self.enabled = enabled
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TargetGroupTuple: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupArn = "TargetGroupArn"
        case weight = "Weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let targetGroupArn = targetGroupArn {
            try container.encode(targetGroupArn, forKey: ClientRuntime.Key("TargetGroupArn"))
        }
        if let weight = weight {
            try container.encode(weight, forKey: ClientRuntime.Key("Weight"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetGroupTuple, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetGroupTuple()
            value.targetGroupArn = try reader["TargetGroupArn"].readIfPresent()
            value.weight = try reader["Weight"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about how traffic will be distributed between multiple target groups in a forward rule.
    public struct TargetGroupTuple: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the target group.
        public var targetGroupArn: Swift.String?
        /// The weight. The range is 0 to 999.
        public var weight: Swift.Int?

        public init(
            targetGroupArn: Swift.String? = nil,
            weight: Swift.Int? = nil
        )
        {
            self.targetGroupArn = targetGroupArn
            self.weight = weight
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TargetHealth: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case reason = "Reason"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let reason = reason {
            try container.encode(reason, forKey: ClientRuntime.Key("Reason"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetHealth, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetHealth()
            value.state = try reader["State"].readIfPresent()
            value.reason = try reader["Reason"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the current health of a target.
    public struct TargetHealth: Swift.Equatable {
        /// A description of the target health that provides additional details. If the state is healthy, a description is not provided.
        public var description: Swift.String?
        /// The reason code. If the target state is healthy, a reason code is not provided. If the target state is initial, the reason code can be one of the following values:
        ///
        /// * Elb.RegistrationInProgress - The target is in the process of being registered with the load balancer.
        ///
        /// * Elb.InitialHealthChecking - The load balancer is still sending the target the minimum number of health checks required to determine its health status.
        ///
        ///
        /// If the target state is unhealthy, the reason code can be one of the following values:
        ///
        /// * Target.ResponseCodeMismatch - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers.
        ///
        /// * Target.Timeout - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers.
        ///
        /// * Target.FailedHealthChecks - The load balancer received an error while establishing a connection to the target or the target response was malformed.
        ///
        /// * Elb.InternalError - The health checks failed due to an internal error. Applies only to Application Load Balancers.
        ///
        ///
        /// If the target state is unused, the reason code can be one of the following values:
        ///
        /// * Target.NotRegistered - The target is not registered with the target group.
        ///
        /// * Target.NotInUse - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.
        ///
        /// * Target.InvalidState - The target is in the stopped or terminated state.
        ///
        /// * Target.IpUnusable - The target IP address is reserved for use by a load balancer.
        ///
        ///
        /// If the target state is draining, the reason code can be the following value:
        ///
        /// * Target.DeregistrationInProgress - The target is in the process of being deregistered and the deregistration delay period has not expired.
        ///
        ///
        /// If the target state is unavailable, the reason code can be the following value:
        ///
        /// * Target.HealthCheckDisabled - Health checks are disabled for the target group. Applies only to Application Load Balancers.
        ///
        /// * Elb.InternalError - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.
        public var reason: ElasticLoadBalancingv2ClientTypes.TargetHealthReasonEnum?
        /// The state of the target.
        public var state: ElasticLoadBalancingv2ClientTypes.TargetHealthStateEnum?

        public init(
            description: Swift.String? = nil,
            reason: ElasticLoadBalancingv2ClientTypes.TargetHealthReasonEnum? = nil,
            state: ElasticLoadBalancingv2ClientTypes.TargetHealthStateEnum? = nil
        )
        {
            self.description = description
            self.reason = reason
            self.state = state
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TargetHealthDescription: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetection = "AnomalyDetection"
        case healthCheckPort = "HealthCheckPort"
        case target = "Target"
        case targetHealth = "TargetHealth"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let anomalyDetection = anomalyDetection {
            try container.encode(anomalyDetection, forKey: ClientRuntime.Key("AnomalyDetection"))
        }
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: ClientRuntime.Key("HealthCheckPort"))
        }
        if let target = target {
            try container.encode(target, forKey: ClientRuntime.Key("Target"))
        }
        if let targetHealth = targetHealth {
            try container.encode(targetHealth, forKey: ClientRuntime.Key("TargetHealth"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TargetHealthDescription, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TargetHealthDescription()
            value.target = try reader["Target"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.TargetDescription.readingClosure)
            value.healthCheckPort = try reader["HealthCheckPort"].readIfPresent()
            value.targetHealth = try reader["TargetHealth"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.TargetHealth.readingClosure)
            value.anomalyDetection = try reader["AnomalyDetection"].readIfPresent(readingClosure: ElasticLoadBalancingv2ClientTypes.AnomalyDetection.readingClosure)
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the health of a target.
    public struct TargetHealthDescription: Swift.Equatable {
        /// The anomaly detection result for the target. If no anomalies were detected, the result is normal. If anomalies were detected, the result is anomalous.
        public var anomalyDetection: ElasticLoadBalancingv2ClientTypes.AnomalyDetection?
        /// The port to use to connect with the target.
        public var healthCheckPort: Swift.String?
        /// The description of the target.
        public var target: ElasticLoadBalancingv2ClientTypes.TargetDescription?
        /// The health information for the target.
        public var targetHealth: ElasticLoadBalancingv2ClientTypes.TargetHealth?

        public init(
            anomalyDetection: ElasticLoadBalancingv2ClientTypes.AnomalyDetection? = nil,
            healthCheckPort: Swift.String? = nil,
            target: ElasticLoadBalancingv2ClientTypes.TargetDescription? = nil,
            targetHealth: ElasticLoadBalancingv2ClientTypes.TargetHealth? = nil
        )
        {
            self.anomalyDetection = anomalyDetection
            self.healthCheckPort = healthCheckPort
            self.target = target
            self.targetHealth = targetHealth
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum TargetHealthReasonEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deregistrationInProgress
        case failedHealthChecks
        case healthCheckDisabled
        case initialHealthChecking
        case internalError
        case invalidState
        case ipUnusable
        case notInUse
        case notRegistered
        case registrationInProgress
        case responseCodeMismatch
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetHealthReasonEnum] {
            return [
                .deregistrationInProgress,
                .failedHealthChecks,
                .healthCheckDisabled,
                .initialHealthChecking,
                .internalError,
                .invalidState,
                .ipUnusable,
                .notInUse,
                .notRegistered,
                .registrationInProgress,
                .responseCodeMismatch,
                .timeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deregistrationInProgress: return "Target.DeregistrationInProgress"
            case .failedHealthChecks: return "Target.FailedHealthChecks"
            case .healthCheckDisabled: return "Target.HealthCheckDisabled"
            case .initialHealthChecking: return "Elb.InitialHealthChecking"
            case .internalError: return "Elb.InternalError"
            case .invalidState: return "Target.InvalidState"
            case .ipUnusable: return "Target.IpUnusable"
            case .notInUse: return "Target.NotInUse"
            case .notRegistered: return "Target.NotRegistered"
            case .registrationInProgress: return "Elb.RegistrationInProgress"
            case .responseCodeMismatch: return "Target.ResponseCodeMismatch"
            case .timeout: return "Target.Timeout"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetHealthReasonEnum(rawValue: rawValue) ?? TargetHealthReasonEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum TargetHealthStateEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case draining
        case healthy
        case initial
        case unavailable
        case unhealthy
        case unhealthyDraining
        case unused
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetHealthStateEnum] {
            return [
                .draining,
                .healthy,
                .initial,
                .unavailable,
                .unhealthy,
                .unhealthyDraining,
                .unused,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .draining: return "draining"
            case .healthy: return "healthy"
            case .initial: return "initial"
            case .unavailable: return "unavailable"
            case .unhealthy: return "unhealthy"
            case .unhealthyDraining: return "unhealthy.draining"
            case .unused: return "unused"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetHealthStateEnum(rawValue: rawValue) ?? TargetHealthStateEnum.sdkUnknown(rawValue)
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    public enum TargetTypeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alb
        case instance
        case ip
        case lambda
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetTypeEnum] {
            return [
                .alb,
                .instance,
                .ip,
                .lambda,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alb: return "alb"
            case .instance: return "instance"
            case .ip: return "ip"
            case .lambda: return "lambda"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetTypeEnum(rawValue: rawValue) ?? TargetTypeEnum.sdkUnknown(rawValue)
        }
    }
}

extension TooManyActionsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyActionsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of actions per rule.
public struct TooManyActionsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyActions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCertificatesException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyCertificatesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of certificates per load balancer.
public struct TooManyCertificatesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCertificates" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyListenersException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyListenersException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of listeners per load balancer.
public struct TooManyListenersException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyListeners" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyLoadBalancersException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyLoadBalancersException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of load balancers for your Amazon Web Services account.
public struct TooManyLoadBalancersException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyLoadBalancers" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyRegistrationsForTargetIdException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyRegistrationsForTargetIdException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of times a target can be registered with a load balancer.
public struct TooManyRegistrationsForTargetIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRegistrationsForTargetId" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyRulesException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyRulesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of rules per load balancer.
public struct TooManyRulesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRules" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyTagsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyTagsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of tags for this resource.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTags" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyTargetGroupsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyTargetGroupsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of target groups for your Amazon Web Services account.
public struct TooManyTargetGroupsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTargetGroups" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyTargetsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyTargetsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of targets.
public struct TooManyTargetsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTargets" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyTrustStoreRevocationEntriesException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyTrustStoreRevocationEntriesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified trust store has too many revocation entries.
public struct TooManyTrustStoreRevocationEntriesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTrustStoreRevocationEntries" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyTrustStoresException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyTrustStoresException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of trust stores for your Amazon Web Services account.
public struct TooManyTrustStoresException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTrustStores" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyUniqueTargetGroupsPerLoadBalancerException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TooManyUniqueTargetGroupsPerLoadBalancerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You've reached the limit on the number of unique target groups per load balancer across all listeners. If a target group is used by multiple actions for a load balancer, it is counted as only one use.
public struct TooManyUniqueTargetGroupsPerLoadBalancerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyUniqueTargetGroupsPerLoadBalancer" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.TrustStore: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case numberOfCaCertificates = "NumberOfCaCertificates"
        case status = "Status"
        case totalRevokedEntries = "TotalRevokedEntries"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let numberOfCaCertificates = numberOfCaCertificates {
            try container.encode(numberOfCaCertificates, forKey: ClientRuntime.Key("NumberOfCaCertificates"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let totalRevokedEntries = totalRevokedEntries {
            try container.encode(totalRevokedEntries, forKey: ClientRuntime.Key("TotalRevokedEntries"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TrustStore, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TrustStore()
            value.name = try reader["Name"].readIfPresent()
            value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.numberOfCaCertificates = try reader["NumberOfCaCertificates"].readIfPresent()
            value.totalRevokedEntries = try reader["TotalRevokedEntries"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a trust store.
    public struct TrustStore: Swift.Equatable {
        /// The name of the trust store.
        public var name: Swift.String?
        /// The number of ca certificates in the trust store.
        public var numberOfCaCertificates: Swift.Int?
        /// The current status of the trust store.
        public var status: ElasticLoadBalancingv2ClientTypes.TrustStoreStatus?
        /// The number of revoked certificates in the trust store.
        public var totalRevokedEntries: Swift.Int?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            name: Swift.String? = nil,
            numberOfCaCertificates: Swift.Int? = nil,
            status: ElasticLoadBalancingv2ClientTypes.TrustStoreStatus? = nil,
            totalRevokedEntries: Swift.Int? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.name = name
            self.numberOfCaCertificates = numberOfCaCertificates
            self.status = status
            self.totalRevokedEntries = totalRevokedEntries
            self.trustStoreArn = trustStoreArn
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceArn = resourceArn {
            try container.encode(resourceArn, forKey: ClientRuntime.Key("ResourceArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TrustStoreAssociation()
            value.resourceArn = try reader["ResourceArn"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about the resources a trust store is associated with.
    public struct TrustStoreAssociation: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceArn: Swift.String?

        public init(
            resourceArn: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
        }
    }

}

extension TrustStoreInUseException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TrustStoreInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified trust store is currently in use.
public struct TrustStoreInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustStoreInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TrustStoreNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TrustStoreNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified trust store does not exist.
public struct TrustStoreNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustStoreNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TrustStoreNotReadyException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TrustStoreNotReadyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified trust store is not active.
public struct TrustStoreNotReadyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustStoreNotReady" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfRevokedEntries = "NumberOfRevokedEntries"
        case revocationId = "RevocationId"
        case revocationType = "RevocationType"
        case trustStoreArn = "TrustStoreArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let numberOfRevokedEntries = numberOfRevokedEntries {
            try container.encode(numberOfRevokedEntries, forKey: ClientRuntime.Key("NumberOfRevokedEntries"))
        }
        if let revocationId = revocationId {
            try container.encode(revocationId, forKey: ClientRuntime.Key("RevocationId"))
        }
        if let revocationType = revocationType {
            try container.encode(revocationType, forKey: ClientRuntime.Key("RevocationType"))
        }
        if let trustStoreArn = trustStoreArn {
            try container.encode(trustStoreArn, forKey: ClientRuntime.Key("TrustStoreArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = ElasticLoadBalancingv2ClientTypes.TrustStoreRevocation()
            value.trustStoreArn = try reader["TrustStoreArn"].readIfPresent()
            value.revocationId = try reader["RevocationId"].readIfPresent()
            value.revocationType = try reader["RevocationType"].readIfPresent()
            value.numberOfRevokedEntries = try reader["NumberOfRevokedEntries"].readIfPresent()
            return value
        }
    }
}

extension ElasticLoadBalancingv2ClientTypes {
    /// Information about a revocation file in use by a trust store.
    public struct TrustStoreRevocation: Swift.Equatable {
        /// The number of revoked certificates.
        public var numberOfRevokedEntries: Swift.Int?
        /// The revocation ID of the revocation file.
        public var revocationId: Swift.Int?
        /// The type of revocation file.
        public var revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType?
        /// The Amazon Resource Name (ARN) of the trust store.
        public var trustStoreArn: Swift.String?

        public init(
            numberOfRevokedEntries: Swift.Int? = nil,
            revocationId: Swift.Int? = nil,
            revocationType: ElasticLoadBalancingv2ClientTypes.RevocationType? = nil,
            trustStoreArn: Swift.String? = nil
        )
        {
            self.numberOfRevokedEntries = numberOfRevokedEntries
            self.revocationId = revocationId
            self.revocationType = revocationType
            self.trustStoreArn = trustStoreArn
        }
    }

}

extension ElasticLoadBalancingv2ClientTypes {
    public enum TrustStoreStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case sdkUnknown(Swift.String)

        public static var allCases: [TrustStoreStatus] {
            return [
                .active,
                .creating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrustStoreStatus(rawValue: rawValue) ?? TrustStoreStatus.sdkUnknown(rawValue)
        }
    }
}

extension UnsupportedProtocolException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = UnsupportedProtocolException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified protocol is not supported.
public struct UnsupportedProtocolException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedProtocol" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}
