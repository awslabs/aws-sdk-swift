//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// There isn't sufficient access for performing this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \"CONTENT_REDACTED\")"}
}

/// The request couldn't be made due to a conflicting operation or resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \"CONTENT_REDACTED\")"}
}

/// The request failed to register with the service.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InternalServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerException(message: \"CONTENT_REDACTED\")"}
}

/// The requested resource wasn't found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \"CONTENT_REDACTED\")"}
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \"CONTENT_REDACTED\")"}
}

/// The input is invalid or an out-of-range value was supplied for the input parameter.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \"CONTENT_REDACTED\")"}
}

public struct AcceptEnvironmentAccountConnectionInput {
    /// The ID of the environment account connection.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension ProtonClientTypes {

    public enum EnvironmentAccountConnectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case connected
        case pending
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentAccountConnectionStatus] {
            return [
                .connected,
                .pending,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .pending: return "PENDING"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detailed data of an Proton environment account connection resource.
    public struct EnvironmentAccountConnection {
        /// The Amazon Resource Name (ARN) of the environment account connection.
        /// This member is required.
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of an IAM service role in the environment account. Proton uses this role to provision infrastructure resources using CodeBuild-based provisioning in the associated environment account.
        public var codebuildRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in the associated environment account. It determines the scope of infrastructure that a component can provision in the account. The environment account connection must have a componentRoleArn to allow directly defined components to be associated with any environments running in the account. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
        public var componentRoleArn: Swift.String?
        /// The environment account that's connected to the environment account connection.
        /// This member is required.
        public var environmentAccountId: Swift.String?
        /// The name of the environment that's associated with the environment account connection.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the environment account connection.
        /// This member is required.
        public var id: Swift.String?
        /// The time when the environment account connection was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The ID of the management account that's connected to the environment account connection.
        /// This member is required.
        public var managementAccountId: Swift.String?
        /// The time when the environment account connection request was made.
        /// This member is required.
        public var requestedAt: Foundation.Date?
        /// The IAM service role that's associated with the environment account connection.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The status of the environment account connection.
        /// This member is required.
        public var status: ProtonClientTypes.EnvironmentAccountConnectionStatus?

        public init(
            arn: Swift.String? = nil,
            codebuildRoleArn: Swift.String? = nil,
            componentRoleArn: Swift.String? = nil,
            environmentAccountId: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            managementAccountId: Swift.String? = nil,
            requestedAt: Foundation.Date? = nil,
            roleArn: Swift.String? = nil,
            status: ProtonClientTypes.EnvironmentAccountConnectionStatus? = nil
        )
        {
            self.arn = arn
            self.codebuildRoleArn = codebuildRoleArn
            self.componentRoleArn = componentRoleArn
            self.environmentAccountId = environmentAccountId
            self.environmentName = environmentName
            self.id = id
            self.lastModifiedAt = lastModifiedAt
            self.managementAccountId = managementAccountId
            self.requestedAt = requestedAt
            self.roleArn = roleArn
            self.status = status
        }
    }

}

public struct AcceptEnvironmentAccountConnectionOutput {
    /// The environment account connection data that's returned by Proton.
    /// This member is required.
    public var environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection?

    public init(
        environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection? = nil
    )
    {
        self.environmentAccountConnection = environmentAccountConnection
    }
}

extension ProtonClientTypes {

    public enum RepositoryProvider: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bitbucket
        case github
        case githubEnterprise
        case sdkUnknown(Swift.String)

        public static var allCases: [RepositoryProvider] {
            return [
                .bitbucket,
                .github,
                .githubEnterprise
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bitbucket: return "BITBUCKET"
            case .github: return "GITHUB"
            case .githubEnterprise: return "GITHUB_ENTERPRISE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detail data for a linked repository branch.
    public struct RepositoryBranch {
        /// The Amazon Resource Name (ARN) of the linked repository.
        /// This member is required.
        public var arn: Swift.String?
        /// The repository branch.
        /// This member is required.
        public var branch: Swift.String?
        /// The repository name.
        /// This member is required.
        public var name: Swift.String?
        /// The repository provider.
        /// This member is required.
        public var provider: ProtonClientTypes.RepositoryProvider?

        public init(
            arn: Swift.String? = nil,
            branch: Swift.String? = nil,
            name: Swift.String? = nil,
            provider: ProtonClientTypes.RepositoryProvider? = nil
        )
        {
            self.arn = arn
            self.branch = branch
            self.name = name
            self.provider = provider
        }
    }

}

extension ProtonClientTypes {
    /// Proton settings that are used for multiple services in the Amazon Web Services account.
    public struct AccountSettings {
        /// The Amazon Resource Name (ARN) of the service role that Proton uses for provisioning pipelines. Proton assumes this role for CodeBuild-based provisioning.
        public var pipelineCodebuildRoleArn: Swift.String?
        /// The linked repository for pipeline provisioning. Required if you have environments configured for self-managed provisioning with services that include pipelines. A linked repository is a repository that has been registered with Proton. For more information, see [CreateRepository].
        public var pipelineProvisioningRepository: ProtonClientTypes.RepositoryBranch?
        /// The Amazon Resource Name (ARN) of the service role you want to use for provisioning pipelines. Assumed by Proton for Amazon Web Services-managed provisioning, and by customer-owned automation for self-managed provisioning.
        public var pipelineServiceRoleArn: Swift.String?

        public init(
            pipelineCodebuildRoleArn: Swift.String? = nil,
            pipelineProvisioningRepository: ProtonClientTypes.RepositoryBranch? = nil,
            pipelineServiceRoleArn: Swift.String? = nil
        )
        {
            self.pipelineCodebuildRoleArn = pipelineCodebuildRoleArn
            self.pipelineProvisioningRepository = pipelineProvisioningRepository
            self.pipelineServiceRoleArn = pipelineServiceRoleArn
        }
    }

}

public struct GetAccountSettingsInput {

    public init() { }
}

public struct GetAccountSettingsOutput {
    /// The Proton pipeline service role detail data that's returned by Proton.
    public var accountSettings: ProtonClientTypes.AccountSettings?

    public init(
        accountSettings: ProtonClientTypes.AccountSettings? = nil
    )
    {
        self.accountSettings = accountSettings
    }
}

extension ProtonClientTypes {
    /// Detail input data for a linked repository branch.
    public struct RepositoryBranchInput {
        /// The repository branch.
        /// This member is required.
        public var branch: Swift.String?
        /// The repository name.
        /// This member is required.
        public var name: Swift.String?
        /// The repository provider.
        /// This member is required.
        public var provider: ProtonClientTypes.RepositoryProvider?

        public init(
            branch: Swift.String? = nil,
            name: Swift.String? = nil,
            provider: ProtonClientTypes.RepositoryProvider? = nil
        )
        {
            self.branch = branch
            self.name = name
            self.provider = provider
        }
    }

}

public struct UpdateAccountSettingsInput {
    /// Set to true to remove a configured pipeline repository from the account settings. Don't set this field if you are updating the configured pipeline repository.
    public var deletePipelineProvisioningRepository: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the service role you want to use for provisioning pipelines. Proton assumes this role for CodeBuild-based provisioning.
    public var pipelineCodebuildRoleArn: Swift.String?
    /// A linked repository for pipeline provisioning. Specify it if you have environments configured for self-managed provisioning with services that include pipelines. A linked repository is a repository that has been registered with Proton. For more information, see [CreateRepository]. To remove a previously configured repository, set deletePipelineProvisioningRepository to true, and don't set pipelineProvisioningRepository.
    public var pipelineProvisioningRepository: ProtonClientTypes.RepositoryBranchInput?
    /// The Amazon Resource Name (ARN) of the service role you want to use for provisioning pipelines. Assumed by Proton for Amazon Web Services-managed provisioning, and by customer-owned automation for self-managed provisioning. To remove a previously configured ARN, specify an empty string.
    public var pipelineServiceRoleArn: Swift.String?

    public init(
        deletePipelineProvisioningRepository: Swift.Bool? = nil,
        pipelineCodebuildRoleArn: Swift.String? = nil,
        pipelineProvisioningRepository: ProtonClientTypes.RepositoryBranchInput? = nil,
        pipelineServiceRoleArn: Swift.String? = nil
    )
    {
        self.deletePipelineProvisioningRepository = deletePipelineProvisioningRepository
        self.pipelineCodebuildRoleArn = pipelineCodebuildRoleArn
        self.pipelineProvisioningRepository = pipelineProvisioningRepository
        self.pipelineServiceRoleArn = pipelineServiceRoleArn
    }
}

public struct UpdateAccountSettingsOutput {
    /// The Proton pipeline service role and repository data shared across the Amazon Web Services account.
    /// This member is required.
    public var accountSettings: ProtonClientTypes.AccountSettings?

    public init(
        accountSettings: ProtonClientTypes.AccountSettings? = nil
    )
    {
        self.accountSettings = accountSettings
    }
}

public struct CancelComponentDeploymentInput {
    /// The name of the component with the deployment to cancel.
    /// This member is required.
    public var componentName: Swift.String?

    public init(
        componentName: Swift.String? = nil
    )
    {
        self.componentName = componentName
    }
}

extension ProtonClientTypes {

    public enum DeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case cancelling
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .cancelled,
                .cancelling,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelling: return "CANCELLING"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detailed data of an Proton component resource. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public struct Component {
        /// The Amazon Resource Name (ARN) of the component.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the component was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The component deployment status.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// The message associated with the component deployment status.
        public var deploymentStatusMessage: Swift.String?
        /// A description of the component.
        public var description: Swift.String?
        /// The name of the Proton environment that this component is associated with.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the last attempted deployment of this component.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The last token the client requested.
        public var lastClientRequestToken: Swift.String?
        /// The time when a deployment of the component was last attempted.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the component was last deployed successfully.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The time when the component was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The ID of the last successful deployment of this component.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the component.
        /// This member is required.
        public var name: Swift.String?
        /// The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.
        public var serviceInstanceName: Swift.String?
        /// The name of the service that serviceInstanceName is associated with. Provided when a component is attached to a service instance.
        public var serviceName: Swift.String?
        /// The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.
        public var serviceSpec: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            description: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastClientRequestToken: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            name: Swift.String? = nil,
            serviceInstanceName: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            serviceSpec: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
            self.environmentName = environmentName
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastClientRequestToken = lastClientRequestToken
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastModifiedAt = lastModifiedAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.name = name
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
            self.serviceSpec = serviceSpec
        }
    }

}

extension ProtonClientTypes.Component: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Component(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentName: \(Swift.String(describing: environmentName)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastClientRequestToken: \(Swift.String(describing: lastClientRequestToken)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), name: \(Swift.String(describing: name)), serviceInstanceName: \(Swift.String(describing: serviceInstanceName)), serviceName: \(Swift.String(describing: serviceName)), deploymentStatusMessage: \"CONTENT_REDACTED\", description: \"CONTENT_REDACTED\", serviceSpec: \"CONTENT_REDACTED\")"}
}

public struct CancelComponentDeploymentOutput {
    /// The detailed data of the component with the deployment that is being canceled.
    /// This member is required.
    public var component: ProtonClientTypes.Component?

    public init(
        component: ProtonClientTypes.Component? = nil
    )
    {
        self.component = component
    }
}

public struct CancelEnvironmentDeploymentInput {
    /// The name of the environment with the deployment to cancel.
    /// This member is required.
    public var environmentName: Swift.String?

    public init(
        environmentName: Swift.String? = nil
    )
    {
        self.environmentName = environmentName
    }
}

extension ProtonClientTypes {

    public enum Provisioning: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customerManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [Provisioning] {
            return [
                .customerManaged
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customerManaged: return "CUSTOMER_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detailed data of an Proton environment resource. An Proton environment is a set of resources shared across Proton services.
    public struct Environment {
        /// The Amazon Resource Name (ARN) of the environment.
        /// This member is required.
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM service role that allows Proton to provision infrastructure using CodeBuild-based provisioning on your behalf.
        public var codebuildRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision. The environment must have a componentRoleArn to allow directly defined components to be associated with the environment. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
        public var componentRoleArn: Swift.String?
        /// The time when the environment was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The environment deployment status.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// An environment deployment status message.
        public var deploymentStatusMessage: Swift.String?
        /// The description of the environment.
        public var description: Swift.String?
        /// The ID of the environment account connection that's used to provision infrastructure resources in an environment account.
        public var environmentAccountConnectionId: Swift.String?
        /// The ID of the environment account that the environment infrastructure resources are provisioned in.
        public var environmentAccountId: Swift.String?
        /// The ID of the last attempted deployment of this environment.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The time when a deployment of the environment was last attempted.
        /// This member is required.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the environment was last deployed successfully.
        /// This member is required.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The ID of the last successful deployment of this environment.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the environment.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.
        public var protonServiceRoleArn: Swift.String?
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public var provisioning: ProtonClientTypes.Provisioning?
        /// The linked repository that you use to host your rendered infrastructure templates for self-managed provisioning. A linked repository is a repository that has been registered with Proton. For more information, see [CreateRepository](https://docs.aws.amazon.com/proton/latest/APIReference/API_CreateRepository.html).
        public var provisioningRepository: ProtonClientTypes.RepositoryBranch?
        /// The environment spec.
        public var spec: Swift.String?
        /// The major version of the environment template.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the environment template.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the environment template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            codebuildRoleArn: Swift.String? = nil,
            componentRoleArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            description: Swift.String? = nil,
            environmentAccountConnectionId: Swift.String? = nil,
            environmentAccountId: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            name: Swift.String? = nil,
            protonServiceRoleArn: Swift.String? = nil,
            provisioning: ProtonClientTypes.Provisioning? = nil,
            provisioningRepository: ProtonClientTypes.RepositoryBranch? = nil,
            spec: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.codebuildRoleArn = codebuildRoleArn
            self.componentRoleArn = componentRoleArn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
            self.environmentAccountConnectionId = environmentAccountConnectionId
            self.environmentAccountId = environmentAccountId
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.name = name
            self.protonServiceRoleArn = protonServiceRoleArn
            self.provisioning = provisioning
            self.provisioningRepository = provisioningRepository
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.Environment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Environment(arn: \(Swift.String(describing: arn)), codebuildRoleArn: \(Swift.String(describing: codebuildRoleArn)), componentRoleArn: \(Swift.String(describing: componentRoleArn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentAccountConnectionId: \(Swift.String(describing: environmentAccountConnectionId)), environmentAccountId: \(Swift.String(describing: environmentAccountId)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), name: \(Swift.String(describing: name)), protonServiceRoleArn: \(Swift.String(describing: protonServiceRoleArn)), provisioning: \(Swift.String(describing: provisioning)), provisioningRepository: \(Swift.String(describing: provisioningRepository)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), deploymentStatusMessage: \"CONTENT_REDACTED\", description: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

public struct CancelEnvironmentDeploymentOutput {
    /// The environment summary data that's returned by Proton.
    /// This member is required.
    public var environment: ProtonClientTypes.Environment?

    public init(
        environment: ProtonClientTypes.Environment? = nil
    )
    {
        self.environment = environment
    }
}

public struct CancelServiceInstanceDeploymentInput {
    /// The name of the service instance with the deployment to cancel.
    /// This member is required.
    public var serviceInstanceName: Swift.String?
    /// The name of the service with the service instance deployment to cancel.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Detailed data of an Proton service instance resource.
    public struct ServiceInstance {
        /// The Amazon Resource Name (ARN) of the service instance.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the service instance was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The service instance deployment status.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// The message associated with the service instance deployment status.
        public var deploymentStatusMessage: Swift.String?
        /// The name of the environment that the service instance was deployed into.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the last attempted deployment of this service instance.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The last client request token received.
        public var lastClientRequestToken: Swift.String?
        /// The time when a deployment of the service instance was last attempted.
        /// This member is required.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the service instance was last deployed successfully.
        /// This member is required.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The ID of the last successful deployment of this service instance.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the service instance.
        /// This member is required.
        public var name: Swift.String?
        /// The name of the service that the service instance belongs to.
        /// This member is required.
        public var serviceName: Swift.String?
        /// The service spec that was used to create the service instance.
        public var spec: Swift.String?
        /// The major version of the service template that was used to create the service instance.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the service template that was used to create the service instance.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the service template that was used to create the service instance.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastClientRequestToken: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            name: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            spec: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.environmentName = environmentName
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastClientRequestToken = lastClientRequestToken
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.name = name
            self.serviceName = serviceName
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServiceInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceInstance(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentName: \(Swift.String(describing: environmentName)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastClientRequestToken: \(Swift.String(describing: lastClientRequestToken)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), name: \(Swift.String(describing: name)), serviceName: \(Swift.String(describing: serviceName)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), deploymentStatusMessage: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

public struct CancelServiceInstanceDeploymentOutput {
    /// The service instance summary data that's returned by Proton.
    /// This member is required.
    public var serviceInstance: ProtonClientTypes.ServiceInstance?

    public init(
        serviceInstance: ProtonClientTypes.ServiceInstance? = nil
    )
    {
        self.serviceInstance = serviceInstance
    }
}

public struct CancelServicePipelineDeploymentInput {
    /// The name of the service with the service pipeline deployment to cancel.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Detailed data of an Proton service instance pipeline resource.
    public struct ServicePipeline {
        /// The Amazon Resource Name (ARN) of the service pipeline.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the service pipeline was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The deployment status of the service pipeline.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// A service pipeline deployment status message.
        public var deploymentStatusMessage: Swift.String?
        /// The ID of the last attempted deployment of this service pipeline.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The time when a deployment of the service pipeline was last attempted.
        /// This member is required.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the service pipeline was last deployed successfully.
        /// This member is required.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The ID of the last successful deployment of this service pipeline.
        public var lastSucceededDeploymentId: Swift.String?
        /// The service spec that was used to create the service pipeline.
        public var spec: Swift.String?
        /// The major version of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            spec: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServicePipeline: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServicePipeline(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), deploymentStatusMessage: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

public struct CancelServicePipelineDeploymentOutput {
    /// The service pipeline detail data that's returned by Proton.
    /// This member is required.
    public var pipeline: ProtonClientTypes.ServicePipeline?

    public init(
        pipeline: ProtonClientTypes.ServicePipeline? = nil
    )
    {
        self.pipeline = pipeline
    }
}

public struct ListComponentOutputsInput {
    /// The name of the component whose outputs you want.
    /// This member is required.
    public var componentName: Swift.String?
    /// The ID of the deployment whose outputs you want.
    public var deploymentId: Swift.String?
    /// A token that indicates the location of the next output in the array of outputs, after the list of outputs that was previously requested.
    public var nextToken: Swift.String?

    public init(
        componentName: Swift.String? = nil,
        deploymentId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.componentName = componentName
        self.deploymentId = deploymentId
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {
    /// An infrastructure as code defined resource output.
    public struct Output {
        /// The output key.
        public var key: Swift.String?
        /// The output value.
        public var valueString: Swift.String?

        public init(
            key: Swift.String? = nil,
            valueString: Swift.String? = nil
        )
        {
            self.key = key
            self.valueString = valueString
        }
    }

}

extension ProtonClientTypes.Output: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct ListComponentOutputsOutput {
    /// A token that indicates the location of the next output in the array of outputs, after the list of outputs that was previously requested.
    public var nextToken: Swift.String?
    /// An array of component Infrastructure as Code (IaC) outputs.
    /// This member is required.
    public var outputs: [ProtonClientTypes.Output]?

    public init(
        nextToken: Swift.String? = nil,
        outputs: [ProtonClientTypes.Output]? = nil
    )
    {
        self.nextToken = nextToken
        self.outputs = outputs
    }
}

extension ListComponentOutputsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListComponentOutputsOutput(nextToken: \(Swift.String(describing: nextToken)), outputs: \"CONTENT_REDACTED\")"}
}

public struct ListComponentProvisionedResourcesInput {
    /// The name of the component whose provisioned resources you want.
    /// This member is required.
    public var componentName: Swift.String?
    /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the list of provisioned resources that was previously requested.
    public var nextToken: Swift.String?

    public init(
        componentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.componentName = componentName
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {

    /// List of provisioning engines
    public enum ProvisionedResourceEngine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudformation
        case terraform
        case sdkUnknown(Swift.String)

        public static var allCases: [ProvisionedResourceEngine] {
            return [
                .cloudformation,
                .terraform
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudformation: return "CLOUDFORMATION"
            case .terraform: return "TERRAFORM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detail data for a provisioned resource.
    public struct ProvisionedResource {
        /// The provisioned resource identifier.
        public var identifier: Swift.String?
        /// The provisioned resource name.
        public var name: Swift.String?
        /// The resource provisioning engine. At this time, CLOUDFORMATION can be used for Amazon Web Services-managed provisioning, and TERRAFORM can be used for self-managed provisioning. For more information, see [Self-managed provisioning](https://docs.aws.amazon.com/proton/latest/userguide/ag-works-prov-methods.html#ag-works-prov-methods-self) in the Proton User Guide.
        public var provisioningEngine: ProtonClientTypes.ProvisionedResourceEngine?

        public init(
            identifier: Swift.String? = nil,
            name: Swift.String? = nil,
            provisioningEngine: ProtonClientTypes.ProvisionedResourceEngine? = nil
        )
        {
            self.identifier = identifier
            self.name = name
            self.provisioningEngine = provisioningEngine
        }
    }

}

public struct ListComponentProvisionedResourcesOutput {
    /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the current requested list of provisioned resources.
    public var nextToken: Swift.String?
    /// An array of provisioned resources for a component.
    /// This member is required.
    public var provisionedResources: [ProtonClientTypes.ProvisionedResource]?

    public init(
        nextToken: Swift.String? = nil,
        provisionedResources: [ProtonClientTypes.ProvisionedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.provisionedResources = provisionedResources
    }
}

/// A quota was exceeded. For more information, see [Proton Quotas](https://docs.aws.amazon.com/proton/latest/userguide/ag-limits.html) in the Proton User Guide.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ServiceQuotaExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceQuotaExceededException(message: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// A description of a resource tag.
    public struct Tag {
        /// The key of the resource tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the resource tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct CreateComponentInput {
    /// The client token for the created component.
    public var clientToken: Swift.String?
    /// An optional customer-provided description of the component.
    public var description: Swift.String?
    /// The name of the Proton environment that you want to associate this component with. You must specify this when you don't specify serviceInstanceName and serviceName.
    public var environmentName: Swift.String?
    /// A path to a manifest file that lists the Infrastructure as Code (IaC) file, template language, and rendering engine for infrastructure that a custom component provisions.
    /// This member is required.
    public var manifest: Swift.String?
    /// The customer-provided name of the component.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the service instance that you want to attach this component to. If you don't specify this, the component isn't attached to any service instance. Specify both serviceInstanceName and serviceName or neither of them.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that serviceInstanceName is associated with. If you don't specify this, the component isn't attached to any service instance. Specify both serviceInstanceName and serviceName or neither of them.
    public var serviceName: Swift.String?
    /// The service spec that you want the component to use to access service inputs. Set this only when you attach the component to a service instance.
    public var serviceSpec: Swift.String?
    /// An optional list of metadata items that you can associate with the Proton component. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// A path to the Infrastructure as Code (IaC) file describing infrastructure that a custom component provisions. Components support a single IaC file, even if you use Terraform as your template language.
    /// This member is required.
    public var templateFile: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        manifest: Swift.String? = nil,
        name: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        serviceSpec: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateFile: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.environmentName = environmentName
        self.manifest = manifest
        self.name = name
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
        self.serviceSpec = serviceSpec
        self.tags = tags
        self.templateFile = templateFile
    }
}

extension CreateComponentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateComponentInput(clientToken: \(Swift.String(describing: clientToken)), environmentName: \(Swift.String(describing: environmentName)), name: \(Swift.String(describing: name)), serviceInstanceName: \(Swift.String(describing: serviceInstanceName)), serviceName: \(Swift.String(describing: serviceName)), tags: \(Swift.String(describing: tags)), description: \"CONTENT_REDACTED\", manifest: \"CONTENT_REDACTED\", serviceSpec: \"CONTENT_REDACTED\", templateFile: \"CONTENT_REDACTED\")"}
}

public struct CreateComponentOutput {
    /// The detailed data of the created component.
    /// This member is required.
    public var component: ProtonClientTypes.Component?

    public init(
        component: ProtonClientTypes.Component? = nil
    )
    {
        self.component = component
    }
}

public struct DeleteComponentInput {
    /// The name of the component to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteComponentOutput {
    /// The detailed data of the component being deleted.
    public var component: ProtonClientTypes.Component?

    public init(
        component: ProtonClientTypes.Component? = nil
    )
    {
        self.component = component
    }
}

public struct GetComponentInput {
    /// The name of the component that you want to get the detailed data for.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetComponentOutput {
    /// The detailed data of the requested component.
    public var component: ProtonClientTypes.Component?

    public init(
        component: ProtonClientTypes.Component? = nil
    )
    {
        self.component = component
    }
}

public struct ListComponentsInput {
    /// The name of an environment for result list filtering. Proton returns components associated with the environment or attached to service instances running in it.
    public var environmentName: Swift.String?
    /// The maximum number of components to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next component in the array of components, after the list of components that was previously requested.
    public var nextToken: Swift.String?
    /// The name of a service instance for result list filtering. Proton returns the component attached to the service instance, if any.
    public var serviceInstanceName: Swift.String?
    /// The name of a service for result list filtering. Proton returns components attached to service instances of the service.
    public var serviceName: Swift.String?

    public init(
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton component resource. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public struct ComponentSummary {
        /// The Amazon Resource Name (ARN) of the component.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the component was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The component deployment status.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// The message associated with the component deployment status.
        public var deploymentStatusMessage: Swift.String?
        /// The name of the Proton environment that this component is associated with.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the last attempted deployment of this component.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The time when a deployment of the component was last attempted.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the component was last deployed successfully.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The time when the component was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The ID of the last successful deployment of this component.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the component.
        /// This member is required.
        public var name: Swift.String?
        /// The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.
        public var serviceInstanceName: Swift.String?
        /// The name of the service that serviceInstanceName is associated with. Provided when a component is attached to a service instance.
        public var serviceName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            name: Swift.String? = nil,
            serviceInstanceName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.environmentName = environmentName
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastModifiedAt = lastModifiedAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.name = name
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
        }
    }

}

extension ProtonClientTypes.ComponentSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComponentSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentName: \(Swift.String(describing: environmentName)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), name: \(Swift.String(describing: name)), serviceInstanceName: \(Swift.String(describing: serviceInstanceName)), serviceName: \(Swift.String(describing: serviceName)), deploymentStatusMessage: \"CONTENT_REDACTED\")"}
}

public struct ListComponentsOutput {
    /// An array of components with summary data.
    /// This member is required.
    public var components: [ProtonClientTypes.ComponentSummary]?
    /// A token that indicates the location of the next component in the array of components, after the current requested list of components.
    public var nextToken: Swift.String?

    public init(
        components: [ProtonClientTypes.ComponentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.components = components
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {

    public enum ComponentDeploymentUpdateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case currentVersion
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ComponentDeploymentUpdateType] {
            return [
                .currentVersion,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .currentVersion: return "CURRENT_VERSION"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct UpdateComponentInput {
    /// The client token for the updated component.
    public var clientToken: Swift.String?
    /// The deployment type. It defines the mode for updating a component, as follows: NONE In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated. You can only specify description in this mode. CURRENT_VERSION In this mode, the component is deployed and updated with the new serviceSpec, templateSource, and/or type that you provide. Only requested parameters are updated.
    /// This member is required.
    public var deploymentType: ProtonClientTypes.ComponentDeploymentUpdateType?
    /// An optional customer-provided description of the component.
    public var description: Swift.String?
    /// The name of the component to update.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the service instance that you want to attach this component to. Don't specify to keep the component's current service instance attachment. Specify an empty string to detach the component from the service instance it's attached to. Specify non-empty values for both serviceInstanceName and serviceName or for neither of them.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that serviceInstanceName is associated with. Don't specify to keep the component's current service instance attachment. Specify an empty string to detach the component from the service instance it's attached to. Specify non-empty values for both serviceInstanceName and serviceName or for neither of them.
    public var serviceName: Swift.String?
    /// The service spec that you want the component to use to access service inputs. Set this only when the component is attached to a service instance.
    public var serviceSpec: Swift.String?
    /// A path to the Infrastructure as Code (IaC) file describing infrastructure that a custom component provisions. Components support a single IaC file, even if you use Terraform as your template language.
    public var templateFile: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        deploymentType: ProtonClientTypes.ComponentDeploymentUpdateType? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        serviceSpec: Swift.String? = nil,
        templateFile: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.deploymentType = deploymentType
        self.description = description
        self.name = name
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
        self.serviceSpec = serviceSpec
        self.templateFile = templateFile
    }
}

extension UpdateComponentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateComponentInput(clientToken: \(Swift.String(describing: clientToken)), deploymentType: \(Swift.String(describing: deploymentType)), name: \(Swift.String(describing: name)), serviceInstanceName: \(Swift.String(describing: serviceInstanceName)), serviceName: \(Swift.String(describing: serviceName)), description: \"CONTENT_REDACTED\", serviceSpec: \"CONTENT_REDACTED\", templateFile: \"CONTENT_REDACTED\")"}
}

public struct UpdateComponentOutput {
    /// The detailed data of the updated component.
    /// This member is required.
    public var component: ProtonClientTypes.Component?

    public init(
        component: ProtonClientTypes.Component? = nil
    )
    {
        self.component = component
    }
}

public struct DeleteDeploymentInput {
    /// The ID of the deployment to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension ProtonClientTypes {
    /// The detailed data about the current state of the component.
    public struct ComponentState {
        /// The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.
        public var serviceInstanceName: Swift.String?
        /// The name of the service that serviceInstanceName is associated with. Provided when a component is attached to a service instance.
        public var serviceName: Swift.String?
        /// The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.
        public var serviceSpec: Swift.String?
        /// The template file used.
        public var templateFile: Swift.String?

        public init(
            serviceInstanceName: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            serviceSpec: Swift.String? = nil,
            templateFile: Swift.String? = nil
        )
        {
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
            self.serviceSpec = serviceSpec
            self.templateFile = templateFile
        }
    }

}

extension ProtonClientTypes.ComponentState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComponentState(serviceInstanceName: \(Swift.String(describing: serviceInstanceName)), serviceName: \(Swift.String(describing: serviceName)), serviceSpec: \"CONTENT_REDACTED\", templateFile: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// The detailed data about the current state of the environment.
    public struct EnvironmentState {
        /// The environment spec that was used to create the environment.
        public var spec: Swift.String?
        /// The major version of the environment template that was used to create the environment.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the environment template that was used to create the environment.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the environment template that was used to create the environment.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            spec: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.EnvironmentState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentState(templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), spec: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// The detailed data about the current state of this service instance.
    public struct ServiceInstanceState {
        /// The IDs for the last successful components deployed for this service instance.
        public var lastSuccessfulComponentDeploymentIds: [Swift.String]?
        /// The ID for the last successful environment deployed for this service instance.
        public var lastSuccessfulEnvironmentDeploymentId: Swift.String?
        /// The ID for the last successful service pipeline deployed for this service instance.
        public var lastSuccessfulServicePipelineDeploymentId: Swift.String?
        /// The service spec that was used to create the service instance.
        /// This member is required.
        public var spec: Swift.String?
        /// The major version of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the service template that was used to create the service instance.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            lastSuccessfulComponentDeploymentIds: [Swift.String]? = nil,
            lastSuccessfulEnvironmentDeploymentId: Swift.String? = nil,
            lastSuccessfulServicePipelineDeploymentId: Swift.String? = nil,
            spec: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.lastSuccessfulComponentDeploymentIds = lastSuccessfulComponentDeploymentIds
            self.lastSuccessfulEnvironmentDeploymentId = lastSuccessfulEnvironmentDeploymentId
            self.lastSuccessfulServicePipelineDeploymentId = lastSuccessfulServicePipelineDeploymentId
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServiceInstanceState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceInstanceState(lastSuccessfulComponentDeploymentIds: \(Swift.String(describing: lastSuccessfulComponentDeploymentIds)), lastSuccessfulEnvironmentDeploymentId: \(Swift.String(describing: lastSuccessfulEnvironmentDeploymentId)), lastSuccessfulServicePipelineDeploymentId: \(Swift.String(describing: lastSuccessfulServicePipelineDeploymentId)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), spec: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// The detailed data about the current state of the service pipeline.
    public struct ServicePipelineState {
        /// The service spec that was used to create the service pipeline.
        public var spec: Swift.String?
        /// The major version of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the service template that was used to create the service pipeline.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            spec: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServicePipelineState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServicePipelineState(templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), spec: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// The detailed data about the current state of the deployment.
    public enum DeploymentState {
        /// The state of the service instance associated with the deployment.
        case serviceinstance(ProtonClientTypes.ServiceInstanceState)
        /// The state of the environment associated with the deployment.
        case environment(ProtonClientTypes.EnvironmentState)
        /// The state of the service pipeline associated with the deployment.
        case servicepipeline(ProtonClientTypes.ServicePipelineState)
        /// The state of the component associated with the deployment.
        case component(ProtonClientTypes.ComponentState)
        case sdkUnknown(Swift.String)
    }

}

extension ProtonClientTypes {

    public enum DeploymentTargetResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case component
        case environment
        case serviceInstance
        case servicePipeline
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentTargetResourceType] {
            return [
                .component,
                .environment,
                .serviceInstance,
                .servicePipeline
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .component: return "COMPONENT"
            case .environment: return "ENVIRONMENT"
            case .serviceInstance: return "SERVICE_INSTANCE"
            case .servicePipeline: return "SERVICE_PIPELINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// The detailed information about a deployment.
    public struct Deployment {
        /// The Amazon Resource Name (ARN) of the deployment.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time the deployment was completed.
        public var completedAt: Foundation.Date?
        /// The name of the component associated with this deployment.
        public var componentName: Swift.String?
        /// The date and time the deployment was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The status of the deployment.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// The deployment status message.
        public var deploymentStatusMessage: Swift.String?
        /// The name of the environment associated with this deployment.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the deployment.
        /// This member is required.
        public var id: Swift.String?
        /// The initial state of the target resource at the time of the deployment.
        public var initialState: ProtonClientTypes.DeploymentState?
        /// The ID of the last attempted deployment.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The date and time the deployment was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The ID of the last successful deployment.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the deployment's service instance.
        public var serviceInstanceName: Swift.String?
        /// The name of the service in this deployment.
        public var serviceName: Swift.String?
        /// The Amazon Resource Name (ARN) of the target of the deployment.
        /// This member is required.
        public var targetArn: Swift.String?
        /// The date and time the depoyment target was created.
        /// This member is required.
        public var targetResourceCreatedAt: Foundation.Date?
        /// The resource type of the deployment target. It can be an environment, service, service instance, or component.
        /// This member is required.
        public var targetResourceType: ProtonClientTypes.DeploymentTargetResourceType?
        /// The target state of the target resource at the time of the deployment.
        public var targetState: ProtonClientTypes.DeploymentState?

        public init(
            arn: Swift.String? = nil,
            completedAt: Foundation.Date? = nil,
            componentName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            initialState: ProtonClientTypes.DeploymentState? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            serviceInstanceName: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            targetArn: Swift.String? = nil,
            targetResourceCreatedAt: Foundation.Date? = nil,
            targetResourceType: ProtonClientTypes.DeploymentTargetResourceType? = nil,
            targetState: ProtonClientTypes.DeploymentState? = nil
        )
        {
            self.arn = arn
            self.completedAt = completedAt
            self.componentName = componentName
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.environmentName = environmentName
            self.id = id
            self.initialState = initialState
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastModifiedAt = lastModifiedAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
            self.targetArn = targetArn
            self.targetResourceCreatedAt = targetResourceCreatedAt
            self.targetResourceType = targetResourceType
            self.targetState = targetState
        }
    }

}

extension ProtonClientTypes.Deployment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Deployment(arn: \(Swift.String(describing: arn)), completedAt: \(Swift.String(describing: completedAt)), componentName: \(Swift.String(describing: componentName)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentName: \(Swift.String(describing: environmentName)), id: \(Swift.String(describing: id)), initialState: \(Swift.String(describing: initialState)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), serviceInstanceName: \(Swift.String(describing: serviceInstanceName)), serviceName: \(Swift.String(describing: serviceName)), targetArn: \(Swift.String(describing: targetArn)), targetResourceCreatedAt: \(Swift.String(describing: targetResourceCreatedAt)), targetResourceType: \(Swift.String(describing: targetResourceType)), targetState: \(Swift.String(describing: targetState)), deploymentStatusMessage: \"CONTENT_REDACTED\")"}
}

public struct DeleteDeploymentOutput {
    /// The detailed data of the deployment being deleted.
    public var deployment: ProtonClientTypes.Deployment?

    public init(
        deployment: ProtonClientTypes.Deployment? = nil
    )
    {
        self.deployment = deployment
    }
}

public struct GetDeploymentInput {
    /// The name of a component that you want to get the detailed data for.
    public var componentName: Swift.String?
    /// The name of a environment that you want to get the detailed data for.
    public var environmentName: Swift.String?
    /// The ID of the deployment that you want to get the detailed data for.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the service instance associated with the given deployment ID. serviceName must be specified to identify the service instance.
    public var serviceInstanceName: Swift.String?
    /// The name of the service associated with the given deployment ID.
    public var serviceName: Swift.String?

    public init(
        componentName: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.componentName = componentName
        self.environmentName = environmentName
        self.id = id
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

public struct GetDeploymentOutput {
    /// The detailed data of the requested deployment.
    public var deployment: ProtonClientTypes.Deployment?

    public init(
        deployment: ProtonClientTypes.Deployment? = nil
    )
    {
        self.deployment = deployment
    }
}

public struct ListDeploymentsInput {
    /// The name of a component for result list filtering. Proton returns deployments associated with that component.
    public var componentName: Swift.String?
    /// The name of an environment for result list filtering. Proton returns deployments associated with the environment.
    public var environmentName: Swift.String?
    /// The maximum number of deployments to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next deployment in the array of deployment, after the list of deployment that was previously requested.
    public var nextToken: Swift.String?
    /// The name of a service instance for result list filtering. Proton returns the deployments associated with the service instance.
    public var serviceInstanceName: Swift.String?
    /// The name of a service for result list filtering. Proton returns deployments associated with service instances of the service.
    public var serviceName: Swift.String?

    public init(
        componentName: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.componentName = componentName
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Summary data of the deployment.
    public struct DeploymentSummary {
        /// The Amazon Resource Name (ARN) of the deployment.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time the deployment was completed.
        public var completedAt: Foundation.Date?
        /// The name of the component associated with the deployment.
        public var componentName: Swift.String?
        /// The date and time the deployment was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The current status of the deployment.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// The name of the environment associated with the deployment.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the deployment.
        /// This member is required.
        public var id: Swift.String?
        /// The ID of the last attempted deployment.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The date and time the deployment was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The ID of the last successful deployment.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the service instance associated with the deployment.
        public var serviceInstanceName: Swift.String?
        /// The name of the service associated with the deployment.
        public var serviceName: Swift.String?
        /// The Amazon Resource Name (ARN) of the target of the deployment.
        /// This member is required.
        public var targetArn: Swift.String?
        /// The date and time the target resource was created.
        /// This member is required.
        public var targetResourceCreatedAt: Foundation.Date?
        /// The resource type of the deployment target. It can be an environment, service, service instance, or component.
        /// This member is required.
        public var targetResourceType: ProtonClientTypes.DeploymentTargetResourceType?

        public init(
            arn: Swift.String? = nil,
            completedAt: Foundation.Date? = nil,
            componentName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            serviceInstanceName: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            targetArn: Swift.String? = nil,
            targetResourceCreatedAt: Foundation.Date? = nil,
            targetResourceType: ProtonClientTypes.DeploymentTargetResourceType? = nil
        )
        {
            self.arn = arn
            self.completedAt = completedAt
            self.componentName = componentName
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.environmentName = environmentName
            self.id = id
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastModifiedAt = lastModifiedAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
            self.targetArn = targetArn
            self.targetResourceCreatedAt = targetResourceCreatedAt
            self.targetResourceType = targetResourceType
        }
    }

}

public struct ListDeploymentsOutput {
    /// An array of deployment with summary data.
    /// This member is required.
    public var deployments: [ProtonClientTypes.DeploymentSummary]?
    /// A token that indicates the location of the next deployment in the array of deployment, after the current requested list of deployment.
    public var nextToken: Swift.String?

    public init(
        deployments: [ProtonClientTypes.DeploymentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deployments = deployments
        self.nextToken = nextToken
    }
}

public struct CreateEnvironmentAccountConnectionInput {
    /// When included, if two identical requests are made with the same client token, Proton returns the environment account connection that the first request created.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM service role in the environment account. Proton uses this role to provision infrastructure resources using CodeBuild-based provisioning in the associated environment account.
    public var codebuildRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in the associated environment account. It determines the scope of infrastructure that a component can provision in the account. You must specify componentRoleArn to allow directly defined components to be associated with any environments running in this account. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var componentRoleArn: Swift.String?
    /// The name of the Proton environment that's created in the associated management account.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The ID of the management account that accepts or rejects the environment account connection. You create and manage the Proton environment in this account. If the management account accepts the environment account connection, Proton can use the associated IAM role to provision environment infrastructure resources in the associated environment account.
    /// This member is required.
    public var managementAccountId: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM service role that's created in the environment account. Proton uses this role to provision infrastructure resources in the associated environment account.
    public var roleArn: Swift.String?
    /// An optional list of metadata items that you can associate with the Proton environment account connection. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        codebuildRoleArn: Swift.String? = nil,
        componentRoleArn: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        managementAccountId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.codebuildRoleArn = codebuildRoleArn
        self.componentRoleArn = componentRoleArn
        self.environmentName = environmentName
        self.managementAccountId = managementAccountId
        self.roleArn = roleArn
        self.tags = tags
    }
}

public struct CreateEnvironmentAccountConnectionOutput {
    /// The environment account connection detail data that's returned by Proton.
    /// This member is required.
    public var environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection?

    public init(
        environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection? = nil
    )
    {
        self.environmentAccountConnection = environmentAccountConnection
    }
}

public struct DeleteEnvironmentAccountConnectionInput {
    /// The ID of the environment account connection to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteEnvironmentAccountConnectionOutput {
    /// The detailed data of the environment account connection being deleted.
    public var environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection?

    public init(
        environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection? = nil
    )
    {
        self.environmentAccountConnection = environmentAccountConnection
    }
}

public struct GetEnvironmentAccountConnectionInput {
    /// The ID of the environment account connection that you want to get the detailed data for.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetEnvironmentAccountConnectionOutput {
    /// The detailed data of the requested environment account connection.
    /// This member is required.
    public var environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection?

    public init(
        environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection? = nil
    )
    {
        self.environmentAccountConnection = environmentAccountConnection
    }
}

extension ProtonClientTypes {

    public enum EnvironmentAccountConnectionRequesterAccountType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case environmentAccount
        case managementAccount
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentAccountConnectionRequesterAccountType] {
            return [
                .environmentAccount,
                .managementAccount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .environmentAccount: return "ENVIRONMENT_ACCOUNT"
            case .managementAccount: return "MANAGEMENT_ACCOUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListEnvironmentAccountConnectionsInput {
    /// The environment name that's associated with each listed environment account connection.
    public var environmentName: Swift.String?
    /// The maximum number of environment account connections to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next environment account connection in the array of environment account connections, after the list of environment account connections that was previously requested.
    public var nextToken: Swift.String?
    /// The type of account making the ListEnvironmentAccountConnections request.
    /// This member is required.
    public var requestedBy: ProtonClientTypes.EnvironmentAccountConnectionRequesterAccountType?
    /// The status details for each listed environment account connection.
    public var statuses: [ProtonClientTypes.EnvironmentAccountConnectionStatus]?

    public init(
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        requestedBy: ProtonClientTypes.EnvironmentAccountConnectionRequesterAccountType? = nil,
        statuses: [ProtonClientTypes.EnvironmentAccountConnectionStatus]? = nil
    )
    {
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.requestedBy = requestedBy
        self.statuses = statuses
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton environment account connection resource.
    public struct EnvironmentAccountConnectionSummary {
        /// The Amazon Resource Name (ARN) of the environment account connection.
        /// This member is required.
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in the associated environment account. It determines the scope of infrastructure that a component can provision in the account. The environment account connection must have a componentRoleArn to allow directly defined components to be associated with any environments running in the account. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
        public var componentRoleArn: Swift.String?
        /// The ID of the environment account that's connected to the environment account connection.
        /// This member is required.
        public var environmentAccountId: Swift.String?
        /// The name of the environment that's associated with the environment account connection.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the environment account connection.
        /// This member is required.
        public var id: Swift.String?
        /// The time when the environment account connection was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The ID of the management account that's connected to the environment account connection.
        /// This member is required.
        public var managementAccountId: Swift.String?
        /// The time when the environment account connection request was made.
        /// This member is required.
        public var requestedAt: Foundation.Date?
        /// The IAM service role that's associated with the environment account connection.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The status of the environment account connection.
        /// This member is required.
        public var status: ProtonClientTypes.EnvironmentAccountConnectionStatus?

        public init(
            arn: Swift.String? = nil,
            componentRoleArn: Swift.String? = nil,
            environmentAccountId: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            managementAccountId: Swift.String? = nil,
            requestedAt: Foundation.Date? = nil,
            roleArn: Swift.String? = nil,
            status: ProtonClientTypes.EnvironmentAccountConnectionStatus? = nil
        )
        {
            self.arn = arn
            self.componentRoleArn = componentRoleArn
            self.environmentAccountId = environmentAccountId
            self.environmentName = environmentName
            self.id = id
            self.lastModifiedAt = lastModifiedAt
            self.managementAccountId = managementAccountId
            self.requestedAt = requestedAt
            self.roleArn = roleArn
            self.status = status
        }
    }

}

public struct ListEnvironmentAccountConnectionsOutput {
    /// An array of environment account connections with details that's returned by Proton.
    /// This member is required.
    public var environmentAccountConnections: [ProtonClientTypes.EnvironmentAccountConnectionSummary]?
    /// A token that indicates the location of the next environment account connection in the array of environment account connections, after the current requested list of environment account connections.
    public var nextToken: Swift.String?

    public init(
        environmentAccountConnections: [ProtonClientTypes.EnvironmentAccountConnectionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentAccountConnections = environmentAccountConnections
        self.nextToken = nextToken
    }
}

public struct RejectEnvironmentAccountConnectionInput {
    /// The ID of the environment account connection to reject.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct RejectEnvironmentAccountConnectionOutput {
    /// The environment connection account detail data that's returned by Proton.
    /// This member is required.
    public var environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection?

    public init(
        environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection? = nil
    )
    {
        self.environmentAccountConnection = environmentAccountConnection
    }
}

public struct UpdateEnvironmentAccountConnectionInput {
    /// The Amazon Resource Name (ARN) of an IAM service role in the environment account. Proton uses this role to provision infrastructure resources using CodeBuild-based provisioning in the associated environment account.
    public var codebuildRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in the associated environment account. It determines the scope of infrastructure that a component can provision in the account. The environment account connection must have a componentRoleArn to allow directly defined components to be associated with any environments running in the account. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var componentRoleArn: Swift.String?
    /// The ID of the environment account connection to update.
    /// This member is required.
    public var id: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM service role that's associated with the environment account connection to update.
    public var roleArn: Swift.String?

    public init(
        codebuildRoleArn: Swift.String? = nil,
        componentRoleArn: Swift.String? = nil,
        id: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.codebuildRoleArn = codebuildRoleArn
        self.componentRoleArn = componentRoleArn
        self.id = id
        self.roleArn = roleArn
    }
}

public struct UpdateEnvironmentAccountConnectionOutput {
    /// The environment account connection detail data that's returned by Proton.
    /// This member is required.
    public var environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection?

    public init(
        environmentAccountConnection: ProtonClientTypes.EnvironmentAccountConnection? = nil
    )
    {
        self.environmentAccountConnection = environmentAccountConnection
    }
}

public struct ListEnvironmentOutputsInput {
    /// The ID of the deployment whose outputs you want.
    public var deploymentId: Swift.String?
    /// The environment name.
    /// This member is required.
    public var environmentName: Swift.String?
    /// A token that indicates the location of the next environment output in the array of environment outputs, after the list of environment outputs that was previously requested.
    public var nextToken: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.environmentName = environmentName
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentOutputsOutput {
    /// A token that indicates the location of the next environment output in the array of environment outputs, after the current requested list of environment outputs.
    public var nextToken: Swift.String?
    /// An array of environment outputs with detail data.
    /// This member is required.
    public var outputs: [ProtonClientTypes.Output]?

    public init(
        nextToken: Swift.String? = nil,
        outputs: [ProtonClientTypes.Output]? = nil
    )
    {
        self.nextToken = nextToken
        self.outputs = outputs
    }
}

extension ListEnvironmentOutputsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEnvironmentOutputsOutput(nextToken: \(Swift.String(describing: nextToken)), outputs: \"CONTENT_REDACTED\")"}
}

public struct ListEnvironmentProvisionedResourcesInput {
    /// The environment name.
    /// This member is required.
    public var environmentName: Swift.String?
    /// A token that indicates the location of the next environment provisioned resource in the array of environment provisioned resources, after the list of environment provisioned resources that was previously requested.
    public var nextToken: Swift.String?

    public init(
        environmentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentName = environmentName
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentProvisionedResourcesOutput {
    /// A token that indicates the location of the next environment provisioned resource in the array of provisioned resources, after the current requested list of environment provisioned resources.
    public var nextToken: Swift.String?
    /// An array of environment provisioned resources.
    /// This member is required.
    public var provisionedResources: [ProtonClientTypes.ProvisionedResource]?

    public init(
        nextToken: Swift.String? = nil,
        provisionedResources: [ProtonClientTypes.ProvisionedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.provisionedResources = provisionedResources
    }
}

public struct CreateEnvironmentInput {
    /// The Amazon Resource Name (ARN) of the IAM service role that allows Proton to provision infrastructure using CodeBuild-based provisioning on your behalf. To use CodeBuild-based provisioning for the environment or for any service instance running in the environment, specify either the environmentAccountConnectionId or codebuildRoleArn parameter.
    public var codebuildRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision. You must specify componentRoleArn to allow directly defined components to be associated with this environment. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var componentRoleArn: Swift.String?
    /// A description of the environment that's being created and deployed.
    public var description: Swift.String?
    /// The ID of the environment account connection that you provide if you're provisioning your environment infrastructure resources to an environment account. For more information, see [Environment account connections](https://docs.aws.amazon.com/proton/latest/userguide/ag-env-account-connections.html) in the Proton User guide. To use Amazon Web Services-managed provisioning for the environment, specify either the environmentAccountConnectionId or protonServiceRoleArn parameter and omit the provisioningRepository parameter.
    public var environmentAccountConnectionId: Swift.String?
    /// The name of the environment.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf. To use Amazon Web Services-managed provisioning for the environment, specify either the environmentAccountConnectionId or protonServiceRoleArn parameter and omit the provisioningRepository parameter.
    public var protonServiceRoleArn: Swift.String?
    /// The linked repository that you use to host your rendered infrastructure templates for self-managed provisioning. A linked repository is a repository that has been registered with Proton. For more information, see [CreateRepository]. To use self-managed provisioning for the environment, specify this parameter and omit the environmentAccountConnectionId and protonServiceRoleArn parameters.
    public var provisioningRepository: ProtonClientTypes.RepositoryBranchInput?
    /// A YAML formatted string that provides inputs as defined in the environment template bundle schema file. For more information, see [Environments](https://docs.aws.amazon.com/proton/latest/userguide/ag-environments.html) in the Proton User Guide.
    /// This member is required.
    public var spec: Swift.String?
    /// An optional list of metadata items that you can associate with the Proton environment. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// The major version of the environment template.
    /// This member is required.
    public var templateMajorVersion: Swift.String?
    /// The minor version of the environment template.
    public var templateMinorVersion: Swift.String?
    /// The name of the environment template. For more information, see [Environment Templates](https://docs.aws.amazon.com/proton/latest/userguide/ag-templates.html) in the Proton User Guide.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        codebuildRoleArn: Swift.String? = nil,
        componentRoleArn: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentAccountConnectionId: Swift.String? = nil,
        name: Swift.String? = nil,
        protonServiceRoleArn: Swift.String? = nil,
        provisioningRepository: ProtonClientTypes.RepositoryBranchInput? = nil,
        spec: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.codebuildRoleArn = codebuildRoleArn
        self.componentRoleArn = componentRoleArn
        self.description = description
        self.environmentAccountConnectionId = environmentAccountConnectionId
        self.name = name
        self.protonServiceRoleArn = protonServiceRoleArn
        self.provisioningRepository = provisioningRepository
        self.spec = spec
        self.tags = tags
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
        self.templateName = templateName
    }
}

extension CreateEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentInput(codebuildRoleArn: \(Swift.String(describing: codebuildRoleArn)), componentRoleArn: \(Swift.String(describing: componentRoleArn)), environmentAccountConnectionId: \(Swift.String(describing: environmentAccountConnectionId)), name: \(Swift.String(describing: name)), protonServiceRoleArn: \(Swift.String(describing: protonServiceRoleArn)), provisioningRepository: \(Swift.String(describing: provisioningRepository)), tags: \(Swift.String(describing: tags)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

public struct CreateEnvironmentOutput {
    /// The environment detail data that's returned by Proton.
    /// This member is required.
    public var environment: ProtonClientTypes.Environment?

    public init(
        environment: ProtonClientTypes.Environment? = nil
    )
    {
        self.environment = environment
    }
}

public struct DeleteEnvironmentInput {
    /// The name of the environment to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteEnvironmentOutput {
    /// The detailed data of the environment being deleted.
    public var environment: ProtonClientTypes.Environment?

    public init(
        environment: ProtonClientTypes.Environment? = nil
    )
    {
        self.environment = environment
    }
}

public struct GetEnvironmentInput {
    /// The name of the environment that you want to get the detailed data for.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetEnvironmentOutput {
    /// The detailed data of the requested environment.
    /// This member is required.
    public var environment: ProtonClientTypes.Environment?

    public init(
        environment: ProtonClientTypes.Environment? = nil
    )
    {
        self.environment = environment
    }
}

extension ProtonClientTypes {
    /// A search filter for environment templates.
    public struct EnvironmentTemplateFilter {
        /// Include majorVersion to filter search for a major version.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// Include templateName to filter search for a template name.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            majorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.majorVersion = majorVersion
            self.templateName = templateName
        }
    }

}

public struct ListEnvironmentsInput {
    /// An array of the versions of the environment template.
    public var environmentTemplates: [ProtonClientTypes.EnvironmentTemplateFilter]?
    /// The maximum number of environments to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next environment in the array of environments, after the list of environments that was previously requested.
    public var nextToken: Swift.String?

    public init(
        environmentTemplates: [ProtonClientTypes.EnvironmentTemplateFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentTemplates = environmentTemplates
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton environment resource. An Proton environment is a set of resources shared across Proton services.
    public struct EnvironmentSummary {
        /// The Amazon Resource Name (ARN) of the environment.
        /// This member is required.
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision. The environment must have a componentRoleArn to allow directly defined components to be associated with the environment. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
        public var componentRoleArn: Swift.String?
        /// The time when the environment was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The environment deployment status.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// An environment deployment status message.
        public var deploymentStatusMessage: Swift.String?
        /// The description of the environment.
        public var description: Swift.String?
        /// The ID of the environment account connection that the environment is associated with.
        public var environmentAccountConnectionId: Swift.String?
        /// The ID of the environment account that the environment infrastructure resources are provisioned in.
        public var environmentAccountId: Swift.String?
        /// The ID of the last attempted deployment of this environment.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The time when a deployment of the environment was last attempted.
        /// This member is required.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the environment was last deployed successfully.
        /// This member is required.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The ID of the last successful deployment of this environment.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the environment.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.
        public var protonServiceRoleArn: Swift.String?
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public var provisioning: ProtonClientTypes.Provisioning?
        /// The major version of the environment template.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The minor version of the environment template.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the environment template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            componentRoleArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            description: Swift.String? = nil,
            environmentAccountConnectionId: Swift.String? = nil,
            environmentAccountId: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            name: Swift.String? = nil,
            protonServiceRoleArn: Swift.String? = nil,
            provisioning: ProtonClientTypes.Provisioning? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.componentRoleArn = componentRoleArn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
            self.environmentAccountConnectionId = environmentAccountConnectionId
            self.environmentAccountId = environmentAccountId
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.name = name
            self.protonServiceRoleArn = protonServiceRoleArn
            self.provisioning = provisioning
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.EnvironmentSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentSummary(arn: \(Swift.String(describing: arn)), componentRoleArn: \(Swift.String(describing: componentRoleArn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentAccountConnectionId: \(Swift.String(describing: environmentAccountConnectionId)), environmentAccountId: \(Swift.String(describing: environmentAccountId)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), name: \(Swift.String(describing: name)), protonServiceRoleArn: \(Swift.String(describing: protonServiceRoleArn)), provisioning: \(Swift.String(describing: provisioning)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), deploymentStatusMessage: \"CONTENT_REDACTED\", description: \"CONTENT_REDACTED\")"}
}

public struct ListEnvironmentsOutput {
    /// An array of environment detail data summaries.
    /// This member is required.
    public var environments: [ProtonClientTypes.EnvironmentSummary]?
    /// A token that indicates the location of the next environment in the array of environments, after the current requested list of environments.
    public var nextToken: Swift.String?

    public init(
        environments: [ProtonClientTypes.EnvironmentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environments = environments
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {

    public enum DeploymentUpdateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case currentVersion
        case majorVersion
        case minorVersion
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentUpdateType] {
            return [
                .currentVersion,
                .majorVersion,
                .minorVersion,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .currentVersion: return "CURRENT_VERSION"
            case .majorVersion: return "MAJOR_VERSION"
            case .minorVersion: return "MINOR_VERSION"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct UpdateEnvironmentInput {
    /// The Amazon Resource Name (ARN) of the IAM service role that allows Proton to provision infrastructure using CodeBuild-based provisioning on your behalf.
    public var codebuildRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision. The environment must have a componentRoleArn to allow directly defined components to be associated with the environment. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var componentRoleArn: Swift.String?
    /// There are four modes for updating an environment. The deploymentType field defines the mode. NONE In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated. CURRENT_VERSION In this mode, the environment is deployed and updated with the new spec that you provide. Only requested parameters are updated. Don’t include major or minor version parameters when you use this deployment-type. MINOR_VERSION In this mode, the environment is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use. MAJOR_VERSION In this mode, the environment is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can also specify a different major version that is higher than the major version in use and a minor version (optional).
    /// This member is required.
    public var deploymentType: ProtonClientTypes.DeploymentUpdateType?
    /// A description of the environment update.
    public var description: Swift.String?
    /// The ID of the environment account connection. You can only update to a new environment account connection if it was created in the same environment account that the current environment account connection was created in and is associated with the current environment.
    public var environmentAccountConnectionId: Swift.String?
    /// The name of the environment to update.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make API calls to other services your behalf.
    public var protonServiceRoleArn: Swift.String?
    /// The linked repository that you use to host your rendered infrastructure templates for self-managed provisioning. A linked repository is a repository that has been registered with Proton. For more information, see [CreateRepository].
    public var provisioningRepository: ProtonClientTypes.RepositoryBranchInput?
    /// The formatted specification that defines the update.
    public var spec: Swift.String?
    /// The major version of the environment to update.
    public var templateMajorVersion: Swift.String?
    /// The minor version of the environment to update.
    public var templateMinorVersion: Swift.String?

    public init(
        codebuildRoleArn: Swift.String? = nil,
        componentRoleArn: Swift.String? = nil,
        deploymentType: ProtonClientTypes.DeploymentUpdateType? = nil,
        description: Swift.String? = nil,
        environmentAccountConnectionId: Swift.String? = nil,
        name: Swift.String? = nil,
        protonServiceRoleArn: Swift.String? = nil,
        provisioningRepository: ProtonClientTypes.RepositoryBranchInput? = nil,
        spec: Swift.String? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil
    )
    {
        self.codebuildRoleArn = codebuildRoleArn
        self.componentRoleArn = componentRoleArn
        self.deploymentType = deploymentType
        self.description = description
        self.environmentAccountConnectionId = environmentAccountConnectionId
        self.name = name
        self.protonServiceRoleArn = protonServiceRoleArn
        self.provisioningRepository = provisioningRepository
        self.spec = spec
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
    }
}

extension UpdateEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnvironmentInput(codebuildRoleArn: \(Swift.String(describing: codebuildRoleArn)), componentRoleArn: \(Swift.String(describing: componentRoleArn)), deploymentType: \(Swift.String(describing: deploymentType)), environmentAccountConnectionId: \(Swift.String(describing: environmentAccountConnectionId)), name: \(Swift.String(describing: name)), protonServiceRoleArn: \(Swift.String(describing: protonServiceRoleArn)), provisioningRepository: \(Swift.String(describing: provisioningRepository)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), description: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

public struct UpdateEnvironmentOutput {
    /// The environment detail data that's returned by Proton.
    /// This member is required.
    public var environment: ProtonClientTypes.Environment?

    public init(
        environment: ProtonClientTypes.Environment? = nil
    )
    {
        self.environment = environment
    }
}

public struct CreateEnvironmentTemplateInput {
    /// A description of the environment template.
    public var description: Swift.String?
    /// The environment template name as displayed in the developer interface.
    public var displayName: Swift.String?
    /// A customer provided encryption key that Proton uses to encrypt data.
    public var encryptionKey: Swift.String?
    /// The name of the environment template.
    /// This member is required.
    public var name: Swift.String?
    /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
    public var provisioning: ProtonClientTypes.Provisioning?
    /// An optional list of metadata items that you can associate with the Proton environment template. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        name: Swift.String? = nil,
        provisioning: ProtonClientTypes.Provisioning? = nil,
        tags: [ProtonClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.encryptionKey = encryptionKey
        self.name = name
        self.provisioning = provisioning
        self.tags = tags
    }
}

extension CreateEnvironmentTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentTemplateInput(encryptionKey: \(Swift.String(describing: encryptionKey)), name: \(Swift.String(describing: name)), provisioning: \(Swift.String(describing: provisioning)), tags: \(Swift.String(describing: tags)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// The environment template data.
    public struct EnvironmentTemplate {
        /// The Amazon Resource Name (ARN) of the environment template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the environment template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the environment template.
        public var description: Swift.String?
        /// The name of the environment template as displayed in the developer interface.
        public var displayName: Swift.String?
        /// The customer provided encryption key for the environment template.
        public var encryptionKey: Swift.String?
        /// The time when the environment template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The name of the environment template.
        /// This member is required.
        public var name: Swift.String?
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public var provisioning: ProtonClientTypes.Provisioning?
        /// The ID of the recommended version of the environment template.
        public var recommendedVersion: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            encryptionKey: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            provisioning: ProtonClientTypes.Provisioning? = nil,
            recommendedVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.encryptionKey = encryptionKey
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.provisioning = provisioning
            self.recommendedVersion = recommendedVersion
        }
    }

}

extension ProtonClientTypes.EnvironmentTemplate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentTemplate(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), encryptionKey: \(Swift.String(describing: encryptionKey)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), name: \(Swift.String(describing: name)), provisioning: \(Swift.String(describing: provisioning)), recommendedVersion: \(Swift.String(describing: recommendedVersion)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct CreateEnvironmentTemplateOutput {
    /// The environment template detail data that's returned by Proton.
    /// This member is required.
    public var environmentTemplate: ProtonClientTypes.EnvironmentTemplate?

    public init(
        environmentTemplate: ProtonClientTypes.EnvironmentTemplate? = nil
    )
    {
        self.environmentTemplate = environmentTemplate
    }
}

public struct DeleteEnvironmentTemplateInput {
    /// The name of the environment template to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteEnvironmentTemplateOutput {
    /// The detailed data of the environment template being deleted.
    public var environmentTemplate: ProtonClientTypes.EnvironmentTemplate?

    public init(
        environmentTemplate: ProtonClientTypes.EnvironmentTemplate? = nil
    )
    {
        self.environmentTemplate = environmentTemplate
    }
}

public struct GetEnvironmentTemplateInput {
    /// The name of the environment template that you want to get the detailed data for.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetEnvironmentTemplateOutput {
    /// The detailed data of the requested environment template.
    /// This member is required.
    public var environmentTemplate: ProtonClientTypes.EnvironmentTemplate?

    public init(
        environmentTemplate: ProtonClientTypes.EnvironmentTemplate? = nil
    )
    {
        self.environmentTemplate = environmentTemplate
    }
}

public struct ListEnvironmentTemplatesInput {
    /// The maximum number of environment templates to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next environment template in the array of environment templates, after the list of environment templates that was previously requested.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {
    /// The environment template data.
    public struct EnvironmentTemplateSummary {
        /// The Amazon Resource Name (ARN) of the environment template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the environment template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the environment template.
        public var description: Swift.String?
        /// The name of the environment template as displayed in the developer interface.
        public var displayName: Swift.String?
        /// The time when the environment template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The name of the environment template.
        /// This member is required.
        public var name: Swift.String?
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public var provisioning: ProtonClientTypes.Provisioning?
        /// The recommended version of the environment template.
        public var recommendedVersion: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            provisioning: ProtonClientTypes.Provisioning? = nil,
            recommendedVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.provisioning = provisioning
            self.recommendedVersion = recommendedVersion
        }
    }

}

extension ProtonClientTypes.EnvironmentTemplateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentTemplateSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), name: \(Swift.String(describing: name)), provisioning: \(Swift.String(describing: provisioning)), recommendedVersion: \(Swift.String(describing: recommendedVersion)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct ListEnvironmentTemplatesOutput {
    /// A token that indicates the location of the next environment template in the array of environment templates, after the current requested list of environment templates.
    public var nextToken: Swift.String?
    /// An array of environment templates with detail data.
    /// This member is required.
    public var templates: [ProtonClientTypes.EnvironmentTemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templates: [ProtonClientTypes.EnvironmentTemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templates = templates
    }
}

public struct UpdateEnvironmentTemplateInput {
    /// A description of the environment template update.
    public var description: Swift.String?
    /// The name of the environment template to update as displayed in the developer interface.
    public var displayName: Swift.String?
    /// The name of the environment template to update.
    /// This member is required.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.name = name
    }
}

extension UpdateEnvironmentTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnvironmentTemplateInput(name: \(Swift.String(describing: name)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct UpdateEnvironmentTemplateOutput {
    /// The environment template detail data that's returned by Proton.
    /// This member is required.
    public var environmentTemplate: ProtonClientTypes.EnvironmentTemplate?

    public init(
        environmentTemplate: ProtonClientTypes.EnvironmentTemplate? = nil
    )
    {
        self.environmentTemplate = environmentTemplate
    }
}

extension ProtonClientTypes {
    /// Template bundle S3 bucket data.
    public struct S3ObjectSource {
        /// The name of the S3 bucket that contains a template bundle.
        /// This member is required.
        public var bucket: Swift.String?
        /// The path to the S3 bucket that contains a template bundle.
        /// This member is required.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension ProtonClientTypes {
    /// Template version source data.
    public enum TemplateVersionSourceInput {
        /// An S3 source object that includes the template bundle S3 path and name for a template minor version.
        case s3(ProtonClientTypes.S3ObjectSource)
        case sdkUnknown(Swift.String)
    }

}

public struct CreateEnvironmentTemplateVersionInput {
    /// When included, if two identical requests are made with the same client token, Proton returns the environment template version that the first request created.
    public var clientToken: Swift.String?
    /// A description of the new version of an environment template.
    public var description: Swift.String?
    /// To create a new minor version of the environment template, include major Version. To create a new major and minor version of the environment template, exclude major Version.
    public var majorVersion: Swift.String?
    /// An object that includes the template bundle S3 bucket path and name for the new version of an template.
    /// This member is required.
    public var source: ProtonClientTypes.TemplateVersionSourceInput?
    /// An optional list of metadata items that you can associate with the Proton environment template version. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// The name of the environment template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        majorVersion: Swift.String? = nil,
        source: ProtonClientTypes.TemplateVersionSourceInput? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.majorVersion = majorVersion
        self.source = source
        self.tags = tags
        self.templateName = templateName
    }
}

extension CreateEnvironmentTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentTemplateVersionInput(clientToken: \(Swift.String(describing: clientToken)), majorVersion: \(Swift.String(describing: majorVersion)), source: \(Swift.String(describing: source)), tags: \(Swift.String(describing: tags)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {

    public enum TemplateVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case draft
        case published
        case registrationFailed
        case registrationInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateVersionStatus] {
            return [
                .draft,
                .published,
                .registrationFailed,
                .registrationInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .draft: return "DRAFT"
            case .published: return "PUBLISHED"
            case .registrationFailed: return "REGISTRATION_FAILED"
            case .registrationInProgress: return "REGISTRATION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// The environment template version data.
    public struct EnvironmentTemplateVersion {
        /// The Amazon Resource Name (ARN) of the version of an environment template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the version of an environment template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the minor version of an environment template.
        public var description: Swift.String?
        /// The time when the version of an environment template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The latest major version that's associated with the version of an environment template.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// The minor version of an environment template.
        /// This member is required.
        public var minorVersion: Swift.String?
        /// The recommended minor version of the environment template.
        public var recommendedMinorVersion: Swift.String?
        /// The schema of the version of an environment template.
        public var schema: Swift.String?
        /// The status of the version of an environment template.
        /// This member is required.
        public var status: ProtonClientTypes.TemplateVersionStatus?
        /// The status message of the version of an environment template.
        public var statusMessage: Swift.String?
        /// The name of the version of an environment template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            majorVersion: Swift.String? = nil,
            minorVersion: Swift.String? = nil,
            recommendedMinorVersion: Swift.String? = nil,
            schema: Swift.String? = nil,
            status: ProtonClientTypes.TemplateVersionStatus? = nil,
            statusMessage: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.schema = schema
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.EnvironmentTemplateVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentTemplateVersion(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), majorVersion: \(Swift.String(describing: majorVersion)), minorVersion: \(Swift.String(describing: minorVersion)), recommendedMinorVersion: \(Swift.String(describing: recommendedMinorVersion)), status: \(Swift.String(describing: status)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", schema: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct CreateEnvironmentTemplateVersionOutput {
    /// The environment template detail data that's returned by Proton.
    /// This member is required.
    public var environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion?

    public init(
        environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion? = nil
    )
    {
        self.environmentTemplateVersion = environmentTemplateVersion
    }
}

public struct DeleteEnvironmentTemplateVersionInput {
    /// The environment template major version to delete.
    /// This member is required.
    public var majorVersion: Swift.String?
    /// The environment template minor version to delete.
    /// This member is required.
    public var minorVersion: Swift.String?
    /// The name of the environment template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        majorVersion: Swift.String? = nil,
        minorVersion: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.templateName = templateName
    }
}

public struct DeleteEnvironmentTemplateVersionOutput {
    /// The detailed data of the environment template version being deleted.
    public var environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion?

    public init(
        environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion? = nil
    )
    {
        self.environmentTemplateVersion = environmentTemplateVersion
    }
}

public struct GetEnvironmentTemplateVersionInput {
    /// To get environment template major version detail data, include major Version.
    /// This member is required.
    public var majorVersion: Swift.String?
    /// To get environment template minor version detail data, include minorVersion.
    /// This member is required.
    public var minorVersion: Swift.String?
    /// The name of the environment template a version of which you want to get detailed data for.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        majorVersion: Swift.String? = nil,
        minorVersion: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.templateName = templateName
    }
}

public struct GetEnvironmentTemplateVersionOutput {
    /// The detailed data of the requested environment template version.
    /// This member is required.
    public var environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion?

    public init(
        environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion? = nil
    )
    {
        self.environmentTemplateVersion = environmentTemplateVersion
    }
}

public struct ListEnvironmentTemplateVersionsInput {
    /// To view a list of minor of versions under a major version of an environment template, include major Version. To view a list of major versions of an environment template, exclude major Version.
    public var majorVersion: Swift.String?
    /// The maximum number of major or minor versions of an environment template to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the environment template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        majorVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.majorVersion = majorVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.templateName = templateName
    }
}

extension ProtonClientTypes {
    /// A summary of the version of an environment template detail data.
    public struct EnvironmentTemplateVersionSummary {
        /// The Amazon Resource Name (ARN) of the version of an environment template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the version of an environment template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the version of an environment template.
        public var description: Swift.String?
        /// The time when the version of an environment template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The latest major version that's associated with the version of an environment template.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// The version of an environment template.
        /// This member is required.
        public var minorVersion: Swift.String?
        /// The recommended minor version of the environment template.
        public var recommendedMinorVersion: Swift.String?
        /// The status of the version of an environment template.
        /// This member is required.
        public var status: ProtonClientTypes.TemplateVersionStatus?
        /// The status message of the version of an environment template.
        public var statusMessage: Swift.String?
        /// The name of the environment template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            majorVersion: Swift.String? = nil,
            minorVersion: Swift.String? = nil,
            recommendedMinorVersion: Swift.String? = nil,
            status: ProtonClientTypes.TemplateVersionStatus? = nil,
            statusMessage: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.EnvironmentTemplateVersionSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentTemplateVersionSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), majorVersion: \(Swift.String(describing: majorVersion)), minorVersion: \(Swift.String(describing: minorVersion)), recommendedMinorVersion: \(Swift.String(describing: recommendedMinorVersion)), status: \(Swift.String(describing: status)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct ListEnvironmentTemplateVersionsOutput {
    /// A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.
    public var nextToken: Swift.String?
    /// An array of major or minor versions of an environment template detail data.
    /// This member is required.
    public var templateVersions: [ProtonClientTypes.EnvironmentTemplateVersionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templateVersions: [ProtonClientTypes.EnvironmentTemplateVersionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templateVersions = templateVersions
    }
}

public struct UpdateEnvironmentTemplateVersionInput {
    /// A description of environment template version to update.
    public var description: Swift.String?
    /// To update a major version of an environment template, include major Version.
    /// This member is required.
    public var majorVersion: Swift.String?
    /// To update a minor version of an environment template, include minorVersion.
    /// This member is required.
    public var minorVersion: Swift.String?
    /// The status of the environment template minor version to update.
    public var status: ProtonClientTypes.TemplateVersionStatus?
    /// The name of the environment template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        description: Swift.String? = nil,
        majorVersion: Swift.String? = nil,
        minorVersion: Swift.String? = nil,
        status: ProtonClientTypes.TemplateVersionStatus? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.description = description
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.status = status
        self.templateName = templateName
    }
}

extension UpdateEnvironmentTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnvironmentTemplateVersionInput(majorVersion: \(Swift.String(describing: majorVersion)), minorVersion: \(Swift.String(describing: minorVersion)), status: \(Swift.String(describing: status)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\")"}
}

public struct UpdateEnvironmentTemplateVersionOutput {
    /// The environment template version detail data that's returned by Proton.
    /// This member is required.
    public var environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion?

    public init(
        environmentTemplateVersion: ProtonClientTypes.EnvironmentTemplateVersion? = nil
    )
    {
        self.environmentTemplateVersion = environmentTemplateVersion
    }
}

extension ProtonClientTypes {

    public enum SyncType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// Syncs services and service instances to Proton.
        case serviceSync
        /// Syncs environment and service templates to Proton.
        case templateSync
        case sdkUnknown(Swift.String)

        public static var allCases: [SyncType] {
            return [
                .serviceSync,
                .templateSync
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .serviceSync: return "SERVICE_SYNC"
            case .templateSync: return "TEMPLATE_SYNC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetRepositorySyncStatusInput {
    /// The repository branch.
    /// This member is required.
    public var branch: Swift.String?
    /// The repository name.
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The repository provider.
    /// This member is required.
    public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
    /// The repository sync type.
    /// This member is required.
    public var syncType: ProtonClientTypes.SyncType?

    public init(
        branch: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
        syncType: ProtonClientTypes.SyncType? = nil
    )
    {
        self.branch = branch
        self.repositoryName = repositoryName
        self.repositoryProvider = repositoryProvider
        self.syncType = syncType
    }
}

extension ProtonClientTypes {
    /// Repository sync event detail data for a sync attempt.
    public struct RepositorySyncEvent {
        /// Event detail for a repository sync attempt.
        /// This member is required.
        public var event: Swift.String?
        /// The external ID of the sync event.
        public var externalId: Swift.String?
        /// The time that the sync event occurred.
        /// This member is required.
        public var time: Foundation.Date?
        /// The type of event.
        /// This member is required.
        public var type: Swift.String?

        public init(
            event: Swift.String? = nil,
            externalId: Swift.String? = nil,
            time: Foundation.Date? = nil,
            type: Swift.String? = nil
        )
        {
            self.event = event
            self.externalId = externalId
            self.time = time
            self.type = type
        }
    }

}

extension ProtonClientTypes {

    public enum RepositorySyncStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// The repository sync attempt has failed.
        case failed
        /// A repository sync attempt has been created and will begin soon.
        case initiated
        /// A repository sync attempt has started and work is being done to reconcile the branch.
        case inProgress
        /// The repository sync attempt didn't execute and was queued.
        case queued
        /// The repository sync attempt has completed successfully.
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RepositorySyncStatus] {
            return [
                .failed,
                .initiated,
                .inProgress,
                .queued,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .initiated: return "INITIATED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detail data for a repository sync attempt activated by a push to a repository.
    public struct RepositorySyncAttempt {
        /// Detail data for sync attempt events.
        /// This member is required.
        public var events: [ProtonClientTypes.RepositorySyncEvent]?
        /// The time when the sync attempt started.
        /// This member is required.
        public var startedAt: Foundation.Date?
        /// The sync attempt status.
        /// This member is required.
        public var status: ProtonClientTypes.RepositorySyncStatus?

        public init(
            events: [ProtonClientTypes.RepositorySyncEvent]? = nil,
            startedAt: Foundation.Date? = nil,
            status: ProtonClientTypes.RepositorySyncStatus? = nil
        )
        {
            self.events = events
            self.startedAt = startedAt
            self.status = status
        }
    }

}

public struct GetRepositorySyncStatusOutput {
    /// The repository sync status detail data that's returned by Proton.
    public var latestSync: ProtonClientTypes.RepositorySyncAttempt?

    public init(
        latestSync: ProtonClientTypes.RepositorySyncAttempt? = nil
    )
    {
        self.latestSync = latestSync
    }
}

public struct GetResourcesSummaryInput {

    public init() { }
}

extension ProtonClientTypes {
    /// Summary counts of each Proton resource types.
    public struct ResourceCountsSummary {
        /// The number of resources of this type in the Amazon Web Services account that need a major template version update.
        public var behindMajor: Swift.Int?
        /// The number of resources of this type in the Amazon Web Services account that need a minor template version update.
        public var behindMinor: Swift.Int?
        /// The number of resources of this type in the Amazon Web Services account that failed to deploy.
        public var failed: Swift.Int?
        /// The total number of resources of this type in the Amazon Web Services account.
        /// This member is required.
        public var total: Swift.Int?
        /// The number of resources of this type in the Amazon Web Services account that are up-to-date with their template.
        public var upToDate: Swift.Int?

        public init(
            behindMajor: Swift.Int? = nil,
            behindMinor: Swift.Int? = nil,
            failed: Swift.Int? = nil,
            total: Swift.Int? = nil,
            upToDate: Swift.Int? = nil
        )
        {
            self.behindMajor = behindMajor
            self.behindMinor = behindMinor
            self.failed = failed
            self.total = total
            self.upToDate = upToDate
        }
    }

}

extension ProtonClientTypes {
    /// Summary counts of each Proton resource type.
    public struct CountsSummary {
        /// The total number of components in the Amazon Web Services account. The semantics of the components field are different from the semantics of results for other infrastructure-provisioning resources. That's because at this time components don't have associated templates, therefore they don't have the concept of staleness. The components object will only contain total and failed members.
        public var components: ProtonClientTypes.ResourceCountsSummary?
        /// The total number of environment templates in the Amazon Web Services account. The environmentTemplates object will only contain total members.
        public var environmentTemplates: ProtonClientTypes.ResourceCountsSummary?
        /// The staleness counts for Proton environments in the Amazon Web Services account. The environments object will only contain total members.
        public var environments: ProtonClientTypes.ResourceCountsSummary?
        /// The staleness counts for Proton pipelines in the Amazon Web Services account.
        public var pipelines: ProtonClientTypes.ResourceCountsSummary?
        /// The staleness counts for Proton service instances in the Amazon Web Services account.
        public var serviceInstances: ProtonClientTypes.ResourceCountsSummary?
        /// The total number of service templates in the Amazon Web Services account. The serviceTemplates object will only contain total members.
        public var serviceTemplates: ProtonClientTypes.ResourceCountsSummary?
        /// The staleness counts for Proton services in the Amazon Web Services account.
        public var services: ProtonClientTypes.ResourceCountsSummary?

        public init(
            components: ProtonClientTypes.ResourceCountsSummary? = nil,
            environmentTemplates: ProtonClientTypes.ResourceCountsSummary? = nil,
            environments: ProtonClientTypes.ResourceCountsSummary? = nil,
            pipelines: ProtonClientTypes.ResourceCountsSummary? = nil,
            serviceInstances: ProtonClientTypes.ResourceCountsSummary? = nil,
            serviceTemplates: ProtonClientTypes.ResourceCountsSummary? = nil,
            services: ProtonClientTypes.ResourceCountsSummary? = nil
        )
        {
            self.components = components
            self.environmentTemplates = environmentTemplates
            self.environments = environments
            self.pipelines = pipelines
            self.serviceInstances = serviceInstances
            self.serviceTemplates = serviceTemplates
            self.services = services
        }
    }

}

public struct GetResourcesSummaryOutput {
    /// Summary counts of each Proton resource type.
    /// This member is required.
    public var counts: ProtonClientTypes.CountsSummary?

    public init(
        counts: ProtonClientTypes.CountsSummary? = nil
    )
    {
        self.counts = counts
    }
}

public struct GetServiceInstanceSyncStatusInput {
    /// The name of the service instance that you want the sync status input for.
    /// This member is required.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that the service instance belongs to.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Revision detail data for a commit and push that activates a sync attempt
    public struct Revision {
        /// The repository branch.
        /// This member is required.
        public var branch: Swift.String?
        /// The repository directory changed by a commit and push that activated the sync attempt.
        /// This member is required.
        public var directory: Swift.String?
        /// The repository name.
        /// This member is required.
        public var repositoryName: Swift.String?
        /// The repository provider.
        /// This member is required.
        public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
        /// The secure hash algorithm (SHA) hash for the revision.
        /// This member is required.
        public var sha: Swift.String?

        public init(
            branch: Swift.String? = nil,
            directory: Swift.String? = nil,
            repositoryName: Swift.String? = nil,
            repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
            sha: Swift.String? = nil
        )
        {
            self.branch = branch
            self.directory = directory
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.sha = sha
        }
    }

}

extension ProtonClientTypes {
    /// Detail data for a resource sync event.
    public struct ResourceSyncEvent {
        /// A resource sync event.
        /// This member is required.
        public var event: Swift.String?
        /// The external ID for the event.
        public var externalId: Swift.String?
        /// The time when the event occurred.
        /// This member is required.
        public var time: Foundation.Date?
        /// The type of event.
        /// This member is required.
        public var type: Swift.String?

        public init(
            event: Swift.String? = nil,
            externalId: Swift.String? = nil,
            time: Foundation.Date? = nil,
            type: Swift.String? = nil
        )
        {
            self.event = event
            self.externalId = externalId
            self.time = time
            self.type = type
        }
    }

}

extension ProtonClientTypes {

    public enum ResourceSyncStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// Syncing has failed.
        case failed
        /// A sync attempt has been created and will begin soon.
        case initiated
        /// Syncing has started and work is being done to reconcile state.
        case inProgress
        /// Syncing has completed successfully.
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceSyncStatus] {
            return [
                .failed,
                .initiated,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .initiated: return "INITIATED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detail data for a resource sync attempt activated by a push to a repository.
    public struct ResourceSyncAttempt {
        /// An array of events with detail data.
        /// This member is required.
        public var events: [ProtonClientTypes.ResourceSyncEvent]?
        /// Detail data for the initial repository commit, path and push.
        /// This member is required.
        public var initialRevision: ProtonClientTypes.Revision?
        /// The time when the sync attempt started.
        /// This member is required.
        public var startedAt: Foundation.Date?
        /// The status of the sync attempt.
        /// This member is required.
        public var status: ProtonClientTypes.ResourceSyncStatus?
        /// The resource that is synced to.
        /// This member is required.
        public var target: Swift.String?
        /// Detail data for the target revision.
        /// This member is required.
        public var targetRevision: ProtonClientTypes.Revision?

        public init(
            events: [ProtonClientTypes.ResourceSyncEvent]? = nil,
            initialRevision: ProtonClientTypes.Revision? = nil,
            startedAt: Foundation.Date? = nil,
            status: ProtonClientTypes.ResourceSyncStatus? = nil,
            target: Swift.String? = nil,
            targetRevision: ProtonClientTypes.Revision? = nil
        )
        {
            self.events = events
            self.initialRevision = initialRevision
            self.startedAt = startedAt
            self.status = status
            self.target = target
            self.targetRevision = targetRevision
        }
    }

}

public struct GetServiceInstanceSyncStatusOutput {
    /// The service instance sync desired state that's returned by Proton
    public var desiredState: ProtonClientTypes.Revision?
    /// The detailed data of the latest successful sync with the service instance.
    public var latestSuccessfulSync: ProtonClientTypes.ResourceSyncAttempt?
    /// The detailed data of the latest sync with the service instance.
    public var latestSync: ProtonClientTypes.ResourceSyncAttempt?

    public init(
        desiredState: ProtonClientTypes.Revision? = nil,
        latestSuccessfulSync: ProtonClientTypes.ResourceSyncAttempt? = nil,
        latestSync: ProtonClientTypes.ResourceSyncAttempt? = nil
    )
    {
        self.desiredState = desiredState
        self.latestSuccessfulSync = latestSuccessfulSync
        self.latestSync = latestSync
    }
}

extension ProtonClientTypes {

    public enum TemplateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case environment
        case service
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateType] {
            return [
                .environment,
                .service
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .environment: return "ENVIRONMENT"
            case .service: return "SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTemplateSyncStatusInput {
    /// The template name.
    /// This member is required.
    public var templateName: Swift.String?
    /// The template type.
    /// This member is required.
    public var templateType: ProtonClientTypes.TemplateType?
    /// The template major version.
    /// This member is required.
    public var templateVersion: Swift.String?

    public init(
        templateName: Swift.String? = nil,
        templateType: ProtonClientTypes.TemplateType? = nil,
        templateVersion: Swift.String? = nil
    )
    {
        self.templateName = templateName
        self.templateType = templateType
        self.templateVersion = templateVersion
    }
}

public struct GetTemplateSyncStatusOutput {
    /// The template sync desired state that's returned by Proton.
    public var desiredState: ProtonClientTypes.Revision?
    /// The details of the last successful sync that's returned by Proton.
    public var latestSuccessfulSync: ProtonClientTypes.ResourceSyncAttempt?
    /// The details of the last sync that's returned by Proton.
    public var latestSync: ProtonClientTypes.ResourceSyncAttempt?

    public init(
        desiredState: ProtonClientTypes.Revision? = nil,
        latestSuccessfulSync: ProtonClientTypes.ResourceSyncAttempt? = nil,
        latestSync: ProtonClientTypes.ResourceSyncAttempt? = nil
    )
    {
        self.desiredState = desiredState
        self.latestSuccessfulSync = latestSuccessfulSync
        self.latestSync = latestSync
    }
}

public struct ListRepositorySyncDefinitionsInput {
    /// A token that indicates the location of the next repository sync definition in the array of repository sync definitions, after the list of repository sync definitions previously requested.
    public var nextToken: Swift.String?
    /// The repository name.
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The repository provider.
    /// This member is required.
    public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
    /// The sync type. The only supported value is TEMPLATE_SYNC.
    /// This member is required.
    public var syncType: ProtonClientTypes.SyncType?

    public init(
        nextToken: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
        syncType: ProtonClientTypes.SyncType? = nil
    )
    {
        self.nextToken = nextToken
        self.repositoryName = repositoryName
        self.repositoryProvider = repositoryProvider
        self.syncType = syncType
    }
}

extension ProtonClientTypes {
    /// A repository sync definition.
    public struct RepositorySyncDefinition {
        /// The repository branch.
        /// This member is required.
        public var branch: Swift.String?
        /// The directory in the repository.
        /// This member is required.
        public var directory: Swift.String?
        /// The resource that is synced from.
        /// This member is required.
        public var parent: Swift.String?
        /// The resource that is synced to.
        /// This member is required.
        public var target: Swift.String?

        public init(
            branch: Swift.String? = nil,
            directory: Swift.String? = nil,
            parent: Swift.String? = nil,
            target: Swift.String? = nil
        )
        {
            self.branch = branch
            self.directory = directory
            self.parent = parent
            self.target = target
        }
    }

}

public struct ListRepositorySyncDefinitionsOutput {
    /// A token that indicates the location of the next repository sync definition in the array of repository sync definitions, after the current requested list of repository sync definitions.
    public var nextToken: Swift.String?
    /// An array of repository sync definitions.
    /// This member is required.
    public var syncDefinitions: [ProtonClientTypes.RepositorySyncDefinition]?

    public init(
        nextToken: Swift.String? = nil,
        syncDefinitions: [ProtonClientTypes.RepositorySyncDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.syncDefinitions = syncDefinitions
    }
}

public struct ListTagsForResourceInput {
    /// The maximum number of tags to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next resource tag in the array of resource tags, after the list of resource tags that was previously requested.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource for the listed tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// A token that indicates the location of the next resource tag in the array of resource tags, after the current requested list of resource tags.
    public var nextToken: Swift.String?
    /// A list of resource tags with detail data.
    /// This member is required.
    public var tags: [ProtonClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

extension ProtonClientTypes {

    /// The state that a PR-based deployment can be updated to.
    public enum ResourceDeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceDeploymentStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct NotifyResourceDeploymentStatusChangeInput {
    /// The deployment ID for your provisioned resource.
    public var deploymentId: Swift.String?
    /// The provisioned resource state change detail data that's returned by Proton.
    public var outputs: [ProtonClientTypes.Output]?
    /// The provisioned resource Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The status of your provisioned resource.
    public var status: ProtonClientTypes.ResourceDeploymentStatus?
    /// The deployment status message for your provisioned resource.
    public var statusMessage: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        outputs: [ProtonClientTypes.Output]? = nil,
        resourceArn: Swift.String? = nil,
        status: ProtonClientTypes.ResourceDeploymentStatus? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.outputs = outputs
        self.resourceArn = resourceArn
        self.status = status
        self.statusMessage = statusMessage
    }
}

extension NotifyResourceDeploymentStatusChangeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotifyResourceDeploymentStatusChangeInput(deploymentId: \(Swift.String(describing: deploymentId)), resourceArn: \(Swift.String(describing: resourceArn)), status: \(Swift.String(describing: status)), outputs: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct NotifyResourceDeploymentStatusChangeOutput {

    public init() { }
}

public struct CreateRepositoryInput {
    /// The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account. For more information, see [Setting up for Proton](https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html) in the Proton User Guide.
    /// This member is required.
    public var connectionArn: Swift.String?
    /// The ARN of your customer Amazon Web Services Key Management Service (Amazon Web Services KMS) key.
    public var encryptionKey: Swift.String?
    /// The repository name (for example, myrepos/myrepo).
    /// This member is required.
    public var name: Swift.String?
    /// The repository provider.
    /// This member is required.
    public var provider: ProtonClientTypes.RepositoryProvider?
    /// An optional list of metadata items that you can associate with the Proton repository. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?

    public init(
        connectionArn: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        name: Swift.String? = nil,
        provider: ProtonClientTypes.RepositoryProvider? = nil,
        tags: [ProtonClientTypes.Tag]? = nil
    )
    {
        self.connectionArn = connectionArn
        self.encryptionKey = encryptionKey
        self.name = name
        self.provider = provider
        self.tags = tags
    }
}

extension ProtonClientTypes {
    /// Detailed data of a linked repository—a repository that has been registered with Proton.
    public struct Repository {
        /// The Amazon Resource Name (ARN) of the linked repository.
        /// This member is required.
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.
        /// This member is required.
        public var connectionArn: Swift.String?
        /// Your customer Amazon Web Services KMS encryption key.
        public var encryptionKey: Swift.String?
        /// The repository name.
        /// This member is required.
        public var name: Swift.String?
        /// The repository provider.
        /// This member is required.
        public var provider: ProtonClientTypes.RepositoryProvider?

        public init(
            arn: Swift.String? = nil,
            connectionArn: Swift.String? = nil,
            encryptionKey: Swift.String? = nil,
            name: Swift.String? = nil,
            provider: ProtonClientTypes.RepositoryProvider? = nil
        )
        {
            self.arn = arn
            self.connectionArn = connectionArn
            self.encryptionKey = encryptionKey
            self.name = name
            self.provider = provider
        }
    }

}

public struct CreateRepositoryOutput {
    /// The repository link's detail data that's returned by Proton.
    /// This member is required.
    public var repository: ProtonClientTypes.Repository?

    public init(
        repository: ProtonClientTypes.Repository? = nil
    )
    {
        self.repository = repository
    }
}

public struct DeleteRepositoryInput {
    /// The repository name.
    /// This member is required.
    public var name: Swift.String?
    /// The repository provider.
    /// This member is required.
    public var provider: ProtonClientTypes.RepositoryProvider?

    public init(
        name: Swift.String? = nil,
        provider: ProtonClientTypes.RepositoryProvider? = nil
    )
    {
        self.name = name
        self.provider = provider
    }
}

public struct DeleteRepositoryOutput {
    /// The deleted repository link's detail data that's returned by Proton.
    public var repository: ProtonClientTypes.Repository?

    public init(
        repository: ProtonClientTypes.Repository? = nil
    )
    {
        self.repository = repository
    }
}

public struct GetRepositoryInput {
    /// The repository name, for example myrepos/myrepo.
    /// This member is required.
    public var name: Swift.String?
    /// The repository provider.
    /// This member is required.
    public var provider: ProtonClientTypes.RepositoryProvider?

    public init(
        name: Swift.String? = nil,
        provider: ProtonClientTypes.RepositoryProvider? = nil
    )
    {
        self.name = name
        self.provider = provider
    }
}

public struct GetRepositoryOutput {
    /// The repository link's detail data that's returned by Proton.
    /// This member is required.
    public var repository: ProtonClientTypes.Repository?

    public init(
        repository: ProtonClientTypes.Repository? = nil
    )
    {
        self.repository = repository
    }
}

public struct ListRepositoriesInput {
    /// The maximum number of repositories to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next repository in the array of repositories, after the list of repositories previously requested.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {
    /// Summary data of a linked repository—a repository that has been registered with Proton.
    public struct RepositorySummary {
        /// The Amazon Resource Name (ARN) of the linked repository.
        /// This member is required.
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the of your connection that connects Proton to your repository.
        /// This member is required.
        public var connectionArn: Swift.String?
        /// The repository name.
        /// This member is required.
        public var name: Swift.String?
        /// The repository provider.
        /// This member is required.
        public var provider: ProtonClientTypes.RepositoryProvider?

        public init(
            arn: Swift.String? = nil,
            connectionArn: Swift.String? = nil,
            name: Swift.String? = nil,
            provider: ProtonClientTypes.RepositoryProvider? = nil
        )
        {
            self.arn = arn
            self.connectionArn = connectionArn
            self.name = name
            self.provider = provider
        }
    }

}

public struct ListRepositoriesOutput {
    /// A token that indicates the location of the next repository in the array of repositories, after the current requested list of repositories.
    public var nextToken: Swift.String?
    /// An array of repository links.
    /// This member is required.
    public var repositories: [ProtonClientTypes.RepositorySummary]?

    public init(
        nextToken: Swift.String? = nil,
        repositories: [ProtonClientTypes.RepositorySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.repositories = repositories
    }
}

public struct ListServiceInstanceOutputsInput {
    /// The ID of the deployment whose outputs you want.
    public var deploymentId: Swift.String?
    /// A token that indicates the location of the next output in the array of outputs, after the list of outputs that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the service instance whose outputs you want.
    /// This member is required.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that serviceInstanceName is associated to.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.nextToken = nextToken
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

public struct ListServiceInstanceOutputsOutput {
    /// A token that indicates the location of the next output in the array of outputs, after the current requested list of outputs.
    public var nextToken: Swift.String?
    /// An array of service instance Infrastructure as Code (IaC) outputs.
    /// This member is required.
    public var outputs: [ProtonClientTypes.Output]?

    public init(
        nextToken: Swift.String? = nil,
        outputs: [ProtonClientTypes.Output]? = nil
    )
    {
        self.nextToken = nextToken
        self.outputs = outputs
    }
}

extension ListServiceInstanceOutputsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServiceInstanceOutputsOutput(nextToken: \(Swift.String(describing: nextToken)), outputs: \"CONTENT_REDACTED\")"}
}

public struct ListServiceInstanceProvisionedResourcesInput {
    /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the list of provisioned resources that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the service instance whose provisioned resources you want.
    /// This member is required.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that serviceInstanceName is associated to.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

public struct ListServiceInstanceProvisionedResourcesOutput {
    /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the current requested list of provisioned resources.
    public var nextToken: Swift.String?
    /// An array of provisioned resources for a service instance.
    /// This member is required.
    public var provisionedResources: [ProtonClientTypes.ProvisionedResource]?

    public init(
        nextToken: Swift.String? = nil,
        provisionedResources: [ProtonClientTypes.ProvisionedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.provisionedResources = provisionedResources
    }
}

public struct CreateServiceInstanceInput {
    /// The client token of the service instance to create.
    public var clientToken: Swift.String?
    /// The name of the service instance to create.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the service the service instance is added to.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The spec for the service instance you want to create.
    /// This member is required.
    public var spec: Swift.String?
    /// An optional list of metadata items that you can associate with the Proton service instance. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// To create a new major and minor version of the service template, exclude major Version.
    public var templateMajorVersion: Swift.String?
    /// To create a new minor version of the service template, include a major Version.
    public var templateMinorVersion: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        spec: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.name = name
        self.serviceName = serviceName
        self.spec = spec
        self.tags = tags
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
    }
}

extension CreateServiceInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceInstanceInput(clientToken: \(Swift.String(describing: clientToken)), name: \(Swift.String(describing: name)), serviceName: \(Swift.String(describing: serviceName)), tags: \(Swift.String(describing: tags)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), spec: \"CONTENT_REDACTED\")"}
}

public struct CreateServiceInstanceOutput {
    /// The detailed data of the service instance being created.
    /// This member is required.
    public var serviceInstance: ProtonClientTypes.ServiceInstance?

    public init(
        serviceInstance: ProtonClientTypes.ServiceInstance? = nil
    )
    {
        self.serviceInstance = serviceInstance
    }
}

public struct GetServiceInstanceInput {
    /// The name of a service instance that you want to get the detailed data for.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the service that you want the service instance input for.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        name: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.name = name
        self.serviceName = serviceName
    }
}

public struct GetServiceInstanceOutput {
    /// The detailed data of the requested service instance.
    /// This member is required.
    public var serviceInstance: ProtonClientTypes.ServiceInstance?

    public init(
        serviceInstance: ProtonClientTypes.ServiceInstance? = nil
    )
    {
        self.serviceInstance = serviceInstance
    }
}

extension ProtonClientTypes {

    public enum ListServiceInstancesFilterBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdAtAfter
        case createdAtBefore
        case deployedTemplateVersionStatus
        case deploymentStatus
        case environmentName
        case lastDeploymentAttemptedAtAfter
        case lastDeploymentAttemptedAtBefore
        case name
        case serviceName
        case templateName
        case sdkUnknown(Swift.String)

        public static var allCases: [ListServiceInstancesFilterBy] {
            return [
                .createdAtAfter,
                .createdAtBefore,
                .deployedTemplateVersionStatus,
                .deploymentStatus,
                .environmentName,
                .lastDeploymentAttemptedAtAfter,
                .lastDeploymentAttemptedAtBefore,
                .name,
                .serviceName,
                .templateName
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdAtAfter: return "createdAtAfter"
            case .createdAtBefore: return "createdAtBefore"
            case .deployedTemplateVersionStatus: return "deployedTemplateVersionStatus"
            case .deploymentStatus: return "deploymentStatus"
            case .environmentName: return "environmentName"
            case .lastDeploymentAttemptedAtAfter: return "lastDeploymentAttemptedAtAfter"
            case .lastDeploymentAttemptedAtBefore: return "lastDeploymentAttemptedAtBefore"
            case .name: return "name"
            case .serviceName: return "serviceName"
            case .templateName: return "templateName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// A filtering criterion to scope down the result list of the [ListServiceInstances] action.
    public struct ListServiceInstancesFilter {
        /// The name of a filtering criterion.
        public var key: ProtonClientTypes.ListServiceInstancesFilterBy?
        /// A value to filter by. With the date/time keys (*At{Before,After}), the value is a valid [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339.html) string with no UTC offset and with an optional fractional precision (for example, 1985-04-12T23:20:50.52Z).
        public var value: Swift.String?

        public init(
            key: ProtonClientTypes.ListServiceInstancesFilterBy? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ProtonClientTypes {

    public enum ListServiceInstancesSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdAt
        case deploymentStatus
        case environmentName
        case lastDeploymentAttemptedAt
        case name
        case serviceName
        case templateName
        case sdkUnknown(Swift.String)

        public static var allCases: [ListServiceInstancesSortBy] {
            return [
                .createdAt,
                .deploymentStatus,
                .environmentName,
                .lastDeploymentAttemptedAt,
                .name,
                .serviceName,
                .templateName
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "createdAt"
            case .deploymentStatus: return "deploymentStatus"
            case .environmentName: return "environmentName"
            case .lastDeploymentAttemptedAt: return "lastDeploymentAttemptedAt"
            case .name: return "name"
            case .serviceName: return "serviceName"
            case .templateName: return "templateName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {

    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListServiceInstancesInput {
    /// An array of filtering criteria that scope down the result list. By default, all service instances in the Amazon Web Services account are returned.
    public var filters: [ProtonClientTypes.ListServiceInstancesFilter]?
    /// The maximum number of service instances to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next service in the array of service instances, after the list of service instances that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the service that the service instance belongs to.
    public var serviceName: Swift.String?
    /// The field that the result list is sorted by. When you choose to sort by serviceName, service instances within each service are sorted by service instance name. Default: serviceName
    public var sortBy: ProtonClientTypes.ListServiceInstancesSortBy?
    /// Result list sort order. Default: ASCENDING
    public var sortOrder: ProtonClientTypes.SortOrder?

    public init(
        filters: [ProtonClientTypes.ListServiceInstancesFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        sortBy: ProtonClientTypes.ListServiceInstancesSortBy? = nil,
        sortOrder: ProtonClientTypes.SortOrder? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.serviceName = serviceName
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton service instance resource.
    public struct ServiceInstanceSummary {
        /// The Amazon Resource Name (ARN) of the service instance.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the service instance was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The service instance deployment status.
        /// This member is required.
        public var deploymentStatus: ProtonClientTypes.DeploymentStatus?
        /// A service instance deployment status message.
        public var deploymentStatusMessage: Swift.String?
        /// The name of the environment that the service instance was deployed into.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the last attempted deployment of this service instance.
        public var lastAttemptedDeploymentId: Swift.String?
        /// The time when a deployment of the service was last attempted.
        /// This member is required.
        public var lastDeploymentAttemptedAt: Foundation.Date?
        /// The time when the service was last deployed successfully.
        /// This member is required.
        public var lastDeploymentSucceededAt: Foundation.Date?
        /// The ID of the last successful deployment of this service instance.
        public var lastSucceededDeploymentId: Swift.String?
        /// The name of the service instance.
        /// This member is required.
        public var name: Swift.String?
        /// The name of the service that the service instance belongs to.
        /// This member is required.
        public var serviceName: Swift.String?
        /// The service instance template major version.
        /// This member is required.
        public var templateMajorVersion: Swift.String?
        /// The service instance template minor version.
        /// This member is required.
        public var templateMinorVersion: Swift.String?
        /// The name of the service template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deploymentStatus: ProtonClientTypes.DeploymentStatus? = nil,
            deploymentStatusMessage: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            lastAttemptedDeploymentId: Swift.String? = nil,
            lastDeploymentAttemptedAt: Foundation.Date? = nil,
            lastDeploymentSucceededAt: Foundation.Date? = nil,
            lastSucceededDeploymentId: Swift.String? = nil,
            name: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            templateMajorVersion: Swift.String? = nil,
            templateMinorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.environmentName = environmentName
            self.lastAttemptedDeploymentId = lastAttemptedDeploymentId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.lastSucceededDeploymentId = lastSucceededDeploymentId
            self.name = name
            self.serviceName = serviceName
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServiceInstanceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceInstanceSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), deploymentStatus: \(Swift.String(describing: deploymentStatus)), environmentName: \(Swift.String(describing: environmentName)), lastAttemptedDeploymentId: \(Swift.String(describing: lastAttemptedDeploymentId)), lastDeploymentAttemptedAt: \(Swift.String(describing: lastDeploymentAttemptedAt)), lastDeploymentSucceededAt: \(Swift.String(describing: lastDeploymentSucceededAt)), lastSucceededDeploymentId: \(Swift.String(describing: lastSucceededDeploymentId)), name: \(Swift.String(describing: name)), serviceName: \(Swift.String(describing: serviceName)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), deploymentStatusMessage: \"CONTENT_REDACTED\")"}
}

public struct ListServiceInstancesOutput {
    /// A token that indicates the location of the next service instance in the array of service instances, after the current requested list of service instances.
    public var nextToken: Swift.String?
    /// An array of service instances with summary data.
    /// This member is required.
    public var serviceInstances: [ProtonClientTypes.ServiceInstanceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        serviceInstances: [ProtonClientTypes.ServiceInstanceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceInstances = serviceInstances
    }
}

public struct UpdateServiceInstanceInput {
    /// The client token of the service instance to update.
    public var clientToken: Swift.String?
    /// The deployment type. It defines the mode for updating a service instance, as follows: NONE In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated. CURRENT_VERSION In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. Don’t include major or minor version parameters when you use this deployment type. MINOR_VERSION In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use. MAJOR_VERSION In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.
    /// This member is required.
    public var deploymentType: ProtonClientTypes.DeploymentUpdateType?
    /// The name of the service instance to update.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the service that the service instance belongs to.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The formatted specification that defines the service instance update.
    public var spec: Swift.String?
    /// The major version of the service template to update.
    public var templateMajorVersion: Swift.String?
    /// The minor version of the service template to update.
    public var templateMinorVersion: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        deploymentType: ProtonClientTypes.DeploymentUpdateType? = nil,
        name: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        spec: Swift.String? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.deploymentType = deploymentType
        self.name = name
        self.serviceName = serviceName
        self.spec = spec
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
    }
}

extension UpdateServiceInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceInstanceInput(clientToken: \(Swift.String(describing: clientToken)), deploymentType: \(Swift.String(describing: deploymentType)), name: \(Swift.String(describing: name)), serviceName: \(Swift.String(describing: serviceName)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), spec: \"CONTENT_REDACTED\")"}
}

public struct UpdateServiceInstanceOutput {
    /// The service instance summary data that's returned by Proton.
    /// This member is required.
    public var serviceInstance: ProtonClientTypes.ServiceInstance?

    public init(
        serviceInstance: ProtonClientTypes.ServiceInstance? = nil
    )
    {
        self.serviceInstance = serviceInstance
    }
}

public struct ListServicePipelineOutputsInput {
    /// The ID of the deployment you want the outputs for.
    public var deploymentId: Swift.String?
    /// A token that indicates the location of the next output in the array of outputs, after the list of outputs that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the service whose pipeline's outputs you want.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.nextToken = nextToken
        self.serviceName = serviceName
    }
}

public struct ListServicePipelineOutputsOutput {
    /// A token that indicates the location of the next output in the array of outputs, after the current requested list of outputs.
    public var nextToken: Swift.String?
    /// An array of service pipeline Infrastructure as Code (IaC) outputs.
    /// This member is required.
    public var outputs: [ProtonClientTypes.Output]?

    public init(
        nextToken: Swift.String? = nil,
        outputs: [ProtonClientTypes.Output]? = nil
    )
    {
        self.nextToken = nextToken
        self.outputs = outputs
    }
}

extension ListServicePipelineOutputsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListServicePipelineOutputsOutput(nextToken: \(Swift.String(describing: nextToken)), outputs: \"CONTENT_REDACTED\")"}
}

public struct ListServicePipelineProvisionedResourcesInput {
    /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the list of provisioned resources that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the service whose pipeline's provisioned resources you want.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceName = serviceName
    }
}

public struct ListServicePipelineProvisionedResourcesOutput {
    /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the current requested list of provisioned resources.
    public var nextToken: Swift.String?
    /// An array of provisioned resources for a service and pipeline.
    /// This member is required.
    public var provisionedResources: [ProtonClientTypes.ProvisionedResource]?

    public init(
        nextToken: Swift.String? = nil,
        provisionedResources: [ProtonClientTypes.ProvisionedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.provisionedResources = provisionedResources
    }
}

public struct UpdateServicePipelineInput {
    /// The deployment type. There are four modes for updating a service pipeline. The deploymentType field defines the mode. NONE In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated. CURRENT_VERSION In this mode, the service pipeline is deployed and updated with the new spec that you provide. Only requested parameters are updated. Don’t include major or minor version parameters when you use this deployment-type. MINOR_VERSION In this mode, the service pipeline is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can specify a different minor version of the current major version in use. MAJOR_VERSION In this mode, the service pipeline is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.
    /// This member is required.
    public var deploymentType: ProtonClientTypes.DeploymentUpdateType?
    /// The name of the service to that the pipeline is associated with.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The spec for the service pipeline to update.
    /// This member is required.
    public var spec: Swift.String?
    /// The major version of the service template that was used to create the service that the pipeline is associated with.
    public var templateMajorVersion: Swift.String?
    /// The minor version of the service template that was used to create the service that the pipeline is associated with.
    public var templateMinorVersion: Swift.String?

    public init(
        deploymentType: ProtonClientTypes.DeploymentUpdateType? = nil,
        serviceName: Swift.String? = nil,
        spec: Swift.String? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil
    )
    {
        self.deploymentType = deploymentType
        self.serviceName = serviceName
        self.spec = spec
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
    }
}

extension UpdateServicePipelineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServicePipelineInput(deploymentType: \(Swift.String(describing: deploymentType)), serviceName: \(Swift.String(describing: serviceName)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), spec: \"CONTENT_REDACTED\")"}
}

public struct UpdateServicePipelineOutput {
    /// The pipeline details that are returned by Proton.
    /// This member is required.
    public var pipeline: ProtonClientTypes.ServicePipeline?

    public init(
        pipeline: ProtonClientTypes.ServicePipeline? = nil
    )
    {
        self.pipeline = pipeline
    }
}

public struct CreateServiceInput {
    /// The name of the code repository branch that holds the code that's deployed in Proton. Don't include this parameter if your service template doesn't include a service pipeline.
    public var branchName: Swift.String?
    /// A description of the Proton service.
    public var description: Swift.String?
    /// The service name.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the repository connection. For more information, see [Setting up an AWS CodeStar connection](https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html#setting-up-vcontrol) in the Proton User Guide. Don't include this parameter if your service template doesn't include a service pipeline.
    public var repositoryConnectionArn: Swift.String?
    /// The ID of the code repository. Don't include this parameter if your service template doesn't include a service pipeline.
    public var repositoryId: Swift.String?
    /// A link to a spec file that provides inputs as defined in the service template bundle schema file. The spec file is in YAML format. Don’t include pipeline inputs in the spec if your service template doesn’t include a service pipeline. For more information, see [Create a service](https://docs.aws.amazon.com/proton/latest/userguide/ag-create-svc.html) in the Proton User Guide.
    /// This member is required.
    public var spec: Swift.String?
    /// An optional list of metadata items that you can associate with the Proton service. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// The major version of the service template that was used to create the service.
    /// This member is required.
    public var templateMajorVersion: Swift.String?
    /// The minor version of the service template that was used to create the service.
    public var templateMinorVersion: Swift.String?
    /// The name of the service template that's used to create the service.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        branchName: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        repositoryConnectionArn: Swift.String? = nil,
        repositoryId: Swift.String? = nil,
        spec: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.branchName = branchName
        self.description = description
        self.name = name
        self.repositoryConnectionArn = repositoryConnectionArn
        self.repositoryId = repositoryId
        self.spec = spec
        self.tags = tags
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
        self.templateName = templateName
    }
}

extension CreateServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceInput(branchName: \(Swift.String(describing: branchName)), name: \(Swift.String(describing: name)), repositoryConnectionArn: \(Swift.String(describing: repositoryConnectionArn)), repositoryId: \(Swift.String(describing: repositoryId)), tags: \(Swift.String(describing: tags)), templateMajorVersion: \(Swift.String(describing: templateMajorVersion)), templateMinorVersion: \(Swift.String(describing: templateMinorVersion)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {

    public enum ServiceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case createFailedCleanupComplete
        case createFailedCleanupFailed
        case createFailedCleanupInProgress
        case createInProgress
        case deleteFailed
        case deleteInProgress
        case updateCompleteCleanupFailed
        case updateFailed
        case updateFailedCleanupComplete
        case updateFailedCleanupFailed
        case updateFailedCleanupInProgress
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceStatus] {
            return [
                .active,
                .createFailed,
                .createFailedCleanupComplete,
                .createFailedCleanupFailed,
                .createFailedCleanupInProgress,
                .createInProgress,
                .deleteFailed,
                .deleteInProgress,
                .updateCompleteCleanupFailed,
                .updateFailed,
                .updateFailedCleanupComplete,
                .updateFailedCleanupFailed,
                .updateFailedCleanupInProgress,
                .updateInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .createFailedCleanupComplete: return "CREATE_FAILED_CLEANUP_COMPLETE"
            case .createFailedCleanupFailed: return "CREATE_FAILED_CLEANUP_FAILED"
            case .createFailedCleanupInProgress: return "CREATE_FAILED_CLEANUP_IN_PROGRESS"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .updateCompleteCleanupFailed: return "UPDATE_COMPLETE_CLEANUP_FAILED"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateFailedCleanupComplete: return "UPDATE_FAILED_CLEANUP_COMPLETE"
            case .updateFailedCleanupFailed: return "UPDATE_FAILED_CLEANUP_FAILED"
            case .updateFailedCleanupInProgress: return "UPDATE_FAILED_CLEANUP_IN_PROGRESS"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detailed data of an Proton service resource.
    public struct Service {
        /// The Amazon Resource Name (ARN) of the service.
        /// This member is required.
        public var arn: Swift.String?
        /// The name of the code repository branch that holds the code that's deployed in Proton.
        public var branchName: Swift.String?
        /// The time when the service was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the service.
        public var description: Swift.String?
        /// The time when the service was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The name of the service.
        /// This member is required.
        public var name: Swift.String?
        /// The service pipeline detail data.
        public var pipeline: ProtonClientTypes.ServicePipeline?
        /// The Amazon Resource Name (ARN) of the repository connection. For more information, see [Setting up an AWS CodeStar connection](https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html#setting-up-vcontrol) in the Proton User Guide.
        public var repositoryConnectionArn: Swift.String?
        /// The ID of the source code repository.
        public var repositoryId: Swift.String?
        /// The formatted specification that defines the service.
        /// This member is required.
        public var spec: Swift.String?
        /// The status of the service.
        /// This member is required.
        public var status: ProtonClientTypes.ServiceStatus?
        /// A service status message.
        public var statusMessage: Swift.String?
        /// The name of the service template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            branchName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            pipeline: ProtonClientTypes.ServicePipeline? = nil,
            repositoryConnectionArn: Swift.String? = nil,
            repositoryId: Swift.String? = nil,
            spec: Swift.String? = nil,
            status: ProtonClientTypes.ServiceStatus? = nil,
            statusMessage: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.branchName = branchName
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.pipeline = pipeline
            self.repositoryConnectionArn = repositoryConnectionArn
            self.repositoryId = repositoryId
            self.spec = spec
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.Service: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Service(arn: \(Swift.String(describing: arn)), branchName: \(Swift.String(describing: branchName)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), name: \(Swift.String(describing: name)), pipeline: \(Swift.String(describing: pipeline)), repositoryConnectionArn: \(Swift.String(describing: repositoryConnectionArn)), repositoryId: \(Swift.String(describing: repositoryId)), status: \(Swift.String(describing: status)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct CreateServiceOutput {
    /// The service detail data that's returned by Proton.
    /// This member is required.
    public var service: ProtonClientTypes.Service?

    public init(
        service: ProtonClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

public struct DeleteServiceInput {
    /// The name of the service to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteServiceOutput {
    /// The detailed data of the service being deleted.
    public var service: ProtonClientTypes.Service?

    public init(
        service: ProtonClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

public struct GetServiceInput {
    /// The name of the service that you want to get the detailed data for.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetServiceOutput {
    /// The detailed data of the requested service.
    public var service: ProtonClientTypes.Service?

    public init(
        service: ProtonClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

public struct ListServicesInput {
    /// The maximum number of services to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next service in the array of services, after the list of services that was previously requested.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton service resource.
    public struct ServiceSummary {
        /// The Amazon Resource Name (ARN) of the service.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the service was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the service.
        public var description: Swift.String?
        /// The time when the service was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The name of the service.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the service.
        /// This member is required.
        public var status: ProtonClientTypes.ServiceStatus?
        /// A service status message.
        public var statusMessage: Swift.String?
        /// The name of the service template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: ProtonClientTypes.ServiceStatus? = nil,
            statusMessage: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServiceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct ListServicesOutput {
    /// A token that indicates the location of the next service in the array of services, after the current requested list of services.
    public var nextToken: Swift.String?
    /// An array of services with summaries of detail data.
    /// This member is required.
    public var services: [ProtonClientTypes.ServiceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        services: [ProtonClientTypes.ServiceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.services = services
    }
}

public struct UpdateServiceInput {
    /// The edited service description.
    public var description: Swift.String?
    /// The name of the service to edit.
    /// This member is required.
    public var name: Swift.String?
    /// Lists the service instances to add and the existing service instances to remain. Omit the existing service instances to delete from the list. Don't include edits to the existing service instances or pipeline. For more information, see [Edit a service](https://docs.aws.amazon.com/proton/latest/userguide/ag-svc-update.html) in the Proton User Guide.
    public var spec: Swift.String?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        spec: Swift.String? = nil
    )
    {
        self.description = description
        self.name = name
        self.spec = spec
    }
}

extension UpdateServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceInput(name: \(Swift.String(describing: name)), description: \"CONTENT_REDACTED\", spec: \"CONTENT_REDACTED\")"}
}

public struct UpdateServiceOutput {
    /// The service detail data that's returned by Proton.
    /// This member is required.
    public var service: ProtonClientTypes.Service?

    public init(
        service: ProtonClientTypes.Service? = nil
    )
    {
        self.service = service
    }
}

public struct GetServiceSyncBlockerSummaryInput {
    /// The name of the service instance that you want to get the service sync blocker summary for. If given bothe the instance name and the service name, only the instance is blocked.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that you want to get the service sync blocker summary for. If given only the service name, all instances are blocked.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Detailed data of the context of the sync blocker.
    public struct SyncBlockerContext {
        /// The key for the sync blocker context.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the sync blocker context.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ProtonClientTypes {

    public enum BlockerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case resolved
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockerStatus] {
            return [
                .active,
                .resolved
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .resolved: return "RESOLVED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {

    public enum BlockerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automated
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockerType] {
            return [
                .automated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automated: return "AUTOMATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ProtonClientTypes {
    /// Detailed data of the sync blocker.
    public struct SyncBlocker {
        /// The contexts for the sync blocker.
        public var contexts: [ProtonClientTypes.SyncBlockerContext]?
        /// The time when the sync blocker was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The reason why the sync blocker was created.
        /// This member is required.
        public var createdReason: Swift.String?
        /// The ID of the sync blocker.
        /// This member is required.
        public var id: Swift.String?
        /// The time the sync blocker was resolved.
        public var resolvedAt: Foundation.Date?
        /// The reason the sync blocker was resolved.
        public var resolvedReason: Swift.String?
        /// The status of the sync blocker.
        /// This member is required.
        public var status: ProtonClientTypes.BlockerStatus?
        /// The type of the sync blocker.
        /// This member is required.
        public var type: ProtonClientTypes.BlockerType?

        public init(
            contexts: [ProtonClientTypes.SyncBlockerContext]? = nil,
            createdAt: Foundation.Date? = nil,
            createdReason: Swift.String? = nil,
            id: Swift.String? = nil,
            resolvedAt: Foundation.Date? = nil,
            resolvedReason: Swift.String? = nil,
            status: ProtonClientTypes.BlockerStatus? = nil,
            type: ProtonClientTypes.BlockerType? = nil
        )
        {
            self.contexts = contexts
            self.createdAt = createdAt
            self.createdReason = createdReason
            self.id = id
            self.resolvedAt = resolvedAt
            self.resolvedReason = resolvedReason
            self.status = status
            self.type = type
        }
    }

}

extension ProtonClientTypes {
    /// If a service instance is manually updated, Proton wants to prevent accidentally overriding a manual change. A blocker is created because of the manual update or deletion of a service instance. The summary describes the blocker as being active or resolved.
    public struct ServiceSyncBlockerSummary {
        /// The latest active blockers for the synced service.
        public var latestBlockers: [ProtonClientTypes.SyncBlocker]?
        /// The name of the service instance that you want sync your service configuration with.
        public var serviceInstanceName: Swift.String?
        /// The name of the service that you want to get the sync blocker summary for. If given a service instance name and a service name, it will return the blockers only applying to the instance that is blocked. If given only a service name, it will return the blockers that apply to all of the instances. In order to get the blockers for a single instance, you will need to make two distinct calls, one to get the sync blocker summary for the service and the other to get the sync blocker for the service instance.
        /// This member is required.
        public var serviceName: Swift.String?

        public init(
            latestBlockers: [ProtonClientTypes.SyncBlocker]? = nil,
            serviceInstanceName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.latestBlockers = latestBlockers
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
        }
    }

}

public struct GetServiceSyncBlockerSummaryOutput {
    /// The detailed data of the requested service sync blocker summary.
    public var serviceSyncBlockerSummary: ProtonClientTypes.ServiceSyncBlockerSummary?

    public init(
        serviceSyncBlockerSummary: ProtonClientTypes.ServiceSyncBlockerSummary? = nil
    )
    {
        self.serviceSyncBlockerSummary = serviceSyncBlockerSummary
    }
}

public struct UpdateServiceSyncBlockerInput {
    /// The ID of the service sync blocker.
    /// This member is required.
    public var id: Swift.String?
    /// The reason the service sync blocker was resolved.
    /// This member is required.
    public var resolvedReason: Swift.String?

    public init(
        id: Swift.String? = nil,
        resolvedReason: Swift.String? = nil
    )
    {
        self.id = id
        self.resolvedReason = resolvedReason
    }
}

public struct UpdateServiceSyncBlockerOutput {
    /// The name of the service instance that you want to update the service sync blocker for.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that you want to update the service sync blocker for.
    /// This member is required.
    public var serviceName: Swift.String?
    /// The detailed data on the service sync blocker that was updated.
    /// This member is required.
    public var serviceSyncBlocker: ProtonClientTypes.SyncBlocker?

    public init(
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        serviceSyncBlocker: ProtonClientTypes.SyncBlocker? = nil
    )
    {
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
        self.serviceSyncBlocker = serviceSyncBlocker
    }
}

public struct CreateServiceSyncConfigInput {
    /// The repository branch for your Proton Ops file.
    /// This member is required.
    public var branch: Swift.String?
    /// The path to the Proton Ops file.
    /// This member is required.
    public var filePath: Swift.String?
    /// The repository name.
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The provider type for your repository.
    /// This member is required.
    public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
    /// The name of the service the Proton Ops file is for.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        branch: Swift.String? = nil,
        filePath: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.branch = branch
        self.filePath = filePath
        self.repositoryName = repositoryName
        self.repositoryProvider = repositoryProvider
        self.serviceName = serviceName
    }
}

extension ProtonClientTypes {
    /// Detailed data of the service sync configuration.
    public struct ServiceSyncConfig {
        /// The name of the code repository branch that holds the service code Proton will sync with.
        /// This member is required.
        public var branch: Swift.String?
        /// The file path to the service sync configuration file.
        /// This member is required.
        public var filePath: Swift.String?
        /// The name of the code repository that holds the service code Proton will sync with.
        /// This member is required.
        public var repositoryName: Swift.String?
        /// The name of the repository provider that holds the repository Proton will sync with.
        /// This member is required.
        public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
        /// The name of the service that the service instance is added to.
        /// This member is required.
        public var serviceName: Swift.String?

        public init(
            branch: Swift.String? = nil,
            filePath: Swift.String? = nil,
            repositoryName: Swift.String? = nil,
            repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.branch = branch
            self.filePath = filePath
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.serviceName = serviceName
        }
    }

}

public struct CreateServiceSyncConfigOutput {
    /// The detailed data of the Proton Ops file.
    public var serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig?

    public init(
        serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig? = nil
    )
    {
        self.serviceSyncConfig = serviceSyncConfig
    }
}

public struct DeleteServiceSyncConfigInput {
    /// The name of the service that you want to delete the service sync configuration for.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

public struct DeleteServiceSyncConfigOutput {
    /// The detailed data for the service sync config.
    public var serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig?

    public init(
        serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig? = nil
    )
    {
        self.serviceSyncConfig = serviceSyncConfig
    }
}

public struct GetServiceSyncConfigInput {
    /// The name of the service that you want to get the service sync configuration for.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

public struct GetServiceSyncConfigOutput {
    /// The detailed data of the requested service sync configuration.
    public var serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig?

    public init(
        serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig? = nil
    )
    {
        self.serviceSyncConfig = serviceSyncConfig
    }
}

public struct UpdateServiceSyncConfigInput {
    /// The name of the code repository branch where the Proton Ops file is found.
    /// This member is required.
    public var branch: Swift.String?
    /// The path to the Proton Ops file.
    /// This member is required.
    public var filePath: Swift.String?
    /// The name of the repository where the Proton Ops file is found.
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The name of the repository provider where the Proton Ops file is found.
    /// This member is required.
    public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
    /// The name of the service the Proton Ops file is for.
    /// This member is required.
    public var serviceName: Swift.String?

    public init(
        branch: Swift.String? = nil,
        filePath: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.branch = branch
        self.filePath = filePath
        self.repositoryName = repositoryName
        self.repositoryProvider = repositoryProvider
        self.serviceName = serviceName
    }
}

public struct UpdateServiceSyncConfigOutput {
    /// The detailed data of the Proton Ops file.
    public var serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig?

    public init(
        serviceSyncConfig: ProtonClientTypes.ServiceSyncConfig? = nil
    )
    {
        self.serviceSyncConfig = serviceSyncConfig
    }
}

public struct CreateServiceTemplateInput {
    /// A description of the service template.
    public var description: Swift.String?
    /// The name of the service template as displayed in the developer interface.
    public var displayName: Swift.String?
    /// A customer provided encryption key that's used to encrypt data.
    public var encryptionKey: Swift.String?
    /// The name of the service template.
    /// This member is required.
    public var name: Swift.String?
    /// By default, Proton provides a service pipeline for your service. When this parameter is included, it indicates that an Proton service pipeline isn't provided for your service. After it's included, it can't be changed. For more information, see [Template bundles](https://docs.aws.amazon.com/proton/latest/userguide/ag-template-authoring.html#ag-template-bundles) in the Proton User Guide.
    public var pipelineProvisioning: ProtonClientTypes.Provisioning?
    /// An optional list of metadata items that you can associate with the Proton service template. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        name: Swift.String? = nil,
        pipelineProvisioning: ProtonClientTypes.Provisioning? = nil,
        tags: [ProtonClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.encryptionKey = encryptionKey
        self.name = name
        self.pipelineProvisioning = pipelineProvisioning
        self.tags = tags
    }
}

extension CreateServiceTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceTemplateInput(encryptionKey: \(Swift.String(describing: encryptionKey)), name: \(Swift.String(describing: name)), pipelineProvisioning: \(Swift.String(describing: pipelineProvisioning)), tags: \(Swift.String(describing: tags)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// Detailed data of an Proton service template resource.
    public struct ServiceTemplate {
        /// The Amazon Resource Name (ARN) of the service template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the service template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the service template.
        public var description: Swift.String?
        /// The service template name as displayed in the developer interface.
        public var displayName: Swift.String?
        /// The customer provided service template encryption key that's used to encrypt data.
        public var encryptionKey: Swift.String?
        /// The time when the service template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The name of the service template.
        /// This member is required.
        public var name: Swift.String?
        /// If pipelineProvisioning is true, a service pipeline is included in the service template. Otherwise, a service pipeline isn't included in the service template.
        public var pipelineProvisioning: ProtonClientTypes.Provisioning?
        /// The recommended version of the service template.
        public var recommendedVersion: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            encryptionKey: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            pipelineProvisioning: ProtonClientTypes.Provisioning? = nil,
            recommendedVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.encryptionKey = encryptionKey
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.pipelineProvisioning = pipelineProvisioning
            self.recommendedVersion = recommendedVersion
        }
    }

}

extension ProtonClientTypes.ServiceTemplate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceTemplate(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), encryptionKey: \(Swift.String(describing: encryptionKey)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), name: \(Swift.String(describing: name)), pipelineProvisioning: \(Swift.String(describing: pipelineProvisioning)), recommendedVersion: \(Swift.String(describing: recommendedVersion)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct CreateServiceTemplateOutput {
    /// The service template detail data that's returned by Proton.
    /// This member is required.
    public var serviceTemplate: ProtonClientTypes.ServiceTemplate?

    public init(
        serviceTemplate: ProtonClientTypes.ServiceTemplate? = nil
    )
    {
        self.serviceTemplate = serviceTemplate
    }
}

public struct DeleteServiceTemplateInput {
    /// The name of the service template to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteServiceTemplateOutput {
    /// The detailed data of the service template being deleted.
    public var serviceTemplate: ProtonClientTypes.ServiceTemplate?

    public init(
        serviceTemplate: ProtonClientTypes.ServiceTemplate? = nil
    )
    {
        self.serviceTemplate = serviceTemplate
    }
}

public struct GetServiceTemplateInput {
    /// The name of the service template that you want to get detailed data for.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetServiceTemplateOutput {
    /// The detailed data of the requested service template.
    /// This member is required.
    public var serviceTemplate: ProtonClientTypes.ServiceTemplate?

    public init(
        serviceTemplate: ProtonClientTypes.ServiceTemplate? = nil
    )
    {
        self.serviceTemplate = serviceTemplate
    }
}

public struct ListServiceTemplatesInput {
    /// The maximum number of service templates to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next service template in the array of service templates, after the list of service templates previously requested.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton service template resource.
    public struct ServiceTemplateSummary {
        /// The Amazon Resource Name (ARN) of the service template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the service template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the service template.
        public var description: Swift.String?
        /// The service template name as displayed in the developer interface.
        public var displayName: Swift.String?
        /// The time when the service template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The name of the service template.
        /// This member is required.
        public var name: Swift.String?
        /// If pipelineProvisioning is true, a service pipeline is included in the service template, otherwise a service pipeline isn't included in the service template.
        public var pipelineProvisioning: ProtonClientTypes.Provisioning?
        /// The recommended version of the service template.
        public var recommendedVersion: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            pipelineProvisioning: ProtonClientTypes.Provisioning? = nil,
            recommendedVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.pipelineProvisioning = pipelineProvisioning
            self.recommendedVersion = recommendedVersion
        }
    }

}

extension ProtonClientTypes.ServiceTemplateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceTemplateSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), name: \(Swift.String(describing: name)), pipelineProvisioning: \(Swift.String(describing: pipelineProvisioning)), recommendedVersion: \(Swift.String(describing: recommendedVersion)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct ListServiceTemplatesOutput {
    /// A token that indicates the location of the next service template in the array of service templates, after the current requested list of service templates.
    public var nextToken: Swift.String?
    /// An array of service templates with detail data.
    /// This member is required.
    public var templates: [ProtonClientTypes.ServiceTemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templates: [ProtonClientTypes.ServiceTemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templates = templates
    }
}

public struct UpdateServiceTemplateInput {
    /// A description of the service template update.
    public var description: Swift.String?
    /// The name of the service template to update that's displayed in the developer interface.
    public var displayName: Swift.String?
    /// The name of the service template to update.
    /// This member is required.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.name = name
    }
}

extension UpdateServiceTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceTemplateInput(name: \(Swift.String(describing: name)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct UpdateServiceTemplateOutput {
    /// The service template detail data that's returned by Proton.
    /// This member is required.
    public var serviceTemplate: ProtonClientTypes.ServiceTemplate?

    public init(
        serviceTemplate: ProtonClientTypes.ServiceTemplate? = nil
    )
    {
        self.serviceTemplate = serviceTemplate
    }
}

extension ProtonClientTypes {
    /// Compatible environment template data.
    public struct CompatibleEnvironmentTemplateInput {
        /// The major version of the compatible environment template.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// The compatible environment template name.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            majorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.majorVersion = majorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes {

    public enum ServiceTemplateSupportedComponentSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directlyDefined
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceTemplateSupportedComponentSourceType] {
            return [
                .directlyDefined
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directlyDefined: return "DIRECTLY_DEFINED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateServiceTemplateVersionInput {
    /// When included, if two identical requests are made with the same client token, Proton returns the service template version that the first request created.
    public var clientToken: Swift.String?
    /// An array of environment template objects that are compatible with the new service template version. A service instance based on this service template version can run in environments based on compatible templates.
    /// This member is required.
    public var compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplateInput]?
    /// A description of the new version of a service template.
    public var description: Swift.String?
    /// To create a new minor version of the service template, include a major Version. To create a new major and minor version of the service template, exclude major Version.
    public var majorVersion: Swift.String?
    /// An object that includes the template bundle S3 bucket path and name for the new version of a service template.
    /// This member is required.
    public var source: ProtonClientTypes.TemplateVersionSourceInput?
    /// An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]?
    /// An optional list of metadata items that you can associate with the Proton service template version. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// The name of the service template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplateInput]? = nil,
        description: Swift.String? = nil,
        majorVersion: Swift.String? = nil,
        source: ProtonClientTypes.TemplateVersionSourceInput? = nil,
        supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.compatibleEnvironmentTemplates = compatibleEnvironmentTemplates
        self.description = description
        self.majorVersion = majorVersion
        self.source = source
        self.supportedComponentSources = supportedComponentSources
        self.tags = tags
        self.templateName = templateName
    }
}

extension CreateServiceTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceTemplateVersionInput(clientToken: \(Swift.String(describing: clientToken)), compatibleEnvironmentTemplates: \(Swift.String(describing: compatibleEnvironmentTemplates)), majorVersion: \(Swift.String(describing: majorVersion)), source: \(Swift.String(describing: source)), supportedComponentSources: \(Swift.String(describing: supportedComponentSources)), tags: \(Swift.String(describing: tags)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\")"}
}

extension ProtonClientTypes {
    /// Compatible environment template data.
    public struct CompatibleEnvironmentTemplate {
        /// The major version of the compatible environment template.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// The compatible environment template name.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            majorVersion: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.majorVersion = majorVersion
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes {
    /// Detailed data of an Proton service template version resource.
    public struct ServiceTemplateVersion {
        /// The Amazon Resource Name (ARN) of the version of a service template.
        /// This member is required.
        public var arn: Swift.String?
        /// An array of compatible environment template names for the major version of a service template.
        /// This member is required.
        public var compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplate]?
        /// The time when the version of a service template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the version of a service template.
        public var description: Swift.String?
        /// The time when the version of a service template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The latest major version that's associated with the version of a service template.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// The minor version of a service template.
        /// This member is required.
        public var minorVersion: Swift.String?
        /// The recommended minor version of the service template.
        public var recommendedMinorVersion: Swift.String?
        /// The schema of the version of a service template.
        public var schema: Swift.String?
        /// The service template version status.
        /// This member is required.
        public var status: ProtonClientTypes.TemplateVersionStatus?
        /// A service template version status message.
        public var statusMessage: Swift.String?
        /// An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
        public var supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]?
        /// The name of the version of a service template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplate]? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            majorVersion: Swift.String? = nil,
            minorVersion: Swift.String? = nil,
            recommendedMinorVersion: Swift.String? = nil,
            schema: Swift.String? = nil,
            status: ProtonClientTypes.TemplateVersionStatus? = nil,
            statusMessage: Swift.String? = nil,
            supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.compatibleEnvironmentTemplates = compatibleEnvironmentTemplates
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.schema = schema
            self.status = status
            self.statusMessage = statusMessage
            self.supportedComponentSources = supportedComponentSources
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServiceTemplateVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceTemplateVersion(arn: \(Swift.String(describing: arn)), compatibleEnvironmentTemplates: \(Swift.String(describing: compatibleEnvironmentTemplates)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), majorVersion: \(Swift.String(describing: majorVersion)), minorVersion: \(Swift.String(describing: minorVersion)), recommendedMinorVersion: \(Swift.String(describing: recommendedMinorVersion)), status: \(Swift.String(describing: status)), supportedComponentSources: \(Swift.String(describing: supportedComponentSources)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", schema: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct CreateServiceTemplateVersionOutput {
    /// The service template version summary of detail data that's returned by Proton.
    /// This member is required.
    public var serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion?

    public init(
        serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion? = nil
    )
    {
        self.serviceTemplateVersion = serviceTemplateVersion
    }
}

public struct DeleteServiceTemplateVersionInput {
    /// The service template major version to delete.
    /// This member is required.
    public var majorVersion: Swift.String?
    /// The service template minor version to delete.
    /// This member is required.
    public var minorVersion: Swift.String?
    /// The name of the service template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        majorVersion: Swift.String? = nil,
        minorVersion: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.templateName = templateName
    }
}

public struct DeleteServiceTemplateVersionOutput {
    /// The detailed data of the service template version being deleted.
    public var serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion?

    public init(
        serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion? = nil
    )
    {
        self.serviceTemplateVersion = serviceTemplateVersion
    }
}

public struct GetServiceTemplateVersionInput {
    /// To get service template major version detail data, include major Version.
    /// This member is required.
    public var majorVersion: Swift.String?
    /// To get service template minor version detail data, include minorVersion.
    /// This member is required.
    public var minorVersion: Swift.String?
    /// The name of the service template a version of which you want to get detailed data for.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        majorVersion: Swift.String? = nil,
        minorVersion: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.templateName = templateName
    }
}

public struct GetServiceTemplateVersionOutput {
    /// The detailed data of the requested service template version.
    /// This member is required.
    public var serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion?

    public init(
        serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion? = nil
    )
    {
        self.serviceTemplateVersion = serviceTemplateVersion
    }
}

public struct ListServiceTemplateVersionsInput {
    /// To view a list of minor of versions under a major version of a service template, include major Version. To view a list of major versions of a service template, exclude major Version.
    public var majorVersion: Swift.String?
    /// The maximum number of major or minor versions of a service template to list.
    public var maxResults: Swift.Int?
    /// A token that indicates the location of the next major or minor version in the array of major or minor versions of a service template, after the list of major or minor versions that was previously requested.
    public var nextToken: Swift.String?
    /// The name of the service template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        majorVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.majorVersion = majorVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.templateName = templateName
    }
}

extension ProtonClientTypes {
    /// Summary data of an Proton service template version resource.
    public struct ServiceTemplateVersionSummary {
        /// The Amazon Resource Name (ARN) of the version of a service template.
        /// This member is required.
        public var arn: Swift.String?
        /// The time when the version of a service template was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// A description of the version of a service template.
        public var description: Swift.String?
        /// The time when the version of a service template was last modified.
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The latest major version that's associated with the version of a service template.
        /// This member is required.
        public var majorVersion: Swift.String?
        /// The minor version of a service template.
        /// This member is required.
        public var minorVersion: Swift.String?
        /// The recommended minor version of the service template.
        public var recommendedMinorVersion: Swift.String?
        /// The service template minor version status.
        /// This member is required.
        public var status: ProtonClientTypes.TemplateVersionStatus?
        /// A service template minor version status message.
        public var statusMessage: Swift.String?
        /// The name of the service template.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            majorVersion: Swift.String? = nil,
            minorVersion: Swift.String? = nil,
            recommendedMinorVersion: Swift.String? = nil,
            status: ProtonClientTypes.TemplateVersionStatus? = nil,
            statusMessage: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }
    }

}

extension ProtonClientTypes.ServiceTemplateVersionSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceTemplateVersionSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), majorVersion: \(Swift.String(describing: majorVersion)), minorVersion: \(Swift.String(describing: minorVersion)), recommendedMinorVersion: \(Swift.String(describing: recommendedMinorVersion)), status: \(Swift.String(describing: status)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\", statusMessage: \"CONTENT_REDACTED\")"}
}

public struct ListServiceTemplateVersionsOutput {
    /// A token that indicates the location of the next major or minor version in the array of major or minor versions of a service template, after the current requested list of service major or minor versions.
    public var nextToken: Swift.String?
    /// An array of major or minor versions of a service template with detail data.
    /// This member is required.
    public var templateVersions: [ProtonClientTypes.ServiceTemplateVersionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templateVersions: [ProtonClientTypes.ServiceTemplateVersionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templateVersions = templateVersions
    }
}

public struct UpdateServiceTemplateVersionInput {
    /// An array of environment template objects that are compatible with this service template version. A service instance based on this service template version can run in environments based on compatible templates.
    public var compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplateInput]?
    /// A description of a service template version to update.
    public var description: Swift.String?
    /// To update a major version of a service template, include major Version.
    /// This member is required.
    public var majorVersion: Swift.String?
    /// To update a minor version of a service template, include minorVersion.
    /// This member is required.
    public var minorVersion: Swift.String?
    /// The status of the service template minor version to update.
    public var status: ProtonClientTypes.TemplateVersionStatus?
    /// An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version. A change to supportedComponentSources doesn't impact existing component attachments to instances based on this template version. A change only affects later associations. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]?
    /// The name of the service template.
    /// This member is required.
    public var templateName: Swift.String?

    public init(
        compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplateInput]? = nil,
        description: Swift.String? = nil,
        majorVersion: Swift.String? = nil,
        minorVersion: Swift.String? = nil,
        status: ProtonClientTypes.TemplateVersionStatus? = nil,
        supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.compatibleEnvironmentTemplates = compatibleEnvironmentTemplates
        self.description = description
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.status = status
        self.supportedComponentSources = supportedComponentSources
        self.templateName = templateName
    }
}

extension UpdateServiceTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceTemplateVersionInput(compatibleEnvironmentTemplates: \(Swift.String(describing: compatibleEnvironmentTemplates)), majorVersion: \(Swift.String(describing: majorVersion)), minorVersion: \(Swift.String(describing: minorVersion)), status: \(Swift.String(describing: status)), supportedComponentSources: \(Swift.String(describing: supportedComponentSources)), templateName: \(Swift.String(describing: templateName)), description: \"CONTENT_REDACTED\")"}
}

public struct UpdateServiceTemplateVersionOutput {
    /// The service template version detail data that's returned by Proton.
    /// This member is required.
    public var serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion?

    public init(
        serviceTemplateVersion: ProtonClientTypes.ServiceTemplateVersion? = nil
    )
    {
        self.serviceTemplateVersion = serviceTemplateVersion
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the Proton resource to apply customer tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of customer tags to apply to the Proton resource.
    /// This member is required.
    public var tags: [ProtonClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct CreateTemplateSyncConfigInput {
    /// The repository branch for your template.
    /// This member is required.
    public var branch: Swift.String?
    /// The repository name (for example, myrepos/myrepo).
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The provider type for your repository.
    /// This member is required.
    public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
    /// A repository subdirectory path to your template bundle directory. When included, Proton limits the template bundle search to this repository directory.
    public var subdirectory: Swift.String?
    /// The name of your registered template.
    /// This member is required.
    public var templateName: Swift.String?
    /// The type of the registered template.
    /// This member is required.
    public var templateType: ProtonClientTypes.TemplateType?

    public init(
        branch: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
        subdirectory: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateType: ProtonClientTypes.TemplateType? = nil
    )
    {
        self.branch = branch
        self.repositoryName = repositoryName
        self.repositoryProvider = repositoryProvider
        self.subdirectory = subdirectory
        self.templateName = templateName
        self.templateType = templateType
    }
}

extension ProtonClientTypes {
    /// The detail data for a template sync configuration.
    public struct TemplateSyncConfig {
        /// The repository branch.
        /// This member is required.
        public var branch: Swift.String?
        /// The repository name (for example, myrepos/myrepo).
        /// This member is required.
        public var repositoryName: Swift.String?
        /// The repository provider.
        /// This member is required.
        public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
        /// A subdirectory path to your template bundle version.
        public var subdirectory: Swift.String?
        /// The template name.
        /// This member is required.
        public var templateName: Swift.String?
        /// The template type.
        /// This member is required.
        public var templateType: ProtonClientTypes.TemplateType?

        public init(
            branch: Swift.String? = nil,
            repositoryName: Swift.String? = nil,
            repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
            subdirectory: Swift.String? = nil,
            templateName: Swift.String? = nil,
            templateType: ProtonClientTypes.TemplateType? = nil
        )
        {
            self.branch = branch
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.subdirectory = subdirectory
            self.templateName = templateName
            self.templateType = templateType
        }
    }

}

public struct CreateTemplateSyncConfigOutput {
    /// The template sync configuration detail data that's returned by Proton.
    public var templateSyncConfig: ProtonClientTypes.TemplateSyncConfig?

    public init(
        templateSyncConfig: ProtonClientTypes.TemplateSyncConfig? = nil
    )
    {
        self.templateSyncConfig = templateSyncConfig
    }
}

public struct DeleteTemplateSyncConfigInput {
    /// The template name.
    /// This member is required.
    public var templateName: Swift.String?
    /// The template type.
    /// This member is required.
    public var templateType: ProtonClientTypes.TemplateType?

    public init(
        templateName: Swift.String? = nil,
        templateType: ProtonClientTypes.TemplateType? = nil
    )
    {
        self.templateName = templateName
        self.templateType = templateType
    }
}

public struct DeleteTemplateSyncConfigOutput {
    /// The template sync configuration detail data that's returned by Proton.
    public var templateSyncConfig: ProtonClientTypes.TemplateSyncConfig?

    public init(
        templateSyncConfig: ProtonClientTypes.TemplateSyncConfig? = nil
    )
    {
        self.templateSyncConfig = templateSyncConfig
    }
}

public struct GetTemplateSyncConfigInput {
    /// The template name.
    /// This member is required.
    public var templateName: Swift.String?
    /// The template type.
    /// This member is required.
    public var templateType: ProtonClientTypes.TemplateType?

    public init(
        templateName: Swift.String? = nil,
        templateType: ProtonClientTypes.TemplateType? = nil
    )
    {
        self.templateName = templateName
        self.templateType = templateType
    }
}

public struct GetTemplateSyncConfigOutput {
    /// The template sync configuration detail data that's returned by Proton.
    public var templateSyncConfig: ProtonClientTypes.TemplateSyncConfig?

    public init(
        templateSyncConfig: ProtonClientTypes.TemplateSyncConfig? = nil
    )
    {
        self.templateSyncConfig = templateSyncConfig
    }
}

public struct UpdateTemplateSyncConfigInput {
    /// The repository branch for your template.
    /// This member is required.
    public var branch: Swift.String?
    /// The repository name (for example, myrepos/myrepo).
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The repository provider.
    /// This member is required.
    public var repositoryProvider: ProtonClientTypes.RepositoryProvider?
    /// A subdirectory path to your template bundle version. When included, limits the template bundle search to this repository directory.
    public var subdirectory: Swift.String?
    /// The synced template name.
    /// This member is required.
    public var templateName: Swift.String?
    /// The synced template type.
    /// This member is required.
    public var templateType: ProtonClientTypes.TemplateType?

    public init(
        branch: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        repositoryProvider: ProtonClientTypes.RepositoryProvider? = nil,
        subdirectory: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateType: ProtonClientTypes.TemplateType? = nil
    )
    {
        self.branch = branch
        self.repositoryName = repositoryName
        self.repositoryProvider = repositoryProvider
        self.subdirectory = subdirectory
        self.templateName = templateName
        self.templateType = templateType
    }
}

public struct UpdateTemplateSyncConfigOutput {
    /// The template sync configuration detail data that's returned by Proton.
    public var templateSyncConfig: ProtonClientTypes.TemplateSyncConfig?

    public init(
        templateSyncConfig: ProtonClientTypes.TemplateSyncConfig? = nil
    )
    {
        self.templateSyncConfig = templateSyncConfig
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource to remove customer tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of customer tag keys that indicate the customer tags to be removed from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

extension AcceptEnvironmentAccountConnectionInput {

    static func urlPathProvider(_ value: AcceptEnvironmentAccountConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension CancelComponentDeploymentInput {

    static func urlPathProvider(_ value: CancelComponentDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CancelEnvironmentDeploymentInput {

    static func urlPathProvider(_ value: CancelEnvironmentDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CancelServiceInstanceDeploymentInput {

    static func urlPathProvider(_ value: CancelServiceInstanceDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CancelServicePipelineDeploymentInput {

    static func urlPathProvider(_ value: CancelServicePipelineDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateComponentInput {

    static func urlPathProvider(_ value: CreateComponentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEnvironmentInput {

    static func urlPathProvider(_ value: CreateEnvironmentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEnvironmentAccountConnectionInput {

    static func urlPathProvider(_ value: CreateEnvironmentAccountConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEnvironmentTemplateInput {

    static func urlPathProvider(_ value: CreateEnvironmentTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEnvironmentTemplateVersionInput {

    static func urlPathProvider(_ value: CreateEnvironmentTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRepositoryInput {

    static func urlPathProvider(_ value: CreateRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServiceInput {

    static func urlPathProvider(_ value: CreateServiceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServiceInstanceInput {

    static func urlPathProvider(_ value: CreateServiceInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServiceSyncConfigInput {

    static func urlPathProvider(_ value: CreateServiceSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServiceTemplateInput {

    static func urlPathProvider(_ value: CreateServiceTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension CreateServiceTemplateVersionInput {

    static func urlPathProvider(_ value: CreateServiceTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTemplateSyncConfigInput {

    static func urlPathProvider(_ value: CreateTemplateSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteComponentInput {

    static func urlPathProvider(_ value: DeleteComponentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeploymentInput {

    static func urlPathProvider(_ value: DeleteDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEnvironmentInput {

    static func urlPathProvider(_ value: DeleteEnvironmentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEnvironmentAccountConnectionInput {

    static func urlPathProvider(_ value: DeleteEnvironmentAccountConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEnvironmentTemplateInput {

    static func urlPathProvider(_ value: DeleteEnvironmentTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEnvironmentTemplateVersionInput {

    static func urlPathProvider(_ value: DeleteEnvironmentTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRepositoryInput {

    static func urlPathProvider(_ value: DeleteRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServiceInput {

    static func urlPathProvider(_ value: DeleteServiceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServiceSyncConfigInput {

    static func urlPathProvider(_ value: DeleteServiceSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServiceTemplateInput {

    static func urlPathProvider(_ value: DeleteServiceTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteServiceTemplateVersionInput {

    static func urlPathProvider(_ value: DeleteServiceTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTemplateSyncConfigInput {

    static func urlPathProvider(_ value: DeleteTemplateSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension GetAccountSettingsInput {

    static func urlPathProvider(_ value: GetAccountSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension GetComponentInput {

    static func urlPathProvider(_ value: GetComponentInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeploymentInput {

    static func urlPathProvider(_ value: GetDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension GetEnvironmentInput {

    static func urlPathProvider(_ value: GetEnvironmentInput) -> Swift.String? {
        return "/"
    }
}

extension GetEnvironmentAccountConnectionInput {

    static func urlPathProvider(_ value: GetEnvironmentAccountConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension GetEnvironmentTemplateInput {

    static func urlPathProvider(_ value: GetEnvironmentTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension GetEnvironmentTemplateVersionInput {

    static func urlPathProvider(_ value: GetEnvironmentTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension GetRepositoryInput {

    static func urlPathProvider(_ value: GetRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension GetRepositorySyncStatusInput {

    static func urlPathProvider(_ value: GetRepositorySyncStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcesSummaryInput {

    static func urlPathProvider(_ value: GetResourcesSummaryInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceInput {

    static func urlPathProvider(_ value: GetServiceInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceInstanceInput {

    static func urlPathProvider(_ value: GetServiceInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceInstanceSyncStatusInput {

    static func urlPathProvider(_ value: GetServiceInstanceSyncStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceSyncBlockerSummaryInput {

    static func urlPathProvider(_ value: GetServiceSyncBlockerSummaryInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceSyncConfigInput {

    static func urlPathProvider(_ value: GetServiceSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceTemplateInput {

    static func urlPathProvider(_ value: GetServiceTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension GetServiceTemplateVersionInput {

    static func urlPathProvider(_ value: GetServiceTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension GetTemplateSyncConfigInput {

    static func urlPathProvider(_ value: GetTemplateSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension GetTemplateSyncStatusInput {

    static func urlPathProvider(_ value: GetTemplateSyncStatusInput) -> Swift.String? {
        return "/"
    }
}

extension ListComponentOutputsInput {

    static func urlPathProvider(_ value: ListComponentOutputsInput) -> Swift.String? {
        return "/"
    }
}

extension ListComponentProvisionedResourcesInput {

    static func urlPathProvider(_ value: ListComponentProvisionedResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListComponentsInput {

    static func urlPathProvider(_ value: ListComponentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeploymentsInput {

    static func urlPathProvider(_ value: ListDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentAccountConnectionsInput {

    static func urlPathProvider(_ value: ListEnvironmentAccountConnectionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentOutputsInput {

    static func urlPathProvider(_ value: ListEnvironmentOutputsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentProvisionedResourcesInput {

    static func urlPathProvider(_ value: ListEnvironmentProvisionedResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentsInput {

    static func urlPathProvider(_ value: ListEnvironmentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentTemplatesInput {

    static func urlPathProvider(_ value: ListEnvironmentTemplatesInput) -> Swift.String? {
        return "/"
    }
}

extension ListEnvironmentTemplateVersionsInput {

    static func urlPathProvider(_ value: ListEnvironmentTemplateVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRepositoriesInput {

    static func urlPathProvider(_ value: ListRepositoriesInput) -> Swift.String? {
        return "/"
    }
}

extension ListRepositorySyncDefinitionsInput {

    static func urlPathProvider(_ value: ListRepositorySyncDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListServiceInstanceOutputsInput {

    static func urlPathProvider(_ value: ListServiceInstanceOutputsInput) -> Swift.String? {
        return "/"
    }
}

extension ListServiceInstanceProvisionedResourcesInput {

    static func urlPathProvider(_ value: ListServiceInstanceProvisionedResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServiceInstancesInput {

    static func urlPathProvider(_ value: ListServiceInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServicePipelineOutputsInput {

    static func urlPathProvider(_ value: ListServicePipelineOutputsInput) -> Swift.String? {
        return "/"
    }
}

extension ListServicePipelineProvisionedResourcesInput {

    static func urlPathProvider(_ value: ListServicePipelineProvisionedResourcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServicesInput {

    static func urlPathProvider(_ value: ListServicesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServiceTemplatesInput {

    static func urlPathProvider(_ value: ListServiceTemplatesInput) -> Swift.String? {
        return "/"
    }
}

extension ListServiceTemplateVersionsInput {

    static func urlPathProvider(_ value: ListServiceTemplateVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension NotifyResourceDeploymentStatusChangeInput {

    static func urlPathProvider(_ value: NotifyResourceDeploymentStatusChangeInput) -> Swift.String? {
        return "/"
    }
}

extension RejectEnvironmentAccountConnectionInput {

    static func urlPathProvider(_ value: RejectEnvironmentAccountConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAccountSettingsInput {

    static func urlPathProvider(_ value: UpdateAccountSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateComponentInput {

    static func urlPathProvider(_ value: UpdateComponentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnvironmentInput {

    static func urlPathProvider(_ value: UpdateEnvironmentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnvironmentAccountConnectionInput {

    static func urlPathProvider(_ value: UpdateEnvironmentAccountConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnvironmentTemplateInput {

    static func urlPathProvider(_ value: UpdateEnvironmentTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEnvironmentTemplateVersionInput {

    static func urlPathProvider(_ value: UpdateEnvironmentTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceInput {

    static func urlPathProvider(_ value: UpdateServiceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceInstanceInput {

    static func urlPathProvider(_ value: UpdateServiceInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServicePipelineInput {

    static func urlPathProvider(_ value: UpdateServicePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceSyncBlockerInput {

    static func urlPathProvider(_ value: UpdateServiceSyncBlockerInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceSyncConfigInput {

    static func urlPathProvider(_ value: UpdateServiceSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceTemplateInput {

    static func urlPathProvider(_ value: UpdateServiceTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateServiceTemplateVersionInput {

    static func urlPathProvider(_ value: UpdateServiceTemplateVersionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTemplateSyncConfigInput {

    static func urlPathProvider(_ value: UpdateTemplateSyncConfigInput) -> Swift.String? {
        return "/"
    }
}

extension AcceptEnvironmentAccountConnectionInput {

    static func write(value: AcceptEnvironmentAccountConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension CancelComponentDeploymentInput {

    static func write(value: CancelComponentDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentName"].write(value.componentName)
    }
}

extension CancelEnvironmentDeploymentInput {

    static func write(value: CancelEnvironmentDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentName"].write(value.environmentName)
    }
}

extension CancelServiceInstanceDeploymentInput {

    static func write(value: CancelServiceInstanceDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension CancelServicePipelineDeploymentInput {

    static func write(value: CancelServicePipelineDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceName"].write(value.serviceName)
    }
}

extension CreateComponentInput {

    static func write(value: CreateComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["environmentName"].write(value.environmentName)
        try writer["manifest"].write(value.manifest)
        try writer["name"].write(value.name)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
        try writer["serviceSpec"].write(value.serviceSpec)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateFile"].write(value.templateFile)
    }
}

extension CreateEnvironmentInput {

    static func write(value: CreateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codebuildRoleArn"].write(value.codebuildRoleArn)
        try writer["componentRoleArn"].write(value.componentRoleArn)
        try writer["description"].write(value.description)
        try writer["environmentAccountConnectionId"].write(value.environmentAccountConnectionId)
        try writer["name"].write(value.name)
        try writer["protonServiceRoleArn"].write(value.protonServiceRoleArn)
        try writer["provisioningRepository"].write(value.provisioningRepository, with: ProtonClientTypes.RepositoryBranchInput.write(value:to:))
        try writer["spec"].write(value.spec)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateMajorVersion"].write(value.templateMajorVersion)
        try writer["templateMinorVersion"].write(value.templateMinorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension CreateEnvironmentAccountConnectionInput {

    static func write(value: CreateEnvironmentAccountConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["codebuildRoleArn"].write(value.codebuildRoleArn)
        try writer["componentRoleArn"].write(value.componentRoleArn)
        try writer["environmentName"].write(value.environmentName)
        try writer["managementAccountId"].write(value.managementAccountId)
        try writer["roleArn"].write(value.roleArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEnvironmentTemplateInput {

    static func write(value: CreateEnvironmentTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["displayName"].write(value.displayName)
        try writer["encryptionKey"].write(value.encryptionKey)
        try writer["name"].write(value.name)
        try writer["provisioning"].write(value.provisioning)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEnvironmentTemplateVersionInput {

    static func write(value: CreateEnvironmentTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["majorVersion"].write(value.majorVersion)
        try writer["source"].write(value.source, with: ProtonClientTypes.TemplateVersionSourceInput.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateName"].write(value.templateName)
    }
}

extension CreateRepositoryInput {

    static func write(value: CreateRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["connectionArn"].write(value.connectionArn)
        try writer["encryptionKey"].write(value.encryptionKey)
        try writer["name"].write(value.name)
        try writer["provider"].write(value.provider)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateServiceInput {

    static func write(value: CreateServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branchName"].write(value.branchName)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["repositoryConnectionArn"].write(value.repositoryConnectionArn)
        try writer["repositoryId"].write(value.repositoryId)
        try writer["spec"].write(value.spec)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateMajorVersion"].write(value.templateMajorVersion)
        try writer["templateMinorVersion"].write(value.templateMinorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension CreateServiceInstanceInput {

    static func write(value: CreateServiceInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["name"].write(value.name)
        try writer["serviceName"].write(value.serviceName)
        try writer["spec"].write(value.spec)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateMajorVersion"].write(value.templateMajorVersion)
        try writer["templateMinorVersion"].write(value.templateMinorVersion)
    }
}

extension CreateServiceSyncConfigInput {

    static func write(value: CreateServiceSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branch"].write(value.branch)
        try writer["filePath"].write(value.filePath)
        try writer["repositoryName"].write(value.repositoryName)
        try writer["repositoryProvider"].write(value.repositoryProvider)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension CreateServiceTemplateInput {

    static func write(value: CreateServiceTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["displayName"].write(value.displayName)
        try writer["encryptionKey"].write(value.encryptionKey)
        try writer["name"].write(value.name)
        try writer["pipelineProvisioning"].write(value.pipelineProvisioning)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateServiceTemplateVersionInput {

    static func write(value: CreateServiceTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["compatibleEnvironmentTemplates"].writeList(value.compatibleEnvironmentTemplates, memberWritingClosure: ProtonClientTypes.CompatibleEnvironmentTemplateInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["description"].write(value.description)
        try writer["majorVersion"].write(value.majorVersion)
        try writer["source"].write(value.source, with: ProtonClientTypes.TemplateVersionSourceInput.write(value:to:))
        try writer["supportedComponentSources"].writeList(value.supportedComponentSources, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ProtonClientTypes.ServiceTemplateSupportedComponentSourceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateName"].write(value.templateName)
    }
}

extension CreateTemplateSyncConfigInput {

    static func write(value: CreateTemplateSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branch"].write(value.branch)
        try writer["repositoryName"].write(value.repositoryName)
        try writer["repositoryProvider"].write(value.repositoryProvider)
        try writer["subdirectory"].write(value.subdirectory)
        try writer["templateName"].write(value.templateName)
        try writer["templateType"].write(value.templateType)
    }
}

extension DeleteComponentInput {

    static func write(value: DeleteComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteDeploymentInput {

    static func write(value: DeleteDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension DeleteEnvironmentInput {

    static func write(value: DeleteEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteEnvironmentAccountConnectionInput {

    static func write(value: DeleteEnvironmentAccountConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension DeleteEnvironmentTemplateInput {

    static func write(value: DeleteEnvironmentTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteEnvironmentTemplateVersionInput {

    static func write(value: DeleteEnvironmentTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["minorVersion"].write(value.minorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension DeleteRepositoryInput {

    static func write(value: DeleteRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["provider"].write(value.provider)
    }
}

extension DeleteServiceInput {

    static func write(value: DeleteServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteServiceSyncConfigInput {

    static func write(value: DeleteServiceSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceName"].write(value.serviceName)
    }
}

extension DeleteServiceTemplateInput {

    static func write(value: DeleteServiceTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteServiceTemplateVersionInput {

    static func write(value: DeleteServiceTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["minorVersion"].write(value.minorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension DeleteTemplateSyncConfigInput {

    static func write(value: DeleteTemplateSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["templateName"].write(value.templateName)
        try writer["templateType"].write(value.templateType)
    }
}

extension GetAccountSettingsInput {

    static func write(value: GetAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetComponentInput {

    static func write(value: GetComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetDeploymentInput {

    static func write(value: GetDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentName"].write(value.componentName)
        try writer["environmentName"].write(value.environmentName)
        try writer["id"].write(value.id)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension GetEnvironmentInput {

    static func write(value: GetEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetEnvironmentAccountConnectionInput {

    static func write(value: GetEnvironmentAccountConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension GetEnvironmentTemplateInput {

    static func write(value: GetEnvironmentTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetEnvironmentTemplateVersionInput {

    static func write(value: GetEnvironmentTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["minorVersion"].write(value.minorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension GetRepositoryInput {

    static func write(value: GetRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["provider"].write(value.provider)
    }
}

extension GetRepositorySyncStatusInput {

    static func write(value: GetRepositorySyncStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branch"].write(value.branch)
        try writer["repositoryName"].write(value.repositoryName)
        try writer["repositoryProvider"].write(value.repositoryProvider)
        try writer["syncType"].write(value.syncType)
    }
}

extension GetResourcesSummaryInput {

    static func write(value: GetResourcesSummaryInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetServiceInput {

    static func write(value: GetServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetServiceInstanceInput {

    static func write(value: GetServiceInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension GetServiceInstanceSyncStatusInput {

    static func write(value: GetServiceInstanceSyncStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension GetServiceSyncBlockerSummaryInput {

    static func write(value: GetServiceSyncBlockerSummaryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension GetServiceSyncConfigInput {

    static func write(value: GetServiceSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["serviceName"].write(value.serviceName)
    }
}

extension GetServiceTemplateInput {

    static func write(value: GetServiceTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetServiceTemplateVersionInput {

    static func write(value: GetServiceTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["minorVersion"].write(value.minorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension GetTemplateSyncConfigInput {

    static func write(value: GetTemplateSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["templateName"].write(value.templateName)
        try writer["templateType"].write(value.templateType)
    }
}

extension GetTemplateSyncStatusInput {

    static func write(value: GetTemplateSyncStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["templateName"].write(value.templateName)
        try writer["templateType"].write(value.templateType)
        try writer["templateVersion"].write(value.templateVersion)
    }
}

extension ListComponentOutputsInput {

    static func write(value: ListComponentOutputsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentName"].write(value.componentName)
        try writer["deploymentId"].write(value.deploymentId)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListComponentProvisionedResourcesInput {

    static func write(value: ListComponentProvisionedResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentName"].write(value.componentName)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListComponentsInput {

    static func write(value: ListComponentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentName"].write(value.environmentName)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListDeploymentsInput {

    static func write(value: ListDeploymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentName"].write(value.componentName)
        try writer["environmentName"].write(value.environmentName)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListEnvironmentAccountConnectionsInput {

    static func write(value: ListEnvironmentAccountConnectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentName"].write(value.environmentName)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["requestedBy"].write(value.requestedBy)
        try writer["statuses"].writeList(value.statuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ProtonClientTypes.EnvironmentAccountConnectionStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListEnvironmentOutputsInput {

    static func write(value: ListEnvironmentOutputsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["environmentName"].write(value.environmentName)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListEnvironmentProvisionedResourcesInput {

    static func write(value: ListEnvironmentProvisionedResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentName"].write(value.environmentName)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListEnvironmentsInput {

    static func write(value: ListEnvironmentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["environmentTemplates"].writeList(value.environmentTemplates, memberWritingClosure: ProtonClientTypes.EnvironmentTemplateFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListEnvironmentTemplatesInput {

    static func write(value: ListEnvironmentTemplatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListEnvironmentTemplateVersionsInput {

    static func write(value: ListEnvironmentTemplateVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["templateName"].write(value.templateName)
    }
}

extension ListRepositoriesInput {

    static func write(value: ListRepositoriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListRepositorySyncDefinitionsInput {

    static func write(value: ListRepositorySyncDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["repositoryName"].write(value.repositoryName)
        try writer["repositoryProvider"].write(value.repositoryProvider)
        try writer["syncType"].write(value.syncType)
    }
}

extension ListServiceInstanceOutputsInput {

    static func write(value: ListServiceInstanceOutputsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListServiceInstanceProvisionedResourcesInput {

    static func write(value: ListServiceInstanceProvisionedResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListServiceInstancesInput {

    static func write(value: ListServiceInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: ProtonClientTypes.ListServiceInstancesFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceName"].write(value.serviceName)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListServicePipelineOutputsInput {

    static func write(value: ListServicePipelineOutputsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListServicePipelineProvisionedResourcesInput {

    static func write(value: ListServicePipelineProvisionedResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension ListServicesInput {

    static func write(value: ListServicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListServiceTemplatesInput {

    static func write(value: ListServiceTemplatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListServiceTemplateVersionsInput {

    static func write(value: ListServiceTemplateVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["templateName"].write(value.templateName)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension NotifyResourceDeploymentStatusChangeInput {

    static func write(value: NotifyResourceDeploymentStatusChangeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["outputs"].writeList(value.outputs, memberWritingClosure: ProtonClientTypes.Output.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceArn"].write(value.resourceArn)
        try writer["status"].write(value.status)
        try writer["statusMessage"].write(value.statusMessage)
    }
}

extension RejectEnvironmentAccountConnectionInput {

    static func write(value: RejectEnvironmentAccountConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeList(value.tags, memberWritingClosure: ProtonClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAccountSettingsInput {

    static func write(value: UpdateAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deletePipelineProvisioningRepository"].write(value.deletePipelineProvisioningRepository)
        try writer["pipelineCodebuildRoleArn"].write(value.pipelineCodebuildRoleArn)
        try writer["pipelineProvisioningRepository"].write(value.pipelineProvisioningRepository, with: ProtonClientTypes.RepositoryBranchInput.write(value:to:))
        try writer["pipelineServiceRoleArn"].write(value.pipelineServiceRoleArn)
    }
}

extension UpdateComponentInput {

    static func write(value: UpdateComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["deploymentType"].write(value.deploymentType)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["serviceInstanceName"].write(value.serviceInstanceName)
        try writer["serviceName"].write(value.serviceName)
        try writer["serviceSpec"].write(value.serviceSpec)
        try writer["templateFile"].write(value.templateFile)
    }
}

extension UpdateEnvironmentInput {

    static func write(value: UpdateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codebuildRoleArn"].write(value.codebuildRoleArn)
        try writer["componentRoleArn"].write(value.componentRoleArn)
        try writer["deploymentType"].write(value.deploymentType)
        try writer["description"].write(value.description)
        try writer["environmentAccountConnectionId"].write(value.environmentAccountConnectionId)
        try writer["name"].write(value.name)
        try writer["protonServiceRoleArn"].write(value.protonServiceRoleArn)
        try writer["provisioningRepository"].write(value.provisioningRepository, with: ProtonClientTypes.RepositoryBranchInput.write(value:to:))
        try writer["spec"].write(value.spec)
        try writer["templateMajorVersion"].write(value.templateMajorVersion)
        try writer["templateMinorVersion"].write(value.templateMinorVersion)
    }
}

extension UpdateEnvironmentAccountConnectionInput {

    static func write(value: UpdateEnvironmentAccountConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codebuildRoleArn"].write(value.codebuildRoleArn)
        try writer["componentRoleArn"].write(value.componentRoleArn)
        try writer["id"].write(value.id)
        try writer["roleArn"].write(value.roleArn)
    }
}

extension UpdateEnvironmentTemplateInput {

    static func write(value: UpdateEnvironmentTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["displayName"].write(value.displayName)
        try writer["name"].write(value.name)
    }
}

extension UpdateEnvironmentTemplateVersionInput {

    static func write(value: UpdateEnvironmentTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["majorVersion"].write(value.majorVersion)
        try writer["minorVersion"].write(value.minorVersion)
        try writer["status"].write(value.status)
        try writer["templateName"].write(value.templateName)
    }
}

extension UpdateServiceInput {

    static func write(value: UpdateServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["spec"].write(value.spec)
    }
}

extension UpdateServiceInstanceInput {

    static func write(value: UpdateServiceInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["deploymentType"].write(value.deploymentType)
        try writer["name"].write(value.name)
        try writer["serviceName"].write(value.serviceName)
        try writer["spec"].write(value.spec)
        try writer["templateMajorVersion"].write(value.templateMajorVersion)
        try writer["templateMinorVersion"].write(value.templateMinorVersion)
    }
}

extension UpdateServicePipelineInput {

    static func write(value: UpdateServicePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentType"].write(value.deploymentType)
        try writer["serviceName"].write(value.serviceName)
        try writer["spec"].write(value.spec)
        try writer["templateMajorVersion"].write(value.templateMajorVersion)
        try writer["templateMinorVersion"].write(value.templateMinorVersion)
    }
}

extension UpdateServiceSyncBlockerInput {

    static func write(value: UpdateServiceSyncBlockerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["resolvedReason"].write(value.resolvedReason)
    }
}

extension UpdateServiceSyncConfigInput {

    static func write(value: UpdateServiceSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branch"].write(value.branch)
        try writer["filePath"].write(value.filePath)
        try writer["repositoryName"].write(value.repositoryName)
        try writer["repositoryProvider"].write(value.repositoryProvider)
        try writer["serviceName"].write(value.serviceName)
    }
}

extension UpdateServiceTemplateInput {

    static func write(value: UpdateServiceTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["displayName"].write(value.displayName)
        try writer["name"].write(value.name)
    }
}

extension UpdateServiceTemplateVersionInput {

    static func write(value: UpdateServiceTemplateVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["compatibleEnvironmentTemplates"].writeList(value.compatibleEnvironmentTemplates, memberWritingClosure: ProtonClientTypes.CompatibleEnvironmentTemplateInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["description"].write(value.description)
        try writer["majorVersion"].write(value.majorVersion)
        try writer["minorVersion"].write(value.minorVersion)
        try writer["status"].write(value.status)
        try writer["supportedComponentSources"].writeList(value.supportedComponentSources, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ProtonClientTypes.ServiceTemplateSupportedComponentSourceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["templateName"].write(value.templateName)
    }
}

extension UpdateTemplateSyncConfigInput {

    static func write(value: UpdateTemplateSyncConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branch"].write(value.branch)
        try writer["repositoryName"].write(value.repositoryName)
        try writer["repositoryProvider"].write(value.repositoryProvider)
        try writer["subdirectory"].write(value.subdirectory)
        try writer["templateName"].write(value.templateName)
        try writer["templateType"].write(value.templateType)
    }
}

extension AcceptEnvironmentAccountConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptEnvironmentAccountConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcceptEnvironmentAccountConnectionOutput()
        value.environmentAccountConnection = try reader["environmentAccountConnection"].readIfPresent(with: ProtonClientTypes.EnvironmentAccountConnection.read(from:))
        return value
    }
}

extension CancelComponentDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelComponentDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelComponentDeploymentOutput()
        value.component = try reader["component"].readIfPresent(with: ProtonClientTypes.Component.read(from:))
        return value
    }
}

extension CancelEnvironmentDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelEnvironmentDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelEnvironmentDeploymentOutput()
        value.environment = try reader["environment"].readIfPresent(with: ProtonClientTypes.Environment.read(from:))
        return value
    }
}

extension CancelServiceInstanceDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelServiceInstanceDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelServiceInstanceDeploymentOutput()
        value.serviceInstance = try reader["serviceInstance"].readIfPresent(with: ProtonClientTypes.ServiceInstance.read(from:))
        return value
    }
}

extension CancelServicePipelineDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelServicePipelineDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelServicePipelineDeploymentOutput()
        value.pipeline = try reader["pipeline"].readIfPresent(with: ProtonClientTypes.ServicePipeline.read(from:))
        return value
    }
}

extension CreateComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateComponentOutput()
        value.component = try reader["component"].readIfPresent(with: ProtonClientTypes.Component.read(from:))
        return value
    }
}

extension CreateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentOutput()
        value.environment = try reader["environment"].readIfPresent(with: ProtonClientTypes.Environment.read(from:))
        return value
    }
}

extension CreateEnvironmentAccountConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentAccountConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentAccountConnectionOutput()
        value.environmentAccountConnection = try reader["environmentAccountConnection"].readIfPresent(with: ProtonClientTypes.EnvironmentAccountConnection.read(from:))
        return value
    }
}

extension CreateEnvironmentTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentTemplateOutput()
        value.environmentTemplate = try reader["environmentTemplate"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplate.read(from:))
        return value
    }
}

extension CreateEnvironmentTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentTemplateVersionOutput()
        value.environmentTemplateVersion = try reader["environmentTemplateVersion"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplateVersion.read(from:))
        return value
    }
}

extension CreateRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRepositoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRepositoryOutput()
        value.repository = try reader["repository"].readIfPresent(with: ProtonClientTypes.Repository.read(from:))
        return value
    }
}

extension CreateServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ProtonClientTypes.Service.read(from:))
        return value
    }
}

extension CreateServiceInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceInstanceOutput()
        value.serviceInstance = try reader["serviceInstance"].readIfPresent(with: ProtonClientTypes.ServiceInstance.read(from:))
        return value
    }
}

extension CreateServiceSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceSyncConfigOutput()
        value.serviceSyncConfig = try reader["serviceSyncConfig"].readIfPresent(with: ProtonClientTypes.ServiceSyncConfig.read(from:))
        return value
    }
}

extension CreateServiceTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceTemplateOutput()
        value.serviceTemplate = try reader["serviceTemplate"].readIfPresent(with: ProtonClientTypes.ServiceTemplate.read(from:))
        return value
    }
}

extension CreateServiceTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceTemplateVersionOutput()
        value.serviceTemplateVersion = try reader["serviceTemplateVersion"].readIfPresent(with: ProtonClientTypes.ServiceTemplateVersion.read(from:))
        return value
    }
}

extension CreateTemplateSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTemplateSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTemplateSyncConfigOutput()
        value.templateSyncConfig = try reader["templateSyncConfig"].readIfPresent(with: ProtonClientTypes.TemplateSyncConfig.read(from:))
        return value
    }
}

extension DeleteComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteComponentOutput()
        value.component = try reader["component"].readIfPresent(with: ProtonClientTypes.Component.read(from:))
        return value
    }
}

extension DeleteDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDeploymentOutput()
        value.deployment = try reader["deployment"].readIfPresent(with: ProtonClientTypes.Deployment.read(from:))
        return value
    }
}

extension DeleteEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEnvironmentOutput()
        value.environment = try reader["environment"].readIfPresent(with: ProtonClientTypes.Environment.read(from:))
        return value
    }
}

extension DeleteEnvironmentAccountConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentAccountConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEnvironmentAccountConnectionOutput()
        value.environmentAccountConnection = try reader["environmentAccountConnection"].readIfPresent(with: ProtonClientTypes.EnvironmentAccountConnection.read(from:))
        return value
    }
}

extension DeleteEnvironmentTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEnvironmentTemplateOutput()
        value.environmentTemplate = try reader["environmentTemplate"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplate.read(from:))
        return value
    }
}

extension DeleteEnvironmentTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEnvironmentTemplateVersionOutput()
        value.environmentTemplateVersion = try reader["environmentTemplateVersion"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplateVersion.read(from:))
        return value
    }
}

extension DeleteRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRepositoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRepositoryOutput()
        value.repository = try reader["repository"].readIfPresent(with: ProtonClientTypes.Repository.read(from:))
        return value
    }
}

extension DeleteServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ProtonClientTypes.Service.read(from:))
        return value
    }
}

extension DeleteServiceSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServiceSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteServiceSyncConfigOutput()
        value.serviceSyncConfig = try reader["serviceSyncConfig"].readIfPresent(with: ProtonClientTypes.ServiceSyncConfig.read(from:))
        return value
    }
}

extension DeleteServiceTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServiceTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteServiceTemplateOutput()
        value.serviceTemplate = try reader["serviceTemplate"].readIfPresent(with: ProtonClientTypes.ServiceTemplate.read(from:))
        return value
    }
}

extension DeleteServiceTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServiceTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteServiceTemplateVersionOutput()
        value.serviceTemplateVersion = try reader["serviceTemplateVersion"].readIfPresent(with: ProtonClientTypes.ServiceTemplateVersion.read(from:))
        return value
    }
}

extension DeleteTemplateSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTemplateSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTemplateSyncConfigOutput()
        value.templateSyncConfig = try reader["templateSyncConfig"].readIfPresent(with: ProtonClientTypes.TemplateSyncConfig.read(from:))
        return value
    }
}

extension GetAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountSettingsOutput()
        value.accountSettings = try reader["accountSettings"].readIfPresent(with: ProtonClientTypes.AccountSettings.read(from:))
        return value
    }
}

extension GetComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetComponentOutput()
        value.component = try reader["component"].readIfPresent(with: ProtonClientTypes.Component.read(from:))
        return value
    }
}

extension GetDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentOutput()
        value.deployment = try reader["deployment"].readIfPresent(with: ProtonClientTypes.Deployment.read(from:))
        return value
    }
}

extension GetEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentOutput()
        value.environment = try reader["environment"].readIfPresent(with: ProtonClientTypes.Environment.read(from:))
        return value
    }
}

extension GetEnvironmentAccountConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentAccountConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentAccountConnectionOutput()
        value.environmentAccountConnection = try reader["environmentAccountConnection"].readIfPresent(with: ProtonClientTypes.EnvironmentAccountConnection.read(from:))
        return value
    }
}

extension GetEnvironmentTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentTemplateOutput()
        value.environmentTemplate = try reader["environmentTemplate"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplate.read(from:))
        return value
    }
}

extension GetEnvironmentTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentTemplateVersionOutput()
        value.environmentTemplateVersion = try reader["environmentTemplateVersion"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplateVersion.read(from:))
        return value
    }
}

extension GetRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRepositoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRepositoryOutput()
        value.repository = try reader["repository"].readIfPresent(with: ProtonClientTypes.Repository.read(from:))
        return value
    }
}

extension GetRepositorySyncStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRepositorySyncStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRepositorySyncStatusOutput()
        value.latestSync = try reader["latestSync"].readIfPresent(with: ProtonClientTypes.RepositorySyncAttempt.read(from:))
        return value
    }
}

extension GetResourcesSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcesSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcesSummaryOutput()
        value.counts = try reader["counts"].readIfPresent(with: ProtonClientTypes.CountsSummary.read(from:))
        return value
    }
}

extension GetServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ProtonClientTypes.Service.read(from:))
        return value
    }
}

extension GetServiceInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceInstanceOutput()
        value.serviceInstance = try reader["serviceInstance"].readIfPresent(with: ProtonClientTypes.ServiceInstance.read(from:))
        return value
    }
}

extension GetServiceInstanceSyncStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceInstanceSyncStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceInstanceSyncStatusOutput()
        value.desiredState = try reader["desiredState"].readIfPresent(with: ProtonClientTypes.Revision.read(from:))
        value.latestSuccessfulSync = try reader["latestSuccessfulSync"].readIfPresent(with: ProtonClientTypes.ResourceSyncAttempt.read(from:))
        value.latestSync = try reader["latestSync"].readIfPresent(with: ProtonClientTypes.ResourceSyncAttempt.read(from:))
        return value
    }
}

extension GetServiceSyncBlockerSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceSyncBlockerSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceSyncBlockerSummaryOutput()
        value.serviceSyncBlockerSummary = try reader["serviceSyncBlockerSummary"].readIfPresent(with: ProtonClientTypes.ServiceSyncBlockerSummary.read(from:))
        return value
    }
}

extension GetServiceSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceSyncConfigOutput()
        value.serviceSyncConfig = try reader["serviceSyncConfig"].readIfPresent(with: ProtonClientTypes.ServiceSyncConfig.read(from:))
        return value
    }
}

extension GetServiceTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceTemplateOutput()
        value.serviceTemplate = try reader["serviceTemplate"].readIfPresent(with: ProtonClientTypes.ServiceTemplate.read(from:))
        return value
    }
}

extension GetServiceTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceTemplateVersionOutput()
        value.serviceTemplateVersion = try reader["serviceTemplateVersion"].readIfPresent(with: ProtonClientTypes.ServiceTemplateVersion.read(from:))
        return value
    }
}

extension GetTemplateSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateSyncConfigOutput()
        value.templateSyncConfig = try reader["templateSyncConfig"].readIfPresent(with: ProtonClientTypes.TemplateSyncConfig.read(from:))
        return value
    }
}

extension GetTemplateSyncStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateSyncStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateSyncStatusOutput()
        value.desiredState = try reader["desiredState"].readIfPresent(with: ProtonClientTypes.Revision.read(from:))
        value.latestSuccessfulSync = try reader["latestSuccessfulSync"].readIfPresent(with: ProtonClientTypes.ResourceSyncAttempt.read(from:))
        value.latestSync = try reader["latestSync"].readIfPresent(with: ProtonClientTypes.ResourceSyncAttempt.read(from:))
        return value
    }
}

extension ListComponentOutputsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListComponentOutputsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListComponentOutputsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: ProtonClientTypes.Output.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListComponentProvisionedResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListComponentProvisionedResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListComponentProvisionedResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.provisionedResources = try reader["provisionedResources"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ProvisionedResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListComponentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListComponentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListComponentsOutput()
        value.components = try reader["components"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ComponentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentsOutput()
        value.deployments = try reader["deployments"].readListIfPresent(memberReadingClosure: ProtonClientTypes.DeploymentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListEnvironmentAccountConnectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentAccountConnectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentAccountConnectionsOutput()
        value.environmentAccountConnections = try reader["environmentAccountConnections"].readListIfPresent(memberReadingClosure: ProtonClientTypes.EnvironmentAccountConnectionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListEnvironmentOutputsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentOutputsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentOutputsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: ProtonClientTypes.Output.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListEnvironmentProvisionedResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentProvisionedResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentProvisionedResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.provisionedResources = try reader["provisionedResources"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ProvisionedResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentsOutput()
        value.environments = try reader["environments"].readListIfPresent(memberReadingClosure: ProtonClientTypes.EnvironmentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListEnvironmentTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentTemplatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templates = try reader["templates"].readListIfPresent(memberReadingClosure: ProtonClientTypes.EnvironmentTemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListEnvironmentTemplateVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentTemplateVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentTemplateVersionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templateVersions = try reader["templateVersions"].readListIfPresent(memberReadingClosure: ProtonClientTypes.EnvironmentTemplateVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListRepositoriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRepositoriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRepositoriesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.repositories = try reader["repositories"].readListIfPresent(memberReadingClosure: ProtonClientTypes.RepositorySummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListRepositorySyncDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRepositorySyncDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRepositorySyncDefinitionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.syncDefinitions = try reader["syncDefinitions"].readListIfPresent(memberReadingClosure: ProtonClientTypes.RepositorySyncDefinition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServiceInstanceOutputsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServiceInstanceOutputsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServiceInstanceOutputsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: ProtonClientTypes.Output.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServiceInstanceProvisionedResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServiceInstanceProvisionedResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServiceInstanceProvisionedResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.provisionedResources = try reader["provisionedResources"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ProvisionedResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServiceInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServiceInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServiceInstancesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.serviceInstances = try reader["serviceInstances"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ServiceInstanceSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServicePipelineOutputsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicePipelineOutputsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicePipelineOutputsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: ProtonClientTypes.Output.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServicePipelineProvisionedResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicePipelineProvisionedResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicePipelineProvisionedResourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.provisionedResources = try reader["provisionedResources"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ProvisionedResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.services = try reader["services"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ServiceSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServiceTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServiceTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServiceTemplatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templates = try reader["templates"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ServiceTemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListServiceTemplateVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServiceTemplateVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServiceTemplateVersionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templateVersions = try reader["templateVersions"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ServiceTemplateVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: ProtonClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension NotifyResourceDeploymentStatusChangeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> NotifyResourceDeploymentStatusChangeOutput {
        return NotifyResourceDeploymentStatusChangeOutput()
    }
}

extension RejectEnvironmentAccountConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectEnvironmentAccountConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RejectEnvironmentAccountConnectionOutput()
        value.environmentAccountConnection = try reader["environmentAccountConnection"].readIfPresent(with: ProtonClientTypes.EnvironmentAccountConnection.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountSettingsOutput()
        value.accountSettings = try reader["accountSettings"].readIfPresent(with: ProtonClientTypes.AccountSettings.read(from:))
        return value
    }
}

extension UpdateComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateComponentOutput()
        value.component = try reader["component"].readIfPresent(with: ProtonClientTypes.Component.read(from:))
        return value
    }
}

extension UpdateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentOutput()
        value.environment = try reader["environment"].readIfPresent(with: ProtonClientTypes.Environment.read(from:))
        return value
    }
}

extension UpdateEnvironmentAccountConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentAccountConnectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentAccountConnectionOutput()
        value.environmentAccountConnection = try reader["environmentAccountConnection"].readIfPresent(with: ProtonClientTypes.EnvironmentAccountConnection.read(from:))
        return value
    }
}

extension UpdateEnvironmentTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentTemplateOutput()
        value.environmentTemplate = try reader["environmentTemplate"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplate.read(from:))
        return value
    }
}

extension UpdateEnvironmentTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEnvironmentTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEnvironmentTemplateVersionOutput()
        value.environmentTemplateVersion = try reader["environmentTemplateVersion"].readIfPresent(with: ProtonClientTypes.EnvironmentTemplateVersion.read(from:))
        return value
    }
}

extension UpdateServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceOutput()
        value.service = try reader["service"].readIfPresent(with: ProtonClientTypes.Service.read(from:))
        return value
    }
}

extension UpdateServiceInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceInstanceOutput()
        value.serviceInstance = try reader["serviceInstance"].readIfPresent(with: ProtonClientTypes.ServiceInstance.read(from:))
        return value
    }
}

extension UpdateServicePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServicePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServicePipelineOutput()
        value.pipeline = try reader["pipeline"].readIfPresent(with: ProtonClientTypes.ServicePipeline.read(from:))
        return value
    }
}

extension UpdateServiceSyncBlockerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceSyncBlockerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceSyncBlockerOutput()
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent() ?? ""
        value.serviceSyncBlocker = try reader["serviceSyncBlocker"].readIfPresent(with: ProtonClientTypes.SyncBlocker.read(from:))
        return value
    }
}

extension UpdateServiceSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceSyncConfigOutput()
        value.serviceSyncConfig = try reader["serviceSyncConfig"].readIfPresent(with: ProtonClientTypes.ServiceSyncConfig.read(from:))
        return value
    }
}

extension UpdateServiceTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceTemplateOutput()
        value.serviceTemplate = try reader["serviceTemplate"].readIfPresent(with: ProtonClientTypes.ServiceTemplate.read(from:))
        return value
    }
}

extension UpdateServiceTemplateVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceTemplateVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateServiceTemplateVersionOutput()
        value.serviceTemplateVersion = try reader["serviceTemplateVersion"].readIfPresent(with: ProtonClientTypes.ServiceTemplateVersion.read(from:))
        return value
    }
}

extension UpdateTemplateSyncConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTemplateSyncConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTemplateSyncConfigOutput()
        value.templateSyncConfig = try reader["templateSyncConfig"].readIfPresent(with: ProtonClientTypes.TemplateSyncConfig.read(from:))
        return value
    }
}

enum AcceptEnvironmentAccountConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelComponentDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelEnvironmentDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelServiceInstanceDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelServicePipelineDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentAccountConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTemplateSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentAccountConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServiceSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServiceTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServiceTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTemplateSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentAccountConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRepositorySyncStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcesSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceInstanceSyncStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceSyncBlockerSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateSyncStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListComponentOutputsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListComponentProvisionedResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListComponentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentAccountConnectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentOutputsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentProvisionedResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentTemplateVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRepositoriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRepositorySyncDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServiceInstanceOutputsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServiceInstanceProvisionedResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServiceInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicePipelineOutputsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicePipelineProvisionedResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServiceTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServiceTemplateVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum NotifyResourceDeploymentStatusChangeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectEnvironmentAccountConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentAccountConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEnvironmentTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServicePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceSyncBlockerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceTemplateVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTemplateSyncConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ProtonClientTypes.EnvironmentAccountConnection {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentAccountConnection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentAccountConnection()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.managementAccountId = try reader["managementAccountId"].readIfPresent() ?? ""
        value.environmentAccountId = try reader["environmentAccountId"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.requestedAt = try reader["requestedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.componentRoleArn = try reader["componentRoleArn"].readIfPresent()
        value.codebuildRoleArn = try reader["codebuildRoleArn"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.Component {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Component {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Component()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.serviceSpec = try reader["serviceSpec"].readIfPresent()
        value.lastClientRequestToken = try reader["lastClientRequestToken"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.Environment {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Environment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Environment()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.protonServiceRoleArn = try reader["protonServiceRoleArn"].readIfPresent()
        value.environmentAccountConnectionId = try reader["environmentAccountConnectionId"].readIfPresent()
        value.environmentAccountId = try reader["environmentAccountId"].readIfPresent()
        value.spec = try reader["spec"].readIfPresent()
        value.provisioning = try reader["provisioning"].readIfPresent()
        value.provisioningRepository = try reader["provisioningRepository"].readIfPresent(with: ProtonClientTypes.RepositoryBranch.read(from:))
        value.componentRoleArn = try reader["componentRoleArn"].readIfPresent()
        value.codebuildRoleArn = try reader["codebuildRoleArn"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.RepositoryBranch {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.RepositoryBranch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.RepositoryBranch()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.provider = try reader["provider"].readIfPresent() ?? .sdkUnknown("")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.branch = try reader["branch"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.ServiceInstance {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceInstance()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.serviceName = try reader["serviceName"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.spec = try reader["spec"].readIfPresent()
        value.lastClientRequestToken = try reader["lastClientRequestToken"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServicePipeline {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServicePipeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServicePipeline()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.spec = try reader["spec"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.EnvironmentTemplate {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentTemplate()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.displayName = try reader["displayName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.recommendedVersion = try reader["recommendedVersion"].readIfPresent()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.provisioning = try reader["provisioning"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.EnvironmentTemplateVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentTemplateVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentTemplateVersion()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.majorVersion = try reader["majorVersion"].readIfPresent() ?? ""
        value.minorVersion = try reader["minorVersion"].readIfPresent() ?? ""
        value.recommendedMinorVersion = try reader["recommendedMinorVersion"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.schema = try reader["schema"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.Repository {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Repository {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Repository()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.provider = try reader["provider"].readIfPresent() ?? .sdkUnknown("")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.connectionArn = try reader["connectionArn"].readIfPresent() ?? ""
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.Service {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Service {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Service()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.spec = try reader["spec"].readIfPresent() ?? ""
        value.pipeline = try reader["pipeline"].readIfPresent(with: ProtonClientTypes.ServicePipeline.read(from:))
        value.repositoryConnectionArn = try reader["repositoryConnectionArn"].readIfPresent()
        value.repositoryId = try reader["repositoryId"].readIfPresent()
        value.branchName = try reader["branchName"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServiceSyncConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceSyncConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceSyncConfig()
        value.serviceName = try reader["serviceName"].readIfPresent() ?? ""
        value.repositoryProvider = try reader["repositoryProvider"].readIfPresent() ?? .sdkUnknown("")
        value.repositoryName = try reader["repositoryName"].readIfPresent() ?? ""
        value.branch = try reader["branch"].readIfPresent() ?? ""
        value.filePath = try reader["filePath"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.ServiceTemplate {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceTemplate()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.displayName = try reader["displayName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.recommendedVersion = try reader["recommendedVersion"].readIfPresent()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.pipelineProvisioning = try reader["pipelineProvisioning"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServiceTemplateVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceTemplateVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceTemplateVersion()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.majorVersion = try reader["majorVersion"].readIfPresent() ?? ""
        value.minorVersion = try reader["minorVersion"].readIfPresent() ?? ""
        value.recommendedMinorVersion = try reader["recommendedMinorVersion"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.compatibleEnvironmentTemplates = try reader["compatibleEnvironmentTemplates"].readListIfPresent(memberReadingClosure: ProtonClientTypes.CompatibleEnvironmentTemplate.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.schema = try reader["schema"].readIfPresent()
        value.supportedComponentSources = try reader["supportedComponentSources"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ProtonClientTypes.ServiceTemplateSupportedComponentSourceType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ProtonClientTypes.CompatibleEnvironmentTemplate {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.CompatibleEnvironmentTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.CompatibleEnvironmentTemplate()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.majorVersion = try reader["majorVersion"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.TemplateSyncConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.TemplateSyncConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.TemplateSyncConfig()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateType = try reader["templateType"].readIfPresent() ?? .sdkUnknown("")
        value.repositoryProvider = try reader["repositoryProvider"].readIfPresent() ?? .sdkUnknown("")
        value.repositoryName = try reader["repositoryName"].readIfPresent() ?? ""
        value.branch = try reader["branch"].readIfPresent() ?? ""
        value.subdirectory = try reader["subdirectory"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.Deployment {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Deployment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Deployment()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.targetArn = try reader["targetArn"].readIfPresent() ?? ""
        value.targetResourceCreatedAt = try reader["targetResourceCreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.targetResourceType = try reader["targetResourceType"].readIfPresent() ?? .sdkUnknown("")
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.componentName = try reader["componentName"].readIfPresent()
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.completedAt = try reader["completedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        value.initialState = try reader["initialState"].readIfPresent(with: ProtonClientTypes.DeploymentState.read(from:))
        value.targetState = try reader["targetState"].readIfPresent(with: ProtonClientTypes.DeploymentState.read(from:))
        return value
    }
}

extension ProtonClientTypes.DeploymentState {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.DeploymentState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "serviceInstance":
                return .serviceinstance(try reader["serviceInstance"].read(with: ProtonClientTypes.ServiceInstanceState.read(from:)))
            case "environment":
                return .environment(try reader["environment"].read(with: ProtonClientTypes.EnvironmentState.read(from:)))
            case "servicePipeline":
                return .servicepipeline(try reader["servicePipeline"].read(with: ProtonClientTypes.ServicePipelineState.read(from:)))
            case "component":
                return .component(try reader["component"].read(with: ProtonClientTypes.ComponentState.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension ProtonClientTypes.ComponentState {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ComponentState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ComponentState()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.serviceSpec = try reader["serviceSpec"].readIfPresent()
        value.templateFile = try reader["templateFile"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServicePipelineState {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServicePipelineState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServicePipelineState()
        value.spec = try reader["spec"].readIfPresent()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.EnvironmentState {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentState()
        value.spec = try reader["spec"].readIfPresent()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.ServiceInstanceState {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceInstanceState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceInstanceState()
        value.spec = try reader["spec"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        value.lastSuccessfulComponentDeploymentIds = try reader["lastSuccessfulComponentDeploymentIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastSuccessfulEnvironmentDeploymentId = try reader["lastSuccessfulEnvironmentDeploymentId"].readIfPresent()
        value.lastSuccessfulServicePipelineDeploymentId = try reader["lastSuccessfulServicePipelineDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.AccountSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.AccountSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.AccountSettings()
        value.pipelineServiceRoleArn = try reader["pipelineServiceRoleArn"].readIfPresent()
        value.pipelineProvisioningRepository = try reader["pipelineProvisioningRepository"].readIfPresent(with: ProtonClientTypes.RepositoryBranch.read(from:))
        value.pipelineCodebuildRoleArn = try reader["pipelineCodebuildRoleArn"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.RepositorySyncAttempt {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.RepositorySyncAttempt {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.RepositorySyncAttempt()
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: ProtonClientTypes.RepositorySyncEvent.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ProtonClientTypes.RepositorySyncEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.RepositorySyncEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.RepositorySyncEvent()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.externalId = try reader["externalId"].readIfPresent()
        value.time = try reader["time"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.event = try reader["event"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.CountsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.CountsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.CountsSummary()
        value.components = try reader["components"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        value.environments = try reader["environments"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        value.environmentTemplates = try reader["environmentTemplates"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        value.serviceInstances = try reader["serviceInstances"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        value.services = try reader["services"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        value.serviceTemplates = try reader["serviceTemplates"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        value.pipelines = try reader["pipelines"].readIfPresent(with: ProtonClientTypes.ResourceCountsSummary.read(from:))
        return value
    }
}

extension ProtonClientTypes.ResourceCountsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ResourceCountsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ResourceCountsSummary()
        value.total = try reader["total"].readIfPresent() ?? 0
        value.failed = try reader["failed"].readIfPresent()
        value.upToDate = try reader["upToDate"].readIfPresent()
        value.behindMajor = try reader["behindMajor"].readIfPresent()
        value.behindMinor = try reader["behindMinor"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ResourceSyncAttempt {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ResourceSyncAttempt {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ResourceSyncAttempt()
        value.initialRevision = try reader["initialRevision"].readIfPresent(with: ProtonClientTypes.Revision.read(from:))
        value.targetRevision = try reader["targetRevision"].readIfPresent(with: ProtonClientTypes.Revision.read(from:))
        value.target = try reader["target"].readIfPresent() ?? ""
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: ProtonClientTypes.ResourceSyncEvent.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ProtonClientTypes.ResourceSyncEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ResourceSyncEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ResourceSyncEvent()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.externalId = try reader["externalId"].readIfPresent()
        value.time = try reader["time"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.event = try reader["event"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.Revision {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Revision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Revision()
        value.repositoryName = try reader["repositoryName"].readIfPresent() ?? ""
        value.repositoryProvider = try reader["repositoryProvider"].readIfPresent() ?? .sdkUnknown("")
        value.sha = try reader["sha"].readIfPresent() ?? ""
        value.directory = try reader["directory"].readIfPresent() ?? ""
        value.branch = try reader["branch"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.ServiceSyncBlockerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceSyncBlockerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceSyncBlockerSummary()
        value.serviceName = try reader["serviceName"].readIfPresent() ?? ""
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.latestBlockers = try reader["latestBlockers"].readListIfPresent(memberReadingClosure: ProtonClientTypes.SyncBlocker.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ProtonClientTypes.SyncBlocker {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.SyncBlocker {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.SyncBlocker()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.createdReason = try reader["createdReason"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.contexts = try reader["contexts"].readListIfPresent(memberReadingClosure: ProtonClientTypes.SyncBlockerContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resolvedReason = try reader["resolvedReason"].readIfPresent()
        value.resolvedAt = try reader["resolvedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ProtonClientTypes.SyncBlockerContext {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.SyncBlockerContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.SyncBlockerContext()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.Output {

    static func write(value: ProtonClientTypes.Output?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["valueString"].write(value.valueString)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Output {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Output()
        value.key = try reader["key"].readIfPresent()
        value.valueString = try reader["valueString"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ProvisionedResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ProvisionedResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ProvisionedResource()
        value.name = try reader["name"].readIfPresent()
        value.identifier = try reader["identifier"].readIfPresent()
        value.provisioningEngine = try reader["provisioningEngine"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ComponentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ComponentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ComponentSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.DeploymentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.DeploymentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.DeploymentSummary()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.targetArn = try reader["targetArn"].readIfPresent() ?? ""
        value.targetResourceCreatedAt = try reader["targetResourceCreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.targetResourceType = try reader["targetResourceType"].readIfPresent() ?? .sdkUnknown("")
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.completedAt = try reader["completedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.serviceInstanceName = try reader["serviceInstanceName"].readIfPresent()
        value.componentName = try reader["componentName"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ProtonClientTypes.EnvironmentAccountConnectionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentAccountConnectionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentAccountConnectionSummary()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.managementAccountId = try reader["managementAccountId"].readIfPresent() ?? ""
        value.environmentAccountId = try reader["environmentAccountId"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.requestedAt = try reader["requestedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.componentRoleArn = try reader["componentRoleArn"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.EnvironmentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.protonServiceRoleArn = try reader["protonServiceRoleArn"].readIfPresent()
        value.environmentAccountConnectionId = try reader["environmentAccountConnectionId"].readIfPresent()
        value.environmentAccountId = try reader["environmentAccountId"].readIfPresent()
        value.provisioning = try reader["provisioning"].readIfPresent()
        value.componentRoleArn = try reader["componentRoleArn"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.EnvironmentTemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentTemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentTemplateSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.displayName = try reader["displayName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.recommendedVersion = try reader["recommendedVersion"].readIfPresent()
        value.provisioning = try reader["provisioning"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.EnvironmentTemplateVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.EnvironmentTemplateVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.EnvironmentTemplateVersionSummary()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.majorVersion = try reader["majorVersion"].readIfPresent() ?? ""
        value.minorVersion = try reader["minorVersion"].readIfPresent() ?? ""
        value.recommendedMinorVersion = try reader["recommendedMinorVersion"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension ProtonClientTypes.RepositorySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.RepositorySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.RepositorySummary()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.provider = try reader["provider"].readIfPresent() ?? .sdkUnknown("")
        value.name = try reader["name"].readIfPresent() ?? ""
        value.connectionArn = try reader["connectionArn"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.RepositorySyncDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.RepositorySyncDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.RepositorySyncDefinition()
        value.target = try reader["target"].readIfPresent() ?? ""
        value.parent = try reader["parent"].readIfPresent() ?? ""
        value.branch = try reader["branch"].readIfPresent() ?? ""
        value.directory = try reader["directory"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.ServiceInstanceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceInstanceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceInstanceSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentAttemptedAt = try reader["lastDeploymentAttemptedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastDeploymentSucceededAt = try reader["lastDeploymentSucceededAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.serviceName = try reader["serviceName"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.templateMajorVersion = try reader["templateMajorVersion"].readIfPresent() ?? ""
        value.templateMinorVersion = try reader["templateMinorVersion"].readIfPresent() ?? ""
        value.deploymentStatus = try reader["deploymentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.deploymentStatusMessage = try reader["deploymentStatusMessage"].readIfPresent()
        value.lastAttemptedDeploymentId = try reader["lastAttemptedDeploymentId"].readIfPresent()
        value.lastSucceededDeploymentId = try reader["lastSucceededDeploymentId"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServiceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServiceTemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceTemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceTemplateSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.displayName = try reader["displayName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.recommendedVersion = try reader["recommendedVersion"].readIfPresent()
        value.pipelineProvisioning = try reader["pipelineProvisioning"].readIfPresent()
        return value
    }
}

extension ProtonClientTypes.ServiceTemplateVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.ServiceTemplateVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.ServiceTemplateVersionSummary()
        value.templateName = try reader["templateName"].readIfPresent() ?? ""
        value.majorVersion = try reader["majorVersion"].readIfPresent() ?? ""
        value.minorVersion = try reader["minorVersion"].readIfPresent() ?? ""
        value.recommendedMinorVersion = try reader["recommendedMinorVersion"].readIfPresent()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension ProtonClientTypes.Tag {

    static func write(value: ProtonClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ProtonClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ProtonClientTypes.Tag()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension ProtonClientTypes.RepositoryBranchInput {

    static func write(value: ProtonClientTypes.RepositoryBranchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branch"].write(value.branch)
        try writer["name"].write(value.name)
        try writer["provider"].write(value.provider)
    }
}

extension ProtonClientTypes.TemplateVersionSourceInput {

    static func write(value: ProtonClientTypes.TemplateVersionSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .s3(s3):
                try writer["s3"].write(s3, with: ProtonClientTypes.S3ObjectSource.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }
}

extension ProtonClientTypes.S3ObjectSource {

    static func write(value: ProtonClientTypes.S3ObjectSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["key"].write(value.key)
    }
}

extension ProtonClientTypes.CompatibleEnvironmentTemplateInput {

    static func write(value: ProtonClientTypes.CompatibleEnvironmentTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension ProtonClientTypes.EnvironmentTemplateFilter {

    static func write(value: ProtonClientTypes.EnvironmentTemplateFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["majorVersion"].write(value.majorVersion)
        try writer["templateName"].write(value.templateName)
    }
}

extension ProtonClientTypes.ListServiceInstancesFilter {

    static func write(value: ProtonClientTypes.ListServiceInstancesFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }
}

public enum ProtonClientTypes {}
