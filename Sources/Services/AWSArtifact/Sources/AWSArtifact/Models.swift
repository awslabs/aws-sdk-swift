//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

extension ArtifactClientTypes {

    public enum AcceptanceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// Require explicit click-through acceptance of the Term associated with this Report.
        case explicit
        /// Do not require explicit click-through acceptance of the Term associated with this Report.
        case passthrough
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceptanceType] {
            return [
                .explicit,
                .passthrough
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .explicit: return "EXPLICIT"
            case .passthrough: return "PASSTHROUGH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// User does not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ArtifactClientTypes {

    public enum NotificationSubscriptionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// The account is not subscribed for notification.
        case notSubscribed
        /// The account is subscribed for notification.
        case subscribed
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationSubscriptionStatus] {
            return [
                .notSubscribed,
                .subscribed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notSubscribed: return "NOT_SUBSCRIBED"
            case .subscribed: return "SUBSCRIBED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ArtifactClientTypes {

    /// Account settings for the customer.
    public struct AccountSettings: Swift.Sendable {
        /// Notification subscription status of the customer.
        public var notificationSubscriptionStatus: ArtifactClientTypes.NotificationSubscriptionStatus?

        public init(
            notificationSubscriptionStatus: ArtifactClientTypes.NotificationSubscriptionStatus? = nil
        )
        {
            self.notificationSubscriptionStatus = notificationSubscriptionStatus
        }
    }
}

/// Request to create/modify content would result in a conflict.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Identifier of the affected resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// Type of the affected resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// An unknown server exception has occurred.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Number of seconds in which the caller can retry the request.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// Request references a resource which does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Identifier of the affected resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// Type of the affected resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// Request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Code for the affected quota.
        /// This member is required.
        public internal(set) var quotaCode: Swift.String? = nil
        /// Identifier of the affected resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// Type of the affected resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
        /// Code for the affected service.
        /// This member is required.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

/// Request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Code for the affected quota.
        public internal(set) var quotaCode: Swift.String? = nil
        /// Number of seconds in which the caller can retry the request.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
        /// Code for the affected service.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.retryAfterSeconds = retryAfterSeconds
        self.properties.serviceCode = serviceCode
    }
}

extension ArtifactClientTypes {

    /// Validation exception message and name.
    public struct ValidationExceptionField: Swift.Sendable {
        /// Message describing why the field failed validation.
        /// This member is required.
        public var message: Swift.String?
        /// Name of validation exception.
        /// This member is required.
        public var name: Swift.String?

        public init(
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }
}

extension ArtifactClientTypes {

    public enum ValidationExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cannotParse
        case fieldValidationFailed
        case invalidToken
        case other
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .cannotParse,
                .fieldValidationFailed,
                .invalidToken,
                .other,
                .unknownOperation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cannotParse: return "cannotParse"
            case .fieldValidationFailed: return "fieldValidationFailed"
            case .invalidToken: return "invalidToken"
            case .other: return "other"
            case .unknownOperation: return "unknownOperation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Request fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The field that caused the error, if applicable.
        public internal(set) var fieldList: [ArtifactClientTypes.ValidationExceptionField]? = nil
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Reason the request failed validation.
        /// This member is required.
        public internal(set) var reason: ArtifactClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fieldList: [ArtifactClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: ArtifactClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.fieldList = fieldList
        self.properties.message = message
        self.properties.reason = reason
    }
}

public struct GetAccountSettingsInput: Swift.Sendable {

    public init() { }
}

public struct GetAccountSettingsOutput: Swift.Sendable {
    /// Account settings for the customer.
    public var accountSettings: ArtifactClientTypes.AccountSettings?

    public init(
        accountSettings: ArtifactClientTypes.AccountSettings? = nil
    )
    {
        self.accountSettings = accountSettings
    }
}

public struct PutAccountSettingsInput: Swift.Sendable {
    /// Desired notification subscription status.
    public var notificationSubscriptionStatus: ArtifactClientTypes.NotificationSubscriptionStatus?

    public init(
        notificationSubscriptionStatus: ArtifactClientTypes.NotificationSubscriptionStatus? = nil
    )
    {
        self.notificationSubscriptionStatus = notificationSubscriptionStatus
    }
}

public struct PutAccountSettingsOutput: Swift.Sendable {
    /// Account settings for the customer.
    public var accountSettings: ArtifactClientTypes.AccountSettings?

    public init(
        accountSettings: ArtifactClientTypes.AccountSettings? = nil
    )
    {
        self.accountSettings = accountSettings
    }
}

public struct GetReportInput: Swift.Sendable {
    /// Unique resource ID for the report resource.
    /// This member is required.
    public var reportId: Swift.String?
    /// Version for the report resource.
    public var reportVersion: Swift.Int?
    /// Unique download token provided by GetTermForReport API.
    /// This member is required.
    public var termToken: Swift.String?

    public init(
        reportId: Swift.String? = nil,
        reportVersion: Swift.Int? = nil,
        termToken: Swift.String? = nil
    )
    {
        self.reportId = reportId
        self.reportVersion = reportVersion
        self.termToken = termToken
    }
}

public struct GetReportOutput: Swift.Sendable {
    /// Presigned S3 url to access the report content.
    public var documentPresignedUrl: Swift.String?

    public init(
        documentPresignedUrl: Swift.String? = nil
    )
    {
        self.documentPresignedUrl = documentPresignedUrl
    }
}

public struct GetReportMetadataInput: Swift.Sendable {
    /// Unique resource ID for the report resource.
    /// This member is required.
    public var reportId: Swift.String?
    /// Version for the report resource.
    public var reportVersion: Swift.Int?

    public init(
        reportId: Swift.String? = nil,
        reportVersion: Swift.Int? = nil
    )
    {
        self.reportId = reportId
        self.reportVersion = reportVersion
    }
}

extension ArtifactClientTypes {

    public enum PublishedState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// The resource is published for consumption.
        case published
        /// The resource is not published for consumption.
        case unpublished
        case sdkUnknown(Swift.String)

        public static var allCases: [PublishedState] {
            return [
                .published,
                .unpublished
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .published: return "PUBLISHED"
            case .unpublished: return "UNPUBLISHED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ArtifactClientTypes {

    public enum UploadState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case failed
        case fault
        case processing
        case sdkUnknown(Swift.String)

        public static var allCases: [UploadState] {
            return [
                .complete,
                .failed,
                .fault,
                .processing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .fault: return "FAULT"
            case .processing: return "PROCESSING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ArtifactClientTypes {

    /// Full detail for report resource metadata.
    public struct ReportDetail: Swift.Sendable {
        /// Acceptance type for report.
        public var acceptanceType: ArtifactClientTypes.AcceptanceType?
        /// ARN for the report resource.
        public var arn: Swift.String?
        /// Category for the report resource.
        public var category: Swift.String?
        /// Associated company name for the report resource.
        public var companyName: Swift.String?
        /// Timestamp indicating when the report resource was created.
        public var createdAt: Foundation.Date?
        /// Timestamp indicating when the report resource was deleted.
        public var deletedAt: Foundation.Date?
        /// Description for the report resource.
        public var description: Swift.String?
        /// Unique resource ID for the report resource.
        public var id: Swift.String?
        /// Timestamp indicating when the report resource was last modified.
        public var lastModifiedAt: Foundation.Date?
        /// Name for the report resource.
        public var name: Swift.String?
        /// Timestamp indicating the report resource effective end.
        public var periodEnd: Foundation.Date?
        /// Timestamp indicating the report resource effective start.
        public var periodStart: Foundation.Date?
        /// Associated product name for the report resource.
        public var productName: Swift.String?
        /// Sequence number to enforce optimistic locking.
        public var sequenceNumber: Swift.Int?
        /// Series for the report resource.
        public var series: Swift.String?
        /// Current state of the report resource
        public var state: ArtifactClientTypes.PublishedState?
        /// The message associated with the current upload state.
        public var statusMessage: Swift.String?
        /// Unique resource ARN for term resource.
        public var termArn: Swift.String?
        /// The current state of the document upload.
        public var uploadState: ArtifactClientTypes.UploadState?
        /// Version for the report resource.
        public var version: Swift.Int?

        public init(
            acceptanceType: ArtifactClientTypes.AcceptanceType? = nil,
            arn: Swift.String? = nil,
            category: Swift.String? = nil,
            companyName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            deletedAt: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            periodEnd: Foundation.Date? = nil,
            periodStart: Foundation.Date? = nil,
            productName: Swift.String? = nil,
            sequenceNumber: Swift.Int? = nil,
            series: Swift.String? = nil,
            state: ArtifactClientTypes.PublishedState? = nil,
            statusMessage: Swift.String? = nil,
            termArn: Swift.String? = nil,
            uploadState: ArtifactClientTypes.UploadState? = nil,
            version: Swift.Int? = nil
        )
        {
            self.acceptanceType = acceptanceType
            self.arn = arn
            self.category = category
            self.companyName = companyName
            self.createdAt = createdAt
            self.deletedAt = deletedAt
            self.description = description
            self.id = id
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.periodEnd = periodEnd
            self.periodStart = periodStart
            self.productName = productName
            self.sequenceNumber = sequenceNumber
            self.series = series
            self.state = state
            self.statusMessage = statusMessage
            self.termArn = termArn
            self.uploadState = uploadState
            self.version = version
        }
    }
}

public struct GetReportMetadataOutput: Swift.Sendable {
    /// Report resource detail.
    public var reportDetails: ArtifactClientTypes.ReportDetail?

    public init(
        reportDetails: ArtifactClientTypes.ReportDetail? = nil
    )
    {
        self.reportDetails = reportDetails
    }
}

public struct GetTermForReportInput: Swift.Sendable {
    /// Unique resource ID for the report resource.
    /// This member is required.
    public var reportId: Swift.String?
    /// Version for the report resource.
    public var reportVersion: Swift.Int?

    public init(
        reportId: Swift.String? = nil,
        reportVersion: Swift.Int? = nil
    )
    {
        self.reportId = reportId
        self.reportVersion = reportVersion
    }
}

public struct GetTermForReportOutput: Swift.Sendable {
    /// Presigned S3 url to access the term content.
    public var documentPresignedUrl: Swift.String?
    /// Unique token representing this request event.
    public var termToken: Swift.String?

    public init(
        documentPresignedUrl: Swift.String? = nil,
        termToken: Swift.String? = nil
    )
    {
        self.documentPresignedUrl = documentPresignedUrl
        self.termToken = termToken
    }
}

public struct ListReportsInput: Swift.Sendable {
    /// Maximum number of resources to return in the paginated response.
    public var maxResults: Swift.Int?
    /// Pagination token to request the next page of resources.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ArtifactClientTypes {

    /// Summary for report resource.
    public struct ReportSummary: Swift.Sendable {
        /// Acceptance type for report.
        public var acceptanceType: ArtifactClientTypes.AcceptanceType?
        /// ARN for the report resource.
        public var arn: Swift.String?
        /// Category for the report resource.
        public var category: Swift.String?
        /// Associated company name for the report resource.
        public var companyName: Swift.String?
        /// Description for the report resource.
        public var description: Swift.String?
        /// Unique resource ID for the report resource.
        public var id: Swift.String?
        /// Name for the report resource.
        public var name: Swift.String?
        /// Timestamp indicating the report resource effective end.
        public var periodEnd: Foundation.Date?
        /// Timestamp indicating the report resource effective start.
        public var periodStart: Foundation.Date?
        /// Associated product name for the report resource.
        public var productName: Swift.String?
        /// Series for the report resource.
        public var series: Swift.String?
        /// Current state of the report resource.
        public var state: ArtifactClientTypes.PublishedState?
        /// The message associated with the current upload state.
        public var statusMessage: Swift.String?
        /// The current state of the document upload.
        public var uploadState: ArtifactClientTypes.UploadState?
        /// Version for the report resource.
        public var version: Swift.Int?

        public init(
            acceptanceType: ArtifactClientTypes.AcceptanceType? = nil,
            arn: Swift.String? = nil,
            category: Swift.String? = nil,
            companyName: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            periodEnd: Foundation.Date? = nil,
            periodStart: Foundation.Date? = nil,
            productName: Swift.String? = nil,
            series: Swift.String? = nil,
            state: ArtifactClientTypes.PublishedState? = nil,
            statusMessage: Swift.String? = nil,
            uploadState: ArtifactClientTypes.UploadState? = nil,
            version: Swift.Int? = nil
        )
        {
            self.acceptanceType = acceptanceType
            self.arn = arn
            self.category = category
            self.companyName = companyName
            self.description = description
            self.id = id
            self.name = name
            self.periodEnd = periodEnd
            self.periodStart = periodStart
            self.productName = productName
            self.series = series
            self.state = state
            self.statusMessage = statusMessage
            self.uploadState = uploadState
            self.version = version
        }
    }
}

public struct ListReportsOutput: Swift.Sendable {
    /// Pagination token to request the next page of resources.
    public var nextToken: Swift.String?
    /// List of report resources.
    public var reports: [ArtifactClientTypes.ReportSummary]?

    public init(
        nextToken: Swift.String? = nil,
        reports: [ArtifactClientTypes.ReportSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.reports = reports
    }
}

extension GetAccountSettingsInput {

    static func urlPathProvider(_ value: GetAccountSettingsInput) -> Swift.String? {
        return "/v1/account-settings/get"
    }
}

extension GetReportInput {

    static func urlPathProvider(_ value: GetReportInput) -> Swift.String? {
        return "/v1/report/get"
    }
}

extension GetReportInput {

    static func queryItemProvider(_ value: GetReportInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let reportVersion = value.reportVersion {
            let reportVersionQueryItem = Smithy.URIQueryItem(name: "reportVersion".urlPercentEncoding(), value: Swift.String(reportVersion).urlPercentEncoding())
            items.append(reportVersionQueryItem)
        }
        guard let reportId = value.reportId else {
            let message = "Creating a URL Query Item failed. reportId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let reportIdQueryItem = Smithy.URIQueryItem(name: "reportId".urlPercentEncoding(), value: Swift.String(reportId).urlPercentEncoding())
        items.append(reportIdQueryItem)
        guard let termToken = value.termToken else {
            let message = "Creating a URL Query Item failed. termToken is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let termTokenQueryItem = Smithy.URIQueryItem(name: "termToken".urlPercentEncoding(), value: Swift.String(termToken).urlPercentEncoding())
        items.append(termTokenQueryItem)
        return items
    }
}

extension GetReportMetadataInput {

    static func urlPathProvider(_ value: GetReportMetadataInput) -> Swift.String? {
        return "/v1/report/getMetadata"
    }
}

extension GetReportMetadataInput {

    static func queryItemProvider(_ value: GetReportMetadataInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let reportVersion = value.reportVersion {
            let reportVersionQueryItem = Smithy.URIQueryItem(name: "reportVersion".urlPercentEncoding(), value: Swift.String(reportVersion).urlPercentEncoding())
            items.append(reportVersionQueryItem)
        }
        guard let reportId = value.reportId else {
            let message = "Creating a URL Query Item failed. reportId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let reportIdQueryItem = Smithy.URIQueryItem(name: "reportId".urlPercentEncoding(), value: Swift.String(reportId).urlPercentEncoding())
        items.append(reportIdQueryItem)
        return items
    }
}

extension GetTermForReportInput {

    static func urlPathProvider(_ value: GetTermForReportInput) -> Swift.String? {
        return "/v1/report/getTermForReport"
    }
}

extension GetTermForReportInput {

    static func queryItemProvider(_ value: GetTermForReportInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let reportVersion = value.reportVersion {
            let reportVersionQueryItem = Smithy.URIQueryItem(name: "reportVersion".urlPercentEncoding(), value: Swift.String(reportVersion).urlPercentEncoding())
            items.append(reportVersionQueryItem)
        }
        guard let reportId = value.reportId else {
            let message = "Creating a URL Query Item failed. reportId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let reportIdQueryItem = Smithy.URIQueryItem(name: "reportId".urlPercentEncoding(), value: Swift.String(reportId).urlPercentEncoding())
        items.append(reportIdQueryItem)
        return items
    }
}

extension ListReportsInput {

    static func urlPathProvider(_ value: ListReportsInput) -> Swift.String? {
        return "/v1/report/list"
    }
}

extension ListReportsInput {

    static func queryItemProvider(_ value: ListReportsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension PutAccountSettingsInput {

    static func urlPathProvider(_ value: PutAccountSettingsInput) -> Swift.String? {
        return "/v1/account-settings/put"
    }
}

extension PutAccountSettingsInput {

    static func write(value: PutAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["notificationSubscriptionStatus"].write(value.notificationSubscriptionStatus)
    }
}

extension GetAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountSettingsOutput()
        value.accountSettings = try reader["accountSettings"].readIfPresent(with: ArtifactClientTypes.AccountSettings.read(from:))
        return value
    }
}

extension GetReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReportOutput()
        value.documentPresignedUrl = try reader["documentPresignedUrl"].readIfPresent()
        return value
    }
}

extension GetReportMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReportMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReportMetadataOutput()
        value.reportDetails = try reader["reportDetails"].readIfPresent(with: ArtifactClientTypes.ReportDetail.read(from:))
        return value
    }
}

extension GetTermForReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTermForReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTermForReportOutput()
        value.documentPresignedUrl = try reader["documentPresignedUrl"].readIfPresent()
        value.termToken = try reader["termToken"].readIfPresent()
        return value
    }
}

extension ListReportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReportsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reports = try reader["reports"].readListIfPresent(memberReadingClosure: ArtifactClientTypes.ReportSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAccountSettingsOutput()
        value.accountSettings = try reader["accountSettings"].readIfPresent(with: ArtifactClientTypes.AccountSettings.read(from:))
        return value
    }
}

enum GetAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReportMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTermForReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["quotaCode"].readIfPresent()
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.fieldList = try reader["fieldList"].readListIfPresent(memberReadingClosure: ArtifactClientTypes.ValidationExceptionField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.reason = try reader["reason"].readIfPresent() ?? .sdkUnknown("")
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = InternalServerException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["quotaCode"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ArtifactClientTypes.AccountSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> ArtifactClientTypes.AccountSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ArtifactClientTypes.AccountSettings()
        value.notificationSubscriptionStatus = try reader["notificationSubscriptionStatus"].readIfPresent()
        return value
    }
}

extension ArtifactClientTypes.ReportDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> ArtifactClientTypes.ReportDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ArtifactClientTypes.ReportDetail()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.periodStart = try reader["periodStart"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.periodEnd = try reader["periodEnd"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.deletedAt = try reader["deletedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.state = try reader["state"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.series = try reader["series"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.companyName = try reader["companyName"].readIfPresent()
        value.productName = try reader["productName"].readIfPresent()
        value.termArn = try reader["termArn"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.acceptanceType = try reader["acceptanceType"].readIfPresent()
        value.sequenceNumber = try reader["sequenceNumber"].readIfPresent()
        value.uploadState = try reader["uploadState"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        return value
    }
}

extension ArtifactClientTypes.ReportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ArtifactClientTypes.ReportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ArtifactClientTypes.ReportSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.uploadState = try reader["uploadState"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.periodStart = try reader["periodStart"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.periodEnd = try reader["periodEnd"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.series = try reader["series"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.companyName = try reader["companyName"].readIfPresent()
        value.productName = try reader["productName"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.acceptanceType = try reader["acceptanceType"].readIfPresent()
        return value
    }
}

extension ArtifactClientTypes.ValidationExceptionField {

    static func read(from reader: SmithyJSON.Reader) throws -> ArtifactClientTypes.ValidationExceptionField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ArtifactClientTypes.ValidationExceptionField()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

public enum ArtifactClientTypes {}
