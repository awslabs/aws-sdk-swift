// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// Product update We recommend [Amazon Web Services Application Migration Service](http://aws.amazon.com/application-migration-service) (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023. Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:
///
/// * [Server Migration Service product page](http://aws.amazon.com/server-migration-service/)
///
/// * [Server Migration Service User Guide](https://docs.aws.amazon.com/server-migration-service/latest/userguide/)
public protocol SMSClientProtocol {
    /// Creates an application. An application consists of one or more server groups. Each server group contain one or more servers.
    func createApp(input: CreateAppInput) async throws -> CreateAppOutputResponse
    /// Creates a replication job. The replication job schedules periodic replication runs to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image (AMI).
    func createReplicationJob(input: CreateReplicationJobInput) async throws -> CreateReplicationJobOutputResponse
    /// Deletes the specified application. Optionally deletes the launched stack associated with the application and all Server Migration Service replication jobs for servers in the application.
    func deleteApp(input: DeleteAppInput) async throws -> DeleteAppOutputResponse
    /// Deletes the launch configuration for the specified application.
    func deleteAppLaunchConfiguration(input: DeleteAppLaunchConfigurationInput) async throws -> DeleteAppLaunchConfigurationOutputResponse
    /// Deletes the replication configuration for the specified application.
    func deleteAppReplicationConfiguration(input: DeleteAppReplicationConfigurationInput) async throws -> DeleteAppReplicationConfigurationOutputResponse
    /// Deletes the validation configuration for the specified application.
    func deleteAppValidationConfiguration(input: DeleteAppValidationConfigurationInput) async throws -> DeleteAppValidationConfigurationOutputResponse
    /// Deletes the specified replication job. After you delete a replication job, there are no further replication runs. Amazon Web Services deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created by the replication runs are not deleted.
    func deleteReplicationJob(input: DeleteReplicationJobInput) async throws -> DeleteReplicationJobOutputResponse
    /// Deletes all servers from your server catalog.
    func deleteServerCatalog(input: DeleteServerCatalogInput) async throws -> DeleteServerCatalogOutputResponse
    /// Disassociates the specified connector from Server Migration Service. After you disassociate a connector, it is no longer available to support replication jobs.
    func disassociateConnector(input: DisassociateConnectorInput) async throws -> DisassociateConnectorOutputResponse
    /// Generates a target change set for a currently launched stack and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
    func generateChangeSet(input: GenerateChangeSetInput) async throws -> GenerateChangeSetOutputResponse
    /// Generates an CloudFormation template based on the current launch configuration and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
    func generateTemplate(input: GenerateTemplateInput) async throws -> GenerateTemplateOutputResponse
    /// Retrieve information about the specified application.
    func getApp(input: GetAppInput) async throws -> GetAppOutputResponse
    /// Retrieves the application launch configuration associated with the specified application.
    func getAppLaunchConfiguration(input: GetAppLaunchConfigurationInput) async throws -> GetAppLaunchConfigurationOutputResponse
    /// Retrieves the application replication configuration associated with the specified application.
    func getAppReplicationConfiguration(input: GetAppReplicationConfigurationInput) async throws -> GetAppReplicationConfigurationOutputResponse
    /// Retrieves information about a configuration for validating an application.
    func getAppValidationConfiguration(input: GetAppValidationConfigurationInput) async throws -> GetAppValidationConfigurationOutputResponse
    /// Retrieves output from validating an application.
    func getAppValidationOutput(input: GetAppValidationOutputInput) async throws -> GetAppValidationOutputOutputResponse
    /// Describes the connectors registered with the Server Migration Service.
    func getConnectors(input: GetConnectorsInput) async throws -> GetConnectorsOutputResponse
    /// Describes the specified replication job or all of your replication jobs.
    func getReplicationJobs(input: GetReplicationJobsInput) async throws -> GetReplicationJobsOutputResponse
    /// Describes the replication runs for the specified replication job.
    func getReplicationRuns(input: GetReplicationRunsInput) async throws -> GetReplicationRunsOutputResponse
    /// Describes the servers in your server catalog. Before you can describe your servers, you must import them using [ImportServerCatalog].
    func getServers(input: GetServersInput) async throws -> GetServersOutputResponse
    /// Allows application import from Migration Hub.
    func importAppCatalog(input: ImportAppCatalogInput) async throws -> ImportAppCatalogOutputResponse
    /// Gathers a complete list of on-premises servers. Connectors must be installed and monitoring all servers to import. This call returns immediately, but might take additional time to retrieve all the servers.
    func importServerCatalog(input: ImportServerCatalogInput) async throws -> ImportServerCatalogOutputResponse
    /// Launches the specified application as a stack in CloudFormation.
    func launchApp(input: LaunchAppInput) async throws -> LaunchAppOutputResponse
    /// Retrieves summaries for all applications.
    func listApps(input: ListAppsInput) async throws -> ListAppsOutputResponse
    /// Provides information to Server Migration Service about whether application validation is successful.
    func notifyAppValidationOutput(input: NotifyAppValidationOutputInput) async throws -> NotifyAppValidationOutputOutputResponse
    /// Creates or updates the launch configuration for the specified application.
    func putAppLaunchConfiguration(input: PutAppLaunchConfigurationInput) async throws -> PutAppLaunchConfigurationOutputResponse
    /// Creates or updates the replication configuration for the specified application.
    func putAppReplicationConfiguration(input: PutAppReplicationConfigurationInput) async throws -> PutAppReplicationConfigurationOutputResponse
    /// Creates or updates a validation configuration for the specified application.
    func putAppValidationConfiguration(input: PutAppValidationConfigurationInput) async throws -> PutAppValidationConfigurationOutputResponse
    /// Starts replicating the specified application by creating replication jobs for each server in the application.
    func startAppReplication(input: StartAppReplicationInput) async throws -> StartAppReplicationOutputResponse
    /// Starts an on-demand replication run for the specified application.
    func startOnDemandAppReplication(input: StartOnDemandAppReplicationInput) async throws -> StartOnDemandAppReplicationOutputResponse
    /// Starts an on-demand replication run for the specified replication job. This replication run starts immediately. This replication run is in addition to the ones already scheduled. There is a limit on the number of on-demand replications runs that you can request in a 24-hour period.
    func startOnDemandReplicationRun(input: StartOnDemandReplicationRunInput) async throws -> StartOnDemandReplicationRunOutputResponse
    /// Stops replicating the specified application by deleting the replication job for each server in the application.
    func stopAppReplication(input: StopAppReplicationInput) async throws -> StopAppReplicationOutputResponse
    /// Terminates the stack for the specified application.
    func terminateApp(input: TerminateAppInput) async throws -> TerminateAppOutputResponse
    /// Updates the specified application.
    func updateApp(input: UpdateAppInput) async throws -> UpdateAppOutputResponse
    /// Updates the specified settings for the specified replication job.
    func updateReplicationJob(input: UpdateReplicationJobInput) async throws -> UpdateReplicationJobOutputResponse
}

public protocol SMSClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum SMSClientTypes {}
