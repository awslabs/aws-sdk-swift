//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension NotificationsClient {
    /// Paginate over `[ListManagedNotificationChannelAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListManagedNotificationChannelAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListManagedNotificationChannelAssociationsOutput`
    public func listManagedNotificationChannelAssociationsPaginated(input: ListManagedNotificationChannelAssociationsInput) -> ClientRuntime.PaginatorSequence<ListManagedNotificationChannelAssociationsInput, ListManagedNotificationChannelAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListManagedNotificationChannelAssociationsInput, ListManagedNotificationChannelAssociationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listManagedNotificationChannelAssociations(input:))
    }
}

extension ListManagedNotificationChannelAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListManagedNotificationChannelAssociationsInput {
        return ListManagedNotificationChannelAssociationsInput(
            managedNotificationConfigurationArn: self.managedNotificationConfigurationArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListManagedNotificationChannelAssociationsInput, OperationStackOutput == ListManagedNotificationChannelAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listManagedNotificationChannelAssociationsPaginated`
    /// to access the nested member `[NotificationsClientTypes.ManagedNotificationChannelAssociationSummary]`
    /// - Returns: `[NotificationsClientTypes.ManagedNotificationChannelAssociationSummary]`
    public func channelAssociations() async throws -> [NotificationsClientTypes.ManagedNotificationChannelAssociationSummary] {
        return try await self.asyncCompactMap { item in item.channelAssociations }
    }
}
