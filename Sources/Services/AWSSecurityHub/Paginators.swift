// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClient {
    /// Paginate over `[DescribeActionTargetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeActionTargetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeActionTargetsOutputResponse`
    public func describeActionTargetsPaginated(input: DescribeActionTargetsInput) -> ClientRuntime.PaginatorSequence<DescribeActionTargetsInput, DescribeActionTargetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeActionTargetsInput, DescribeActionTargetsOutputResponse>(input: input, inputKey: \DescribeActionTargetsInput.nextToken, outputKey: \DescribeActionTargetsOutputResponse.nextToken, paginationFunction: self.describeActionTargets(input:))
    }
}

extension DescribeActionTargetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeActionTargetsInput {
        return DescribeActionTargetsInput(
            actionTargetArns: self.actionTargetArns,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeActionTargetsInput, Output == DescribeActionTargetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeActionTargetsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.ActionTarget]`
    /// - Returns: `[SecurityHubClientTypes.ActionTarget]`
    public func actionTargets() async throws -> [SecurityHubClientTypes.ActionTarget] {
        return try await self.asyncCompactMap { item in item.actionTargets }
    }
}
extension SecurityHubClient {
    /// Paginate over `[DescribeProductsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeProductsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeProductsOutputResponse`
    public func describeProductsPaginated(input: DescribeProductsInput) -> ClientRuntime.PaginatorSequence<DescribeProductsInput, DescribeProductsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeProductsInput, DescribeProductsOutputResponse>(input: input, inputKey: \DescribeProductsInput.nextToken, outputKey: \DescribeProductsOutputResponse.nextToken, paginationFunction: self.describeProducts(input:))
    }
}

extension DescribeProductsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeProductsInput {
        return DescribeProductsInput(
            maxResults: self.maxResults,
            nextToken: token,
            productArn: self.productArn
        )}
}

extension PaginatorSequence where Input == DescribeProductsInput, Output == DescribeProductsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeProductsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.Product]`
    /// - Returns: `[SecurityHubClientTypes.Product]`
    public func products() async throws -> [SecurityHubClientTypes.Product] {
        return try await self.asyncCompactMap { item in item.products }
    }
}
extension SecurityHubClient {
    /// Paginate over `[DescribeStandardsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStandardsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStandardsOutputResponse`
    public func describeStandardsPaginated(input: DescribeStandardsInput) -> ClientRuntime.PaginatorSequence<DescribeStandardsInput, DescribeStandardsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStandardsInput, DescribeStandardsOutputResponse>(input: input, inputKey: \DescribeStandardsInput.nextToken, outputKey: \DescribeStandardsOutputResponse.nextToken, paginationFunction: self.describeStandards(input:))
    }
}

extension DescribeStandardsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStandardsInput {
        return DescribeStandardsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeStandardsInput, Output == DescribeStandardsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeStandardsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.Standard]`
    /// - Returns: `[SecurityHubClientTypes.Standard]`
    public func standards() async throws -> [SecurityHubClientTypes.Standard] {
        return try await self.asyncCompactMap { item in item.standards }
    }
}
extension SecurityHubClient {
    /// Paginate over `[DescribeStandardsControlsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStandardsControlsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStandardsControlsOutputResponse`
    public func describeStandardsControlsPaginated(input: DescribeStandardsControlsInput) -> ClientRuntime.PaginatorSequence<DescribeStandardsControlsInput, DescribeStandardsControlsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStandardsControlsInput, DescribeStandardsControlsOutputResponse>(input: input, inputKey: \DescribeStandardsControlsInput.nextToken, outputKey: \DescribeStandardsControlsOutputResponse.nextToken, paginationFunction: self.describeStandardsControls(input:))
    }
}

extension DescribeStandardsControlsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStandardsControlsInput {
        return DescribeStandardsControlsInput(
            maxResults: self.maxResults,
            nextToken: token,
            standardsSubscriptionArn: self.standardsSubscriptionArn
        )}
}

extension PaginatorSequence where Input == DescribeStandardsControlsInput, Output == DescribeStandardsControlsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeStandardsControlsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.StandardsControl]`
    /// - Returns: `[SecurityHubClientTypes.StandardsControl]`
    public func controls() async throws -> [SecurityHubClientTypes.StandardsControl] {
        return try await self.asyncCompactMap { item in item.controls }
    }
}
extension SecurityHubClient {
    /// Paginate over `[GetEnabledStandardsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetEnabledStandardsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetEnabledStandardsOutputResponse`
    public func getEnabledStandardsPaginated(input: GetEnabledStandardsInput) -> ClientRuntime.PaginatorSequence<GetEnabledStandardsInput, GetEnabledStandardsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetEnabledStandardsInput, GetEnabledStandardsOutputResponse>(input: input, inputKey: \GetEnabledStandardsInput.nextToken, outputKey: \GetEnabledStandardsOutputResponse.nextToken, paginationFunction: self.getEnabledStandards(input:))
    }
}

extension GetEnabledStandardsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetEnabledStandardsInput {
        return GetEnabledStandardsInput(
            maxResults: self.maxResults,
            nextToken: token,
            standardsSubscriptionArns: self.standardsSubscriptionArns
        )}
}

extension PaginatorSequence where Input == GetEnabledStandardsInput, Output == GetEnabledStandardsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getEnabledStandardsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.StandardsSubscription]`
    /// - Returns: `[SecurityHubClientTypes.StandardsSubscription]`
    public func standardsSubscriptions() async throws -> [SecurityHubClientTypes.StandardsSubscription] {
        return try await self.asyncCompactMap { item in item.standardsSubscriptions }
    }
}
extension SecurityHubClient {
    /// Paginate over `[GetFindingsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetFindingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetFindingsOutputResponse`
    public func getFindingsPaginated(input: GetFindingsInput) -> ClientRuntime.PaginatorSequence<GetFindingsInput, GetFindingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetFindingsInput, GetFindingsOutputResponse>(input: input, inputKey: \GetFindingsInput.nextToken, outputKey: \GetFindingsOutputResponse.nextToken, paginationFunction: self.getFindings(input:))
    }
}

extension GetFindingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetFindingsInput {
        return GetFindingsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )}
}

extension PaginatorSequence where Input == GetFindingsInput, Output == GetFindingsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getFindingsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.AwsSecurityFinding]`
    /// - Returns: `[SecurityHubClientTypes.AwsSecurityFinding]`
    public func findings() async throws -> [SecurityHubClientTypes.AwsSecurityFinding] {
        return try await self.asyncCompactMap { item in item.findings }
    }
}
extension SecurityHubClient {
    /// Paginate over `[GetInsightsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetInsightsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetInsightsOutputResponse`
    public func getInsightsPaginated(input: GetInsightsInput) -> ClientRuntime.PaginatorSequence<GetInsightsInput, GetInsightsOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetInsightsInput, GetInsightsOutputResponse>(input: input, inputKey: \GetInsightsInput.nextToken, outputKey: \GetInsightsOutputResponse.nextToken, paginationFunction: self.getInsights(input:))
    }
}

extension GetInsightsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetInsightsInput {
        return GetInsightsInput(
            insightArns: self.insightArns,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == GetInsightsInput, Output == GetInsightsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `getInsightsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.Insight]`
    /// - Returns: `[SecurityHubClientTypes.Insight]`
    public func insights() async throws -> [SecurityHubClientTypes.Insight] {
        return try await self.asyncCompactMap { item in item.insights }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListEnabledProductsForImportOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEnabledProductsForImportInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEnabledProductsForImportOutputResponse`
    public func listEnabledProductsForImportPaginated(input: ListEnabledProductsForImportInput) -> ClientRuntime.PaginatorSequence<ListEnabledProductsForImportInput, ListEnabledProductsForImportOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListEnabledProductsForImportInput, ListEnabledProductsForImportOutputResponse>(input: input, inputKey: \ListEnabledProductsForImportInput.nextToken, outputKey: \ListEnabledProductsForImportOutputResponse.nextToken, paginationFunction: self.listEnabledProductsForImport(input:))
    }
}

extension ListEnabledProductsForImportInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEnabledProductsForImportInput {
        return ListEnabledProductsForImportInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListEnabledProductsForImportInput, Output == ListEnabledProductsForImportOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listEnabledProductsForImportPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func productSubscriptions() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.productSubscriptions }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListFindingAggregatorsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFindingAggregatorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFindingAggregatorsOutputResponse`
    public func listFindingAggregatorsPaginated(input: ListFindingAggregatorsInput) -> ClientRuntime.PaginatorSequence<ListFindingAggregatorsInput, ListFindingAggregatorsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFindingAggregatorsInput, ListFindingAggregatorsOutputResponse>(input: input, inputKey: \ListFindingAggregatorsInput.nextToken, outputKey: \ListFindingAggregatorsOutputResponse.nextToken, paginationFunction: self.listFindingAggregators(input:))
    }
}

extension ListFindingAggregatorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFindingAggregatorsInput {
        return ListFindingAggregatorsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListFindingAggregatorsInput, Output == ListFindingAggregatorsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listFindingAggregatorsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.FindingAggregator]`
    /// - Returns: `[SecurityHubClientTypes.FindingAggregator]`
    public func findingAggregators() async throws -> [SecurityHubClientTypes.FindingAggregator] {
        return try await self.asyncCompactMap { item in item.findingAggregators }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListInvitationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInvitationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInvitationsOutputResponse`
    public func listInvitationsPaginated(input: ListInvitationsInput) -> ClientRuntime.PaginatorSequence<ListInvitationsInput, ListInvitationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInvitationsInput, ListInvitationsOutputResponse>(input: input, inputKey: \ListInvitationsInput.nextToken, outputKey: \ListInvitationsOutputResponse.nextToken, paginationFunction: self.listInvitations(input:))
    }
}

extension ListInvitationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInvitationsInput {
        return ListInvitationsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListInvitationsInput, Output == ListInvitationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listInvitationsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.Invitation]`
    /// - Returns: `[SecurityHubClientTypes.Invitation]`
    public func invitations() async throws -> [SecurityHubClientTypes.Invitation] {
        return try await self.asyncCompactMap { item in item.invitations }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListMembersOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListMembersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListMembersOutputResponse`
    public func listMembersPaginated(input: ListMembersInput) -> ClientRuntime.PaginatorSequence<ListMembersInput, ListMembersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListMembersInput, ListMembersOutputResponse>(input: input, inputKey: \ListMembersInput.nextToken, outputKey: \ListMembersOutputResponse.nextToken, paginationFunction: self.listMembers(input:))
    }
}

extension ListMembersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListMembersInput {
        return ListMembersInput(
            maxResults: self.maxResults,
            nextToken: token,
            onlyAssociated: self.onlyAssociated
        )}
}

extension PaginatorSequence where Input == ListMembersInput, Output == ListMembersOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listMembersPaginated`
    /// to access the nested member `[SecurityHubClientTypes.Member]`
    /// - Returns: `[SecurityHubClientTypes.Member]`
    public func members() async throws -> [SecurityHubClientTypes.Member] {
        return try await self.asyncCompactMap { item in item.members }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListOrganizationAdminAccountsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListOrganizationAdminAccountsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListOrganizationAdminAccountsOutputResponse`
    public func listOrganizationAdminAccountsPaginated(input: ListOrganizationAdminAccountsInput) -> ClientRuntime.PaginatorSequence<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListOrganizationAdminAccountsInput, ListOrganizationAdminAccountsOutputResponse>(input: input, inputKey: \ListOrganizationAdminAccountsInput.nextToken, outputKey: \ListOrganizationAdminAccountsOutputResponse.nextToken, paginationFunction: self.listOrganizationAdminAccounts(input:))
    }
}

extension ListOrganizationAdminAccountsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListOrganizationAdminAccountsInput {
        return ListOrganizationAdminAccountsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListOrganizationAdminAccountsInput, Output == ListOrganizationAdminAccountsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listOrganizationAdminAccountsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.AdminAccount]`
    /// - Returns: `[SecurityHubClientTypes.AdminAccount]`
    public func adminAccounts() async throws -> [SecurityHubClientTypes.AdminAccount] {
        return try await self.asyncCompactMap { item in item.adminAccounts }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListSecurityControlDefinitionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSecurityControlDefinitionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSecurityControlDefinitionsOutputResponse`
    public func listSecurityControlDefinitionsPaginated(input: ListSecurityControlDefinitionsInput) -> ClientRuntime.PaginatorSequence<ListSecurityControlDefinitionsInput, ListSecurityControlDefinitionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSecurityControlDefinitionsInput, ListSecurityControlDefinitionsOutputResponse>(input: input, inputKey: \ListSecurityControlDefinitionsInput.nextToken, outputKey: \ListSecurityControlDefinitionsOutputResponse.nextToken, paginationFunction: self.listSecurityControlDefinitions(input:))
    }
}

extension ListSecurityControlDefinitionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSecurityControlDefinitionsInput {
        return ListSecurityControlDefinitionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            standardsArn: self.standardsArn
        )}
}

extension PaginatorSequence where Input == ListSecurityControlDefinitionsInput, Output == ListSecurityControlDefinitionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSecurityControlDefinitionsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.SecurityControlDefinition]`
    /// - Returns: `[SecurityHubClientTypes.SecurityControlDefinition]`
    public func securityControlDefinitions() async throws -> [SecurityHubClientTypes.SecurityControlDefinition] {
        return try await self.asyncCompactMap { item in item.securityControlDefinitions }
    }
}
extension SecurityHubClient {
    /// Paginate over `[ListStandardsControlAssociationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStandardsControlAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStandardsControlAssociationsOutputResponse`
    public func listStandardsControlAssociationsPaginated(input: ListStandardsControlAssociationsInput) -> ClientRuntime.PaginatorSequence<ListStandardsControlAssociationsInput, ListStandardsControlAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStandardsControlAssociationsInput, ListStandardsControlAssociationsOutputResponse>(input: input, inputKey: \ListStandardsControlAssociationsInput.nextToken, outputKey: \ListStandardsControlAssociationsOutputResponse.nextToken, paginationFunction: self.listStandardsControlAssociations(input:))
    }
}

extension ListStandardsControlAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStandardsControlAssociationsInput {
        return ListStandardsControlAssociationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            securityControlId: self.securityControlId
        )}
}

extension PaginatorSequence where Input == ListStandardsControlAssociationsInput, Output == ListStandardsControlAssociationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStandardsControlAssociationsPaginated`
    /// to access the nested member `[SecurityHubClientTypes.StandardsControlAssociationSummary]`
    /// - Returns: `[SecurityHubClientTypes.StandardsControlAssociationSummary]`
    public func standardsControlAssociationSummaries() async throws -> [SecurityHubClientTypes.StandardsControlAssociationSummary] {
        return try await self.asyncCompactMap { item in item.standardsControlAssociationSummaries }
    }
}
