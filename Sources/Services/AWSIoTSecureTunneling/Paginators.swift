// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTSecureTunnelingClient {
    /// Paginate over `[ListTunnelsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTunnelsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTunnelsOutput`
    public func listTunnelsPaginated(input: ListTunnelsInput) -> ClientRuntime.PaginatorSequence<ListTunnelsInput, ListTunnelsOutput> {
        return ClientRuntime.PaginatorSequence<ListTunnelsInput, ListTunnelsOutput>(input: input, inputKey: \ListTunnelsInput.nextToken, outputKey: \ListTunnelsOutput.nextToken, paginationFunction: self.listTunnels(input:))
    }
}

extension ListTunnelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTunnelsInput {
        return ListTunnelsInput(
            maxResults: self.maxResults,
            nextToken: token,
            thingName: self.thingName
        )}
}
