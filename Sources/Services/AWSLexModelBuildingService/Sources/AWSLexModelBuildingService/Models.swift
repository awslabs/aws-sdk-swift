//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox


public struct DeleteBotAliasOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBotChannelAssociationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBotOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBotVersionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteIntentOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteIntentVersionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSlotTypeOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSlotTypeVersionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteUtterancesOutput: Swift.Sendable {

    public init() { }
}

/// Your IAM user or role does not have permission to call the Amazon Lex V2 APIs required to migrate your bot.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There was a conflict processing the request. Try your request again.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An internal Amazon Lex error occurred. Try your request again.
public struct InternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request exceeded a limit. Try your request again.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var retryAfterSeconds: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

/// The resource specified in the request was not found. Check the resource and try again.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
public struct PreconditionFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PreconditionFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateBotVersionInput: Swift.Sendable {
    /// Identifies a specific revision of the $LATEST version of the bot. If you specify a checksum and the $LATEST version of the bot has a different checksum, a PreconditionFailedException exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.
    public var checksum: Swift.String?
    /// The name of the bot that you want to create a new version of. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.name = name
    }
}

extension LexModelBuildingClientTypes {

    public enum ContentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customPayload
        case plainText
        case ssml
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .customPayload,
                .plainText,
                .ssml
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customPayload: return "CustomPayload"
            case .plainText: return "PlainText"
            case .ssml: return "SSML"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    /// The message object that provides the message text and its type.
    public struct Message: Swift.Sendable {
        /// The text of the message.
        /// This member is required.
        public var content: Swift.String?
        /// The content type of the message string.
        /// This member is required.
        public var contentType: LexModelBuildingClientTypes.ContentType?
        /// Identifies the message group that the message belongs to. When a group is assigned to a message, Amazon Lex returns one message from each group in the response.
        public var groupNumber: Swift.Int?

        public init(
            content: Swift.String? = nil,
            contentType: LexModelBuildingClientTypes.ContentType? = nil,
            groupNumber: Swift.Int? = nil
        )
        {
            self.content = content
            self.contentType = contentType
            self.groupNumber = groupNumber
        }
    }
}

extension LexModelBuildingClientTypes {

    /// A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey.
    public struct Statement: Swift.Sendable {
        /// A collection of message objects.
        /// This member is required.
        public var messages: [LexModelBuildingClientTypes.Message]?
        /// At runtime, if the client is using the [PostText](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card.
        public var responseCard: Swift.String?

        public init(
            messages: [LexModelBuildingClientTypes.Message]? = nil,
            responseCard: Swift.String? = nil
        )
        {
            self.messages = messages
            self.responseCard = responseCard
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see [how-it-works].
    public struct Prompt: Swift.Sendable {
        /// The number of times to prompt the user for information.
        /// This member is required.
        public var maxAttempts: Swift.Int?
        /// An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        /// This member is required.
        public var messages: [LexModelBuildingClientTypes.Message]?
        /// A response card. Amazon Lex uses this prompt at runtime, in the PostText API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see [ex-resp-card].
        public var responseCard: Swift.String?

        public init(
            maxAttempts: Swift.Int? = nil,
            messages: [LexModelBuildingClientTypes.Message]? = nil,
            responseCard: Swift.String? = nil
        )
        {
            self.maxAttempts = maxAttempts
            self.messages = messages
            self.responseCard = responseCard
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Identifies the specific version of an intent.
    public struct Intent: Swift.Sendable {
        /// The name of the intent.
        /// This member is required.
        public var intentName: Swift.String?
        /// The version of the intent.
        /// This member is required.
        public var intentVersion: Swift.String?

        public init(
            intentName: Swift.String? = nil,
            intentVersion: Swift.String? = nil
        )
        {
            self.intentName = intentName
            self.intentVersion = intentVersion
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum Locale: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deDe
        case enAu
        case enGb
        case enIn
        case enUs
        case es419
        case esEs
        case esUs
        case frCa
        case frFr
        case itIt
        case jaJp
        case koKr
        case sdkUnknown(Swift.String)

        public static var allCases: [Locale] {
            return [
                .deDe,
                .enAu,
                .enGb,
                .enIn,
                .enUs,
                .es419,
                .esEs,
                .esUs,
                .frCa,
                .frFr,
                .itIt,
                .jaJp,
                .koKr
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deDe: return "de-DE"
            case .enAu: return "en-AU"
            case .enGb: return "en-GB"
            case .enIn: return "en-IN"
            case .enUs: return "en-US"
            case .es419: return "es-419"
            case .esEs: return "es-ES"
            case .esUs: return "es-US"
            case .frCa: return "fr-CA"
            case .frFr: return "fr-FR"
            case .itIt: return "it-IT"
            case .jaJp: return "ja-JP"
            case .koKr: return "ko-KR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum Status: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case building
        case failed
        case notBuilt
        case ready
        case readyBasicTesting
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .building,
                .failed,
                .notBuilt,
                .ready,
                .readyBasicTesting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .building: return "BUILDING"
            case .failed: return "FAILED"
            case .notBuilt: return "NOT_BUILT"
            case .ready: return "READY"
            case .readyBasicTesting: return "READY_BASIC_TESTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateBotVersionOutput: Swift.Sendable {
    /// The message that Amazon Lex uses to cancel a conversation. For more information, see [PutBot].
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum identifying the version of the bot that was created.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)
    public var childDirected: Swift.Bool?
    /// The message that Amazon Lex uses when it doesn't understand the user's request. For more information, see [PutBot].
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date when the bot version was created.
    public var createdDate: Foundation.Date?
    /// A description of the bot.
    public var description: Swift.String?
    /// Indicates whether utterances entered by the user should be sent to Amazon Comprehend for sentiment analysis.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements. true indicates that the bot is using the improvements, otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex provides the reason that it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see [PutBot].
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. For more information, see [PutBot].
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date when the $LATEST version of this bot was updated.
    public var lastUpdatedDate: Foundation.Date?
    /// Specifies the target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    /// When you send a request to create or update a bot, Amazon Lex sets the status response element to BUILDING. After Amazon Lex builds the bot, it sets status to READY. If Amazon Lex can't build the bot, it sets status to FAILED. Amazon Lex returns the reason for the failure in the failureReason response element.
    public var status: LexModelBuildingClientTypes.Status?
    /// The version of the bot.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interactions with the user.
    public var voiceId: Swift.String?

    public init(
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.status = status
        self.version = version
        self.voiceId = voiceId
    }
}

public struct CreateIntentVersionInput: Swift.Sendable {
    /// Checksum of the $LATEST version of the intent that should be used to create the new version. If you specify a checksum and the $LATEST version of the intent has a different checksum, Amazon Lex returns a PreconditionFailedException exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.
    public var checksum: Swift.String?
    /// The name of the intent that you want to create a new version of. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.name = name
    }
}

extension LexModelBuildingClientTypes {

    /// Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot..
    public struct CodeHook: Swift.Sendable {
        /// The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see [using-lambda].
        /// This member is required.
        public var messageVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the Lambda function.
        /// This member is required.
        public var uri: Swift.String?

        public init(
            messageVersion: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.messageVersion = messageVersion
            self.uri = uri
        }
    }
}

extension LexModelBuildingClientTypes {

    /// A prompt for additional activity after an intent is fulfilled. For example, after the OrderPizza intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.
    public struct FollowUpPrompt: Swift.Sendable {
        /// Prompts for information from the user.
        /// This member is required.
        public var prompt: LexModelBuildingClientTypes.Prompt?
        /// If the user answers "no" to the question defined in the prompt field, Amazon Lex responds with this statement to acknowledge that the intent was canceled.
        /// This member is required.
        public var rejectionStatement: LexModelBuildingClientTypes.Statement?

        public init(
            prompt: LexModelBuildingClientTypes.Prompt? = nil,
            rejectionStatement: LexModelBuildingClientTypes.Statement? = nil
        )
        {
            self.prompt = prompt
            self.rejectionStatement = rejectionStatement
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum FulfillmentActivityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codeHook
        case returnIntent
        case sdkUnknown(Swift.String)

        public static var allCases: [FulfillmentActivityType] {
            return [
                .codeHook,
                .returnIntent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codeHook: return "CodeHook"
            case .returnIntent: return "ReturnIntent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application. Consider the following examples:
    ///
    /// * In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria.
    ///
    /// * In a gaming application, when a user says "pick up a rock," this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client.
    public struct FulfillmentActivity: Swift.Sendable {
        /// A description of the Lambda function that is run to fulfill the intent.
        public var codeHook: LexModelBuildingClientTypes.CodeHook?
        /// How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application.
        /// This member is required.
        public var type: LexModelBuildingClientTypes.FulfillmentActivityType?

        public init(
            codeHook: LexModelBuildingClientTypes.CodeHook? = nil,
            type: LexModelBuildingClientTypes.FulfillmentActivityType? = nil
        )
        {
            self.codeHook = codeHook
            self.type = type
        }
    }
}

extension LexModelBuildingClientTypes {

    /// The name of a context that must be active for an intent to be selected by Amazon Lex.
    public struct InputContext: Swift.Sendable {
        /// The name of the context.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance. For more information, see [ AMAZON.KendraSearchIntent](http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html).
    public struct KendraConfiguration: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot. If the Amazon Kendra index does not exist, you get an exception when you call the PutIntent operation.
        /// This member is required.
        public var kendraIndex: Swift.String?
        /// A query filter that Amazon Lex sends to Amazon Kendra to filter the response from the query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](http://docs.aws.amazon.com/kendra/latest/dg/filtering.html). You can override this filter string with a new filter string at runtime.
        public var queryFilterString: Swift.String?
        /// The Amazon Resource Name (ARN) of an IAM role that has permission to search the Amazon Kendra index. The role must be in the same account and Region as the Amazon Lex bot. If the role does not exist, you get an exception when you call the PutIntent operation.
        /// This member is required.
        public var role: Swift.String?

        public init(
            kendraIndex: Swift.String? = nil,
            queryFilterString: Swift.String? = nil,
            role: Swift.String? = nil
        )
        {
            self.kendraIndex = kendraIndex
            self.queryFilterString = queryFilterString
            self.role = role
        }
    }
}

extension LexModelBuildingClientTypes {

    /// The specification of an output context that is set when an intent is fulfilled.
    public struct OutputContext: Swift.Sendable {
        /// The name of the context.
        /// This member is required.
        public var name: Swift.String?
        /// The number of seconds that the context should be active after it is first sent in a PostContent or PostText response. You can set the value between 5 and 86,400 seconds (24 hours).
        /// This member is required.
        public var timeToLiveInSeconds: Swift.Int?
        /// The number of conversation turns that the context should be active. A conversation turn is one PostContent or PostText request and the corresponding response from Amazon Lex.
        /// This member is required.
        public var turnsToLive: Swift.Int?

        public init(
            name: Swift.String? = nil,
            timeToLiveInSeconds: Swift.Int? = nil,
            turnsToLive: Swift.Int? = nil
        )
        {
            self.name = name
            self.timeToLiveInSeconds = timeToLiveInSeconds
            self.turnsToLive = turnsToLive
        }
    }
}

extension LexModelBuildingClientTypes {

    /// A default value for a slot.
    public struct SlotDefaultValue: Swift.Sendable {
        /// The default value for the slot. You can specify one of the following:
        ///
        /// * #context-name.slot-name - The slot value "slot-name" in the context "context-name."
        ///
        /// * {attribute} - The slot value of the session attribute "attribute."
        ///
        /// * 'value' - The discrete value "value."
        /// This member is required.
        public var defaultValue: Swift.String?

        public init(
            defaultValue: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Contains the default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot.
    public struct SlotDefaultValueSpec: Swift.Sendable {
        /// The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value. The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.
        /// This member is required.
        public var defaultValueList: [LexModelBuildingClientTypes.SlotDefaultValue]?

        public init(
            defaultValueList: [LexModelBuildingClientTypes.SlotDefaultValue]? = nil
        )
        {
            self.defaultValueList = defaultValueList
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum ObfuscationSetting: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultObfuscation
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ObfuscationSetting] {
            return [
                .defaultObfuscation,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultObfuscation: return "DEFAULT_OBFUSCATION"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum SlotConstraint: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotConstraint] {
            return [
                .optional,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "Optional"
            case .required: return "Required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Identifies the version of a specific slot.
    public struct Slot: Swift.Sendable {
        /// A list of default values for the slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values.
        public var defaultValueSpec: LexModelBuildingClientTypes.SlotDefaultValueSpec?
        /// A description of the slot.
        public var description: Swift.String?
        /// The name of the slot.
        /// This member is required.
        public var name: Swift.String?
        /// Determines whether a slot is obfuscated in conversation logs and stored utterances. When you obfuscate a slot, the value is replaced by the slot name in curly braces ({}). For example, if the slot name is "full_name", obfuscated values are replaced with "{full_name}". For more information, see [ Slot Obfuscation ](https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html).
        public var obfuscationSetting: LexModelBuildingClientTypes.ObfuscationSetting?
        /// Directs Amazon Lex the order in which to elicit this slot value from the user. For example, if the intent has two slots with priorities 1 and 2, AWS Amazon Lex first elicits a value for the slot with priority 1. If multiple slots share the same priority, the order in which Amazon Lex elicits values is arbitrary.
        public var priority: Swift.Int?
        /// A set of possible responses for the slot type used by text-based clients. A user chooses an option from the response card, instead of using text to reply.
        public var responseCard: Swift.String?
        /// If you know a specific pattern with which users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.
        public var sampleUtterances: [Swift.String]?
        /// Specifies whether the slot is required or optional.
        /// This member is required.
        public var slotConstraint: LexModelBuildingClientTypes.SlotConstraint?
        /// The type of the slot, either a custom slot type that you defined or one of the built-in slot types.
        public var slotType: Swift.String?
        /// The version of the slot type.
        public var slotTypeVersion: Swift.String?
        /// The prompt that Amazon Lex uses to elicit the slot value from the user.
        public var valueElicitationPrompt: LexModelBuildingClientTypes.Prompt?

        public init(
            defaultValueSpec: LexModelBuildingClientTypes.SlotDefaultValueSpec? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            obfuscationSetting: LexModelBuildingClientTypes.ObfuscationSetting? = nil,
            priority: Swift.Int? = nil,
            responseCard: Swift.String? = nil,
            sampleUtterances: [Swift.String]? = nil,
            slotConstraint: LexModelBuildingClientTypes.SlotConstraint? = nil,
            slotType: Swift.String? = nil,
            slotTypeVersion: Swift.String? = nil,
            valueElicitationPrompt: LexModelBuildingClientTypes.Prompt? = nil
        )
        {
            self.defaultValueSpec = defaultValueSpec
            self.description = description
            self.name = name
            self.obfuscationSetting = obfuscationSetting
            self.priority = priority
            self.responseCard = responseCard
            self.sampleUtterances = sampleUtterances
            self.slotConstraint = slotConstraint
            self.slotType = slotType
            self.slotTypeVersion = slotTypeVersion
            self.valueElicitationPrompt = valueElicitationPrompt
        }
    }
}

public struct CreateIntentVersionOutput: Swift.Sendable {
    /// Checksum of the intent version created.
    public var checksum: Swift.String?
    /// After the Lambda function specified in the fulfillmentActivity field fulfills the intent, Amazon Lex conveys this statement to the user.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// If defined, the prompt that Amazon Lex uses to confirm the user's intent before fulfilling it.
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date that the intent was created.
    public var createdDate: Foundation.Date?
    /// A description of the intent.
    public var description: Swift.String?
    /// If defined, Amazon Lex invokes this Lambda function for each user input.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// If defined, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// Describes how the intent is fulfilled.
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information, if any, for connecting an Amazon Kendra index with the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The date that the intent was updated.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the intent.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for a built-in intent.
    public var parentIntentSignature: Swift.String?
    /// If the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of sample utterances configured for the intent.
    public var sampleUtterances: [Swift.String]?
    /// An array of slot types that defines the information required to fulfill the intent.
    public var slots: [LexModelBuildingClientTypes.Slot]?
    /// The version number assigned to the new version of the intent.
    public var version: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}

public struct CreateSlotTypeVersionInput: Swift.Sendable {
    /// Checksum for the $LATEST version of the slot type that you want to publish. If you specify a checksum and the $LATEST version of the slot type has a different checksum, Amazon Lex returns a PreconditionFailedException exception and doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.
    public var checksum: Swift.String?
    /// The name of the slot type that you want to create a new version for. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.name = name
    }
}

extension LexModelBuildingClientTypes {

    /// Each slot type can have a set of values. Each enumeration value represents a value the slot type can take. For example, a pizza ordering bot could have a slot type that specifies the type of crust that the pizza should have. The slot type could include the values
    ///
    /// * thick
    ///
    /// * thin
    ///
    /// * stuffed
    public struct EnumerationValue: Swift.Sendable {
        /// Additional values related to the slot type value.
        public var synonyms: [Swift.String]?
        /// The value of the slot type.
        /// This member is required.
        public var value: Swift.String?

        public init(
            synonyms: [Swift.String]? = nil,
            value: Swift.String? = nil
        )
        {
            self.synonyms = synonyms
            self.value = value
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Provides a regular expression used to validate the value of a slot.
    public struct SlotTypeRegexConfiguration: Swift.Sendable {
        /// A regular expression used to validate the value of a slot. Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:
        ///
        /// * A-Z, a-z
        ///
        /// * 0-9
        ///
        /// * Unicode characters ("\ u")
        ///
        ///
        /// Represent Unicode characters with four digits, for example "\u0041" or "\u005A". The following regular expression operators are not supported:
        ///
        /// * Infinite repeaters: *, +, or {x,} with no upper bound.
        ///
        /// * Wild card (.)
        /// This member is required.
        public var pattern: Swift.String?

        public init(
            pattern: Swift.String? = nil
        )
        {
            self.pattern = pattern
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Provides configuration information for a slot type.
    public struct SlotTypeConfiguration: Swift.Sendable {
        /// A regular expression used to validate the value of a slot.
        public var regexConfiguration: LexModelBuildingClientTypes.SlotTypeRegexConfiguration?

        public init(
            regexConfiguration: LexModelBuildingClientTypes.SlotTypeRegexConfiguration? = nil
        )
        {
            self.regexConfiguration = regexConfiguration
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum SlotValueSelectionStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case originalValue
        case topResolution
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotValueSelectionStrategy] {
            return [
                .originalValue,
                .topResolution
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .originalValue: return "ORIGINAL_VALUE"
            case .topResolution: return "TOP_RESOLUTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateSlotTypeVersionOutput: Swift.Sendable {
    /// Checksum of the $LATEST version of the slot type.
    public var checksum: Swift.String?
    /// The date that the slot type was created.
    public var createdDate: Foundation.Date?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the values that the slot type can take.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The date that the slot type was updated. When you create a resource, the creation date and last update date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the slot type.
    public var name: Swift.String?
    /// The built-in slot type used a the parent of the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// The strategy that Amazon Lex uses to determine the value of the slot. For more information, see [PutSlotType].
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    /// The version assigned to the new slot type version.
    public var version: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.createdDate = createdDate
        self.description = description
        self.enumerationValues = enumerationValues
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
        self.version = version
    }
}

extension LexModelBuildingClientTypes {

    /// Describes the resource that refers to the resource that you are attempting to delete. This object is returned as part of the ResourceInUseException exception.
    public struct ResourceReference: Swift.Sendable {
        /// The name of the resource that is using the resource that you are trying to delete.
        public var name: Swift.String?
        /// The version of the resource that is using the resource that you are trying to delete.
        public var version: Swift.String?

        public init(
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum ReferenceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bot
        case botalias
        case botchannel
        case intent
        case sdkUnknown(Swift.String)

        public static var allCases: [ReferenceType] {
            return [
                .bot,
                .botalias,
                .botchannel,
                .intent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bot: return "Bot"
            case .botalias: return "BotAlias"
            case .botchannel: return "BotChannel"
            case .intent: return "Intent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete. The body of the exception contains a JSON object that describes the resource. { "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,
///     "resourceReference": {
///
///
///     "name": string, "version": string } }
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Describes the resource that refers to the resource that you are attempting to delete. This object is returned as part of the ResourceInUseException exception.
        public internal(set) var exampleReference: LexModelBuildingClientTypes.ResourceReference? = nil
        public internal(set) var referenceType: LexModelBuildingClientTypes.ReferenceType? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        exampleReference: LexModelBuildingClientTypes.ResourceReference? = nil,
        referenceType: LexModelBuildingClientTypes.ReferenceType? = nil
    )
    {
        self.properties.exampleReference = exampleReference
        self.properties.referenceType = referenceType
    }
}

public struct DeleteBotInput: Swift.Sendable {
    /// The name of the bot. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteBotAliasInput: Swift.Sendable {
    /// The name of the bot that the alias points to.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the alias to delete. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botName = botName
        self.name = name
    }
}

public struct DeleteBotChannelAssociationInput: Swift.Sendable {
    /// An alias that points to the specific version of the Amazon Lex bot to which this association is being made.
    /// This member is required.
    public var botAlias: Swift.String?
    /// The name of the Amazon Lex bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the association. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        botAlias: Swift.String? = nil,
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.name = name
    }
}

public struct DeleteBotVersionInput: Swift.Sendable {
    /// The name of the bot.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the bot to delete. You cannot delete the $LATEST version of the bot. To delete the $LATEST version, use the [DeleteBot] operation.
    /// This member is required.
    public var version: Swift.String?

    public init(
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

public struct DeleteIntentInput: Swift.Sendable {
    /// The name of the intent. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteIntentVersionInput: Swift.Sendable {
    /// The name of the intent.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the intent to delete. You cannot delete the $LATEST version of the intent. To delete the $LATEST version, use the [DeleteIntent] operation.
    /// This member is required.
    public var version: Swift.String?

    public init(
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

public struct DeleteSlotTypeInput: Swift.Sendable {
    /// The name of the slot type. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteSlotTypeVersionInput: Swift.Sendable {
    /// The name of the slot type.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the slot type to delete. You cannot delete the $LATEST version of the slot type. To delete the $LATEST version, use the [DeleteSlotType] operation.
    /// This member is required.
    public var version: Swift.String?

    public init(
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

public struct DeleteUtterancesInput: Swift.Sendable {
    /// The name of the bot that stored the utterances.
    /// This member is required.
    public var botName: Swift.String?
    /// The unique identifier for the user that made the utterances. This is the user ID that was sent in the [PostContent](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html) or [PostText](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) operation request that contained the utterance.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        botName: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.botName = botName
        self.userId = userId
    }
}

public struct GetBotInput: Swift.Sendable {
    /// The name of the bot. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// The version or alias of the bot.
    /// This member is required.
    public var versionOrAlias: Swift.String?

    public init(
        name: Swift.String? = nil,
        versionOrAlias: Swift.String? = nil
    )
    {
        self.name = name
        self.versionOrAlias = versionOrAlias
    }
}

public struct GetBotOutput: Swift.Sendable {
    /// The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see [PutBot].
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum of the bot used to identify a specific revision of the bot's $LATEST version.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)
    public var childDirected: Swift.Bool?
    /// The message Amazon Lex uses when it doesn't understand the user's request. For more information, see [PutBot].
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date that the bot was created.
    public var createdDate: Foundation.Date?
    /// A description of the bot.
    public var description: Swift.String?
    /// Indicates whether user utterances should be sent to Amazon Comprehend for sentiment analysis.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements. true indicates that the bot is using the improvements, otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex explains why it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see [PutBot].
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of intent objects. For more information, see [PutBot].
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date that the bot was updated. When you create a resource, the creation date and last updated date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    /// The score that determines where Amazon Lex inserts the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a [PostContent](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html) or [PostText](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) response. AMAZON.FallbackIntent is inserted if the confidence score for all intents is below this value. AMAZON.KendraSearchIntent is only inserted if it is configured for the bot.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// The status of the bot. When the status is BUILDING Amazon Lex is building the bot for testing and use. If the status of the bot is READY_BASIC_TESTING, you can test the bot using the exact utterances specified in the bot's intents. When the bot is ready for full testing or to run, the status is READY. If there was a problem with building the bot, the status is FAILED and the failureReason field explains why the bot did not build. If the bot was saved but not built, the status is NOT_BUILT.
    public var status: LexModelBuildingClientTypes.Status?
    /// The version of the bot. For a new bot, the version is always $LATEST.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see [PutBot].
    public var voiceId: Swift.String?

    public init(
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.status = status
        self.version = version
        self.voiceId = voiceId
    }
}

public struct GetBotAliasInput: Swift.Sendable {
    /// The name of the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the bot alias. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botName = botName
        self.name = name
    }
}

extension LexModelBuildingClientTypes {

    public enum Destination: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudwatchLogs
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [Destination] {
            return [
                .cloudwatchLogs,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchLogs: return "CLOUDWATCH_LOGS"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum LogType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case audio
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .audio,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .audio: return "AUDIO"
            case .text: return "TEXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    /// The settings for conversation logs.
    public struct LogSettingsResponse: Swift.Sendable {
        /// The destination where logs are delivered.
        public var destination: LexModelBuildingClientTypes.Destination?
        /// The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket.
        public var kmsKeyArn: Swift.String?
        /// The type of logging that is enabled.
        public var logType: LexModelBuildingClientTypes.LogType?
        /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered.
        public var resourceArn: Swift.String?
        /// The resource prefix is the first part of the S3 object key within the S3 bucket that you specified to contain audio logs. For CloudWatch Logs it is the prefix of the log stream name within the log group that you specified.
        public var resourcePrefix: Swift.String?

        public init(
            destination: LexModelBuildingClientTypes.Destination? = nil,
            kmsKeyArn: Swift.String? = nil,
            logType: LexModelBuildingClientTypes.LogType? = nil,
            resourceArn: Swift.String? = nil,
            resourcePrefix: Swift.String? = nil
        )
        {
            self.destination = destination
            self.kmsKeyArn = kmsKeyArn
            self.logType = logType
            self.resourceArn = resourceArn
            self.resourcePrefix = resourcePrefix
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Contains information about conversation log settings.
    public struct ConversationLogsResponse: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket.
        public var iamRoleArn: Swift.String?
        /// The settings for your conversation logs. You can log text, audio, or both.
        public var logSettings: [LexModelBuildingClientTypes.LogSettingsResponse]?

        public init(
            iamRoleArn: Swift.String? = nil,
            logSettings: [LexModelBuildingClientTypes.LogSettingsResponse]? = nil
        )
        {
            self.iamRoleArn = iamRoleArn
            self.logSettings = logSettings
        }
    }
}

public struct GetBotAliasOutput: Swift.Sendable {
    /// The name of the bot that the alias points to.
    public var botName: Swift.String?
    /// The version of the bot that the alias points to.
    public var botVersion: Swift.String?
    /// Checksum of the bot alias.
    public var checksum: Swift.String?
    /// The settings that determine how Amazon Lex uses conversation logs for the alias.
    public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
    /// The date that the bot alias was created.
    public var createdDate: Foundation.Date?
    /// A description of the bot alias.
    public var description: Swift.String?
    /// The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the bot alias.
    public var name: Swift.String?

    public init(
        botName: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        checksum: Swift.String? = nil,
        conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.botName = botName
        self.botVersion = botVersion
        self.checksum = checksum
        self.conversationLogs = conversationLogs
        self.createdDate = createdDate
        self.description = description
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
    }
}

public struct GetBotAliasesInput: Swift.Sendable {
    /// The name of the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The maximum number of aliases to return in the response. The default is 50. .
    public var maxResults: Swift.Int?
    /// Substring to match in bot alias names. An alias will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token for fetching the next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        botName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botName = botName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about a bot alias.
    public struct BotAliasMetadata: Swift.Sendable {
        /// The name of the bot to which the alias points.
        public var botName: Swift.String?
        /// The version of the Amazon Lex bot to which the alias points.
        public var botVersion: Swift.String?
        /// Checksum of the bot alias.
        public var checksum: Swift.String?
        /// Settings that determine how Amazon Lex uses conversation logs for the alias.
        public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
        /// The date that the bot alias was created.
        public var createdDate: Foundation.Date?
        /// A description of the bot alias.
        public var description: Swift.String?
        /// The date that the bot alias was updated. When you create a resource, the creation date and last updated date are the same.
        public var lastUpdatedDate: Foundation.Date?
        /// The name of the bot alias.
        public var name: Swift.String?

        public init(
            botName: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            checksum: Swift.String? = nil,
            conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse? = nil,
            createdDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.botName = botName
            self.botVersion = botVersion
            self.checksum = checksum
            self.conversationLogs = conversationLogs
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
        }
    }
}

public struct GetBotAliasesOutput: Swift.Sendable {
    /// An array of BotAliasMetadata objects, each describing a bot alias.
    public var botAliases: [LexModelBuildingClientTypes.BotAliasMetadata]?
    /// A pagination token for fetching next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        botAliases: [LexModelBuildingClientTypes.BotAliasMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botAliases = botAliases
        self.nextToken = nextToken
    }
}

public struct GetBotChannelAssociationInput: Swift.Sendable {
    /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
    /// This member is required.
    public var botAlias: Swift.String?
    /// The name of the Amazon Lex bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the association between the bot and the channel. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init(
        botAlias: Swift.String? = nil,
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.name = name
    }
}

extension LexModelBuildingClientTypes {

    public enum ChannelStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelStatus] {
            return [
                .created,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum ChannelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case facebook
        case kik
        case slack
        case twilioSms
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelType] {
            return [
                .facebook,
                .kik,
                .slack,
                .twilioSms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .facebook: return "Facebook"
            case .kik: return "Kik"
            case .slack: return "Slack"
            case .twilioSms: return "Twilio-Sms"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetBotChannelAssociationOutput: Swift.Sendable {
    /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
    public var botAlias: Swift.String?
    /// Provides information that the messaging platform needs to communicate with the Amazon Lex bot.
    public var botConfiguration: [Swift.String: Swift.String]?
    /// The name of the Amazon Lex bot.
    public var botName: Swift.String?
    /// The date that the association between the bot and the channel was created.
    public var createdDate: Foundation.Date?
    /// A description of the association between the bot and the channel.
    public var description: Swift.String?
    /// If status is FAILED, Amazon Lex provides the reason that it failed to create the association.
    public var failureReason: Swift.String?
    /// The name of the association between the bot and the channel.
    public var name: Swift.String?
    /// The status of the bot channel.
    ///
    /// * CREATED - The channel has been created and is ready for use.
    ///
    /// * IN_PROGRESS - Channel creation is in progress.
    ///
    /// * FAILED - There was an error creating the channel. For information about the reason for the failure, see the failureReason field.
    public var status: LexModelBuildingClientTypes.ChannelStatus?
    /// The type of the messaging platform.
    public var type: LexModelBuildingClientTypes.ChannelType?

    public init(
        botAlias: Swift.String? = nil,
        botConfiguration: [Swift.String: Swift.String]? = nil,
        botName: Swift.String? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        name: Swift.String? = nil,
        status: LexModelBuildingClientTypes.ChannelStatus? = nil,
        type: LexModelBuildingClientTypes.ChannelType? = nil
    )
    {
        self.botAlias = botAlias
        self.botConfiguration = botConfiguration
        self.botName = botName
        self.createdDate = createdDate
        self.description = description
        self.failureReason = failureReason
        self.name = name
        self.status = status
        self.type = type
    }
}

extension GetBotChannelAssociationOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotChannelAssociationOutput(botAlias: \(Swift.String(describing: botAlias)), botName: \(Swift.String(describing: botName)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), failureReason: \(Swift.String(describing: failureReason)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), botConfiguration: \"CONTENT_REDACTED\")"}
}

public struct GetBotChannelAssociationsInput: Swift.Sendable {
    /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
    /// This member is required.
    public var botAlias: Swift.String?
    /// The name of the Amazon Lex bot in the association.
    /// This member is required.
    public var botName: Swift.String?
    /// The maximum number of associations to return in the response. The default is 50.
    public var maxResults: Swift.Int?
    /// Substring to match in channel association names. An association will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot channel associations, use a hyphen ("-") as the nameContains parameter.
    public var nameContains: Swift.String?
    /// A pagination token for fetching the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        botAlias: Swift.String? = nil,
        botName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

extension LexModelBuildingClientTypes {

    /// Represents an association between an Amazon Lex bot and an external messaging platform.
    public struct BotChannelAssociation: Swift.Sendable {
        /// An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.
        public var botAlias: Swift.String?
        /// Provides information necessary to communicate with the messaging platform.
        public var botConfiguration: [Swift.String: Swift.String]?
        /// The name of the Amazon Lex bot to which this association is being made. Currently, Amazon Lex supports associations with Facebook and Slack, and Twilio.
        public var botName: Swift.String?
        /// The date that the association between the Amazon Lex bot and the channel was created.
        public var createdDate: Foundation.Date?
        /// A text description of the association you are creating.
        public var description: Swift.String?
        /// If status is FAILED, Amazon Lex provides the reason that it failed to create the association.
        public var failureReason: Swift.String?
        /// The name of the association between the bot and the channel.
        public var name: Swift.String?
        /// The status of the bot channel.
        ///
        /// * CREATED - The channel has been created and is ready for use.
        ///
        /// * IN_PROGRESS - Channel creation is in progress.
        ///
        /// * FAILED - There was an error creating the channel. For information about the reason for the failure, see the failureReason field.
        public var status: LexModelBuildingClientTypes.ChannelStatus?
        /// Specifies the type of association by indicating the type of channel being established between the Amazon Lex bot and the external messaging platform.
        public var type: LexModelBuildingClientTypes.ChannelType?

        public init(
            botAlias: Swift.String? = nil,
            botConfiguration: [Swift.String: Swift.String]? = nil,
            botName: Swift.String? = nil,
            createdDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            name: Swift.String? = nil,
            status: LexModelBuildingClientTypes.ChannelStatus? = nil,
            type: LexModelBuildingClientTypes.ChannelType? = nil
        )
        {
            self.botAlias = botAlias
            self.botConfiguration = botConfiguration
            self.botName = botName
            self.createdDate = createdDate
            self.description = description
            self.failureReason = failureReason
            self.name = name
            self.status = status
            self.type = type
        }
    }
}

extension LexModelBuildingClientTypes.BotChannelAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BotChannelAssociation(botAlias: \(Swift.String(describing: botAlias)), botName: \(Swift.String(describing: botName)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), failureReason: \(Swift.String(describing: failureReason)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), botConfiguration: \"CONTENT_REDACTED\")"}
}

public struct GetBotChannelAssociationsOutput: Swift.Sendable {
    /// An array of objects, one for each association, that provides information about the Amazon Lex bot and its association with the channel.
    public var botChannelAssociations: [LexModelBuildingClientTypes.BotChannelAssociation]?
    /// A pagination token that fetches the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        botChannelAssociations: [LexModelBuildingClientTypes.BotChannelAssociation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botChannelAssociations = botChannelAssociations
        self.nextToken = nextToken
    }
}

public struct GetBotsInput: Swift.Sendable {
    /// The maximum number of bots to return in the response that the request will return. The default is 10.
    public var maxResults: Swift.Int?
    /// Substring to match in bot names. A bot will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token that fetches the next page of bots. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of bots, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about a bot. .
    public struct BotMetadata: Swift.Sendable {
        /// The date that the bot was created.
        public var createdDate: Foundation.Date?
        /// A description of the bot.
        public var description: Swift.String?
        /// The date that the bot was updated. When you create a bot, the creation date and last updated date are the same.
        public var lastUpdatedDate: Foundation.Date?
        /// The name of the bot.
        public var name: Swift.String?
        /// The status of the bot.
        public var status: LexModelBuildingClientTypes.Status?
        /// The version of the bot. For a new bot, the version is always $LATEST.
        public var version: Swift.String?

        public init(
            createdDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: LexModelBuildingClientTypes.Status? = nil,
            version: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.status = status
            self.version = version
        }
    }
}

public struct GetBotsOutput: Swift.Sendable {
    /// An array of botMetadata objects, with one entry for each bot.
    public var bots: [LexModelBuildingClientTypes.BotMetadata]?
    /// If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of bots.
    public var nextToken: Swift.String?

    public init(
        bots: [LexModelBuildingClientTypes.BotMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.bots = bots
        self.nextToken = nextToken
    }
}

public struct GetBotVersionsInput: Swift.Sendable {
    /// The maximum number of bot versions to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// The name of the bot for which versions should be returned.
    /// This member is required.
    public var name: Swift.String?
    /// A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

public struct GetBotVersionsOutput: Swift.Sendable {
    /// An array of BotMetadata objects, one for each numbered version of the bot plus one for the $LATEST version.
    public var bots: [LexModelBuildingClientTypes.BotMetadata]?
    /// A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        bots: [LexModelBuildingClientTypes.BotMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.bots = bots
        self.nextToken = nextToken
    }
}

public struct GetBuiltinIntentInput: Swift.Sendable {
    /// The unique identifier for a built-in intent. To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.
    /// This member is required.
    public var signature: Swift.String?

    public init(
        signature: Swift.String? = nil
    )
    {
        self.signature = signature
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about a slot used in a built-in intent.
    public struct BuiltinIntentSlot: Swift.Sendable {
        /// A list of the slots defined for the intent.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

public struct GetBuiltinIntentOutput: Swift.Sendable {
    /// The unique identifier for a built-in intent.
    public var signature: Swift.String?
    /// An array of BuiltinIntentSlot objects, one entry for each slot type in the intent.
    public var slots: [LexModelBuildingClientTypes.BuiltinIntentSlot]?
    /// A list of locales that the intent supports.
    public var supportedLocales: [LexModelBuildingClientTypes.Locale]?

    public init(
        signature: Swift.String? = nil,
        slots: [LexModelBuildingClientTypes.BuiltinIntentSlot]? = nil,
        supportedLocales: [LexModelBuildingClientTypes.Locale]? = nil
    )
    {
        self.signature = signature
        self.slots = slots
        self.supportedLocales = supportedLocales
    }
}

public struct GetBuiltinIntentsInput: Swift.Sendable {
    /// A list of locales that the intent supports.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The maximum number of intents to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// A pagination token that fetches the next page of intents. If this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, use the pagination token in the next request.
    public var nextToken: Swift.String?
    /// Substring to match in built-in intent signatures. An intent will be returned if any part of its signature matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.
    public var signatureContains: Swift.String?

    public init(
        locale: LexModelBuildingClientTypes.Locale? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        signatureContains: Swift.String? = nil
    )
    {
        self.locale = locale
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.signatureContains = signatureContains
    }
}

extension LexModelBuildingClientTypes {

    /// Provides metadata for a built-in intent.
    public struct BuiltinIntentMetadata: Swift.Sendable {
        /// A unique identifier for the built-in intent. To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.
        public var signature: Swift.String?
        /// A list of identifiers for the locales that the intent supports.
        public var supportedLocales: [LexModelBuildingClientTypes.Locale]?

        public init(
            signature: Swift.String? = nil,
            supportedLocales: [LexModelBuildingClientTypes.Locale]? = nil
        )
        {
            self.signature = signature
            self.supportedLocales = supportedLocales
        }
    }
}

public struct GetBuiltinIntentsOutput: Swift.Sendable {
    /// An array of builtinIntentMetadata objects, one for each intent in the response.
    public var intents: [LexModelBuildingClientTypes.BuiltinIntentMetadata]?
    /// A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        intents: [LexModelBuildingClientTypes.BuiltinIntentMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.intents = intents
        self.nextToken = nextToken
    }
}

public struct GetBuiltinSlotTypesInput: Swift.Sendable {
    /// A list of locales that the slot type supports.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The maximum number of slot types to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of slot types, specify the pagination token in the next request.
    public var nextToken: Swift.String?
    /// Substring to match in built-in slot type signatures. A slot type will be returned if any part of its signature matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
    public var signatureContains: Swift.String?

    public init(
        locale: LexModelBuildingClientTypes.Locale? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        signatureContains: Swift.String? = nil
    )
    {
        self.locale = locale
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.signatureContains = signatureContains
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about a built in slot type.
    public struct BuiltinSlotTypeMetadata: Swift.Sendable {
        /// A unique identifier for the built-in slot type. To find the signature for a slot type, see [Slot Type Reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference) in the Alexa Skills Kit.
        public var signature: Swift.String?
        /// A list of target locales for the slot.
        public var supportedLocales: [LexModelBuildingClientTypes.Locale]?

        public init(
            signature: Swift.String? = nil,
            supportedLocales: [LexModelBuildingClientTypes.Locale]? = nil
        )
        {
            self.signature = signature
            self.supportedLocales = supportedLocales
        }
    }
}

public struct GetBuiltinSlotTypesOutput: Swift.Sendable {
    /// If the response is truncated, the response includes a pagination token that you can use in your next request to fetch the next page of slot types.
    public var nextToken: Swift.String?
    /// An array of BuiltInSlotTypeMetadata objects, one entry for each slot type returned.
    public var slotTypes: [LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        slotTypes: [LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.slotTypes = slotTypes
    }
}

extension LexModelBuildingClientTypes {

    public enum ExportType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alexaSkillsKit
        case lex
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportType] {
            return [
                .alexaSkillsKit,
                .lex
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alexaSkillsKit: return "ALEXA_SKILLS_KIT"
            case .lex: return "LEX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum ResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bot
        case intent
        case slotType
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .bot,
                .intent,
                .slotType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bot: return "BOT"
            case .intent: return "INTENT"
            case .slotType: return "SLOT_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetExportInput: Swift.Sendable {
    /// The format of the exported data.
    /// This member is required.
    public var exportType: LexModelBuildingClientTypes.ExportType?
    /// The name of the bot to export.
    /// This member is required.
    public var name: Swift.String?
    /// The type of resource to export.
    /// This member is required.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// The version of the bot to export.
    /// This member is required.
    public var version: Swift.String?

    public init(
        exportType: LexModelBuildingClientTypes.ExportType? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        version: Swift.String? = nil
    )
    {
        self.exportType = exportType
        self.name = name
        self.resourceType = resourceType
        self.version = version
    }
}

extension LexModelBuildingClientTypes {

    public enum ExportStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportStatus] {
            return [
                .failed,
                .inProgress,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetExportOutput: Swift.Sendable {
    /// The status of the export.
    ///
    /// * IN_PROGRESS - The export is in progress.
    ///
    /// * READY - The export is complete.
    ///
    /// * FAILED - The export could not be completed.
    public var exportStatus: LexModelBuildingClientTypes.ExportStatus?
    /// The format of the exported data.
    public var exportType: LexModelBuildingClientTypes.ExportType?
    /// If status is FAILED, Amazon Lex provides the reason that it failed to export the resource.
    public var failureReason: Swift.String?
    /// The name of the bot being exported.
    public var name: Swift.String?
    /// The type of the exported resource.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// An S3 pre-signed URL that provides the location of the exported resource. The exported resource is a ZIP archive that contains the exported resource in JSON format. The structure of the archive may change. Your code should not rely on the archive structure.
    public var url: Swift.String?
    /// The version of the bot being exported.
    public var version: Swift.String?

    public init(
        exportStatus: LexModelBuildingClientTypes.ExportStatus? = nil,
        exportType: LexModelBuildingClientTypes.ExportType? = nil,
        failureReason: Swift.String? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        url: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.exportStatus = exportStatus
        self.exportType = exportType
        self.failureReason = failureReason
        self.name = name
        self.resourceType = resourceType
        self.url = url
        self.version = version
    }
}

public struct GetImportInput: Swift.Sendable {
    /// The identifier of the import job information to return.
    /// This member is required.
    public var importId: Swift.String?

    public init(
        importId: Swift.String? = nil
    )
    {
        self.importId = importId
    }
}

extension LexModelBuildingClientTypes {

    public enum ImportStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportStatus] {
            return [
                .complete,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum MergeStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failOnConflict
        case overwriteLatest
        case sdkUnknown(Swift.String)

        public static var allCases: [MergeStrategy] {
            return [
                .failOnConflict,
                .overwriteLatest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failOnConflict: return "FAIL_ON_CONFLICT"
            case .overwriteLatest: return "OVERWRITE_LATEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetImportOutput: Swift.Sendable {
    /// A timestamp for the date and time that the import job was created.
    public var createdDate: Foundation.Date?
    /// A string that describes why an import job failed to complete.
    public var failureReason: [Swift.String]?
    /// The identifier for the specific import job.
    public var importId: Swift.String?
    /// The status of the import job. If the status is FAILED, you can get the reason for the failure from the failureReason field.
    public var importStatus: LexModelBuildingClientTypes.ImportStatus?
    /// The action taken when there was a conflict between an existing resource and a resource in the import file.
    public var mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    /// The name given to the import job.
    public var name: Swift.String?
    /// The type of resource imported.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?

    public init(
        createdDate: Foundation.Date? = nil,
        failureReason: [Swift.String]? = nil,
        importId: Swift.String? = nil,
        importStatus: LexModelBuildingClientTypes.ImportStatus? = nil,
        mergeStrategy: LexModelBuildingClientTypes.MergeStrategy? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil
    )
    {
        self.createdDate = createdDate
        self.failureReason = failureReason
        self.importId = importId
        self.importStatus = importStatus
        self.mergeStrategy = mergeStrategy
        self.name = name
        self.resourceType = resourceType
    }
}

public struct GetIntentInput: Swift.Sendable {
    /// The name of the intent. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the intent.
    /// This member is required.
    public var version: Swift.String?

    public init(
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

public struct GetIntentOutput: Swift.Sendable {
    /// Checksum of the intent.
    public var checksum: Swift.String?
    /// After the Lambda function specified in the fulfillmentActivity element fulfills the intent, Amazon Lex conveys this statement to the user.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see [PutIntent].
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date that the intent was created.
    public var createdDate: Foundation.Date?
    /// A description of the intent.
    public var description: Swift.String?
    /// If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see [PutIntent].
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see [PutIntent].
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// Describes how the intent is fulfilled. For more information, see [PutIntent].
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information, if any, to connect to an Amazon Kendra index with the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the intent.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for a built-in intent.
    public var parentIntentSignature: Swift.String?
    /// If the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of sample utterances configured for the intent.
    public var sampleUtterances: [Swift.String]?
    /// An array of intent slots configured for the intent.
    public var slots: [LexModelBuildingClientTypes.Slot]?
    /// The version of the intent.
    public var version: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}

public struct GetIntentsInput: Swift.Sendable {
    /// The maximum number of intents to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// Substring to match in intent names. An intent will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about an intent.
    public struct IntentMetadata: Swift.Sendable {
        /// The date that the intent was created.
        public var createdDate: Foundation.Date?
        /// A description of the intent.
        public var description: Swift.String?
        /// The date that the intent was updated. When you create an intent, the creation date and last updated date are the same.
        public var lastUpdatedDate: Foundation.Date?
        /// The name of the intent.
        public var name: Swift.String?
        /// The version of the intent.
        public var version: Swift.String?

        public init(
            createdDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.version = version
        }
    }
}

public struct GetIntentsOutput: Swift.Sendable {
    /// An array of Intent objects. For more information, see [PutBot].
    public var intents: [LexModelBuildingClientTypes.IntentMetadata]?
    /// If the response is truncated, the response includes a pagination token that you can specify in your next request to fetch the next page of intents.
    public var nextToken: Swift.String?

    public init(
        intents: [LexModelBuildingClientTypes.IntentMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.intents = intents
        self.nextToken = nextToken
    }
}

public struct GetIntentVersionsInput: Swift.Sendable {
    /// The maximum number of intent versions to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// The name of the intent for which versions should be returned.
    /// This member is required.
    public var name: Swift.String?
    /// A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

public struct GetIntentVersionsOutput: Swift.Sendable {
    /// An array of IntentMetadata objects, one for each numbered version of the intent plus one for the $LATEST version.
    public var intents: [LexModelBuildingClientTypes.IntentMetadata]?
    /// A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        intents: [LexModelBuildingClientTypes.IntentMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.intents = intents
        self.nextToken = nextToken
    }
}

public struct GetMigrationInput: Swift.Sendable {
    /// The unique identifier of the migration to view. The migrationID is returned by the operation.
    /// This member is required.
    public var migrationId: Swift.String?

    public init(
        migrationId: Swift.String? = nil
    )
    {
        self.migrationId = migrationId
    }
}

extension LexModelBuildingClientTypes {

    public enum MigrationAlertType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case warn
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationAlertType] {
            return [
                .error,
                .warn
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .warn: return "WARN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about alerts and warnings that Amazon Lex sends during a migration. The alerts include information about how to resolve the issue.
    public struct MigrationAlert: Swift.Sendable {
        /// Additional details about the alert.
        public var details: [Swift.String]?
        /// A message that describes why the alert was issued.
        public var message: Swift.String?
        /// A link to the Amazon Lex documentation that describes how to resolve the alert.
        public var referenceURLs: [Swift.String]?
        /// The type of alert. There are two kinds of alerts:
        ///
        /// * ERROR - There was an issue with the migration that can't be resolved. The migration stops.
        ///
        /// * WARN - There was an issue with the migration that requires manual changes to the new Amazon Lex V2 bot. The migration continues.
        public var type: LexModelBuildingClientTypes.MigrationAlertType?

        public init(
            details: [Swift.String]? = nil,
            message: Swift.String? = nil,
            referenceURLs: [Swift.String]? = nil,
            type: LexModelBuildingClientTypes.MigrationAlertType? = nil
        )
        {
            self.details = details
            self.message = message
            self.referenceURLs = referenceURLs
            self.type = type
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum MigrationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationStatus] {
            return [
                .completed,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum MigrationStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createNew
        case updateExisting
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationStrategy] {
            return [
                .createNew,
                .updateExisting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createNew: return "CREATE_NEW"
            case .updateExisting: return "UPDATE_EXISTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetMigrationOutput: Swift.Sendable {
    /// A list of alerts and warnings that indicate issues with the migration for the Amazon Lex V1 bot to Amazon Lex V2. You receive a warning when an Amazon Lex V1 feature has a different implementation if Amazon Lex V2. For more information, see [Migrating a bot](https://docs.aws.amazon.com/lexv2/latest/dg/migrate.html) in the Amazon Lex V2 developer guide.
    public var alerts: [LexModelBuildingClientTypes.MigrationAlert]?
    /// The unique identifier of the migration. This is the same as the identifier used when calling the GetMigration operation.
    public var migrationId: Swift.String?
    /// Indicates the status of the migration. When the status is COMPLETE the migration is finished and the bot is available in Amazon Lex V2. There may be alerts and warnings that need to be resolved to complete the migration.
    public var migrationStatus: LexModelBuildingClientTypes.MigrationStatus?
    /// The strategy used to conduct the migration.
    ///
    /// * CREATE_NEW - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.
    ///
    /// * UPDATE_EXISTING - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.
    public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    /// The date and time that the migration started.
    public var migrationTimestamp: Foundation.Date?
    /// The locale of the Amazon Lex V1 bot migrated to Amazon Lex V2.
    public var v1BotLocale: LexModelBuildingClientTypes.Locale?
    /// The name of the Amazon Lex V1 bot migrated to Amazon Lex V2.
    public var v1BotName: Swift.String?
    /// The version of the Amazon Lex V1 bot migrated to Amazon Lex V2.
    public var v1BotVersion: Swift.String?
    /// The unique identifier of the Amazon Lex V2 bot that the Amazon Lex V1 is being migrated to.
    public var v2BotId: Swift.String?
    /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
    public var v2BotRole: Swift.String?

    public init(
        alerts: [LexModelBuildingClientTypes.MigrationAlert]? = nil,
        migrationId: Swift.String? = nil,
        migrationStatus: LexModelBuildingClientTypes.MigrationStatus? = nil,
        migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
        migrationTimestamp: Foundation.Date? = nil,
        v1BotLocale: LexModelBuildingClientTypes.Locale? = nil,
        v1BotName: Swift.String? = nil,
        v1BotVersion: Swift.String? = nil,
        v2BotId: Swift.String? = nil,
        v2BotRole: Swift.String? = nil
    )
    {
        self.alerts = alerts
        self.migrationId = migrationId
        self.migrationStatus = migrationStatus
        self.migrationStrategy = migrationStrategy
        self.migrationTimestamp = migrationTimestamp
        self.v1BotLocale = v1BotLocale
        self.v1BotName = v1BotName
        self.v1BotVersion = v1BotVersion
        self.v2BotId = v2BotId
        self.v2BotRole = v2BotRole
    }
}

extension LexModelBuildingClientTypes {

    public enum MigrationSortAttribute: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case migrationDateTime
        case v1BotName
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationSortAttribute] {
            return [
                .migrationDateTime,
                .v1BotName
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .migrationDateTime: return "MIGRATION_DATE_TIME"
            case .v1BotName: return "V1_BOT_NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension LexModelBuildingClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetMigrationsInput: Swift.Sendable {
    /// The maximum number of migrations to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// Filters the list to contain only migrations in the specified state.
    public var migrationStatusEquals: LexModelBuildingClientTypes.MigrationStatus?
    /// A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.
    public var nextToken: Swift.String?
    /// The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.
    public var sortByAttribute: LexModelBuildingClientTypes.MigrationSortAttribute?
    /// The order so sort the list.
    public var sortByOrder: LexModelBuildingClientTypes.SortOrder?
    /// Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.
    public var v1BotNameContains: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        migrationStatusEquals: LexModelBuildingClientTypes.MigrationStatus? = nil,
        nextToken: Swift.String? = nil,
        sortByAttribute: LexModelBuildingClientTypes.MigrationSortAttribute? = nil,
        sortByOrder: LexModelBuildingClientTypes.SortOrder? = nil,
        v1BotNameContains: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.migrationStatusEquals = migrationStatusEquals
        self.nextToken = nextToken
        self.sortByAttribute = sortByAttribute
        self.sortByOrder = sortByOrder
        self.v1BotNameContains = v1BotNameContains
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about migrating a bot from Amazon Lex V1 to Amazon Lex V2.
    public struct MigrationSummary: Swift.Sendable {
        /// The unique identifier that Amazon Lex assigned to the migration.
        public var migrationId: Swift.String?
        /// The status of the operation. When the status is COMPLETE the bot is available in Amazon Lex V2. There may be alerts and warnings that need to be resolved to complete the migration.
        public var migrationStatus: LexModelBuildingClientTypes.MigrationStatus?
        /// The strategy used to conduct the migration.
        public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
        /// The date and time that the migration started.
        public var migrationTimestamp: Foundation.Date?
        /// The locale of the Amazon Lex V1 bot that is the source of the migration.
        public var v1BotLocale: LexModelBuildingClientTypes.Locale?
        /// The name of the Amazon Lex V1 bot that is the source of the migration.
        public var v1BotName: Swift.String?
        /// The version of the Amazon Lex V1 bot that is the source of the migration.
        public var v1BotVersion: Swift.String?
        /// The unique identifier of the Amazon Lex V2 that is the destination of the migration.
        public var v2BotId: Swift.String?
        /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
        public var v2BotRole: Swift.String?

        public init(
            migrationId: Swift.String? = nil,
            migrationStatus: LexModelBuildingClientTypes.MigrationStatus? = nil,
            migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
            migrationTimestamp: Foundation.Date? = nil,
            v1BotLocale: LexModelBuildingClientTypes.Locale? = nil,
            v1BotName: Swift.String? = nil,
            v1BotVersion: Swift.String? = nil,
            v2BotId: Swift.String? = nil,
            v2BotRole: Swift.String? = nil
        )
        {
            self.migrationId = migrationId
            self.migrationStatus = migrationStatus
            self.migrationStrategy = migrationStrategy
            self.migrationTimestamp = migrationTimestamp
            self.v1BotLocale = v1BotLocale
            self.v1BotName = v1BotName
            self.v1BotVersion = v1BotVersion
            self.v2BotId = v2BotId
            self.v2BotRole = v2BotRole
        }
    }
}

public struct GetMigrationsOutput: Swift.Sendable {
    /// An array of summaries for migrations from Amazon Lex V1 to Amazon Lex V2. To see details of the migration, use the migrationId from the summary in a call to the operation.
    public var migrationSummaries: [LexModelBuildingClientTypes.MigrationSummary]?
    /// If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of migrations.
    public var nextToken: Swift.String?

    public init(
        migrationSummaries: [LexModelBuildingClientTypes.MigrationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.migrationSummaries = migrationSummaries
        self.nextToken = nextToken
    }
}

public struct GetSlotTypeInput: Swift.Sendable {
    /// The name of the slot type. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the slot type.
    /// This member is required.
    public var version: Swift.String?

    public init(
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

public struct GetSlotTypeOutput: Swift.Sendable {
    /// Checksum of the $LATEST version of the slot type.
    public var checksum: Swift.String?
    /// The date that the slot type was created.
    public var createdDate: Foundation.Date?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the values that the slot type can take.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The date that the slot type was updated. When you create a resource, the creation date and last update date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the slot type.
    public var name: Swift.String?
    /// The built-in slot type used as a parent for the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// The strategy that Amazon Lex uses to determine the value of the slot. For more information, see [PutSlotType].
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    /// The version of the slot type.
    public var version: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.createdDate = createdDate
        self.description = description
        self.enumerationValues = enumerationValues
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
        self.version = version
    }
}

public struct GetSlotTypesInput: Swift.Sendable {
    /// The maximum number of slot types to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// Substring to match in slot type names. A slot type will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch next page of slot types, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about a slot type..
    public struct SlotTypeMetadata: Swift.Sendable {
        /// The date that the slot type was created.
        public var createdDate: Foundation.Date?
        /// A description of the slot type.
        public var description: Swift.String?
        /// The date that the slot type was updated. When you create a resource, the creation date and last updated date are the same.
        public var lastUpdatedDate: Foundation.Date?
        /// The name of the slot type.
        public var name: Swift.String?
        /// The version of the slot type.
        public var version: Swift.String?

        public init(
            createdDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.version = version
        }
    }
}

public struct GetSlotTypesOutput: Swift.Sendable {
    /// If the response is truncated, it includes a pagination token that you can specify in your next request to fetch the next page of slot types.
    public var nextToken: Swift.String?
    /// An array of objects, one for each slot type, that provides information such as the name of the slot type, the version, and a description.
    public var slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.slotTypes = slotTypes
    }
}

public struct GetSlotTypeVersionsInput: Swift.Sendable {
    /// The maximum number of slot type versions to return in the response. The default is 10.
    public var maxResults: Swift.Int?
    /// The name of the slot type for which versions should be returned.
    /// This member is required.
    public var name: Swift.String?
    /// A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

public struct GetSlotTypeVersionsOutput: Swift.Sendable {
    /// A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.
    public var nextToken: Swift.String?
    /// An array of SlotTypeMetadata objects, one for each numbered version of the slot type plus one for the $LATEST version.
    public var slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]?

    public init(
        nextToken: Swift.String? = nil,
        slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.slotTypes = slotTypes
    }
}

extension LexModelBuildingClientTypes {

    public enum StatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case detected
        case missed
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .detected,
                .missed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .detected: return "Detected"
            case .missed: return "Missed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetUtterancesViewInput: Swift.Sendable {
    /// The name of the bot for which utterance information should be returned.
    /// This member is required.
    public var botName: Swift.String?
    /// An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.
    /// This member is required.
    public var botVersions: [Swift.String]?
    /// To return utterances that were recognized and handled, use Detected. To return utterances that were not recognized, use Missed.
    /// This member is required.
    public var statusType: LexModelBuildingClientTypes.StatusType?

    public init(
        botName: Swift.String? = nil,
        botVersions: [Swift.String]? = nil,
        statusType: LexModelBuildingClientTypes.StatusType? = nil
    )
    {
        self.botName = botName
        self.botVersions = botVersions
        self.statusType = statusType
    }
}

extension LexModelBuildingClientTypes {

    /// Provides information about a single utterance that was made to your bot.
    public struct UtteranceData: Swift.Sendable {
        /// The number of times that the utterance was processed.
        public var count: Swift.Int?
        /// The total number of individuals that used the utterance.
        public var distinctUsers: Swift.Int?
        /// The date that the utterance was first recorded.
        public var firstUtteredDate: Foundation.Date?
        /// The date that the utterance was last recorded.
        public var lastUtteredDate: Foundation.Date?
        /// The text that was entered by the user or the text representation of an audio clip.
        public var utteranceString: Swift.String?

        public init(
            count: Swift.Int? = nil,
            distinctUsers: Swift.Int? = nil,
            firstUtteredDate: Foundation.Date? = nil,
            lastUtteredDate: Foundation.Date? = nil,
            utteranceString: Swift.String? = nil
        )
        {
            self.count = count
            self.distinctUsers = distinctUsers
            self.firstUtteredDate = firstUtteredDate
            self.lastUtteredDate = lastUtteredDate
            self.utteranceString = utteranceString
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Provides a list of utterances that have been made to a specific version of your bot. The list contains a maximum of 100 utterances.
    public struct UtteranceList: Swift.Sendable {
        /// The version of the bot that processed the list.
        public var botVersion: Swift.String?
        /// One or more [UtteranceData] objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.
        public var utterances: [LexModelBuildingClientTypes.UtteranceData]?

        public init(
            botVersion: Swift.String? = nil,
            utterances: [LexModelBuildingClientTypes.UtteranceData]? = nil
        )
        {
            self.botVersion = botVersion
            self.utterances = utterances
        }
    }
}

public struct GetUtterancesViewOutput: Swift.Sendable {
    /// The name of the bot for which utterance information was returned.
    public var botName: Swift.String?
    /// An array of [UtteranceList] objects, each containing a list of [UtteranceData] objects describing the utterances that were processed by your bot. The response contains a maximum of 100 UtteranceData objects for each version. Amazon Lex returns the most frequent utterances received by the bot in the last 15 days.
    public var utterances: [LexModelBuildingClientTypes.UtteranceList]?

    public init(
        botName: Swift.String? = nil,
        utterances: [LexModelBuildingClientTypes.UtteranceList]? = nil
    )
    {
        self.botName = botName
        self.utterances = utterances
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to get a list of tags for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension LexModelBuildingClientTypes {

    /// A list of key/value pairs that identify a bot, bot alias, or bot channel. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    public struct Tag: Swift.Sendable {
        /// The key for the tag. Keys are not case-sensitive and must be unique.
        /// This member is required.
        public var key: Swift.String?
        /// The value associated with a key. The value may be an empty string but it can't be null.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags associated with a resource.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init(
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension LexModelBuildingClientTypes {

    public enum ProcessBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case build
        case save
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessBehavior] {
            return [
                .build,
                .save
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .build: return "BUILD"
            case .save: return "SAVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct PutBotInput: Swift.Sendable {
    /// When Amazon Lex can't understand the user's input in context, it tries to elicit the information a few times. After that, Amazon Lex sends the message defined in abortStatement to the user, and then cancels the conversation. To set the number of retries, use the valueElicitationPrompt field for the slot type. For example, in a pizza ordering bot, Amazon Lex might ask a user "What type of crust would you like?" If the user's response is not one of the expected responses (for example, "thin crust, "deep dish," etc.), Amazon Lex tries to elicit a correct response a few more times. For example, in a pizza ordering application, OrderPizza might be one of the intents. This intent might require the CrustType slot. You specify the valueElicitationPrompt field when you create the CrustType slot. If you have defined a fallback intent the cancel statement will not be sent to the user, the fallback intent is used instead. For more information, see [ AMAZON.FallbackIntent](https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html).
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Identifies a specific revision of the $LATEST version. When you create a new bot, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a bot, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)
    /// This member is required.
    public var childDirected: Swift.Bool?
    /// When Amazon Lex doesn't understand the user's intent, it uses this message to get clarification. To specify how many times Amazon Lex should repeat the clarification prompt, use the maxAttempts field. If Amazon Lex still doesn't understand, it sends the message in the abortStatement field. When you create a clarification prompt, make sure that it suggests the correct response from the user. for example, for a bot that orders pizza and drinks, you might create this clarification prompt: "What would you like to do? You can say 'Order a pizza' or 'Order a drink.'" If you have defined a fallback intent, it will be invoked if the clarification prompt is repeated the number of times defined in the maxAttempts field. For more information, see [ AMAZON.FallbackIntent](https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html). If you don't define a clarification prompt, at runtime Amazon Lex will return a 400 Bad Request exception in three cases:
    ///
    /// * Follow-up prompt - When the user responds to a follow-up prompt but does not provide an intent. For example, in response to a follow-up prompt that says "Would you like anything else today?" the user says "Yes." Amazon Lex will return a 400 Bad Request exception because it does not have a clarification prompt to send to the user to get an intent.
    ///
    /// * Lambda function - When using a Lambda function, you return an ElicitIntent dialog type. Since Amazon Lex does not have a clarification prompt to get an intent from the user, it returns a 400 Bad Request exception.
    ///
    /// * PutSession operation - When using the PutSession operation, you send an ElicitIntent dialog type. Since Amazon Lex does not have a clarification prompt to get an intent from the user, it returns a 400 Bad Request exception.
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// When set to true a new numbered version of the bot is created. This is the same as calling the CreateBotVersion operation. If you don't specify createVersion, the default is false.
    public var createVersion: Swift.Bool?
    /// A description of the bot.
    public var description: Swift.String?
    /// When set to true user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify detectSentiment, the default is false.
    public var detectSentiment: Swift.Bool?
    /// Set to true to enable access to natural language understanding improvements. When you set the enableModelImprovements parameter to true you can use the nluIntentConfidenceThreshold parameter to configure confidence scores. For more information, see [Confidence Scores](https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html). You can only set the enableModelImprovements parameter in certain Regions. If you set the parameter to true, your bot has access to accuracy improvements. The Regions where you can set the enableModelImprovements parameter to true are:
    ///
    /// * US East (N. Virginia) (us-east-1)
    ///
    /// * US West (Oregon) (us-west-2)
    ///
    /// * Asia Pacific (Sydney) (ap-southeast-2)
    ///
    /// * EU (Ireland) (eu-west-1)
    ///
    ///
    /// In other Regions, the enableModelImprovements parameter is set to true by default. In these Regions setting the parameter to false throws a ValidationException exception.
    public var enableModelImprovements: Swift.Bool?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over. If you don't include the idleSessionTTLInSeconds element in a PutBot operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot. The default is 300 seconds (5 minutes).
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see [how-it-works].
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. The default is en-US.
    /// This member is required.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot. The name is not case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a [PostContent](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html) or [PostText](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot. You must set the enableModelImprovements parameter to true to use confidence scores in the following regions.
    ///
    /// * US East (N. Virginia) (us-east-1)
    ///
    /// * US West (Oregon) (us-west-2)
    ///
    /// * Asia Pacific (Sydney) (ap-southeast-2)
    ///
    /// * EU (Ireland) (eu-west-1)
    ///
    ///
    /// In other Regions, the enableModelImprovements parameter is set to true by default. For example, suppose a bot is configured with the confidence threshold of 0.80 and the AMAZON.FallbackIntent. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the PostText operation would be:
    ///
    /// * AMAZON.FallbackIntent
    ///
    /// * IntentA
    ///
    /// * IntentB
    ///
    /// * IntentC
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// If you set the processBehavior element to BUILD, Amazon Lex builds the bot so that it can be run. If you set the element to SAVE Amazon Lex saves the bot, but doesn't build it. If you don't specify this value, the default value is BUILD.
    public var processBehavior: LexModelBuildingClientTypes.ProcessBehavior?
    /// A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the PutBot operation to update the tags on a bot. To update tags, use the TagResource operation.
    public var tags: [LexModelBuildingClientTypes.Tag]?
    /// The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see [Voices in Amazon Polly](https://docs.aws.amazon.com/polly/latest/dg/voicelist.html) in the Amazon Polly Developer Guide.
    public var voiceId: Swift.String?

    public init(
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        processBehavior: LexModelBuildingClientTypes.ProcessBehavior? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createVersion = createVersion
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.locale = locale
        self.name = name
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.processBehavior = processBehavior
        self.tags = tags
        self.voiceId = voiceId
    }
}

public struct PutBotOutput: Swift.Sendable {
    /// The message that Amazon Lex uses to cancel a conversation. For more information, see [PutBot].
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum of the bot that you created.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)
    public var childDirected: Swift.Bool?
    /// The prompts that Amazon Lex uses when it doesn't understand the user's intent. For more information, see [PutBot].
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// True if a new version of the bot was created. If the createVersion field was not specified in the request, the createVersion field is set to false in the response.
    public var createVersion: Swift.Bool?
    /// The date that the bot was created.
    public var createdDate: Foundation.Date?
    /// A description of the bot.
    public var description: Swift.String?
    /// true if the bot is configured to send user utterances to Amazon Comprehend for sentiment analysis. If the detectSentiment field was not specified in the request, the detectSentiment field is false in the response.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements. true indicates that the bot is using the improvements, otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex provides the reason that it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum length of time that Amazon Lex retains the data gathered in a conversation. For more information, see [PutBot].
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. For more information, see [PutBot].
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date that the bot was updated. When you create a resource, the creation date and last updated date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    /// The score that determines where Amazon Lex inserts the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a [PostContent](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html) or [PostText](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html) response. AMAZON.FallbackIntent is inserted if the confidence score for all intents is below this value. AMAZON.KendraSearchIntent is only inserted if it is configured for the bot.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// When you send a request to create a bot with processBehavior set to BUILD, Amazon Lex sets the status response element to BUILDING. In the READY_BASIC_TESTING state you can test the bot with user inputs that exactly match the utterances configured for the bot's intents and values in the slot types. If Amazon Lex can't build the bot, Amazon Lex sets status to FAILED. Amazon Lex returns the reason for the failure in the failureReason response element. When you set processBehavior to SAVE, Amazon Lex sets the status code to NOT BUILT. When the bot is in the READY state you can test and publish the bot.
    public var status: LexModelBuildingClientTypes.Status?
    /// A list of tags associated with the bot.
    public var tags: [LexModelBuildingClientTypes.Tag]?
    /// The version of the bot. For a new bot, the version is always $LATEST.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see [PutBot].
    public var voiceId: Swift.String?

    public init(
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.status = status
        self.tags = tags
        self.version = version
        self.voiceId = voiceId
    }
}

extension LexModelBuildingClientTypes {

    /// Settings used to configure delivery mode and destination for conversation logs.
    public struct LogSettingsRequest: Swift.Sendable {
        /// Where the logs will be delivered. Text logs are delivered to a CloudWatch Logs log group. Audio logs are delivered to an S3 bucket.
        /// This member is required.
        public var destination: LexModelBuildingClientTypes.Destination?
        /// The Amazon Resource Name (ARN) of the AWS KMS customer managed key for encrypting audio logs delivered to an S3 bucket. The key does not apply to CloudWatch Logs and is optional for S3 buckets.
        public var kmsKeyArn: Swift.String?
        /// The type of logging to enable. Text logs are delivered to a CloudWatch Logs log group. Audio logs are delivered to an S3 bucket.
        /// This member is required.
        public var logType: LexModelBuildingClientTypes.LogType?
        /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs should be delivered.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init(
            destination: LexModelBuildingClientTypes.Destination? = nil,
            kmsKeyArn: Swift.String? = nil,
            logType: LexModelBuildingClientTypes.LogType? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.destination = destination
            self.kmsKeyArn = kmsKeyArn
            self.logType = logType
            self.resourceArn = resourceArn
        }
    }
}

extension LexModelBuildingClientTypes {

    /// Provides the settings needed for conversation logs.
    public struct ConversationLogsRequest: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an IAM role with permission to write to your CloudWatch Logs for text logs and your S3 bucket for audio logs. If audio encryption is enabled, this role also provides access permission for the AWS KMS key used for encrypting audio logs. For more information, see [Creating an IAM Role and Policy for Conversation Logs](https://docs.aws.amazon.com/lex/latest/dg/conversation-logs-role-and-policy.html).
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// The settings for your conversation logs. You can log the conversation text, conversation audio, or both.
        /// This member is required.
        public var logSettings: [LexModelBuildingClientTypes.LogSettingsRequest]?

        public init(
            iamRoleArn: Swift.String? = nil,
            logSettings: [LexModelBuildingClientTypes.LogSettingsRequest]? = nil
        )
        {
            self.iamRoleArn = iamRoleArn
            self.logSettings = logSettings
        }
    }
}

public struct PutBotAliasInput: Swift.Sendable {
    /// The name of the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The version of the bot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Identifies a specific revision of the $LATEST version. When you create a new bot alias, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a bot alias, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// Settings for conversation logs for the alias.
    public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsRequest?
    /// A description of the alias.
    public var description: Swift.String?
    /// The name of the alias. The name is not case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the PutBotAlias operation to update the tags on a bot alias. To update tags, use the TagResource operation.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init(
        botName: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        checksum: Swift.String? = nil,
        conversationLogs: LexModelBuildingClientTypes.ConversationLogsRequest? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.botName = botName
        self.botVersion = botVersion
        self.checksum = checksum
        self.conversationLogs = conversationLogs
        self.description = description
        self.name = name
        self.tags = tags
    }
}

public struct PutBotAliasOutput: Swift.Sendable {
    /// The name of the bot that the alias points to.
    public var botName: Swift.String?
    /// The version of the bot that the alias points to.
    public var botVersion: Swift.String?
    /// The checksum for the current version of the alias.
    public var checksum: Swift.String?
    /// The settings that determine how Amazon Lex uses conversation logs for the alias.
    public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
    /// The date that the bot alias was created.
    public var createdDate: Foundation.Date?
    /// A description of the alias.
    public var description: Swift.String?
    /// The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the alias.
    public var name: Swift.String?
    /// A list of tags associated with a bot.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init(
        botName: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        checksum: Swift.String? = nil,
        conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.botName = botName
        self.botVersion = botVersion
        self.checksum = checksum
        self.conversationLogs = conversationLogs
        self.createdDate = createdDate
        self.description = description
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.tags = tags
    }
}

public struct PutIntentInput: Swift.Sendable {
    /// Identifies a specific revision of the $LATEST version. When you create a new intent, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a intent, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// The statement that you want Amazon Lex to convey to the user after the intent is successfully fulfilled by the Lambda function. This element is relevant only if you provide a Lambda function in the fulfillmentActivity. If you return the intent to the client application, you can't specify this element. The followUpPrompt and conclusionStatement are mutually exclusive. You can specify only one.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// Prompts the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. You you must provide both the rejectionStatement and the confirmationPrompt, or neither.
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// When set to true a new numbered version of the intent is created. This is the same as calling the CreateIntentVersion operation. If you do not specify createVersion, the default is false.
    public var createVersion: Swift.Bool?
    /// A description of the intent.
    public var description: Swift.String?
    /// Specifies a Lambda function to invoke for each user input. You can invoke this Lambda function to personalize user interaction. For example, suppose your bot determines that the user is John. Your Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, GlutenIntolerant, to true. You might find John's phone number and set the corresponding session attribute.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the user to order a drink. The action that Amazon Lex takes depends on the user's response, as follows:
    ///
    /// * If the user says "Yes" it responds with the clarification prompt that is configured for the bot.
    ///
    /// * if the user says "Yes" and continues with an utterance that triggers an intent it starts a conversation for the intent.
    ///
    /// * If the user says "No" it responds with the rejection statement configured for the the follow-up prompt.
    ///
    /// * If it doesn't recognize the utterance it repeats the follow-up prompt again.
    ///
    ///
    /// The followUpPrompt field and the conclusionStatement field are mutually exclusive. You can specify only one.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// Required. Describes how the intent is fulfilled. For example, after a user provides all of the information for a pizza order, fulfillmentActivity defines how the bot places an order with a local pizza store. You might configure Amazon Lex to return all of the intent information to the client application, or direct it to invoke a Lambda function that can process the intent (for example, place an order with a pizzeria).
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. For more information, see [ AMAZON.KendraSearchIntent](http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html).
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The name of the intent. The name is not case sensitive. The name can't match a built-in intent name, or a built-in intent name with "AMAZON." removed. For example, because there is a built-in intent called AMAZON.HelpIntent, you can't create a custom intent called HelpIntent. For a list of built-in intents, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.
    /// This member is required.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents) in the Alexa Skills Kit.
    public var parentIntentSignature: Swift.String?
    /// When the user answers "no" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled. You must provide both the rejectionStatement and the confirmationPrompt, or neither.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of utterances (strings) that a user might say to signal the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity} {PizzaSize} pizzas". In each utterance, a slot name is enclosed in curly braces.
    public var sampleUtterances: [Swift.String]?
    /// An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see [how-it-works].
    public var slots: [LexModelBuildingClientTypes.Slot]?

    public init(
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createVersion = createVersion
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
    }
}

public struct PutIntentOutput: Swift.Sendable {
    /// Checksum of the $LATESTversion of the intent created or updated.
    public var checksum: Swift.String?
    /// After the Lambda function specified in thefulfillmentActivityintent fulfills the intent, Amazon Lex conveys this statement to the user.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// If defined in the intent, Amazon Lex prompts the user to confirm the intent before fulfilling it.
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// True if a new version of the intent was created. If the createVersion field was not specified in the request, the createVersion field is set to false in the response.
    public var createVersion: Swift.Bool?
    /// The date that the intent was created.
    public var createdDate: Foundation.Date?
    /// A description of the intent.
    public var description: Swift.String?
    /// If defined in the intent, Amazon Lex invokes this Lambda function for each user input.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// If defined in the intent, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// If defined in the intent, Amazon Lex invokes this Lambda function to fulfill the intent after the user provides all of the information required by the intent.
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information, if any, required to connect to an Amazon Kendra index and use the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The date that the intent was updated. When you create a resource, the creation date and last update dates are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the intent.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for the built-in intent that this intent is based on.
    public var parentIntentSignature: Swift.String?
    /// If the user answers "no" to the question defined in confirmationPrompt Amazon Lex responds with this statement to acknowledge that the intent was canceled.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of sample utterances that are configured for the intent.
    public var sampleUtterances: [Swift.String]?
    /// An array of intent slots that are configured for the intent.
    public var slots: [LexModelBuildingClientTypes.Slot]?
    /// The version of the intent. For a new intent, the version is always $LATEST.
    public var version: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}

public struct PutSlotTypeInput: Swift.Sendable {
    /// Identifies a specific revision of the $LATEST version. When you create a new slot type, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception. When you want to update a slot type, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the  checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// When set to true a new numbered version of the slot type is created. This is the same as calling the CreateSlotTypeVersion operation. If you do not specify createVersion, the default is false.
    public var createVersion: Swift.Bool?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, which are additional values that help train the machine learning model about the values that it resolves for a slot. A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values. When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The valueSelectionStrategy field indicates the option to use.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The name of the slot type. The name is not case sensitive. The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called AMAZON.DATE, you can't create a custom slot type called DATE. For a list of built-in slot types, see [Slot Type Reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference) in the Alexa Skills Kit.
    /// This member is required.
    public var name: Swift.String?
    /// The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent. Only AMAZON.AlphaNumeric is supported.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
    ///
    /// * ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to the slot value.
    ///
    /// * TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
    ///
    ///
    /// If you don't specify the valueSelectionStrategy, the default is ORIGINAL_VALUE.
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?

    public init(
        checksum: Swift.String? = nil,
        createVersion: Swift.Bool? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil
    )
    {
        self.checksum = checksum
        self.createVersion = createVersion
        self.description = description
        self.enumerationValues = enumerationValues
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
    }
}

public struct PutSlotTypeOutput: Swift.Sendable {
    /// Checksum of the $LATEST version of the slot type.
    public var checksum: Swift.String?
    /// True if a new version of the slot type was created. If the createVersion field was not specified in the request, the createVersion field is set to false in the response.
    public var createVersion: Swift.Bool?
    /// The date that the slot type was created.
    public var createdDate: Foundation.Date?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the values that the slot type can take.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The date that the slot type was updated. When you create a slot type, the creation date and last update date are the same.
    public var lastUpdatedDate: Foundation.Date?
    /// The name of the slot type.
    public var name: Swift.String?
    /// The built-in slot type used as the parent of the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// The slot resolution strategy that Amazon Lex uses to determine the value of the slot. For more information, see [PutSlotType].
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    /// The version of the slot type. For a new slot type, the version is always $LATEST.
    public var version: Swift.String?

    public init(
        checksum: Swift.String? = nil,
        createVersion: Swift.Bool? = nil,
        createdDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        lastUpdatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.enumerationValues = enumerationValues
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
        self.version = version
    }
}

public struct StartImportInput: Swift.Sendable {
    /// Specifies the action that the StartImport operation should take when there is an existing resource with the same name.
    ///
    /// * FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the failureReason field of the response to the GetImport operation. OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.
    /// This member is required.
    public var mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    /// A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the resourceType field.
    /// This member is required.
    public var payload: Foundation.Data?
    /// Specifies the type of resource to export. Each resource also exports any resources that it depends on.
    ///
    /// * A bot exports dependent intents.
    ///
    /// * An intent exports dependent slot types.
    /// This member is required.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// A list of tags to add to the imported bot. You can only add tags when you import a bot, you can't add tags to an intent or slot type.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init(
        mergeStrategy: LexModelBuildingClientTypes.MergeStrategy? = nil,
        payload: Foundation.Data? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.mergeStrategy = mergeStrategy
        self.payload = payload
        self.resourceType = resourceType
        self.tags = tags
    }
}

public struct StartImportOutput: Swift.Sendable {
    /// A timestamp for the date and time that the import job was requested.
    public var createdDate: Foundation.Date?
    /// The identifier for the specific import job.
    public var importId: Swift.String?
    /// The status of the import job. If the status is FAILED, you can get the reason for the failure using the GetImport operation.
    public var importStatus: LexModelBuildingClientTypes.ImportStatus?
    /// The action to take when there is a merge conflict.
    public var mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    /// The name given to the import job.
    public var name: Swift.String?
    /// The type of resource to import.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// A list of tags added to the imported bot.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init(
        createdDate: Foundation.Date? = nil,
        importId: Swift.String? = nil,
        importStatus: LexModelBuildingClientTypes.ImportStatus? = nil,
        mergeStrategy: LexModelBuildingClientTypes.MergeStrategy? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.createdDate = createdDate
        self.importId = importId
        self.importStatus = importStatus
        self.mergeStrategy = mergeStrategy
        self.name = name
        self.resourceType = resourceType
        self.tags = tags
    }
}

public struct StartMigrationInput: Swift.Sendable {
    /// The strategy used to conduct the migration.
    ///
    /// * CREATE_NEW - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.
    ///
    /// * UPDATE_EXISTING - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.
    /// This member is required.
    public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    /// The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
    /// This member is required.
    public var v1BotName: Swift.String?
    /// The version of the bot to migrate to Amazon Lex V2. You can migrate the $LATEST version as well as any numbered version.
    /// This member is required.
    public var v1BotVersion: Swift.String?
    /// The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to.
    ///
    /// * If the Amazon Lex V2 bot doesn't exist, you must use the CREATE_NEW migration strategy.
    ///
    /// * If the Amazon Lex V2 bot exists, you must use the UPDATE_EXISTING migration strategy to change the contents of the Amazon Lex V2 bot.
    /// This member is required.
    public var v2BotName: Swift.String?
    /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
    /// This member is required.
    public var v2BotRole: Swift.String?

    public init(
        migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
        v1BotName: Swift.String? = nil,
        v1BotVersion: Swift.String? = nil,
        v2BotName: Swift.String? = nil,
        v2BotRole: Swift.String? = nil
    )
    {
        self.migrationStrategy = migrationStrategy
        self.v1BotName = v1BotName
        self.v1BotVersion = v1BotVersion
        self.v2BotName = v2BotName
        self.v2BotRole = v2BotRole
    }
}

public struct StartMigrationOutput: Swift.Sendable {
    /// The unique identifier that Amazon Lex assigned to the migration.
    public var migrationId: Swift.String?
    /// The strategy used to conduct the migration.
    public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    /// The date and time that the migration started.
    public var migrationTimestamp: Foundation.Date?
    /// The locale used for the Amazon Lex V1 bot.
    public var v1BotLocale: LexModelBuildingClientTypes.Locale?
    /// The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
    public var v1BotName: Swift.String?
    /// The version of the bot to migrate to Amazon Lex V2.
    public var v1BotVersion: Swift.String?
    /// The unique identifier for the Amazon Lex V2 bot.
    public var v2BotId: Swift.String?
    /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
    public var v2BotRole: Swift.String?

    public init(
        migrationId: Swift.String? = nil,
        migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
        migrationTimestamp: Foundation.Date? = nil,
        v1BotLocale: LexModelBuildingClientTypes.Locale? = nil,
        v1BotName: Swift.String? = nil,
        v1BotVersion: Swift.String? = nil,
        v2BotId: Swift.String? = nil,
        v2BotRole: Swift.String? = nil
    )
    {
        self.migrationId = migrationId
        self.migrationStrategy = migrationStrategy
        self.migrationTimestamp = migrationTimestamp
        self.v1BotLocale = v1BotLocale
        self.v1BotName = v1BotName
        self.v1BotVersion = v1BotVersion
        self.v2BotId = v2BotId
        self.v2BotRole = v2BotRole
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.
    /// This member is required.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to remove the tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension CreateBotVersionInput {

    static func urlPathProvider(_ value: CreateBotVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(name.urlPercentEncoding())/versions"
    }
}

extension CreateIntentVersionInput {

    static func urlPathProvider(_ value: CreateIntentVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/intents/\(name.urlPercentEncoding())/versions"
    }
}

extension CreateSlotTypeVersionInput {

    static func urlPathProvider(_ value: CreateSlotTypeVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/slottypes/\(name.urlPercentEncoding())/versions"
    }
}

extension DeleteBotInput {

    static func urlPathProvider(_ value: DeleteBotInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(name.urlPercentEncoding())"
    }
}

extension DeleteBotAliasInput {

    static func urlPathProvider(_ value: DeleteBotAliasInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases/\(name.urlPercentEncoding())"
    }
}

extension DeleteBotChannelAssociationInput {

    static func urlPathProvider(_ value: DeleteBotChannelAssociationInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let botAlias = value.botAlias else {
            return nil
        }
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases/\(botAlias.urlPercentEncoding())/channels/\(name.urlPercentEncoding())"
    }
}

extension DeleteBotVersionInput {

    static func urlPathProvider(_ value: DeleteBotVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let version = value.version else {
            return nil
        }
        return "/bots/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
    }
}

extension DeleteIntentInput {

    static func urlPathProvider(_ value: DeleteIntentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/intents/\(name.urlPercentEncoding())"
    }
}

extension DeleteIntentVersionInput {

    static func urlPathProvider(_ value: DeleteIntentVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let version = value.version else {
            return nil
        }
        return "/intents/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
    }
}

extension DeleteSlotTypeInput {

    static func urlPathProvider(_ value: DeleteSlotTypeInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/slottypes/\(name.urlPercentEncoding())"
    }
}

extension DeleteSlotTypeVersionInput {

    static func urlPathProvider(_ value: DeleteSlotTypeVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let version = value.version else {
            return nil
        }
        return "/slottypes/\(name.urlPercentEncoding())/version/\(version.urlPercentEncoding())"
    }
}

extension DeleteUtterancesInput {

    static func urlPathProvider(_ value: DeleteUtterancesInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let userId = value.userId else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/utterances/\(userId.urlPercentEncoding())"
    }
}

extension GetBotInput {

    static func urlPathProvider(_ value: GetBotInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let versionOrAlias = value.versionOrAlias else {
            return nil
        }
        return "/bots/\(name.urlPercentEncoding())/versions/\(versionOrAlias.urlPercentEncoding())"
    }
}

extension GetBotAliasInput {

    static func urlPathProvider(_ value: GetBotAliasInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases/\(name.urlPercentEncoding())"
    }
}

extension GetBotAliasesInput {

    static func urlPathProvider(_ value: GetBotAliasesInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases"
    }
}

extension GetBotAliasesInput {

    static func queryItemProvider(_ value: GetBotAliasesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nameContains = value.nameContains {
            let nameContainsQueryItem = Smithy.URIQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            items.append(nameContainsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetBotChannelAssociationInput {

    static func urlPathProvider(_ value: GetBotChannelAssociationInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let botAlias = value.botAlias else {
            return nil
        }
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases/\(botAlias.urlPercentEncoding())/channels/\(name.urlPercentEncoding())"
    }
}

extension GetBotChannelAssociationsInput {

    static func urlPathProvider(_ value: GetBotChannelAssociationsInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let botAlias = value.botAlias else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases/\(botAlias.urlPercentEncoding())/channels"
    }
}

extension GetBotChannelAssociationsInput {

    static func queryItemProvider(_ value: GetBotChannelAssociationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nameContains = value.nameContains {
            let nameContainsQueryItem = Smithy.URIQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            items.append(nameContainsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetBotsInput {

    static func urlPathProvider(_ value: GetBotsInput) -> Swift.String? {
        return "/bots"
    }
}

extension GetBotsInput {

    static func queryItemProvider(_ value: GetBotsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nameContains = value.nameContains {
            let nameContainsQueryItem = Smithy.URIQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            items.append(nameContainsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetBotVersionsInput {

    static func urlPathProvider(_ value: GetBotVersionsInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(name.urlPercentEncoding())/versions"
    }
}

extension GetBotVersionsInput {

    static func queryItemProvider(_ value: GetBotVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetBuiltinIntentInput {

    static func urlPathProvider(_ value: GetBuiltinIntentInput) -> Swift.String? {
        guard let signature = value.signature else {
            return nil
        }
        return "/builtins/intents/\(signature.urlPercentEncoding())"
    }
}

extension GetBuiltinIntentsInput {

    static func urlPathProvider(_ value: GetBuiltinIntentsInput) -> Swift.String? {
        return "/builtins/intents"
    }
}

extension GetBuiltinIntentsInput {

    static func queryItemProvider(_ value: GetBuiltinIntentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let signatureContains = value.signatureContains {
            let signatureContainsQueryItem = Smithy.URIQueryItem(name: "signatureContains".urlPercentEncoding(), value: Swift.String(signatureContains).urlPercentEncoding())
            items.append(signatureContainsQueryItem)
        }
        if let locale = value.locale {
            let localeQueryItem = Smithy.URIQueryItem(name: "locale".urlPercentEncoding(), value: Swift.String(locale.rawValue).urlPercentEncoding())
            items.append(localeQueryItem)
        }
        return items
    }
}

extension GetBuiltinSlotTypesInput {

    static func urlPathProvider(_ value: GetBuiltinSlotTypesInput) -> Swift.String? {
        return "/builtins/slottypes"
    }
}

extension GetBuiltinSlotTypesInput {

    static func queryItemProvider(_ value: GetBuiltinSlotTypesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let signatureContains = value.signatureContains {
            let signatureContainsQueryItem = Smithy.URIQueryItem(name: "signatureContains".urlPercentEncoding(), value: Swift.String(signatureContains).urlPercentEncoding())
            items.append(signatureContainsQueryItem)
        }
        if let locale = value.locale {
            let localeQueryItem = Smithy.URIQueryItem(name: "locale".urlPercentEncoding(), value: Swift.String(locale.rawValue).urlPercentEncoding())
            items.append(localeQueryItem)
        }
        return items
    }
}

extension GetExportInput {

    static func urlPathProvider(_ value: GetExportInput) -> Swift.String? {
        return "/exports"
    }
}

extension GetExportInput {

    static func queryItemProvider(_ value: GetExportInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let exportType = value.exportType else {
            let message = "Creating a URL Query Item failed. exportType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let exportTypeQueryItem = Smithy.URIQueryItem(name: "exportType".urlPercentEncoding(), value: Swift.String(exportType.rawValue).urlPercentEncoding())
        items.append(exportTypeQueryItem)
        guard let name = value.name else {
            let message = "Creating a URL Query Item failed. name is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
        items.append(nameQueryItem)
        guard let version = value.version else {
            let message = "Creating a URL Query Item failed. version is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let versionQueryItem = Smithy.URIQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
        items.append(versionQueryItem)
        guard let resourceType = value.resourceType else {
            let message = "Creating a URL Query Item failed. resourceType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceTypeQueryItem = Smithy.URIQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType.rawValue).urlPercentEncoding())
        items.append(resourceTypeQueryItem)
        return items
    }
}

extension GetImportInput {

    static func urlPathProvider(_ value: GetImportInput) -> Swift.String? {
        guard let importId = value.importId else {
            return nil
        }
        return "/imports/\(importId.urlPercentEncoding())"
    }
}

extension GetIntentInput {

    static func urlPathProvider(_ value: GetIntentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let version = value.version else {
            return nil
        }
        return "/intents/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
    }
}

extension GetIntentsInput {

    static func urlPathProvider(_ value: GetIntentsInput) -> Swift.String? {
        return "/intents"
    }
}

extension GetIntentsInput {

    static func queryItemProvider(_ value: GetIntentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nameContains = value.nameContains {
            let nameContainsQueryItem = Smithy.URIQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            items.append(nameContainsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetIntentVersionsInput {

    static func urlPathProvider(_ value: GetIntentVersionsInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/intents/\(name.urlPercentEncoding())/versions"
    }
}

extension GetIntentVersionsInput {

    static func queryItemProvider(_ value: GetIntentVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetMigrationInput {

    static func urlPathProvider(_ value: GetMigrationInput) -> Swift.String? {
        guard let migrationId = value.migrationId else {
            return nil
        }
        return "/migrations/\(migrationId.urlPercentEncoding())"
    }
}

extension GetMigrationsInput {

    static func urlPathProvider(_ value: GetMigrationsInput) -> Swift.String? {
        return "/migrations"
    }
}

extension GetMigrationsInput {

    static func queryItemProvider(_ value: GetMigrationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let v1BotNameContains = value.v1BotNameContains {
            let v1BotNameContainsQueryItem = Smithy.URIQueryItem(name: "v1BotNameContains".urlPercentEncoding(), value: Swift.String(v1BotNameContains).urlPercentEncoding())
            items.append(v1BotNameContainsQueryItem)
        }
        if let sortByOrder = value.sortByOrder {
            let sortByOrderQueryItem = Smithy.URIQueryItem(name: "sortByOrder".urlPercentEncoding(), value: Swift.String(sortByOrder.rawValue).urlPercentEncoding())
            items.append(sortByOrderQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let migrationStatusEquals = value.migrationStatusEquals {
            let migrationStatusEqualsQueryItem = Smithy.URIQueryItem(name: "migrationStatusEquals".urlPercentEncoding(), value: Swift.String(migrationStatusEquals.rawValue).urlPercentEncoding())
            items.append(migrationStatusEqualsQueryItem)
        }
        if let sortByAttribute = value.sortByAttribute {
            let sortByAttributeQueryItem = Smithy.URIQueryItem(name: "sortByAttribute".urlPercentEncoding(), value: Swift.String(sortByAttribute.rawValue).urlPercentEncoding())
            items.append(sortByAttributeQueryItem)
        }
        return items
    }
}

extension GetSlotTypeInput {

    static func urlPathProvider(_ value: GetSlotTypeInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let version = value.version else {
            return nil
        }
        return "/slottypes/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
    }
}

extension GetSlotTypesInput {

    static func urlPathProvider(_ value: GetSlotTypesInput) -> Swift.String? {
        return "/slottypes"
    }
}

extension GetSlotTypesInput {

    static func queryItemProvider(_ value: GetSlotTypesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nameContains = value.nameContains {
            let nameContainsQueryItem = Smithy.URIQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            items.append(nameContainsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetSlotTypeVersionsInput {

    static func urlPathProvider(_ value: GetSlotTypeVersionsInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/slottypes/\(name.urlPercentEncoding())/versions"
    }
}

extension GetSlotTypeVersionsInput {

    static func queryItemProvider(_ value: GetSlotTypeVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetUtterancesViewInput {

    static func urlPathProvider(_ value: GetUtterancesViewInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/utterances"
    }
}

extension GetUtterancesViewInput {

    static func queryItemProvider(_ value: GetUtterancesViewInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "view", value: "aggregation"))
        guard let statusType = value.statusType else {
            let message = "Creating a URL Query Item failed. statusType is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let statusTypeQueryItem = Smithy.URIQueryItem(name: "status_type".urlPercentEncoding(), value: Swift.String(statusType.rawValue).urlPercentEncoding())
        items.append(statusTypeQueryItem)
        guard let botVersions = value.botVersions else {
            let message = "Creating a URL Query Item failed. botVersions is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        botVersions.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "bot_versions".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PutBotInput {

    static func urlPathProvider(_ value: PutBotInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(name.urlPercentEncoding())/versions/$LATEST"
    }
}

extension PutBotAliasInput {

    static func urlPathProvider(_ value: PutBotAliasInput) -> Swift.String? {
        guard let botName = value.botName else {
            return nil
        }
        guard let name = value.name else {
            return nil
        }
        return "/bots/\(botName.urlPercentEncoding())/aliases/\(name.urlPercentEncoding())"
    }
}

extension PutIntentInput {

    static func urlPathProvider(_ value: PutIntentInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/intents/\(name.urlPercentEncoding())/versions/$LATEST"
    }
}

extension PutSlotTypeInput {

    static func urlPathProvider(_ value: PutSlotTypeInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/slottypes/\(name.urlPercentEncoding())/versions/$LATEST"
    }
}

extension StartImportInput {

    static func urlPathProvider(_ value: StartImportInput) -> Swift.String? {
        return "/imports"
    }
}

extension StartMigrationInput {

    static func urlPathProvider(_ value: StartMigrationInput) -> Swift.String? {
        return "/migrations"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension CreateBotVersionInput {

    static func write(value: CreateBotVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["checksum"].write(value.checksum)
    }
}

extension CreateIntentVersionInput {

    static func write(value: CreateIntentVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["checksum"].write(value.checksum)
    }
}

extension CreateSlotTypeVersionInput {

    static func write(value: CreateSlotTypeVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["checksum"].write(value.checksum)
    }
}

extension PutBotInput {

    static func write(value: PutBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["abortStatement"].write(value.abortStatement, with: LexModelBuildingClientTypes.Statement.write(value:to:))
        try writer["checksum"].write(value.checksum)
        try writer["childDirected"].write(value.childDirected)
        try writer["clarificationPrompt"].write(value.clarificationPrompt, with: LexModelBuildingClientTypes.Prompt.write(value:to:))
        try writer["createVersion"].write(value.createVersion)
        try writer["description"].write(value.description)
        try writer["detectSentiment"].write(value.detectSentiment)
        try writer["enableModelImprovements"].write(value.enableModelImprovements)
        try writer["idleSessionTTLInSeconds"].write(value.idleSessionTTLInSeconds)
        try writer["intents"].writeList(value.intents, memberWritingClosure: LexModelBuildingClientTypes.Intent.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["locale"].write(value.locale)
        try writer["nluIntentConfidenceThreshold"].write(value.nluIntentConfidenceThreshold)
        try writer["processBehavior"].write(value.processBehavior)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LexModelBuildingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["voiceId"].write(value.voiceId)
    }
}

extension PutBotAliasInput {

    static func write(value: PutBotAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["botVersion"].write(value.botVersion)
        try writer["checksum"].write(value.checksum)
        try writer["conversationLogs"].write(value.conversationLogs, with: LexModelBuildingClientTypes.ConversationLogsRequest.write(value:to:))
        try writer["description"].write(value.description)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LexModelBuildingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutIntentInput {

    static func write(value: PutIntentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["checksum"].write(value.checksum)
        try writer["conclusionStatement"].write(value.conclusionStatement, with: LexModelBuildingClientTypes.Statement.write(value:to:))
        try writer["confirmationPrompt"].write(value.confirmationPrompt, with: LexModelBuildingClientTypes.Prompt.write(value:to:))
        try writer["createVersion"].write(value.createVersion)
        try writer["description"].write(value.description)
        try writer["dialogCodeHook"].write(value.dialogCodeHook, with: LexModelBuildingClientTypes.CodeHook.write(value:to:))
        try writer["followUpPrompt"].write(value.followUpPrompt, with: LexModelBuildingClientTypes.FollowUpPrompt.write(value:to:))
        try writer["fulfillmentActivity"].write(value.fulfillmentActivity, with: LexModelBuildingClientTypes.FulfillmentActivity.write(value:to:))
        try writer["inputContexts"].writeList(value.inputContexts, memberWritingClosure: LexModelBuildingClientTypes.InputContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["kendraConfiguration"].write(value.kendraConfiguration, with: LexModelBuildingClientTypes.KendraConfiguration.write(value:to:))
        try writer["outputContexts"].writeList(value.outputContexts, memberWritingClosure: LexModelBuildingClientTypes.OutputContext.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["parentIntentSignature"].write(value.parentIntentSignature)
        try writer["rejectionStatement"].write(value.rejectionStatement, with: LexModelBuildingClientTypes.Statement.write(value:to:))
        try writer["sampleUtterances"].writeList(value.sampleUtterances, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["slots"].writeList(value.slots, memberWritingClosure: LexModelBuildingClientTypes.Slot.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutSlotTypeInput {

    static func write(value: PutSlotTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["checksum"].write(value.checksum)
        try writer["createVersion"].write(value.createVersion)
        try writer["description"].write(value.description)
        try writer["enumerationValues"].writeList(value.enumerationValues, memberWritingClosure: LexModelBuildingClientTypes.EnumerationValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["parentSlotTypeSignature"].write(value.parentSlotTypeSignature)
        try writer["slotTypeConfigurations"].writeList(value.slotTypeConfigurations, memberWritingClosure: LexModelBuildingClientTypes.SlotTypeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["valueSelectionStrategy"].write(value.valueSelectionStrategy)
    }
}

extension StartImportInput {

    static func write(value: StartImportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mergeStrategy"].write(value.mergeStrategy)
        try writer["payload"].write(value.payload)
        try writer["resourceType"].write(value.resourceType)
        try writer["tags"].writeList(value.tags, memberWritingClosure: LexModelBuildingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartMigrationInput {

    static func write(value: StartMigrationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["migrationStrategy"].write(value.migrationStrategy)
        try writer["v1BotName"].write(value.v1BotName)
        try writer["v1BotVersion"].write(value.v1BotVersion)
        try writer["v2BotName"].write(value.v2BotName)
        try writer["v2BotRole"].write(value.v2BotRole)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeList(value.tags, memberWritingClosure: LexModelBuildingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateBotVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBotVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBotVersionOutput()
        value.abortStatement = try reader["abortStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.checksum = try reader["checksum"].readIfPresent()
        value.childDirected = try reader["childDirected"].readIfPresent()
        value.clarificationPrompt = try reader["clarificationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.detectSentiment = try reader["detectSentiment"].readIfPresent()
        value.enableModelImprovements = try reader["enableModelImprovements"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.intents = try reader["intents"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Intent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.locale = try reader["locale"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.voiceId = try reader["voiceId"].readIfPresent()
        return value
    }
}

extension CreateIntentVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIntentVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIntentVersionOutput()
        value.checksum = try reader["checksum"].readIfPresent()
        value.conclusionStatement = try reader["conclusionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.confirmationPrompt = try reader["confirmationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.dialogCodeHook = try reader["dialogCodeHook"].readIfPresent(with: LexModelBuildingClientTypes.CodeHook.read(from:))
        value.followUpPrompt = try reader["followUpPrompt"].readIfPresent(with: LexModelBuildingClientTypes.FollowUpPrompt.read(from:))
        value.fulfillmentActivity = try reader["fulfillmentActivity"].readIfPresent(with: LexModelBuildingClientTypes.FulfillmentActivity.read(from:))
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelBuildingClientTypes.KendraConfiguration.read(from:))
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.rejectionStatement = try reader["rejectionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.slots = try reader["slots"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Slot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension CreateSlotTypeVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSlotTypeVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSlotTypeVersionOutput()
        value.checksum = try reader["checksum"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.enumerationValues = try reader["enumerationValues"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.EnumerationValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.slotTypeConfigurations = try reader["slotTypeConfigurations"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.SlotTypeConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.valueSelectionStrategy = try reader["valueSelectionStrategy"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension DeleteBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotOutput {
        return DeleteBotOutput()
    }
}

extension DeleteBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotAliasOutput {
        return DeleteBotAliasOutput()
    }
}

extension DeleteBotChannelAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotChannelAssociationOutput {
        return DeleteBotChannelAssociationOutput()
    }
}

extension DeleteBotVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBotVersionOutput {
        return DeleteBotVersionOutput()
    }
}

extension DeleteIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIntentOutput {
        return DeleteIntentOutput()
    }
}

extension DeleteIntentVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIntentVersionOutput {
        return DeleteIntentVersionOutput()
    }
}

extension DeleteSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlotTypeOutput {
        return DeleteSlotTypeOutput()
    }
}

extension DeleteSlotTypeVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlotTypeVersionOutput {
        return DeleteSlotTypeVersionOutput()
    }
}

extension DeleteUtterancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUtterancesOutput {
        return DeleteUtterancesOutput()
    }
}

extension GetBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotOutput()
        value.abortStatement = try reader["abortStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.checksum = try reader["checksum"].readIfPresent()
        value.childDirected = try reader["childDirected"].readIfPresent()
        value.clarificationPrompt = try reader["clarificationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.detectSentiment = try reader["detectSentiment"].readIfPresent()
        value.enableModelImprovements = try reader["enableModelImprovements"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.intents = try reader["intents"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Intent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.locale = try reader["locale"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nluIntentConfidenceThreshold = try reader["nluIntentConfidenceThreshold"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.voiceId = try reader["voiceId"].readIfPresent()
        return value
    }
}

extension GetBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotAliasOutput()
        value.botName = try reader["botName"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.checksum = try reader["checksum"].readIfPresent()
        value.conversationLogs = try reader["conversationLogs"].readIfPresent(with: LexModelBuildingClientTypes.ConversationLogsResponse.read(from:))
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension GetBotAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotAliasesOutput()
        value.botAliases = try reader["BotAliases"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BotAliasMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetBotChannelAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotChannelAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotChannelAssociationOutput()
        value.botAlias = try reader["botAlias"].readIfPresent()
        value.botConfiguration = try reader["botConfiguration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.botName = try reader["botName"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension GetBotChannelAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotChannelAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotChannelAssociationsOutput()
        value.botChannelAssociations = try reader["botChannelAssociations"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BotChannelAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetBotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotsOutput()
        value.bots = try reader["bots"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BotMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetBotVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBotVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBotVersionsOutput()
        value.bots = try reader["bots"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BotMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetBuiltinIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBuiltinIntentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBuiltinIntentOutput()
        value.signature = try reader["signature"].readIfPresent()
        value.slots = try reader["slots"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BuiltinIntentSlot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedLocales = try reader["supportedLocales"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LexModelBuildingClientTypes.Locale>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetBuiltinIntentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBuiltinIntentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBuiltinIntentsOutput()
        value.intents = try reader["intents"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BuiltinIntentMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetBuiltinSlotTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBuiltinSlotTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBuiltinSlotTypesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slotTypes = try reader["slotTypes"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.BuiltinSlotTypeMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExportOutput()
        value.exportStatus = try reader["exportStatus"].readIfPresent()
        value.exportType = try reader["exportType"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension GetImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetImportOutput()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["failureReason"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.importId = try reader["importId"].readIfPresent()
        value.importStatus = try reader["importStatus"].readIfPresent()
        value.mergeStrategy = try reader["mergeStrategy"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        return value
    }
}

extension GetIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIntentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIntentOutput()
        value.checksum = try reader["checksum"].readIfPresent()
        value.conclusionStatement = try reader["conclusionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.confirmationPrompt = try reader["confirmationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.dialogCodeHook = try reader["dialogCodeHook"].readIfPresent(with: LexModelBuildingClientTypes.CodeHook.read(from:))
        value.followUpPrompt = try reader["followUpPrompt"].readIfPresent(with: LexModelBuildingClientTypes.FollowUpPrompt.read(from:))
        value.fulfillmentActivity = try reader["fulfillmentActivity"].readIfPresent(with: LexModelBuildingClientTypes.FulfillmentActivity.read(from:))
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelBuildingClientTypes.KendraConfiguration.read(from:))
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.rejectionStatement = try reader["rejectionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.slots = try reader["slots"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Slot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension GetIntentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIntentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIntentsOutput()
        value.intents = try reader["intents"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.IntentMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetIntentVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIntentVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIntentVersionsOutput()
        value.intents = try reader["intents"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.IntentMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetMigrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMigrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMigrationOutput()
        value.alerts = try reader["alerts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.MigrationAlert.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.migrationId = try reader["migrationId"].readIfPresent()
        value.migrationStatus = try reader["migrationStatus"].readIfPresent()
        value.migrationStrategy = try reader["migrationStrategy"].readIfPresent()
        value.migrationTimestamp = try reader["migrationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.v1BotLocale = try reader["v1BotLocale"].readIfPresent()
        value.v1BotName = try reader["v1BotName"].readIfPresent()
        value.v1BotVersion = try reader["v1BotVersion"].readIfPresent()
        value.v2BotId = try reader["v2BotId"].readIfPresent()
        value.v2BotRole = try reader["v2BotRole"].readIfPresent()
        return value
    }
}

extension GetMigrationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMigrationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMigrationsOutput()
        value.migrationSummaries = try reader["migrationSummaries"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.MigrationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSlotTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSlotTypeOutput()
        value.checksum = try reader["checksum"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.enumerationValues = try reader["enumerationValues"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.EnumerationValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.slotTypeConfigurations = try reader["slotTypeConfigurations"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.SlotTypeConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.valueSelectionStrategy = try reader["valueSelectionStrategy"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension GetSlotTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSlotTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSlotTypesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slotTypes = try reader["slotTypes"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.SlotTypeMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetSlotTypeVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSlotTypeVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSlotTypeVersionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slotTypes = try reader["slotTypes"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.SlotTypeMetadata.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetUtterancesViewOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUtterancesViewOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUtterancesViewOutput()
        value.botName = try reader["botName"].readIfPresent()
        value.utterances = try reader["utterances"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.UtteranceList.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutBotOutput()
        value.abortStatement = try reader["abortStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.checksum = try reader["checksum"].readIfPresent()
        value.childDirected = try reader["childDirected"].readIfPresent()
        value.clarificationPrompt = try reader["clarificationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.createVersion = try reader["createVersion"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.detectSentiment = try reader["detectSentiment"].readIfPresent()
        value.enableModelImprovements = try reader["enableModelImprovements"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.idleSessionTTLInSeconds = try reader["idleSessionTTLInSeconds"].readIfPresent()
        value.intents = try reader["intents"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Intent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.locale = try reader["locale"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.nluIntentConfidenceThreshold = try reader["nluIntentConfidenceThreshold"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.version = try reader["version"].readIfPresent()
        value.voiceId = try reader["voiceId"].readIfPresent()
        return value
    }
}

extension PutBotAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBotAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutBotAliasOutput()
        value.botName = try reader["botName"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.checksum = try reader["checksum"].readIfPresent()
        value.conversationLogs = try reader["conversationLogs"].readIfPresent(with: LexModelBuildingClientTypes.ConversationLogsResponse.read(from:))
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutIntentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutIntentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutIntentOutput()
        value.checksum = try reader["checksum"].readIfPresent()
        value.conclusionStatement = try reader["conclusionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.confirmationPrompt = try reader["confirmationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.createVersion = try reader["createVersion"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.dialogCodeHook = try reader["dialogCodeHook"].readIfPresent(with: LexModelBuildingClientTypes.CodeHook.read(from:))
        value.followUpPrompt = try reader["followUpPrompt"].readIfPresent(with: LexModelBuildingClientTypes.FollowUpPrompt.read(from:))
        value.fulfillmentActivity = try reader["fulfillmentActivity"].readIfPresent(with: LexModelBuildingClientTypes.FulfillmentActivity.read(from:))
        value.inputContexts = try reader["inputContexts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.InputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.kendraConfiguration = try reader["kendraConfiguration"].readIfPresent(with: LexModelBuildingClientTypes.KendraConfiguration.read(from:))
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.outputContexts = try reader["outputContexts"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.OutputContext.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentIntentSignature = try reader["parentIntentSignature"].readIfPresent()
        value.rejectionStatement = try reader["rejectionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.slots = try reader["slots"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Slot.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension PutSlotTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSlotTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutSlotTypeOutput()
        value.checksum = try reader["checksum"].readIfPresent()
        value.createVersion = try reader["createVersion"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.enumerationValues = try reader["enumerationValues"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.EnumerationValue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.parentSlotTypeSignature = try reader["parentSlotTypeSignature"].readIfPresent()
        value.slotTypeConfigurations = try reader["slotTypeConfigurations"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.SlotTypeConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.valueSelectionStrategy = try reader["valueSelectionStrategy"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension StartImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartImportOutput()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.importId = try reader["importId"].readIfPresent()
        value.importStatus = try reader["importStatus"].readIfPresent()
        value.mergeStrategy = try reader["mergeStrategy"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartMigrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMigrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMigrationOutput()
        value.migrationId = try reader["migrationId"].readIfPresent()
        value.migrationStrategy = try reader["migrationStrategy"].readIfPresent()
        value.migrationTimestamp = try reader["migrationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.v1BotLocale = try reader["v1BotLocale"].readIfPresent()
        value.v1BotName = try reader["v1BotName"].readIfPresent()
        value.v1BotVersion = try reader["v1BotVersion"].readIfPresent()
        value.v2BotId = try reader["v2BotId"].readIfPresent()
        value.v2BotRole = try reader["v2BotRole"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

enum CreateBotVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIntentVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSlotTypeVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotChannelAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBotVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIntentVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlotTypeVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUtterancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotChannelAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotChannelAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBotVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBuiltinIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBuiltinIntentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBuiltinSlotTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIntentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIntentVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMigrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMigrationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSlotTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSlotTypeVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUtterancesViewOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBotAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutIntentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSlotTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PreconditionFailedException": return try PreconditionFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMigrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = LimitExceededException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = retryAfterSecondsHeaderValue
        }
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PreconditionFailedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> PreconditionFailedException {
        let reader = baseError.errorBodyReader
        var value = PreconditionFailedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalFailureException {
        let reader = baseError.errorBodyReader
        var value = InternalFailureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.exampleReference = try reader["exampleReference"].readIfPresent(with: LexModelBuildingClientTypes.ResourceReference.read(from:))
        value.properties.referenceType = try reader["referenceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LexModelBuildingClientTypes.Intent {

    static func write(value: LexModelBuildingClientTypes.Intent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["intentName"].write(value.intentName)
        try writer["intentVersion"].write(value.intentVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.Intent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.Intent()
        value.intentName = try reader["intentName"].readIfPresent() ?? ""
        value.intentVersion = try reader["intentVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.Prompt {

    static func write(value: LexModelBuildingClientTypes.Prompt?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxAttempts"].write(value.maxAttempts)
        try writer["messages"].writeList(value.messages, memberWritingClosure: LexModelBuildingClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["responseCard"].write(value.responseCard)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.Prompt {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.Prompt()
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.maxAttempts = try reader["maxAttempts"].readIfPresent() ?? 0
        value.responseCard = try reader["responseCard"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.Message {

    static func write(value: LexModelBuildingClientTypes.Message?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["content"].write(value.content)
        try writer["contentType"].write(value.contentType)
        try writer["groupNumber"].write(value.groupNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.Message {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.Message()
        value.contentType = try reader["contentType"].readIfPresent() ?? .sdkUnknown("")
        value.content = try reader["content"].readIfPresent() ?? ""
        value.groupNumber = try reader["groupNumber"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.Statement {

    static func write(value: LexModelBuildingClientTypes.Statement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["messages"].writeList(value.messages, memberWritingClosure: LexModelBuildingClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["responseCard"].write(value.responseCard)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.Statement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.Statement()
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.responseCard = try reader["responseCard"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.Slot {

    static func write(value: LexModelBuildingClientTypes.Slot?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValueSpec"].write(value.defaultValueSpec, with: LexModelBuildingClientTypes.SlotDefaultValueSpec.write(value:to:))
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["obfuscationSetting"].write(value.obfuscationSetting)
        try writer["priority"].write(value.priority)
        try writer["responseCard"].write(value.responseCard)
        try writer["sampleUtterances"].writeList(value.sampleUtterances, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["slotConstraint"].write(value.slotConstraint)
        try writer["slotType"].write(value.slotType)
        try writer["slotTypeVersion"].write(value.slotTypeVersion)
        try writer["valueElicitationPrompt"].write(value.valueElicitationPrompt, with: LexModelBuildingClientTypes.Prompt.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.Slot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.Slot()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.slotConstraint = try reader["slotConstraint"].readIfPresent() ?? .sdkUnknown("")
        value.slotType = try reader["slotType"].readIfPresent()
        value.slotTypeVersion = try reader["slotTypeVersion"].readIfPresent()
        value.valueElicitationPrompt = try reader["valueElicitationPrompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.priority = try reader["priority"].readIfPresent()
        value.sampleUtterances = try reader["sampleUtterances"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.responseCard = try reader["responseCard"].readIfPresent()
        value.obfuscationSetting = try reader["obfuscationSetting"].readIfPresent()
        value.defaultValueSpec = try reader["defaultValueSpec"].readIfPresent(with: LexModelBuildingClientTypes.SlotDefaultValueSpec.read(from:))
        return value
    }
}

extension LexModelBuildingClientTypes.SlotDefaultValueSpec {

    static func write(value: LexModelBuildingClientTypes.SlotDefaultValueSpec?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValueList"].writeList(value.defaultValueList, memberWritingClosure: LexModelBuildingClientTypes.SlotDefaultValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.SlotDefaultValueSpec {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.SlotDefaultValueSpec()
        value.defaultValueList = try reader["defaultValueList"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.SlotDefaultValue.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension LexModelBuildingClientTypes.SlotDefaultValue {

    static func write(value: LexModelBuildingClientTypes.SlotDefaultValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValue"].write(value.defaultValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.SlotDefaultValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.SlotDefaultValue()
        value.defaultValue = try reader["defaultValue"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.FollowUpPrompt {

    static func write(value: LexModelBuildingClientTypes.FollowUpPrompt?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["prompt"].write(value.prompt, with: LexModelBuildingClientTypes.Prompt.write(value:to:))
        try writer["rejectionStatement"].write(value.rejectionStatement, with: LexModelBuildingClientTypes.Statement.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.FollowUpPrompt {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.FollowUpPrompt()
        value.prompt = try reader["prompt"].readIfPresent(with: LexModelBuildingClientTypes.Prompt.read(from:))
        value.rejectionStatement = try reader["rejectionStatement"].readIfPresent(with: LexModelBuildingClientTypes.Statement.read(from:))
        return value
    }
}

extension LexModelBuildingClientTypes.CodeHook {

    static func write(value: LexModelBuildingClientTypes.CodeHook?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["messageVersion"].write(value.messageVersion)
        try writer["uri"].write(value.uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.CodeHook {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.CodeHook()
        value.uri = try reader["uri"].readIfPresent() ?? ""
        value.messageVersion = try reader["messageVersion"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.FulfillmentActivity {

    static func write(value: LexModelBuildingClientTypes.FulfillmentActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codeHook"].write(value.codeHook, with: LexModelBuildingClientTypes.CodeHook.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.FulfillmentActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.FulfillmentActivity()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.codeHook = try reader["codeHook"].readIfPresent(with: LexModelBuildingClientTypes.CodeHook.read(from:))
        return value
    }
}

extension LexModelBuildingClientTypes.KendraConfiguration {

    static func write(value: LexModelBuildingClientTypes.KendraConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kendraIndex"].write(value.kendraIndex)
        try writer["queryFilterString"].write(value.queryFilterString)
        try writer["role"].write(value.role)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.KendraConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.KendraConfiguration()
        value.kendraIndex = try reader["kendraIndex"].readIfPresent() ?? ""
        value.queryFilterString = try reader["queryFilterString"].readIfPresent()
        value.role = try reader["role"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.InputContext {

    static func write(value: LexModelBuildingClientTypes.InputContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.InputContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.InputContext()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.OutputContext {

    static func write(value: LexModelBuildingClientTypes.OutputContext?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["timeToLiveInSeconds"].write(value.timeToLiveInSeconds)
        try writer["turnsToLive"].write(value.turnsToLive)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.OutputContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.OutputContext()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.timeToLiveInSeconds = try reader["timeToLiveInSeconds"].readIfPresent() ?? 0
        value.turnsToLive = try reader["turnsToLive"].readIfPresent() ?? 0
        return value
    }
}

extension LexModelBuildingClientTypes.EnumerationValue {

    static func write(value: LexModelBuildingClientTypes.EnumerationValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["synonyms"].writeList(value.synonyms, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.EnumerationValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.EnumerationValue()
        value.value = try reader["value"].readIfPresent() ?? ""
        value.synonyms = try reader["synonyms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelBuildingClientTypes.SlotTypeConfiguration {

    static func write(value: LexModelBuildingClientTypes.SlotTypeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["regexConfiguration"].write(value.regexConfiguration, with: LexModelBuildingClientTypes.SlotTypeRegexConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.SlotTypeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.SlotTypeConfiguration()
        value.regexConfiguration = try reader["regexConfiguration"].readIfPresent(with: LexModelBuildingClientTypes.SlotTypeRegexConfiguration.read(from:))
        return value
    }
}

extension LexModelBuildingClientTypes.SlotTypeRegexConfiguration {

    static func write(value: LexModelBuildingClientTypes.SlotTypeRegexConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pattern"].write(value.pattern)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.SlotTypeRegexConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.SlotTypeRegexConfiguration()
        value.pattern = try reader["pattern"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.ConversationLogsResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.ConversationLogsResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.ConversationLogsResponse()
        value.logSettings = try reader["logSettings"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.LogSettingsResponse.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.iamRoleArn = try reader["iamRoleArn"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.LogSettingsResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.LogSettingsResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.LogSettingsResponse()
        value.logType = try reader["logType"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        value.resourcePrefix = try reader["resourcePrefix"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.BotAliasMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.BotAliasMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.BotAliasMetadata()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.botName = try reader["botName"].readIfPresent()
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.checksum = try reader["checksum"].readIfPresent()
        value.conversationLogs = try reader["conversationLogs"].readIfPresent(with: LexModelBuildingClientTypes.ConversationLogsResponse.read(from:))
        return value
    }
}

extension LexModelBuildingClientTypes.BotChannelAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.BotChannelAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.BotChannelAssociation()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.botAlias = try reader["botAlias"].readIfPresent()
        value.botName = try reader["botName"].readIfPresent()
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.type = try reader["type"].readIfPresent()
        value.botConfiguration = try reader["botConfiguration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.BotMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.BotMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.BotMetadata()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.BuiltinIntentSlot {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.BuiltinIntentSlot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.BuiltinIntentSlot()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.BuiltinIntentMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.BuiltinIntentMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.BuiltinIntentMetadata()
        value.signature = try reader["signature"].readIfPresent()
        value.supportedLocales = try reader["supportedLocales"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LexModelBuildingClientTypes.Locale>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelBuildingClientTypes.BuiltinSlotTypeMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.BuiltinSlotTypeMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.BuiltinSlotTypeMetadata()
        value.signature = try reader["signature"].readIfPresent()
        value.supportedLocales = try reader["supportedLocales"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<LexModelBuildingClientTypes.Locale>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelBuildingClientTypes.IntentMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.IntentMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.IntentMetadata()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.MigrationAlert {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.MigrationAlert {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.MigrationAlert()
        value.type = try reader["type"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.details = try reader["details"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.referenceURLs = try reader["referenceURLs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelBuildingClientTypes.MigrationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.MigrationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.MigrationSummary()
        value.migrationId = try reader["migrationId"].readIfPresent()
        value.v1BotName = try reader["v1BotName"].readIfPresent()
        value.v1BotVersion = try reader["v1BotVersion"].readIfPresent()
        value.v1BotLocale = try reader["v1BotLocale"].readIfPresent()
        value.v2BotId = try reader["v2BotId"].readIfPresent()
        value.v2BotRole = try reader["v2BotRole"].readIfPresent()
        value.migrationStatus = try reader["migrationStatus"].readIfPresent()
        value.migrationStrategy = try reader["migrationStrategy"].readIfPresent()
        value.migrationTimestamp = try reader["migrationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelBuildingClientTypes.SlotTypeMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.SlotTypeMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.SlotTypeMetadata()
        value.name = try reader["name"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.lastUpdatedDate = try reader["lastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdDate = try reader["createdDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.UtteranceList {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.UtteranceList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.UtteranceList()
        value.botVersion = try reader["botVersion"].readIfPresent()
        value.utterances = try reader["utterances"].readListIfPresent(memberReadingClosure: LexModelBuildingClientTypes.UtteranceData.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension LexModelBuildingClientTypes.UtteranceData {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.UtteranceData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.UtteranceData()
        value.utteranceString = try reader["utteranceString"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.distinctUsers = try reader["distinctUsers"].readIfPresent()
        value.firstUtteredDate = try reader["firstUtteredDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUtteredDate = try reader["lastUtteredDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension LexModelBuildingClientTypes.Tag {

    static func write(value: LexModelBuildingClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.Tag()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension LexModelBuildingClientTypes.ResourceReference {

    static func read(from reader: SmithyJSON.Reader) throws -> LexModelBuildingClientTypes.ResourceReference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = LexModelBuildingClientTypes.ResourceReference()
        value.name = try reader["name"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension LexModelBuildingClientTypes.ConversationLogsRequest {

    static func write(value: LexModelBuildingClientTypes.ConversationLogsRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["iamRoleArn"].write(value.iamRoleArn)
        try writer["logSettings"].writeList(value.logSettings, memberWritingClosure: LexModelBuildingClientTypes.LogSettingsRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension LexModelBuildingClientTypes.LogSettingsRequest {

    static func write(value: LexModelBuildingClientTypes.LogSettingsRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination)
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
        try writer["logType"].write(value.logType)
        try writer["resourceArn"].write(value.resourceArn)
    }
}

public enum LexModelBuildingClientTypes {}
