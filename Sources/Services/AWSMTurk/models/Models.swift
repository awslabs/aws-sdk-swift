// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AcceptQualificationRequestInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integerValue = "IntegerValue"
        case qualificationRequestId = "QualificationRequestId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let integerValue = self.integerValue {
            try encodeContainer.encode(integerValue, forKey: .integerValue)
        }
        if let qualificationRequestId = self.qualificationRequestId {
            try encodeContainer.encode(qualificationRequestId, forKey: .qualificationRequestId)
        }
    }
}

extension AcceptQualificationRequestInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AcceptQualificationRequestInput: Swift.Equatable {
    /// The value of the Qualification. You can omit this value if you are using the presence or absence of the Qualification as the basis for a HIT requirement.
    public var integerValue: Swift.Int?
    /// The ID of the Qualification request, as returned by the GetQualificationRequests operation.
    /// This member is required.
    public var qualificationRequestId: Swift.String?

    public init (
        integerValue: Swift.Int? = nil,
        qualificationRequestId: Swift.String? = nil
    )
    {
        self.integerValue = integerValue
        self.qualificationRequestId = qualificationRequestId
    }
}

struct AcceptQualificationRequestInputBody: Swift.Equatable {
    let qualificationRequestId: Swift.String?
    let integerValue: Swift.Int?
}

extension AcceptQualificationRequestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integerValue = "IntegerValue"
        case qualificationRequestId = "QualificationRequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationRequestId)
        qualificationRequestId = qualificationRequestIdDecoded
        let integerValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .integerValue)
        integerValue = integerValueDecoded
    }
}

extension AcceptQualificationRequestOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptQualificationRequestOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcceptQualificationRequestOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptQualificationRequestOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AcceptQualificationRequestOutputResponse: Swift.Equatable {

    public init () { }
}

extension ApproveAssignmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case overrideRejection = "OverrideRejection"
        case requesterFeedback = "RequesterFeedback"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let overrideRejection = self.overrideRejection {
            try encodeContainer.encode(overrideRejection, forKey: .overrideRejection)
        }
        if let requesterFeedback = self.requesterFeedback {
            try encodeContainer.encode(requesterFeedback, forKey: .requesterFeedback)
        }
    }
}

extension ApproveAssignmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ApproveAssignmentInput: Swift.Equatable {
    /// The ID of the assignment. The assignment must correspond to a HIT created by the Requester.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// A flag indicating that an assignment should be approved even if it was previously rejected. Defaults to False.
    public var overrideRejection: Swift.Bool?
    /// A message for the Worker, which the Worker can see in the Status section of the web site.
    public var requesterFeedback: Swift.String?

    public init (
        assignmentId: Swift.String? = nil,
        overrideRejection: Swift.Bool? = nil,
        requesterFeedback: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.overrideRejection = overrideRejection
        self.requesterFeedback = requesterFeedback
    }
}

struct ApproveAssignmentInputBody: Swift.Equatable {
    let assignmentId: Swift.String?
    let requesterFeedback: Swift.String?
    let overrideRejection: Swift.Bool?
}

extension ApproveAssignmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case overrideRejection = "OverrideRejection"
        case requesterFeedback = "RequesterFeedback"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let requesterFeedbackDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterFeedback)
        requesterFeedback = requesterFeedbackDecoded
        let overrideRejectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .overrideRejection)
        overrideRejection = overrideRejectionDecoded
    }
}

extension ApproveAssignmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ApproveAssignmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ApproveAssignmentOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ApproveAssignmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ApproveAssignmentOutputResponse: Swift.Equatable {

    public init () { }
}

extension MTurkClientTypes.Assignment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptTime = "AcceptTime"
        case answer = "Answer"
        case approvalTime = "ApprovalTime"
        case assignmentId = "AssignmentId"
        case assignmentStatus = "AssignmentStatus"
        case autoApprovalTime = "AutoApprovalTime"
        case deadline = "Deadline"
        case hitId = "HITId"
        case rejectionTime = "RejectionTime"
        case requesterFeedback = "RequesterFeedback"
        case submitTime = "SubmitTime"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptTime = self.acceptTime {
            try encodeContainer.encodeTimestamp(acceptTime, format: .epochSeconds, forKey: .acceptTime)
        }
        if let answer = self.answer {
            try encodeContainer.encode(answer, forKey: .answer)
        }
        if let approvalTime = self.approvalTime {
            try encodeContainer.encodeTimestamp(approvalTime, format: .epochSeconds, forKey: .approvalTime)
        }
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let assignmentStatus = self.assignmentStatus {
            try encodeContainer.encode(assignmentStatus.rawValue, forKey: .assignmentStatus)
        }
        if let autoApprovalTime = self.autoApprovalTime {
            try encodeContainer.encodeTimestamp(autoApprovalTime, format: .epochSeconds, forKey: .autoApprovalTime)
        }
        if let deadline = self.deadline {
            try encodeContainer.encodeTimestamp(deadline, format: .epochSeconds, forKey: .deadline)
        }
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let rejectionTime = self.rejectionTime {
            try encodeContainer.encodeTimestamp(rejectionTime, format: .epochSeconds, forKey: .rejectionTime)
        }
        if let requesterFeedback = self.requesterFeedback {
            try encodeContainer.encode(requesterFeedback, forKey: .requesterFeedback)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let assignmentStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.AssignmentStatus.self, forKey: .assignmentStatus)
        assignmentStatus = assignmentStatusDecoded
        let autoApprovalTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .autoApprovalTime)
        autoApprovalTime = autoApprovalTimeDecoded
        let acceptTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .acceptTime)
        acceptTime = acceptTimeDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let approvalTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .approvalTime)
        approvalTime = approvalTimeDecoded
        let rejectionTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .rejectionTime)
        rejectionTime = rejectionTimeDecoded
        let deadlineDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deadline)
        deadline = deadlineDecoded
        let answerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .answer)
        answer = answerDecoded
        let requesterFeedbackDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterFeedback)
        requesterFeedback = requesterFeedbackDecoded
    }
}

extension MTurkClientTypes {
    /// The Assignment data structure represents a single assignment of a HIT to a Worker. The assignment tracks the Worker's efforts to complete the HIT, and contains the results for later retrieval.
    public struct Assignment: Swift.Equatable {
        /// The date and time the Worker accepted the assignment.
        public var acceptTime: ClientRuntime.Date?
        /// The Worker's answers submitted for the HIT contained in a QuestionFormAnswers document, if the Worker provides an answer. If the Worker does not provide any answers, Answer may contain a QuestionFormAnswers document, or Answer may be empty.
        public var answer: Swift.String?
        /// If the Worker has submitted results and the Requester has approved the results, ApprovalTime is the date and time the Requester approved the results. This value is omitted from the assignment if the Requester has not yet approved the results.
        public var approvalTime: ClientRuntime.Date?
        /// A unique identifier for the assignment.
        public var assignmentId: Swift.String?
        /// The status of the assignment.
        public var assignmentStatus: MTurkClientTypes.AssignmentStatus?
        /// If results have been submitted, AutoApprovalTime is the date and time the results of the assignment results are considered Approved automatically if they have not already been explicitly approved or rejected by the Requester. This value is derived from the auto-approval delay specified by the Requester in the HIT. This value is omitted from the assignment if the Worker has not yet submitted results.
        public var autoApprovalTime: ClientRuntime.Date?
        /// The date and time of the deadline for the assignment. This value is derived from the deadline specification for the HIT and the date and time the Worker accepted the HIT.
        public var deadline: ClientRuntime.Date?
        /// The ID of the HIT.
        public var hitId: Swift.String?
        /// If the Worker has submitted results and the Requester has rejected the results, RejectionTime is the date and time the Requester rejected the results.
        public var rejectionTime: ClientRuntime.Date?
        /// The feedback string included with the call to the ApproveAssignment operation or the RejectAssignment operation, if the Requester approved or rejected the assignment and specified feedback.
        public var requesterFeedback: Swift.String?
        /// If the Worker has submitted results, SubmitTime is the date and time the assignment was submitted. This value is omitted from the assignment if the Worker has not yet submitted results.
        public var submitTime: ClientRuntime.Date?
        /// The ID of the Worker who accepted the HIT.
        public var workerId: Swift.String?

        public init (
            acceptTime: ClientRuntime.Date? = nil,
            answer: Swift.String? = nil,
            approvalTime: ClientRuntime.Date? = nil,
            assignmentId: Swift.String? = nil,
            assignmentStatus: MTurkClientTypes.AssignmentStatus? = nil,
            autoApprovalTime: ClientRuntime.Date? = nil,
            deadline: ClientRuntime.Date? = nil,
            hitId: Swift.String? = nil,
            rejectionTime: ClientRuntime.Date? = nil,
            requesterFeedback: Swift.String? = nil,
            submitTime: ClientRuntime.Date? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.acceptTime = acceptTime
            self.answer = answer
            self.approvalTime = approvalTime
            self.assignmentId = assignmentId
            self.assignmentStatus = assignmentStatus
            self.autoApprovalTime = autoApprovalTime
            self.deadline = deadline
            self.hitId = hitId
            self.rejectionTime = rejectionTime
            self.requesterFeedback = requesterFeedback
            self.submitTime = submitTime
            self.workerId = workerId
        }
    }

}

extension MTurkClientTypes {
    public enum AssignmentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case rejected
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignmentStatus] {
            return [
                .approved,
                .rejected,
                .submitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .rejected: return "Rejected"
            case .submitted: return "Submitted"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AssignmentStatus(rawValue: rawValue) ?? AssignmentStatus.sdkUnknown(rawValue)
        }
    }
}

extension AssociateQualificationWithWorkerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integerValue = "IntegerValue"
        case qualificationTypeId = "QualificationTypeId"
        case sendNotification = "SendNotification"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let integerValue = self.integerValue {
            try encodeContainer.encode(integerValue, forKey: .integerValue)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let sendNotification = self.sendNotification {
            try encodeContainer.encode(sendNotification, forKey: .sendNotification)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }
}

extension AssociateQualificationWithWorkerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateQualificationWithWorkerInput: Swift.Equatable {
    /// The value of the Qualification to assign.
    public var integerValue: Swift.Int?
    /// The ID of the Qualification type to use for the assigned Qualification.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default.
    public var sendNotification: Swift.Bool?
    /// The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests.
    /// This member is required.
    public var workerId: Swift.String?

    public init (
        integerValue: Swift.Int? = nil,
        qualificationTypeId: Swift.String? = nil,
        sendNotification: Swift.Bool? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.integerValue = integerValue
        self.qualificationTypeId = qualificationTypeId
        self.sendNotification = sendNotification
        self.workerId = workerId
    }
}

struct AssociateQualificationWithWorkerInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
    let workerId: Swift.String?
    let integerValue: Swift.Int?
    let sendNotification: Swift.Bool?
}

extension AssociateQualificationWithWorkerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integerValue = "IntegerValue"
        case qualificationTypeId = "QualificationTypeId"
        case sendNotification = "SendNotification"
        case workerId = "WorkerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let integerValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .integerValue)
        integerValue = integerValueDecoded
        let sendNotificationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendNotification)
        sendNotification = sendNotificationDecoded
    }
}

extension AssociateQualificationWithWorkerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateQualificationWithWorkerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateQualificationWithWorkerOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateQualificationWithWorkerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateQualificationWithWorkerOutputResponse: Swift.Equatable {

    public init () { }
}

extension MTurkClientTypes.BonusPayment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case bonusAmount = "BonusAmount"
        case grantTime = "GrantTime"
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let bonusAmount = self.bonusAmount {
            try encodeContainer.encode(bonusAmount, forKey: .bonusAmount)
        }
        if let grantTime = self.grantTime {
            try encodeContainer.encodeTimestamp(grantTime, format: .epochSeconds, forKey: .grantTime)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let bonusAmountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bonusAmount)
        bonusAmount = bonusAmountDecoded
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let grantTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .grantTime)
        grantTime = grantTimeDecoded
    }
}

extension MTurkClientTypes {
    /// An object representing a Bonus payment paid to a Worker.
    public struct BonusPayment: Swift.Equatable {
        /// The ID of the assignment associated with this bonus payment.
        public var assignmentId: Swift.String?
        /// A string representing a currency amount.
        public var bonusAmount: Swift.String?
        /// The date and time of when the bonus was granted.
        public var grantTime: ClientRuntime.Date?
        /// The Reason text given when the bonus was granted, if any.
        public var reason: Swift.String?
        /// The ID of the Worker to whom the bonus was paid.
        public var workerId: Swift.String?

        public init (
            assignmentId: Swift.String? = nil,
            bonusAmount: Swift.String? = nil,
            grantTime: ClientRuntime.Date? = nil,
            reason: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.assignmentId = assignmentId
            self.bonusAmount = bonusAmount
            self.grantTime = grantTime
            self.reason = reason
            self.workerId = workerId
        }
    }

}

extension MTurkClientTypes {
    public enum Comparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case doesnotexist
        case equalto
        case exists
        case greaterthan
        case greaterthanorequalto
        case `in`
        case lessthan
        case lessthanorequalto
        case notequalto
        case notin
        case sdkUnknown(Swift.String)

        public static var allCases: [Comparator] {
            return [
                .doesnotexist,
                .equalto,
                .exists,
                .greaterthan,
                .greaterthanorequalto,
                .in,
                .lessthan,
                .lessthanorequalto,
                .notequalto,
                .notin,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .doesnotexist: return "DoesNotExist"
            case .equalto: return "EqualTo"
            case .exists: return "Exists"
            case .greaterthan: return "GreaterThan"
            case .greaterthanorequalto: return "GreaterThanOrEqualTo"
            case .in: return "In"
            case .lessthan: return "LessThan"
            case .lessthanorequalto: return "LessThanOrEqualTo"
            case .notequalto: return "NotEqualTo"
            case .notin: return "NotIn"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Comparator(rawValue: rawValue) ?? Comparator.sdkUnknown(rawValue)
        }
    }
}

extension CreateAdditionalAssignmentsForHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case numberOfAdditionalAssignments = "NumberOfAdditionalAssignments"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let numberOfAdditionalAssignments = self.numberOfAdditionalAssignments {
            try encodeContainer.encode(numberOfAdditionalAssignments, forKey: .numberOfAdditionalAssignments)
        }
        if let uniqueRequestToken = self.uniqueRequestToken {
            try encodeContainer.encode(uniqueRequestToken, forKey: .uniqueRequestToken)
        }
    }
}

extension CreateAdditionalAssignmentsForHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAdditionalAssignmentsForHITInput: Swift.Equatable {
    /// The ID of the HIT to extend.
    /// This member is required.
    public var hitId: Swift.String?
    /// The number of additional assignments to request for this HIT.
    /// This member is required.
    public var numberOfAdditionalAssignments: Swift.Int?
    /// A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID.
    public var uniqueRequestToken: Swift.String?

    public init (
        hitId: Swift.String? = nil,
        numberOfAdditionalAssignments: Swift.Int? = nil,
        uniqueRequestToken: Swift.String? = nil
    )
    {
        self.hitId = hitId
        self.numberOfAdditionalAssignments = numberOfAdditionalAssignments
        self.uniqueRequestToken = uniqueRequestToken
    }
}

struct CreateAdditionalAssignmentsForHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let numberOfAdditionalAssignments: Swift.Int?
    let uniqueRequestToken: Swift.String?
}

extension CreateAdditionalAssignmentsForHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case numberOfAdditionalAssignments = "NumberOfAdditionalAssignments"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let numberOfAdditionalAssignmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAdditionalAssignments)
        numberOfAdditionalAssignments = numberOfAdditionalAssignmentsDecoded
        let uniqueRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueRequestToken)
        uniqueRequestToken = uniqueRequestTokenDecoded
    }
}

extension CreateAdditionalAssignmentsForHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAdditionalAssignmentsForHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAdditionalAssignmentsForHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAdditionalAssignmentsForHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateAdditionalAssignmentsForHITOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case hitLayoutId = "HITLayoutId"
        case hitLayoutParameters = "HITLayoutParameters"
        case hitReviewPolicy = "HITReviewPolicy"
        case keywords = "Keywords"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case qualificationRequirements = "QualificationRequirements"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case reward = "Reward"
        case title = "Title"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentDurationInSeconds = self.assignmentDurationInSeconds {
            try encodeContainer.encode(assignmentDurationInSeconds, forKey: .assignmentDurationInSeconds)
        }
        if let assignmentReviewPolicy = self.assignmentReviewPolicy {
            try encodeContainer.encode(assignmentReviewPolicy, forKey: .assignmentReviewPolicy)
        }
        if let autoApprovalDelayInSeconds = self.autoApprovalDelayInSeconds {
            try encodeContainer.encode(autoApprovalDelayInSeconds, forKey: .autoApprovalDelayInSeconds)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hitLayoutId = self.hitLayoutId {
            try encodeContainer.encode(hitLayoutId, forKey: .hitLayoutId)
        }
        if let hitLayoutParameters = hitLayoutParameters {
            var hitLayoutParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hitLayoutParameters)
            for hitlayoutparameter0 in hitLayoutParameters {
                try hitLayoutParametersContainer.encode(hitlayoutparameter0)
            }
        }
        if let hitReviewPolicy = self.hitReviewPolicy {
            try encodeContainer.encode(hitReviewPolicy, forKey: .hitReviewPolicy)
        }
        if let keywords = self.keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let lifetimeInSeconds = self.lifetimeInSeconds {
            try encodeContainer.encode(lifetimeInSeconds, forKey: .lifetimeInSeconds)
        }
        if let maxAssignments = self.maxAssignments {
            try encodeContainer.encode(maxAssignments, forKey: .maxAssignments)
        }
        if let qualificationRequirements = qualificationRequirements {
            var qualificationRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualificationRequirements)
            for qualificationrequirement0 in qualificationRequirements {
                try qualificationRequirementsContainer.encode(qualificationrequirement0)
            }
        }
        if let question = self.question {
            try encodeContainer.encode(question, forKey: .question)
        }
        if let requesterAnnotation = self.requesterAnnotation {
            try encodeContainer.encode(requesterAnnotation, forKey: .requesterAnnotation)
        }
        if let reward = self.reward {
            try encodeContainer.encode(reward, forKey: .reward)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let uniqueRequestToken = self.uniqueRequestToken {
            try encodeContainer.encode(uniqueRequestToken, forKey: .uniqueRequestToken)
        }
    }
}

extension CreateHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateHITInput: Swift.Equatable {
    /// The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept.
    /// This member is required.
    public var assignmentDurationInSeconds: Swift.Int?
    /// The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it.
    public var autoApprovalDelayInSeconds: Swift.Int?
    /// A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it.
    /// This member is required.
    public var description: Swift.String?
    /// The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
    public var hitLayoutId: Swift.String?
    /// If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout.
    public var hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
    /// The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs.
    public var keywords: Swift.String?
    /// An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted.
    /// This member is required.
    public var lifetimeInSeconds: Swift.Int?
    /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
    public var maxAssignments: Swift.Int?
    /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
    public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
    /// The data the person completing the HIT uses to produce the results. Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. Either a Question parameter or a HITLayoutId parameter must be provided.
    public var question: Swift.String?
    /// An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped.
    public var requesterAnnotation: Swift.String?
    /// The amount of money the Requester will pay a Worker for successfully completing the HIT.
    /// This member is required.
    public var reward: Swift.String?
    /// The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned.
    /// This member is required.
    public var title: Swift.String?
    /// A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.
    public var uniqueRequestToken: Swift.String?

    public init (
        assignmentDurationInSeconds: Swift.Int? = nil,
        assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        autoApprovalDelayInSeconds: Swift.Int? = nil,
        description: Swift.String? = nil,
        hitLayoutId: Swift.String? = nil,
        hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]? = nil,
        hitReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        keywords: Swift.String? = nil,
        lifetimeInSeconds: Swift.Int? = nil,
        maxAssignments: Swift.Int? = nil,
        qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
        question: Swift.String? = nil,
        requesterAnnotation: Swift.String? = nil,
        reward: Swift.String? = nil,
        title: Swift.String? = nil,
        uniqueRequestToken: Swift.String? = nil
    )
    {
        self.assignmentDurationInSeconds = assignmentDurationInSeconds
        self.assignmentReviewPolicy = assignmentReviewPolicy
        self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
        self.description = description
        self.hitLayoutId = hitLayoutId
        self.hitLayoutParameters = hitLayoutParameters
        self.hitReviewPolicy = hitReviewPolicy
        self.keywords = keywords
        self.lifetimeInSeconds = lifetimeInSeconds
        self.maxAssignments = maxAssignments
        self.qualificationRequirements = qualificationRequirements
        self.question = question
        self.requesterAnnotation = requesterAnnotation
        self.reward = reward
        self.title = title
        self.uniqueRequestToken = uniqueRequestToken
    }
}

struct CreateHITInputBody: Swift.Equatable {
    let maxAssignments: Swift.Int?
    let autoApprovalDelayInSeconds: Swift.Int?
    let lifetimeInSeconds: Swift.Int?
    let assignmentDurationInSeconds: Swift.Int?
    let reward: Swift.String?
    let title: Swift.String?
    let keywords: Swift.String?
    let description: Swift.String?
    let question: Swift.String?
    let requesterAnnotation: Swift.String?
    let qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
    let uniqueRequestToken: Swift.String?
    let assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hitLayoutId: Swift.String?
    let hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
}

extension CreateHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case hitLayoutId = "HITLayoutId"
        case hitLayoutParameters = "HITLayoutParameters"
        case hitReviewPolicy = "HITReviewPolicy"
        case keywords = "Keywords"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case qualificationRequirements = "QualificationRequirements"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case reward = "Reward"
        case title = "Title"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxAssignmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAssignments)
        maxAssignments = maxAssignmentsDecoded
        let autoApprovalDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoApprovalDelayInSeconds)
        autoApprovalDelayInSeconds = autoApprovalDelayInSecondsDecoded
        let lifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lifetimeInSeconds)
        lifetimeInSeconds = lifetimeInSecondsDecoded
        let assignmentDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assignmentDurationInSeconds)
        assignmentDurationInSeconds = assignmentDurationInSecondsDecoded
        let rewardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reward)
        reward = rewardDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let questionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .question)
        question = questionDecoded
        let requesterAnnotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAnnotation)
        requesterAnnotation = requesterAnnotationDecoded
        let qualificationRequirementsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequirement?].self, forKey: .qualificationRequirements)
        var qualificationRequirementsDecoded0:[MTurkClientTypes.QualificationRequirement]? = nil
        if let qualificationRequirementsContainer = qualificationRequirementsContainer {
            qualificationRequirementsDecoded0 = [MTurkClientTypes.QualificationRequirement]()
            for structure0 in qualificationRequirementsContainer {
                if let structure0 = structure0 {
                    qualificationRequirementsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequirements = qualificationRequirementsDecoded0
        let uniqueRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueRequestToken)
        uniqueRequestToken = uniqueRequestTokenDecoded
        let assignmentReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .assignmentReviewPolicy)
        assignmentReviewPolicy = assignmentReviewPolicyDecoded
        let hitReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .hitReviewPolicy)
        hitReviewPolicy = hitReviewPolicyDecoded
        let hitLayoutIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitLayoutId)
        hitLayoutId = hitLayoutIdDecoded
        let hitLayoutParametersContainer = try containerValues.decodeIfPresent([MTurkClientTypes.HITLayoutParameter?].self, forKey: .hitLayoutParameters)
        var hitLayoutParametersDecoded0:[MTurkClientTypes.HITLayoutParameter]? = nil
        if let hitLayoutParametersContainer = hitLayoutParametersContainer {
            hitLayoutParametersDecoded0 = [MTurkClientTypes.HITLayoutParameter]()
            for structure0 in hitLayoutParametersContainer {
                if let structure0 = structure0 {
                    hitLayoutParametersDecoded0?.append(structure0)
                }
            }
        }
        hitLayoutParameters = hitLayoutParametersDecoded0
    }
}

extension CreateHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateHITOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hit = output.hit
        } else {
            self.hit = nil
        }
    }
}

public struct CreateHITOutputResponse: Swift.Equatable {
    /// Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation.
    public var hit: MTurkClientTypes.HIT?

    public init (
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.hit = hit
    }
}

struct CreateHITOutputResponseBody: Swift.Equatable {
    let hit: MTurkClientTypes.HIT?
}

extension CreateHITOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hit = "HIT"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HIT.self, forKey: .hit)
        hit = hitDecoded
    }
}

extension CreateHITTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case keywords = "Keywords"
        case qualificationRequirements = "QualificationRequirements"
        case reward = "Reward"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentDurationInSeconds = self.assignmentDurationInSeconds {
            try encodeContainer.encode(assignmentDurationInSeconds, forKey: .assignmentDurationInSeconds)
        }
        if let autoApprovalDelayInSeconds = self.autoApprovalDelayInSeconds {
            try encodeContainer.encode(autoApprovalDelayInSeconds, forKey: .autoApprovalDelayInSeconds)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keywords = self.keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let qualificationRequirements = qualificationRequirements {
            var qualificationRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualificationRequirements)
            for qualificationrequirement0 in qualificationRequirements {
                try qualificationRequirementsContainer.encode(qualificationrequirement0)
            }
        }
        if let reward = self.reward {
            try encodeContainer.encode(reward, forKey: .reward)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }
}

extension CreateHITTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateHITTypeInput: Swift.Equatable {
    /// The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept.
    /// This member is required.
    public var assignmentDurationInSeconds: Swift.Int?
    /// The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it.
    public var autoApprovalDelayInSeconds: Swift.Int?
    /// A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it.
    /// This member is required.
    public var description: Swift.String?
    /// One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs.
    public var keywords: Swift.String?
    /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
    public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
    /// The amount of money the Requester will pay a Worker for successfully completing the HIT.
    /// This member is required.
    public var reward: Swift.String?
    /// The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned.
    /// This member is required.
    public var title: Swift.String?

    public init (
        assignmentDurationInSeconds: Swift.Int? = nil,
        autoApprovalDelayInSeconds: Swift.Int? = nil,
        description: Swift.String? = nil,
        keywords: Swift.String? = nil,
        qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
        reward: Swift.String? = nil,
        title: Swift.String? = nil
    )
    {
        self.assignmentDurationInSeconds = assignmentDurationInSeconds
        self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
        self.description = description
        self.keywords = keywords
        self.qualificationRequirements = qualificationRequirements
        self.reward = reward
        self.title = title
    }
}

struct CreateHITTypeInputBody: Swift.Equatable {
    let autoApprovalDelayInSeconds: Swift.Int?
    let assignmentDurationInSeconds: Swift.Int?
    let reward: Swift.String?
    let title: Swift.String?
    let keywords: Swift.String?
    let description: Swift.String?
    let qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
}

extension CreateHITTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case keywords = "Keywords"
        case qualificationRequirements = "QualificationRequirements"
        case reward = "Reward"
        case title = "Title"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoApprovalDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoApprovalDelayInSeconds)
        autoApprovalDelayInSeconds = autoApprovalDelayInSecondsDecoded
        let assignmentDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assignmentDurationInSeconds)
        assignmentDurationInSeconds = assignmentDurationInSecondsDecoded
        let rewardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reward)
        reward = rewardDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let qualificationRequirementsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequirement?].self, forKey: .qualificationRequirements)
        var qualificationRequirementsDecoded0:[MTurkClientTypes.QualificationRequirement]? = nil
        if let qualificationRequirementsContainer = qualificationRequirementsContainer {
            qualificationRequirementsDecoded0 = [MTurkClientTypes.QualificationRequirement]()
            for structure0 in qualificationRequirementsContainer {
                if let structure0 = structure0 {
                    qualificationRequirementsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequirements = qualificationRequirementsDecoded0
    }
}

extension CreateHITTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateHITTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateHITTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHITTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateHITTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hitTypeId = output.hitTypeId
        } else {
            self.hitTypeId = nil
        }
    }
}

public struct CreateHITTypeOutputResponse: Swift.Equatable {
    /// The ID of the newly registered HIT type.
    public var hitTypeId: Swift.String?

    public init (
        hitTypeId: Swift.String? = nil
    )
    {
        self.hitTypeId = hitTypeId
    }
}

struct CreateHITTypeOutputResponseBody: Swift.Equatable {
    let hitTypeId: Swift.String?
}

extension CreateHITTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitTypeId = "HITTypeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitTypeId)
        hitTypeId = hitTypeIdDecoded
    }
}

extension CreateHITWithHITTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case hitLayoutId = "HITLayoutId"
        case hitLayoutParameters = "HITLayoutParameters"
        case hitReviewPolicy = "HITReviewPolicy"
        case hitTypeId = "HITTypeId"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentReviewPolicy = self.assignmentReviewPolicy {
            try encodeContainer.encode(assignmentReviewPolicy, forKey: .assignmentReviewPolicy)
        }
        if let hitLayoutId = self.hitLayoutId {
            try encodeContainer.encode(hitLayoutId, forKey: .hitLayoutId)
        }
        if let hitLayoutParameters = hitLayoutParameters {
            var hitLayoutParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hitLayoutParameters)
            for hitlayoutparameter0 in hitLayoutParameters {
                try hitLayoutParametersContainer.encode(hitlayoutparameter0)
            }
        }
        if let hitReviewPolicy = self.hitReviewPolicy {
            try encodeContainer.encode(hitReviewPolicy, forKey: .hitReviewPolicy)
        }
        if let hitTypeId = self.hitTypeId {
            try encodeContainer.encode(hitTypeId, forKey: .hitTypeId)
        }
        if let lifetimeInSeconds = self.lifetimeInSeconds {
            try encodeContainer.encode(lifetimeInSeconds, forKey: .lifetimeInSeconds)
        }
        if let maxAssignments = self.maxAssignments {
            try encodeContainer.encode(maxAssignments, forKey: .maxAssignments)
        }
        if let question = self.question {
            try encodeContainer.encode(question, forKey: .question)
        }
        if let requesterAnnotation = self.requesterAnnotation {
            try encodeContainer.encode(requesterAnnotation, forKey: .requesterAnnotation)
        }
        if let uniqueRequestToken = self.uniqueRequestToken {
            try encodeContainer.encode(uniqueRequestToken, forKey: .uniqueRequestToken)
        }
    }
}

extension CreateHITWithHITTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateHITWithHITTypeInput: Swift.Equatable {
    /// The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
    public var hitLayoutId: Swift.String?
    /// If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout.
    public var hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
    /// The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// The HIT type ID you want to create this HIT with.
    /// This member is required.
    public var hitTypeId: Swift.String?
    /// An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted.
    /// This member is required.
    public var lifetimeInSeconds: Swift.Int?
    /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
    public var maxAssignments: Swift.Int?
    /// The data the person completing the HIT uses to produce the results. Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. Either a Question parameter or a HITLayoutId parameter must be provided.
    public var question: Swift.String?
    /// An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped.
    public var requesterAnnotation: Swift.String?
    /// A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.
    public var uniqueRequestToken: Swift.String?

    public init (
        assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        hitLayoutId: Swift.String? = nil,
        hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]? = nil,
        hitReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        hitTypeId: Swift.String? = nil,
        lifetimeInSeconds: Swift.Int? = nil,
        maxAssignments: Swift.Int? = nil,
        question: Swift.String? = nil,
        requesterAnnotation: Swift.String? = nil,
        uniqueRequestToken: Swift.String? = nil
    )
    {
        self.assignmentReviewPolicy = assignmentReviewPolicy
        self.hitLayoutId = hitLayoutId
        self.hitLayoutParameters = hitLayoutParameters
        self.hitReviewPolicy = hitReviewPolicy
        self.hitTypeId = hitTypeId
        self.lifetimeInSeconds = lifetimeInSeconds
        self.maxAssignments = maxAssignments
        self.question = question
        self.requesterAnnotation = requesterAnnotation
        self.uniqueRequestToken = uniqueRequestToken
    }
}

struct CreateHITWithHITTypeInputBody: Swift.Equatable {
    let hitTypeId: Swift.String?
    let maxAssignments: Swift.Int?
    let lifetimeInSeconds: Swift.Int?
    let question: Swift.String?
    let requesterAnnotation: Swift.String?
    let uniqueRequestToken: Swift.String?
    let assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hitLayoutId: Swift.String?
    let hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
}

extension CreateHITWithHITTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case hitLayoutId = "HITLayoutId"
        case hitLayoutParameters = "HITLayoutParameters"
        case hitReviewPolicy = "HITReviewPolicy"
        case hitTypeId = "HITTypeId"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitTypeId)
        hitTypeId = hitTypeIdDecoded
        let maxAssignmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAssignments)
        maxAssignments = maxAssignmentsDecoded
        let lifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lifetimeInSeconds)
        lifetimeInSeconds = lifetimeInSecondsDecoded
        let questionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .question)
        question = questionDecoded
        let requesterAnnotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAnnotation)
        requesterAnnotation = requesterAnnotationDecoded
        let uniqueRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueRequestToken)
        uniqueRequestToken = uniqueRequestTokenDecoded
        let assignmentReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .assignmentReviewPolicy)
        assignmentReviewPolicy = assignmentReviewPolicyDecoded
        let hitReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .hitReviewPolicy)
        hitReviewPolicy = hitReviewPolicyDecoded
        let hitLayoutIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitLayoutId)
        hitLayoutId = hitLayoutIdDecoded
        let hitLayoutParametersContainer = try containerValues.decodeIfPresent([MTurkClientTypes.HITLayoutParameter?].self, forKey: .hitLayoutParameters)
        var hitLayoutParametersDecoded0:[MTurkClientTypes.HITLayoutParameter]? = nil
        if let hitLayoutParametersContainer = hitLayoutParametersContainer {
            hitLayoutParametersDecoded0 = [MTurkClientTypes.HITLayoutParameter]()
            for structure0 in hitLayoutParametersContainer {
                if let structure0 = structure0 {
                    hitLayoutParametersDecoded0?.append(structure0)
                }
            }
        }
        hitLayoutParameters = hitLayoutParametersDecoded0
    }
}

extension CreateHITWithHITTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateHITWithHITTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateHITWithHITTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHITWithHITTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateHITWithHITTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hit = output.hit
        } else {
            self.hit = nil
        }
    }
}

public struct CreateHITWithHITTypeOutputResponse: Swift.Equatable {
    /// Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation.
    public var hit: MTurkClientTypes.HIT?

    public init (
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.hit = hit
    }
}

struct CreateHITWithHITTypeOutputResponseBody: Swift.Equatable {
    let hit: MTurkClientTypes.HIT?
}

extension CreateHITWithHITTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hit = "HIT"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HIT.self, forKey: .hit)
        hit = hitDecoded
    }
}

extension CreateQualificationTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerKey = "AnswerKey"
        case autoGranted = "AutoGranted"
        case autoGrantedValue = "AutoGrantedValue"
        case description = "Description"
        case keywords = "Keywords"
        case name = "Name"
        case qualificationTypeStatus = "QualificationTypeStatus"
        case retryDelayInSeconds = "RetryDelayInSeconds"
        case test = "Test"
        case testDurationInSeconds = "TestDurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answerKey = self.answerKey {
            try encodeContainer.encode(answerKey, forKey: .answerKey)
        }
        if let autoGranted = self.autoGranted {
            try encodeContainer.encode(autoGranted, forKey: .autoGranted)
        }
        if let autoGrantedValue = self.autoGrantedValue {
            try encodeContainer.encode(autoGrantedValue, forKey: .autoGrantedValue)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keywords = self.keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let qualificationTypeStatus = self.qualificationTypeStatus {
            try encodeContainer.encode(qualificationTypeStatus.rawValue, forKey: .qualificationTypeStatus)
        }
        if let retryDelayInSeconds = self.retryDelayInSeconds {
            try encodeContainer.encode(retryDelayInSeconds, forKey: .retryDelayInSeconds)
        }
        if let test = self.test {
            try encodeContainer.encode(test, forKey: .test)
        }
        if let testDurationInSeconds = self.testDurationInSeconds {
            try encodeContainer.encode(testDurationInSeconds, forKey: .testDurationInSeconds)
        }
    }
}

extension CreateQualificationTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateQualificationTypeInput: Swift.Equatable {
    /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure. Constraints: Must not be longer than 65535 bytes. Constraints: None. If not specified, you must process Qualification requests manually.
    public var answerKey: Swift.String?
    /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
    public var autoGranted: Swift.Bool?
    /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
    public var autoGrantedValue: Swift.Int?
    /// A long description for the Qualification type. On the Amazon Mechanical Turk website, the long description is displayed when a Worker examines a Qualification type.
    /// This member is required.
    public var description: Swift.String?
    /// One or more words or phrases that describe the Qualification type, separated by commas. The keywords of a type make the type easier to find during a search.
    public var keywords: Swift.String?
    /// The name you give to the Qualification type. The type name is used to represent the Qualification to Workers, and to find the type using a Qualification type search. It must be unique across all of your Qualification types.
    /// This member is required.
    public var name: Swift.String?
    /// The initial status of the Qualification type. Constraints: Valid values are: Active | Inactive
    /// This member is required.
    public var qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
    /// The number of seconds that a Worker must wait after requesting a Qualification of the Qualification type before the worker can retry the Qualification request. Constraints: None. If not specified, retries are disabled and Workers can request a Qualification of this type only once, even if the Worker has not been granted the Qualification. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must delete existing retry-enabled Qualification type and then create a new Qualification type with retries disabled.
    public var retryDelayInSeconds: Swift.Int?
    /// The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified. Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
    public var test: Swift.String?
    /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
    public var testDurationInSeconds: Swift.Int?

    public init (
        answerKey: Swift.String? = nil,
        autoGranted: Swift.Bool? = nil,
        autoGrantedValue: Swift.Int? = nil,
        description: Swift.String? = nil,
        keywords: Swift.String? = nil,
        name: Swift.String? = nil,
        qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus? = nil,
        retryDelayInSeconds: Swift.Int? = nil,
        test: Swift.String? = nil,
        testDurationInSeconds: Swift.Int? = nil
    )
    {
        self.answerKey = answerKey
        self.autoGranted = autoGranted
        self.autoGrantedValue = autoGrantedValue
        self.description = description
        self.keywords = keywords
        self.name = name
        self.qualificationTypeStatus = qualificationTypeStatus
        self.retryDelayInSeconds = retryDelayInSeconds
        self.test = test
        self.testDurationInSeconds = testDurationInSeconds
    }
}

struct CreateQualificationTypeInputBody: Swift.Equatable {
    let name: Swift.String?
    let keywords: Swift.String?
    let description: Swift.String?
    let qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
    let retryDelayInSeconds: Swift.Int?
    let test: Swift.String?
    let answerKey: Swift.String?
    let testDurationInSeconds: Swift.Int?
    let autoGranted: Swift.Bool?
    let autoGrantedValue: Swift.Int?
}

extension CreateQualificationTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerKey = "AnswerKey"
        case autoGranted = "AutoGranted"
        case autoGrantedValue = "AutoGrantedValue"
        case description = "Description"
        case keywords = "Keywords"
        case name = "Name"
        case qualificationTypeStatus = "QualificationTypeStatus"
        case retryDelayInSeconds = "RetryDelayInSeconds"
        case test = "Test"
        case testDurationInSeconds = "TestDurationInSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let qualificationTypeStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationTypeStatus.self, forKey: .qualificationTypeStatus)
        qualificationTypeStatus = qualificationTypeStatusDecoded
        let retryDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryDelayInSeconds)
        retryDelayInSeconds = retryDelayInSecondsDecoded
        let testDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .test)
        test = testDecoded
        let answerKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .answerKey)
        answerKey = answerKeyDecoded
        let testDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .testDurationInSeconds)
        testDurationInSeconds = testDurationInSecondsDecoded
        let autoGrantedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoGranted)
        autoGranted = autoGrantedDecoded
        let autoGrantedValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoGrantedValue)
        autoGrantedValue = autoGrantedValueDecoded
    }
}

extension CreateQualificationTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateQualificationTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateQualificationTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQualificationTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateQualificationTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.qualificationType = output.qualificationType
        } else {
            self.qualificationType = nil
        }
    }
}

public struct CreateQualificationTypeOutputResponse: Swift.Equatable {
    /// The created Qualification type, returned as a QualificationType data structure.
    public var qualificationType: MTurkClientTypes.QualificationType?

    public init (
        qualificationType: MTurkClientTypes.QualificationType? = nil
    )
    {
        self.qualificationType = qualificationType
    }
}

struct CreateQualificationTypeOutputResponseBody: Swift.Equatable {
    let qualificationType: MTurkClientTypes.QualificationType?
}

extension CreateQualificationTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationType = "QualificationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationType.self, forKey: .qualificationType)
        qualificationType = qualificationTypeDecoded
    }
}

extension CreateWorkerBlockInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }
}

extension CreateWorkerBlockInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWorkerBlockInput: Swift.Equatable {
    /// A message explaining the reason for blocking the Worker. This parameter enables you to keep track of your Workers. The Worker does not see this message.
    /// This member is required.
    public var reason: Swift.String?
    /// The ID of the Worker to block.
    /// This member is required.
    public var workerId: Swift.String?

    public init (
        reason: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.reason = reason
        self.workerId = workerId
    }
}

struct CreateWorkerBlockInputBody: Swift.Equatable {
    let workerId: Swift.String?
    let reason: Swift.String?
}

extension CreateWorkerBlockInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CreateWorkerBlockOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWorkerBlockOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateWorkerBlockOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWorkerBlockOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateWorkerBlockOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
    }
}

extension DeleteHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteHITInput: Swift.Equatable {
    /// The ID of the HIT to be deleted.
    /// This member is required.
    public var hitId: Swift.String?

    public init (
        hitId: Swift.String? = nil
    )
    {
        self.hitId = hitId
    }
}

struct DeleteHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
}

extension DeleteHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
    }
}

extension DeleteHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteHITOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteQualificationTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
    }
}

extension DeleteQualificationTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteQualificationTypeInput: Swift.Equatable {
    /// The ID of the QualificationType to dispose.
    /// This member is required.
    public var qualificationTypeId: Swift.String?

    public init (
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
    }
}

struct DeleteQualificationTypeInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
}

extension DeleteQualificationTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
    }
}

extension DeleteQualificationTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteQualificationTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteQualificationTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQualificationTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteQualificationTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteWorkerBlockInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }
}

extension DeleteWorkerBlockInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWorkerBlockInput: Swift.Equatable {
    /// A message that explains the reason for unblocking the Worker. The Worker does not see this message.
    public var reason: Swift.String?
    /// The ID of the Worker to unblock.
    /// This member is required.
    public var workerId: Swift.String?

    public init (
        reason: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.reason = reason
        self.workerId = workerId
    }
}

struct DeleteWorkerBlockInputBody: Swift.Equatable {
    let workerId: Swift.String?
    let reason: Swift.String?
}

extension DeleteWorkerBlockInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension DeleteWorkerBlockOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWorkerBlockOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteWorkerBlockOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWorkerBlockOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWorkerBlockOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisassociateQualificationFromWorkerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }
}

extension DisassociateQualificationFromWorkerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateQualificationFromWorkerInput: Swift.Equatable {
    /// The ID of the Qualification type of the Qualification to be revoked.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.
    public var reason: Swift.String?
    /// The ID of the Worker who possesses the Qualification to be revoked.
    /// This member is required.
    public var workerId: Swift.String?

    public init (
        qualificationTypeId: Swift.String? = nil,
        reason: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
        self.reason = reason
        self.workerId = workerId
    }
}

struct DisassociateQualificationFromWorkerInputBody: Swift.Equatable {
    let workerId: Swift.String?
    let qualificationTypeId: Swift.String?
    let reason: Swift.String?
}

extension DisassociateQualificationFromWorkerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension DisassociateQualificationFromWorkerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateQualificationFromWorkerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateQualificationFromWorkerOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateQualificationFromWorkerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateQualificationFromWorkerOutputResponse: Swift.Equatable {

    public init () { }
}

extension MTurkClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case assignmentabandoned
        case assignmentaccepted
        case assignmentapproved
        case assignmentrejected
        case assignmentreturned
        case assignmentsubmitted
        case hitcreated
        case hitdisposed
        case hitexpired
        case hitextended
        case hitreviewable
        case ping
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .assignmentabandoned,
                .assignmentaccepted,
                .assignmentapproved,
                .assignmentrejected,
                .assignmentreturned,
                .assignmentsubmitted,
                .hitcreated,
                .hitdisposed,
                .hitexpired,
                .hitextended,
                .hitreviewable,
                .ping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .assignmentabandoned: return "AssignmentAbandoned"
            case .assignmentaccepted: return "AssignmentAccepted"
            case .assignmentapproved: return "AssignmentApproved"
            case .assignmentrejected: return "AssignmentRejected"
            case .assignmentreturned: return "AssignmentReturned"
            case .assignmentsubmitted: return "AssignmentSubmitted"
            case .hitcreated: return "HITCreated"
            case .hitdisposed: return "HITDisposed"
            case .hitexpired: return "HITExpired"
            case .hitextended: return "HITExtended"
            case .hitreviewable: return "HITReviewable"
            case .ping: return "Ping"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension GetAccountBalanceInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension GetAccountBalanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAccountBalanceInput: Swift.Equatable {

    public init () { }
}

struct GetAccountBalanceInputBody: Swift.Equatable {
}

extension GetAccountBalanceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAccountBalanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAccountBalanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAccountBalanceOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountBalanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAccountBalanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.availableBalance = output.availableBalance
            self.onHoldBalance = output.onHoldBalance
        } else {
            self.availableBalance = nil
            self.onHoldBalance = nil
        }
    }
}

public struct GetAccountBalanceOutputResponse: Swift.Equatable {
    /// A string representing a currency amount.
    public var availableBalance: Swift.String?
    /// A string representing a currency amount.
    public var onHoldBalance: Swift.String?

    public init (
        availableBalance: Swift.String? = nil,
        onHoldBalance: Swift.String? = nil
    )
    {
        self.availableBalance = availableBalance
        self.onHoldBalance = onHoldBalance
    }
}

struct GetAccountBalanceOutputResponseBody: Swift.Equatable {
    let availableBalance: Swift.String?
    let onHoldBalance: Swift.String?
}

extension GetAccountBalanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableBalance = "AvailableBalance"
        case onHoldBalance = "OnHoldBalance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availableBalanceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availableBalance)
        availableBalance = availableBalanceDecoded
        let onHoldBalanceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onHoldBalance)
        onHoldBalance = onHoldBalanceDecoded
    }
}

extension GetAssignmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
    }
}

extension GetAssignmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetAssignmentInput: Swift.Equatable {
    /// The ID of the Assignment to be retrieved.
    /// This member is required.
    public var assignmentId: Swift.String?

    public init (
        assignmentId: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
    }
}

struct GetAssignmentInputBody: Swift.Equatable {
    let assignmentId: Swift.String?
}

extension GetAssignmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
    }
}

extension GetAssignmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAssignmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAssignmentOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAssignmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAssignmentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assignment = output.assignment
            self.hit = output.hit
        } else {
            self.assignment = nil
            self.hit = nil
        }
    }
}

public struct GetAssignmentOutputResponse: Swift.Equatable {
    /// The assignment. The response includes one Assignment element.
    public var assignment: MTurkClientTypes.Assignment?
    /// The HIT associated with this assignment. The response includes one HIT element.
    public var hit: MTurkClientTypes.HIT?

    public init (
        assignment: MTurkClientTypes.Assignment? = nil,
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.assignment = assignment
        self.hit = hit
    }
}

struct GetAssignmentOutputResponseBody: Swift.Equatable {
    let assignment: MTurkClientTypes.Assignment?
    let hit: MTurkClientTypes.HIT?
}

extension GetAssignmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignment = "Assignment"
        case hit = "HIT"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.Assignment.self, forKey: .assignment)
        assignment = assignmentDecoded
        let hitDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HIT.self, forKey: .hit)
        hit = hitDecoded
    }
}

extension GetFileUploadURLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case questionIdentifier = "QuestionIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let questionIdentifier = self.questionIdentifier {
            try encodeContainer.encode(questionIdentifier, forKey: .questionIdentifier)
        }
    }
}

extension GetFileUploadURLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetFileUploadURLInput: Swift.Equatable {
    /// The ID of the assignment that contains the question with a FileUploadAnswer.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// The identifier of the question with a FileUploadAnswer, as specified in the QuestionForm of the HIT.
    /// This member is required.
    public var questionIdentifier: Swift.String?

    public init (
        assignmentId: Swift.String? = nil,
        questionIdentifier: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.questionIdentifier = questionIdentifier
    }
}

struct GetFileUploadURLInputBody: Swift.Equatable {
    let assignmentId: Swift.String?
    let questionIdentifier: Swift.String?
}

extension GetFileUploadURLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case questionIdentifier = "QuestionIdentifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let questionIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .questionIdentifier)
        questionIdentifier = questionIdentifierDecoded
    }
}

extension GetFileUploadURLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetFileUploadURLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetFileUploadURLOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetFileUploadURLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetFileUploadURLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fileUploadURL = output.fileUploadURL
        } else {
            self.fileUploadURL = nil
        }
    }
}

public struct GetFileUploadURLOutputResponse: Swift.Equatable {
    /// A temporary URL for the file that the Worker uploaded for the answer.
    public var fileUploadURL: Swift.String?

    public init (
        fileUploadURL: Swift.String? = nil
    )
    {
        self.fileUploadURL = fileUploadURL
    }
}

struct GetFileUploadURLOutputResponseBody: Swift.Equatable {
    let fileUploadURL: Swift.String?
}

extension GetFileUploadURLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileUploadURL = "FileUploadURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileUploadURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileUploadURL)
        fileUploadURL = fileUploadURLDecoded
    }
}

extension GetHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
    }
}

extension GetHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetHITInput: Swift.Equatable {
    /// The ID of the HIT to be retrieved.
    /// This member is required.
    public var hitId: Swift.String?

    public init (
        hitId: Swift.String? = nil
    )
    {
        self.hitId = hitId
    }
}

struct GetHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
}

extension GetHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
    }
}

extension GetHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetHITOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hit = output.hit
        } else {
            self.hit = nil
        }
    }
}

public struct GetHITOutputResponse: Swift.Equatable {
    /// Contains the requested HIT data.
    public var hit: MTurkClientTypes.HIT?

    public init (
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.hit = hit
    }
}

struct GetHITOutputResponseBody: Swift.Equatable {
    let hit: MTurkClientTypes.HIT?
}

extension GetHITOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hit = "HIT"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HIT.self, forKey: .hit)
        hit = hitDecoded
    }
}

extension GetQualificationScoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }
}

extension GetQualificationScoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetQualificationScoreInput: Swift.Equatable {
    /// The ID of the QualificationType.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// The ID of the Worker whose Qualification is being updated.
    /// This member is required.
    public var workerId: Swift.String?

    public init (
        qualificationTypeId: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
        self.workerId = workerId
    }
}

struct GetQualificationScoreInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
    let workerId: Swift.String?
}

extension GetQualificationScoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
        case workerId = "WorkerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
    }
}

extension GetQualificationScoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetQualificationScoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetQualificationScoreOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQualificationScoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetQualificationScoreOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.qualification = output.qualification
        } else {
            self.qualification = nil
        }
    }
}

public struct GetQualificationScoreOutputResponse: Swift.Equatable {
    /// The Qualification data structure of the Qualification assigned to a user, including the Qualification type and the value (score).
    public var qualification: MTurkClientTypes.Qualification?

    public init (
        qualification: MTurkClientTypes.Qualification? = nil
    )
    {
        self.qualification = qualification
    }
}

struct GetQualificationScoreOutputResponseBody: Swift.Equatable {
    let qualification: MTurkClientTypes.Qualification?
}

extension GetQualificationScoreOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualification = "Qualification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.Qualification.self, forKey: .qualification)
        qualification = qualificationDecoded
    }
}

extension GetQualificationTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
    }
}

extension GetQualificationTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetQualificationTypeInput: Swift.Equatable {
    /// The ID of the QualificationType.
    /// This member is required.
    public var qualificationTypeId: Swift.String?

    public init (
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
    }
}

struct GetQualificationTypeInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
}

extension GetQualificationTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationTypeId = "QualificationTypeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
    }
}

extension GetQualificationTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetQualificationTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetQualificationTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQualificationTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetQualificationTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.qualificationType = output.qualificationType
        } else {
            self.qualificationType = nil
        }
    }
}

public struct GetQualificationTypeOutputResponse: Swift.Equatable {
    /// The returned Qualification Type
    public var qualificationType: MTurkClientTypes.QualificationType?

    public init (
        qualificationType: MTurkClientTypes.QualificationType? = nil
    )
    {
        self.qualificationType = qualificationType
    }
}

struct GetQualificationTypeOutputResponseBody: Swift.Equatable {
    let qualificationType: MTurkClientTypes.QualificationType?
}

extension GetQualificationTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationType = "QualificationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationType.self, forKey: .qualificationType)
        qualificationType = qualificationTypeDecoded
    }
}

extension MTurkClientTypes.HIT: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case creationTime = "CreationTime"
        case description = "Description"
        case expiration = "Expiration"
        case hitGroupId = "HITGroupId"
        case hitId = "HITId"
        case hitLayoutId = "HITLayoutId"
        case hitReviewStatus = "HITReviewStatus"
        case hitStatus = "HITStatus"
        case hitTypeId = "HITTypeId"
        case keywords = "Keywords"
        case maxAssignments = "MaxAssignments"
        case numberOfAssignmentsAvailable = "NumberOfAssignmentsAvailable"
        case numberOfAssignmentsCompleted = "NumberOfAssignmentsCompleted"
        case numberOfAssignmentsPending = "NumberOfAssignmentsPending"
        case qualificationRequirements = "QualificationRequirements"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case reward = "Reward"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentDurationInSeconds = self.assignmentDurationInSeconds {
            try encodeContainer.encode(assignmentDurationInSeconds, forKey: .assignmentDurationInSeconds)
        }
        if let autoApprovalDelayInSeconds = self.autoApprovalDelayInSeconds {
            try encodeContainer.encode(autoApprovalDelayInSeconds, forKey: .autoApprovalDelayInSeconds)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expiration = self.expiration {
            try encodeContainer.encodeTimestamp(expiration, format: .epochSeconds, forKey: .expiration)
        }
        if let hitGroupId = self.hitGroupId {
            try encodeContainer.encode(hitGroupId, forKey: .hitGroupId)
        }
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let hitLayoutId = self.hitLayoutId {
            try encodeContainer.encode(hitLayoutId, forKey: .hitLayoutId)
        }
        if let hitReviewStatus = self.hitReviewStatus {
            try encodeContainer.encode(hitReviewStatus.rawValue, forKey: .hitReviewStatus)
        }
        if let hitStatus = self.hitStatus {
            try encodeContainer.encode(hitStatus.rawValue, forKey: .hitStatus)
        }
        if let hitTypeId = self.hitTypeId {
            try encodeContainer.encode(hitTypeId, forKey: .hitTypeId)
        }
        if let keywords = self.keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let maxAssignments = self.maxAssignments {
            try encodeContainer.encode(maxAssignments, forKey: .maxAssignments)
        }
        if let numberOfAssignmentsAvailable = self.numberOfAssignmentsAvailable {
            try encodeContainer.encode(numberOfAssignmentsAvailable, forKey: .numberOfAssignmentsAvailable)
        }
        if let numberOfAssignmentsCompleted = self.numberOfAssignmentsCompleted {
            try encodeContainer.encode(numberOfAssignmentsCompleted, forKey: .numberOfAssignmentsCompleted)
        }
        if let numberOfAssignmentsPending = self.numberOfAssignmentsPending {
            try encodeContainer.encode(numberOfAssignmentsPending, forKey: .numberOfAssignmentsPending)
        }
        if let qualificationRequirements = qualificationRequirements {
            var qualificationRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualificationRequirements)
            for qualificationrequirement0 in qualificationRequirements {
                try qualificationRequirementsContainer.encode(qualificationrequirement0)
            }
        }
        if let question = self.question {
            try encodeContainer.encode(question, forKey: .question)
        }
        if let requesterAnnotation = self.requesterAnnotation {
            try encodeContainer.encode(requesterAnnotation, forKey: .requesterAnnotation)
        }
        if let reward = self.reward {
            try encodeContainer.encode(reward, forKey: .reward)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let hitTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitTypeId)
        hitTypeId = hitTypeIdDecoded
        let hitGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitGroupId)
        hitGroupId = hitGroupIdDecoded
        let hitLayoutIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitLayoutId)
        hitLayoutId = hitLayoutIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let questionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .question)
        question = questionDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let hitStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HITStatus.self, forKey: .hitStatus)
        hitStatus = hitStatusDecoded
        let maxAssignmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAssignments)
        maxAssignments = maxAssignmentsDecoded
        let rewardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reward)
        reward = rewardDecoded
        let autoApprovalDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoApprovalDelayInSeconds)
        autoApprovalDelayInSeconds = autoApprovalDelayInSecondsDecoded
        let expirationDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiration)
        expiration = expirationDecoded
        let assignmentDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assignmentDurationInSeconds)
        assignmentDurationInSeconds = assignmentDurationInSecondsDecoded
        let requesterAnnotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAnnotation)
        requesterAnnotation = requesterAnnotationDecoded
        let qualificationRequirementsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequirement?].self, forKey: .qualificationRequirements)
        var qualificationRequirementsDecoded0:[MTurkClientTypes.QualificationRequirement]? = nil
        if let qualificationRequirementsContainer = qualificationRequirementsContainer {
            qualificationRequirementsDecoded0 = [MTurkClientTypes.QualificationRequirement]()
            for structure0 in qualificationRequirementsContainer {
                if let structure0 = structure0 {
                    qualificationRequirementsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequirements = qualificationRequirementsDecoded0
        let hitReviewStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HITReviewStatus.self, forKey: .hitReviewStatus)
        hitReviewStatus = hitReviewStatusDecoded
        let numberOfAssignmentsPendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssignmentsPending)
        numberOfAssignmentsPending = numberOfAssignmentsPendingDecoded
        let numberOfAssignmentsAvailableDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssignmentsAvailable)
        numberOfAssignmentsAvailable = numberOfAssignmentsAvailableDecoded
        let numberOfAssignmentsCompletedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssignmentsCompleted)
        numberOfAssignmentsCompleted = numberOfAssignmentsCompletedDecoded
    }
}

extension MTurkClientTypes {
    /// The HIT data structure represents a single HIT, including all the information necessary for a Worker to accept and complete the HIT.
    public struct HIT: Swift.Equatable {
        /// The length of time, in seconds, that a Worker has to complete the HIT after accepting it.
        public var assignmentDurationInSeconds: Swift.Int?
        /// The amount of time, in seconds, after the Worker submits an assignment for the HIT that the results are automatically approved by Amazon Mechanical Turk. This is the amount of time the Requester has to reject an assignment submitted by a Worker before the assignment is auto-approved and the Worker is paid.
        public var autoApprovalDelayInSeconds: Swift.Int?
        /// The date and time the HIT was created.
        public var creationTime: ClientRuntime.Date?
        /// A general description of the HIT.
        public var description: Swift.String?
        /// The date and time the HIT expires.
        public var expiration: ClientRuntime.Date?
        /// The ID of the HIT Group of this HIT.
        public var hitGroupId: Swift.String?
        /// A unique identifier for the HIT.
        public var hitId: Swift.String?
        /// The ID of the HIT Layout of this HIT.
        public var hitLayoutId: Swift.String?
        /// Indicates the review status of the HIT. Valid Values are NotReviewed | MarkedForReview | ReviewedAppropriate | ReviewedInappropriate.
        public var hitReviewStatus: MTurkClientTypes.HITReviewStatus?
        /// The status of the HIT and its assignments. Valid Values are Assignable | Unassignable | Reviewable | Reviewing | Disposed.
        public var hitStatus: MTurkClientTypes.HITStatus?
        /// The ID of the HIT type of this HIT
        public var hitTypeId: Swift.String?
        /// One or more words or phrases that describe the HIT, separated by commas. Search terms similar to the keywords of a HIT are more likely to have the HIT in the search results.
        public var keywords: Swift.String?
        /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
        public var maxAssignments: Swift.Int?
        /// The number of assignments for this HIT that are available for Workers to accept.
        public var numberOfAssignmentsAvailable: Swift.Int?
        /// The number of assignments for this HIT that have been approved or rejected.
        public var numberOfAssignmentsCompleted: Swift.Int?
        /// The number of assignments for this HIT that are being previewed or have been accepted by Workers, but have not yet been submitted, returned, or abandoned.
        public var numberOfAssignmentsPending: Swift.Int?
        /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
        public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
        /// The data the Worker completing the HIT uses produce the results. This is either either a QuestionForm, HTMLQuestion or an ExternalQuestion data structure.
        public var question: Swift.String?
        /// An arbitrary data field the Requester who created the HIT can use. This field is visible only to the creator of the HIT.
        public var requesterAnnotation: Swift.String?
        /// A string representing a currency amount.
        public var reward: Swift.String?
        /// The title of the HIT.
        public var title: Swift.String?

        public init (
            assignmentDurationInSeconds: Swift.Int? = nil,
            autoApprovalDelayInSeconds: Swift.Int? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            expiration: ClientRuntime.Date? = nil,
            hitGroupId: Swift.String? = nil,
            hitId: Swift.String? = nil,
            hitLayoutId: Swift.String? = nil,
            hitReviewStatus: MTurkClientTypes.HITReviewStatus? = nil,
            hitStatus: MTurkClientTypes.HITStatus? = nil,
            hitTypeId: Swift.String? = nil,
            keywords: Swift.String? = nil,
            maxAssignments: Swift.Int? = nil,
            numberOfAssignmentsAvailable: Swift.Int? = nil,
            numberOfAssignmentsCompleted: Swift.Int? = nil,
            numberOfAssignmentsPending: Swift.Int? = nil,
            qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
            question: Swift.String? = nil,
            requesterAnnotation: Swift.String? = nil,
            reward: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.creationTime = creationTime
            self.description = description
            self.expiration = expiration
            self.hitGroupId = hitGroupId
            self.hitId = hitId
            self.hitLayoutId = hitLayoutId
            self.hitReviewStatus = hitReviewStatus
            self.hitStatus = hitStatus
            self.hitTypeId = hitTypeId
            self.keywords = keywords
            self.maxAssignments = maxAssignments
            self.numberOfAssignmentsAvailable = numberOfAssignmentsAvailable
            self.numberOfAssignmentsCompleted = numberOfAssignmentsCompleted
            self.numberOfAssignmentsPending = numberOfAssignmentsPending
            self.qualificationRequirements = qualificationRequirements
            self.question = question
            self.requesterAnnotation = requesterAnnotation
            self.reward = reward
            self.title = title
        }
    }

}

extension MTurkClientTypes {
    public enum HITAccessActions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accept
        case discoverpreviewandaccept
        case previewandaccept
        case sdkUnknown(Swift.String)

        public static var allCases: [HITAccessActions] {
            return [
                .accept,
                .discoverpreviewandaccept,
                .previewandaccept,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accept: return "Accept"
            case .discoverpreviewandaccept: return "DiscoverPreviewAndAccept"
            case .previewandaccept: return "PreviewAndAccept"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HITAccessActions(rawValue: rawValue) ?? HITAccessActions.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes.HITLayoutParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MTurkClientTypes {
    /// The HITLayoutParameter data structure defines parameter values used with a HITLayout. A HITLayout is a reusable Amazon Mechanical Turk project template used to provide Human Intelligence Task (HIT) question data for CreateHIT.
    public struct HITLayoutParameter: Swift.Equatable {
        /// The name of the parameter in the HITLayout.
        /// This member is required.
        public var name: Swift.String?
        /// The value substituted for the parameter referenced in the HITLayout.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension MTurkClientTypes {
    public enum HITReviewStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case markedforreview
        case notreviewed
        case reviewedappropriate
        case reviewedinappropriate
        case sdkUnknown(Swift.String)

        public static var allCases: [HITReviewStatus] {
            return [
                .markedforreview,
                .notreviewed,
                .reviewedappropriate,
                .reviewedinappropriate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .markedforreview: return "MarkedForReview"
            case .notreviewed: return "NotReviewed"
            case .reviewedappropriate: return "ReviewedAppropriate"
            case .reviewedinappropriate: return "ReviewedInappropriate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HITReviewStatus(rawValue: rawValue) ?? HITReviewStatus.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes {
    public enum HITStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case assignable
        case disposed
        case reviewable
        case reviewing
        case unassignable
        case sdkUnknown(Swift.String)

        public static var allCases: [HITStatus] {
            return [
                .assignable,
                .disposed,
                .reviewable,
                .reviewing,
                .unassignable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .assignable: return "Assignable"
            case .disposed: return "Disposed"
            case .reviewable: return "Reviewable"
            case .reviewing: return "Reviewing"
            case .unassignable: return "Unassignable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HITStatus(rawValue: rawValue) ?? HITStatus.sdkUnknown(rawValue)
        }
    }
}

extension ListAssignmentsForHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentStatuses = "AssignmentStatuses"
        case hitId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentStatuses = assignmentStatuses {
            var assignmentStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assignmentStatuses)
            for assignmentstatus0 in assignmentStatuses {
                try assignmentStatusesContainer.encode(assignmentstatus0.rawValue)
            }
        }
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListAssignmentsForHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAssignmentsForHITInput: Swift.Equatable {
    /// The status of the assignments to return: Submitted | Approved | Rejected
    public var assignmentStatuses: [MTurkClientTypes.AssignmentStatus]?
    /// The ID of the HIT.
    /// This member is required.
    public var hitId: Swift.String?
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init (
        assignmentStatuses: [MTurkClientTypes.AssignmentStatus]? = nil,
        hitId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assignmentStatuses = assignmentStatuses
        self.hitId = hitId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAssignmentsForHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let assignmentStatuses: [MTurkClientTypes.AssignmentStatus]?
}

extension ListAssignmentsForHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentStatuses = "AssignmentStatuses"
        case hitId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let assignmentStatusesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.AssignmentStatus?].self, forKey: .assignmentStatuses)
        var assignmentStatusesDecoded0:[MTurkClientTypes.AssignmentStatus]? = nil
        if let assignmentStatusesContainer = assignmentStatusesContainer {
            assignmentStatusesDecoded0 = [MTurkClientTypes.AssignmentStatus]()
            for string0 in assignmentStatusesContainer {
                if let string0 = string0 {
                    assignmentStatusesDecoded0?.append(string0)
                }
            }
        }
        assignmentStatuses = assignmentStatusesDecoded0
    }
}

extension ListAssignmentsForHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAssignmentsForHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAssignmentsForHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAssignmentsForHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAssignmentsForHITOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assignments = output.assignments
            self.nextToken = output.nextToken
            self.numResults = output.numResults
        } else {
            self.assignments = nil
            self.nextToken = nil
            self.numResults = nil
        }
    }
}

public struct ListAssignmentsForHITOutputResponse: Swift.Equatable {
    /// The collection of Assignment data structures returned by this call.
    public var assignments: [MTurkClientTypes.Assignment]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
    public var numResults: Swift.Int?

    public init (
        assignments: [MTurkClientTypes.Assignment]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.assignments = assignments
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

struct ListAssignmentsForHITOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let numResults: Swift.Int?
    let assignments: [MTurkClientTypes.Assignment]?
}

extension ListAssignmentsForHITOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignments = "Assignments"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let assignmentsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.Assignment?].self, forKey: .assignments)
        var assignmentsDecoded0:[MTurkClientTypes.Assignment]? = nil
        if let assignmentsContainer = assignmentsContainer {
            assignmentsDecoded0 = [MTurkClientTypes.Assignment]()
            for structure0 in assignmentsContainer {
                if let structure0 = structure0 {
                    assignmentsDecoded0?.append(structure0)
                }
            }
        }
        assignments = assignmentsDecoded0
    }
}

extension ListBonusPaymentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case hitId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListBonusPaymentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBonusPaymentsInput: Swift.Equatable {
    /// The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified
    public var assignmentId: Swift.String?
    /// The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified
    public var hitId: Swift.String?
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init (
        assignmentId: Swift.String? = nil,
        hitId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.hitId = hitId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListBonusPaymentsInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let assignmentId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListBonusPaymentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case hitId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListBonusPaymentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBonusPaymentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListBonusPaymentsOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBonusPaymentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListBonusPaymentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bonusPayments = output.bonusPayments
            self.nextToken = output.nextToken
            self.numResults = output.numResults
        } else {
            self.bonusPayments = nil
            self.nextToken = nil
            self.numResults = nil
        }
    }
}

public struct ListBonusPaymentsOutputResponse: Swift.Equatable {
    /// A successful request to the ListBonusPayments operation returns a list of BonusPayment objects.
    public var bonusPayments: [MTurkClientTypes.BonusPayment]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of bonus payments on this page in the filtered results list, equivalent to the number of bonus payments being returned by this call.
    public var numResults: Swift.Int?

    public init (
        bonusPayments: [MTurkClientTypes.BonusPayment]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.bonusPayments = bonusPayments
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

struct ListBonusPaymentsOutputResponseBody: Swift.Equatable {
    let numResults: Swift.Int?
    let nextToken: Swift.String?
    let bonusPayments: [MTurkClientTypes.BonusPayment]?
}

extension ListBonusPaymentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bonusPayments = "BonusPayments"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let bonusPaymentsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.BonusPayment?].self, forKey: .bonusPayments)
        var bonusPaymentsDecoded0:[MTurkClientTypes.BonusPayment]? = nil
        if let bonusPaymentsContainer = bonusPaymentsContainer {
            bonusPaymentsDecoded0 = [MTurkClientTypes.BonusPayment]()
            for structure0 in bonusPaymentsContainer {
                if let structure0 = structure0 {
                    bonusPaymentsDecoded0?.append(structure0)
                }
            }
        }
        bonusPayments = bonusPaymentsDecoded0
    }
}

extension ListHITsForQualificationTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case qualificationTypeId = "QualificationTypeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
    }
}

extension ListHITsForQualificationTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListHITsForQualificationTypeInput: Swift.Equatable {
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination Token
    public var nextToken: Swift.String?
    /// The ID of the Qualification type to use when querying HITs.
    /// This member is required.
    public var qualificationTypeId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.qualificationTypeId = qualificationTypeId
    }
}

struct ListHITsForQualificationTypeInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListHITsForQualificationTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case qualificationTypeId = "QualificationTypeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHITsForQualificationTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHITsForQualificationTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListHITsForQualificationTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHITsForQualificationTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListHITsForQualificationTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hiTs = output.hiTs
            self.nextToken = output.nextToken
            self.numResults = output.numResults
        } else {
            self.hiTs = nil
            self.nextToken = nil
            self.numResults = nil
        }
    }
}

public struct ListHITsForQualificationTypeOutputResponse: Swift.Equatable {
    /// The list of HIT elements returned by the query.
    public var hiTs: [MTurkClientTypes.HIT]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
    public var numResults: Swift.Int?

    public init (
        hiTs: [MTurkClientTypes.HIT]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.hiTs = hiTs
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

struct ListHITsForQualificationTypeOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let numResults: Swift.Int?
    let hiTs: [MTurkClientTypes.HIT]?
}

extension ListHITsForQualificationTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hiTs = "HITs"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let hiTsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.HIT?].self, forKey: .hiTs)
        var hiTsDecoded0:[MTurkClientTypes.HIT]? = nil
        if let hiTsContainer = hiTsContainer {
            hiTsDecoded0 = [MTurkClientTypes.HIT]()
            for structure0 in hiTsContainer {
                if let structure0 = structure0 {
                    hiTsDecoded0?.append(structure0)
                }
            }
        }
        hiTs = hiTsDecoded0
    }
}

extension ListHITsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListHITsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListHITsInput: Swift.Equatable {
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListHITsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListHITsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListHITsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListHITsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListHITsOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHITsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListHITsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hiTs = output.hiTs
            self.nextToken = output.nextToken
            self.numResults = output.numResults
        } else {
            self.hiTs = nil
            self.nextToken = nil
            self.numResults = nil
        }
    }
}

public struct ListHITsOutputResponse: Swift.Equatable {
    /// The list of HIT elements returned by the query.
    public var hiTs: [MTurkClientTypes.HIT]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
    public var numResults: Swift.Int?

    public init (
        hiTs: [MTurkClientTypes.HIT]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.hiTs = hiTs
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

struct ListHITsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let numResults: Swift.Int?
    let hiTs: [MTurkClientTypes.HIT]?
}

extension ListHITsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hiTs = "HITs"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let hiTsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.HIT?].self, forKey: .hiTs)
        var hiTsDecoded0:[MTurkClientTypes.HIT]? = nil
        if let hiTsContainer = hiTsContainer {
            hiTsDecoded0 = [MTurkClientTypes.HIT]()
            for structure0 in hiTsContainer {
                if let structure0 = structure0 {
                    hiTsDecoded0?.append(structure0)
                }
            }
        }
        hiTs = hiTsDecoded0
    }
}

extension ListQualificationRequestsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case qualificationTypeId = "QualificationTypeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
    }
}

extension ListQualificationRequestsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListQualificationRequestsInput: Swift.Equatable {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The ID of the QualificationType.
    public var qualificationTypeId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.qualificationTypeId = qualificationTypeId
    }
}

struct ListQualificationRequestsInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListQualificationRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case qualificationTypeId = "QualificationTypeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListQualificationRequestsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQualificationRequestsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListQualificationRequestsOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQualificationRequestsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListQualificationRequestsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.numResults = output.numResults
            self.qualificationRequests = output.qualificationRequests
        } else {
            self.nextToken = nil
            self.numResults = nil
            self.qualificationRequests = nil
        }
    }
}

public struct ListQualificationRequestsOutputResponse: Swift.Equatable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of Qualification requests on this page in the filtered results list, equivalent to the number of Qualification requests being returned by this call.
    public var numResults: Swift.Int?
    /// The Qualification request. The response includes one QualificationRequest element for each Qualification request returned by the query.
    public var qualificationRequests: [MTurkClientTypes.QualificationRequest]?

    public init (
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        qualificationRequests: [MTurkClientTypes.QualificationRequest]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.qualificationRequests = qualificationRequests
    }
}

struct ListQualificationRequestsOutputResponseBody: Swift.Equatable {
    let numResults: Swift.Int?
    let nextToken: Swift.String?
    let qualificationRequests: [MTurkClientTypes.QualificationRequest]?
}

extension ListQualificationRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualificationRequests = "QualificationRequests"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let qualificationRequestsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequest?].self, forKey: .qualificationRequests)
        var qualificationRequestsDecoded0:[MTurkClientTypes.QualificationRequest]? = nil
        if let qualificationRequestsContainer = qualificationRequestsContainer {
            qualificationRequestsDecoded0 = [MTurkClientTypes.QualificationRequest]()
            for structure0 in qualificationRequestsContainer {
                if let structure0 = structure0 {
                    qualificationRequestsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequests = qualificationRequestsDecoded0
    }
}

extension ListQualificationTypesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case mustBeOwnedByCaller = "MustBeOwnedByCaller"
        case mustBeRequestable = "MustBeRequestable"
        case nextToken = "NextToken"
        case query = "Query"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let mustBeOwnedByCaller = self.mustBeOwnedByCaller {
            try encodeContainer.encode(mustBeOwnedByCaller, forKey: .mustBeOwnedByCaller)
        }
        if let mustBeRequestable = self.mustBeRequestable {
            try encodeContainer.encode(mustBeRequestable, forKey: .mustBeRequestable)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let query = self.query {
            try encodeContainer.encode(query, forKey: .query)
        }
    }
}

extension ListQualificationTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListQualificationTypesInput: Swift.Equatable {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types.
    public var mustBeOwnedByCaller: Swift.Bool?
    /// Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False.
    /// This member is required.
    public var mustBeRequestable: Swift.Bool?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A text query against all of the searchable attributes of Qualification types.
    public var query: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        mustBeOwnedByCaller: Swift.Bool? = nil,
        mustBeRequestable: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        query: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.mustBeOwnedByCaller = mustBeOwnedByCaller
        self.mustBeRequestable = mustBeRequestable
        self.nextToken = nextToken
        self.query = query
    }
}

struct ListQualificationTypesInputBody: Swift.Equatable {
    let query: Swift.String?
    let mustBeRequestable: Swift.Bool?
    let mustBeOwnedByCaller: Swift.Bool?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListQualificationTypesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case mustBeOwnedByCaller = "MustBeOwnedByCaller"
        case mustBeRequestable = "MustBeRequestable"
        case nextToken = "NextToken"
        case query = "Query"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .query)
        query = queryDecoded
        let mustBeRequestableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .mustBeRequestable)
        mustBeRequestable = mustBeRequestableDecoded
        let mustBeOwnedByCallerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .mustBeOwnedByCaller)
        mustBeOwnedByCaller = mustBeOwnedByCallerDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListQualificationTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListQualificationTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListQualificationTypesOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQualificationTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListQualificationTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.numResults = output.numResults
            self.qualificationTypes = output.qualificationTypes
        } else {
            self.nextToken = nil
            self.numResults = nil
            self.qualificationTypes = nil
        }
    }
}

public struct ListQualificationTypesOutputResponse: Swift.Equatable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of Qualification types on this page in the filtered results list, equivalent to the number of types this operation returns.
    public var numResults: Swift.Int?
    /// The list of QualificationType elements returned by the query.
    public var qualificationTypes: [MTurkClientTypes.QualificationType]?

    public init (
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        qualificationTypes: [MTurkClientTypes.QualificationType]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.qualificationTypes = qualificationTypes
    }
}

struct ListQualificationTypesOutputResponseBody: Swift.Equatable {
    let numResults: Swift.Int?
    let nextToken: Swift.String?
    let qualificationTypes: [MTurkClientTypes.QualificationType]?
}

extension ListQualificationTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualificationTypes = "QualificationTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let qualificationTypesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationType?].self, forKey: .qualificationTypes)
        var qualificationTypesDecoded0:[MTurkClientTypes.QualificationType]? = nil
        if let qualificationTypesContainer = qualificationTypesContainer {
            qualificationTypesDecoded0 = [MTurkClientTypes.QualificationType]()
            for structure0 in qualificationTypesContainer {
                if let structure0 = structure0 {
                    qualificationTypesDecoded0?.append(structure0)
                }
            }
        }
        qualificationTypes = qualificationTypesDecoded0
    }
}

extension ListReviewPolicyResultsForHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyLevels = "PolicyLevels"
        case retrieveActions = "RetrieveActions"
        case retrieveResults = "RetrieveResults"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let policyLevels = policyLevels {
            var policyLevelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyLevels)
            for reviewpolicylevel0 in policyLevels {
                try policyLevelsContainer.encode(reviewpolicylevel0.rawValue)
            }
        }
        if let retrieveActions = self.retrieveActions {
            try encodeContainer.encode(retrieveActions, forKey: .retrieveActions)
        }
        if let retrieveResults = self.retrieveResults {
            try encodeContainer.encode(retrieveResults, forKey: .retrieveResults)
        }
    }
}

extension ListReviewPolicyResultsForHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListReviewPolicyResultsForHITInput: Swift.Equatable {
    /// The unique identifier of the HIT to retrieve review results for.
    /// This member is required.
    public var hitId: Swift.String?
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?
    /// The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies.
    public var policyLevels: [MTurkClientTypes.ReviewPolicyLevel]?
    /// Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes.
    public var retrieveActions: Swift.Bool?
    /// Specify if the operation should retrieve a list of the results computed by the Review Policies.
    public var retrieveResults: Swift.Bool?

    public init (
        hitId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyLevels: [MTurkClientTypes.ReviewPolicyLevel]? = nil,
        retrieveActions: Swift.Bool? = nil,
        retrieveResults: Swift.Bool? = nil
    )
    {
        self.hitId = hitId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyLevels = policyLevels
        self.retrieveActions = retrieveActions
        self.retrieveResults = retrieveResults
    }
}

struct ListReviewPolicyResultsForHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let policyLevels: [MTurkClientTypes.ReviewPolicyLevel]?
    let retrieveActions: Swift.Bool?
    let retrieveResults: Swift.Bool?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListReviewPolicyResultsForHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case policyLevels = "PolicyLevels"
        case retrieveActions = "RetrieveActions"
        case retrieveResults = "RetrieveResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let policyLevelsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.ReviewPolicyLevel?].self, forKey: .policyLevels)
        var policyLevelsDecoded0:[MTurkClientTypes.ReviewPolicyLevel]? = nil
        if let policyLevelsContainer = policyLevelsContainer {
            policyLevelsDecoded0 = [MTurkClientTypes.ReviewPolicyLevel]()
            for string0 in policyLevelsContainer {
                if let string0 = string0 {
                    policyLevelsDecoded0?.append(string0)
                }
            }
        }
        policyLevels = policyLevelsDecoded0
        let retrieveActionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retrieveActions)
        retrieveActions = retrieveActionsDecoded
        let retrieveResultsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retrieveResults)
        retrieveResults = retrieveResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListReviewPolicyResultsForHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReviewPolicyResultsForHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListReviewPolicyResultsForHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReviewPolicyResultsForHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListReviewPolicyResultsForHITOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assignmentReviewPolicy = output.assignmentReviewPolicy
            self.assignmentReviewReport = output.assignmentReviewReport
            self.hitId = output.hitId
            self.hitReviewPolicy = output.hitReviewPolicy
            self.hitReviewReport = output.hitReviewReport
            self.nextToken = output.nextToken
        } else {
            self.assignmentReviewPolicy = nil
            self.assignmentReviewReport = nil
            self.hitId = nil
            self.hitReviewPolicy = nil
            self.hitReviewReport = nil
            self.nextToken = nil
        }
    }
}

public struct ListReviewPolicyResultsForHITOutputResponse: Swift.Equatable {
    /// The name of the Assignment-level Review Policy. This contains only the PolicyName element.
    public var assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// Contains both ReviewResult and ReviewAction elements for an Assignment.
    public var assignmentReviewReport: MTurkClientTypes.ReviewReport?
    /// The HITId of the HIT for which results have been returned.
    public var hitId: Swift.String?
    /// The name of the HIT-level Review Policy. This contains only the PolicyName element.
    public var hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// Contains both ReviewResult and ReviewAction elements for a particular HIT.
    public var hitReviewReport: MTurkClientTypes.ReviewReport?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        assignmentReviewReport: MTurkClientTypes.ReviewReport? = nil,
        hitId: Swift.String? = nil,
        hitReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        hitReviewReport: MTurkClientTypes.ReviewReport? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assignmentReviewPolicy = assignmentReviewPolicy
        self.assignmentReviewReport = assignmentReviewReport
        self.hitId = hitId
        self.hitReviewPolicy = hitReviewPolicy
        self.hitReviewReport = hitReviewReport
        self.nextToken = nextToken
    }
}

struct ListReviewPolicyResultsForHITOutputResponseBody: Swift.Equatable {
    let hitId: Swift.String?
    let assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let assignmentReviewReport: MTurkClientTypes.ReviewReport?
    let hitReviewReport: MTurkClientTypes.ReviewReport?
    let nextToken: Swift.String?
}

extension ListReviewPolicyResultsForHITOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case assignmentReviewReport = "AssignmentReviewReport"
        case hitId = "HITId"
        case hitReviewPolicy = "HITReviewPolicy"
        case hitReviewReport = "HITReviewReport"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let assignmentReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .assignmentReviewPolicy)
        assignmentReviewPolicy = assignmentReviewPolicyDecoded
        let hitReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .hitReviewPolicy)
        hitReviewPolicy = hitReviewPolicyDecoded
        let assignmentReviewReportDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewReport.self, forKey: .assignmentReviewReport)
        assignmentReviewReport = assignmentReviewReportDecoded
        let hitReviewReportDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewReport.self, forKey: .hitReviewReport)
        hitReviewReport = hitReviewReportDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListReviewableHITsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitTypeId = "HITTypeId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitTypeId = self.hitTypeId {
            try encodeContainer.encode(hitTypeId, forKey: .hitTypeId)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListReviewableHITsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListReviewableHITsInput: Swift.Equatable {
    /// The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered
    public var hitTypeId: Swift.String?
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination Token
    public var nextToken: Swift.String?
    /// Can be either Reviewable or Reviewing. Reviewable is the default value.
    public var status: MTurkClientTypes.ReviewableHITStatus?

    public init (
        hitTypeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: MTurkClientTypes.ReviewableHITStatus? = nil
    )
    {
        self.hitTypeId = hitTypeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListReviewableHITsInputBody: Swift.Equatable {
    let hitTypeId: Swift.String?
    let status: MTurkClientTypes.ReviewableHITStatus?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListReviewableHITsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitTypeId = "HITTypeId"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitTypeId)
        hitTypeId = hitTypeIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewableHITStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListReviewableHITsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReviewableHITsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListReviewableHITsOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReviewableHITsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListReviewableHITsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hiTs = output.hiTs
            self.nextToken = output.nextToken
            self.numResults = output.numResults
        } else {
            self.hiTs = nil
            self.nextToken = nil
            self.numResults = nil
        }
    }
}

public struct ListReviewableHITsOutputResponse: Swift.Equatable {
    /// The list of HIT elements returned by the query.
    public var hiTs: [MTurkClientTypes.HIT]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
    public var numResults: Swift.Int?

    public init (
        hiTs: [MTurkClientTypes.HIT]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.hiTs = hiTs
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

struct ListReviewableHITsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let numResults: Swift.Int?
    let hiTs: [MTurkClientTypes.HIT]?
}

extension ListReviewableHITsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hiTs = "HITs"
        case nextToken = "NextToken"
        case numResults = "NumResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let hiTsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.HIT?].self, forKey: .hiTs)
        var hiTsDecoded0:[MTurkClientTypes.HIT]? = nil
        if let hiTsContainer = hiTsContainer {
            hiTsDecoded0 = [MTurkClientTypes.HIT]()
            for structure0 in hiTsContainer {
                if let structure0 = structure0 {
                    hiTsDecoded0?.append(structure0)
                }
            }
        }
        hiTs = hiTsDecoded0
    }
}

extension ListWorkerBlocksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListWorkerBlocksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWorkerBlocksInput: Swift.Equatable {
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListWorkerBlocksInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListWorkerBlocksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListWorkerBlocksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkerBlocksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListWorkerBlocksOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkerBlocksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListWorkerBlocksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.numResults = output.numResults
            self.workerBlocks = output.workerBlocks
        } else {
            self.nextToken = nil
            self.numResults = nil
            self.workerBlocks = nil
        }
    }
}

public struct ListWorkerBlocksOutputResponse: Swift.Equatable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
    public var numResults: Swift.Int?
    /// The list of WorkerBlocks, containing the collection of Worker IDs and reasons for blocking.
    public var workerBlocks: [MTurkClientTypes.WorkerBlock]?

    public init (
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        workerBlocks: [MTurkClientTypes.WorkerBlock]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.workerBlocks = workerBlocks
    }
}

struct ListWorkerBlocksOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let numResults: Swift.Int?
    let workerBlocks: [MTurkClientTypes.WorkerBlock]?
}

extension ListWorkerBlocksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case workerBlocks = "WorkerBlocks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let workerBlocksContainer = try containerValues.decodeIfPresent([MTurkClientTypes.WorkerBlock?].self, forKey: .workerBlocks)
        var workerBlocksDecoded0:[MTurkClientTypes.WorkerBlock]? = nil
        if let workerBlocksContainer = workerBlocksContainer {
            workerBlocksDecoded0 = [MTurkClientTypes.WorkerBlock]()
            for structure0 in workerBlocksContainer {
                if let structure0 = structure0 {
                    workerBlocksDecoded0?.append(structure0)
                }
            }
        }
        workerBlocks = workerBlocksDecoded0
    }
}

extension ListWorkersWithQualificationTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case qualificationTypeId = "QualificationTypeId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListWorkersWithQualificationTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWorkersWithQualificationTypeInput: Swift.Equatable {
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination Token
    public var nextToken: Swift.String?
    /// The ID of the Qualification type of the Qualifications to return.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// The status of the Qualifications to return. Can be Granted | Revoked.
    public var status: MTurkClientTypes.QualificationStatus?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil,
        status: MTurkClientTypes.QualificationStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.qualificationTypeId = qualificationTypeId
        self.status = status
    }
}

struct ListWorkersWithQualificationTypeInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
    let status: MTurkClientTypes.QualificationStatus?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListWorkersWithQualificationTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case qualificationTypeId = "QualificationTypeId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListWorkersWithQualificationTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkersWithQualificationTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListWorkersWithQualificationTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkersWithQualificationTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListWorkersWithQualificationTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.numResults = output.numResults
            self.qualifications = output.qualifications
        } else {
            self.nextToken = nil
            self.numResults = nil
            self.qualifications = nil
        }
    }
}

public struct ListWorkersWithQualificationTypeOutputResponse: Swift.Equatable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of Qualifications on this page in the filtered results list, equivalent to the number of Qualifications being returned by this call.
    public var numResults: Swift.Int?
    /// The list of Qualification elements returned by this call.
    public var qualifications: [MTurkClientTypes.Qualification]?

    public init (
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        qualifications: [MTurkClientTypes.Qualification]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.qualifications = qualifications
    }
}

struct ListWorkersWithQualificationTypeOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let numResults: Swift.Int?
    let qualifications: [MTurkClientTypes.Qualification]?
}

extension ListWorkersWithQualificationTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualifications = "Qualifications"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let qualificationsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.Qualification?].self, forKey: .qualifications)
        var qualificationsDecoded0:[MTurkClientTypes.Qualification]? = nil
        if let qualificationsContainer = qualificationsContainer {
            qualificationsDecoded0 = [MTurkClientTypes.Qualification]()
            for structure0 in qualificationsContainer {
                if let structure0 = structure0 {
                    qualificationsDecoded0?.append(structure0)
                }
            }
        }
        qualifications = qualificationsDecoded0
    }
}

extension MTurkClientTypes.Locale: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case country = "Country"
        case subdivision = "Subdivision"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let subdivision = self.subdivision {
            try encodeContainer.encode(subdivision, forKey: .subdivision)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let subdivisionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdivision)
        subdivision = subdivisionDecoded
    }
}

extension MTurkClientTypes {
    /// The Locale data structure represents a geographical region or location.
    public struct Locale: Swift.Equatable {
        /// The country of the locale. Must be a valid ISO 3166 country code. For example, the code US refers to the United States of America.
        /// This member is required.
        public var country: Swift.String?
        /// The state or subdivision of the locale. A valid ISO 3166-2 subdivision code. For example, the code WA refers to the state of Washington.
        public var subdivision: Swift.String?

        public init (
            country: Swift.String? = nil,
            subdivision: Swift.String? = nil
        )
        {
            self.country = country
            self.subdivision = subdivision
        }
    }

}

extension MTurkClientTypes.NotificationSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case eventTypes = "EventTypes"
        case transport = "Transport"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let eventTypes = eventTypes {
            var eventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTypes)
            for eventtype0 in eventTypes {
                try eventTypesContainer.encode(eventtype0.rawValue)
            }
        }
        if let transport = self.transport {
            try encodeContainer.encode(transport.rawValue, forKey: .transport)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let transportDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.NotificationTransport.self, forKey: .transport)
        transport = transportDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let eventTypesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.EventType?].self, forKey: .eventTypes)
        var eventTypesDecoded0:[MTurkClientTypes.EventType]? = nil
        if let eventTypesContainer = eventTypesContainer {
            eventTypesDecoded0 = [MTurkClientTypes.EventType]()
            for string0 in eventTypesContainer {
                if let string0 = string0 {
                    eventTypesDecoded0?.append(string0)
                }
            }
        }
        eventTypes = eventTypesDecoded0
    }
}

extension MTurkClientTypes {
    /// The NotificationSpecification data structure describes a HIT event notification for a HIT type.
    public struct NotificationSpecification: Swift.Equatable {
        /// The target for notification messages. The Destination’s format is determined by the specified Transport:
        ///
        /// * When Transport is Email, the Destination is your email address.
        ///
        /// * When Transport is SQS, the Destination is your queue URL.
        ///
        /// * When Transport is SNS, the Destination is the ARN of your topic.
        /// This member is required.
        public var destination: Swift.String?
        /// The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation.
        /// This member is required.
        public var eventTypes: [MTurkClientTypes.EventType]?
        /// The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS.
        /// This member is required.
        public var transport: MTurkClientTypes.NotificationTransport?
        /// The version of the Notification API to use. Valid value is 2006-05-05.
        /// This member is required.
        public var version: Swift.String?

        public init (
            destination: Swift.String? = nil,
            eventTypes: [MTurkClientTypes.EventType]? = nil,
            transport: MTurkClientTypes.NotificationTransport? = nil,
            version: Swift.String? = nil
        )
        {
            self.destination = destination
            self.eventTypes = eventTypes
            self.transport = transport
            self.version = version
        }
    }

}

extension MTurkClientTypes {
    public enum NotificationTransport: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case sns
        case sqs
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationTransport] {
            return [
                .email,
                .sns,
                .sqs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case .sns: return "SNS"
            case .sqs: return "SQS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotificationTransport(rawValue: rawValue) ?? NotificationTransport.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes {
    public enum NotifyWorkersFailureCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hardfailure
        case softfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [NotifyWorkersFailureCode] {
            return [
                .hardfailure,
                .softfailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hardfailure: return "HardFailure"
            case .softfailure: return "SoftFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NotifyWorkersFailureCode(rawValue: rawValue) ?? NotifyWorkersFailureCode.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes.NotifyWorkersFailureStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notifyWorkersFailureCode = "NotifyWorkersFailureCode"
        case notifyWorkersFailureMessage = "NotifyWorkersFailureMessage"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notifyWorkersFailureCode = self.notifyWorkersFailureCode {
            try encodeContainer.encode(notifyWorkersFailureCode.rawValue, forKey: .notifyWorkersFailureCode)
        }
        if let notifyWorkersFailureMessage = self.notifyWorkersFailureMessage {
            try encodeContainer.encode(notifyWorkersFailureMessage, forKey: .notifyWorkersFailureMessage)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notifyWorkersFailureCodeDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.NotifyWorkersFailureCode.self, forKey: .notifyWorkersFailureCode)
        notifyWorkersFailureCode = notifyWorkersFailureCodeDecoded
        let notifyWorkersFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notifyWorkersFailureMessage)
        notifyWorkersFailureMessage = notifyWorkersFailureMessageDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
    }
}

extension MTurkClientTypes {
    /// When MTurk encounters an issue with notifying the Workers you specified, it returns back this object with failure details.
    public struct NotifyWorkersFailureStatus: Swift.Equatable {
        /// Encoded value for the failure type.
        public var notifyWorkersFailureCode: MTurkClientTypes.NotifyWorkersFailureCode?
        /// A message detailing the reason the Worker could not be notified.
        public var notifyWorkersFailureMessage: Swift.String?
        /// The ID of the Worker.
        public var workerId: Swift.String?

        public init (
            notifyWorkersFailureCode: MTurkClientTypes.NotifyWorkersFailureCode? = nil,
            notifyWorkersFailureMessage: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.notifyWorkersFailureCode = notifyWorkersFailureCode
            self.notifyWorkersFailureMessage = notifyWorkersFailureMessage
            self.workerId = workerId
        }
    }

}

extension NotifyWorkersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageText = "MessageText"
        case subject = "Subject"
        case workerIds = "WorkerIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageText = self.messageText {
            try encodeContainer.encode(messageText, forKey: .messageText)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let workerIds = workerIds {
            var workerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workerIds)
            for customerid0 in workerIds {
                try workerIdsContainer.encode(customerid0)
            }
        }
    }
}

extension NotifyWorkersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct NotifyWorkersInput: Swift.Equatable {
    /// The text of the email message to send. Can include up to 4,096 characters
    /// This member is required.
    public var messageText: Swift.String?
    /// The subject line of the email message to send. Can include up to 200 characters.
    /// This member is required.
    public var subject: Swift.String?
    /// A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.
    /// This member is required.
    public var workerIds: [Swift.String]?

    public init (
        messageText: Swift.String? = nil,
        subject: Swift.String? = nil,
        workerIds: [Swift.String]? = nil
    )
    {
        self.messageText = messageText
        self.subject = subject
        self.workerIds = workerIds
    }
}

struct NotifyWorkersInputBody: Swift.Equatable {
    let subject: Swift.String?
    let messageText: Swift.String?
    let workerIds: [Swift.String]?
}

extension NotifyWorkersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageText = "MessageText"
        case subject = "Subject"
        case workerIds = "WorkerIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let messageTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageText)
        messageText = messageTextDecoded
        let workerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .workerIds)
        var workerIdsDecoded0:[Swift.String]? = nil
        if let workerIdsContainer = workerIdsContainer {
            workerIdsDecoded0 = [Swift.String]()
            for string0 in workerIdsContainer {
                if let string0 = string0 {
                    workerIdsDecoded0?.append(string0)
                }
            }
        }
        workerIds = workerIdsDecoded0
    }
}

extension NotifyWorkersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension NotifyWorkersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum NotifyWorkersOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension NotifyWorkersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotifyWorkersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.notifyWorkersFailureStatuses = output.notifyWorkersFailureStatuses
        } else {
            self.notifyWorkersFailureStatuses = nil
        }
    }
}

public struct NotifyWorkersOutputResponse: Swift.Equatable {
    /// When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects.
    public var notifyWorkersFailureStatuses: [MTurkClientTypes.NotifyWorkersFailureStatus]?

    public init (
        notifyWorkersFailureStatuses: [MTurkClientTypes.NotifyWorkersFailureStatus]? = nil
    )
    {
        self.notifyWorkersFailureStatuses = notifyWorkersFailureStatuses
    }
}

struct NotifyWorkersOutputResponseBody: Swift.Equatable {
    let notifyWorkersFailureStatuses: [MTurkClientTypes.NotifyWorkersFailureStatus]?
}

extension NotifyWorkersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notifyWorkersFailureStatuses = "NotifyWorkersFailureStatuses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notifyWorkersFailureStatusesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.NotifyWorkersFailureStatus?].self, forKey: .notifyWorkersFailureStatuses)
        var notifyWorkersFailureStatusesDecoded0:[MTurkClientTypes.NotifyWorkersFailureStatus]? = nil
        if let notifyWorkersFailureStatusesContainer = notifyWorkersFailureStatusesContainer {
            notifyWorkersFailureStatusesDecoded0 = [MTurkClientTypes.NotifyWorkersFailureStatus]()
            for structure0 in notifyWorkersFailureStatusesContainer {
                if let structure0 = structure0 {
                    notifyWorkersFailureStatusesDecoded0?.append(structure0)
                }
            }
        }
        notifyWorkersFailureStatuses = notifyWorkersFailureStatusesDecoded0
    }
}

extension MTurkClientTypes.ParameterMapEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for string0 in values {
                try valuesContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension MTurkClientTypes {
    /// This data structure is the data type for the AnswerKey parameter of the ScoreMyKnownAnswers/2011-09-01 Review Policy.
    public struct ParameterMapEntry: Swift.Equatable {
        /// The QuestionID from the HIT that is used to identify which question requires Mechanical Turk to score as part of the ScoreMyKnownAnswers/2011-09-01 Review Policy.
        public var key: Swift.String?
        /// The list of answers to the question specified in the MapEntry Key element. The Worker must match all values in order for the answer to be scored correctly.
        public var values: [Swift.String]?

        public init (
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

extension MTurkClientTypes.PolicyParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case mapEntries = "MapEntries"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let mapEntries = mapEntries {
            var mapEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mapEntries)
            for parametermapentry0 in mapEntries {
                try mapEntriesContainer.encode(parametermapentry0)
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for string0 in values {
                try valuesContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let mapEntriesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.ParameterMapEntry?].self, forKey: .mapEntries)
        var mapEntriesDecoded0:[MTurkClientTypes.ParameterMapEntry]? = nil
        if let mapEntriesContainer = mapEntriesContainer {
            mapEntriesDecoded0 = [MTurkClientTypes.ParameterMapEntry]()
            for structure0 in mapEntriesContainer {
                if let structure0 = structure0 {
                    mapEntriesDecoded0?.append(structure0)
                }
            }
        }
        mapEntries = mapEntriesDecoded0
    }
}

extension MTurkClientTypes {
    /// Name of the parameter from the Review policy.
    public struct PolicyParameter: Swift.Equatable {
        /// Name of the parameter from the list of Review Polices.
        public var key: Swift.String?
        /// List of ParameterMapEntry objects.
        public var mapEntries: [MTurkClientTypes.ParameterMapEntry]?
        /// The list of values of the Parameter
        public var values: [Swift.String]?

        public init (
            key: Swift.String? = nil,
            mapEntries: [MTurkClientTypes.ParameterMapEntry]? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.mapEntries = mapEntries
            self.values = values
        }
    }

}

extension MTurkClientTypes.Qualification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTime = "GrantTime"
        case integerValue = "IntegerValue"
        case localeValue = "LocaleValue"
        case qualificationTypeId = "QualificationTypeId"
        case status = "Status"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantTime = self.grantTime {
            try encodeContainer.encodeTimestamp(grantTime, format: .epochSeconds, forKey: .grantTime)
        }
        if let integerValue = self.integerValue {
            try encodeContainer.encode(integerValue, forKey: .integerValue)
        }
        if let localeValue = self.localeValue {
            try encodeContainer.encode(localeValue, forKey: .localeValue)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let grantTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .grantTime)
        grantTime = grantTimeDecoded
        let integerValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .integerValue)
        integerValue = integerValueDecoded
        let localeValueDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.Locale.self, forKey: .localeValue)
        localeValue = localeValueDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension MTurkClientTypes {
    /// The Qualification data structure represents a Qualification assigned to a user, including the Qualification type and the value (score).
    public struct Qualification: Swift.Equatable {
        /// The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.
        public var grantTime: ClientRuntime.Date?
        /// The value (score) of the Qualification, if the Qualification has an integer value.
        public var integerValue: Swift.Int?
        /// The Locale data structure represents a geographical region or location.
        public var localeValue: MTurkClientTypes.Locale?
        /// The ID of the Qualification type for the Qualification.
        public var qualificationTypeId: Swift.String?
        /// The status of the Qualification. Valid values are Granted | Revoked.
        public var status: MTurkClientTypes.QualificationStatus?
        /// The ID of the Worker who possesses the Qualification.
        public var workerId: Swift.String?

        public init (
            grantTime: ClientRuntime.Date? = nil,
            integerValue: Swift.Int? = nil,
            localeValue: MTurkClientTypes.Locale? = nil,
            qualificationTypeId: Swift.String? = nil,
            status: MTurkClientTypes.QualificationStatus? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.grantTime = grantTime
            self.integerValue = integerValue
            self.localeValue = localeValue
            self.qualificationTypeId = qualificationTypeId
            self.status = status
            self.workerId = workerId
        }
    }

}

extension MTurkClientTypes.QualificationRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answer = "Answer"
        case qualificationRequestId = "QualificationRequestId"
        case qualificationTypeId = "QualificationTypeId"
        case submitTime = "SubmitTime"
        case test = "Test"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answer = self.answer {
            try encodeContainer.encode(answer, forKey: .answer)
        }
        if let qualificationRequestId = self.qualificationRequestId {
            try encodeContainer.encode(qualificationRequestId, forKey: .qualificationRequestId)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let test = self.test {
            try encodeContainer.encode(test, forKey: .test)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationRequestId)
        qualificationRequestId = qualificationRequestIdDecoded
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let testDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .test)
        test = testDecoded
        let answerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .answer)
        answer = answerDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
    }
}

extension MTurkClientTypes {
    /// The QualificationRequest data structure represents a request a Worker has made for a Qualification.
    public struct QualificationRequest: Swift.Equatable {
        /// The Worker's answers for the Qualification type's test contained in a QuestionFormAnswers document, if the type has a test and the Worker has submitted answers. If the Worker does not provide any answers, Answer may be empty.
        public var answer: Swift.String?
        /// The ID of the Qualification request, a unique identifier generated when the request was submitted.
        public var qualificationRequestId: Swift.String?
        /// The ID of the Qualification type the Worker is requesting, as returned by the CreateQualificationType operation.
        public var qualificationTypeId: Swift.String?
        /// The date and time the Qualification request had a status of Submitted. This is either the time the Worker submitted answers for a Qualification test, or the time the Worker requested the Qualification if the Qualification type does not have a test.
        public var submitTime: ClientRuntime.Date?
        /// The contents of the Qualification test that was presented to the Worker, if the type has a test and the Worker has submitted answers. This value is identical to the QuestionForm associated with the Qualification type at the time the Worker requests the Qualification.
        public var test: Swift.String?
        /// The ID of the Worker requesting the Qualification.
        public var workerId: Swift.String?

        public init (
            answer: Swift.String? = nil,
            qualificationRequestId: Swift.String? = nil,
            qualificationTypeId: Swift.String? = nil,
            submitTime: ClientRuntime.Date? = nil,
            test: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.answer = answer
            self.qualificationRequestId = qualificationRequestId
            self.qualificationTypeId = qualificationTypeId
            self.submitTime = submitTime
            self.test = test
            self.workerId = workerId
        }
    }

}

extension MTurkClientTypes.QualificationRequirement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsGuarded = "ActionsGuarded"
        case comparator = "Comparator"
        case integerValues = "IntegerValues"
        case localeValues = "LocaleValues"
        case qualificationTypeId = "QualificationTypeId"
        case requiredToPreview = "RequiredToPreview"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionsGuarded = self.actionsGuarded {
            try encodeContainer.encode(actionsGuarded.rawValue, forKey: .actionsGuarded)
        }
        if let comparator = self.comparator {
            try encodeContainer.encode(comparator.rawValue, forKey: .comparator)
        }
        if let integerValues = integerValues {
            var integerValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerValues)
            for integer0 in integerValues {
                try integerValuesContainer.encode(integer0)
            }
        }
        if let localeValues = localeValues {
            var localeValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localeValues)
            for locale0 in localeValues {
                try localeValuesContainer.encode(locale0)
            }
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let requiredToPreview = self.requiredToPreview {
            try encodeContainer.encode(requiredToPreview, forKey: .requiredToPreview)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let comparatorDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.Comparator.self, forKey: .comparator)
        comparator = comparatorDecoded
        let integerValuesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .integerValues)
        var integerValuesDecoded0:[Swift.Int]? = nil
        if let integerValuesContainer = integerValuesContainer {
            integerValuesDecoded0 = [Swift.Int]()
            for integer0 in integerValuesContainer {
                if let integer0 = integer0 {
                    integerValuesDecoded0?.append(integer0)
                }
            }
        }
        integerValues = integerValuesDecoded0
        let localeValuesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.Locale?].self, forKey: .localeValues)
        var localeValuesDecoded0:[MTurkClientTypes.Locale]? = nil
        if let localeValuesContainer = localeValuesContainer {
            localeValuesDecoded0 = [MTurkClientTypes.Locale]()
            for structure0 in localeValuesContainer {
                if let structure0 = structure0 {
                    localeValuesDecoded0?.append(structure0)
                }
            }
        }
        localeValues = localeValuesDecoded0
        let requiredToPreviewDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requiredToPreview)
        requiredToPreview = requiredToPreviewDecoded
        let actionsGuardedDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HITAccessActions.self, forKey: .actionsGuarded)
        actionsGuarded = actionsGuardedDecoded
    }
}

extension MTurkClientTypes {
    /// The QualificationRequirement data structure describes a Qualification that a Worker must have before the Worker is allowed to accept a HIT. A requirement may optionally state that a Worker must have the Qualification in order to preview the HIT, or see the HIT in search results.
    public struct QualificationRequirement: Swift.Equatable {
        /// Setting this attribute prevents Workers whose Qualifications do not meet this QualificationRequirement from taking the specified action. Valid arguments include "Accept" (Worker cannot accept the HIT, but can preview the HIT and see it in their search results), "PreviewAndAccept" (Worker cannot accept or preview the HIT, but can see the HIT in their search results), and "DiscoverPreviewAndAccept" (Worker cannot accept, preview, or see the HIT in their search results). It's possible for you to create a HIT with multiple QualificationRequirements (which can have different values for the ActionGuarded attribute). In this case, the Worker is only permitted to perform an action when they have met all QualificationRequirements guarding the action. The actions in the order of least restrictive to most restrictive are Discover, Preview and Accept. For example, if a Worker meets all QualificationRequirements that are set to DiscoverPreviewAndAccept, but do not meet all requirements that are set with PreviewAndAccept, then the Worker will be able to Discover, i.e. see the HIT in their search result, but will not be able to Preview or Accept the HIT. ActionsGuarded should not be used in combination with the RequiredToPreview field.
        public var actionsGuarded: MTurkClientTypes.HITAccessActions?
        /// The kind of comparison to make against a Qualification's value. You can compare a Qualification's value to an IntegerValue to see if it is LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue. You can compare it to a LocaleValue to see if it is EqualTo, or NotEqualTo the LocaleValue. You can check to see if the value is In or NotIn a set of IntegerValue or LocaleValue values. Lastly, a Qualification requirement can also test if a Qualification Exists or DoesNotExist in the user's profile, regardless of its value.
        /// This member is required.
        public var comparator: MTurkClientTypes.Comparator?
        /// The integer value to compare against the Qualification's value. IntegerValue must not be present if Comparator is Exists or DoesNotExist. IntegerValue can only be used if the Qualification type has an integer value; it cannot be used with the Worker_Locale QualificationType ID. When performing a set comparison by using the In or the NotIn comparator, you can use up to 15 IntegerValue elements in a QualificationRequirement data structure.
        public var integerValues: [Swift.Int]?
        /// The locale value to compare against the Qualification's value. The local value must be a valid ISO 3166 country code or supports ISO 3166-2 subdivisions. LocaleValue can only be used with a Worker_Locale QualificationType ID. LocaleValue can only be used with the EqualTo, NotEqualTo, In, and NotIn comparators. You must only use a single LocaleValue element when using the EqualTo or NotEqualTo comparators. When performing a set comparison by using the In or the NotIn comparator, you can use up to 30 LocaleValue elements in a QualificationRequirement data structure.
        public var localeValues: [MTurkClientTypes.Locale]?
        /// The ID of the Qualification type for the requirement.
        /// This member is required.
        public var qualificationTypeId: Swift.String?
        /// DEPRECATED: Use the ActionsGuarded field instead. If RequiredToPreview is true, the question data for the HIT will not be shown when a Worker whose Qualifications do not meet this requirement tries to preview the HIT. That is, a Worker's Qualifications must meet all of the requirements for which RequiredToPreview is true in order to preview the HIT. If a Worker meets all of the requirements where RequiredToPreview is true (or if there are no such requirements), but does not meet all of the requirements for the HIT, the Worker will be allowed to preview the HIT's question data, but will not be allowed to accept and complete the HIT. The default is false. This should not be used in combination with the ActionsGuarded field.
        @available(*, deprecated)
        public var requiredToPreview: Swift.Bool?

        public init (
            actionsGuarded: MTurkClientTypes.HITAccessActions? = nil,
            comparator: MTurkClientTypes.Comparator? = nil,
            integerValues: [Swift.Int]? = nil,
            localeValues: [MTurkClientTypes.Locale]? = nil,
            qualificationTypeId: Swift.String? = nil,
            requiredToPreview: Swift.Bool? = nil
        )
        {
            self.actionsGuarded = actionsGuarded
            self.comparator = comparator
            self.integerValues = integerValues
            self.localeValues = localeValues
            self.qualificationTypeId = qualificationTypeId
            self.requiredToPreview = requiredToPreview
        }
    }

}

extension MTurkClientTypes {
    public enum QualificationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case granted
        case revoked
        case sdkUnknown(Swift.String)

        public static var allCases: [QualificationStatus] {
            return [
                .granted,
                .revoked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .granted: return "Granted"
            case .revoked: return "Revoked"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QualificationStatus(rawValue: rawValue) ?? QualificationStatus.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes.QualificationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerKey = "AnswerKey"
        case autoGranted = "AutoGranted"
        case autoGrantedValue = "AutoGrantedValue"
        case creationTime = "CreationTime"
        case description = "Description"
        case isRequestable = "IsRequestable"
        case keywords = "Keywords"
        case name = "Name"
        case qualificationTypeId = "QualificationTypeId"
        case qualificationTypeStatus = "QualificationTypeStatus"
        case retryDelayInSeconds = "RetryDelayInSeconds"
        case test = "Test"
        case testDurationInSeconds = "TestDurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answerKey = self.answerKey {
            try encodeContainer.encode(answerKey, forKey: .answerKey)
        }
        if let autoGranted = self.autoGranted {
            try encodeContainer.encode(autoGranted, forKey: .autoGranted)
        }
        if let autoGrantedValue = self.autoGrantedValue {
            try encodeContainer.encode(autoGrantedValue, forKey: .autoGrantedValue)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let isRequestable = self.isRequestable {
            try encodeContainer.encode(isRequestable, forKey: .isRequestable)
        }
        if let keywords = self.keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let qualificationTypeStatus = self.qualificationTypeStatus {
            try encodeContainer.encode(qualificationTypeStatus.rawValue, forKey: .qualificationTypeStatus)
        }
        if let retryDelayInSeconds = self.retryDelayInSeconds {
            try encodeContainer.encode(retryDelayInSeconds, forKey: .retryDelayInSeconds)
        }
        if let test = self.test {
            try encodeContainer.encode(test, forKey: .test)
        }
        if let testDurationInSeconds = self.testDurationInSeconds {
            try encodeContainer.encode(testDurationInSeconds, forKey: .testDurationInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let qualificationTypeStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationTypeStatus.self, forKey: .qualificationTypeStatus)
        qualificationTypeStatus = qualificationTypeStatusDecoded
        let testDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .test)
        test = testDecoded
        let testDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .testDurationInSeconds)
        testDurationInSeconds = testDurationInSecondsDecoded
        let answerKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .answerKey)
        answerKey = answerKeyDecoded
        let retryDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryDelayInSeconds)
        retryDelayInSeconds = retryDelayInSecondsDecoded
        let isRequestableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRequestable)
        isRequestable = isRequestableDecoded
        let autoGrantedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoGranted)
        autoGranted = autoGrantedDecoded
        let autoGrantedValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoGrantedValue)
        autoGrantedValue = autoGrantedValueDecoded
    }
}

extension MTurkClientTypes {
    /// The QualificationType data structure represents a Qualification type, a description of a property of a Worker that must match the requirements of a HIT for the Worker to be able to accept the HIT. The type also describes how a Worker can obtain a Qualification of that type, such as through a Qualification test.
    public struct QualificationType: Swift.Equatable {
        /// The answers to the Qualification test specified in the Test parameter.
        public var answerKey: Swift.String?
        /// Specifies that requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Valid values are True | False.
        public var autoGranted: Swift.Bool?
        /// The Qualification integer value to use for automatically granted Qualifications, if AutoGranted is true. This is 1 by default.
        public var autoGrantedValue: Swift.Int?
        /// The date and time the Qualification type was created.
        public var creationTime: ClientRuntime.Date?
        /// A long description for the Qualification type.
        public var description: Swift.String?
        /// Specifies whether the Qualification type is one that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test. This value is False for Qualifications assigned automatically by the system. Valid values are True | False.
        public var isRequestable: Swift.Bool?
        /// One or more words or phrases that describe theQualification type, separated by commas. The Keywords make the type easier to find using a search.
        public var keywords: Swift.String?
        /// The name of the Qualification type. The type name is used to identify the type, and to find the type using a Qualification type search.
        public var name: Swift.String?
        /// A unique identifier for the Qualification type. A Qualification type is given a Qualification type ID when you call the CreateQualificationType operation.
        public var qualificationTypeId: Swift.String?
        /// The status of the Qualification type. A Qualification type's status determines if users can apply to receive a Qualification of this type, and if HITs can be created with requirements based on this type. Valid values are Active | Inactive.
        public var qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
        /// The amount of time, in seconds, Workers must wait after taking the Qualification test before they can take it again. Workers can take a Qualification test multiple times if they were not granted the Qualification from a previous attempt, or if the test offers a gradient score and they want a better score. If not specified, retries are disabled and Workers can request a Qualification only once.
        public var retryDelayInSeconds: Swift.Int?
        /// The questions for a Qualification test associated with this Qualification type that a user can take to obtain a Qualification of this type. This parameter must be specified if AnswerKey is present. A Qualification type cannot have both a specified Test parameter and an AutoGranted value of true.
        public var test: Swift.String?
        /// The amount of time, in seconds, given to a Worker to complete the Qualification test, beginning from the time the Worker requests the Qualification.
        public var testDurationInSeconds: Swift.Int?

        public init (
            answerKey: Swift.String? = nil,
            autoGranted: Swift.Bool? = nil,
            autoGrantedValue: Swift.Int? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            isRequestable: Swift.Bool? = nil,
            keywords: Swift.String? = nil,
            name: Swift.String? = nil,
            qualificationTypeId: Swift.String? = nil,
            qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus? = nil,
            retryDelayInSeconds: Swift.Int? = nil,
            test: Swift.String? = nil,
            testDurationInSeconds: Swift.Int? = nil
        )
        {
            self.answerKey = answerKey
            self.autoGranted = autoGranted
            self.autoGrantedValue = autoGrantedValue
            self.creationTime = creationTime
            self.description = description
            self.isRequestable = isRequestable
            self.keywords = keywords
            self.name = name
            self.qualificationTypeId = qualificationTypeId
            self.qualificationTypeStatus = qualificationTypeStatus
            self.retryDelayInSeconds = retryDelayInSeconds
            self.test = test
            self.testDurationInSeconds = testDurationInSeconds
        }
    }

}

extension MTurkClientTypes {
    public enum QualificationTypeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [QualificationTypeStatus] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QualificationTypeStatus(rawValue: rawValue) ?? QualificationTypeStatus.sdkUnknown(rawValue)
        }
    }
}

extension RejectAssignmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case requesterFeedback = "RequesterFeedback"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let requesterFeedback = self.requesterFeedback {
            try encodeContainer.encode(requesterFeedback, forKey: .requesterFeedback)
        }
    }
}

extension RejectAssignmentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RejectAssignmentInput: Swift.Equatable {
    /// The ID of the assignment. The assignment must correspond to a HIT created by the Requester.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// A message for the Worker, which the Worker can see in the Status section of the web site.
    /// This member is required.
    public var requesterFeedback: Swift.String?

    public init (
        assignmentId: Swift.String? = nil,
        requesterFeedback: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.requesterFeedback = requesterFeedback
    }
}

struct RejectAssignmentInputBody: Swift.Equatable {
    let assignmentId: Swift.String?
    let requesterFeedback: Swift.String?
}

extension RejectAssignmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case requesterFeedback = "RequesterFeedback"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let requesterFeedbackDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterFeedback)
        requesterFeedback = requesterFeedbackDecoded
    }
}

extension RejectAssignmentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectAssignmentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RejectAssignmentOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectAssignmentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RejectAssignmentOutputResponse: Swift.Equatable {

    public init () { }
}

extension RejectQualificationRequestInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationRequestId = "QualificationRequestId"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qualificationRequestId = self.qualificationRequestId {
            try encodeContainer.encode(qualificationRequestId, forKey: .qualificationRequestId)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }
}

extension RejectQualificationRequestInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RejectQualificationRequestInput: Swift.Equatable {
    /// The ID of the Qualification request, as returned by the ListQualificationRequests operation.
    /// This member is required.
    public var qualificationRequestId: Swift.String?
    /// A text message explaining why the request was rejected, to be shown to the Worker who made the request.
    public var reason: Swift.String?

    public init (
        qualificationRequestId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.qualificationRequestId = qualificationRequestId
        self.reason = reason
    }
}

struct RejectQualificationRequestInputBody: Swift.Equatable {
    let qualificationRequestId: Swift.String?
    let reason: Swift.String?
}

extension RejectQualificationRequestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationRequestId = "QualificationRequestId"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationRequestId)
        qualificationRequestId = qualificationRequestIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension RejectQualificationRequestOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectQualificationRequestOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RejectQualificationRequestOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectQualificationRequestOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RejectQualificationRequestOutputResponse: Swift.Equatable {

    public init () { }
}

extension RequestError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RequestErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.turkErrorCode = output.turkErrorCode
        } else {
            self.message = nil
            self.turkErrorCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your request is invalid.
public struct RequestError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var turkErrorCode: Swift.String?

    public init (
        message: Swift.String? = nil,
        turkErrorCode: Swift.String? = nil
    )
    {
        self.message = message
        self.turkErrorCode = turkErrorCode
    }
}

struct RequestErrorBody: Swift.Equatable {
    let message: Swift.String?
    let turkErrorCode: Swift.String?
}

extension RequestErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case turkErrorCode = "TurkErrorCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let turkErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .turkErrorCode)
        turkErrorCode = turkErrorCodeDecoded
    }
}

extension MTurkClientTypes.ReviewActionDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId = "ActionId"
        case actionName = "ActionName"
        case completeTime = "CompleteTime"
        case errorCode = "ErrorCode"
        case result = "Result"
        case status = "Status"
        case targetId = "TargetId"
        case targetType = "TargetType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionId = self.actionId {
            try encodeContainer.encode(actionId, forKey: .actionId)
        }
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let completeTime = self.completeTime {
            try encodeContainer.encodeTimestamp(completeTime, format: .epochSeconds, forKey: .completeTime)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let targetType = self.targetType {
            try encodeContainer.encode(targetType, forKey: .targetType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewActionStatus.self, forKey: .status)
        status = statusDecoded
        let completeTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .completeTime)
        completeTime = completeTimeDecoded
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
    }
}

extension MTurkClientTypes {
    /// Both the AssignmentReviewReport and the HITReviewReport elements contains the ReviewActionDetail data structure. This structure is returned multiple times for each action specified in the Review Policy.
    public struct ReviewActionDetail: Swift.Equatable {
        /// The unique identifier for the action.
        public var actionId: Swift.String?
        /// The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary.
        public var actionName: Swift.String?
        /// The date when the action was completed.
        public var completeTime: ClientRuntime.Date?
        /// Present only when the Results have a FAILED Status.
        public var errorCode: Swift.String?
        /// A description of the outcome of the review.
        public var result: Swift.String?
        /// The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED.
        public var status: MTurkClientTypes.ReviewActionStatus?
        /// The specific HITId or AssignmentID targeted by the action.
        public var targetId: Swift.String?
        /// The type of object in TargetId.
        public var targetType: Swift.String?

        public init (
            actionId: Swift.String? = nil,
            actionName: Swift.String? = nil,
            completeTime: ClientRuntime.Date? = nil,
            errorCode: Swift.String? = nil,
            result: Swift.String? = nil,
            status: MTurkClientTypes.ReviewActionStatus? = nil,
            targetId: Swift.String? = nil,
            targetType: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.actionName = actionName
            self.completeTime = completeTime
            self.errorCode = errorCode
            self.result = result
            self.status = status
            self.targetId = targetId
            self.targetType = targetType
        }
    }

}

extension MTurkClientTypes {
    public enum ReviewActionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case intended
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewActionStatus] {
            return [
                .cancelled,
                .failed,
                .intended,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .intended: return "Intended"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReviewActionStatus(rawValue: rawValue) ?? ReviewActionStatus.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes.ReviewPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for policyparameter0 in parameters {
                try parametersContainer.encode(policyparameter0)
            }
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let parametersContainer = try containerValues.decodeIfPresent([MTurkClientTypes.PolicyParameter?].self, forKey: .parameters)
        var parametersDecoded0:[MTurkClientTypes.PolicyParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [MTurkClientTypes.PolicyParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension MTurkClientTypes {
    /// HIT Review Policy data structures represent HIT review policies, which you specify when you create a HIT.
    public struct ReviewPolicy: Swift.Equatable {
        /// Name of the parameter from the Review policy.
        public var parameters: [MTurkClientTypes.PolicyParameter]?
        /// Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01
        /// This member is required.
        public var policyName: Swift.String?

        public init (
            parameters: [MTurkClientTypes.PolicyParameter]? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.parameters = parameters
            self.policyName = policyName
        }
    }

}

extension MTurkClientTypes {
    public enum ReviewPolicyLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case assignment
        case hit
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewPolicyLevel] {
            return [
                .assignment,
                .hit,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .assignment: return "Assignment"
            case .hit: return "HIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReviewPolicyLevel(rawValue: rawValue) ?? ReviewPolicyLevel.sdkUnknown(rawValue)
        }
    }
}

extension MTurkClientTypes.ReviewReport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reviewActions = "ReviewActions"
        case reviewResults = "ReviewResults"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reviewActions = reviewActions {
            var reviewActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reviewActions)
            for reviewactiondetail0 in reviewActions {
                try reviewActionsContainer.encode(reviewactiondetail0)
            }
        }
        if let reviewResults = reviewResults {
            var reviewResultsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reviewResults)
            for reviewresultdetail0 in reviewResults {
                try reviewResultsContainer.encode(reviewresultdetail0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reviewResultsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.ReviewResultDetail?].self, forKey: .reviewResults)
        var reviewResultsDecoded0:[MTurkClientTypes.ReviewResultDetail]? = nil
        if let reviewResultsContainer = reviewResultsContainer {
            reviewResultsDecoded0 = [MTurkClientTypes.ReviewResultDetail]()
            for structure0 in reviewResultsContainer {
                if let structure0 = structure0 {
                    reviewResultsDecoded0?.append(structure0)
                }
            }
        }
        reviewResults = reviewResultsDecoded0
        let reviewActionsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.ReviewActionDetail?].self, forKey: .reviewActions)
        var reviewActionsDecoded0:[MTurkClientTypes.ReviewActionDetail]? = nil
        if let reviewActionsContainer = reviewActionsContainer {
            reviewActionsDecoded0 = [MTurkClientTypes.ReviewActionDetail]()
            for structure0 in reviewActionsContainer {
                if let structure0 = structure0 {
                    reviewActionsDecoded0?.append(structure0)
                }
            }
        }
        reviewActions = reviewActionsDecoded0
    }
}

extension MTurkClientTypes {
    /// Contains both ReviewResult and ReviewAction elements for a particular HIT.
    public struct ReviewReport: Swift.Equatable {
        /// A list of ReviewAction objects for each action specified in the Review Policy.
        public var reviewActions: [MTurkClientTypes.ReviewActionDetail]?
        /// A list of ReviewResults objects for each action specified in the Review Policy.
        public var reviewResults: [MTurkClientTypes.ReviewResultDetail]?

        public init (
            reviewActions: [MTurkClientTypes.ReviewActionDetail]? = nil,
            reviewResults: [MTurkClientTypes.ReviewResultDetail]? = nil
        )
        {
            self.reviewActions = reviewActions
            self.reviewResults = reviewResults
        }
    }

}

extension MTurkClientTypes.ReviewResultDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId = "ActionId"
        case key = "Key"
        case questionId = "QuestionId"
        case subjectId = "SubjectId"
        case subjectType = "SubjectType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionId = self.actionId {
            try encodeContainer.encode(actionId, forKey: .actionId)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let questionId = self.questionId {
            try encodeContainer.encode(questionId, forKey: .questionId)
        }
        if let subjectId = self.subjectId {
            try encodeContainer.encode(subjectId, forKey: .subjectId)
        }
        if let subjectType = self.subjectType {
            try encodeContainer.encode(subjectType, forKey: .subjectType)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let subjectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectId)
        subjectId = subjectIdDecoded
        let subjectTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectType)
        subjectType = subjectTypeDecoded
        let questionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .questionId)
        questionId = questionIdDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MTurkClientTypes {
    /// This data structure is returned multiple times for each result specified in the Review Policy.
    public struct ReviewResultDetail: Swift.Equatable {
        /// A unique identifier of the Review action result.
        public var actionId: Swift.String?
        /// Key identifies the particular piece of reviewed information.
        public var key: Swift.String?
        /// Specifies the QuestionId the result is describing. Depending on whether the TargetType is a HIT or Assignment this results could specify multiple values. If TargetType is HIT and QuestionId is absent, then the result describes results of the HIT, including the HIT agreement score. If ObjectType is Assignment and QuestionId is absent, then the result describes the Worker's performance on the HIT.
        public var questionId: Swift.String?
        /// The HITID or AssignmentId about which this result was taken. Note that HIT-level Review Policies will often emit results about both the HIT itself and its Assignments, while Assignment-level review policies generally only emit results about the Assignment itself.
        public var subjectId: Swift.String?
        /// The type of the object from the SubjectId field.
        public var subjectType: Swift.String?
        /// The values of Key provided by the review policies you have selected.
        public var value: Swift.String?

        public init (
            actionId: Swift.String? = nil,
            key: Swift.String? = nil,
            questionId: Swift.String? = nil,
            subjectId: Swift.String? = nil,
            subjectType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.key = key
            self.questionId = questionId
            self.subjectId = subjectId
            self.subjectType = subjectType
            self.value = value
        }
    }

}

extension MTurkClientTypes {
    public enum ReviewableHITStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case reviewable
        case reviewing
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewableHITStatus] {
            return [
                .reviewable,
                .reviewing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .reviewable: return "Reviewable"
            case .reviewing: return "Reviewing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReviewableHITStatus(rawValue: rawValue) ?? ReviewableHITStatus.sdkUnknown(rawValue)
        }
    }
}

extension SendBonusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case bonusAmount = "BonusAmount"
        case reason = "Reason"
        case uniqueRequestToken = "UniqueRequestToken"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentId = self.assignmentId {
            try encodeContainer.encode(assignmentId, forKey: .assignmentId)
        }
        if let bonusAmount = self.bonusAmount {
            try encodeContainer.encode(bonusAmount, forKey: .bonusAmount)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let uniqueRequestToken = self.uniqueRequestToken {
            try encodeContainer.encode(uniqueRequestToken, forKey: .uniqueRequestToken)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }
}

extension SendBonusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendBonusInput: Swift.Equatable {
    /// The ID of the assignment for which this bonus is paid.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// The Bonus amount is a US Dollar amount specified using a string (for example, "5" represents $5.00 USD and "101.42" represents $101.42 USD). Do not include currency symbols or currency codes.
    /// This member is required.
    public var bonusAmount: Swift.String?
    /// A message that explains the reason for the bonus payment. The Worker receiving the bonus can see this message.
    /// This member is required.
    public var reason: Swift.String?
    /// A unique identifier for this request, which allows you to retry the call on error without granting multiple bonuses. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the bonus already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID.
    public var uniqueRequestToken: Swift.String?
    /// The ID of the Worker being paid the bonus.
    /// This member is required.
    public var workerId: Swift.String?

    public init (
        assignmentId: Swift.String? = nil,
        bonusAmount: Swift.String? = nil,
        reason: Swift.String? = nil,
        uniqueRequestToken: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.bonusAmount = bonusAmount
        self.reason = reason
        self.uniqueRequestToken = uniqueRequestToken
        self.workerId = workerId
    }
}

struct SendBonusInputBody: Swift.Equatable {
    let workerId: Swift.String?
    let bonusAmount: Swift.String?
    let assignmentId: Swift.String?
    let reason: Swift.String?
    let uniqueRequestToken: Swift.String?
}

extension SendBonusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentId = "AssignmentId"
        case bonusAmount = "BonusAmount"
        case reason = "Reason"
        case uniqueRequestToken = "UniqueRequestToken"
        case workerId = "WorkerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let bonusAmountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bonusAmount)
        bonusAmount = bonusAmountDecoded
        let assignmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignmentId)
        assignmentId = assignmentIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let uniqueRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueRequestToken)
        uniqueRequestToken = uniqueRequestTokenDecoded
    }
}

extension SendBonusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendBonusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendBonusOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendBonusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SendBonusOutputResponse: Swift.Equatable {

    public init () { }
}

extension SendTestEventNotificationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notification = "Notification"
        case testEventType = "TestEventType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notification = self.notification {
            try encodeContainer.encode(notification, forKey: .notification)
        }
        if let testEventType = self.testEventType {
            try encodeContainer.encode(testEventType.rawValue, forKey: .testEventType)
        }
    }
}

extension SendTestEventNotificationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendTestEventNotificationInput: Swift.Equatable {
    /// The notification specification to test. This value is identical to the value you would provide to the UpdateNotificationSettings operation when you establish the notification specification for a HIT type.
    /// This member is required.
    public var notification: MTurkClientTypes.NotificationSpecification?
    /// The event to simulate to test the notification specification. This event is included in the test message even if the notification specification does not include the event type. The notification specification does not filter out the test event.
    /// This member is required.
    public var testEventType: MTurkClientTypes.EventType?

    public init (
        notification: MTurkClientTypes.NotificationSpecification? = nil,
        testEventType: MTurkClientTypes.EventType? = nil
    )
    {
        self.notification = notification
        self.testEventType = testEventType
    }
}

struct SendTestEventNotificationInputBody: Swift.Equatable {
    let notification: MTurkClientTypes.NotificationSpecification?
    let testEventType: MTurkClientTypes.EventType?
}

extension SendTestEventNotificationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notification = "Notification"
        case testEventType = "TestEventType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.NotificationSpecification.self, forKey: .notification)
        notification = notificationDecoded
        let testEventTypeDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.EventType.self, forKey: .testEventType)
        testEventType = testEventTypeDecoded
    }
}

extension SendTestEventNotificationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendTestEventNotificationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendTestEventNotificationOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendTestEventNotificationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SendTestEventNotificationOutputResponse: Swift.Equatable {

    public init () { }
}

extension ServiceFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.turkErrorCode = output.turkErrorCode
        } else {
            self.message = nil
            self.turkErrorCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Mechanical Turk is temporarily unable to process your request. Try your call again.
public struct ServiceFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?
    public var turkErrorCode: Swift.String?

    public init (
        message: Swift.String? = nil,
        turkErrorCode: Swift.String? = nil
    )
    {
        self.message = message
        self.turkErrorCode = turkErrorCode
    }
}

struct ServiceFaultBody: Swift.Equatable {
    let message: Swift.String?
    let turkErrorCode: Swift.String?
}

extension ServiceFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case turkErrorCode = "TurkErrorCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let turkErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .turkErrorCode)
        turkErrorCode = turkErrorCodeDecoded
    }
}

extension UpdateExpirationForHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expireAt = "ExpireAt"
        case hitId = "HITId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expireAt = self.expireAt {
            try encodeContainer.encodeTimestamp(expireAt, format: .epochSeconds, forKey: .expireAt)
        }
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
    }
}

extension UpdateExpirationForHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateExpirationForHITInput: Swift.Equatable {
    /// The date and time at which you want the HIT to expire
    /// This member is required.
    public var expireAt: ClientRuntime.Date?
    /// The HIT to update.
    /// This member is required.
    public var hitId: Swift.String?

    public init (
        expireAt: ClientRuntime.Date? = nil,
        hitId: Swift.String? = nil
    )
    {
        self.expireAt = expireAt
        self.hitId = hitId
    }
}

struct UpdateExpirationForHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let expireAt: ClientRuntime.Date?
}

extension UpdateExpirationForHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expireAt = "ExpireAt"
        case hitId = "HITId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let expireAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expireAt)
        expireAt = expireAtDecoded
    }
}

extension UpdateExpirationForHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateExpirationForHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateExpirationForHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateExpirationForHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateExpirationForHITOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateHITReviewStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case revert = "Revert"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let revert = self.revert {
            try encodeContainer.encode(revert, forKey: .revert)
        }
    }
}

extension UpdateHITReviewStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateHITReviewStatusInput: Swift.Equatable {
    /// The ID of the HIT to update.
    /// This member is required.
    public var hitId: Swift.String?
    /// Specifies how to update the HIT status. Default is False.
    ///
    /// * Setting this to false will only transition a HIT from Reviewable to Reviewing
    ///
    /// * Setting this to true will only transition a HIT from Reviewing to Reviewable
    public var revert: Swift.Bool?

    public init (
        hitId: Swift.String? = nil,
        revert: Swift.Bool? = nil
    )
    {
        self.hitId = hitId
        self.revert = revert
    }
}

struct UpdateHITReviewStatusInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let revert: Swift.Bool?
}

extension UpdateHITReviewStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case revert = "Revert"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let revertDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .revert)
        revert = revertDecoded
    }
}

extension UpdateHITReviewStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateHITReviewStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateHITReviewStatusOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateHITReviewStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateHITReviewStatusOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateHITTypeOfHITInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case hitTypeId = "HITTypeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hitId = self.hitId {
            try encodeContainer.encode(hitId, forKey: .hitId)
        }
        if let hitTypeId = self.hitTypeId {
            try encodeContainer.encode(hitTypeId, forKey: .hitTypeId)
        }
    }
}

extension UpdateHITTypeOfHITInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateHITTypeOfHITInput: Swift.Equatable {
    /// The HIT to update.
    /// This member is required.
    public var hitId: Swift.String?
    /// The ID of the new HIT type.
    /// This member is required.
    public var hitTypeId: Swift.String?

    public init (
        hitId: Swift.String? = nil,
        hitTypeId: Swift.String? = nil
    )
    {
        self.hitId = hitId
        self.hitTypeId = hitTypeId
    }
}

struct UpdateHITTypeOfHITInputBody: Swift.Equatable {
    let hitId: Swift.String?
    let hitTypeId: Swift.String?
}

extension UpdateHITTypeOfHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hitId = "HITId"
        case hitTypeId = "HITTypeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitId)
        hitId = hitIdDecoded
        let hitTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitTypeId)
        hitTypeId = hitTypeIdDecoded
    }
}

extension UpdateHITTypeOfHITOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateHITTypeOfHITOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateHITTypeOfHITOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateHITTypeOfHITOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateHITTypeOfHITOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateNotificationSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
        case hitTypeId = "HITTypeId"
        case notification = "Notification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let active = self.active {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let hitTypeId = self.hitTypeId {
            try encodeContainer.encode(hitTypeId, forKey: .hitTypeId)
        }
        if let notification = self.notification {
            try encodeContainer.encode(notification, forKey: .notification)
        }
    }
}

extension UpdateNotificationSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateNotificationSettingsInput: Swift.Equatable {
    /// Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed.
    public var active: Swift.Bool?
    /// The ID of the HIT type whose notification specification is being updated.
    /// This member is required.
    public var hitTypeId: Swift.String?
    /// The notification specification for the HIT type.
    public var notification: MTurkClientTypes.NotificationSpecification?

    public init (
        active: Swift.Bool? = nil,
        hitTypeId: Swift.String? = nil,
        notification: MTurkClientTypes.NotificationSpecification? = nil
    )
    {
        self.active = active
        self.hitTypeId = hitTypeId
        self.notification = notification
    }
}

struct UpdateNotificationSettingsInputBody: Swift.Equatable {
    let hitTypeId: Swift.String?
    let notification: MTurkClientTypes.NotificationSpecification?
    let active: Swift.Bool?
}

extension UpdateNotificationSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
        case hitTypeId = "HITTypeId"
        case notification = "Notification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hitTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hitTypeId)
        hitTypeId = hitTypeIdDecoded
        let notificationDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.NotificationSpecification.self, forKey: .notification)
        notification = notificationDecoded
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
    }
}

extension UpdateNotificationSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNotificationSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateNotificationSettingsOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNotificationSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateNotificationSettingsOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateQualificationTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerKey = "AnswerKey"
        case autoGranted = "AutoGranted"
        case autoGrantedValue = "AutoGrantedValue"
        case description = "Description"
        case qualificationTypeId = "QualificationTypeId"
        case qualificationTypeStatus = "QualificationTypeStatus"
        case retryDelayInSeconds = "RetryDelayInSeconds"
        case test = "Test"
        case testDurationInSeconds = "TestDurationInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answerKey = self.answerKey {
            try encodeContainer.encode(answerKey, forKey: .answerKey)
        }
        if let autoGranted = self.autoGranted {
            try encodeContainer.encode(autoGranted, forKey: .autoGranted)
        }
        if let autoGrantedValue = self.autoGrantedValue {
            try encodeContainer.encode(autoGrantedValue, forKey: .autoGrantedValue)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let qualificationTypeId = self.qualificationTypeId {
            try encodeContainer.encode(qualificationTypeId, forKey: .qualificationTypeId)
        }
        if let qualificationTypeStatus = self.qualificationTypeStatus {
            try encodeContainer.encode(qualificationTypeStatus.rawValue, forKey: .qualificationTypeStatus)
        }
        if let retryDelayInSeconds = self.retryDelayInSeconds {
            try encodeContainer.encode(retryDelayInSeconds, forKey: .retryDelayInSeconds)
        }
        if let test = self.test {
            try encodeContainer.encode(test, forKey: .test)
        }
        if let testDurationInSeconds = self.testDurationInSeconds {
            try encodeContainer.encode(testDurationInSeconds, forKey: .testDurationInSeconds)
        }
    }
}

extension UpdateQualificationTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateQualificationTypeInput: Swift.Equatable {
    /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.
    public var answerKey: Swift.String?
    /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
    public var autoGranted: Swift.Bool?
    /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
    public var autoGrantedValue: Swift.Int?
    /// The new description of the Qualification type.
    public var description: Swift.String?
    /// The ID of the Qualification type to update.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// The new status of the Qualification type - Active | Inactive
    public var qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
    /// The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.
    public var retryDelayInSeconds: Swift.Int?
    /// The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified. Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
    public var test: Swift.String?
    /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
    public var testDurationInSeconds: Swift.Int?

    public init (
        answerKey: Swift.String? = nil,
        autoGranted: Swift.Bool? = nil,
        autoGrantedValue: Swift.Int? = nil,
        description: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil,
        qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus? = nil,
        retryDelayInSeconds: Swift.Int? = nil,
        test: Swift.String? = nil,
        testDurationInSeconds: Swift.Int? = nil
    )
    {
        self.answerKey = answerKey
        self.autoGranted = autoGranted
        self.autoGrantedValue = autoGrantedValue
        self.description = description
        self.qualificationTypeId = qualificationTypeId
        self.qualificationTypeStatus = qualificationTypeStatus
        self.retryDelayInSeconds = retryDelayInSeconds
        self.test = test
        self.testDurationInSeconds = testDurationInSeconds
    }
}

struct UpdateQualificationTypeInputBody: Swift.Equatable {
    let qualificationTypeId: Swift.String?
    let description: Swift.String?
    let qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
    let test: Swift.String?
    let answerKey: Swift.String?
    let testDurationInSeconds: Swift.Int?
    let retryDelayInSeconds: Swift.Int?
    let autoGranted: Swift.Bool?
    let autoGrantedValue: Swift.Int?
}

extension UpdateQualificationTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerKey = "AnswerKey"
        case autoGranted = "AutoGranted"
        case autoGrantedValue = "AutoGrantedValue"
        case description = "Description"
        case qualificationTypeId = "QualificationTypeId"
        case qualificationTypeStatus = "QualificationTypeStatus"
        case retryDelayInSeconds = "RetryDelayInSeconds"
        case test = "Test"
        case testDurationInSeconds = "TestDurationInSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .qualificationTypeId)
        qualificationTypeId = qualificationTypeIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let qualificationTypeStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationTypeStatus.self, forKey: .qualificationTypeStatus)
        qualificationTypeStatus = qualificationTypeStatusDecoded
        let testDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .test)
        test = testDecoded
        let answerKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .answerKey)
        answerKey = answerKeyDecoded
        let testDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .testDurationInSeconds)
        testDurationInSeconds = testDurationInSecondsDecoded
        let retryDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryDelayInSeconds)
        retryDelayInSeconds = retryDelayInSecondsDecoded
        let autoGrantedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoGranted)
        autoGranted = autoGrantedDecoded
        let autoGrantedValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoGrantedValue)
        autoGrantedValue = autoGrantedValueDecoded
    }
}

extension UpdateQualificationTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateQualificationTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "RequestError" : self = .requestError(try RequestError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceFault" : self = .serviceFault(try ServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateQualificationTypeOutputError: Swift.Error, Swift.Equatable {
    case requestError(RequestError)
    case serviceFault(ServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateQualificationTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateQualificationTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.qualificationType = output.qualificationType
        } else {
            self.qualificationType = nil
        }
    }
}

public struct UpdateQualificationTypeOutputResponse: Swift.Equatable {
    /// Contains a QualificationType data structure.
    public var qualificationType: MTurkClientTypes.QualificationType?

    public init (
        qualificationType: MTurkClientTypes.QualificationType? = nil
    )
    {
        self.qualificationType = qualificationType
    }
}

struct UpdateQualificationTypeOutputResponseBody: Swift.Equatable {
    let qualificationType: MTurkClientTypes.QualificationType?
}

extension UpdateQualificationTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qualificationType = "QualificationType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let qualificationTypeDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.QualificationType.self, forKey: .qualificationType)
        qualificationType = qualificationTypeDecoded
    }
}

extension MTurkClientTypes.WorkerBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
        case workerId = "WorkerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let workerId = self.workerId {
            try encodeContainer.encode(workerId, forKey: .workerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerId)
        workerId = workerIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension MTurkClientTypes {
    /// The WorkerBlock data structure represents a Worker who has been blocked. It has two elements: the WorkerId and the Reason for the block.
    public struct WorkerBlock: Swift.Equatable {
        /// A message explaining the reason the Worker was blocked.
        public var reason: Swift.String?
        /// The ID of the Worker who accepted the HIT.
        public var workerId: Swift.String?

        public init (
            reason: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.reason = reason
            self.workerId = workerId
        }
    }

}
