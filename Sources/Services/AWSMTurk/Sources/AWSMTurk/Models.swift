//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// Your request is invalid.
public struct RequestError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var turkErrorCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        turkErrorCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.turkErrorCode = turkErrorCode
    }
}

/// Amazon Mechanical Turk is temporarily unable to process your request. Try your call again.
public struct ServiceFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var turkErrorCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceFault" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        turkErrorCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.turkErrorCode = turkErrorCode
    }
}

public struct AcceptQualificationRequestInput: Swift.Sendable {
    /// The value of the Qualification. You can omit this value if you are using the presence or absence of the Qualification as the basis for a HIT requirement.
    public var integerValue: Swift.Int?
    /// The ID of the Qualification request, as returned by the GetQualificationRequests operation.
    /// This member is required.
    public var qualificationRequestId: Swift.String?

    public init(
        integerValue: Swift.Int? = nil,
        qualificationRequestId: Swift.String? = nil
    )
    {
        self.integerValue = integerValue
        self.qualificationRequestId = qualificationRequestId
    }
}

public struct AcceptQualificationRequestOutput: Swift.Sendable {

    public init() { }
}

public struct ApproveAssignmentInput: Swift.Sendable {
    /// The ID of the assignment. The assignment must correspond to a HIT created by the Requester.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// A flag indicating that an assignment should be approved even if it was previously rejected. Defaults to False.
    public var overrideRejection: Swift.Bool?
    /// A message for the Worker, which the Worker can see in the Status section of the web site.
    public var requesterFeedback: Swift.String?

    public init(
        assignmentId: Swift.String? = nil,
        overrideRejection: Swift.Bool? = nil,
        requesterFeedback: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.overrideRejection = overrideRejection
        self.requesterFeedback = requesterFeedback
    }
}

public struct ApproveAssignmentOutput: Swift.Sendable {

    public init() { }
}

extension MTurkClientTypes {

    public enum AssignmentStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approved
        case rejected
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [AssignmentStatus] {
            return [
                .approved,
                .rejected,
                .submitted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .rejected: return "Rejected"
            case .submitted: return "Submitted"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// The Assignment data structure represents a single assignment of a HIT to a Worker. The assignment tracks the Worker's efforts to complete the HIT, and contains the results for later retrieval.
    public struct Assignment: Swift.Sendable {
        /// The date and time the Worker accepted the assignment.
        public var acceptTime: Foundation.Date?
        /// The Worker's answers submitted for the HIT contained in a QuestionFormAnswers document, if the Worker provides an answer. If the Worker does not provide any answers, Answer may contain a QuestionFormAnswers document, or Answer may be empty.
        public var answer: Swift.String?
        /// If the Worker has submitted results and the Requester has approved the results, ApprovalTime is the date and time the Requester approved the results. This value is omitted from the assignment if the Requester has not yet approved the results.
        public var approvalTime: Foundation.Date?
        /// A unique identifier for the assignment.
        public var assignmentId: Swift.String?
        /// The status of the assignment.
        public var assignmentStatus: MTurkClientTypes.AssignmentStatus?
        /// If results have been submitted, AutoApprovalTime is the date and time the results of the assignment results are considered Approved automatically if they have not already been explicitly approved or rejected by the Requester. This value is derived from the auto-approval delay specified by the Requester in the HIT. This value is omitted from the assignment if the Worker has not yet submitted results.
        public var autoApprovalTime: Foundation.Date?
        /// The date and time of the deadline for the assignment. This value is derived from the deadline specification for the HIT and the date and time the Worker accepted the HIT.
        public var deadline: Foundation.Date?
        /// The ID of the HIT.
        public var hitId: Swift.String?
        /// If the Worker has submitted results and the Requester has rejected the results, RejectionTime is the date and time the Requester rejected the results.
        public var rejectionTime: Foundation.Date?
        /// The feedback string included with the call to the ApproveAssignment operation or the RejectAssignment operation, if the Requester approved or rejected the assignment and specified feedback.
        public var requesterFeedback: Swift.String?
        /// If the Worker has submitted results, SubmitTime is the date and time the assignment was submitted. This value is omitted from the assignment if the Worker has not yet submitted results.
        public var submitTime: Foundation.Date?
        /// The ID of the Worker who accepted the HIT.
        public var workerId: Swift.String?

        public init(
            acceptTime: Foundation.Date? = nil,
            answer: Swift.String? = nil,
            approvalTime: Foundation.Date? = nil,
            assignmentId: Swift.String? = nil,
            assignmentStatus: MTurkClientTypes.AssignmentStatus? = nil,
            autoApprovalTime: Foundation.Date? = nil,
            deadline: Foundation.Date? = nil,
            hitId: Swift.String? = nil,
            rejectionTime: Foundation.Date? = nil,
            requesterFeedback: Swift.String? = nil,
            submitTime: Foundation.Date? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.acceptTime = acceptTime
            self.answer = answer
            self.approvalTime = approvalTime
            self.assignmentId = assignmentId
            self.assignmentStatus = assignmentStatus
            self.autoApprovalTime = autoApprovalTime
            self.deadline = deadline
            self.hitId = hitId
            self.rejectionTime = rejectionTime
            self.requesterFeedback = requesterFeedback
            self.submitTime = submitTime
            self.workerId = workerId
        }
    }
}

public struct AssociateQualificationWithWorkerInput: Swift.Sendable {
    /// The value of the Qualification to assign.
    public var integerValue: Swift.Int?
    /// The ID of the Qualification type to use for the assigned Qualification.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// Specifies whether to send a notification email message to the Worker saying that the qualification was assigned to the Worker. Note: this is true by default.
    public var sendNotification: Swift.Bool?
    /// The ID of the Worker to whom the Qualification is being assigned. Worker IDs are included with submitted HIT assignments and Qualification requests.
    /// This member is required.
    public var workerId: Swift.String?

    public init(
        integerValue: Swift.Int? = nil,
        qualificationTypeId: Swift.String? = nil,
        sendNotification: Swift.Bool? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.integerValue = integerValue
        self.qualificationTypeId = qualificationTypeId
        self.sendNotification = sendNotification
        self.workerId = workerId
    }
}

public struct AssociateQualificationWithWorkerOutput: Swift.Sendable {

    public init() { }
}

extension MTurkClientTypes {

    /// An object representing a Bonus payment paid to a Worker.
    public struct BonusPayment: Swift.Sendable {
        /// The ID of the assignment associated with this bonus payment.
        public var assignmentId: Swift.String?
        /// A string representing a currency amount.
        public var bonusAmount: Swift.String?
        /// The date and time of when the bonus was granted.
        public var grantTime: Foundation.Date?
        /// The Reason text given when the bonus was granted, if any.
        public var reason: Swift.String?
        /// The ID of the Worker to whom the bonus was paid.
        public var workerId: Swift.String?

        public init(
            assignmentId: Swift.String? = nil,
            bonusAmount: Swift.String? = nil,
            grantTime: Foundation.Date? = nil,
            reason: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.assignmentId = assignmentId
            self.bonusAmount = bonusAmount
            self.grantTime = grantTime
            self.reason = reason
            self.workerId = workerId
        }
    }
}

extension MTurkClientTypes {

    public enum Comparator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case doesnotexist
        case equalto
        case exists
        case greaterthan
        case greaterthanorequalto
        case `in`
        case lessthan
        case lessthanorequalto
        case notequalto
        case notin
        case sdkUnknown(Swift.String)

        public static var allCases: [Comparator] {
            return [
                .doesnotexist,
                .equalto,
                .exists,
                .greaterthan,
                .greaterthanorequalto,
                .in,
                .lessthan,
                .lessthanorequalto,
                .notequalto,
                .notin
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .doesnotexist: return "DoesNotExist"
            case .equalto: return "EqualTo"
            case .exists: return "Exists"
            case .greaterthan: return "GreaterThan"
            case .greaterthanorequalto: return "GreaterThanOrEqualTo"
            case .in: return "In"
            case .lessthan: return "LessThan"
            case .lessthanorequalto: return "LessThanOrEqualTo"
            case .notequalto: return "NotEqualTo"
            case .notin: return "NotIn"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateAdditionalAssignmentsForHITInput: Swift.Sendable {
    /// The ID of the HIT to extend.
    /// This member is required.
    public var hitId: Swift.String?
    /// The number of additional assignments to request for this HIT.
    /// This member is required.
    public var numberOfAdditionalAssignments: Swift.Int?
    /// A unique identifier for this request, which allows you to retry the call on error without extending the HIT multiple times. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the extend HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID.
    public var uniqueRequestToken: Swift.String?

    public init(
        hitId: Swift.String? = nil,
        numberOfAdditionalAssignments: Swift.Int? = nil,
        uniqueRequestToken: Swift.String? = nil
    )
    {
        self.hitId = hitId
        self.numberOfAdditionalAssignments = numberOfAdditionalAssignments
        self.uniqueRequestToken = uniqueRequestToken
    }
}

public struct CreateAdditionalAssignmentsForHITOutput: Swift.Sendable {

    public init() { }
}

extension MTurkClientTypes {

    /// This data structure is the data type for the AnswerKey parameter of the ScoreMyKnownAnswers/2011-09-01 Review Policy.
    public struct ParameterMapEntry: Swift.Sendable {
        /// The QuestionID from the HIT that is used to identify which question requires Mechanical Turk to score as part of the ScoreMyKnownAnswers/2011-09-01 Review Policy.
        public var key: Swift.String?
        /// The list of answers to the question specified in the MapEntry Key element. The Worker must match all values in order for the answer to be scored correctly.
        public var values: [Swift.String]?

        public init(
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }
}

extension MTurkClientTypes {

    /// Name of the parameter from the Review policy.
    public struct PolicyParameter: Swift.Sendable {
        /// Name of the parameter from the list of Review Polices.
        public var key: Swift.String?
        /// List of ParameterMapEntry objects.
        public var mapEntries: [MTurkClientTypes.ParameterMapEntry]?
        /// The list of values of the Parameter
        public var values: [Swift.String]?

        public init(
            key: Swift.String? = nil,
            mapEntries: [MTurkClientTypes.ParameterMapEntry]? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.mapEntries = mapEntries
            self.values = values
        }
    }
}

extension MTurkClientTypes {

    /// HIT Review Policy data structures represent HIT review policies, which you specify when you create a HIT.
    public struct ReviewPolicy: Swift.Sendable {
        /// Name of the parameter from the Review policy.
        public var parameters: [MTurkClientTypes.PolicyParameter]?
        /// Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01
        /// This member is required.
        public var policyName: Swift.String?

        public init(
            parameters: [MTurkClientTypes.PolicyParameter]? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.parameters = parameters
            self.policyName = policyName
        }
    }
}

extension MTurkClientTypes {

    /// The HITLayoutParameter data structure defines parameter values used with a HITLayout. A HITLayout is a reusable Amazon Mechanical Turk project template used to provide Human Intelligence Task (HIT) question data for CreateHIT.
    public struct HITLayoutParameter: Swift.Sendable {
        /// The name of the parameter in the HITLayout.
        /// This member is required.
        public var name: Swift.String?
        /// The value substituted for the parameter referenced in the HITLayout.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension MTurkClientTypes {

    public enum HITAccessActions: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accept
        case discoverpreviewandaccept
        case previewandaccept
        case sdkUnknown(Swift.String)

        public static var allCases: [HITAccessActions] {
            return [
                .accept,
                .discoverpreviewandaccept,
                .previewandaccept
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accept: return "Accept"
            case .discoverpreviewandaccept: return "DiscoverPreviewAndAccept"
            case .previewandaccept: return "PreviewAndAccept"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// The Locale data structure represents a geographical region or location.
    public struct Locale: Swift.Sendable {
        /// The country of the locale. Must be a valid ISO 3166 country code. For example, the code US refers to the United States of America.
        /// This member is required.
        public var country: Swift.String?
        /// The state or subdivision of the locale. A valid ISO 3166-2 subdivision code. For example, the code WA refers to the state of Washington.
        public var subdivision: Swift.String?

        public init(
            country: Swift.String? = nil,
            subdivision: Swift.String? = nil
        )
        {
            self.country = country
            self.subdivision = subdivision
        }
    }
}

extension MTurkClientTypes {

    /// The QualificationRequirement data structure describes a Qualification that a Worker must have before the Worker is allowed to accept a HIT. A requirement may optionally state that a Worker must have the Qualification in order to preview the HIT, or see the HIT in search results.
    public struct QualificationRequirement: Swift.Sendable {
        /// Setting this attribute prevents Workers whose Qualifications do not meet this QualificationRequirement from taking the specified action. Valid arguments include "Accept" (Worker cannot accept the HIT, but can preview the HIT and see it in their search results), "PreviewAndAccept" (Worker cannot accept or preview the HIT, but can see the HIT in their search results), and "DiscoverPreviewAndAccept" (Worker cannot accept, preview, or see the HIT in their search results). It's possible for you to create a HIT with multiple QualificationRequirements (which can have different values for the ActionGuarded attribute). In this case, the Worker is only permitted to perform an action when they have met all QualificationRequirements guarding the action. The actions in the order of least restrictive to most restrictive are Discover, Preview and Accept. For example, if a Worker meets all QualificationRequirements that are set to DiscoverPreviewAndAccept, but do not meet all requirements that are set with PreviewAndAccept, then the Worker will be able to Discover, i.e. see the HIT in their search result, but will not be able to Preview or Accept the HIT. ActionsGuarded should not be used in combination with the RequiredToPreview field.
        public var actionsGuarded: MTurkClientTypes.HITAccessActions?
        /// The kind of comparison to make against a Qualification's value. You can compare a Qualification's value to an IntegerValue to see if it is LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue. You can compare it to a LocaleValue to see if it is EqualTo, or NotEqualTo the LocaleValue. You can check to see if the value is In or NotIn a set of IntegerValue or LocaleValue values. Lastly, a Qualification requirement can also test if a Qualification Exists or DoesNotExist in the user's profile, regardless of its value.
        /// This member is required.
        public var comparator: MTurkClientTypes.Comparator?
        /// The integer value to compare against the Qualification's value. IntegerValue must not be present if Comparator is Exists or DoesNotExist. IntegerValue can only be used if the Qualification type has an integer value; it cannot be used with the Worker_Locale QualificationType ID. When performing a set comparison by using the In or the NotIn comparator, you can use up to 15 IntegerValue elements in a QualificationRequirement data structure.
        public var integerValues: [Swift.Int]?
        /// The locale value to compare against the Qualification's value. The local value must be a valid ISO 3166 country code or supports ISO 3166-2 subdivisions. LocaleValue can only be used with a Worker_Locale QualificationType ID. LocaleValue can only be used with the EqualTo, NotEqualTo, In, and NotIn comparators. You must only use a single LocaleValue element when using the EqualTo or NotEqualTo comparators. When performing a set comparison by using the In or the NotIn comparator, you can use up to 30 LocaleValue elements in a QualificationRequirement data structure.
        public var localeValues: [MTurkClientTypes.Locale]?
        /// The ID of the Qualification type for the requirement.
        /// This member is required.
        public var qualificationTypeId: Swift.String?
        /// DEPRECATED: Use the ActionsGuarded field instead. If RequiredToPreview is true, the question data for the HIT will not be shown when a Worker whose Qualifications do not meet this requirement tries to preview the HIT. That is, a Worker's Qualifications must meet all of the requirements for which RequiredToPreview is true in order to preview the HIT. If a Worker meets all of the requirements where RequiredToPreview is true (or if there are no such requirements), but does not meet all of the requirements for the HIT, the Worker will be allowed to preview the HIT's question data, but will not be allowed to accept and complete the HIT. The default is false. This should not be used in combination with the ActionsGuarded field.
        @available(*, deprecated)
        public var requiredToPreview: Swift.Bool?

        public init(
            actionsGuarded: MTurkClientTypes.HITAccessActions? = nil,
            comparator: MTurkClientTypes.Comparator? = nil,
            integerValues: [Swift.Int]? = nil,
            localeValues: [MTurkClientTypes.Locale]? = nil,
            qualificationTypeId: Swift.String? = nil,
            requiredToPreview: Swift.Bool? = nil
        )
        {
            self.actionsGuarded = actionsGuarded
            self.comparator = comparator
            self.integerValues = integerValues
            self.localeValues = localeValues
            self.qualificationTypeId = qualificationTypeId
            self.requiredToPreview = requiredToPreview
        }
    }
}

public struct CreateHITInput: Swift.Sendable {
    /// The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept.
    /// This member is required.
    public var assignmentDurationInSeconds: Swift.Int?
    /// The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it.
    public var autoApprovalDelayInSeconds: Swift.Int?
    /// A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it.
    /// This member is required.
    public var description: Swift.String?
    /// The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
    public var hitLayoutId: Swift.String?
    /// If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout.
    public var hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
    /// The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs.
    public var keywords: Swift.String?
    /// An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted.
    /// This member is required.
    public var lifetimeInSeconds: Swift.Int?
    /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
    public var maxAssignments: Swift.Int?
    /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
    public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
    /// The data the person completing the HIT uses to produce the results. Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. Either a Question parameter or a HITLayoutId parameter must be provided.
    public var question: Swift.String?
    /// An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped.
    public var requesterAnnotation: Swift.String?
    /// The amount of money the Requester will pay a Worker for successfully completing the HIT.
    /// This member is required.
    public var reward: Swift.String?
    /// The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned.
    /// This member is required.
    public var title: Swift.String?
    /// A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.
    public var uniqueRequestToken: Swift.String?

    public init(
        assignmentDurationInSeconds: Swift.Int? = nil,
        assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        autoApprovalDelayInSeconds: Swift.Int? = nil,
        description: Swift.String? = nil,
        hitLayoutId: Swift.String? = nil,
        hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]? = nil,
        hitReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        keywords: Swift.String? = nil,
        lifetimeInSeconds: Swift.Int? = nil,
        maxAssignments: Swift.Int? = nil,
        qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
        question: Swift.String? = nil,
        requesterAnnotation: Swift.String? = nil,
        reward: Swift.String? = nil,
        title: Swift.String? = nil,
        uniqueRequestToken: Swift.String? = nil
    )
    {
        self.assignmentDurationInSeconds = assignmentDurationInSeconds
        self.assignmentReviewPolicy = assignmentReviewPolicy
        self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
        self.description = description
        self.hitLayoutId = hitLayoutId
        self.hitLayoutParameters = hitLayoutParameters
        self.hitReviewPolicy = hitReviewPolicy
        self.keywords = keywords
        self.lifetimeInSeconds = lifetimeInSeconds
        self.maxAssignments = maxAssignments
        self.qualificationRequirements = qualificationRequirements
        self.question = question
        self.requesterAnnotation = requesterAnnotation
        self.reward = reward
        self.title = title
        self.uniqueRequestToken = uniqueRequestToken
    }
}

extension MTurkClientTypes {

    public enum HITReviewStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case markedforreview
        case notreviewed
        case reviewedappropriate
        case reviewedinappropriate
        case sdkUnknown(Swift.String)

        public static var allCases: [HITReviewStatus] {
            return [
                .markedforreview,
                .notreviewed,
                .reviewedappropriate,
                .reviewedinappropriate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .markedforreview: return "MarkedForReview"
            case .notreviewed: return "NotReviewed"
            case .reviewedappropriate: return "ReviewedAppropriate"
            case .reviewedinappropriate: return "ReviewedInappropriate"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    public enum HITStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case assignable
        case disposed
        case reviewable
        case reviewing
        case unassignable
        case sdkUnknown(Swift.String)

        public static var allCases: [HITStatus] {
            return [
                .assignable,
                .disposed,
                .reviewable,
                .reviewing,
                .unassignable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .assignable: return "Assignable"
            case .disposed: return "Disposed"
            case .reviewable: return "Reviewable"
            case .reviewing: return "Reviewing"
            case .unassignable: return "Unassignable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// The HIT data structure represents a single HIT, including all the information necessary for a Worker to accept and complete the HIT.
    public struct HIT: Swift.Sendable {
        /// The length of time, in seconds, that a Worker has to complete the HIT after accepting it.
        public var assignmentDurationInSeconds: Swift.Int?
        /// The amount of time, in seconds, after the Worker submits an assignment for the HIT that the results are automatically approved by Amazon Mechanical Turk. This is the amount of time the Requester has to reject an assignment submitted by a Worker before the assignment is auto-approved and the Worker is paid.
        public var autoApprovalDelayInSeconds: Swift.Int?
        /// The date and time the HIT was created.
        public var creationTime: Foundation.Date?
        /// A general description of the HIT.
        public var description: Swift.String?
        /// The date and time the HIT expires.
        public var expiration: Foundation.Date?
        /// The ID of the HIT Group of this HIT.
        public var hitGroupId: Swift.String?
        /// A unique identifier for the HIT.
        public var hitId: Swift.String?
        /// The ID of the HIT Layout of this HIT.
        public var hitLayoutId: Swift.String?
        /// Indicates the review status of the HIT. Valid Values are NotReviewed | MarkedForReview | ReviewedAppropriate | ReviewedInappropriate.
        public var hitReviewStatus: MTurkClientTypes.HITReviewStatus?
        /// The status of the HIT and its assignments. Valid Values are Assignable | Unassignable | Reviewable | Reviewing | Disposed.
        public var hitStatus: MTurkClientTypes.HITStatus?
        /// The ID of the HIT type of this HIT
        public var hitTypeId: Swift.String?
        /// One or more words or phrases that describe the HIT, separated by commas. Search terms similar to the keywords of a HIT are more likely to have the HIT in the search results.
        public var keywords: Swift.String?
        /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
        public var maxAssignments: Swift.Int?
        /// The number of assignments for this HIT that are available for Workers to accept.
        public var numberOfAssignmentsAvailable: Swift.Int?
        /// The number of assignments for this HIT that have been approved or rejected.
        public var numberOfAssignmentsCompleted: Swift.Int?
        /// The number of assignments for this HIT that are being previewed or have been accepted by Workers, but have not yet been submitted, returned, or abandoned.
        public var numberOfAssignmentsPending: Swift.Int?
        /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
        public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
        /// The data the Worker completing the HIT uses produce the results. This is either either a QuestionForm, HTMLQuestion or an ExternalQuestion data structure.
        public var question: Swift.String?
        /// An arbitrary data field the Requester who created the HIT can use. This field is visible only to the creator of the HIT.
        public var requesterAnnotation: Swift.String?
        /// A string representing a currency amount.
        public var reward: Swift.String?
        /// The title of the HIT.
        public var title: Swift.String?

        public init(
            assignmentDurationInSeconds: Swift.Int? = nil,
            autoApprovalDelayInSeconds: Swift.Int? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            expiration: Foundation.Date? = nil,
            hitGroupId: Swift.String? = nil,
            hitId: Swift.String? = nil,
            hitLayoutId: Swift.String? = nil,
            hitReviewStatus: MTurkClientTypes.HITReviewStatus? = nil,
            hitStatus: MTurkClientTypes.HITStatus? = nil,
            hitTypeId: Swift.String? = nil,
            keywords: Swift.String? = nil,
            maxAssignments: Swift.Int? = nil,
            numberOfAssignmentsAvailable: Swift.Int? = nil,
            numberOfAssignmentsCompleted: Swift.Int? = nil,
            numberOfAssignmentsPending: Swift.Int? = nil,
            qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
            question: Swift.String? = nil,
            requesterAnnotation: Swift.String? = nil,
            reward: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.creationTime = creationTime
            self.description = description
            self.expiration = expiration
            self.hitGroupId = hitGroupId
            self.hitId = hitId
            self.hitLayoutId = hitLayoutId
            self.hitReviewStatus = hitReviewStatus
            self.hitStatus = hitStatus
            self.hitTypeId = hitTypeId
            self.keywords = keywords
            self.maxAssignments = maxAssignments
            self.numberOfAssignmentsAvailable = numberOfAssignmentsAvailable
            self.numberOfAssignmentsCompleted = numberOfAssignmentsCompleted
            self.numberOfAssignmentsPending = numberOfAssignmentsPending
            self.qualificationRequirements = qualificationRequirements
            self.question = question
            self.requesterAnnotation = requesterAnnotation
            self.reward = reward
            self.title = title
        }
    }
}

public struct CreateHITOutput: Swift.Sendable {
    /// Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation.
    public var hit: MTurkClientTypes.HIT?

    public init(
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.hit = hit
    }
}

public struct CreateHITTypeInput: Swift.Sendable {
    /// The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept.
    /// This member is required.
    public var assignmentDurationInSeconds: Swift.Int?
    /// The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it.
    public var autoApprovalDelayInSeconds: Swift.Int?
    /// A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it.
    /// This member is required.
    public var description: Swift.String?
    /// One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs.
    public var keywords: Swift.String?
    /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
    public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
    /// The amount of money the Requester will pay a Worker for successfully completing the HIT.
    /// This member is required.
    public var reward: Swift.String?
    /// The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned.
    /// This member is required.
    public var title: Swift.String?

    public init(
        assignmentDurationInSeconds: Swift.Int? = nil,
        autoApprovalDelayInSeconds: Swift.Int? = nil,
        description: Swift.String? = nil,
        keywords: Swift.String? = nil,
        qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
        reward: Swift.String? = nil,
        title: Swift.String? = nil
    )
    {
        self.assignmentDurationInSeconds = assignmentDurationInSeconds
        self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
        self.description = description
        self.keywords = keywords
        self.qualificationRequirements = qualificationRequirements
        self.reward = reward
        self.title = title
    }
}

public struct CreateHITTypeOutput: Swift.Sendable {
    /// The ID of the newly registered HIT type.
    public var hitTypeId: Swift.String?

    public init(
        hitTypeId: Swift.String? = nil
    )
    {
        self.hitTypeId = hitTypeId
    }
}

public struct CreateHITWithHITTypeInput: Swift.Sendable {
    /// The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
    public var hitLayoutId: Swift.String?
    /// If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout.
    public var hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
    /// The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy.
    public var hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// The HIT type ID you want to create this HIT with.
    /// This member is required.
    public var hitTypeId: Swift.String?
    /// An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted.
    /// This member is required.
    public var lifetimeInSeconds: Swift.Int?
    /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
    public var maxAssignments: Swift.Int?
    /// The data the person completing the HIT uses to produce the results. Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. Either a Question parameter or a HITLayoutId parameter must be provided.
    public var question: Swift.String?
    /// An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped.
    public var requesterAnnotation: Swift.String?
    /// A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs.
    public var uniqueRequestToken: Swift.String?

    public init(
        assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        hitLayoutId: Swift.String? = nil,
        hitLayoutParameters: [MTurkClientTypes.HITLayoutParameter]? = nil,
        hitReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        hitTypeId: Swift.String? = nil,
        lifetimeInSeconds: Swift.Int? = nil,
        maxAssignments: Swift.Int? = nil,
        question: Swift.String? = nil,
        requesterAnnotation: Swift.String? = nil,
        uniqueRequestToken: Swift.String? = nil
    )
    {
        self.assignmentReviewPolicy = assignmentReviewPolicy
        self.hitLayoutId = hitLayoutId
        self.hitLayoutParameters = hitLayoutParameters
        self.hitReviewPolicy = hitReviewPolicy
        self.hitTypeId = hitTypeId
        self.lifetimeInSeconds = lifetimeInSeconds
        self.maxAssignments = maxAssignments
        self.question = question
        self.requesterAnnotation = requesterAnnotation
        self.uniqueRequestToken = uniqueRequestToken
    }
}

public struct CreateHITWithHITTypeOutput: Swift.Sendable {
    /// Contains the newly created HIT data. For a description of the HIT data structure as it appears in responses, see the HIT Data Structure documentation.
    public var hit: MTurkClientTypes.HIT?

    public init(
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.hit = hit
    }
}

extension MTurkClientTypes {

    public enum QualificationTypeStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [QualificationTypeStatus] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateQualificationTypeInput: Swift.Sendable {
    /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure. Constraints: Must not be longer than 65535 bytes. Constraints: None. If not specified, you must process Qualification requests manually.
    public var answerKey: Swift.String?
    /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
    public var autoGranted: Swift.Bool?
    /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
    public var autoGrantedValue: Swift.Int?
    /// A long description for the Qualification type. On the Amazon Mechanical Turk website, the long description is displayed when a Worker examines a Qualification type.
    /// This member is required.
    public var description: Swift.String?
    /// One or more words or phrases that describe the Qualification type, separated by commas. The keywords of a type make the type easier to find during a search.
    public var keywords: Swift.String?
    /// The name you give to the Qualification type. The type name is used to represent the Qualification to Workers, and to find the type using a Qualification type search. It must be unique across all of your Qualification types.
    /// This member is required.
    public var name: Swift.String?
    /// The initial status of the Qualification type. Constraints: Valid values are: Active | Inactive
    /// This member is required.
    public var qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
    /// The number of seconds that a Worker must wait after requesting a Qualification of the Qualification type before the worker can retry the Qualification request. Constraints: None. If not specified, retries are disabled and Workers can request a Qualification of this type only once, even if the Worker has not been granted the Qualification. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must delete existing retry-enabled Qualification type and then create a new Qualification type with retries disabled.
    public var retryDelayInSeconds: Swift.Int?
    /// The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified. Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
    public var test: Swift.String?
    /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
    public var testDurationInSeconds: Swift.Int?

    public init(
        answerKey: Swift.String? = nil,
        autoGranted: Swift.Bool? = nil,
        autoGrantedValue: Swift.Int? = nil,
        description: Swift.String? = nil,
        keywords: Swift.String? = nil,
        name: Swift.String? = nil,
        qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus? = nil,
        retryDelayInSeconds: Swift.Int? = nil,
        test: Swift.String? = nil,
        testDurationInSeconds: Swift.Int? = nil
    )
    {
        self.answerKey = answerKey
        self.autoGranted = autoGranted
        self.autoGrantedValue = autoGrantedValue
        self.description = description
        self.keywords = keywords
        self.name = name
        self.qualificationTypeStatus = qualificationTypeStatus
        self.retryDelayInSeconds = retryDelayInSeconds
        self.test = test
        self.testDurationInSeconds = testDurationInSeconds
    }
}

extension MTurkClientTypes {

    /// The QualificationType data structure represents a Qualification type, a description of a property of a Worker that must match the requirements of a HIT for the Worker to be able to accept the HIT. The type also describes how a Worker can obtain a Qualification of that type, such as through a Qualification test.
    public struct QualificationType: Swift.Sendable {
        /// The answers to the Qualification test specified in the Test parameter.
        public var answerKey: Swift.String?
        /// Specifies that requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Valid values are True | False.
        public var autoGranted: Swift.Bool?
        /// The Qualification integer value to use for automatically granted Qualifications, if AutoGranted is true. This is 1 by default.
        public var autoGrantedValue: Swift.Int?
        /// The date and time the Qualification type was created.
        public var creationTime: Foundation.Date?
        /// A long description for the Qualification type.
        public var description: Swift.String?
        /// Specifies whether the Qualification type is one that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test. This value is False for Qualifications assigned automatically by the system. Valid values are True | False.
        public var isRequestable: Swift.Bool?
        /// One or more words or phrases that describe theQualification type, separated by commas. The Keywords make the type easier to find using a search.
        public var keywords: Swift.String?
        /// The name of the Qualification type. The type name is used to identify the type, and to find the type using a Qualification type search.
        public var name: Swift.String?
        /// A unique identifier for the Qualification type. A Qualification type is given a Qualification type ID when you call the CreateQualificationType operation.
        public var qualificationTypeId: Swift.String?
        /// The status of the Qualification type. A Qualification type's status determines if users can apply to receive a Qualification of this type, and if HITs can be created with requirements based on this type. Valid values are Active | Inactive.
        public var qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
        /// The amount of time, in seconds, Workers must wait after taking the Qualification test before they can take it again. Workers can take a Qualification test multiple times if they were not granted the Qualification from a previous attempt, or if the test offers a gradient score and they want a better score. If not specified, retries are disabled and Workers can request a Qualification only once.
        public var retryDelayInSeconds: Swift.Int?
        /// The questions for a Qualification test associated with this Qualification type that a user can take to obtain a Qualification of this type. This parameter must be specified if AnswerKey is present. A Qualification type cannot have both a specified Test parameter and an AutoGranted value of true.
        public var test: Swift.String?
        /// The amount of time, in seconds, given to a Worker to complete the Qualification test, beginning from the time the Worker requests the Qualification.
        public var testDurationInSeconds: Swift.Int?

        public init(
            answerKey: Swift.String? = nil,
            autoGranted: Swift.Bool? = nil,
            autoGrantedValue: Swift.Int? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            isRequestable: Swift.Bool? = nil,
            keywords: Swift.String? = nil,
            name: Swift.String? = nil,
            qualificationTypeId: Swift.String? = nil,
            qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus? = nil,
            retryDelayInSeconds: Swift.Int? = nil,
            test: Swift.String? = nil,
            testDurationInSeconds: Swift.Int? = nil
        )
        {
            self.answerKey = answerKey
            self.autoGranted = autoGranted
            self.autoGrantedValue = autoGrantedValue
            self.creationTime = creationTime
            self.description = description
            self.isRequestable = isRequestable
            self.keywords = keywords
            self.name = name
            self.qualificationTypeId = qualificationTypeId
            self.qualificationTypeStatus = qualificationTypeStatus
            self.retryDelayInSeconds = retryDelayInSeconds
            self.test = test
            self.testDurationInSeconds = testDurationInSeconds
        }
    }
}

public struct CreateQualificationTypeOutput: Swift.Sendable {
    /// The created Qualification type, returned as a QualificationType data structure.
    public var qualificationType: MTurkClientTypes.QualificationType?

    public init(
        qualificationType: MTurkClientTypes.QualificationType? = nil
    )
    {
        self.qualificationType = qualificationType
    }
}

public struct CreateWorkerBlockInput: Swift.Sendable {
    /// A message explaining the reason for blocking the Worker. This parameter enables you to keep track of your Workers. The Worker does not see this message.
    /// This member is required.
    public var reason: Swift.String?
    /// The ID of the Worker to block.
    /// This member is required.
    public var workerId: Swift.String?

    public init(
        reason: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.reason = reason
        self.workerId = workerId
    }
}

public struct CreateWorkerBlockOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteHITInput: Swift.Sendable {
    /// The ID of the HIT to be deleted.
    /// This member is required.
    public var hitId: Swift.String?

    public init(
        hitId: Swift.String? = nil
    )
    {
        self.hitId = hitId
    }
}

public struct DeleteHITOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteQualificationTypeInput: Swift.Sendable {
    /// The ID of the QualificationType to dispose.
    /// This member is required.
    public var qualificationTypeId: Swift.String?

    public init(
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
    }
}

public struct DeleteQualificationTypeOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteWorkerBlockInput: Swift.Sendable {
    /// A message that explains the reason for unblocking the Worker. The Worker does not see this message.
    public var reason: Swift.String?
    /// The ID of the Worker to unblock.
    /// This member is required.
    public var workerId: Swift.String?

    public init(
        reason: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.reason = reason
        self.workerId = workerId
    }
}

public struct DeleteWorkerBlockOutput: Swift.Sendable {

    public init() { }
}

public struct DisassociateQualificationFromWorkerInput: Swift.Sendable {
    /// The ID of the Qualification type of the Qualification to be revoked.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.
    public var reason: Swift.String?
    /// The ID of the Worker who possesses the Qualification to be revoked.
    /// This member is required.
    public var workerId: Swift.String?

    public init(
        qualificationTypeId: Swift.String? = nil,
        reason: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
        self.reason = reason
        self.workerId = workerId
    }
}

public struct DisassociateQualificationFromWorkerOutput: Swift.Sendable {

    public init() { }
}

extension MTurkClientTypes {

    public enum EventType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case assignmentabandoned
        case assignmentaccepted
        case assignmentapproved
        case assignmentrejected
        case assignmentreturned
        case assignmentsubmitted
        case hitcreated
        case hitdisposed
        case hitexpired
        case hitextended
        case hitreviewable
        case ping
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .assignmentabandoned,
                .assignmentaccepted,
                .assignmentapproved,
                .assignmentrejected,
                .assignmentreturned,
                .assignmentsubmitted,
                .hitcreated,
                .hitdisposed,
                .hitexpired,
                .hitextended,
                .hitreviewable,
                .ping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .assignmentabandoned: return "AssignmentAbandoned"
            case .assignmentaccepted: return "AssignmentAccepted"
            case .assignmentapproved: return "AssignmentApproved"
            case .assignmentrejected: return "AssignmentRejected"
            case .assignmentreturned: return "AssignmentReturned"
            case .assignmentsubmitted: return "AssignmentSubmitted"
            case .hitcreated: return "HITCreated"
            case .hitdisposed: return "HITDisposed"
            case .hitexpired: return "HITExpired"
            case .hitextended: return "HITExtended"
            case .hitreviewable: return "HITReviewable"
            case .ping: return "Ping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetAccountBalanceInput: Swift.Sendable {

    public init() { }
}

public struct GetAccountBalanceOutput: Swift.Sendable {
    /// A string representing a currency amount.
    public var availableBalance: Swift.String?
    /// A string representing a currency amount.
    public var onHoldBalance: Swift.String?

    public init(
        availableBalance: Swift.String? = nil,
        onHoldBalance: Swift.String? = nil
    )
    {
        self.availableBalance = availableBalance
        self.onHoldBalance = onHoldBalance
    }
}

public struct GetAssignmentInput: Swift.Sendable {
    /// The ID of the Assignment to be retrieved.
    /// This member is required.
    public var assignmentId: Swift.String?

    public init(
        assignmentId: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
    }
}

public struct GetAssignmentOutput: Swift.Sendable {
    /// The assignment. The response includes one Assignment element.
    public var assignment: MTurkClientTypes.Assignment?
    /// The HIT associated with this assignment. The response includes one HIT element.
    public var hit: MTurkClientTypes.HIT?

    public init(
        assignment: MTurkClientTypes.Assignment? = nil,
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.assignment = assignment
        self.hit = hit
    }
}

public struct GetFileUploadURLInput: Swift.Sendable {
    /// The ID of the assignment that contains the question with a FileUploadAnswer.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// The identifier of the question with a FileUploadAnswer, as specified in the QuestionForm of the HIT.
    /// This member is required.
    public var questionIdentifier: Swift.String?

    public init(
        assignmentId: Swift.String? = nil,
        questionIdentifier: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.questionIdentifier = questionIdentifier
    }
}

public struct GetFileUploadURLOutput: Swift.Sendable {
    /// A temporary URL for the file that the Worker uploaded for the answer.
    public var fileUploadURL: Swift.String?

    public init(
        fileUploadURL: Swift.String? = nil
    )
    {
        self.fileUploadURL = fileUploadURL
    }
}

public struct GetHITInput: Swift.Sendable {
    /// The ID of the HIT to be retrieved.
    /// This member is required.
    public var hitId: Swift.String?

    public init(
        hitId: Swift.String? = nil
    )
    {
        self.hitId = hitId
    }
}

public struct GetHITOutput: Swift.Sendable {
    /// Contains the requested HIT data.
    public var hit: MTurkClientTypes.HIT?

    public init(
        hit: MTurkClientTypes.HIT? = nil
    )
    {
        self.hit = hit
    }
}

public struct GetQualificationScoreInput: Swift.Sendable {
    /// The ID of the QualificationType.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// The ID of the Worker whose Qualification is being updated.
    /// This member is required.
    public var workerId: Swift.String?

    public init(
        qualificationTypeId: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
        self.workerId = workerId
    }
}

extension MTurkClientTypes {

    public enum QualificationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case granted
        case revoked
        case sdkUnknown(Swift.String)

        public static var allCases: [QualificationStatus] {
            return [
                .granted,
                .revoked
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .granted: return "Granted"
            case .revoked: return "Revoked"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// The Qualification data structure represents a Qualification assigned to a user, including the Qualification type and the value (score).
    public struct Qualification: Swift.Sendable {
        /// The date and time the Qualification was granted to the Worker. If the Worker's Qualification was revoked, and then re-granted based on a new Qualification request, GrantTime is the date and time of the last call to the AcceptQualificationRequest operation.
        public var grantTime: Foundation.Date?
        /// The value (score) of the Qualification, if the Qualification has an integer value.
        public var integerValue: Swift.Int?
        /// The Locale data structure represents a geographical region or location.
        public var localeValue: MTurkClientTypes.Locale?
        /// The ID of the Qualification type for the Qualification.
        public var qualificationTypeId: Swift.String?
        /// The status of the Qualification. Valid values are Granted | Revoked.
        public var status: MTurkClientTypes.QualificationStatus?
        /// The ID of the Worker who possesses the Qualification.
        public var workerId: Swift.String?

        public init(
            grantTime: Foundation.Date? = nil,
            integerValue: Swift.Int? = nil,
            localeValue: MTurkClientTypes.Locale? = nil,
            qualificationTypeId: Swift.String? = nil,
            status: MTurkClientTypes.QualificationStatus? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.grantTime = grantTime
            self.integerValue = integerValue
            self.localeValue = localeValue
            self.qualificationTypeId = qualificationTypeId
            self.status = status
            self.workerId = workerId
        }
    }
}

public struct GetQualificationScoreOutput: Swift.Sendable {
    /// The Qualification data structure of the Qualification assigned to a user, including the Qualification type and the value (score).
    public var qualification: MTurkClientTypes.Qualification?

    public init(
        qualification: MTurkClientTypes.Qualification? = nil
    )
    {
        self.qualification = qualification
    }
}

public struct GetQualificationTypeInput: Swift.Sendable {
    /// The ID of the QualificationType.
    /// This member is required.
    public var qualificationTypeId: Swift.String?

    public init(
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.qualificationTypeId = qualificationTypeId
    }
}

public struct GetQualificationTypeOutput: Swift.Sendable {
    /// The returned Qualification Type
    public var qualificationType: MTurkClientTypes.QualificationType?

    public init(
        qualificationType: MTurkClientTypes.QualificationType? = nil
    )
    {
        self.qualificationType = qualificationType
    }
}

public struct ListAssignmentsForHITInput: Swift.Sendable {
    /// The status of the assignments to return: Submitted | Approved | Rejected
    public var assignmentStatuses: [MTurkClientTypes.AssignmentStatus]?
    /// The ID of the HIT.
    /// This member is required.
    public var hitId: Swift.String?
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init(
        assignmentStatuses: [MTurkClientTypes.AssignmentStatus]? = nil,
        hitId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assignmentStatuses = assignmentStatuses
        self.hitId = hitId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAssignmentsForHITOutput: Swift.Sendable {
    /// The collection of Assignment data structures returned by this call.
    public var assignments: [MTurkClientTypes.Assignment]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
    public var numResults: Swift.Int?

    public init(
        assignments: [MTurkClientTypes.Assignment]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.assignments = assignments
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

public struct ListBonusPaymentsInput: Swift.Sendable {
    /// The ID of the assignment associated with the bonus payments to retrieve. If specified, only bonus payments for the given assignment are returned. Either the HITId parameter or the AssignmentId parameter must be specified
    public var assignmentId: Swift.String?
    /// The ID of the HIT associated with the bonus payments to retrieve. If not specified, all bonus payments for all assignments for the given HIT are returned. Either the HITId parameter or the AssignmentId parameter must be specified
    public var hitId: Swift.String?
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init(
        assignmentId: Swift.String? = nil,
        hitId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.hitId = hitId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListBonusPaymentsOutput: Swift.Sendable {
    /// A successful request to the ListBonusPayments operation returns a list of BonusPayment objects.
    public var bonusPayments: [MTurkClientTypes.BonusPayment]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of bonus payments on this page in the filtered results list, equivalent to the number of bonus payments being returned by this call.
    public var numResults: Swift.Int?

    public init(
        bonusPayments: [MTurkClientTypes.BonusPayment]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.bonusPayments = bonusPayments
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

public struct ListHITsInput: Swift.Sendable {
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListHITsOutput: Swift.Sendable {
    /// The list of HIT elements returned by the query.
    public var hiTs: [MTurkClientTypes.HIT]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
    public var numResults: Swift.Int?

    public init(
        hiTs: [MTurkClientTypes.HIT]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.hiTs = hiTs
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

public struct ListHITsForQualificationTypeInput: Swift.Sendable {
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination Token
    public var nextToken: Swift.String?
    /// The ID of the Qualification type to use when querying HITs.
    /// This member is required.
    public var qualificationTypeId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.qualificationTypeId = qualificationTypeId
    }
}

public struct ListHITsForQualificationTypeOutput: Swift.Sendable {
    /// The list of HIT elements returned by the query.
    public var hiTs: [MTurkClientTypes.HIT]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
    public var numResults: Swift.Int?

    public init(
        hiTs: [MTurkClientTypes.HIT]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.hiTs = hiTs
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

public struct ListQualificationRequestsInput: Swift.Sendable {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The ID of the QualificationType.
    public var qualificationTypeId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.qualificationTypeId = qualificationTypeId
    }
}

extension MTurkClientTypes {

    /// The QualificationRequest data structure represents a request a Worker has made for a Qualification.
    public struct QualificationRequest: Swift.Sendable {
        /// The Worker's answers for the Qualification type's test contained in a QuestionFormAnswers document, if the type has a test and the Worker has submitted answers. If the Worker does not provide any answers, Answer may be empty.
        public var answer: Swift.String?
        /// The ID of the Qualification request, a unique identifier generated when the request was submitted.
        public var qualificationRequestId: Swift.String?
        /// The ID of the Qualification type the Worker is requesting, as returned by the CreateQualificationType operation.
        public var qualificationTypeId: Swift.String?
        /// The date and time the Qualification request had a status of Submitted. This is either the time the Worker submitted answers for a Qualification test, or the time the Worker requested the Qualification if the Qualification type does not have a test.
        public var submitTime: Foundation.Date?
        /// The contents of the Qualification test that was presented to the Worker, if the type has a test and the Worker has submitted answers. This value is identical to the QuestionForm associated with the Qualification type at the time the Worker requests the Qualification.
        public var test: Swift.String?
        /// The ID of the Worker requesting the Qualification.
        public var workerId: Swift.String?

        public init(
            answer: Swift.String? = nil,
            qualificationRequestId: Swift.String? = nil,
            qualificationTypeId: Swift.String? = nil,
            submitTime: Foundation.Date? = nil,
            test: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.answer = answer
            self.qualificationRequestId = qualificationRequestId
            self.qualificationTypeId = qualificationTypeId
            self.submitTime = submitTime
            self.test = test
            self.workerId = workerId
        }
    }
}

public struct ListQualificationRequestsOutput: Swift.Sendable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of Qualification requests on this page in the filtered results list, equivalent to the number of Qualification requests being returned by this call.
    public var numResults: Swift.Int?
    /// The Qualification request. The response includes one QualificationRequest element for each Qualification request returned by the query.
    public var qualificationRequests: [MTurkClientTypes.QualificationRequest]?

    public init(
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        qualificationRequests: [MTurkClientTypes.QualificationRequest]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.qualificationRequests = qualificationRequests
    }
}

public struct ListQualificationTypesInput: Swift.Sendable {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// Specifies that only Qualification types that the Requester created are returned. If false, the operation returns all Qualification types.
    public var mustBeOwnedByCaller: Swift.Bool?
    /// Specifies that only Qualification types that a user can request through the Amazon Mechanical Turk web site, such as by taking a Qualification test, are returned as results of the search. Some Qualification types, such as those assigned automatically by the system, cannot be requested directly by users. If false, all Qualification types, including those managed by the system, are considered. Valid values are True | False.
    /// This member is required.
    public var mustBeRequestable: Swift.Bool?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// A text query against all of the searchable attributes of Qualification types.
    public var query: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        mustBeOwnedByCaller: Swift.Bool? = nil,
        mustBeRequestable: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        query: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.mustBeOwnedByCaller = mustBeOwnedByCaller
        self.mustBeRequestable = mustBeRequestable
        self.nextToken = nextToken
        self.query = query
    }
}

public struct ListQualificationTypesOutput: Swift.Sendable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of Qualification types on this page in the filtered results list, equivalent to the number of types this operation returns.
    public var numResults: Swift.Int?
    /// The list of QualificationType elements returned by the query.
    public var qualificationTypes: [MTurkClientTypes.QualificationType]?

    public init(
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        qualificationTypes: [MTurkClientTypes.QualificationType]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.qualificationTypes = qualificationTypes
    }
}

extension MTurkClientTypes {

    public enum ReviewableHITStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case reviewable
        case reviewing
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewableHITStatus] {
            return [
                .reviewable,
                .reviewing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .reviewable: return "Reviewable"
            case .reviewing: return "Reviewing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListReviewableHITsInput: Swift.Sendable {
    /// The ID of the HIT type of the HITs to consider for the query. If not specified, all HITs for the Reviewer are considered
    public var hitTypeId: Swift.String?
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination Token
    public var nextToken: Swift.String?
    /// Can be either Reviewable or Reviewing. Reviewable is the default value.
    public var status: MTurkClientTypes.ReviewableHITStatus?

    public init(
        hitTypeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: MTurkClientTypes.ReviewableHITStatus? = nil
    )
    {
        self.hitTypeId = hitTypeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

public struct ListReviewableHITsOutput: Swift.Sendable {
    /// The list of HIT elements returned by the query.
    public var hiTs: [MTurkClientTypes.HIT]?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of HITs on this page in the filtered results list, equivalent to the number of HITs being returned by this call.
    public var numResults: Swift.Int?

    public init(
        hiTs: [MTurkClientTypes.HIT]? = nil,
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil
    )
    {
        self.hiTs = hiTs
        self.nextToken = nextToken
        self.numResults = numResults
    }
}

extension MTurkClientTypes {

    public enum ReviewPolicyLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case assignment
        case hit
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewPolicyLevel] {
            return [
                .assignment,
                .hit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .assignment: return "Assignment"
            case .hit: return "HIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListReviewPolicyResultsForHITInput: Swift.Sendable {
    /// The unique identifier of the HIT to retrieve review results for.
    /// This member is required.
    public var hitId: Swift.String?
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?
    /// The Policy Level(s) to retrieve review results for - HIT or Assignment. If omitted, the default behavior is to retrieve all data for both policy levels. For a list of all the described policies, see Review Policies.
    public var policyLevels: [MTurkClientTypes.ReviewPolicyLevel]?
    /// Specify if the operation should retrieve a list of the actions taken executing the Review Policies and their outcomes.
    public var retrieveActions: Swift.Bool?
    /// Specify if the operation should retrieve a list of the results computed by the Review Policies.
    public var retrieveResults: Swift.Bool?

    public init(
        hitId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyLevels: [MTurkClientTypes.ReviewPolicyLevel]? = nil,
        retrieveActions: Swift.Bool? = nil,
        retrieveResults: Swift.Bool? = nil
    )
    {
        self.hitId = hitId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyLevels = policyLevels
        self.retrieveActions = retrieveActions
        self.retrieveResults = retrieveResults
    }
}

extension MTurkClientTypes {

    public enum ReviewActionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case intended
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReviewActionStatus] {
            return [
                .cancelled,
                .failed,
                .intended,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .intended: return "Intended"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// Both the AssignmentReviewReport and the HITReviewReport elements contains the ReviewActionDetail data structure. This structure is returned multiple times for each action specified in the Review Policy.
    public struct ReviewActionDetail: Swift.Sendable {
        /// The unique identifier for the action.
        public var actionId: Swift.String?
        /// The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary.
        public var actionName: Swift.String?
        /// The date when the action was completed.
        public var completeTime: Foundation.Date?
        /// Present only when the Results have a FAILED Status.
        public var errorCode: Swift.String?
        /// A description of the outcome of the review.
        public var result: Swift.String?
        /// The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED.
        public var status: MTurkClientTypes.ReviewActionStatus?
        /// The specific HITId or AssignmentID targeted by the action.
        public var targetId: Swift.String?
        /// The type of object in TargetId.
        public var targetType: Swift.String?

        public init(
            actionId: Swift.String? = nil,
            actionName: Swift.String? = nil,
            completeTime: Foundation.Date? = nil,
            errorCode: Swift.String? = nil,
            result: Swift.String? = nil,
            status: MTurkClientTypes.ReviewActionStatus? = nil,
            targetId: Swift.String? = nil,
            targetType: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.actionName = actionName
            self.completeTime = completeTime
            self.errorCode = errorCode
            self.result = result
            self.status = status
            self.targetId = targetId
            self.targetType = targetType
        }
    }
}

extension MTurkClientTypes {

    /// This data structure is returned multiple times for each result specified in the Review Policy.
    public struct ReviewResultDetail: Swift.Sendable {
        /// A unique identifier of the Review action result.
        public var actionId: Swift.String?
        /// Key identifies the particular piece of reviewed information.
        public var key: Swift.String?
        /// Specifies the QuestionId the result is describing. Depending on whether the TargetType is a HIT or Assignment this results could specify multiple values. If TargetType is HIT and QuestionId is absent, then the result describes results of the HIT, including the HIT agreement score. If ObjectType is Assignment and QuestionId is absent, then the result describes the Worker's performance on the HIT.
        public var questionId: Swift.String?
        /// The HITID or AssignmentId about which this result was taken. Note that HIT-level Review Policies will often emit results about both the HIT itself and its Assignments, while Assignment-level review policies generally only emit results about the Assignment itself.
        public var subjectId: Swift.String?
        /// The type of the object from the SubjectId field.
        public var subjectType: Swift.String?
        /// The values of Key provided by the review policies you have selected.
        public var value: Swift.String?

        public init(
            actionId: Swift.String? = nil,
            key: Swift.String? = nil,
            questionId: Swift.String? = nil,
            subjectId: Swift.String? = nil,
            subjectType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.key = key
            self.questionId = questionId
            self.subjectId = subjectId
            self.subjectType = subjectType
            self.value = value
        }
    }
}

extension MTurkClientTypes {

    /// Contains both ReviewResult and ReviewAction elements for a particular HIT.
    public struct ReviewReport: Swift.Sendable {
        /// A list of ReviewAction objects for each action specified in the Review Policy.
        public var reviewActions: [MTurkClientTypes.ReviewActionDetail]?
        /// A list of ReviewResults objects for each action specified in the Review Policy.
        public var reviewResults: [MTurkClientTypes.ReviewResultDetail]?

        public init(
            reviewActions: [MTurkClientTypes.ReviewActionDetail]? = nil,
            reviewResults: [MTurkClientTypes.ReviewResultDetail]? = nil
        )
        {
            self.reviewActions = reviewActions
            self.reviewResults = reviewResults
        }
    }
}

public struct ListReviewPolicyResultsForHITOutput: Swift.Sendable {
    /// The name of the Assignment-level Review Policy. This contains only the PolicyName element.
    public var assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// Contains both ReviewResult and ReviewAction elements for an Assignment.
    public var assignmentReviewReport: MTurkClientTypes.ReviewReport?
    /// The HITId of the HIT for which results have been returned.
    public var hitId: Swift.String?
    /// The name of the HIT-level Review Policy. This contains only the PolicyName element.
    public var hitReviewPolicy: MTurkClientTypes.ReviewPolicy?
    /// Contains both ReviewResult and ReviewAction elements for a particular HIT.
    public var hitReviewReport: MTurkClientTypes.ReviewReport?
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        assignmentReviewReport: MTurkClientTypes.ReviewReport? = nil,
        hitId: Swift.String? = nil,
        hitReviewPolicy: MTurkClientTypes.ReviewPolicy? = nil,
        hitReviewReport: MTurkClientTypes.ReviewReport? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assignmentReviewPolicy = assignmentReviewPolicy
        self.assignmentReviewReport = assignmentReviewReport
        self.hitId = hitId
        self.hitReviewPolicy = hitReviewPolicy
        self.hitReviewReport = hitReviewReport
        self.nextToken = nextToken
    }
}

public struct ListWorkerBlocksInput: Swift.Sendable {
    public var maxResults: Swift.Int?
    /// Pagination token
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MTurkClientTypes {

    /// The WorkerBlock data structure represents a Worker who has been blocked. It has two elements: the WorkerId and the Reason for the block.
    public struct WorkerBlock: Swift.Sendable {
        /// A message explaining the reason the Worker was blocked.
        public var reason: Swift.String?
        /// The ID of the Worker who accepted the HIT.
        public var workerId: Swift.String?

        public init(
            reason: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.reason = reason
            self.workerId = workerId
        }
    }
}

public struct ListWorkerBlocksOutput: Swift.Sendable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of assignments on the page in the filtered results list, equivalent to the number of assignments returned by this call.
    public var numResults: Swift.Int?
    /// The list of WorkerBlocks, containing the collection of Worker IDs and reasons for blocking.
    public var workerBlocks: [MTurkClientTypes.WorkerBlock]?

    public init(
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        workerBlocks: [MTurkClientTypes.WorkerBlock]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.workerBlocks = workerBlocks
    }
}

public struct ListWorkersWithQualificationTypeInput: Swift.Sendable {
    /// Limit the number of results returned.
    public var maxResults: Swift.Int?
    /// Pagination Token
    public var nextToken: Swift.String?
    /// The ID of the Qualification type of the Qualifications to return.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// The status of the Qualifications to return. Can be Granted | Revoked.
    public var status: MTurkClientTypes.QualificationStatus?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil,
        status: MTurkClientTypes.QualificationStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.qualificationTypeId = qualificationTypeId
        self.status = status
    }
}

public struct ListWorkersWithQualificationTypeOutput: Swift.Sendable {
    /// If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.
    public var nextToken: Swift.String?
    /// The number of Qualifications on this page in the filtered results list, equivalent to the number of Qualifications being returned by this call.
    public var numResults: Swift.Int?
    /// The list of Qualification elements returned by this call.
    public var qualifications: [MTurkClientTypes.Qualification]?

    public init(
        nextToken: Swift.String? = nil,
        numResults: Swift.Int? = nil,
        qualifications: [MTurkClientTypes.Qualification]? = nil
    )
    {
        self.nextToken = nextToken
        self.numResults = numResults
        self.qualifications = qualifications
    }
}

public struct NotifyWorkersInput: Swift.Sendable {
    /// The text of the email message to send. Can include up to 4,096 characters
    /// This member is required.
    public var messageText: Swift.String?
    /// The subject line of the email message to send. Can include up to 200 characters.
    /// This member is required.
    public var subject: Swift.String?
    /// A list of Worker IDs you wish to notify. You can notify upto 100 Workers at a time.
    /// This member is required.
    public var workerIds: [Swift.String]?

    public init(
        messageText: Swift.String? = nil,
        subject: Swift.String? = nil,
        workerIds: [Swift.String]? = nil
    )
    {
        self.messageText = messageText
        self.subject = subject
        self.workerIds = workerIds
    }
}

extension MTurkClientTypes {

    public enum NotifyWorkersFailureCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hardfailure
        case softfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [NotifyWorkersFailureCode] {
            return [
                .hardfailure,
                .softfailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hardfailure: return "HardFailure"
            case .softfailure: return "SoftFailure"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// When MTurk encounters an issue with notifying the Workers you specified, it returns back this object with failure details.
    public struct NotifyWorkersFailureStatus: Swift.Sendable {
        /// Encoded value for the failure type.
        public var notifyWorkersFailureCode: MTurkClientTypes.NotifyWorkersFailureCode?
        /// A message detailing the reason the Worker could not be notified.
        public var notifyWorkersFailureMessage: Swift.String?
        /// The ID of the Worker.
        public var workerId: Swift.String?

        public init(
            notifyWorkersFailureCode: MTurkClientTypes.NotifyWorkersFailureCode? = nil,
            notifyWorkersFailureMessage: Swift.String? = nil,
            workerId: Swift.String? = nil
        )
        {
            self.notifyWorkersFailureCode = notifyWorkersFailureCode
            self.notifyWorkersFailureMessage = notifyWorkersFailureMessage
            self.workerId = workerId
        }
    }
}

public struct NotifyWorkersOutput: Swift.Sendable {
    /// When MTurk sends notifications to the list of Workers, it returns back any failures it encounters in this list of NotifyWorkersFailureStatus objects.
    public var notifyWorkersFailureStatuses: [MTurkClientTypes.NotifyWorkersFailureStatus]?

    public init(
        notifyWorkersFailureStatuses: [MTurkClientTypes.NotifyWorkersFailureStatus]? = nil
    )
    {
        self.notifyWorkersFailureStatuses = notifyWorkersFailureStatuses
    }
}

public struct RejectAssignmentInput: Swift.Sendable {
    /// The ID of the assignment. The assignment must correspond to a HIT created by the Requester.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// A message for the Worker, which the Worker can see in the Status section of the web site.
    /// This member is required.
    public var requesterFeedback: Swift.String?

    public init(
        assignmentId: Swift.String? = nil,
        requesterFeedback: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.requesterFeedback = requesterFeedback
    }
}

public struct RejectAssignmentOutput: Swift.Sendable {

    public init() { }
}

public struct RejectQualificationRequestInput: Swift.Sendable {
    /// The ID of the Qualification request, as returned by the ListQualificationRequests operation.
    /// This member is required.
    public var qualificationRequestId: Swift.String?
    /// A text message explaining why the request was rejected, to be shown to the Worker who made the request.
    public var reason: Swift.String?

    public init(
        qualificationRequestId: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.qualificationRequestId = qualificationRequestId
        self.reason = reason
    }
}

public struct RejectQualificationRequestOutput: Swift.Sendable {

    public init() { }
}

public struct SendBonusInput: Swift.Sendable {
    /// The ID of the assignment for which this bonus is paid.
    /// This member is required.
    public var assignmentId: Swift.String?
    /// The Bonus amount is a US Dollar amount specified using a string (for example, "5" represents $5.00 USD and "101.42" represents $101.42 USD). Do not include currency symbols or currency codes.
    /// This member is required.
    public var bonusAmount: Swift.String?
    /// A message that explains the reason for the bonus payment. The Worker receiving the bonus can see this message.
    /// This member is required.
    public var reason: Swift.String?
    /// A unique identifier for this request, which allows you to retry the call on error without granting multiple bonuses. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the bonus already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return an error with a message containing the request ID.
    public var uniqueRequestToken: Swift.String?
    /// The ID of the Worker being paid the bonus.
    /// This member is required.
    public var workerId: Swift.String?

    public init(
        assignmentId: Swift.String? = nil,
        bonusAmount: Swift.String? = nil,
        reason: Swift.String? = nil,
        uniqueRequestToken: Swift.String? = nil,
        workerId: Swift.String? = nil
    )
    {
        self.assignmentId = assignmentId
        self.bonusAmount = bonusAmount
        self.reason = reason
        self.uniqueRequestToken = uniqueRequestToken
        self.workerId = workerId
    }
}

public struct SendBonusOutput: Swift.Sendable {

    public init() { }
}

extension MTurkClientTypes {

    public enum NotificationTransport: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case email
        case sns
        case sqs
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationTransport] {
            return [
                .email,
                .sns,
                .sqs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case .sns: return "SNS"
            case .sqs: return "SQS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MTurkClientTypes {

    /// The NotificationSpecification data structure describes a HIT event notification for a HIT type.
    public struct NotificationSpecification: Swift.Sendable {
        /// The target for notification messages. The Destination’s format is determined by the specified Transport:
        ///
        /// * When Transport is Email, the Destination is your email address.
        ///
        /// * When Transport is SQS, the Destination is your queue URL.
        ///
        /// * When Transport is SNS, the Destination is the ARN of your topic.
        /// This member is required.
        public var destination: Swift.String?
        /// The list of events that should cause notifications to be sent. Valid Values: AssignmentAccepted | AssignmentAbandoned | AssignmentReturned | AssignmentSubmitted | AssignmentRejected | AssignmentApproved | HITCreated | HITExtended | HITDisposed | HITReviewable | HITExpired | Ping. The Ping event is only valid for the SendTestEventNotification operation.
        /// This member is required.
        public var eventTypes: [MTurkClientTypes.EventType]?
        /// The method Amazon Mechanical Turk uses to send the notification. Valid Values: Email | SQS | SNS.
        /// This member is required.
        public var transport: MTurkClientTypes.NotificationTransport?
        /// The version of the Notification API to use. Valid value is 2006-05-05.
        /// This member is required.
        public var version: Swift.String?

        public init(
            destination: Swift.String? = nil,
            eventTypes: [MTurkClientTypes.EventType]? = nil,
            transport: MTurkClientTypes.NotificationTransport? = nil,
            version: Swift.String? = nil
        )
        {
            self.destination = destination
            self.eventTypes = eventTypes
            self.transport = transport
            self.version = version
        }
    }
}

public struct SendTestEventNotificationInput: Swift.Sendable {
    /// The notification specification to test. This value is identical to the value you would provide to the UpdateNotificationSettings operation when you establish the notification specification for a HIT type.
    /// This member is required.
    public var notification: MTurkClientTypes.NotificationSpecification?
    /// The event to simulate to test the notification specification. This event is included in the test message even if the notification specification does not include the event type. The notification specification does not filter out the test event.
    /// This member is required.
    public var testEventType: MTurkClientTypes.EventType?

    public init(
        notification: MTurkClientTypes.NotificationSpecification? = nil,
        testEventType: MTurkClientTypes.EventType? = nil
    )
    {
        self.notification = notification
        self.testEventType = testEventType
    }
}

public struct SendTestEventNotificationOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateExpirationForHITInput: Swift.Sendable {
    /// The date and time at which you want the HIT to expire
    /// This member is required.
    public var expireAt: Foundation.Date?
    /// The HIT to update.
    /// This member is required.
    public var hitId: Swift.String?

    public init(
        expireAt: Foundation.Date? = nil,
        hitId: Swift.String? = nil
    )
    {
        self.expireAt = expireAt
        self.hitId = hitId
    }
}

public struct UpdateExpirationForHITOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateHITReviewStatusInput: Swift.Sendable {
    /// The ID of the HIT to update.
    /// This member is required.
    public var hitId: Swift.String?
    /// Specifies how to update the HIT status. Default is False.
    ///
    /// * Setting this to false will only transition a HIT from Reviewable to Reviewing
    ///
    /// * Setting this to true will only transition a HIT from Reviewing to Reviewable
    public var revert: Swift.Bool?

    public init(
        hitId: Swift.String? = nil,
        revert: Swift.Bool? = nil
    )
    {
        self.hitId = hitId
        self.revert = revert
    }
}

public struct UpdateHITReviewStatusOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateHITTypeOfHITInput: Swift.Sendable {
    /// The HIT to update.
    /// This member is required.
    public var hitId: Swift.String?
    /// The ID of the new HIT type.
    /// This member is required.
    public var hitTypeId: Swift.String?

    public init(
        hitId: Swift.String? = nil,
        hitTypeId: Swift.String? = nil
    )
    {
        self.hitId = hitId
        self.hitTypeId = hitTypeId
    }
}

public struct UpdateHITTypeOfHITOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateNotificationSettingsInput: Swift.Sendable {
    /// Specifies whether notifications are sent for HITs of this HIT type, according to the notification specification. You must specify either the Notification parameter or the Active parameter for the call to UpdateNotificationSettings to succeed.
    public var active: Swift.Bool?
    /// The ID of the HIT type whose notification specification is being updated.
    /// This member is required.
    public var hitTypeId: Swift.String?
    /// The notification specification for the HIT type.
    public var notification: MTurkClientTypes.NotificationSpecification?

    public init(
        active: Swift.Bool? = nil,
        hitTypeId: Swift.String? = nil,
        notification: MTurkClientTypes.NotificationSpecification? = nil
    )
    {
        self.active = active
        self.hitTypeId = hitTypeId
        self.notification = notification
    }
}

public struct UpdateNotificationSettingsOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateQualificationTypeInput: Swift.Sendable {
    /// The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.
    public var answerKey: Swift.String?
    /// Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test. Constraints: If the Test parameter is specified, this parameter cannot be true.
    public var autoGranted: Swift.Bool?
    /// The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.
    public var autoGrantedValue: Swift.Int?
    /// The new description of the Qualification type.
    public var description: Swift.String?
    /// The ID of the Qualification type to update.
    /// This member is required.
    public var qualificationTypeId: Swift.String?
    /// The new status of the Qualification type - Active | Inactive
    public var qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus?
    /// The amount of time, in seconds, that Workers must wait after requesting a Qualification of the specified Qualification type before they can retry the Qualification request. It is not possible to disable retries for a Qualification type after it has been created with retries enabled. If you want to disable retries, you must dispose of the existing retry-enabled Qualification type using DisposeQualificationType and then create a new Qualification type with retries disabled using CreateQualificationType.
    public var retryDelayInSeconds: Swift.Int?
    /// The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, TestDurationInSeconds must also be specified. Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true. Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.
    public var test: Swift.String?
    /// The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.
    public var testDurationInSeconds: Swift.Int?

    public init(
        answerKey: Swift.String? = nil,
        autoGranted: Swift.Bool? = nil,
        autoGrantedValue: Swift.Int? = nil,
        description: Swift.String? = nil,
        qualificationTypeId: Swift.String? = nil,
        qualificationTypeStatus: MTurkClientTypes.QualificationTypeStatus? = nil,
        retryDelayInSeconds: Swift.Int? = nil,
        test: Swift.String? = nil,
        testDurationInSeconds: Swift.Int? = nil
    )
    {
        self.answerKey = answerKey
        self.autoGranted = autoGranted
        self.autoGrantedValue = autoGrantedValue
        self.description = description
        self.qualificationTypeId = qualificationTypeId
        self.qualificationTypeStatus = qualificationTypeStatus
        self.retryDelayInSeconds = retryDelayInSeconds
        self.test = test
        self.testDurationInSeconds = testDurationInSeconds
    }
}

public struct UpdateQualificationTypeOutput: Swift.Sendable {
    /// Contains a QualificationType data structure.
    public var qualificationType: MTurkClientTypes.QualificationType?

    public init(
        qualificationType: MTurkClientTypes.QualificationType? = nil
    )
    {
        self.qualificationType = qualificationType
    }
}

extension AcceptQualificationRequestInput {

    static func urlPathProvider(_ value: AcceptQualificationRequestInput) -> Swift.String? {
        return "/"
    }
}

extension ApproveAssignmentInput {

    static func urlPathProvider(_ value: ApproveAssignmentInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateQualificationWithWorkerInput {

    static func urlPathProvider(_ value: AssociateQualificationWithWorkerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAdditionalAssignmentsForHITInput {

    static func urlPathProvider(_ value: CreateAdditionalAssignmentsForHITInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHITInput {

    static func urlPathProvider(_ value: CreateHITInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHITTypeInput {

    static func urlPathProvider(_ value: CreateHITTypeInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHITWithHITTypeInput {

    static func urlPathProvider(_ value: CreateHITWithHITTypeInput) -> Swift.String? {
        return "/"
    }
}

extension CreateQualificationTypeInput {

    static func urlPathProvider(_ value: CreateQualificationTypeInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWorkerBlockInput {

    static func urlPathProvider(_ value: CreateWorkerBlockInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHITInput {

    static func urlPathProvider(_ value: DeleteHITInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteQualificationTypeInput {

    static func urlPathProvider(_ value: DeleteQualificationTypeInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWorkerBlockInput {

    static func urlPathProvider(_ value: DeleteWorkerBlockInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateQualificationFromWorkerInput {

    static func urlPathProvider(_ value: DisassociateQualificationFromWorkerInput) -> Swift.String? {
        return "/"
    }
}

extension GetAccountBalanceInput {

    static func urlPathProvider(_ value: GetAccountBalanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetAssignmentInput {

    static func urlPathProvider(_ value: GetAssignmentInput) -> Swift.String? {
        return "/"
    }
}

extension GetFileUploadURLInput {

    static func urlPathProvider(_ value: GetFileUploadURLInput) -> Swift.String? {
        return "/"
    }
}

extension GetHITInput {

    static func urlPathProvider(_ value: GetHITInput) -> Swift.String? {
        return "/"
    }
}

extension GetQualificationScoreInput {

    static func urlPathProvider(_ value: GetQualificationScoreInput) -> Swift.String? {
        return "/"
    }
}

extension GetQualificationTypeInput {

    static func urlPathProvider(_ value: GetQualificationTypeInput) -> Swift.String? {
        return "/"
    }
}

extension ListAssignmentsForHITInput {

    static func urlPathProvider(_ value: ListAssignmentsForHITInput) -> Swift.String? {
        return "/"
    }
}

extension ListBonusPaymentsInput {

    static func urlPathProvider(_ value: ListBonusPaymentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHITsInput {

    static func urlPathProvider(_ value: ListHITsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHITsForQualificationTypeInput {

    static func urlPathProvider(_ value: ListHITsForQualificationTypeInput) -> Swift.String? {
        return "/"
    }
}

extension ListQualificationRequestsInput {

    static func urlPathProvider(_ value: ListQualificationRequestsInput) -> Swift.String? {
        return "/"
    }
}

extension ListQualificationTypesInput {

    static func urlPathProvider(_ value: ListQualificationTypesInput) -> Swift.String? {
        return "/"
    }
}

extension ListReviewableHITsInput {

    static func urlPathProvider(_ value: ListReviewableHITsInput) -> Swift.String? {
        return "/"
    }
}

extension ListReviewPolicyResultsForHITInput {

    static func urlPathProvider(_ value: ListReviewPolicyResultsForHITInput) -> Swift.String? {
        return "/"
    }
}

extension ListWorkerBlocksInput {

    static func urlPathProvider(_ value: ListWorkerBlocksInput) -> Swift.String? {
        return "/"
    }
}

extension ListWorkersWithQualificationTypeInput {

    static func urlPathProvider(_ value: ListWorkersWithQualificationTypeInput) -> Swift.String? {
        return "/"
    }
}

extension NotifyWorkersInput {

    static func urlPathProvider(_ value: NotifyWorkersInput) -> Swift.String? {
        return "/"
    }
}

extension RejectAssignmentInput {

    static func urlPathProvider(_ value: RejectAssignmentInput) -> Swift.String? {
        return "/"
    }
}

extension RejectQualificationRequestInput {

    static func urlPathProvider(_ value: RejectQualificationRequestInput) -> Swift.String? {
        return "/"
    }
}

extension SendBonusInput {

    static func urlPathProvider(_ value: SendBonusInput) -> Swift.String? {
        return "/"
    }
}

extension SendTestEventNotificationInput {

    static func urlPathProvider(_ value: SendTestEventNotificationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateExpirationForHITInput {

    static func urlPathProvider(_ value: UpdateExpirationForHITInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateHITReviewStatusInput {

    static func urlPathProvider(_ value: UpdateHITReviewStatusInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateHITTypeOfHITInput {

    static func urlPathProvider(_ value: UpdateHITTypeOfHITInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateNotificationSettingsInput {

    static func urlPathProvider(_ value: UpdateNotificationSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateQualificationTypeInput {

    static func urlPathProvider(_ value: UpdateQualificationTypeInput) -> Swift.String? {
        return "/"
    }
}

extension AcceptQualificationRequestInput {

    static func write(value: AcceptQualificationRequestInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntegerValue"].write(value.integerValue)
        try writer["QualificationRequestId"].write(value.qualificationRequestId)
    }
}

extension ApproveAssignmentInput {

    static func write(value: ApproveAssignmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentId"].write(value.assignmentId)
        try writer["OverrideRejection"].write(value.overrideRejection)
        try writer["RequesterFeedback"].write(value.requesterFeedback)
    }
}

extension AssociateQualificationWithWorkerInput {

    static func write(value: AssociateQualificationWithWorkerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IntegerValue"].write(value.integerValue)
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
        try writer["SendNotification"].write(value.sendNotification)
        try writer["WorkerId"].write(value.workerId)
    }
}

extension CreateAdditionalAssignmentsForHITInput {

    static func write(value: CreateAdditionalAssignmentsForHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITId"].write(value.hitId)
        try writer["NumberOfAdditionalAssignments"].write(value.numberOfAdditionalAssignments)
        try writer["UniqueRequestToken"].write(value.uniqueRequestToken)
    }
}

extension CreateHITInput {

    static func write(value: CreateHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentDurationInSeconds"].write(value.assignmentDurationInSeconds)
        try writer["AssignmentReviewPolicy"].write(value.assignmentReviewPolicy, with: MTurkClientTypes.ReviewPolicy.write(value:to:))
        try writer["AutoApprovalDelayInSeconds"].write(value.autoApprovalDelayInSeconds)
        try writer["Description"].write(value.description)
        try writer["HITLayoutId"].write(value.hitLayoutId)
        try writer["HITLayoutParameters"].writeList(value.hitLayoutParameters, memberWritingClosure: MTurkClientTypes.HITLayoutParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HITReviewPolicy"].write(value.hitReviewPolicy, with: MTurkClientTypes.ReviewPolicy.write(value:to:))
        try writer["Keywords"].write(value.keywords)
        try writer["LifetimeInSeconds"].write(value.lifetimeInSeconds)
        try writer["MaxAssignments"].write(value.maxAssignments)
        try writer["QualificationRequirements"].writeList(value.qualificationRequirements, memberWritingClosure: MTurkClientTypes.QualificationRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Question"].write(value.question)
        try writer["RequesterAnnotation"].write(value.requesterAnnotation)
        try writer["Reward"].write(value.reward)
        try writer["Title"].write(value.title)
        try writer["UniqueRequestToken"].write(value.uniqueRequestToken)
    }
}

extension CreateHITTypeInput {

    static func write(value: CreateHITTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentDurationInSeconds"].write(value.assignmentDurationInSeconds)
        try writer["AutoApprovalDelayInSeconds"].write(value.autoApprovalDelayInSeconds)
        try writer["Description"].write(value.description)
        try writer["Keywords"].write(value.keywords)
        try writer["QualificationRequirements"].writeList(value.qualificationRequirements, memberWritingClosure: MTurkClientTypes.QualificationRequirement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Reward"].write(value.reward)
        try writer["Title"].write(value.title)
    }
}

extension CreateHITWithHITTypeInput {

    static func write(value: CreateHITWithHITTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentReviewPolicy"].write(value.assignmentReviewPolicy, with: MTurkClientTypes.ReviewPolicy.write(value:to:))
        try writer["HITLayoutId"].write(value.hitLayoutId)
        try writer["HITLayoutParameters"].writeList(value.hitLayoutParameters, memberWritingClosure: MTurkClientTypes.HITLayoutParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HITReviewPolicy"].write(value.hitReviewPolicy, with: MTurkClientTypes.ReviewPolicy.write(value:to:))
        try writer["HITTypeId"].write(value.hitTypeId)
        try writer["LifetimeInSeconds"].write(value.lifetimeInSeconds)
        try writer["MaxAssignments"].write(value.maxAssignments)
        try writer["Question"].write(value.question)
        try writer["RequesterAnnotation"].write(value.requesterAnnotation)
        try writer["UniqueRequestToken"].write(value.uniqueRequestToken)
    }
}

extension CreateQualificationTypeInput {

    static func write(value: CreateQualificationTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnswerKey"].write(value.answerKey)
        try writer["AutoGranted"].write(value.autoGranted)
        try writer["AutoGrantedValue"].write(value.autoGrantedValue)
        try writer["Description"].write(value.description)
        try writer["Keywords"].write(value.keywords)
        try writer["Name"].write(value.name)
        try writer["QualificationTypeStatus"].write(value.qualificationTypeStatus)
        try writer["RetryDelayInSeconds"].write(value.retryDelayInSeconds)
        try writer["Test"].write(value.test)
        try writer["TestDurationInSeconds"].write(value.testDurationInSeconds)
    }
}

extension CreateWorkerBlockInput {

    static func write(value: CreateWorkerBlockInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Reason"].write(value.reason)
        try writer["WorkerId"].write(value.workerId)
    }
}

extension DeleteHITInput {

    static func write(value: DeleteHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITId"].write(value.hitId)
    }
}

extension DeleteQualificationTypeInput {

    static func write(value: DeleteQualificationTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
    }
}

extension DeleteWorkerBlockInput {

    static func write(value: DeleteWorkerBlockInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Reason"].write(value.reason)
        try writer["WorkerId"].write(value.workerId)
    }
}

extension DisassociateQualificationFromWorkerInput {

    static func write(value: DisassociateQualificationFromWorkerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
        try writer["Reason"].write(value.reason)
        try writer["WorkerId"].write(value.workerId)
    }
}

extension GetAccountBalanceInput {

    static func write(value: GetAccountBalanceInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetAssignmentInput {

    static func write(value: GetAssignmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentId"].write(value.assignmentId)
    }
}

extension GetFileUploadURLInput {

    static func write(value: GetFileUploadURLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentId"].write(value.assignmentId)
        try writer["QuestionIdentifier"].write(value.questionIdentifier)
    }
}

extension GetHITInput {

    static func write(value: GetHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITId"].write(value.hitId)
    }
}

extension GetQualificationScoreInput {

    static func write(value: GetQualificationScoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
        try writer["WorkerId"].write(value.workerId)
    }
}

extension GetQualificationTypeInput {

    static func write(value: GetQualificationTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
    }
}

extension ListAssignmentsForHITInput {

    static func write(value: ListAssignmentsForHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentStatuses"].writeList(value.assignmentStatuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MTurkClientTypes.AssignmentStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HITId"].write(value.hitId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListBonusPaymentsInput {

    static func write(value: ListBonusPaymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentId"].write(value.assignmentId)
        try writer["HITId"].write(value.hitId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListHITsInput {

    static func write(value: ListHITsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListHITsForQualificationTypeInput {

    static func write(value: ListHITsForQualificationTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
    }
}

extension ListQualificationRequestsInput {

    static func write(value: ListQualificationRequestsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
    }
}

extension ListQualificationTypesInput {

    static func write(value: ListQualificationTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["MustBeOwnedByCaller"].write(value.mustBeOwnedByCaller)
        try writer["MustBeRequestable"].write(value.mustBeRequestable)
        try writer["NextToken"].write(value.nextToken)
        try writer["Query"].write(value.query)
    }
}

extension ListReviewableHITsInput {

    static func write(value: ListReviewableHITsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITTypeId"].write(value.hitTypeId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListReviewPolicyResultsForHITInput {

    static func write(value: ListReviewPolicyResultsForHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITId"].write(value.hitId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["PolicyLevels"].writeList(value.policyLevels, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MTurkClientTypes.ReviewPolicyLevel>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RetrieveActions"].write(value.retrieveActions)
        try writer["RetrieveResults"].write(value.retrieveResults)
    }
}

extension ListWorkerBlocksInput {

    static func write(value: ListWorkerBlocksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListWorkersWithQualificationTypeInput {

    static func write(value: ListWorkersWithQualificationTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
        try writer["Status"].write(value.status)
    }
}

extension NotifyWorkersInput {

    static func write(value: NotifyWorkersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MessageText"].write(value.messageText)
        try writer["Subject"].write(value.subject)
        try writer["WorkerIds"].writeList(value.workerIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RejectAssignmentInput {

    static func write(value: RejectAssignmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentId"].write(value.assignmentId)
        try writer["RequesterFeedback"].write(value.requesterFeedback)
    }
}

extension RejectQualificationRequestInput {

    static func write(value: RejectQualificationRequestInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QualificationRequestId"].write(value.qualificationRequestId)
        try writer["Reason"].write(value.reason)
    }
}

extension SendBonusInput {

    static func write(value: SendBonusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssignmentId"].write(value.assignmentId)
        try writer["BonusAmount"].write(value.bonusAmount)
        try writer["Reason"].write(value.reason)
        try writer["UniqueRequestToken"].write(value.uniqueRequestToken)
        try writer["WorkerId"].write(value.workerId)
    }
}

extension SendTestEventNotificationInput {

    static func write(value: SendTestEventNotificationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Notification"].write(value.notification, with: MTurkClientTypes.NotificationSpecification.write(value:to:))
        try writer["TestEventType"].write(value.testEventType)
    }
}

extension UpdateExpirationForHITInput {

    static func write(value: UpdateExpirationForHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpireAt"].writeTimestamp(value.expireAt, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["HITId"].write(value.hitId)
    }
}

extension UpdateHITReviewStatusInput {

    static func write(value: UpdateHITReviewStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITId"].write(value.hitId)
        try writer["Revert"].write(value.revert)
    }
}

extension UpdateHITTypeOfHITInput {

    static func write(value: UpdateHITTypeOfHITInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HITId"].write(value.hitId)
        try writer["HITTypeId"].write(value.hitTypeId)
    }
}

extension UpdateNotificationSettingsInput {

    static func write(value: UpdateNotificationSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Active"].write(value.active)
        try writer["HITTypeId"].write(value.hitTypeId)
        try writer["Notification"].write(value.notification, with: MTurkClientTypes.NotificationSpecification.write(value:to:))
    }
}

extension UpdateQualificationTypeInput {

    static func write(value: UpdateQualificationTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnswerKey"].write(value.answerKey)
        try writer["AutoGranted"].write(value.autoGranted)
        try writer["AutoGrantedValue"].write(value.autoGrantedValue)
        try writer["Description"].write(value.description)
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
        try writer["QualificationTypeStatus"].write(value.qualificationTypeStatus)
        try writer["RetryDelayInSeconds"].write(value.retryDelayInSeconds)
        try writer["Test"].write(value.test)
        try writer["TestDurationInSeconds"].write(value.testDurationInSeconds)
    }
}

extension AcceptQualificationRequestOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptQualificationRequestOutput {
        return AcceptQualificationRequestOutput()
    }
}

extension ApproveAssignmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ApproveAssignmentOutput {
        return ApproveAssignmentOutput()
    }
}

extension AssociateQualificationWithWorkerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateQualificationWithWorkerOutput {
        return AssociateQualificationWithWorkerOutput()
    }
}

extension CreateAdditionalAssignmentsForHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAdditionalAssignmentsForHITOutput {
        return CreateAdditionalAssignmentsForHITOutput()
    }
}

extension CreateHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHITOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHITOutput()
        value.hit = try reader["HIT"].readIfPresent(with: MTurkClientTypes.HIT.read(from:))
        return value
    }
}

extension CreateHITTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHITTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHITTypeOutput()
        value.hitTypeId = try reader["HITTypeId"].readIfPresent()
        return value
    }
}

extension CreateHITWithHITTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHITWithHITTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHITWithHITTypeOutput()
        value.hit = try reader["HIT"].readIfPresent(with: MTurkClientTypes.HIT.read(from:))
        return value
    }
}

extension CreateQualificationTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateQualificationTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateQualificationTypeOutput()
        value.qualificationType = try reader["QualificationType"].readIfPresent(with: MTurkClientTypes.QualificationType.read(from:))
        return value
    }
}

extension CreateWorkerBlockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWorkerBlockOutput {
        return CreateWorkerBlockOutput()
    }
}

extension DeleteHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHITOutput {
        return DeleteHITOutput()
    }
}

extension DeleteQualificationTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteQualificationTypeOutput {
        return DeleteQualificationTypeOutput()
    }
}

extension DeleteWorkerBlockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWorkerBlockOutput {
        return DeleteWorkerBlockOutput()
    }
}

extension DisassociateQualificationFromWorkerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateQualificationFromWorkerOutput {
        return DisassociateQualificationFromWorkerOutput()
    }
}

extension GetAccountBalanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountBalanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountBalanceOutput()
        value.availableBalance = try reader["AvailableBalance"].readIfPresent()
        value.onHoldBalance = try reader["OnHoldBalance"].readIfPresent()
        return value
    }
}

extension GetAssignmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAssignmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAssignmentOutput()
        value.assignment = try reader["Assignment"].readIfPresent(with: MTurkClientTypes.Assignment.read(from:))
        value.hit = try reader["HIT"].readIfPresent(with: MTurkClientTypes.HIT.read(from:))
        return value
    }
}

extension GetFileUploadURLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFileUploadURLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFileUploadURLOutput()
        value.fileUploadURL = try reader["FileUploadURL"].readIfPresent()
        return value
    }
}

extension GetHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetHITOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetHITOutput()
        value.hit = try reader["HIT"].readIfPresent(with: MTurkClientTypes.HIT.read(from:))
        return value
    }
}

extension GetQualificationScoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQualificationScoreOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQualificationScoreOutput()
        value.qualification = try reader["Qualification"].readIfPresent(with: MTurkClientTypes.Qualification.read(from:))
        return value
    }
}

extension GetQualificationTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQualificationTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQualificationTypeOutput()
        value.qualificationType = try reader["QualificationType"].readIfPresent(with: MTurkClientTypes.QualificationType.read(from:))
        return value
    }
}

extension ListAssignmentsForHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssignmentsForHITOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssignmentsForHITOutput()
        value.assignments = try reader["Assignments"].readListIfPresent(memberReadingClosure: MTurkClientTypes.Assignment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        return value
    }
}

extension ListBonusPaymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBonusPaymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBonusPaymentsOutput()
        value.bonusPayments = try reader["BonusPayments"].readListIfPresent(memberReadingClosure: MTurkClientTypes.BonusPayment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        return value
    }
}

extension ListHITsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHITsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHITsOutput()
        value.hiTs = try reader["HITs"].readListIfPresent(memberReadingClosure: MTurkClientTypes.HIT.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        return value
    }
}

extension ListHITsForQualificationTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHITsForQualificationTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHITsForQualificationTypeOutput()
        value.hiTs = try reader["HITs"].readListIfPresent(memberReadingClosure: MTurkClientTypes.HIT.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        return value
    }
}

extension ListQualificationRequestsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQualificationRequestsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQualificationRequestsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        value.qualificationRequests = try reader["QualificationRequests"].readListIfPresent(memberReadingClosure: MTurkClientTypes.QualificationRequest.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListQualificationTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQualificationTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQualificationTypesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        value.qualificationTypes = try reader["QualificationTypes"].readListIfPresent(memberReadingClosure: MTurkClientTypes.QualificationType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListReviewableHITsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReviewableHITsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReviewableHITsOutput()
        value.hiTs = try reader["HITs"].readListIfPresent(memberReadingClosure: MTurkClientTypes.HIT.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        return value
    }
}

extension ListReviewPolicyResultsForHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReviewPolicyResultsForHITOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReviewPolicyResultsForHITOutput()
        value.assignmentReviewPolicy = try reader["AssignmentReviewPolicy"].readIfPresent(with: MTurkClientTypes.ReviewPolicy.read(from:))
        value.assignmentReviewReport = try reader["AssignmentReviewReport"].readIfPresent(with: MTurkClientTypes.ReviewReport.read(from:))
        value.hitId = try reader["HITId"].readIfPresent()
        value.hitReviewPolicy = try reader["HITReviewPolicy"].readIfPresent(with: MTurkClientTypes.ReviewPolicy.read(from:))
        value.hitReviewReport = try reader["HITReviewReport"].readIfPresent(with: MTurkClientTypes.ReviewReport.read(from:))
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListWorkerBlocksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkerBlocksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkerBlocksOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        value.workerBlocks = try reader["WorkerBlocks"].readListIfPresent(memberReadingClosure: MTurkClientTypes.WorkerBlock.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListWorkersWithQualificationTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkersWithQualificationTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkersWithQualificationTypeOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.numResults = try reader["NumResults"].readIfPresent()
        value.qualifications = try reader["Qualifications"].readListIfPresent(memberReadingClosure: MTurkClientTypes.Qualification.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension NotifyWorkersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> NotifyWorkersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = NotifyWorkersOutput()
        value.notifyWorkersFailureStatuses = try reader["NotifyWorkersFailureStatuses"].readListIfPresent(memberReadingClosure: MTurkClientTypes.NotifyWorkersFailureStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RejectAssignmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectAssignmentOutput {
        return RejectAssignmentOutput()
    }
}

extension RejectQualificationRequestOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectQualificationRequestOutput {
        return RejectQualificationRequestOutput()
    }
}

extension SendBonusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendBonusOutput {
        return SendBonusOutput()
    }
}

extension SendTestEventNotificationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendTestEventNotificationOutput {
        return SendTestEventNotificationOutput()
    }
}

extension UpdateExpirationForHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateExpirationForHITOutput {
        return UpdateExpirationForHITOutput()
    }
}

extension UpdateHITReviewStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateHITReviewStatusOutput {
        return UpdateHITReviewStatusOutput()
    }
}

extension UpdateHITTypeOfHITOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateHITTypeOfHITOutput {
        return UpdateHITTypeOfHITOutput()
    }
}

extension UpdateNotificationSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNotificationSettingsOutput {
        return UpdateNotificationSettingsOutput()
    }
}

extension UpdateQualificationTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateQualificationTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateQualificationTypeOutput()
        value.qualificationType = try reader["QualificationType"].readIfPresent(with: MTurkClientTypes.QualificationType.read(from:))
        return value
    }
}

enum AcceptQualificationRequestOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ApproveAssignmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateQualificationWithWorkerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAdditionalAssignmentsForHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHITTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHITWithHITTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateQualificationTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWorkerBlockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteQualificationTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWorkerBlockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateQualificationFromWorkerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountBalanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAssignmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFileUploadURLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQualificationScoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQualificationTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssignmentsForHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBonusPaymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHITsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHITsForQualificationTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQualificationRequestsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQualificationTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReviewableHITsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReviewPolicyResultsForHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkerBlocksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkersWithQualificationTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum NotifyWorkersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectAssignmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectQualificationRequestOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendBonusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendTestEventNotificationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateExpirationForHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateHITReviewStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateHITTypeOfHITOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNotificationSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateQualificationTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "RequestError": return try RequestError.makeError(baseError: baseError)
            case "ServiceFault": return try ServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension RequestError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestError {
        let reader = baseError.errorBodyReader
        var value = RequestError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.turkErrorCode = try reader["TurkErrorCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceFault {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceFault {
        let reader = baseError.errorBodyReader
        var value = ServiceFault()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.turkErrorCode = try reader["TurkErrorCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MTurkClientTypes.HIT {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.HIT {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.HIT()
        value.hitId = try reader["HITId"].readIfPresent()
        value.hitTypeId = try reader["HITTypeId"].readIfPresent()
        value.hitGroupId = try reader["HITGroupId"].readIfPresent()
        value.hitLayoutId = try reader["HITLayoutId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.title = try reader["Title"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.question = try reader["Question"].readIfPresent()
        value.keywords = try reader["Keywords"].readIfPresent()
        value.hitStatus = try reader["HITStatus"].readIfPresent()
        value.maxAssignments = try reader["MaxAssignments"].readIfPresent()
        value.reward = try reader["Reward"].readIfPresent()
        value.autoApprovalDelayInSeconds = try reader["AutoApprovalDelayInSeconds"].readIfPresent()
        value.expiration = try reader["Expiration"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.assignmentDurationInSeconds = try reader["AssignmentDurationInSeconds"].readIfPresent()
        value.requesterAnnotation = try reader["RequesterAnnotation"].readIfPresent()
        value.qualificationRequirements = try reader["QualificationRequirements"].readListIfPresent(memberReadingClosure: MTurkClientTypes.QualificationRequirement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.hitReviewStatus = try reader["HITReviewStatus"].readIfPresent()
        value.numberOfAssignmentsPending = try reader["NumberOfAssignmentsPending"].readIfPresent()
        value.numberOfAssignmentsAvailable = try reader["NumberOfAssignmentsAvailable"].readIfPresent()
        value.numberOfAssignmentsCompleted = try reader["NumberOfAssignmentsCompleted"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.QualificationRequirement {

    static func write(value: MTurkClientTypes.QualificationRequirement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionsGuarded"].write(value.actionsGuarded)
        try writer["Comparator"].write(value.comparator)
        try writer["IntegerValues"].writeList(value.integerValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LocaleValues"].writeList(value.localeValues, memberWritingClosure: MTurkClientTypes.Locale.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["QualificationTypeId"].write(value.qualificationTypeId)
        try writer["RequiredToPreview"].write(value.requiredToPreview)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.QualificationRequirement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.QualificationRequirement()
        value.qualificationTypeId = try reader["QualificationTypeId"].readIfPresent() ?? ""
        value.comparator = try reader["Comparator"].readIfPresent() ?? .sdkUnknown("")
        value.integerValues = try reader["IntegerValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.localeValues = try reader["LocaleValues"].readListIfPresent(memberReadingClosure: MTurkClientTypes.Locale.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.requiredToPreview = try reader["RequiredToPreview"].readIfPresent()
        value.actionsGuarded = try reader["ActionsGuarded"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.Locale {

    static func write(value: MTurkClientTypes.Locale?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Country"].write(value.country)
        try writer["Subdivision"].write(value.subdivision)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.Locale {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.Locale()
        value.country = try reader["Country"].readIfPresent() ?? ""
        value.subdivision = try reader["Subdivision"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.QualificationType {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.QualificationType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.QualificationType()
        value.qualificationTypeId = try reader["QualificationTypeId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.keywords = try reader["Keywords"].readIfPresent()
        value.qualificationTypeStatus = try reader["QualificationTypeStatus"].readIfPresent()
        value.test = try reader["Test"].readIfPresent()
        value.testDurationInSeconds = try reader["TestDurationInSeconds"].readIfPresent()
        value.answerKey = try reader["AnswerKey"].readIfPresent()
        value.retryDelayInSeconds = try reader["RetryDelayInSeconds"].readIfPresent()
        value.isRequestable = try reader["IsRequestable"].readIfPresent()
        value.autoGranted = try reader["AutoGranted"].readIfPresent()
        value.autoGrantedValue = try reader["AutoGrantedValue"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.Assignment {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.Assignment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.Assignment()
        value.assignmentId = try reader["AssignmentId"].readIfPresent()
        value.workerId = try reader["WorkerId"].readIfPresent()
        value.hitId = try reader["HITId"].readIfPresent()
        value.assignmentStatus = try reader["AssignmentStatus"].readIfPresent()
        value.autoApprovalTime = try reader["AutoApprovalTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.acceptTime = try reader["AcceptTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.approvalTime = try reader["ApprovalTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.rejectionTime = try reader["RejectionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deadline = try reader["Deadline"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.answer = try reader["Answer"].readIfPresent()
        value.requesterFeedback = try reader["RequesterFeedback"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.Qualification {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.Qualification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.Qualification()
        value.qualificationTypeId = try reader["QualificationTypeId"].readIfPresent()
        value.workerId = try reader["WorkerId"].readIfPresent()
        value.grantTime = try reader["GrantTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.integerValue = try reader["IntegerValue"].readIfPresent()
        value.localeValue = try reader["LocaleValue"].readIfPresent(with: MTurkClientTypes.Locale.read(from:))
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.BonusPayment {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.BonusPayment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.BonusPayment()
        value.workerId = try reader["WorkerId"].readIfPresent()
        value.bonusAmount = try reader["BonusAmount"].readIfPresent()
        value.assignmentId = try reader["AssignmentId"].readIfPresent()
        value.reason = try reader["Reason"].readIfPresent()
        value.grantTime = try reader["GrantTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MTurkClientTypes.QualificationRequest {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.QualificationRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.QualificationRequest()
        value.qualificationRequestId = try reader["QualificationRequestId"].readIfPresent()
        value.qualificationTypeId = try reader["QualificationTypeId"].readIfPresent()
        value.workerId = try reader["WorkerId"].readIfPresent()
        value.test = try reader["Test"].readIfPresent()
        value.answer = try reader["Answer"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MTurkClientTypes.ReviewPolicy {

    static func write(value: MTurkClientTypes.ReviewPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: MTurkClientTypes.PolicyParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PolicyName"].write(value.policyName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.ReviewPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.ReviewPolicy()
        value.policyName = try reader["PolicyName"].readIfPresent() ?? ""
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: MTurkClientTypes.PolicyParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MTurkClientTypes.PolicyParameter {

    static func write(value: MTurkClientTypes.PolicyParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["MapEntries"].writeList(value.mapEntries, memberWritingClosure: MTurkClientTypes.ParameterMapEntry.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.PolicyParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.PolicyParameter()
        value.key = try reader["Key"].readIfPresent()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.mapEntries = try reader["MapEntries"].readListIfPresent(memberReadingClosure: MTurkClientTypes.ParameterMapEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MTurkClientTypes.ParameterMapEntry {

    static func write(value: MTurkClientTypes.ParameterMapEntry?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.ParameterMapEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.ParameterMapEntry()
        value.key = try reader["Key"].readIfPresent()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MTurkClientTypes.ReviewReport {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.ReviewReport {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.ReviewReport()
        value.reviewResults = try reader["ReviewResults"].readListIfPresent(memberReadingClosure: MTurkClientTypes.ReviewResultDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.reviewActions = try reader["ReviewActions"].readListIfPresent(memberReadingClosure: MTurkClientTypes.ReviewActionDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MTurkClientTypes.ReviewActionDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.ReviewActionDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.ReviewActionDetail()
        value.actionId = try reader["ActionId"].readIfPresent()
        value.actionName = try reader["ActionName"].readIfPresent()
        value.targetId = try reader["TargetId"].readIfPresent()
        value.targetType = try reader["TargetType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.completeTime = try reader["CompleteTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.result = try reader["Result"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.ReviewResultDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.ReviewResultDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.ReviewResultDetail()
        value.actionId = try reader["ActionId"].readIfPresent()
        value.subjectId = try reader["SubjectId"].readIfPresent()
        value.subjectType = try reader["SubjectType"].readIfPresent()
        value.questionId = try reader["QuestionId"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.WorkerBlock {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.WorkerBlock {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.WorkerBlock()
        value.workerId = try reader["WorkerId"].readIfPresent()
        value.reason = try reader["Reason"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.NotifyWorkersFailureStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> MTurkClientTypes.NotifyWorkersFailureStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MTurkClientTypes.NotifyWorkersFailureStatus()
        value.notifyWorkersFailureCode = try reader["NotifyWorkersFailureCode"].readIfPresent()
        value.notifyWorkersFailureMessage = try reader["NotifyWorkersFailureMessage"].readIfPresent()
        value.workerId = try reader["WorkerId"].readIfPresent()
        return value
    }
}

extension MTurkClientTypes.HITLayoutParameter {

    static func write(value: MTurkClientTypes.HITLayoutParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

extension MTurkClientTypes.NotificationSpecification {

    static func write(value: MTurkClientTypes.NotificationSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Destination"].write(value.destination)
        try writer["EventTypes"].writeList(value.eventTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MTurkClientTypes.EventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Transport"].write(value.transport)
        try writer["Version"].write(value.version)
    }
}

public enum MTurkClientTypes {}
