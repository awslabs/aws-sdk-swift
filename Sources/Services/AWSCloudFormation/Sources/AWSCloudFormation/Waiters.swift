// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import protocol ClientRuntime.ServiceError
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension CloudFormationClient {

    static func changeSetCreateCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeChangeSetInput, DescribeChangeSetOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeChangeSetInput, DescribeChangeSetOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeChangeSetInput, result: Swift.Result<DescribeChangeSetOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "CREATE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return ClientRuntime.JMESUtils.compare(status, ==, "CREATE_COMPLETE")
            }),
            .init(state: .failure, matcher: { (input: DescribeChangeSetInput, result: Swift.Result<DescribeChangeSetOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return ClientRuntime.JMESUtils.compare(status, ==, "FAILED")
            }),
            .init(state: .failure, matcher: { (input: DescribeChangeSetInput, result: Swift.Result<DescribeChangeSetOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeChangeSetInput, DescribeChangeSetOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the ChangeSetCreateComplete event on the describeChangeSet operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeChangeSetInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilChangeSetCreateComplete(options: ClientRuntime.WaiterOptions, input: DescribeChangeSetInput) async throws -> ClientRuntime.WaiterOutcome<DescribeChangeSetOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.changeSetCreateCompleteWaiterConfig(), operation: self.describeChangeSet(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stackCreateCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "CREATE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "CREATE_COMPLETE") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_COMPLETE") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_IN_PROGRESS"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_IN_PROGRESS") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_FAILED") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_IN_PROGRESS"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_IN_PROGRESS") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_FAILED") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_COMPLETE") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "CREATE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "CREATE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "DELETE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "DELETE_COMPLETE") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "DELETE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "DELETE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "ROLLBACK_COMPLETE") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StackCreateComplete event on the describeStacks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStacksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStackCreateComplete(options: ClientRuntime.WaiterOptions, input: DescribeStacksInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStacksOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stackCreateCompleteWaiterConfig(), operation: self.describeStacks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stackDeleteCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "DELETE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "DELETE_COMPLETE") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "DELETE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "DELETE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "CREATE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "CREATE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_IN_PROGRESS"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_IN_PROGRESS") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_COMPLETE") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_COMPLETE") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StackDeleteComplete event on the describeStacks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStacksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStackDeleteComplete(options: ClientRuntime.WaiterOptions, input: DescribeStacksInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStacksOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stackDeleteCompleteWaiterConfig(), operation: self.describeStacks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stackExistsWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                switch result {
                    case .success: return true
                    case .failure: return false
                }
            }),
            .init(state: .retry, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StackExists event on the describeStacks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStacksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStackExists(options: ClientRuntime.WaiterOptions, input: DescribeStacksInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStacksOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stackExistsWaiterConfig(), operation: self.describeStacks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stackImportCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "IMPORT_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "IMPORT_COMPLETE") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "ROLLBACK_COMPLETE") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "IMPORT_ROLLBACK_IN_PROGRESS"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "IMPORT_ROLLBACK_IN_PROGRESS") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "IMPORT_ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "IMPORT_ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "IMPORT_ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "IMPORT_ROLLBACK_COMPLETE") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StackImportComplete event on the describeStacks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStacksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStackImportComplete(options: ClientRuntime.WaiterOptions, input: DescribeStacksInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStacksOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stackImportCompleteWaiterConfig(), operation: self.describeStacks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stackRollbackCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_COMPLETE") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "DELETE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "DELETE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StackRollbackComplete event on the describeStacks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStacksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStackRollbackComplete(options: ClientRuntime.WaiterOptions, input: DescribeStacksInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStacksOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stackRollbackCompleteWaiterConfig(), operation: self.describeStacks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func stackUpdateCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "UPDATE_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_COMPLETE") } ?? false)
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_FAILED"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_FAILED") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Stacks[].StackStatus"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "UPDATE_ROLLBACK_COMPLETE"
                guard case .success(let output) = result else { return false }
                let stacks = output.stacks
                let projection: [CloudFormationClientTypes.StackStatus]? = stacks?.compactMap { original in
                    let stackStatus = original.stackStatus
                    return stackStatus
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "UPDATE_ROLLBACK_COMPLETE") }) ?? false
            }),
            .init(state: .failure, matcher: { (input: DescribeStacksInput, result: Swift.Result<DescribeStacksOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ValidationError"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeStacksInput, DescribeStacksOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the StackUpdateComplete event on the describeStacks operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeStacksInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStackUpdateComplete(options: ClientRuntime.WaiterOptions, input: DescribeStacksInput) async throws -> ClientRuntime.WaiterOutcome<DescribeStacksOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.stackUpdateCompleteWaiterConfig(), operation: self.describeStacks(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func typeRegistrationCompleteWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeTypeRegistrationInput, DescribeTypeRegistrationOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeTypeRegistrationInput, DescribeTypeRegistrationOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeTypeRegistrationInput, result: Swift.Result<DescribeTypeRegistrationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ProgressStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "COMPLETE"
                guard case .success(let output) = result else { return false }
                let progressStatus = output.progressStatus
                return ClientRuntime.JMESUtils.compare(progressStatus, ==, "COMPLETE")
            }),
            .init(state: .failure, matcher: { (input: DescribeTypeRegistrationInput, result: Swift.Result<DescribeTypeRegistrationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "ProgressStatus"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "FAILED"
                guard case .success(let output) = result else { return false }
                let progressStatus = output.progressStatus
                return ClientRuntime.JMESUtils.compare(progressStatus, ==, "FAILED")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeTypeRegistrationInput, DescribeTypeRegistrationOutput>(acceptors: acceptors, minDelay: 30.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the TypeRegistrationComplete event on the describeTypeRegistration operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeTypeRegistrationInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilTypeRegistrationComplete(options: ClientRuntime.WaiterOptions, input: DescribeTypeRegistrationInput) async throws -> ClientRuntime.WaiterOutcome<DescribeTypeRegistrationOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.typeRegistrationCompleteWaiterConfig(), operation: self.describeTypeRegistration(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
