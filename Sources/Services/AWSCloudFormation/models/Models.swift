// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CloudFormationClientTypes {
    public enum AccountFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case difference
        case intersection
        case `none`
        case union
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountFilterType] {
            return [
                .difference,
                .intersection,
                .none,
                .union,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .difference: return "DIFFERENCE"
            case .intersection: return "INTERSECTION"
            case .none: return "NONE"
            case .union: return "UNION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountFilterType(rawValue: rawValue) ?? AccountFilterType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.AccountGateResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AccountGateStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension CloudFormationClientTypes {
    /// Structure that contains the results of the account gate function which CloudFormation invokes, if present, before proceeding with a stack set operation in an account and Region. For each account and Region, CloudFormation lets you specify a Lambda function that encapsulates any requirements that must be met before CloudFormation can proceed with a stack set operation in that account and Region. CloudFormation invokes the function each time a stack set operation is requested for that account and Region; if the function returns FAILED, CloudFormation cancels the operation in that account and Region, and sets the stack set operation result status for that account and Region to FAILED. For more information, see [Configuring a target account gate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-account-gating.html).
    public struct AccountGateResult: Swift.Equatable {
        /// The status of the account gate function.
        ///
        /// * SUCCEEDED: The account gate function has determined that the account and Region passes any requirements for a stack set operation to occur. CloudFormation proceeds with the stack operation in that account and Region.
        ///
        /// * FAILED: The account gate function has determined that the account and Region doesn't meet the requirements for a stack set operation to occur. CloudFormation cancels the stack set operation in that account and Region, and sets the stack set operation result status for that account and Region to FAILED.
        ///
        /// * SKIPPED: CloudFormation has skipped calling the account gate function for this account and Region, for one of the following reasons:
        ///
        /// * An account gate function hasn't been specified for the account and Region. CloudFormation proceeds with the stack set operation in this account and Region.
        ///
        /// * The AWSCloudFormationStackSetExecutionRole of the stack set administration account lacks permissions to invoke the function. CloudFormation proceeds with the stack set operation in this account and Region.
        ///
        /// * Either no action is necessary, or no action is possible, on the stack. CloudFormation skips the stack set operation in this account and Region.
        public var status: CloudFormationClientTypes.AccountGateStatus?
        /// The reason for the account gate status assigned to this account and Region for the stack set operation.
        public var statusReason: Swift.String?

        public init (
            status: CloudFormationClientTypes.AccountGateStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum AccountGateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case skipped
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountGateStatus] {
            return [
                .failed,
                .skipped,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .skipped: return "SKIPPED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountGateStatus(rawValue: rawValue) ?? AccountGateStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.AccountLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes {
    /// The AccountLimit data type. CloudFormation has the following limits per account:
    ///
    /// * Number of concurrent resources
    ///
    /// * Number of stacks
    ///
    /// * Number of stack outputs
    ///
    ///
    /// For more information about these account limits, and other CloudFormation limits, see [CloudFormation quotas](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html) in the CloudFormation User Guide.
    public struct AccountLimit: Swift.Equatable {
        /// The name of the account limit. Values: ConcurrentResourcesLimit | StackLimit | StackOutputsLimit
        public var name: Swift.String?
        /// The value that's associated with the account limit name.
        public var value: Swift.Int?

        public init (
            name: Swift.String? = nil,
            value: Swift.Int? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ActivateTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoUpdate = autoUpdate {
            try container.encode(autoUpdate, forKey: ClientRuntime.Key("AutoUpdate"))
        }
        if let executionRoleArn = executionRoleArn {
            try container.encode(executionRoleArn, forKey: ClientRuntime.Key("ExecutionRoleArn"))
        }
        if let loggingConfig = loggingConfig {
            try container.encode(loggingConfig, forKey: ClientRuntime.Key("LoggingConfig"))
        }
        if let majorVersion = majorVersion {
            try container.encode(majorVersion, forKey: ClientRuntime.Key("MajorVersion"))
        }
        if let publicTypeArn = publicTypeArn {
            try container.encode(publicTypeArn, forKey: ClientRuntime.Key("PublicTypeArn"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let typeNameAlias = typeNameAlias {
            try container.encode(typeNameAlias, forKey: ClientRuntime.Key("TypeNameAlias"))
        }
        if let versionBump = versionBump {
            try container.encode(versionBump, forKey: ClientRuntime.Key("VersionBump"))
        }
        try container.encode("ActivateType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ActivateTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ActivateTypeInput: Swift.Equatable {
    /// Whether to automatically update the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated. The default is true.
    public var autoUpdate: Swift.Bool?
    /// The name of the IAM execution role to use to activate the extension.
    public var executionRoleArn: Swift.String?
    /// Contains logging configuration information for an extension.
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available minor version of the major version selected. You can specify MajorVersion or VersionBump, but not both.
    public var majorVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the public extension. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var publicTypeArn: Swift.String?
    /// The ID of the extension publisher. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var publisherId: Swift.String?
    /// The extension type. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var typeName: Swift.String?
    /// An alias to assign to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console. An extension alias must be unique within a given account and region. You can activate the same public resource multiple times in the same account and region, using different type name aliases.
    public var typeNameAlias: Swift.String?
    /// Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdate.
    ///
    /// * MAJOR: CloudFormation updates the extension to the newest major version, if one is available.
    ///
    /// * MINOR: CloudFormation updates the extension to the newest minor version, if one is available.
    public var versionBump: CloudFormationClientTypes.VersionBump?

    public init (
        autoUpdate: Swift.Bool? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        majorVersion: Swift.Int? = nil,
        publicTypeArn: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil,
        typeNameAlias: Swift.String? = nil,
        versionBump: CloudFormationClientTypes.VersionBump? = nil
    )
    {
        self.autoUpdate = autoUpdate
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.majorVersion = majorVersion
        self.publicTypeArn = publicTypeArn
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
        self.typeNameAlias = typeNameAlias
        self.versionBump = versionBump
    }
}

struct ActivateTypeInputBody: Swift.Equatable {
    let type: CloudFormationClientTypes.ThirdPartyType?
    let publicTypeArn: Swift.String?
    let publisherId: Swift.String?
    let typeName: Swift.String?
    let typeNameAlias: Swift.String?
    let autoUpdate: Swift.Bool?
    let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    let executionRoleArn: Swift.String?
    let versionBump: CloudFormationClientTypes.VersionBump?
    let majorVersion: Swift.Int?
}

extension ActivateTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoUpdate = "AutoUpdate"
        case executionRoleArn = "ExecutionRoleArn"
        case loggingConfig = "LoggingConfig"
        case majorVersion = "MajorVersion"
        case publicTypeArn = "PublicTypeArn"
        case publisherId = "PublisherId"
        case type = "Type"
        case typeName = "TypeName"
        case typeNameAlias = "TypeNameAlias"
        case versionBump = "VersionBump"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
        let publicTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicTypeArn)
        publicTypeArn = publicTypeArnDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let typeNameAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeNameAlias)
        typeNameAlias = typeNameAliasDecoded
        let autoUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoUpdate)
        autoUpdate = autoUpdateDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let versionBumpDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.VersionBump.self, forKey: .versionBump)
        versionBump = versionBumpDecoded
        let majorVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .majorVersion)
        majorVersion = majorVersionDecoded
    }
}

extension ActivateTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ActivateTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ActivateTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ActivateTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActivateTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
        } else {
            self.arn = nil
        }
    }
}

public struct ActivateTypeOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the activated extension, in this account and region.
    public var arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct ActivateTypeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
}

extension ActivateTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ActivateTypeResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension AlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<AlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource with the name requested already exists.
public struct AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.AutoDeployment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case retainStacksOnAccountRemoval = "RetainStacksOnAccountRemoval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let retainStacksOnAccountRemoval = retainStacksOnAccountRemoval {
            try container.encode(retainStacksOnAccountRemoval, forKey: ClientRuntime.Key("RetainStacksOnAccountRemoval"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let retainStacksOnAccountRemovalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retainStacksOnAccountRemoval)
        retainStacksOnAccountRemoval = retainStacksOnAccountRemovalDecoded
    }
}

extension CloudFormationClientTypes {
    /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).
    public struct AutoDeployment: Swift.Equatable {
        /// If set to true, StackSets automatically deploys additional stack instances to Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
        public var enabled: Swift.Bool?
        /// If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
        public var retainStacksOnAccountRemoval: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil,
            retainStacksOnAccountRemoval: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
            self.retainStacksOnAccountRemoval = retainStacksOnAccountRemoval
        }
    }

}

extension CloudFormationClientTypes.BatchDescribeTypeConfigurationsError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case typeConfigurationIdentifier = "TypeConfigurationIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
        if let typeConfigurationIdentifier = typeConfigurationIdentifier {
            try container.encode(typeConfigurationIdentifier, forKey: ClientRuntime.Key("TypeConfigurationIdentifier"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let typeConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.TypeConfigurationIdentifier.self, forKey: .typeConfigurationIdentifier)
        typeConfigurationIdentifier = typeConfigurationIdentifierDecoded
    }
}

extension CloudFormationClientTypes {
    /// Detailed information concerning an error generated during the setting of configuration data for a CloudFormation extension.
    public struct BatchDescribeTypeConfigurationsError: Swift.Equatable {
        /// The error code.
        public var errorCode: Swift.String?
        /// The error message.
        public var errorMessage: Swift.String?
        /// Identifying information for the configuration of a CloudFormation extension.
        public var typeConfigurationIdentifier: CloudFormationClientTypes.TypeConfigurationIdentifier?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            typeConfigurationIdentifier: CloudFormationClientTypes.TypeConfigurationIdentifier? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.typeConfigurationIdentifier = typeConfigurationIdentifier
        }
    }

}

extension BatchDescribeTypeConfigurationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let typeConfigurationIdentifiers = typeConfigurationIdentifiers {
            if !typeConfigurationIdentifiers.isEmpty {
                var typeConfigurationIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TypeConfigurationIdentifiers"))
                for (index0, typeconfigurationidentifier0) in typeConfigurationIdentifiers.enumerated() {
                    try typeConfigurationIdentifiersContainer.encode(typeconfigurationidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var typeConfigurationIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TypeConfigurationIdentifiers"))
                try typeConfigurationIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchDescribeTypeConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchDescribeTypeConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDescribeTypeConfigurationsInput: Swift.Equatable {
    /// The list of identifiers for the desired extension configurations.
    /// This member is required.
    public var typeConfigurationIdentifiers: [CloudFormationClientTypes.TypeConfigurationIdentifier]?

    public init (
        typeConfigurationIdentifiers: [CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
    )
    {
        self.typeConfigurationIdentifiers = typeConfigurationIdentifiers
    }
}

struct BatchDescribeTypeConfigurationsInputBody: Swift.Equatable {
    let typeConfigurationIdentifiers: [CloudFormationClientTypes.TypeConfigurationIdentifier]?
}

extension BatchDescribeTypeConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case typeConfigurationIdentifiers = "TypeConfigurationIdentifiers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.typeConfigurationIdentifiers) {
            struct KeyVal0{struct member{}}
            let typeConfigurationIdentifiersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeConfigurationIdentifiers)
            if let typeConfigurationIdentifiersWrappedContainer = typeConfigurationIdentifiersWrappedContainer {
                let typeConfigurationIdentifiersContainer = try typeConfigurationIdentifiersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeConfigurationIdentifier].self, forKey: .member)
                var typeConfigurationIdentifiersBuffer:[CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
                if let typeConfigurationIdentifiersContainer = typeConfigurationIdentifiersContainer {
                    typeConfigurationIdentifiersBuffer = [CloudFormationClientTypes.TypeConfigurationIdentifier]()
                    for structureContainer0 in typeConfigurationIdentifiersContainer {
                        typeConfigurationIdentifiersBuffer?.append(structureContainer0)
                    }
                }
                typeConfigurationIdentifiers = typeConfigurationIdentifiersBuffer
            } else {
                typeConfigurationIdentifiers = []
            }
        } else {
            typeConfigurationIdentifiers = nil
        }
    }
}

extension BatchDescribeTypeConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchDescribeTypeConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeConfigurationNotFoundException" : self = .typeConfigurationNotFoundException(try TypeConfigurationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDescribeTypeConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeConfigurationNotFoundException(TypeConfigurationNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDescribeTypeConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDescribeTypeConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.typeConfigurations = output.typeConfigurations
            self.unprocessedTypeConfigurations = output.unprocessedTypeConfigurations
        } else {
            self.errors = nil
            self.typeConfigurations = nil
            self.unprocessedTypeConfigurations = nil
        }
    }
}

public struct BatchDescribeTypeConfigurationsOutputResponse: Swift.Equatable {
    /// A list of information concerning any errors generated during the setting of the specified configurations.
    public var errors: [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]?
    /// A list of any of the specified extension configurations from the CloudFormation registry.
    public var typeConfigurations: [CloudFormationClientTypes.TypeConfigurationDetails]?
    /// A list of any of the specified extension configurations that CloudFormation could not process for any reason.
    public var unprocessedTypeConfigurations: [CloudFormationClientTypes.TypeConfigurationIdentifier]?

    public init (
        errors: [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]? = nil,
        typeConfigurations: [CloudFormationClientTypes.TypeConfigurationDetails]? = nil,
        unprocessedTypeConfigurations: [CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
    )
    {
        self.errors = errors
        self.typeConfigurations = typeConfigurations
        self.unprocessedTypeConfigurations = unprocessedTypeConfigurations
    }
}

struct BatchDescribeTypeConfigurationsOutputResponseBody: Swift.Equatable {
    let errors: [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]?
    let unprocessedTypeConfigurations: [CloudFormationClientTypes.TypeConfigurationIdentifier]?
    let typeConfigurations: [CloudFormationClientTypes.TypeConfigurationDetails]?
}

extension BatchDescribeTypeConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case typeConfigurations = "TypeConfigurations"
        case unprocessedTypeConfigurations = "UnprocessedTypeConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchDescribeTypeConfigurationsResult"))
        if containerValues.contains(.errors) {
            struct KeyVal0{struct member{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.BatchDescribeTypeConfigurationsError].self, forKey: .member)
                var errorsBuffer:[CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
        if containerValues.contains(.unprocessedTypeConfigurations) {
            struct KeyVal0{struct member{}}
            let unprocessedTypeConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .unprocessedTypeConfigurations)
            if let unprocessedTypeConfigurationsWrappedContainer = unprocessedTypeConfigurationsWrappedContainer {
                let unprocessedTypeConfigurationsContainer = try unprocessedTypeConfigurationsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeConfigurationIdentifier].self, forKey: .member)
                var unprocessedTypeConfigurationsBuffer:[CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
                if let unprocessedTypeConfigurationsContainer = unprocessedTypeConfigurationsContainer {
                    unprocessedTypeConfigurationsBuffer = [CloudFormationClientTypes.TypeConfigurationIdentifier]()
                    for structureContainer0 in unprocessedTypeConfigurationsContainer {
                        unprocessedTypeConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                unprocessedTypeConfigurations = unprocessedTypeConfigurationsBuffer
            } else {
                unprocessedTypeConfigurations = []
            }
        } else {
            unprocessedTypeConfigurations = nil
        }
        if containerValues.contains(.typeConfigurations) {
            struct KeyVal0{struct member{}}
            let typeConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeConfigurations)
            if let typeConfigurationsWrappedContainer = typeConfigurationsWrappedContainer {
                let typeConfigurationsContainer = try typeConfigurationsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeConfigurationDetails].self, forKey: .member)
                var typeConfigurationsBuffer:[CloudFormationClientTypes.TypeConfigurationDetails]? = nil
                if let typeConfigurationsContainer = typeConfigurationsContainer {
                    typeConfigurationsBuffer = [CloudFormationClientTypes.TypeConfigurationDetails]()
                    for structureContainer0 in typeConfigurationsContainer {
                        typeConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                typeConfigurations = typeConfigurationsBuffer
            } else {
                typeConfigurations = []
            }
        } else {
            typeConfigurations = nil
        }
    }
}

extension CFNRegistryException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CFNRegistryExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred during a CloudFormation registry operation.
public struct CFNRegistryException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CFNRegistryExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CFNRegistryExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum CallAs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delegatedAdmin
        case `self`
        case sdkUnknown(Swift.String)

        public static var allCases: [CallAs] {
            return [
                .delegatedAdmin,
                .self,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delegatedAdmin: return "DELEGATED_ADMIN"
            case .self: return "SELF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CallAs(rawValue: rawValue) ?? CallAs.sdkUnknown(rawValue)
        }
    }
}

extension CancelUpdateStackInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("CancelUpdateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelUpdateStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [CancelUpdateStack] action.
public struct CancelUpdateStackInput: Swift.Equatable {
    /// A unique identifier for this CancelUpdateStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to cancel an update on a stack with the same name. You might retry CancelUpdateStack requests to ensure that CloudFormation successfully received them.
    public var clientRequestToken: Swift.String?
    /// The name or the unique stack ID that's associated with the stack.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.stackName = stackName
    }
}

struct CancelUpdateStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let clientRequestToken: Swift.String?
}

extension CancelUpdateStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension CancelUpdateStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CancelUpdateStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelUpdateStackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelUpdateStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelUpdateStackOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudFormationClientTypes {
    public enum Capability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capabilityAutoExpand
        case capabilityIam
        case capabilityNamedIam
        case sdkUnknown(Swift.String)

        public static var allCases: [Capability] {
            return [
                .capabilityAutoExpand,
                .capabilityIam,
                .capabilityNamedIam,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capabilityAutoExpand: return "CAPABILITY_AUTO_EXPAND"
            case .capabilityIam: return "CAPABILITY_IAM"
            case .capabilityNamedIam: return "CAPABILITY_NAMED_IAM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Capability(rawValue: rawValue) ?? Capability.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Category: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activated
        case awsTypes
        case registered
        case thirdParty
        case sdkUnknown(Swift.String)

        public static var allCases: [Category] {
            return [
                .activated,
                .awsTypes,
                .registered,
                .thirdParty,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activated: return "ACTIVATED"
            case .awsTypes: return "AWS_TYPES"
            case .registered: return "REGISTERED"
            case .thirdParty: return "THIRD_PARTY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Category(rawValue: rawValue) ?? Category.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Change: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hookInvocationCount = "HookInvocationCount"
        case resourceChange = "ResourceChange"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hookInvocationCount = hookInvocationCount {
            try container.encode(hookInvocationCount, forKey: ClientRuntime.Key("HookInvocationCount"))
        }
        if let resourceChange = resourceChange {
            try container.encode(resourceChange, forKey: ClientRuntime.Key("ResourceChange"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeType.self, forKey: .type)
        type = typeDecoded
        let hookInvocationCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hookInvocationCount)
        hookInvocationCount = hookInvocationCountDecoded
        let resourceChangeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceChange.self, forKey: .resourceChange)
        resourceChange = resourceChangeDecoded
    }
}

extension CloudFormationClientTypes {
    /// The Change structure describes the changes CloudFormation will perform if you execute the change set.
    public struct Change: Swift.Equatable {
        /// Is either null, if no hooks invoke for the resource, or contains the number of hooks that will invoke for the resource.
        public var hookInvocationCount: Swift.Int?
        /// A ResourceChange structure that describes the resource and action that CloudFormation will perform.
        public var resourceChange: CloudFormationClientTypes.ResourceChange?
        /// The type of entity that CloudFormation changes. Currently, the only entity type is Resource.
        public var type: CloudFormationClientTypes.ChangeType?

        public init (
            hookInvocationCount: Swift.Int? = nil,
            resourceChange: CloudFormationClientTypes.ResourceChange? = nil,
            type: CloudFormationClientTypes.ChangeType? = nil
        )
        {
            self.hookInvocationCount = hookInvocationCount
            self.resourceChange = resourceChange
            self.type = type
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case `dynamic`
        case `import`
        case modify
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeAction] {
            return [
                .add,
                .dynamic,
                .import,
                .modify,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "Add"
            case .dynamic: return "Dynamic"
            case .import: return "Import"
            case .modify: return "Modify"
            case .remove: return "Remove"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeAction(rawValue: rawValue) ?? ChangeAction.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ChangeSetHook: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureMode = "FailureMode"
        case invocationPoint = "InvocationPoint"
        case targetDetails = "TargetDetails"
        case typeConfigurationVersionId = "TypeConfigurationVersionId"
        case typeName = "TypeName"
        case typeVersionId = "TypeVersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureMode = failureMode {
            try container.encode(failureMode, forKey: ClientRuntime.Key("FailureMode"))
        }
        if let invocationPoint = invocationPoint {
            try container.encode(invocationPoint, forKey: ClientRuntime.Key("InvocationPoint"))
        }
        if let targetDetails = targetDetails {
            try container.encode(targetDetails, forKey: ClientRuntime.Key("TargetDetails"))
        }
        if let typeConfigurationVersionId = typeConfigurationVersionId {
            try container.encode(typeConfigurationVersionId, forKey: ClientRuntime.Key("TypeConfigurationVersionId"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let typeVersionId = typeVersionId {
            try container.encode(typeVersionId, forKey: ClientRuntime.Key("TypeVersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invocationPointDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookInvocationPoint.self, forKey: .invocationPoint)
        invocationPoint = invocationPointDecoded
        let failureModeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookFailureMode.self, forKey: .failureMode)
        failureMode = failureModeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let typeVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeVersionId)
        typeVersionId = typeVersionIdDecoded
        let typeConfigurationVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeConfigurationVersionId)
        typeConfigurationVersionId = typeConfigurationVersionIdDecoded
        let targetDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetHookTargetDetails.self, forKey: .targetDetails)
        targetDetails = targetDetailsDecoded
    }
}

extension CloudFormationClientTypes {
    /// Specifies the resource, the hook, and the hook version to be invoked.
    public struct ChangeSetHook: Swift.Equatable {
        /// Specify the hook failure mode for non-compliant resources in the followings ways.
        ///
        /// * FAIL Stops provisioning resources.
        ///
        /// * WARN Allows provisioning to continue with a warning message.
        public var failureMode: CloudFormationClientTypes.HookFailureMode?
        /// Specifies the points in provisioning logic where a hook is invoked.
        public var invocationPoint: CloudFormationClientTypes.HookInvocationPoint?
        /// Specifies details about the target that the hook will run against.
        public var targetDetails: CloudFormationClientTypes.ChangeSetHookTargetDetails?
        /// The version ID of the type configuration.
        public var typeConfigurationVersionId: Swift.String?
        /// The unique name for your hook. Specifies a three-part namespace for your hook, with a recommended pattern of Organization::Service::Hook. The following organization namespaces are reserved and can't be used in your hook type names:
        ///
        /// * Alexa
        ///
        /// * AMZN
        ///
        /// * Amazon
        ///
        /// * ASK
        ///
        /// * AWS
        ///
        /// * Custom
        ///
        /// * Dev
        public var typeName: Swift.String?
        /// The version ID of the type specified.
        public var typeVersionId: Swift.String?

        public init (
            failureMode: CloudFormationClientTypes.HookFailureMode? = nil,
            invocationPoint: CloudFormationClientTypes.HookInvocationPoint? = nil,
            targetDetails: CloudFormationClientTypes.ChangeSetHookTargetDetails? = nil,
            typeConfigurationVersionId: Swift.String? = nil,
            typeName: Swift.String? = nil,
            typeVersionId: Swift.String? = nil
        )
        {
            self.failureMode = failureMode
            self.invocationPoint = invocationPoint
            self.targetDetails = targetDetails
            self.typeConfigurationVersionId = typeConfigurationVersionId
            self.typeName = typeName
            self.typeVersionId = typeVersionId
        }
    }

}

extension CloudFormationClientTypes.ChangeSetHookResourceTargetDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceAction = "ResourceAction"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceAction = resourceAction {
            try container.encode(resourceAction, forKey: ClientRuntime.Key("ResourceAction"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceActionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeAction.self, forKey: .resourceAction)
        resourceAction = resourceActionDecoded
    }
}

extension CloudFormationClientTypes {
    /// Specifies RESOURCE type target details for activated hooks.
    public struct ChangeSetHookResourceTargetDetails: Swift.Equatable {
        /// The resource's logical ID, which is defined in the stack's template.
        public var logicalResourceId: Swift.String?
        /// Specifies the action of the resource.
        public var resourceAction: CloudFormationClientTypes.ChangeAction?
        /// The type of CloudFormation resource, such as AWS::S3::Bucket.
        public var resourceType: Swift.String?

        public init (
            logicalResourceId: Swift.String? = nil,
            resourceAction: CloudFormationClientTypes.ChangeAction? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceAction = resourceAction
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.ChangeSetHookTargetDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTargetDetails = "ResourceTargetDetails"
        case targetType = "TargetType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceTargetDetails = resourceTargetDetails {
            try container.encode(resourceTargetDetails, forKey: ClientRuntime.Key("ResourceTargetDetails"))
        }
        if let targetType = targetType {
            try container.encode(targetType, forKey: ClientRuntime.Key("TargetType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookTargetType.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let resourceTargetDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetHookResourceTargetDetails.self, forKey: .resourceTargetDetails)
        resourceTargetDetails = resourceTargetDetailsDecoded
    }
}

extension CloudFormationClientTypes {
    /// Specifies target details for an activated hook.
    public struct ChangeSetHookTargetDetails: Swift.Equatable {
        /// Required if TargetType is RESOURCE.
        public var resourceTargetDetails: CloudFormationClientTypes.ChangeSetHookResourceTargetDetails?
        /// The name of the type.
        public var targetType: CloudFormationClientTypes.HookTargetType?

        public init (
            resourceTargetDetails: CloudFormationClientTypes.ChangeSetHookResourceTargetDetails? = nil,
            targetType: CloudFormationClientTypes.HookTargetType? = nil
        )
        {
            self.resourceTargetDetails = resourceTargetDetails
            self.targetType = targetType
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeSetHooksStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case planned
        case planning
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetHooksStatus] {
            return [
                .planned,
                .planning,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .planned: return "PLANNED"
            case .planning: return "PLANNING"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetHooksStatus(rawValue: rawValue) ?? ChangeSetHooksStatus.sdkUnknown(rawValue)
        }
    }
}

extension ChangeSetNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ChangeSetNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified change set name or ID doesn't exit. To view valid change sets for a stack, use the ListChangeSets operation.
public struct ChangeSetNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ChangeSetNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ChangeSetNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum ChangeSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createInProgress
        case createPending
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deletePending
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetStatus] {
            return [
                .createComplete,
                .createInProgress,
                .createPending,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deletePending,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deletePending: return "DELETE_PENDING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetStatus(rawValue: rawValue) ?? ChangeSetStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ChangeSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case includeNestedStacks = "IncludeNestedStacks"
        case parentChangeSetId = "ParentChangeSetId"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("creationTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionStatus = executionStatus {
            try container.encode(executionStatus, forKey: ClientRuntime.Key("ExecutionStatus"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: ClientRuntime.Key("IncludeNestedStacks"))
        }
        if let parentChangeSetId = parentChangeSetId {
            try container.encode(parentChangeSetId, forKey: ClientRuntime.Key("ParentChangeSetId"))
        }
        if let rootChangeSetId = rootChangeSetId {
            try container.encode(rootChangeSetId, forKey: ClientRuntime.Key("RootChangeSetId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
        let parentChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentChangeSetId)
        parentChangeSetId = parentChangeSetIdDecoded
        let rootChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootChangeSetId)
        rootChangeSetId = rootChangeSetIdDecoded
    }
}

extension CloudFormationClientTypes {
    /// The ChangeSetSummary structure describes a change set, its status, and the stack with which it's associated.
    public struct ChangeSetSummary: Swift.Equatable {
        /// The ID of the change set.
        public var changeSetId: Swift.String?
        /// The name of the change set.
        public var changeSetName: Swift.String?
        /// The start time when the change set was created, in UTC.
        public var creationTime: ClientRuntime.Date?
        /// Descriptive information about the change set.
        public var description: Swift.String?
        /// If the change set execution status is AVAILABLE, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an UNAVAILABLE state because CloudFormation is still creating it or in an OBSOLETE state because the stack was already updated.
        public var executionStatus: CloudFormationClientTypes.ExecutionStatus?
        /// Specifies the current setting of IncludeNestedStacks for the change set.
        public var includeNestedStacks: Swift.Bool?
        /// The parent change set ID.
        public var parentChangeSetId: Swift.String?
        /// The root change set ID.
        public var rootChangeSetId: Swift.String?
        /// The ID of the stack with which the change set is associated.
        public var stackId: Swift.String?
        /// The name of the stack with which the change set is associated.
        public var stackName: Swift.String?
        /// The state of the change set, such as CREATE_IN_PROGRESS, CREATE_COMPLETE, or FAILED.
        public var status: CloudFormationClientTypes.ChangeSetStatus?
        /// A description of the change set's status. For example, if your change set is in the FAILED state, CloudFormation shows the error message.
        public var statusReason: Swift.String?

        public init (
            changeSetId: Swift.String? = nil,
            changeSetName: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            executionStatus: CloudFormationClientTypes.ExecutionStatus? = nil,
            includeNestedStacks: Swift.Bool? = nil,
            parentChangeSetId: Swift.String? = nil,
            rootChangeSetId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            status: CloudFormationClientTypes.ChangeSetStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.changeSetId = changeSetId
            self.changeSetName = changeSetName
            self.creationTime = creationTime
            self.description = description
            self.executionStatus = executionStatus
            self.includeNestedStacks = includeNestedStacks
            self.parentChangeSetId = parentChangeSetId
            self.rootChangeSetId = rootChangeSetId
            self.stackId = stackId
            self.stackName = stackName
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeSetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case `import`
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetType] {
            return [
                .create,
                .import,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .import: return "IMPORT"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetType(rawValue: rawValue) ?? ChangeSetType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ChangeSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case directmodification
        case parameterreference
        case resourceattribute
        case resourcereference
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSource] {
            return [
                .automatic,
                .directmodification,
                .parameterreference,
                .resourceattribute,
                .resourcereference,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "Automatic"
            case .directmodification: return "DirectModification"
            case .parameterreference: return "ParameterReference"
            case .resourceattribute: return "ResourceAttribute"
            case .resourcereference: return "ResourceReference"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSource(rawValue: rawValue) ?? ChangeSource.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ChangeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeType] {
            return [
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resource: return "Resource"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeType(rawValue: rawValue) ?? ChangeType.sdkUnknown(rawValue)
        }
    }
}

extension ContinueUpdateRollbackInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let resourcesToSkip = resourcesToSkip {
            if !resourcesToSkip.isEmpty {
                var resourcesToSkipContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToSkip"))
                for (index0, resourcetoskip0) in resourcesToSkip.enumerated() {
                    try resourcesToSkipContainer.encode(resourcetoskip0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourcesToSkipContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToSkip"))
                try resourcesToSkipContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ContinueUpdateRollback", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ContinueUpdateRollbackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [ContinueUpdateRollback] action.
public struct ContinueUpdateRollbackInput: Swift.Equatable {
    /// A unique identifier for this ContinueUpdateRollback request. Specify this token if you plan to retry requests so that CloudFormationknows that you're not attempting to continue the rollback to a stack with the same name. You might retry ContinueUpdateRollback requests to ensure that CloudFormation successfully received them.
    public var clientRequestToken: Swift.String?
    /// A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the UPDATE_FAILED state because a rollback failed. You can't specify resources that are in the UPDATE_FAILED state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the [DescribeStackResources] action, and view the resource status reason. Specify this property to skip rolling back resources that CloudFormation can't successfully roll back. We recommend that you [ troubleshoot](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed) resources before skipping them. CloudFormation sets the status of the specified resources to UPDATE_COMPLETE and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don't, subsequent stack updates might fail, and the stack will become unrecoverable. Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources. To skip resources that are part of nested stacks, use the following format: NestedStackName.ResourceLogicalID. If you want to specify the logical ID of a stack resource (Type: AWS::CloudFormation::Stack) in the ResourcesToSkip list, then its corresponding embedded stack must be in one of the following states: DELETE_IN_PROGRESS, DELETE_COMPLETE, or DELETE_FAILED. Don't confuse a child stack's name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see [Using ResourcesToSkip to recover a nested stacks hierarchy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks).
    public var resourcesToSkip: [Swift.String]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least permission. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
    public var roleARN: Swift.String?
    /// The name or the unique ID of the stack that you want to continue rolling back. Don't specify the name of a nested stack (a stack that was created by using the AWS::CloudFormation::Stack resource). Instead, use this operation on the parent stack (the stack that contains the AWS::CloudFormation::Stack resource).
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        resourcesToSkip: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.resourcesToSkip = resourcesToSkip
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

struct ContinueUpdateRollbackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let roleARN: Swift.String?
    let resourcesToSkip: [Swift.String]?
    let clientRequestToken: Swift.String?
}

extension ContinueUpdateRollbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case resourcesToSkip = "ResourcesToSkip"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        if containerValues.contains(.resourcesToSkip) {
            struct KeyVal0{struct member{}}
            let resourcesToSkipWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourcesToSkip)
            if let resourcesToSkipWrappedContainer = resourcesToSkipWrappedContainer {
                let resourcesToSkipContainer = try resourcesToSkipWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourcesToSkipBuffer:[Swift.String]? = nil
                if let resourcesToSkipContainer = resourcesToSkipContainer {
                    resourcesToSkipBuffer = [Swift.String]()
                    for stringContainer0 in resourcesToSkipContainer {
                        resourcesToSkipBuffer?.append(stringContainer0)
                    }
                }
                resourcesToSkip = resourcesToSkipBuffer
            } else {
                resourcesToSkip = []
            }
        } else {
            resourcesToSkip = nil
        }
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension ContinueUpdateRollbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ContinueUpdateRollbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ContinueUpdateRollbackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ContinueUpdateRollbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The output for a [ContinueUpdateRollback] operation.
public struct ContinueUpdateRollbackOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateChangeSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let changeSetType = changeSetType {
            try container.encode(changeSetType, forKey: ClientRuntime.Key("ChangeSetType"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: ClientRuntime.Key("IncludeNestedStacks"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                for (index0, resourcetype0) in resourceTypes.enumerated() {
                    try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                try resourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourcesToImport = resourcesToImport {
            if !resourcesToImport.isEmpty {
                var resourcesToImportContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToImport"))
                for (index0, resourcetoimport0) in resourcesToImport.enumerated() {
                    try resourcesToImportContainer.encode(resourcetoimport0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourcesToImportContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToImport"))
                try resourcesToImportContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("CreateChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateChangeSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [CreateChangeSet] action.
public struct CreateChangeSetInput: Swift.Equatable {
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM resources in CloudFormation templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation. This capacity doesn't apply to creating change sets, and specifying it when creating change sets has no effect. If you want to create a stack from a stack template that contains macros and nested stacks, you must create or update the stack directly from the template using the [CreateStack] or [UpdateStack] action, and specifying this capability. For more information about macros, see [Using CloudFormation macros to perform custom processing on templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The name of the change set. The name must be unique among all change sets that are associated with the specified stack. A change set name can contain only alphanumeric, case sensitive characters, and hyphens. It must start with an alphabetical character and can't exceed 128 characters.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// The type of change set operation. To create a change set for a new stack, specify CREATE. To create a change set for an existing stack, specify UPDATE. To create a change set for an import operation, specify IMPORT. If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the [REVIEW_IN_PROGRESS](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995) state until you execute the change set. By default, CloudFormation specifies UPDATE. You can't use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
    public var changeSetType: CloudFormationClientTypes.ChangeSetType?
    /// A unique identifier for this CreateChangeSet request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create another change set with the same name. You might retry CreateChangeSet requests to ensure that CloudFormation successfully received them.
    public var clientToken: Swift.String?
    /// A description to help you identify this change set.
    public var description: Swift.String?
    /// Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to False. To include nested sets in a change set, specify True.
    public var includeNestedStacks: Swift.Bool?
    /// The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list.
    public var notificationARNs: [Swift.String]?
    /// A list of Parameter structures that specify input parameters for the change set. For more information, see the [Parameter] data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// The template resource types that you have permissions to work with if you execute this change set, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. If the list of resource types doesn't include a resource type that you're updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see [Controlling access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html) in the CloudFormation User Guide.
    public var resourceTypes: [Swift.String]?
    /// The resources to import into your stack.
    public var resourcesToImport: [CloudFormationClientTypes.ResourceToImport]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least permission. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.
    public var roleARN: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack's information with the information that you submit, such as a modified template or different parameter input values.
    /// This member is required.
    public var stackName: Swift.String?
    /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified. Conditional: You must specify only TemplateBody or TemplateURL.
    public var templateBody: Swift.String?
    /// The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified. Conditional: You must specify only TemplateBody or TemplateURL.
    public var templateURL: Swift.String?
    /// Whether to reuse the template that's associated with the stack to create the change set.
    public var usePreviousTemplate: Swift.Bool?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        changeSetName: Swift.String? = nil,
        changeSetType: CloudFormationClientTypes.ChangeSetType? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        includeNestedStacks: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        resourcesToImport: [CloudFormationClientTypes.ResourceToImport]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetName = changeSetName
        self.changeSetType = changeSetType
        self.clientToken = clientToken
        self.description = description
        self.includeNestedStacks = includeNestedStacks
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.resourcesToImport = resourcesToImport
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

struct CreateChangeSetInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let usePreviousTemplate: Swift.Bool?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let resourceTypes: [Swift.String]?
    let roleARN: Swift.String?
    let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    let notificationARNs: [Swift.String]?
    let tags: [CloudFormationClientTypes.Tag]?
    let changeSetName: Swift.String?
    let clientToken: Swift.String?
    let description: Swift.String?
    let changeSetType: CloudFormationClientTypes.ChangeSetType?
    let resourcesToImport: [CloudFormationClientTypes.ResourceToImport]?
    let includeNestedStacks: Swift.Bool?
}

extension CreateChangeSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetName = "ChangeSetName"
        case changeSetType = "ChangeSetType"
        case clientToken = "ClientToken"
        case description = "Description"
        case includeNestedStacks = "IncludeNestedStacks"
        case notificationARNs = "NotificationARNs"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case resourcesToImport = "ResourcesToImport"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        let usePreviousTemplateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .usePreviousTemplate)
        usePreviousTemplate = usePreviousTemplateDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let changeSetTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetType.self, forKey: .changeSetType)
        changeSetType = changeSetTypeDecoded
        if containerValues.contains(.resourcesToImport) {
            struct KeyVal0{struct member{}}
            let resourcesToImportWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourcesToImport)
            if let resourcesToImportWrappedContainer = resourcesToImportWrappedContainer {
                let resourcesToImportContainer = try resourcesToImportWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceToImport].self, forKey: .member)
                var resourcesToImportBuffer:[CloudFormationClientTypes.ResourceToImport]? = nil
                if let resourcesToImportContainer = resourcesToImportContainer {
                    resourcesToImportBuffer = [CloudFormationClientTypes.ResourceToImport]()
                    for structureContainer0 in resourcesToImportContainer {
                        resourcesToImportBuffer?.append(structureContainer0)
                    }
                }
                resourcesToImport = resourcesToImportBuffer
            } else {
                resourcesToImport = []
            }
        } else {
            resourcesToImport = nil
        }
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
    }
}

extension CreateChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateChangeSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateChangeSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
            self.stackId = output.stackId
        } else {
            self.id = nil
            self.stackId = nil
        }
    }
}

/// The output for the [CreateChangeSet] action.
public struct CreateChangeSetOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the change set.
    public var id: Swift.String?
    /// The unique ID of the stack.
    public var stackId: Swift.String?

    public init (
        id: Swift.String? = nil,
        stackId: Swift.String? = nil
    )
    {
        self.id = id
        self.stackId = stackId
    }
}

struct CreateChangeSetOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let stackId: Swift.String?
}

extension CreateChangeSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateChangeSetResult"))
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

extension CreateStackInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let onFailure = onFailure {
            try container.encode(onFailure, forKey: ClientRuntime.Key("OnFailure"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                for (index0, resourcetype0) in resourceTypes.enumerated() {
                    try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                try resourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
        try container.encode("CreateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [CreateStack] action.
public struct CreateStackInput: Swift.Equatable {
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation. If you want to create a stack from a stack template that contains macros and nested stacks, you must create the stack directly from the template using this capability. You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs. Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified. For more information, see [Using CloudFormation macros to perform custom processing on templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// A unique identifier for this CreateStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create a stack with the same name. You might retry CreateStack requests to ensure that CloudFormation successfully received them. All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    public var clientRequestToken: Swift.String?
    /// Set to true to disable rollback of the stack if stack creation failed. You can specify either DisableRollback or OnFailure, but not both. Default: false
    public var disableRollback: Swift.Bool?
    /// Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see [Protecting a Stack From Being Deleted](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html) in the CloudFormation User Guide. Termination protection is deactivated on stacks by default. For [nested stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html), termination protection is set on the root stack and can't be changed directly on the nested stack.
    public var enableTerminationProtection: Swift.Bool?
    /// The Amazon Simple Notification Service (Amazon SNS) topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI).
    public var notificationARNs: [Swift.String]?
    /// Determines what action will be taken if stack creation fails. This must be one of: DO_NOTHING, ROLLBACK, or DELETE. You can specify either OnFailure or DisableRollback, but not both. Default: ROLLBACK
    public var onFailure: CloudFormationClientTypes.OnFailure?
    /// A list of Parameter structures that specify input parameters for the stack. For more information, see the [Parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html) data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// The template resource types that you have permissions to work with for this create stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. Use the following syntax to describe template resource types: AWS::* (for all Amazon Web Services resources), Custom::* (for all custom resources), Custom::logical_ID  (for a specific custom resource), AWS::service_name::* (for all resources of a particular Amazon Web Services service), and AWS::service_name::resource_logical_ID  (for a specific Amazon Web Services resource). If the list of resource types doesn't include a resource that you're creating, the stack creation fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see [Controlling Access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html).
    public var resourceTypes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to create the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
    public var roleARN: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// The name that's associated with the stack. The name must be unique in the Region in which you are creating the stack. A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetical character and can't be longer than 128 characters.
    /// This member is required.
    public var stackName: Swift.String?
    /// Structure containing the stack policy body. For more information, go to [ Prevent Updates to Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the CloudFormation User Guide. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyBody: Swift.String?
    /// Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same Region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyURL: Swift.String?
    /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. For more information, go to the [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateURL: Swift.String?
    /// The amount of time that can pass before the stack status becomes CREATE_FAILED; if DisableRollback is not set or is set to false, the stack will be rolled back.
    public var timeoutInMinutes: Swift.Int?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        enableTerminationProtection: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        onFailure: CloudFormationClientTypes.OnFailure? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        timeoutInMinutes: Swift.Int? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.enableTerminationProtection = enableTerminationProtection
        self.notificationARNs = notificationARNs
        self.onFailure = onFailure
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.timeoutInMinutes = timeoutInMinutes
    }
}

struct CreateStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let disableRollback: Swift.Bool?
    let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    let timeoutInMinutes: Swift.Int?
    let notificationARNs: [Swift.String]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let resourceTypes: [Swift.String]?
    let roleARN: Swift.String?
    let onFailure: CloudFormationClientTypes.OnFailure?
    let stackPolicyBody: Swift.String?
    let stackPolicyURL: Swift.String?
    let tags: [CloudFormationClientTypes.Tag]?
    let clientRequestToken: Swift.String?
    let enableTerminationProtection: Swift.Bool?
}

extension CreateStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case enableTerminationProtection = "EnableTerminationProtection"
        case notificationARNs = "NotificationARNs"
        case onFailure = "OnFailure"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyURL = "StackPolicyURL"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let disableRollbackDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableRollback)
        disableRollback = disableRollbackDecoded
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let onFailureDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.OnFailure.self, forKey: .onFailure)
        onFailure = onFailureDecoded
        let stackPolicyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyBody)
        stackPolicyBody = stackPolicyBodyDecoded
        let stackPolicyURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyURL)
        stackPolicyURL = stackPolicyURLDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let enableTerminationProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTerminationProtection)
        enableTerminationProtection = enableTerminationProtectionDecoded
    }
}

extension CreateStackInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameterOverrides = parameterOverrides {
            if !parameterOverrides.isEmpty {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                for (index0, parameter0) in parameterOverrides.enumerated() {
                    try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                try parameterOverridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("CreateStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStackInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStackInstancesInput: Swift.Equatable {
    /// [Self-managed permissions] The names of one or more Amazon Web Services accounts that you want to create stack instances in the specified Region(s) for. You can specify Accounts or DeploymentTargets, but not both.
    public var accounts: [Swift.String]?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// [Service-managed permissions] The Organizations accounts for which to create stack instances in the specified Amazon Web Services Regions. You can specify Accounts or DeploymentTargets, but not both.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// The unique identifier for this stack set operation. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, the SDK generates one automatically. Repeating this stack set operation with a new operation ID retries all stack instances whose status is OUTDATED.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// A list of stack set parameters whose values you want to override in the selected stack instances. Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance operations:
    ///
    /// * To override the current value for a parameter, include the parameter and specify its value.
    ///
    /// * To leave an overridden parameter set to its present value, include the parameter and specify UsePreviousValue as true. (You can't specify both a value and set UsePreviousValue to true.)
    ///
    /// * To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don't include the parameter in the list.
    ///
    /// * To leave all parameters set to their present values, don't specify this property at all.
    ///
    ///
    /// During stack set updates, any parameter values overridden for a stack instance aren't updated, but retain their overridden value. You can only override the parameter values that are specified in the stack set; to add or delete a parameter itself, use [UpdateStackSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html) to update the stack set template.
    public var parameterOverrides: [CloudFormationClientTypes.Parameter]?
    /// The names of one or more Amazon Web Services Regions where you want to create stack instances using the specified Amazon Web Services accounts.
    /// This member is required.
    public var regions: [Swift.String]?
    /// The name or unique ID of the stack set that you want to create stack instances from.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameterOverrides = parameterOverrides
        self.regions = regions
        self.stackSetName = stackSetName
    }
}

struct CreateStackInstancesInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let accounts: [Swift.String]?
    let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    let regions: [Swift.String]?
    let parameterOverrides: [CloudFormationClientTypes.Parameter]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension CreateStackInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameterOverrides = "ParameterOverrides"
        case regions = "Regions"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct member{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionsBuffer:[Swift.String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Swift.String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        if containerValues.contains(.parameterOverrides) {
            struct KeyVal0{struct member{}}
            let parameterOverridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameterOverrides)
            if let parameterOverridesWrappedContainer = parameterOverridesWrappedContainer {
                let parameterOverridesContainer = try parameterOverridesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parameterOverridesBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parameterOverridesContainer = parameterOverridesContainer {
                    parameterOverridesBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parameterOverridesContainer {
                        parameterOverridesBuffer?.append(structureContainer0)
                    }
                }
                parameterOverrides = parameterOverridesBuffer
            } else {
                parameterOverrides = []
            }
        } else {
            parameterOverrides = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension CreateStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case limitExceededException(LimitExceededException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct CreateStackInstancesOutputResponse: Swift.Equatable {
    /// The unique identifier for this stack set operation.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct CreateStackInstancesOutputResponseBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension CreateStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStackInstancesResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension CreateStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStackOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case limitExceededException(LimitExceededException)
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

/// The output for a [CreateStack] action.
public struct CreateStackOutputResponse: Swift.Equatable {
    /// Unique identifier of the stack.
    public var stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct CreateStackOutputResponseBody: Swift.Equatable {
    let stackId: Swift.String?
}

extension CreateStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStackResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

extension CreateStackSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("CreateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStackSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStackSetInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Prerequisites: Granting Permissions for Stack Set Operations](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide.
    public var administrationRoleARN: Swift.String?
    /// Describes whether StackSets automatically deploys to Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
    public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * To create a stack set with service-managed permissions while signed in to the management account, specify SELF.
    ///
    /// * To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated admin in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    ///
    ///
    /// Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for CloudFormation to create the stack set and related stack instances.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some templates reference macros. If your stack set template references one or more macros, you must create the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this capability. For more information, see [Using CloudFormation Macros to Perform Custom Processing on Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html). Stack sets with service-managed permissions don't currently support the use of macros in templates. (This includes the [AWS::Include](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// A unique identifier for this CreateStackSet request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create another stack set with the same name. You might retry CreateStackSet requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, the SDK generates one automatically.
    public var clientRequestToken: Swift.String?
    /// A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
    public var description: Swift.String?
    /// The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation. Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.
    public var executionRoleName: Swift.String?
    /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
    public var managedExecution: CloudFormationClientTypes.ManagedExecution?
    /// The input parameters for the stack set template.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
    ///
    /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
    ///
    /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
    public var permissionModel: CloudFormationClientTypes.PermissionModels?
    /// The stack ID you are importing into a new stack set. Specify the Amazon Resource Name (ARN) of the stack.
    public var stackId: Swift.String?
    /// The name to associate with the stack set. The name must be unique in the Region where you create your stack set. A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters.
    /// This member is required.
    public var stackSetName: Swift.String?
    /// The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified. If you specify tags as part of a CreateStackSet action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you don't, the entire CreateStackSet action fails with an access denied error, and the stack set is not created.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateBody: Swift.String?
    /// The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateURL: Swift.String?

    public init (
        administrationRoleARN: Swift.String? = nil,
        autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        executionRoleName: Swift.String? = nil,
        managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
        stackId: Swift.String? = nil,
        stackSetName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.administrationRoleARN = administrationRoleARN
        self.autoDeployment = autoDeployment
        self.callAs = callAs
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.executionRoleName = executionRoleName
        self.managedExecution = managedExecution
        self.parameters = parameters
        self.permissionModel = permissionModel
        self.stackId = stackId
        self.stackSetName = stackSetName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

struct CreateStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let description: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let stackId: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let tags: [CloudFormationClientTypes.Tag]?
    let administrationRoleARN: Swift.String?
    let executionRoleName: Swift.String?
    let permissionModel: CloudFormationClientTypes.PermissionModels?
    let autoDeployment: CloudFormationClientTypes.AutoDeployment?
    let callAs: CloudFormationClientTypes.CallAs?
    let clientRequestToken: Swift.String?
    let managedExecution: CloudFormationClientTypes.ManagedExecution?
}

extension CreateStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case callAs = "CallAs"
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case stackId = "StackId"
        case stackSetName = "StackSetName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let managedExecutionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ManagedExecution.self, forKey: .managedExecution)
        managedExecution = managedExecutionDecoded
    }
}

extension CreateStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CreatedButModifiedException" : self = .createdButModifiedException(try CreatedButModifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NameAlreadyExistsException" : self = .nameAlreadyExistsException(try NameAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStackSetOutputError: Swift.Error, Swift.Equatable {
    case createdButModifiedException(CreatedButModifiedException)
    case limitExceededException(LimitExceededException)
    case nameAlreadyExistsException(NameAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackSetId = output.stackSetId
        } else {
            self.stackSetId = nil
        }
    }
}

public struct CreateStackSetOutputResponse: Swift.Equatable {
    /// The ID of the stack set that you're creating.
    public var stackSetId: Swift.String?

    public init (
        stackSetId: Swift.String? = nil
    )
    {
        self.stackSetId = stackSetId
    }
}

struct CreateStackSetOutputResponseBody: Swift.Equatable {
    let stackSetId: Swift.String?
}

extension CreateStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackSetId = "StackSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStackSetResult"))
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
    }
}

extension CreatedButModifiedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<CreatedButModifiedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource exists, but has been changed.
public struct CreatedButModifiedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CreatedButModifiedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension CreatedButModifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeactivateTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("DeactivateType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeactivateTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeactivateTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the extension, in this account and region. Conditional: You must specify either Arn, or TypeName and Type.
    public var arn: Swift.String?
    /// The extension type. Conditional: You must specify either Arn, or TypeName and Type.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The type name of the extension, in this account and region. If you specified a type name alias when enabling the extension, use the type name alias. Conditional: You must specify either Arn, or TypeName and Type.
    public var typeName: Swift.String?

    public init (
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
    }
}

struct DeactivateTypeInputBody: Swift.Equatable {
    let typeName: Swift.String?
    let type: CloudFormationClientTypes.ThirdPartyType?
    let arn: Swift.String?
}

extension DeactivateTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DeactivateTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeactivateTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeactivateTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeactivateTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeactivateTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteChangeSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DeleteChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteChangeSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [DeleteChangeSet] action.
public struct DeleteChangeSetInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want to delete.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// If you specified the name of a change set to delete, specify the stack name or Amazon Resource Name (ARN) that's associated with it.
    public var stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.stackName = stackName
    }
}

struct DeleteChangeSetInputBody: Swift.Equatable {
    let changeSetName: Swift.String?
    let stackName: Swift.String?
}

extension DeleteChangeSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
    }
}

extension DeleteChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidChangeSetStatus" : self = .invalidChangeSetStatusException(try InvalidChangeSetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteChangeSetOutputError: Swift.Error, Swift.Equatable {
    case invalidChangeSetStatusException(InvalidChangeSetStatusException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The output for the [DeleteChangeSet] action.
public struct DeleteChangeSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteStackInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let retainResources = retainResources {
            if !retainResources.isEmpty {
                var retainResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RetainResources"))
                for (index0, logicalresourceid0) in retainResources.enumerated() {
                    try retainResourcesContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var retainResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RetainResources"))
                try retainResourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DeleteStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [DeleteStack] action.
public struct DeleteStackInput: Swift.Equatable {
    /// A unique identifier for this DeleteStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to delete a stack with the same name. You might retry DeleteStack requests to ensure that CloudFormation successfully received them. All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    public var clientRequestToken: Swift.String?
    /// For stacks in the DELETE_FAILED state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but doesn't delete the retained resources. Retaining resources is useful when you can't delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.
    public var retainResources: [Swift.String]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role's credentials to make calls on your behalf. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
    public var roleARN: Swift.String?
    /// The name or the unique stack ID that's associated with the stack.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        retainResources: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.retainResources = retainResources
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

struct DeleteStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let retainResources: [Swift.String]?
    let roleARN: Swift.String?
    let clientRequestToken: Swift.String?
}

extension DeleteStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case retainResources = "RetainResources"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        if containerValues.contains(.retainResources) {
            struct KeyVal0{struct member{}}
            let retainResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .retainResources)
            if let retainResourcesWrappedContainer = retainResourcesWrappedContainer {
                let retainResourcesContainer = try retainResourcesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var retainResourcesBuffer:[Swift.String]? = nil
                if let retainResourcesContainer = retainResourcesContainer {
                    retainResourcesBuffer = [Swift.String]()
                    for stringContainer0 in retainResourcesContainer {
                        retainResourcesBuffer?.append(stringContainer0)
                    }
                }
                retainResources = retainResourcesBuffer
            } else {
                retainResources = []
            }
        } else {
            retainResources = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension DeleteStackInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if retainStacks != false {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DeleteStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteStackInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStackInstancesInput: Swift.Equatable {
    /// [Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for. You can specify Accounts or DeploymentTargets, but not both.
    public var accounts: [Swift.String]?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// [Service-managed permissions] The Organizations accounts from which to delete stack instances. You can specify Accounts or DeploymentTargets, but not both.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// The unique identifier for this stack set operation. If you don't specify an operation ID, the SDK generates one automatically. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them. Repeating this stack set operation with a new operation ID retries all stack instances whose status is OUTDATED.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// The Amazon Web Services Regions where you want to delete stack set instances.
    /// This member is required.
    public var regions: [Swift.String]?
    /// Removes the stack instances from the specified stack set, but doesn't delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. For more information, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    /// This member is required.
    public var retainStacks: Swift.Bool
    /// The name or unique ID of the stack set that you want to delete stack instances for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        regions: [Swift.String]? = nil,
        retainStacks: Swift.Bool = false,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.regions = regions
        self.retainStacks = retainStacks
        self.stackSetName = stackSetName
    }
}

struct DeleteStackInstancesInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let accounts: [Swift.String]?
    let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    let regions: [Swift.String]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let retainStacks: Swift.Bool
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DeleteStackInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case regions = "Regions"
        case retainStacks = "RetainStacks"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct member{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionsBuffer:[Swift.String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Swift.String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let retainStacksDecoded = try containerValues.decode(Swift.Bool.self, forKey: .retainStacks)
        retainStacks = retainStacksDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension DeleteStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct DeleteStackInstancesOutputResponse: Swift.Equatable {
    /// The unique identifier for this stack set operation.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct DeleteStackInstancesOutputResponseBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension DeleteStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteStackInstancesResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension DeleteStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStackOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteStackSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DeleteStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteStackSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStackSetInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The name or unique ID of the stack set that you're deleting. You can obtain this value by running [ListStackSets].
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackSetName = stackSetName
    }
}

struct DeleteStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DeleteStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension DeleteStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotEmptyException" : self = .stackSetNotEmptyException(try StackSetNotEmptyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStackSetOutputError: Swift.Error, Swift.Equatable {
    case operationInProgressException(OperationInProgressException)
    case stackSetNotEmptyException(StackSetNotEmptyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStackSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudFormationClientTypes.DeploymentTargets: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountFilterType = "AccountFilterType"
        case accounts = "Accounts"
        case accountsUrl = "AccountsUrl"
        case organizationalUnitIds = "OrganizationalUnitIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountFilterType = accountFilterType {
            try container.encode(accountFilterType, forKey: ClientRuntime.Key("AccountFilterType"))
        }
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let accountsUrl = accountsUrl {
            try container.encode(accountsUrl, forKey: ClientRuntime.Key("AccountsUrl"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            if !organizationalUnitIds.isEmpty {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                    try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                try organizationalUnitIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let accountsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountsUrl)
        accountsUrl = accountsUrlDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
        let accountFilterTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AccountFilterType.self, forKey: .accountFilterType)
        accountFilterType = accountFilterTypeDecoded
    }
}

extension CloudFormationClientTypes {
    /// [Service-managed permissions] The Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. For update operations, you can specify either Accounts or OrganizationalUnitIds. For create and delete operations, specify OrganizationalUnitIds.
    public struct DeploymentTargets: Swift.Equatable {
        /// Limit deployment targets to individual accounts or include additional accounts with provided OUs. The following is a list of possible values for the AccountFilterType operation.
        ///
        /// * INTERSECTION: StackSets deploys to the accounts specified in Accounts parameter.
        ///
        /// * DIFFERENCE: StackSets excludes the accounts specified in Accounts parameter. This enables user to avoid certain accounts within an OU such as suspended accounts.
        ///
        /// * UNION: StackSets includes additional accounts deployment targets. This is the default value if AccountFilterType is not provided. This enables user to update an entire OU and individual accounts from a different OU in one request, which used to be two separate requests.
        ///
        /// * NONE: Deploys to all the accounts in specified organizational units (OU).
        public var accountFilterType: CloudFormationClientTypes.AccountFilterType?
        /// The names of one or more Amazon Web Services accounts for which you want to deploy stack set updates.
        public var accounts: [Swift.String]?
        /// Returns the value of the AccountsUrl property.
        public var accountsUrl: Swift.String?
        /// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
        public var organizationalUnitIds: [Swift.String]?

        public init (
            accountFilterType: CloudFormationClientTypes.AccountFilterType? = nil,
            accounts: [Swift.String]? = nil,
            accountsUrl: Swift.String? = nil,
            organizationalUnitIds: [Swift.String]? = nil
        )
        {
            self.accountFilterType = accountFilterType
            self.accounts = accounts
            self.accountsUrl = accountsUrl
            self.organizationalUnitIds = organizationalUnitIds
        }
    }

}

extension CloudFormationClientTypes {
    public enum DeprecatedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deprecated
        case live
        case sdkUnknown(Swift.String)

        public static var allCases: [DeprecatedStatus] {
            return [
                .deprecated,
                .live,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deprecated: return "DEPRECATED"
            case .live: return "LIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeprecatedStatus(rawValue: rawValue) ?? DeprecatedStatus.sdkUnknown(rawValue)
        }
    }
}

extension DeregisterTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DeregisterType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeregisterTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?
    /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.
    public var versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

struct DeregisterTypeInputBody: Swift.Equatable {
    let arn: Swift.String?
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let versionId: Swift.String?
}

extension DeregisterTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension DeregisterTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeregisterTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeAccountLimitsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAccountLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [DescribeAccountLimits] action.
public struct DescribeAccountLimitsInput: Swift.Equatable {
    /// A string that identifies the next page of limits that you want to retrieve.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct DescribeAccountLimitsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
}

extension DescribeAccountLimitsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAccountLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAccountLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAccountLimitsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAccountLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountLimits = output.accountLimits
            self.nextToken = output.nextToken
        } else {
            self.accountLimits = nil
            self.nextToken = nil
        }
    }
}

/// The output for the [DescribeAccountLimits] action.
public struct DescribeAccountLimitsOutputResponse: Swift.Equatable {
    /// An account limit structure that contain a list of CloudFormation account limits and their values.
    public var accountLimits: [CloudFormationClientTypes.AccountLimit]?
    /// If the output exceeds 1 MB in size, a string that identifies the next page of limits. If no additional page exists, this value is null.
    public var nextToken: Swift.String?

    public init (
        accountLimits: [CloudFormationClientTypes.AccountLimit]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountLimits = accountLimits
        self.nextToken = nextToken
    }
}

struct DescribeAccountLimitsOutputResponseBody: Swift.Equatable {
    let accountLimits: [CloudFormationClientTypes.AccountLimit]?
    let nextToken: Swift.String?
}

extension DescribeAccountLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountLimits = "AccountLimits"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountLimitsResult"))
        if containerValues.contains(.accountLimits) {
            struct KeyVal0{struct member{}}
            let accountLimitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accountLimits)
            if let accountLimitsWrappedContainer = accountLimitsWrappedContainer {
                let accountLimitsContainer = try accountLimitsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.AccountLimit].self, forKey: .member)
                var accountLimitsBuffer:[CloudFormationClientTypes.AccountLimit]? = nil
                if let accountLimitsContainer = accountLimitsContainer {
                    accountLimitsBuffer = [CloudFormationClientTypes.AccountLimit]()
                    for structureContainer0 in accountLimitsContainer {
                        accountLimitsBuffer?.append(structureContainer0)
                    }
                }
                accountLimits = accountLimitsBuffer
            } else {
                accountLimits = []
            }
        } else {
            accountLimits = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeChangeSetHooksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeChangeSetHooks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeChangeSetHooksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeChangeSetHooksInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want to describe.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// If specified, lists only the hooks related to the specified LogicalResourceId.
    public var logicalResourceId: Swift.String?
    /// A string, provided by the DescribeChangeSetHooks response output, that identifies the next page of information that you want to retrieve.
    public var nextToken: Swift.String?
    /// If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.
    public var stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        logicalResourceId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.logicalResourceId = logicalResourceId
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

struct DescribeChangeSetHooksInputBody: Swift.Equatable {
    let changeSetName: Swift.String?
    let stackName: Swift.String?
    let nextToken: Swift.String?
    let logicalResourceId: Swift.String?
}

extension DescribeChangeSetHooksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case logicalResourceId = "LogicalResourceId"
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
    }
}

extension DescribeChangeSetHooksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeChangeSetHooksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFound" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeChangeSetHooksOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeChangeSetHooksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeChangeSetHooksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeSetId = output.changeSetId
            self.changeSetName = output.changeSetName
            self.hooks = output.hooks
            self.nextToken = output.nextToken
            self.stackId = output.stackId
            self.stackName = output.stackName
            self.status = output.status
        } else {
            self.changeSetId = nil
            self.changeSetName = nil
            self.hooks = nil
            self.nextToken = nil
            self.stackId = nil
            self.stackName = nil
            self.status = nil
        }
    }
}

public struct DescribeChangeSetHooksOutputResponse: Swift.Equatable {
    /// The change set identifier (stack ID).
    public var changeSetId: Swift.String?
    /// The change set name.
    public var changeSetName: Swift.String?
    /// List of hook objects.
    public var hooks: [CloudFormationClientTypes.ChangeSetHook]?
    /// Pagination token, null or empty if no more results.
    public var nextToken: Swift.String?
    /// The stack identifier (stack ID).
    public var stackId: Swift.String?
    /// The stack name.
    public var stackName: Swift.String?
    /// Provides the status of the change set hook.
    public var status: CloudFormationClientTypes.ChangeSetHooksStatus?

    public init (
        changeSetId: Swift.String? = nil,
        changeSetName: Swift.String? = nil,
        hooks: [CloudFormationClientTypes.ChangeSetHook]? = nil,
        nextToken: Swift.String? = nil,
        stackId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ChangeSetHooksStatus? = nil
    )
    {
        self.changeSetId = changeSetId
        self.changeSetName = changeSetName
        self.hooks = hooks
        self.nextToken = nextToken
        self.stackId = stackId
        self.stackName = stackName
        self.status = status
    }
}

struct DescribeChangeSetHooksOutputResponseBody: Swift.Equatable {
    let changeSetId: Swift.String?
    let changeSetName: Swift.String?
    let hooks: [CloudFormationClientTypes.ChangeSetHook]?
    let status: CloudFormationClientTypes.ChangeSetHooksStatus?
    let nextToken: Swift.String?
    let stackId: Swift.String?
    let stackName: Swift.String?
}

extension DescribeChangeSetHooksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case hooks = "Hooks"
        case nextToken = "NextToken"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeChangeSetHooksResult"))
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        if containerValues.contains(.hooks) {
            struct KeyVal0{struct member{}}
            let hooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .hooks)
            if let hooksWrappedContainer = hooksWrappedContainer {
                let hooksContainer = try hooksWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ChangeSetHook].self, forKey: .member)
                var hooksBuffer:[CloudFormationClientTypes.ChangeSetHook]? = nil
                if let hooksContainer = hooksContainer {
                    hooksBuffer = [CloudFormationClientTypes.ChangeSetHook]()
                    for structureContainer0 in hooksContainer {
                        hooksBuffer?.append(structureContainer0)
                    }
                }
                hooks = hooksBuffer
            } else {
                hooks = []
            }
        } else {
            hooks = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetHooksStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
    }
}

extension DescribeChangeSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeChangeSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [DescribeChangeSet] action.
public struct DescribeChangeSetInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want to describe.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// A string (provided by the [DescribeChangeSet] response output) that identifies the next page of information that you want to retrieve.
    public var nextToken: Swift.String?
    /// If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe.
    public var stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

struct DescribeChangeSetInputBody: Swift.Equatable {
    let changeSetName: Swift.String?
    let stackName: Swift.String?
    let nextToken: Swift.String?
}

extension DescribeChangeSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFound" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeChangeSetOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .changeSetNotFoundException: return "ChangeSetNotFound"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeChangeSetOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeChangeSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capabilities = output.capabilities
            self.changeSetId = output.changeSetId
            self.changeSetName = output.changeSetName
            self.changes = output.changes
            self.creationTime = output.creationTime
            self.description = output.description
            self.executionStatus = output.executionStatus
            self.includeNestedStacks = output.includeNestedStacks
            self.nextToken = output.nextToken
            self.notificationARNs = output.notificationARNs
            self.parameters = output.parameters
            self.parentChangeSetId = output.parentChangeSetId
            self.rollbackConfiguration = output.rollbackConfiguration
            self.rootChangeSetId = output.rootChangeSetId
            self.stackId = output.stackId
            self.stackName = output.stackName
            self.status = output.status
            self.statusReason = output.statusReason
            self.tags = output.tags
        } else {
            self.capabilities = nil
            self.changeSetId = nil
            self.changeSetName = nil
            self.changes = nil
            self.creationTime = nil
            self.description = nil
            self.executionStatus = nil
            self.includeNestedStacks = nil
            self.nextToken = nil
            self.notificationARNs = nil
            self.parameters = nil
            self.parentChangeSetId = nil
            self.rollbackConfiguration = nil
            self.rootChangeSetId = nil
            self.stackId = nil
            self.stackName = nil
            self.status = nil
            self.statusReason = nil
            self.tags = nil
        }
    }
}

/// The output for the [DescribeChangeSet] action.
public struct DescribeChangeSetOutputResponse: Swift.Equatable {
    /// If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The Amazon Resource Name (ARN) of the change set.
    public var changeSetId: Swift.String?
    /// The name of the change set.
    public var changeSetName: Swift.String?
    /// A list of Change structures that describes the resources CloudFormation changes if you execute the change set.
    public var changes: [CloudFormationClientTypes.Change]?
    /// The start time when the change set was created, in UTC.
    public var creationTime: ClientRuntime.Date?
    /// Information about the change set.
    public var description: Swift.String?
    /// If the change set execution status is AVAILABLE, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an UNAVAILABLE state because CloudFormation is still creating it or in an OBSOLETE state because the stack was already updated.
    public var executionStatus: CloudFormationClientTypes.ExecutionStatus?
    /// Verifies if IncludeNestedStacks is set to True.
    public var includeNestedStacks: Swift.Bool?
    /// If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.
    public var nextToken: Swift.String?
    /// The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.
    public var notificationARNs: [Swift.String]?
    /// A list of Parameter structures that describes the input parameters and their values used to create the change set. For more information, see the [Parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html) data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Specifies the change set ID of the parent change set in the current nested change set hierarchy.
    public var parentChangeSetId: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// Specifies the change set ID of the root change set in the current nested change set hierarchy.
    public var rootChangeSetId: Swift.String?
    /// The Amazon Resource Name (ARN) of the stack that's associated with the change set.
    public var stackId: Swift.String?
    /// The name of the stack that's associated with the change set.
    public var stackName: Swift.String?
    /// The current status of the change set, such as CREATE_IN_PROGRESS, CREATE_COMPLETE, or FAILED.
    public var status: CloudFormationClientTypes.ChangeSetStatus?
    /// A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.
    public var statusReason: Swift.String?
    /// If you execute the change set, the tags that will be associated with the stack.
    public var tags: [CloudFormationClientTypes.Tag]?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        changeSetId: Swift.String? = nil,
        changeSetName: Swift.String? = nil,
        changes: [CloudFormationClientTypes.Change]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        executionStatus: CloudFormationClientTypes.ExecutionStatus? = nil,
        includeNestedStacks: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        parentChangeSetId: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        rootChangeSetId: Swift.String? = nil,
        stackId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ChangeSetStatus? = nil,
        statusReason: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetId = changeSetId
        self.changeSetName = changeSetName
        self.changes = changes
        self.creationTime = creationTime
        self.description = description
        self.executionStatus = executionStatus
        self.includeNestedStacks = includeNestedStacks
        self.nextToken = nextToken
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.parentChangeSetId = parentChangeSetId
        self.rollbackConfiguration = rollbackConfiguration
        self.rootChangeSetId = rootChangeSetId
        self.stackId = stackId
        self.stackName = stackName
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
    }
}

struct DescribeChangeSetOutputResponseBody: Swift.Equatable {
    let changeSetName: Swift.String?
    let changeSetId: Swift.String?
    let stackId: Swift.String?
    let stackName: Swift.String?
    let description: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let creationTime: ClientRuntime.Date?
    let executionStatus: CloudFormationClientTypes.ExecutionStatus?
    let status: CloudFormationClientTypes.ChangeSetStatus?
    let statusReason: Swift.String?
    let notificationARNs: [Swift.String]?
    let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let tags: [CloudFormationClientTypes.Tag]?
    let changes: [CloudFormationClientTypes.Change]?
    let nextToken: Swift.String?
    let includeNestedStacks: Swift.Bool?
    let parentChangeSetId: Swift.String?
    let rootChangeSetId: Swift.String?
}

extension DescribeChangeSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case changes = "Changes"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case includeNestedStacks = "IncludeNestedStacks"
        case nextToken = "NextToken"
        case notificationARNs = "NotificationARNs"
        case parameters = "Parameters"
        case parentChangeSetId = "ParentChangeSetId"
        case rollbackConfiguration = "RollbackConfiguration"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeChangeSetResult"))
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.changes) {
            struct KeyVal0{struct member{}}
            let changesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .changes)
            if let changesWrappedContainer = changesWrappedContainer {
                let changesContainer = try changesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Change].self, forKey: .member)
                var changesBuffer:[CloudFormationClientTypes.Change]? = nil
                if let changesContainer = changesContainer {
                    changesBuffer = [CloudFormationClientTypes.Change]()
                    for structureContainer0 in changesContainer {
                        changesBuffer?.append(structureContainer0)
                    }
                }
                changes = changesBuffer
            } else {
                changes = []
            }
        } else {
            changes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
        let parentChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentChangeSetId)
        parentChangeSetId = parentChangeSetIdDecoded
        let rootChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootChangeSetId)
        rootChangeSetId = rootChangeSetIdDecoded
    }
}

extension DescribePublisherInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        try container.encode("DescribePublisher", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePublisherInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePublisherInput: Swift.Equatable {
    /// The ID of the extension publisher. If you don't supply a PublisherId, and you have registered as an extension publisher, DescribePublisher returns information about your own publisher account.
    public var publisherId: Swift.String?

    public init (
        publisherId: Swift.String? = nil
    )
    {
        self.publisherId = publisherId
    }
}

struct DescribePublisherInputBody: Swift.Equatable {
    let publisherId: Swift.String?
}

extension DescribePublisherInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publisherId = "PublisherId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
    }
}

extension DescribePublisherOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribePublisherOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePublisherOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePublisherOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePublisherOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProvider = output.identityProvider
            self.publisherId = output.publisherId
            self.publisherProfile = output.publisherProfile
            self.publisherStatus = output.publisherStatus
        } else {
            self.identityProvider = nil
            self.publisherId = nil
            self.publisherProfile = nil
            self.publisherStatus = nil
        }
    }
}

public struct DescribePublisherOutputResponse: Swift.Equatable {
    /// The type of account used as the identity provider when registering this publisher with CloudFormation.
    public var identityProvider: CloudFormationClientTypes.IdentityProvider?
    /// The ID of the extension publisher.
    public var publisherId: Swift.String?
    /// The URL to the publisher's profile with the identity provider.
    public var publisherProfile: Swift.String?
    /// Whether the publisher is verified. Currently, all registered publishers are verified.
    public var publisherStatus: CloudFormationClientTypes.PublisherStatus?

    public init (
        identityProvider: CloudFormationClientTypes.IdentityProvider? = nil,
        publisherId: Swift.String? = nil,
        publisherProfile: Swift.String? = nil,
        publisherStatus: CloudFormationClientTypes.PublisherStatus? = nil
    )
    {
        self.identityProvider = identityProvider
        self.publisherId = publisherId
        self.publisherProfile = publisherProfile
        self.publisherStatus = publisherStatus
    }
}

struct DescribePublisherOutputResponseBody: Swift.Equatable {
    let publisherId: Swift.String?
    let publisherStatus: CloudFormationClientTypes.PublisherStatus?
    let identityProvider: CloudFormationClientTypes.IdentityProvider?
    let publisherProfile: Swift.String?
}

extension DescribePublisherOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProvider = "IdentityProvider"
        case publisherId = "PublisherId"
        case publisherProfile = "PublisherProfile"
        case publisherStatus = "PublisherStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribePublisherResult"))
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let publisherStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PublisherStatus.self, forKey: .publisherStatus)
        publisherStatus = publisherStatusDecoded
        let identityProviderDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.IdentityProvider.self, forKey: .identityProvider)
        identityProvider = identityProviderDecoded
        let publisherProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherProfile)
        publisherProfile = publisherProfileDecoded
    }
}

extension DescribeStackDriftDetectionStatusInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackDriftDetectionId = stackDriftDetectionId {
            try container.encode(stackDriftDetectionId, forKey: ClientRuntime.Key("StackDriftDetectionId"))
        }
        try container.encode("DescribeStackDriftDetectionStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackDriftDetectionStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStackDriftDetectionStatusInput: Swift.Equatable {
    /// The ID of the drift detection results of this operation. CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.
    /// This member is required.
    public var stackDriftDetectionId: Swift.String?

    public init (
        stackDriftDetectionId: Swift.String? = nil
    )
    {
        self.stackDriftDetectionId = stackDriftDetectionId
    }
}

struct DescribeStackDriftDetectionStatusInputBody: Swift.Equatable {
    let stackDriftDetectionId: Swift.String?
}

extension DescribeStackDriftDetectionStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackDriftDetectionId = "StackDriftDetectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackDriftDetectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackDriftDetectionId)
        stackDriftDetectionId = stackDriftDetectionIdDecoded
    }
}

extension DescribeStackDriftDetectionStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackDriftDetectionStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackDriftDetectionStatusOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackDriftDetectionStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackDriftDetectionStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.detectionStatus = output.detectionStatus
            self.detectionStatusReason = output.detectionStatusReason
            self.driftedStackResourceCount = output.driftedStackResourceCount
            self.stackDriftDetectionId = output.stackDriftDetectionId
            self.stackDriftStatus = output.stackDriftStatus
            self.stackId = output.stackId
            self.timestamp = output.timestamp
        } else {
            self.detectionStatus = nil
            self.detectionStatusReason = nil
            self.driftedStackResourceCount = nil
            self.stackDriftDetectionId = nil
            self.stackDriftStatus = nil
            self.stackId = nil
            self.timestamp = nil
        }
    }
}

public struct DescribeStackDriftDetectionStatusOutputResponse: Swift.Equatable {
    /// The status of the stack drift detection operation.
    ///
    /// * DETECTION_COMPLETE: The stack drift detection operation has successfully completed for all resources in the stack that support drift detection. (Resources that don't currently support stack detection remain unchecked.) If you specified logical resource IDs for CloudFormation to use as a filter for the stack drift detection operation, only the resources with those logical IDs are checked for drift.
    ///
    /// * DETECTION_FAILED: The stack drift detection operation has failed for at least one resource in the stack. Results will be available for resources on which CloudFormation successfully completed drift detection.
    ///
    /// * DETECTION_IN_PROGRESS: The stack drift detection operation is currently in progress.
    /// This member is required.
    public var detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus?
    /// The reason the stack drift detection operation has its current status.
    public var detectionStatusReason: Swift.String?
    /// Total number of stack resources that have drifted. This is NULL until the drift detection operation reaches a status of DETECTION_COMPLETE. This value will be 0 for stacks whose drift status is IN_SYNC.
    public var driftedStackResourceCount: Swift.Int?
    /// The ID of the drift detection results of this operation. CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of reports CloudFormation retains for any given stack, and for how long, may vary.
    /// This member is required.
    public var stackDriftDetectionId: Swift.String?
    /// Status of the stack's actual configuration compared to its expected configuration.
    ///
    /// * DRIFTED: The stack differs from its expected template configuration. A stack is considered to have drifted if one or more of its resources have drifted.
    ///
    /// * NOT_CHECKED: CloudFormation hasn't checked if the stack differs from its expected template configuration.
    ///
    /// * IN_SYNC: The stack's actual configuration matches its expected template configuration.
    ///
    /// * UNKNOWN: This value is reserved for future use.
    public var stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?
    /// The ID of the stack.
    /// This member is required.
    public var stackId: Swift.String?
    /// Time at which the stack drift detection operation was initiated.
    /// This member is required.
    public var timestamp: ClientRuntime.Date?

    public init (
        detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus? = nil,
        detectionStatusReason: Swift.String? = nil,
        driftedStackResourceCount: Swift.Int? = nil,
        stackDriftDetectionId: Swift.String? = nil,
        stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
        stackId: Swift.String? = nil,
        timestamp: ClientRuntime.Date? = nil
    )
    {
        self.detectionStatus = detectionStatus
        self.detectionStatusReason = detectionStatusReason
        self.driftedStackResourceCount = driftedStackResourceCount
        self.stackDriftDetectionId = stackDriftDetectionId
        self.stackDriftStatus = stackDriftStatus
        self.stackId = stackId
        self.timestamp = timestamp
    }
}

struct DescribeStackDriftDetectionStatusOutputResponseBody: Swift.Equatable {
    let stackId: Swift.String?
    let stackDriftDetectionId: Swift.String?
    let stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?
    let detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus?
    let detectionStatusReason: Swift.String?
    let driftedStackResourceCount: Swift.Int?
    let timestamp: ClientRuntime.Date?
}

extension DescribeStackDriftDetectionStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectionStatus = "DetectionStatus"
        case detectionStatusReason = "DetectionStatusReason"
        case driftedStackResourceCount = "DriftedStackResourceCount"
        case stackDriftDetectionId = "StackDriftDetectionId"
        case stackDriftStatus = "StackDriftStatus"
        case stackId = "StackId"
        case timestamp = "Timestamp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackDriftDetectionStatusResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackDriftDetectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackDriftDetectionId)
        stackDriftDetectionId = stackDriftDetectionIdDecoded
        let stackDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .stackDriftStatus)
        stackDriftStatus = stackDriftStatusDecoded
        let detectionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftDetectionStatus.self, forKey: .detectionStatus)
        detectionStatus = detectionStatusDecoded
        let detectionStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectionStatusReason)
        detectionStatusReason = detectionStatusReasonDecoded
        let driftedStackResourceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .driftedStackResourceCount)
        driftedStackResourceCount = driftedStackResourceCountDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension DescribeStackEventsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStackEvents] action.
public struct DescribeStackEventsInput: Swift.Equatable {
    /// A string that identifies the next page of events that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    public var stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

struct DescribeStackEventsInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let nextToken: Swift.String?
}

extension DescribeStackEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStackEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackEventsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackEvents = output.stackEvents
        } else {
            self.nextToken = nil
            self.stackEvents = nil
        }
    }
}

/// The output for a [DescribeStackEvents] action.
public struct DescribeStackEventsOutputResponse: Swift.Equatable {
    /// If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of StackEvents structures.
    public var stackEvents: [CloudFormationClientTypes.StackEvent]?

    public init (
        nextToken: Swift.String? = nil,
        stackEvents: [CloudFormationClientTypes.StackEvent]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackEvents = stackEvents
    }
}

struct DescribeStackEventsOutputResponseBody: Swift.Equatable {
    let stackEvents: [CloudFormationClientTypes.StackEvent]?
    let nextToken: Swift.String?
}

extension DescribeStackEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackEvents = "StackEvents"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackEventsResult"))
        if containerValues.contains(.stackEvents) {
            struct KeyVal0{struct member{}}
            let stackEventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackEvents)
            if let stackEventsWrappedContainer = stackEventsWrappedContainer {
                let stackEventsContainer = try stackEventsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackEvent].self, forKey: .member)
                var stackEventsBuffer:[CloudFormationClientTypes.StackEvent]? = nil
                if let stackEventsContainer = stackEventsContainer {
                    stackEventsBuffer = [CloudFormationClientTypes.StackEvent]()
                    for structureContainer0 in stackEventsContainer {
                        stackEventsBuffer?.append(structureContainer0)
                    }
                }
                stackEvents = stackEventsBuffer
            } else {
                stackEvents = []
            }
        } else {
            stackEvents = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStackInstanceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStackInstanceInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The ID of an Amazon Web Services account that's associated with this stack instance.
    /// This member is required.
    public var stackInstanceAccount: Swift.String?
    /// The name of a Region that's associated with this stack instance.
    /// This member is required.
    public var stackInstanceRegion: Swift.String?
    /// The name or the unique stack ID of the stack set that you want to get stack instance information for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackSetName = stackSetName
    }
}

struct DescribeStackInstanceInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let stackInstanceAccount: Swift.String?
    let stackInstanceRegion: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DescribeStackInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackInstanceAccount = "StackInstanceAccount"
        case stackInstanceRegion = "StackInstanceRegion"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackInstanceAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackInstanceAccount)
        stackInstanceAccount = stackInstanceAccountDecoded
        let stackInstanceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackInstanceRegion)
        stackInstanceRegion = stackInstanceRegionDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension DescribeStackInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackInstanceNotFoundException" : self = .stackInstanceNotFoundException(try StackInstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackInstanceOutputError: Swift.Error, Swift.Equatable {
    case stackInstanceNotFoundException(StackInstanceNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackInstance = output.stackInstance
        } else {
            self.stackInstance = nil
        }
    }
}

public struct DescribeStackInstanceOutputResponse: Swift.Equatable {
    /// The stack instance that matches the specified request parameters.
    public var stackInstance: CloudFormationClientTypes.StackInstance?

    public init (
        stackInstance: CloudFormationClientTypes.StackInstance? = nil
    )
    {
        self.stackInstance = stackInstance
    }
}

struct DescribeStackInstanceOutputResponseBody: Swift.Equatable {
    let stackInstance: CloudFormationClientTypes.StackInstance?
}

extension DescribeStackInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackInstance = "StackInstance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackInstanceResult"))
        let stackInstanceDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstance.self, forKey: .stackInstance)
        stackInstance = stackInstanceDecoded
    }
}

extension DescribeStackResourceDriftsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackResourceDriftStatusFilters = stackResourceDriftStatusFilters {
            if !stackResourceDriftStatusFilters.isEmpty {
                var stackResourceDriftStatusFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackResourceDriftStatusFilters"))
                for (index0, stackresourcedriftstatus0) in stackResourceDriftStatusFilters.enumerated() {
                    try stackResourceDriftStatusFiltersContainer.encode(stackresourcedriftstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackResourceDriftStatusFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackResourceDriftStatusFilters"))
                try stackResourceDriftStatusFiltersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeStackResourceDrifts", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackResourceDriftsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStackResourceDriftsInput: Swift.Equatable {
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// A string that identifies the next page of stack resource drift results.
    public var nextToken: Swift.String?
    /// The name of the stack for which you want drift information.
    /// This member is required.
    public var stackName: Swift.String?
    /// The resource drift status values to use as filters for the resource drift results returned.
    ///
    /// * DELETED: The resource differs from its expected template configuration in that the resource has been deleted.
    ///
    /// * MODIFIED: One or more resource properties differ from their expected template values.
    ///
    /// * IN_SYNC: The resource's actual configuration matches its expected template configuration.
    ///
    /// * NOT_CHECKED: CloudFormation doesn't currently return this value.
    public var stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil,
        stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackName = stackName
        self.stackResourceDriftStatusFilters = stackResourceDriftStatusFilters
    }
}

struct DescribeStackResourceDriftsInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension DescribeStackResourceDriftsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackName = "StackName"
        case stackResourceDriftStatusFilters = "StackResourceDriftStatusFilters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        if containerValues.contains(.stackResourceDriftStatusFilters) {
            struct KeyVal0{struct member{}}
            let stackResourceDriftStatusFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResourceDriftStatusFilters)
            if let stackResourceDriftStatusFiltersWrappedContainer = stackResourceDriftStatusFiltersWrappedContainer {
                let stackResourceDriftStatusFiltersContainer = try stackResourceDriftStatusFiltersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResourceDriftStatus].self, forKey: .member)
                var stackResourceDriftStatusFiltersBuffer:[CloudFormationClientTypes.StackResourceDriftStatus]? = nil
                if let stackResourceDriftStatusFiltersContainer = stackResourceDriftStatusFiltersContainer {
                    stackResourceDriftStatusFiltersBuffer = [CloudFormationClientTypes.StackResourceDriftStatus]()
                    for enumContainer0 in stackResourceDriftStatusFiltersContainer {
                        stackResourceDriftStatusFiltersBuffer?.append(enumContainer0)
                    }
                }
                stackResourceDriftStatusFilters = stackResourceDriftStatusFiltersBuffer
            } else {
                stackResourceDriftStatusFilters = []
            }
        } else {
            stackResourceDriftStatusFilters = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeStackResourceDriftsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackResourceDriftsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackResourceDriftsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackResourceDriftsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackResourceDriftsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackResourceDrifts = output.stackResourceDrifts
        } else {
            self.nextToken = nil
            self.stackResourceDrifts = nil
        }
    }
}

public struct DescribeStackResourceDriftsOutputResponse: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call DescribeStackResourceDrifts again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// Drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects drift. For a given stack, there will be one StackResourceDrift for each stack resource that has been checked for drift. Resources that haven't yet been checked for drift aren't included. Resources that do not currently support drift detection aren't checked, and so not included. For a list of resources that support drift detection, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html).
    /// This member is required.
    public var stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]?

    public init (
        nextToken: Swift.String? = nil,
        stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackResourceDrifts = stackResourceDrifts
    }
}

struct DescribeStackResourceDriftsOutputResponseBody: Swift.Equatable {
    let stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]?
    let nextToken: Swift.String?
}

extension DescribeStackResourceDriftsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackResourceDrifts = "StackResourceDrifts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackResourceDriftsResult"))
        if containerValues.contains(.stackResourceDrifts) {
            struct KeyVal0{struct member{}}
            let stackResourceDriftsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResourceDrifts)
            if let stackResourceDriftsWrappedContainer = stackResourceDriftsWrappedContainer {
                let stackResourceDriftsContainer = try stackResourceDriftsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResourceDrift].self, forKey: .member)
                var stackResourceDriftsBuffer:[CloudFormationClientTypes.StackResourceDrift]? = nil
                if let stackResourceDriftsContainer = stackResourceDriftsContainer {
                    stackResourceDriftsBuffer = [CloudFormationClientTypes.StackResourceDrift]()
                    for structureContainer0 in stackResourceDriftsContainer {
                        stackResourceDriftsBuffer?.append(structureContainer0)
                    }
                }
                stackResourceDrifts = stackResourceDriftsBuffer
            } else {
                stackResourceDrifts = []
            }
        } else {
            stackResourceDrifts = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStackResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStackResource] action.
public struct DescribeStackResourceInput: Swift.Equatable {
    /// The logical name of the resource as specified in the template. Default: There is no default value.
    /// This member is required.
    public var logicalResourceId: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
    }
}

struct DescribeStackResourceInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let logicalResourceId: Swift.String?
}

extension DescribeStackResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
    }
}

extension DescribeStackResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackResourceDetail = output.stackResourceDetail
        } else {
            self.stackResourceDetail = nil
        }
    }
}

/// The output for a [DescribeStackResource] action.
public struct DescribeStackResourceOutputResponse: Swift.Equatable {
    /// A StackResourceDetail structure containing the description of the specified resource in the specified stack.
    public var stackResourceDetail: CloudFormationClientTypes.StackResourceDetail?

    public init (
        stackResourceDetail: CloudFormationClientTypes.StackResourceDetail? = nil
    )
    {
        self.stackResourceDetail = stackResourceDetail
    }
}

struct DescribeStackResourceOutputResponseBody: Swift.Equatable {
    let stackResourceDetail: CloudFormationClientTypes.StackResourceDetail?
}

extension DescribeStackResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackResourceDetail = "StackResourceDetail"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackResourceResult"))
        let stackResourceDetailDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDetail.self, forKey: .stackResourceDetail)
        stackResourceDetail = stackResourceDetailDecoded
    }
}

extension DescribeStackResourcesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStackResources] action.
public struct DescribeStackResourcesInput: Swift.Equatable {
    /// The logical name of the resource as specified in the template. Default: There is no default value.
    public var logicalResourceId: Swift.String?
    /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation. For example, for an Amazon Elastic Compute Cloud (EC2) instance, PhysicalResourceId corresponds to the InstanceId. You can pass the EC2 InstanceId to DescribeStackResources to find which stack the instance belongs to and what other resources are part of the stack. Required: Conditional. If you don't specify PhysicalResourceId, you must specify StackName. Default: There is no default value.
    public var physicalResourceId: Swift.String?
    /// The name or the unique stack ID that is associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value. Required: Conditional. If you don't specify StackName, you must specify PhysicalResourceId.
    public var stackName: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        physicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.stackName = stackName
    }
}

struct DescribeStackResourcesInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let logicalResourceId: Swift.String?
    let physicalResourceId: Swift.String?
}

extension DescribeStackResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
    }
}

extension DescribeStackResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackResourcesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackResources = output.stackResources
        } else {
            self.stackResources = nil
        }
    }
}

/// The output for a [DescribeStackResources] action.
public struct DescribeStackResourcesOutputResponse: Swift.Equatable {
    /// A list of StackResource structures.
    public var stackResources: [CloudFormationClientTypes.StackResource]?

    public init (
        stackResources: [CloudFormationClientTypes.StackResource]? = nil
    )
    {
        self.stackResources = stackResources
    }
}

struct DescribeStackResourcesOutputResponseBody: Swift.Equatable {
    let stackResources: [CloudFormationClientTypes.StackResource]?
}

extension DescribeStackResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackResources = "StackResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackResourcesResult"))
        if containerValues.contains(.stackResources) {
            struct KeyVal0{struct member{}}
            let stackResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResources)
            if let stackResourcesWrappedContainer = stackResourcesWrappedContainer {
                let stackResourcesContainer = try stackResourcesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResource].self, forKey: .member)
                var stackResourcesBuffer:[CloudFormationClientTypes.StackResource]? = nil
                if let stackResourcesContainer = stackResourcesContainer {
                    stackResourcesBuffer = [CloudFormationClientTypes.StackResource]()
                    for structureContainer0 in stackResourcesContainer {
                        stackResourcesBuffer?.append(structureContainer0)
                    }
                }
                stackResources = stackResourcesBuffer
            } else {
                stackResources = []
            }
        } else {
            stackResources = nil
        }
    }
}

extension DescribeStackSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStackSetInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The name or unique ID of the stack set whose description you want.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackSetName = stackSetName
    }
}

struct DescribeStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DescribeStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension DescribeStackSetOperationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackSetOperation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackSetOperationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStackSetOperationInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The unique ID of the stack set operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name or the unique stack ID of the stack set for the stack operation.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

struct DescribeStackSetOperationInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DescribeStackSetOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension DescribeStackSetOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackSetOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotFoundException" : self = .operationNotFoundException(try OperationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackSetOperationOutputError: Swift.Error, Swift.Equatable {
    case operationNotFoundException(OperationNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackSetOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackSetOperationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackSetOperation = output.stackSetOperation
        } else {
            self.stackSetOperation = nil
        }
    }
}

public struct DescribeStackSetOperationOutputResponse: Swift.Equatable {
    /// The specified stack set operation.
    public var stackSetOperation: CloudFormationClientTypes.StackSetOperation?

    public init (
        stackSetOperation: CloudFormationClientTypes.StackSetOperation? = nil
    )
    {
        self.stackSetOperation = stackSetOperation
    }
}

struct DescribeStackSetOperationOutputResponseBody: Swift.Equatable {
    let stackSetOperation: CloudFormationClientTypes.StackSetOperation?
}

extension DescribeStackSetOperationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackSetOperation = "StackSetOperation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackSetOperationResult"))
        let stackSetOperationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperation.self, forKey: .stackSetOperation)
        stackSetOperation = stackSetOperationDecoded
    }
}

extension DescribeStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStackSetOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackSet = output.stackSet
        } else {
            self.stackSet = nil
        }
    }
}

public struct DescribeStackSetOutputResponse: Swift.Equatable {
    /// The specified stack set.
    public var stackSet: CloudFormationClientTypes.StackSet?

    public init (
        stackSet: CloudFormationClientTypes.StackSet? = nil
    )
    {
        self.stackSet = stackSet
    }
}

struct DescribeStackSetOutputResponseBody: Swift.Equatable {
    let stackSet: CloudFormationClientTypes.StackSet?
}

extension DescribeStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackSet = "StackSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackSetResult"))
        let stackSetDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSet.self, forKey: .stackSet)
        stackSet = stackSetDecoded
    }
}

extension DescribeStacksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStacksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStacks] action.
public struct DescribeStacksInput: Swift.Equatable {
    /// A string that identifies the next page of stacks that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    public var stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

struct DescribeStacksInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let nextToken: Swift.String?
}

extension DescribeStacksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeStacksOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeStacksOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stacks = output.stacks
        } else {
            self.nextToken = nil
            self.stacks = nil
        }
    }
}

/// The output for a [DescribeStacks] action.
public struct DescribeStacksOutputResponse: Swift.Equatable {
    /// If the output exceeds 1 MB in size, a string that identifies the next page of stacks. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of stack structures.
    public var stacks: [CloudFormationClientTypes.Stack]?

    public init (
        nextToken: Swift.String? = nil,
        stacks: [CloudFormationClientTypes.Stack]? = nil
    )
    {
        self.nextToken = nextToken
        self.stacks = stacks
    }
}

struct DescribeStacksOutputResponseBody: Swift.Equatable {
    let stacks: [CloudFormationClientTypes.Stack]?
    let nextToken: Swift.String?
}

extension DescribeStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stacks = "Stacks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStacksResult"))
        if containerValues.contains(.stacks) {
            struct KeyVal0{struct member{}}
            let stacksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stacks)
            if let stacksWrappedContainer = stacksWrappedContainer {
                let stacksContainer = try stacksWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Stack].self, forKey: .member)
                var stacksBuffer:[CloudFormationClientTypes.Stack]? = nil
                if let stacksContainer = stacksContainer {
                    stacksBuffer = [CloudFormationClientTypes.Stack]()
                    for structureContainer0 in stacksContainer {
                        stacksBuffer?.append(structureContainer0)
                    }
                }
                stacks = stacksBuffer
            } else {
                stacks = []
            }
        } else {
            stacks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DescribeType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The version number of a public third-party extension.
    public var publicVersionNumber: Swift.String?
    /// The publisher ID of the extension publisher. Extensions provided by Amazon Web Services are not assigned a publisher ID.
    public var publisherId: Swift.String?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?
    /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. If you specify a VersionId, DescribeType returns information about that specific extension version. Otherwise, it returns information about the default extension version.
    public var versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        publicVersionNumber: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.publicVersionNumber = publicVersionNumber
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

struct DescribeTypeInputBody: Swift.Equatable {
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let arn: Swift.String?
    let versionId: Swift.String?
    let publisherId: Swift.String?
    let publicVersionNumber: Swift.String?
}

extension DescribeTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case publicVersionNumber = "PublicVersionNumber"
        case publisherId = "PublisherId"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
    }
}

extension DescribeTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.autoUpdate = output.autoUpdate
            self.configurationSchema = output.configurationSchema
            self.defaultVersionId = output.defaultVersionId
            self.deprecatedStatus = output.deprecatedStatus
            self.description = output.description
            self.documentationUrl = output.documentationUrl
            self.executionRoleArn = output.executionRoleArn
            self.isActivated = output.isActivated
            self.isDefaultVersion = output.isDefaultVersion
            self.lastUpdated = output.lastUpdated
            self.latestPublicVersion = output.latestPublicVersion
            self.loggingConfig = output.loggingConfig
            self.originalTypeArn = output.originalTypeArn
            self.originalTypeName = output.originalTypeName
            self.provisioningType = output.provisioningType
            self.publicVersionNumber = output.publicVersionNumber
            self.publisherId = output.publisherId
            self.requiredActivatedTypes = output.requiredActivatedTypes
            self.schema = output.schema
            self.sourceUrl = output.sourceUrl
            self.timeCreated = output.timeCreated
            self.type = output.type
            self.typeName = output.typeName
            self.typeTestsStatus = output.typeTestsStatus
            self.typeTestsStatusDescription = output.typeTestsStatusDescription
            self.visibility = output.visibility
        } else {
            self.arn = nil
            self.autoUpdate = nil
            self.configurationSchema = nil
            self.defaultVersionId = nil
            self.deprecatedStatus = nil
            self.description = nil
            self.documentationUrl = nil
            self.executionRoleArn = nil
            self.isActivated = nil
            self.isDefaultVersion = nil
            self.lastUpdated = nil
            self.latestPublicVersion = nil
            self.loggingConfig = nil
            self.originalTypeArn = nil
            self.originalTypeName = nil
            self.provisioningType = nil
            self.publicVersionNumber = nil
            self.publisherId = nil
            self.requiredActivatedTypes = nil
            self.schema = nil
            self.sourceUrl = nil
            self.timeCreated = nil
            self.type = nil
            self.typeName = nil
            self.typeTestsStatus = nil
            self.typeTestsStatusDescription = nil
            self.visibility = nil
        }
    }
}

public struct DescribeTypeOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension.
    public var arn: Swift.String?
    /// Whether CloudFormation automatically updates the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see [Activating public extensions for use in your account] in the CloudFormation User Guide.
    public var autoUpdate: Swift.Bool?
    /// A JSON string that represent the current configuration data for the extension in this account and region. To set the configuration data for an extension, use [SetTypeConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html). For more information, see [Configuring extensions at the account level](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration) in the CloudFormation User Guide.
    public var configurationSchema: Swift.String?
    /// The ID of the default version of the extension. The default version is used when the extension version isn't specified. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns null. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html). To set the default version of an extension, use [SetTypeDefaultVersion].
    public var defaultVersionId: Swift.String?
    /// The deprecation status of the extension version. Valid values include:
    ///
    /// * LIVE: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.
    ///
    /// * DEPRECATED: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.
    ///
    ///
    /// For public third-party extensions, CloudFormation returns null.
    public var deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// The description of the extension.
    public var description: Swift.String?
    /// The URL of a page providing detailed documentation for this extension.
    public var documentationUrl: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html). If the registered extension calls any Amazon Web Services APIs, you must create an [IAM execution role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.
    public var executionRoleArn: Swift.String?
    /// Whether the extension is activated in the account and region. This only applies to public third-party extensions. For all other extensions, CloudFormation returns null.
    public var isActivated: Swift.Bool?
    /// Whether the specified extension version is set as the default version. This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns null.
    public var isDefaultVersion: Swift.Bool?
    /// When the specified extension version was registered. This applies only to:
    ///
    /// * Private extensions you have registered in your account. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html).
    ///
    /// * Public extensions you have activated in your account with auto-update specified. For more information, see [ActivateType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html).
    public var lastUpdated: ClientRuntime.Date?
    /// The latest version of a public extension that is available for use. This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns null.
    public var latestPublicVersion: Swift.String?
    /// Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns null. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html).
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// For public extensions that have been activated for this account and region, the Amazon Resource Name (ARN) of the public extension.
    public var originalTypeArn: Swift.String?
    /// For public extensions that have been activated for this account and region, the type name of the public extension. If you specified a TypeNameAlias when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see [Specifying aliases to refer to extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias) in the CloudFormation User Guide.
    public var originalTypeName: Swift.String?
    /// For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted. Valid values include:
    ///
    /// * FULLY_MUTABLE: The resource type includes an update handler to process updates to the type during stack update operations.
    ///
    /// * IMMUTABLE: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.
    ///
    /// * NON_PROVISIONABLE: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.
    ///
    /// * create
    ///
    /// * read
    ///
    /// * delete
    public var provisioningType: CloudFormationClientTypes.ProvisioningType?
    /// The version number of a public third-party extension. This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns null.
    public var publicVersionNumber: Swift.String?
    /// The publisher ID of the extension publisher. This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns null.
    public var publisherId: Swift.String?
    /// For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.
    public var requiredActivatedTypes: [CloudFormationClientTypes.RequiredActivatedType]?
    /// The schema that defines the extension. For more information about extension schemas, see [Resource Provider Schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html) in the CloudFormation CLI User Guide.
    public var schema: Swift.String?
    /// The URL of the source code for the extension.
    public var sourceUrl: Swift.String?
    /// When the specified private extension version was registered or activated in your account.
    public var timeCreated: ClientRuntime.Date?
    /// The kind of extension.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see [ActivateType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html).
    public var typeName: Swift.String?
    /// The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify VersionId. This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.
    ///
    /// * PASSED: The extension has passed all its contract tests. An extension must have a test status of PASSED before it can be published. For more information, see [Publishing extensions to make them available for public use](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html) in the CloudFormation Command Line Interface User Guide.
    ///
    /// * FAILED: The extension has failed one or more contract tests.
    ///
    /// * IN_PROGRESS: Contract tests are currently being performed on the extension.
    ///
    /// * NOT_TESTED: Contract tests haven't been performed on the extension.
    public var typeTestsStatus: CloudFormationClientTypes.TypeTestsStatus?
    /// The description of the test status. To return the extension test status of a specific extension version, you must specify VersionId. This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.
    public var typeTestsStatusDescription: Swift.String?
    /// The scope at which the extension is visible and usable in CloudFormation operations. Valid values include:
    ///
    /// * PRIVATE: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as PRIVATE.
    ///
    /// * PUBLIC: The extension is publicly visible and usable within any Amazon Web Services account.
    public var visibility: CloudFormationClientTypes.Visibility?

    public init (
        arn: Swift.String? = nil,
        autoUpdate: Swift.Bool? = nil,
        configurationSchema: Swift.String? = nil,
        defaultVersionId: Swift.String? = nil,
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        description: Swift.String? = nil,
        documentationUrl: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        isActivated: Swift.Bool? = nil,
        isDefaultVersion: Swift.Bool? = nil,
        lastUpdated: ClientRuntime.Date? = nil,
        latestPublicVersion: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        originalTypeArn: Swift.String? = nil,
        originalTypeName: Swift.String? = nil,
        provisioningType: CloudFormationClientTypes.ProvisioningType? = nil,
        publicVersionNumber: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        requiredActivatedTypes: [CloudFormationClientTypes.RequiredActivatedType]? = nil,
        schema: Swift.String? = nil,
        sourceUrl: Swift.String? = nil,
        timeCreated: ClientRuntime.Date? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        typeTestsStatus: CloudFormationClientTypes.TypeTestsStatus? = nil,
        typeTestsStatusDescription: Swift.String? = nil,
        visibility: CloudFormationClientTypes.Visibility? = nil
    )
    {
        self.arn = arn
        self.autoUpdate = autoUpdate
        self.configurationSchema = configurationSchema
        self.defaultVersionId = defaultVersionId
        self.deprecatedStatus = deprecatedStatus
        self.description = description
        self.documentationUrl = documentationUrl
        self.executionRoleArn = executionRoleArn
        self.isActivated = isActivated
        self.isDefaultVersion = isDefaultVersion
        self.lastUpdated = lastUpdated
        self.latestPublicVersion = latestPublicVersion
        self.loggingConfig = loggingConfig
        self.originalTypeArn = originalTypeArn
        self.originalTypeName = originalTypeName
        self.provisioningType = provisioningType
        self.publicVersionNumber = publicVersionNumber
        self.publisherId = publisherId
        self.requiredActivatedTypes = requiredActivatedTypes
        self.schema = schema
        self.sourceUrl = sourceUrl
        self.timeCreated = timeCreated
        self.type = type
        self.typeName = typeName
        self.typeTestsStatus = typeTestsStatus
        self.typeTestsStatusDescription = typeTestsStatusDescription
        self.visibility = visibility
    }
}

struct DescribeTypeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let defaultVersionId: Swift.String?
    let isDefaultVersion: Swift.Bool?
    let typeTestsStatus: CloudFormationClientTypes.TypeTestsStatus?
    let typeTestsStatusDescription: Swift.String?
    let description: Swift.String?
    let schema: Swift.String?
    let provisioningType: CloudFormationClientTypes.ProvisioningType?
    let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    let requiredActivatedTypes: [CloudFormationClientTypes.RequiredActivatedType]?
    let executionRoleArn: Swift.String?
    let visibility: CloudFormationClientTypes.Visibility?
    let sourceUrl: Swift.String?
    let documentationUrl: Swift.String?
    let lastUpdated: ClientRuntime.Date?
    let timeCreated: ClientRuntime.Date?
    let configurationSchema: Swift.String?
    let publisherId: Swift.String?
    let originalTypeName: Swift.String?
    let originalTypeArn: Swift.String?
    let publicVersionNumber: Swift.String?
    let latestPublicVersion: Swift.String?
    let isActivated: Swift.Bool?
    let autoUpdate: Swift.Bool?
}

extension DescribeTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case autoUpdate = "AutoUpdate"
        case configurationSchema = "ConfigurationSchema"
        case defaultVersionId = "DefaultVersionId"
        case deprecatedStatus = "DeprecatedStatus"
        case description = "Description"
        case documentationUrl = "DocumentationUrl"
        case executionRoleArn = "ExecutionRoleArn"
        case isActivated = "IsActivated"
        case isDefaultVersion = "IsDefaultVersion"
        case lastUpdated = "LastUpdated"
        case latestPublicVersion = "LatestPublicVersion"
        case loggingConfig = "LoggingConfig"
        case originalTypeArn = "OriginalTypeArn"
        case originalTypeName = "OriginalTypeName"
        case provisioningType = "ProvisioningType"
        case publicVersionNumber = "PublicVersionNumber"
        case publisherId = "PublisherId"
        case requiredActivatedTypes = "RequiredActivatedTypes"
        case schema = "Schema"
        case sourceUrl = "SourceUrl"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case typeTestsStatus = "TypeTestsStatus"
        case typeTestsStatusDescription = "TypeTestsStatusDescription"
        case visibility = "Visibility"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTypeResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let typeTestsStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.TypeTestsStatus.self, forKey: .typeTestsStatus)
        typeTestsStatus = typeTestsStatusDecoded
        let typeTestsStatusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeTestsStatusDescription)
        typeTestsStatusDescription = typeTestsStatusDescriptionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let provisioningTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ProvisioningType.self, forKey: .provisioningType)
        provisioningType = provisioningTypeDecoded
        let deprecatedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeprecatedStatus.self, forKey: .deprecatedStatus)
        deprecatedStatus = deprecatedStatusDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        if containerValues.contains(.requiredActivatedTypes) {
            struct KeyVal0{struct member{}}
            let requiredActivatedTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .requiredActivatedTypes)
            if let requiredActivatedTypesWrappedContainer = requiredActivatedTypesWrappedContainer {
                let requiredActivatedTypesContainer = try requiredActivatedTypesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.RequiredActivatedType].self, forKey: .member)
                var requiredActivatedTypesBuffer:[CloudFormationClientTypes.RequiredActivatedType]? = nil
                if let requiredActivatedTypesContainer = requiredActivatedTypesContainer {
                    requiredActivatedTypesBuffer = [CloudFormationClientTypes.RequiredActivatedType]()
                    for structureContainer0 in requiredActivatedTypesContainer {
                        requiredActivatedTypesBuffer?.append(structureContainer0)
                    }
                }
                requiredActivatedTypes = requiredActivatedTypesBuffer
            } else {
                requiredActivatedTypes = []
            }
        } else {
            requiredActivatedTypes = nil
        }
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Visibility.self, forKey: .visibility)
        visibility = visibilityDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
        let documentationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentationUrl)
        documentationUrl = documentationUrlDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let timeCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timeCreated)
        timeCreated = timeCreatedDecoded
        let configurationSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSchema)
        configurationSchema = configurationSchemaDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let originalTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeName)
        originalTypeName = originalTypeNameDecoded
        let originalTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeArn)
        originalTypeArn = originalTypeArnDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
        let latestPublicVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestPublicVersion)
        latestPublicVersion = latestPublicVersionDecoded
        let isActivatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActivated)
        isActivated = isActivatedDecoded
        let autoUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoUpdate)
        autoUpdate = autoUpdateDecoded
    }
}

extension DescribeTypeRegistrationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let registrationToken = registrationToken {
            try container.encode(registrationToken, forKey: ClientRuntime.Key("RegistrationToken"))
        }
        try container.encode("DescribeTypeRegistration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTypeRegistrationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTypeRegistrationInput: Swift.Equatable {
    /// The identifier for this registration request. This registration token is generated by CloudFormation when you initiate a registration request using [RegisterType].
    /// This member is required.
    public var registrationToken: Swift.String?

    public init (
        registrationToken: Swift.String? = nil
    )
    {
        self.registrationToken = registrationToken
    }
}

struct DescribeTypeRegistrationInputBody: Swift.Equatable {
    let registrationToken: Swift.String?
}

extension DescribeTypeRegistrationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationToken = "RegistrationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registrationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrationToken)
        registrationToken = registrationTokenDecoded
    }
}

extension DescribeTypeRegistrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTypeRegistrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTypeRegistrationOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTypeRegistrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTypeRegistrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.progressStatus = output.progressStatus
            self.typeArn = output.typeArn
            self.typeVersionArn = output.typeVersionArn
        } else {
            self.description = nil
            self.progressStatus = nil
            self.typeArn = nil
            self.typeVersionArn = nil
        }
    }
}

public struct DescribeTypeRegistrationOutputResponse: Swift.Equatable {
    /// The description of the extension registration request.
    public var description: Swift.String?
    /// The current status of the extension registration request.
    public var progressStatus: CloudFormationClientTypes.RegistrationStatus?
    /// The Amazon Resource Name (ARN) of the extension being registered. For registration requests with a ProgressStatus of other than COMPLETE, this will be null.
    public var typeArn: Swift.String?
    /// The Amazon Resource Name (ARN) of this specific version of the extension being registered. For registration requests with a ProgressStatus of other than COMPLETE, this will be null.
    public var typeVersionArn: Swift.String?

    public init (
        description: Swift.String? = nil,
        progressStatus: CloudFormationClientTypes.RegistrationStatus? = nil,
        typeArn: Swift.String? = nil,
        typeVersionArn: Swift.String? = nil
    )
    {
        self.description = description
        self.progressStatus = progressStatus
        self.typeArn = typeArn
        self.typeVersionArn = typeVersionArn
    }
}

struct DescribeTypeRegistrationOutputResponseBody: Swift.Equatable {
    let progressStatus: CloudFormationClientTypes.RegistrationStatus?
    let description: Swift.String?
    let typeArn: Swift.String?
    let typeVersionArn: Swift.String?
}

extension DescribeTypeRegistrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case progressStatus = "ProgressStatus"
        case typeArn = "TypeArn"
        case typeVersionArn = "TypeVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTypeRegistrationResult"))
        let progressStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistrationStatus.self, forKey: .progressStatus)
        progressStatus = progressStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeVersionArn)
        typeVersionArn = typeVersionArnDecoded
    }
}

extension DetectStackDriftInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceIds = logicalResourceIds {
            if !logicalResourceIds.isEmpty {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                for (index0, logicalresourceid0) in logicalResourceIds.enumerated() {
                    try logicalResourceIdsContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                try logicalResourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DetectStackDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetectStackDriftInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectStackDriftInput: Swift.Equatable {
    /// The logical names of any resources you want to use as filters.
    public var logicalResourceIds: [Swift.String]?
    /// The name of the stack for which you want to detect drift.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        logicalResourceIds: [Swift.String]? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceIds = logicalResourceIds
        self.stackName = stackName
    }
}

struct DetectStackDriftInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let logicalResourceIds: [Swift.String]?
}

extension DetectStackDriftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceIds = "LogicalResourceIds"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        if containerValues.contains(.logicalResourceIds) {
            struct KeyVal0{struct member{}}
            let logicalResourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logicalResourceIds)
            if let logicalResourceIdsWrappedContainer = logicalResourceIdsWrappedContainer {
                let logicalResourceIdsContainer = try logicalResourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logicalResourceIdsBuffer:[Swift.String]? = nil
                if let logicalResourceIdsContainer = logicalResourceIdsContainer {
                    logicalResourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in logicalResourceIdsContainer {
                        logicalResourceIdsBuffer?.append(stringContainer0)
                    }
                }
                logicalResourceIds = logicalResourceIdsBuffer
            } else {
                logicalResourceIds = []
            }
        } else {
            logicalResourceIds = nil
        }
    }
}

extension DetectStackDriftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetectStackDriftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectStackDriftOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectStackDriftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectStackDriftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackDriftDetectionId = output.stackDriftDetectionId
        } else {
            self.stackDriftDetectionId = nil
        }
    }
}

public struct DetectStackDriftOutputResponse: Swift.Equatable {
    /// The ID of the drift detection results of this operation. CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.
    /// This member is required.
    public var stackDriftDetectionId: Swift.String?

    public init (
        stackDriftDetectionId: Swift.String? = nil
    )
    {
        self.stackDriftDetectionId = stackDriftDetectionId
    }
}

struct DetectStackDriftOutputResponseBody: Swift.Equatable {
    let stackDriftDetectionId: Swift.String?
}

extension DetectStackDriftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackDriftDetectionId = "StackDriftDetectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetectStackDriftResult"))
        let stackDriftDetectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackDriftDetectionId)
        stackDriftDetectionId = stackDriftDetectionIdDecoded
    }
}

extension DetectStackResourceDriftInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DetectStackResourceDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetectStackResourceDriftInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectStackResourceDriftInput: Swift.Equatable {
    /// The logical name of the resource for which to return drift information.
    /// This member is required.
    public var logicalResourceId: Swift.String?
    /// The name of the stack to which the resource belongs.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
    }
}

struct DetectStackResourceDriftInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let logicalResourceId: Swift.String?
}

extension DetectStackResourceDriftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
    }
}

extension DetectStackResourceDriftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetectStackResourceDriftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectStackResourceDriftOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectStackResourceDriftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectStackResourceDriftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackResourceDrift = output.stackResourceDrift
        } else {
            self.stackResourceDrift = nil
        }
    }
}

public struct DetectStackResourceDriftOutputResponse: Swift.Equatable {
    /// Information about whether the resource's actual configuration has drifted from its expected template configuration, including actual and expected property values and any differences detected.
    /// This member is required.
    public var stackResourceDrift: CloudFormationClientTypes.StackResourceDrift?

    public init (
        stackResourceDrift: CloudFormationClientTypes.StackResourceDrift? = nil
    )
    {
        self.stackResourceDrift = stackResourceDrift
    }
}

struct DetectStackResourceDriftOutputResponseBody: Swift.Equatable {
    let stackResourceDrift: CloudFormationClientTypes.StackResourceDrift?
}

extension DetectStackResourceDriftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackResourceDrift = "StackResourceDrift"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetectStackResourceDriftResult"))
        let stackResourceDriftDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDrift.self, forKey: .stackResourceDrift)
        stackResourceDrift = stackResourceDriftDecoded
    }
}

extension DetectStackSetDriftInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DetectStackSetDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetectStackSetDriftInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectStackSetDriftInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The ID of the stack set operation.
    public var operationId: Swift.String?
    /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// The name of the stack set on which to perform the drift detection operation.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.stackSetName = stackSetName
    }
}

struct DetectStackSetDriftInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DetectStackSetDriftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension DetectStackSetDriftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetectStackSetDriftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectStackSetDriftOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationInProgressException(OperationInProgressException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectStackSetDriftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectStackSetDriftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct DetectStackSetDriftOutputResponse: Swift.Equatable {
    /// The ID of the drift detection stack set operation. You can use this operation ID with [DescribeStackSetOperation] to monitor the progress of the drift detection operation.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct DetectStackSetDriftOutputResponseBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension DetectStackSetDriftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetectStackSetDriftResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension CloudFormationClientTypes {
    public enum DifferenceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case notEqual
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [DifferenceType] {
            return [
                .add,
                .notEqual,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .notEqual: return "NOT_EQUAL"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DifferenceType(rawValue: rawValue) ?? DifferenceType.sdkUnknown(rawValue)
        }
    }
}

extension EstimateTemplateCostInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("EstimateTemplateCost", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension EstimateTemplateCostInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for an [EstimateTemplateCost] action.
public struct EstimateTemplateCostInput: Swift.Equatable {
    /// A list of Parameter structures that specify input parameters.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide.) Conditional: You must pass TemplateBody or TemplateURL. If both are passed, only TemplateBody is used.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template that's located in an Amazon S3 bucket or a Systems Manager document. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
    public var templateURL: Swift.String?

    public init (
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

struct EstimateTemplateCostInputBody: Swift.Equatable {
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
}

extension EstimateTemplateCostInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
    }
}

extension EstimateTemplateCostOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EstimateTemplateCostOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EstimateTemplateCostOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension EstimateTemplateCostOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EstimateTemplateCostOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.url = output.url
        } else {
            self.url = nil
        }
    }
}

/// The output for a [EstimateTemplateCost] action.
public struct EstimateTemplateCostOutputResponse: Swift.Equatable {
    /// An Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
    public var url: Swift.String?

    public init (
        url: Swift.String? = nil
    )
    {
        self.url = url
    }
}

struct EstimateTemplateCostOutputResponseBody: Swift.Equatable {
    let url: Swift.String?
}

extension EstimateTemplateCostOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EstimateTemplateCostResult"))
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension CloudFormationClientTypes {
    public enum EvaluationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationType] {
            return [
                .dynamic,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "Dynamic"
            case .static: return "Static"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationType(rawValue: rawValue) ?? EvaluationType.sdkUnknown(rawValue)
        }
    }
}

extension ExecuteChangeSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ExecuteChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ExecuteChangeSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [ExecuteChangeSet] action.
public struct ExecuteChangeSetInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// A unique identifier for this ExecuteChangeSet request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to execute a change set to update a stack with the same name. You might retry ExecuteChangeSet requests to ensure that CloudFormation successfully received them.
    public var clientRequestToken: Swift.String?
    /// Preserves the state of previously provisioned resources when an operation fails. Default: True
    public var disableRollback: Swift.Bool?
    /// If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that's associated with the change set you want to execute.
    public var stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.stackName = stackName
    }
}

struct ExecuteChangeSetInputBody: Swift.Equatable {
    let changeSetName: Swift.String?
    let stackName: Swift.String?
    let clientRequestToken: Swift.String?
    let disableRollback: Swift.Bool?
}

extension ExecuteChangeSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let disableRollbackDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableRollback)
        disableRollback = disableRollbackDecoded
    }
}

extension ExecuteChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExecuteChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFound" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidChangeSetStatus" : self = .invalidChangeSetStatusException(try InvalidChangeSetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ExecuteChangeSetOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case invalidChangeSetStatusException(InvalidChangeSetStatusException)
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecuteChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The output for the [ExecuteChangeSet] action.
public struct ExecuteChangeSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudFormationClientTypes {
    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case executeComplete
        case executeFailed
        case executeInProgress
        case obsolete
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .available,
                .executeComplete,
                .executeFailed,
                .executeInProgress,
                .obsolete,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .executeComplete: return "EXECUTE_COMPLETE"
            case .executeFailed: return "EXECUTE_FAILED"
            case .executeInProgress: return "EXECUTE_IN_PROGRESS"
            case .obsolete: return "OBSOLETE"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Export: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportingStackId = "ExportingStackId"
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportingStackId = exportingStackId {
            try container.encode(exportingStackId, forKey: ClientRuntime.Key("ExportingStackId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportingStackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportingStackId)
        exportingStackId = exportingStackIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes {
    /// The Export structure describes the exported output values for a stack.
    public struct Export: Swift.Equatable {
        /// The stack that contains the exported output name and value.
        public var exportingStackId: Swift.String?
        /// The name of exported output value. Use this name and the Fn::ImportValue function to import the associated value into other stacks. The name is defined in the Export field in the associated stack's Outputs section.
        public var name: Swift.String?
        /// The value of the exported output, such as a resource physical ID. This value is defined in the Export field in the associated stack's Outputs section.
        public var value: Swift.String?

        public init (
            exportingStackId: Swift.String? = nil,
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.exportingStackId = exportingStackId
            self.name = name
            self.value = value
        }
    }

}

extension GetStackPolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("GetStackPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetStackPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [GetStackPolicy] action.
public struct GetStackPolicyInput: Swift.Equatable {
    /// The name or unique stack ID that's associated with the stack whose policy you want to get.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        stackName: Swift.String? = nil
    )
    {
        self.stackName = stackName
    }
}

struct GetStackPolicyInputBody: Swift.Equatable {
    let stackName: Swift.String?
}

extension GetStackPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
    }
}

extension GetStackPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetStackPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetStackPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStackPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetStackPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackPolicyBody = output.stackPolicyBody
        } else {
            self.stackPolicyBody = nil
        }
    }
}

/// The output for the [GetStackPolicy] action.
public struct GetStackPolicyOutputResponse: Swift.Equatable {
    /// Structure containing the stack policy body. (For more information, go to [ Prevent Updates to Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the CloudFormation User Guide.)
    public var stackPolicyBody: Swift.String?

    public init (
        stackPolicyBody: Swift.String? = nil
    )
    {
        self.stackPolicyBody = stackPolicyBody
    }
}

struct GetStackPolicyOutputResponseBody: Swift.Equatable {
    let stackPolicyBody: Swift.String?
}

extension GetStackPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackPolicyBody = "StackPolicyBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetStackPolicyResult"))
        let stackPolicyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyBody)
        stackPolicyBody = stackPolicyBodyDecoded
    }
}

extension GetTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let templateStage = templateStage {
            try container.encode(templateStage, forKey: ClientRuntime.Key("TemplateStage"))
        }
        try container.encode("GetTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for a [GetTemplate] action.
public struct GetTemplateInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the StackName.
    public var changeSetName: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    public var stackName: Swift.String?
    /// For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify Original. To get the template after CloudFormation has processed all transforms, specify Processed. If the template doesn't include transforms, Original and Processed return the same template. By default, CloudFormation specifies Processed.
    public var templateStage: CloudFormationClientTypes.TemplateStage?

    public init (
        changeSetName: Swift.String? = nil,
        stackName: Swift.String? = nil,
        templateStage: CloudFormationClientTypes.TemplateStage? = nil
    )
    {
        self.changeSetName = changeSetName
        self.stackName = stackName
        self.templateStage = templateStage
    }
}

struct GetTemplateInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let changeSetName: Swift.String?
    let templateStage: CloudFormationClientTypes.TemplateStage?
}

extension GetTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case stackName = "StackName"
        case templateStage = "TemplateStage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let templateStageDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.TemplateStage.self, forKey: .templateStage)
        templateStage = templateStageDecoded
    }
}

extension GetTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFound" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTemplateOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stagesAvailable = output.stagesAvailable
            self.templateBody = output.templateBody
        } else {
            self.stagesAvailable = nil
            self.templateBody = nil
        }
    }
}

/// The output for [GetTemplate] action.
public struct GetTemplateOutputResponse: Swift.Equatable {
    /// The stage of the template that you can retrieve. For stacks, the Original and Processed templates are always available. For change sets, the Original template is always available. After CloudFormation finishes creating the change set, the Processed template becomes available.
    public var stagesAvailable: [CloudFormationClientTypes.TemplateStage]?
    /// Structure containing the template body. (For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide.) CloudFormation returns the same template that was used when the stack was created.
    public var templateBody: Swift.String?

    public init (
        stagesAvailable: [CloudFormationClientTypes.TemplateStage]? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.stagesAvailable = stagesAvailable
        self.templateBody = templateBody
    }
}

struct GetTemplateOutputResponseBody: Swift.Equatable {
    let templateBody: Swift.String?
    let stagesAvailable: [CloudFormationClientTypes.TemplateStage]?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stagesAvailable = "StagesAvailable"
        case templateBody = "TemplateBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateResult"))
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        if containerValues.contains(.stagesAvailable) {
            struct KeyVal0{struct member{}}
            let stagesAvailableWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stagesAvailable)
            if let stagesAvailableWrappedContainer = stagesAvailableWrappedContainer {
                let stagesAvailableContainer = try stagesAvailableWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TemplateStage].self, forKey: .member)
                var stagesAvailableBuffer:[CloudFormationClientTypes.TemplateStage]? = nil
                if let stagesAvailableContainer = stagesAvailableContainer {
                    stagesAvailableBuffer = [CloudFormationClientTypes.TemplateStage]()
                    for enumContainer0 in stagesAvailableContainer {
                        stagesAvailableBuffer?.append(enumContainer0)
                    }
                }
                stagesAvailable = stagesAvailableBuffer
            } else {
                stagesAvailable = []
            }
        } else {
            stagesAvailable = nil
        }
    }
}

extension GetTemplateSummaryInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("GetTemplateSummary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTemplateSummaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [GetTemplateSummary] action.
public struct GetTemplateSummaryInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The name or the stack ID that's associated with the stack, which aren't always interchangeable. For running stacks, you can specify either the stack's name or its unique stack ID. For deleted stack, you must specify the unique stack ID. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var stackName: Swift.String?
    /// The name or unique ID of the stack set from which the stack was created. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var stackSetName: Swift.String?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. For more information about templates, see [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var templateURL: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackName: Swift.String? = nil,
        stackSetName: Swift.String? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackName = stackName
        self.stackSetName = stackSetName
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

struct GetTemplateSummaryInputBody: Swift.Equatable {
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let stackName: Swift.String?
    let stackSetName: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension GetTemplateSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackName = "StackName"
        case stackSetName = "StackSetName"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension GetTemplateSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTemplateSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTemplateSummaryOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTemplateSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTemplateSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capabilities = output.capabilities
            self.capabilitiesReason = output.capabilitiesReason
            self.declaredTransforms = output.declaredTransforms
            self.description = output.description
            self.metadata = output.metadata
            self.parameters = output.parameters
            self.resourceIdentifierSummaries = output.resourceIdentifierSummaries
            self.resourceTypes = output.resourceTypes
            self.version = output.version
        } else {
            self.capabilities = nil
            self.capabilitiesReason = nil
            self.declaredTransforms = nil
            self.description = nil
            self.metadata = nil
            self.parameters = nil
            self.resourceIdentifierSummaries = nil
            self.resourceTypes = nil
            self.version = nil
        }
    }
}

/// The output for the [GetTemplateSummary] action.
public struct GetTemplateSummaryOutputResponse: Swift.Equatable {
    /// The capabilities found within the template. If your template contains IAM resources, you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when you use the [CreateStack] or [UpdateStack] actions with your template; otherwise, those actions return an InsufficientCapabilities error. For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The list of resources that generated the values in the Capabilities response element.
    public var capabilitiesReason: Swift.String?
    /// A list of the transforms that are declared in the template.
    public var declaredTransforms: [Swift.String]?
    /// The value that's defined in the Description property of the template.
    public var description: Swift.String?
    /// The value that's defined for the Metadata property of the template.
    public var metadata: Swift.String?
    /// A list of parameter declarations that describe various properties for each parameter.
    public var parameters: [CloudFormationClientTypes.ParameterDeclaration]?
    /// A list of resource identifier summaries that describe the target resources of an import operation and the properties you can provide during the import to identify the target resources. For example, BucketName is a possible identifier property for an AWS::S3::Bucket resource.
    public var resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]?
    /// A list of all the template resource types that are defined in the template, such as AWS::EC2::Instance, AWS::Dynamo::Table, and Custom::MyCustomInstance.
    public var resourceTypes: [Swift.String]?
    /// The Amazon Web Services template format version, which identifies the capabilities of the template.
    public var version: Swift.String?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        capabilitiesReason: Swift.String? = nil,
        declaredTransforms: [Swift.String]? = nil,
        description: Swift.String? = nil,
        metadata: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.ParameterDeclaration]? = nil,
        resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]? = nil,
        resourceTypes: [Swift.String]? = nil,
        version: Swift.String? = nil
    )
    {
        self.capabilities = capabilities
        self.capabilitiesReason = capabilitiesReason
        self.declaredTransforms = declaredTransforms
        self.description = description
        self.metadata = metadata
        self.parameters = parameters
        self.resourceIdentifierSummaries = resourceIdentifierSummaries
        self.resourceTypes = resourceTypes
        self.version = version
    }
}

struct GetTemplateSummaryOutputResponseBody: Swift.Equatable {
    let parameters: [CloudFormationClientTypes.ParameterDeclaration]?
    let description: Swift.String?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let capabilitiesReason: Swift.String?
    let resourceTypes: [Swift.String]?
    let version: Swift.String?
    let metadata: Swift.String?
    let declaredTransforms: [Swift.String]?
    let resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]?
}

extension GetTemplateSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case capabilitiesReason = "CapabilitiesReason"
        case declaredTransforms = "DeclaredTransforms"
        case description = "Description"
        case metadata = "Metadata"
        case parameters = "Parameters"
        case resourceIdentifierSummaries = "ResourceIdentifierSummaries"
        case resourceTypes = "ResourceTypes"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateSummaryResult"))
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ParameterDeclaration].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.ParameterDeclaration]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.ParameterDeclaration]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        let capabilitiesReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capabilitiesReason)
        capabilitiesReason = capabilitiesReasonDecoded
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.declaredTransforms) {
            struct KeyVal0{struct member{}}
            let declaredTransformsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .declaredTransforms)
            if let declaredTransformsWrappedContainer = declaredTransformsWrappedContainer {
                let declaredTransformsContainer = try declaredTransformsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var declaredTransformsBuffer:[Swift.String]? = nil
                if let declaredTransformsContainer = declaredTransformsContainer {
                    declaredTransformsBuffer = [Swift.String]()
                    for stringContainer0 in declaredTransformsContainer {
                        declaredTransformsBuffer?.append(stringContainer0)
                    }
                }
                declaredTransforms = declaredTransformsBuffer
            } else {
                declaredTransforms = []
            }
        } else {
            declaredTransforms = nil
        }
        if containerValues.contains(.resourceIdentifierSummaries) {
            struct KeyVal0{struct member{}}
            let resourceIdentifierSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceIdentifierSummaries)
            if let resourceIdentifierSummariesWrappedContainer = resourceIdentifierSummariesWrappedContainer {
                let resourceIdentifierSummariesContainer = try resourceIdentifierSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceIdentifierSummary].self, forKey: .member)
                var resourceIdentifierSummariesBuffer:[CloudFormationClientTypes.ResourceIdentifierSummary]? = nil
                if let resourceIdentifierSummariesContainer = resourceIdentifierSummariesContainer {
                    resourceIdentifierSummariesBuffer = [CloudFormationClientTypes.ResourceIdentifierSummary]()
                    for structureContainer0 in resourceIdentifierSummariesContainer {
                        resourceIdentifierSummariesBuffer?.append(structureContainer0)
                    }
                }
                resourceIdentifierSummaries = resourceIdentifierSummariesBuffer
            } else {
                resourceIdentifierSummaries = []
            }
        } else {
            resourceIdentifierSummaries = nil
        }
    }
}

extension CloudFormationClientTypes {
    public enum HandlerErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdenied
        case alreadyexists
        case generalserviceexception
        case handlerinternalfailure
        case internalfailure
        case invalidcredentials
        case invalidrequest
        case invalidtypeconfiguration
        case networkfailure
        case noncompliant
        case notfound
        case notupdatable
        case resourceconflict
        case serviceinternalerror
        case servicelimitexceeded
        case servicetimeout
        case throttling
        case unknown
        case unsupportedtarget
        case sdkUnknown(Swift.String)

        public static var allCases: [HandlerErrorCode] {
            return [
                .accessdenied,
                .alreadyexists,
                .generalserviceexception,
                .handlerinternalfailure,
                .internalfailure,
                .invalidcredentials,
                .invalidrequest,
                .invalidtypeconfiguration,
                .networkfailure,
                .noncompliant,
                .notfound,
                .notupdatable,
                .resourceconflict,
                .serviceinternalerror,
                .servicelimitexceeded,
                .servicetimeout,
                .throttling,
                .unknown,
                .unsupportedtarget,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .alreadyexists: return "AlreadyExists"
            case .generalserviceexception: return "GeneralServiceException"
            case .handlerinternalfailure: return "HandlerInternalFailure"
            case .internalfailure: return "InternalFailure"
            case .invalidcredentials: return "InvalidCredentials"
            case .invalidrequest: return "InvalidRequest"
            case .invalidtypeconfiguration: return "InvalidTypeConfiguration"
            case .networkfailure: return "NetworkFailure"
            case .noncompliant: return "NonCompliant"
            case .notfound: return "NotFound"
            case .notupdatable: return "NotUpdatable"
            case .resourceconflict: return "ResourceConflict"
            case .serviceinternalerror: return "ServiceInternalError"
            case .servicelimitexceeded: return "ServiceLimitExceeded"
            case .servicetimeout: return "NotStabilized"
            case .throttling: return "Throttling"
            case .unknown: return "Unknown"
            case .unsupportedtarget: return "UnsupportedTarget"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandlerErrorCode(rawValue: rawValue) ?? HandlerErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookFailureMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fail
        case warn
        case sdkUnknown(Swift.String)

        public static var allCases: [HookFailureMode] {
            return [
                .fail,
                .warn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fail: return "FAIL"
            case .warn: return "WARN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookFailureMode(rawValue: rawValue) ?? HookFailureMode.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookInvocationPoint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preProvision
        case sdkUnknown(Swift.String)

        public static var allCases: [HookInvocationPoint] {
            return [
                .preProvision,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preProvision: return "PRE_PROVISION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookInvocationPoint(rawValue: rawValue) ?? HookInvocationPoint.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hookCompleteFailed
        case hookCompleteSucceeded
        case hookFailed
        case hookInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [HookStatus] {
            return [
                .hookCompleteFailed,
                .hookCompleteSucceeded,
                .hookFailed,
                .hookInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hookCompleteFailed: return "HOOK_COMPLETE_FAILED"
            case .hookCompleteSucceeded: return "HOOK_COMPLETE_SUCCEEDED"
            case .hookFailed: return "HOOK_FAILED"
            case .hookInProgress: return "HOOK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookStatus(rawValue: rawValue) ?? HookStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookTargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [HookTargetType] {
            return [
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookTargetType(rawValue: rawValue) ?? HookTargetType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum IdentityProvider: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsMarketplace
        case bitbucket
        case github
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityProvider] {
            return [
                .awsMarketplace,
                .bitbucket,
                .github,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsMarketplace: return "AWS_Marketplace"
            case .bitbucket: return "Bitbucket"
            case .github: return "GitHub"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityProvider(rawValue: rawValue) ?? IdentityProvider.sdkUnknown(rawValue)
        }
    }
}

extension ImportStacksToStackSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            if !organizationalUnitIds.isEmpty {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                    try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                try organizationalUnitIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackIds = stackIds {
            if !stackIds.isEmpty {
                var stackIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackIds"))
                for (index0, stackid0) in stackIds.enumerated() {
                    try stackIdsContainer.encode(stackid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackIds"))
                try stackIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackIdsUrl = stackIdsUrl {
            try container.encode(stackIdsUrl, forKey: ClientRuntime.Key("StackIdsUrl"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ImportStacksToStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ImportStacksToStackSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportStacksToStackSetInput: Swift.Equatable {
    /// By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * For service managed stack sets, specify DELEGATED_ADMIN.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// A unique, user defined, identifier for the stack set operation.
    public var operationId: Swift.String?
    /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// The list of OU ID's to which the stacks being imported has to be mapped as deployment target.
    public var organizationalUnitIds: [Swift.String]?
    /// The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time. Specify either StackIds or StackIdsUrl.
    public var stackIds: [Swift.String]?
    /// The Amazon S3 URL which contains list of stack ids to be inputted. Specify either StackIds or StackIdsUrl.
    public var stackIdsUrl: Swift.String?
    /// The name of the stack set. The name must be unique in the Region where you create your stack set.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        organizationalUnitIds: [Swift.String]? = nil,
        stackIds: [Swift.String]? = nil,
        stackIdsUrl: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.organizationalUnitIds = organizationalUnitIds
        self.stackIds = stackIds
        self.stackIdsUrl = stackIdsUrl
        self.stackSetName = stackSetName
    }
}

struct ImportStacksToStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let stackIds: [Swift.String]?
    let stackIdsUrl: Swift.String?
    let organizationalUnitIds: [Swift.String]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension ImportStacksToStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case stackIds = "StackIds"
        case stackIdsUrl = "StackIdsUrl"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        if containerValues.contains(.stackIds) {
            struct KeyVal0{struct member{}}
            let stackIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackIds)
            if let stackIdsWrappedContainer = stackIdsWrappedContainer {
                let stackIdsContainer = try stackIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var stackIdsBuffer:[Swift.String]? = nil
                if let stackIdsContainer = stackIdsContainer {
                    stackIdsBuffer = [Swift.String]()
                    for stringContainer0 in stackIdsContainer {
                        stackIdsBuffer?.append(stringContainer0)
                    }
                }
                stackIds = stackIdsBuffer
            } else {
                stackIds = []
            }
        } else {
            stackIds = nil
        }
        let stackIdsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackIdsUrl)
        stackIdsUrl = stackIdsUrlDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension ImportStacksToStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ImportStacksToStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackNotFoundException" : self = .stackNotFoundException(try StackNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ImportStacksToStackSetOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case limitExceededException(LimitExceededException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackNotFoundException(StackNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportStacksToStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImportStacksToStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct ImportStacksToStackSetOutputResponse: Swift.Equatable {
    /// The unique identifier for the stack set operation.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct ImportStacksToStackSetOutputResponseBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension ImportStacksToStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ImportStacksToStackSetResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension InsufficientCapabilitiesException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InsufficientCapabilitiesExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The template contains resources with capabilities that weren't specified in the Capabilities parameter.
public struct InsufficientCapabilitiesException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientCapabilitiesExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InsufficientCapabilitiesExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidChangeSetStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidChangeSetStatusExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified change set can't be used to update the stack. For example, the change set status might be CREATE_IN_PROGRESS, or the stack status might be UPDATE_IN_PROGRESS.
public struct InvalidChangeSetStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidChangeSetStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidChangeSetStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidOperationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified operation isn't valid.
public struct InvalidOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStateTransitionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidStateTransitionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Error reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html). CloudFormation doesn't return this error to users.
public struct InvalidStateTransitionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStateTransitionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidStateTransitionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The quota for the resource has already been reached. For information about resource and stack limitations, see [CloudFormation quotas](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html) in the CloudFormation User Guide.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListChangeSetsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ListChangeSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListChangeSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [ListChangeSets] action.
public struct ListChangeSetsInput: Swift.Equatable {
    /// A string (provided by the [ListChangeSets] response output) that identifies the next page of change sets that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

struct ListChangeSetsInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let nextToken: Swift.String?
}

extension ListChangeSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListChangeSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListChangeSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListChangeSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChangeSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListChangeSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

/// The output for the [ListChangeSets] action.
public struct ListChangeSetsOutputResponse: Swift.Equatable {
    /// If the output exceeds 1 MB, a string that identifies the next page of change sets. If there is no additional page, this value is null.
    public var nextToken: Swift.String?
    /// A list of ChangeSetSummary structures that provides the ID and status of each change set for the specified stack.
    public var summaries: [CloudFormationClientTypes.ChangeSetSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.ChangeSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListChangeSetsOutputResponseBody: Swift.Equatable {
    let summaries: [CloudFormationClientTypes.ChangeSetSummary]?
    let nextToken: Swift.String?
}

extension ListChangeSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListChangeSetsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ChangeSetSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.ChangeSetSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.ChangeSetSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExportsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListExports", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListExportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListExportsInput: Swift.Equatable {
    /// A string (provided by the [ListExports] response output) that identifies the next page of exported output values that you asked to retrieve.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListExportsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
}

extension ListExportsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListExportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListExportsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListExportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exports = output.exports
            self.nextToken = output.nextToken
        } else {
            self.exports = nil
            self.nextToken = nil
        }
    }
}

public struct ListExportsOutputResponse: Swift.Equatable {
    /// The output for the [ListExports] action.
    public var exports: [CloudFormationClientTypes.Export]?
    /// If the output exceeds 100 exported output values, a string that identifies the next page of exports. If there is no additional page, this value is null.
    public var nextToken: Swift.String?

    public init (
        exports: [CloudFormationClientTypes.Export]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exports = exports
        self.nextToken = nextToken
    }
}

struct ListExportsOutputResponseBody: Swift.Equatable {
    let exports: [CloudFormationClientTypes.Export]?
    let nextToken: Swift.String?
}

extension ListExportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exports = "Exports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListExportsResult"))
        if containerValues.contains(.exports) {
            struct KeyVal0{struct member{}}
            let exportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .exports)
            if let exportsWrappedContainer = exportsWrappedContainer {
                let exportsContainer = try exportsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Export].self, forKey: .member)
                var exportsBuffer:[CloudFormationClientTypes.Export]? = nil
                if let exportsContainer = exportsContainer {
                    exportsBuffer = [CloudFormationClientTypes.Export]()
                    for structureContainer0 in exportsContainer {
                        exportsBuffer?.append(structureContainer0)
                    }
                }
                exports = exportsBuffer
            } else {
                exports = []
            }
        } else {
            exports = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListImportsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportName = exportName {
            try container.encode(exportName, forKey: ClientRuntime.Key("ExportName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListImports", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListImportsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListImportsInput: Swift.Equatable {
    /// The name of the exported output value. CloudFormation returns the stack names that are importing this value.
    /// This member is required.
    public var exportName: Swift.String?
    /// A string (provided by the [ListImports] response output) that identifies the next page of stacks that are importing the specified exported output value.
    public var nextToken: Swift.String?

    public init (
        exportName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportName = exportName
        self.nextToken = nextToken
    }
}

struct ListImportsInputBody: Swift.Equatable {
    let exportName: Swift.String?
    let nextToken: Swift.String?
}

extension ListImportsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportName = "ExportName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportName)
        exportName = exportNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListImportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListImportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListImportsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListImportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imports = output.imports
            self.nextToken = output.nextToken
        } else {
            self.imports = nil
            self.nextToken = nil
        }
    }
}

public struct ListImportsOutputResponse: Swift.Equatable {
    /// A list of stack names that are importing the specified exported output value.
    public var imports: [Swift.String]?
    /// A string that identifies the next page of exports. If there is no additional page, this value is null.
    public var nextToken: Swift.String?

    public init (
        imports: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.imports = imports
        self.nextToken = nextToken
    }
}

struct ListImportsOutputResponseBody: Swift.Equatable {
    let imports: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListImportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imports = "Imports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListImportsResult"))
        if containerValues.contains(.imports) {
            struct KeyVal0{struct member{}}
            let importsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .imports)
            if let importsWrappedContainer = importsWrappedContainer {
                let importsContainer = try importsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importsBuffer:[Swift.String]? = nil
                if let importsContainer = importsContainer {
                    importsBuffer = [Swift.String]()
                    for stringContainer0 in importsContainer {
                        importsBuffer?.append(stringContainer0)
                    }
                }
                imports = importsBuffer
            } else {
                imports = []
            }
        } else {
            imports = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStackInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, stackinstancefilter0) in filters.enumerated() {
                    try filtersContainer.encode(stackinstancefilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStackInstancesInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The filter to apply to stack instances
    public var filters: [CloudFormationClientTypes.StackInstanceFilter]?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous request didn't return all the remaining results, the response's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackInstances again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The name of the Amazon Web Services account that you want to list stack instances for.
    public var stackInstanceAccount: Swift.String?
    /// The name of the Region where you want to list stack instances.
    public var stackInstanceRegion: Swift.String?
    /// The name or unique ID of the stack set that you want to list stack instances for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        filters: [CloudFormationClientTypes.StackInstanceFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackSetName = stackSetName
    }
}

struct ListStackInstancesInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [CloudFormationClientTypes.StackInstanceFilter]?
    let stackInstanceAccount: Swift.String?
    let stackInstanceRegion: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension ListStackInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackInstanceAccount = "StackInstanceAccount"
        case stackInstanceRegion = "StackInstanceRegion"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackInstanceFilter].self, forKey: .member)
                var filtersBuffer:[CloudFormationClientTypes.StackInstanceFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [CloudFormationClientTypes.StackInstanceFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let stackInstanceAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackInstanceAccount)
        stackInstanceAccount = stackInstanceAccountDecoded
        let stackInstanceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackInstanceRegion)
        stackInstanceRegion = stackInstanceRegionDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension ListStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackInstancesOutputResponse: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListStackInstances again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackInstanceSummary structures that contain information about the specified stack instances.
    public var summaries: [CloudFormationClientTypes.StackInstanceSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackInstanceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackInstancesOutputResponseBody: Swift.Equatable {
    let summaries: [CloudFormationClientTypes.StackInstanceSummary]?
    let nextToken: Swift.String?
}

extension ListStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackInstancesResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackInstanceSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackInstanceSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackInstanceSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStackResourcesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ListStackResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [ListStackResource] action.
public struct ListStackResourcesInput: Swift.Equatable {
    /// A string that identifies the next page of stack resources that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the unique stack ID that is associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

struct ListStackResourcesInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let nextToken: Swift.String?
}

extension ListStackResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStackResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStackResourcesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStackResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackResourceSummaries = output.stackResourceSummaries
        } else {
            self.nextToken = nil
            self.stackResourceSummaries = nil
        }
    }
}

/// The output for a [ListStackResources] action.
public struct ListStackResourcesOutputResponse: Swift.Equatable {
    /// If the output exceeds 1 MB, a string that identifies the next page of stack resources. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of StackResourceSummary structures.
    public var stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]?

    public init (
        nextToken: Swift.String? = nil,
        stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackResourceSummaries = stackResourceSummaries
    }
}

struct ListStackResourcesOutputResponseBody: Swift.Equatable {
    let stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]?
    let nextToken: Swift.String?
}

extension ListStackResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackResourceSummaries = "StackResourceSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackResourcesResult"))
        if containerValues.contains(.stackResourceSummaries) {
            struct KeyVal0{struct member{}}
            let stackResourceSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResourceSummaries)
            if let stackResourceSummariesWrappedContainer = stackResourceSummariesWrappedContainer {
                let stackResourceSummariesContainer = try stackResourceSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResourceSummary].self, forKey: .member)
                var stackResourceSummariesBuffer:[CloudFormationClientTypes.StackResourceSummary]? = nil
                if let stackResourceSummariesContainer = stackResourceSummariesContainer {
                    stackResourceSummariesBuffer = [CloudFormationClientTypes.StackResourceSummary]()
                    for structureContainer0 in stackResourceSummariesContainer {
                        stackResourceSummariesBuffer?.append(structureContainer0)
                    }
                }
                stackResourceSummaries = stackResourceSummariesBuffer
            } else {
                stackResourceSummaries = []
            }
        } else {
            stackResourceSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStackSetOperationResultsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, operationresultfilter0) in filters.enumerated() {
                    try filtersContainer.encode(operationresultfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackSetOperationResults", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackSetOperationResultsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStackSetOperationResultsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The filter to apply to operation results.
    public var filters: [CloudFormationClientTypes.OperationResultFilter]?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackSetOperationResults again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The ID of the stack set operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name or unique ID of the stack set that you want to get operation results for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        filters: [CloudFormationClientTypes.OperationResultFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

struct ListStackSetOperationResultsInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let operationId: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let callAs: CloudFormationClientTypes.CallAs?
    let filters: [CloudFormationClientTypes.OperationResultFilter]?
}

extension ListStackSetOperationResultsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case operationId = "OperationId"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.OperationResultFilter].self, forKey: .member)
                var filtersBuffer:[CloudFormationClientTypes.OperationResultFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [CloudFormationClientTypes.OperationResultFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
    }
}

extension ListStackSetOperationResultsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackSetOperationResultsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotFoundException" : self = .operationNotFoundException(try OperationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStackSetOperationResultsOutputError: Swift.Error, Swift.Equatable {
    case operationNotFoundException(OperationNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackSetOperationResultsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStackSetOperationResultsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackSetOperationResultsOutputResponse: Swift.Equatable {
    /// If the request doesn't return all results, NextToken is set to a token. To retrieve the next set of results, call ListOperationResults again and assign that token to the request object's NextToken parameter. If there are no remaining results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackSetOperationResultSummary structures that contain information about the specified operation results, for accounts and Amazon Web Services Regions that are included in the operation.
    public var summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackSetOperationResultsOutputResponseBody: Swift.Equatable {
    let summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]?
    let nextToken: Swift.String?
}

extension ListStackSetOperationResultsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackSetOperationResultsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSetOperationResultSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackSetOperationResultSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackSetOperationResultSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStackSetOperationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackSetOperations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackSetOperationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStackSetOperationsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackSetOperations again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The name or unique ID of the stack set that you want to get operation summaries for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackSetName = stackSetName
    }
}

struct ListStackSetOperationsInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension ListStackSetOperationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension ListStackSetOperationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackSetOperationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStackSetOperationsOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackSetOperationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStackSetOperationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackSetOperationsOutputResponse: Swift.Equatable {
    /// If the request doesn't return all results, NextToken is set to a token. To retrieve the next set of results, call ListOperationResults again and assign that token to the request object's NextToken parameter. If there are no remaining results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackSetOperationSummary structures that contain summary information about operations for the specified stack set.
    public var summaries: [CloudFormationClientTypes.StackSetOperationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetOperationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackSetOperationsOutputResponseBody: Swift.Equatable {
    let summaries: [CloudFormationClientTypes.StackSetOperationSummary]?
    let nextToken: Swift.String?
}

extension ListStackSetOperationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackSetOperationsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSetOperationSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackSetOperationSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackSetOperationSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStackSetsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("ListStackSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStackSetsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackSets again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The status of the stack sets that you want to get summary information about.
    public var status: CloudFormationClientTypes.StackSetStatus?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CloudFormationClientTypes.StackSetStatus? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListStackSetsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let status: CloudFormationClientTypes.StackSetStatus?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension ListStackSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension ListStackSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStackSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStackSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackSetsOutputResponse: Swift.Equatable {
    /// If the request doesn't return all of the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListStackInstances again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackSetSummary structures that contain information about the user's stack sets.
    public var summaries: [CloudFormationClientTypes.StackSetSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackSetsOutputResponseBody: Swift.Equatable {
    let summaries: [CloudFormationClientTypes.StackSetSummary]?
    let nextToken: Swift.String?
}

extension ListStackSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackSetsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSetSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackSetSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackSetSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStacksInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackStatusFilter = stackStatusFilter {
            if !stackStatusFilter.isEmpty {
                var stackStatusFilterContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackStatusFilter"))
                for (index0, stackstatus0) in stackStatusFilter.enumerated() {
                    try stackStatusFilterContainer.encode(stackstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackStatusFilterContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackStatusFilter"))
                try stackStatusFilterContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ListStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStacksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [ListStacks] action.
public struct ListStacksInput: Swift.Equatable {
    /// A string that identifies the next page of stacks that you want to retrieve.
    public var nextToken: Swift.String?
    /// Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the StackStatus parameter of the [Stack] data type.
    public var stackStatusFilter: [CloudFormationClientTypes.StackStatus]?

    public init (
        nextToken: Swift.String? = nil,
        stackStatusFilter: [CloudFormationClientTypes.StackStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackStatusFilter = stackStatusFilter
    }
}

struct ListStacksInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let stackStatusFilter: [CloudFormationClientTypes.StackStatus]?
}

extension ListStacksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackStatusFilter = "StackStatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.stackStatusFilter) {
            struct KeyVal0{struct member{}}
            let stackStatusFilterWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackStatusFilter)
            if let stackStatusFilterWrappedContainer = stackStatusFilterWrappedContainer {
                let stackStatusFilterContainer = try stackStatusFilterWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackStatus].self, forKey: .member)
                var stackStatusFilterBuffer:[CloudFormationClientTypes.StackStatus]? = nil
                if let stackStatusFilterContainer = stackStatusFilterContainer {
                    stackStatusFilterBuffer = [CloudFormationClientTypes.StackStatus]()
                    for enumContainer0 in stackStatusFilterContainer {
                        stackStatusFilterBuffer?.append(enumContainer0)
                    }
                }
                stackStatusFilter = stackStatusFilterBuffer
            } else {
                stackStatusFilter = []
            }
        } else {
            stackStatusFilter = nil
        }
    }
}

extension ListStacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStacksOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackSummaries = output.stackSummaries
        } else {
            self.nextToken = nil
            self.stackSummaries = nil
        }
    }
}

/// The output for [ListStacks] action.
public struct ListStacksOutputResponse: Swift.Equatable {
    /// If the output exceeds 1 MB in size, a string that identifies the next page of stacks. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of StackSummary structures containing information about the specified stacks.
    public var stackSummaries: [CloudFormationClientTypes.StackSummary]?

    public init (
        nextToken: Swift.String? = nil,
        stackSummaries: [CloudFormationClientTypes.StackSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackSummaries = stackSummaries
    }
}

struct ListStacksOutputResponseBody: Swift.Equatable {
    let stackSummaries: [CloudFormationClientTypes.StackSummary]?
    let nextToken: Swift.String?
}

extension ListStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackSummaries = "StackSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStacksResult"))
        if containerValues.contains(.stackSummaries) {
            struct KeyVal0{struct member{}}
            let stackSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackSummaries)
            if let stackSummariesWrappedContainer = stackSummariesWrappedContainer {
                let stackSummariesContainer = try stackSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSummary].self, forKey: .member)
                var stackSummariesBuffer:[CloudFormationClientTypes.StackSummary]? = nil
                if let stackSummariesContainer = stackSummariesContainer {
                    stackSummariesBuffer = [CloudFormationClientTypes.StackSummary]()
                    for structureContainer0 in stackSummariesContainer {
                        stackSummariesBuffer?.append(structureContainer0)
                    }
                }
                stackSummaries = stackSummariesBuffer
            } else {
                stackSummaries = []
            }
        } else {
            stackSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTypeRegistrationsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let registrationStatusFilter = registrationStatusFilter {
            try container.encode(registrationStatusFilter, forKey: ClientRuntime.Key("RegistrationStatusFilter"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("ListTypeRegistrations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTypeRegistrationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTypeRegistrationsInput: Swift.Equatable {
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The current status of the extension registration request. The default is IN_PROGRESS.
    public var registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeArn: Swift.String?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeArn: Swift.String? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.registrationStatusFilter = registrationStatusFilter
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}

struct ListTypeRegistrationsInputBody: Swift.Equatable {
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let typeArn: Swift.String?
    let registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTypeRegistrationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case registrationStatusFilter = "RegistrationStatusFilter"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let registrationStatusFilterDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistrationStatus.self, forKey: .registrationStatusFilter)
        registrationStatusFilter = registrationStatusFilterDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTypeRegistrationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTypeRegistrationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTypeRegistrationsOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTypeRegistrationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTypeRegistrationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.registrationTokenList = output.registrationTokenList
        } else {
            self.nextToken = nil
            self.registrationTokenList = nil
        }
    }
}

public struct ListTypeRegistrationsOutputResponse: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of extension registration tokens. Use [DescribeTypeRegistration] to return detailed information about a type registration request.
    public var registrationTokenList: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        registrationTokenList: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.registrationTokenList = registrationTokenList
    }
}

struct ListTypeRegistrationsOutputResponseBody: Swift.Equatable {
    let registrationTokenList: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListTypeRegistrationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case registrationTokenList = "RegistrationTokenList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypeRegistrationsResult"))
        if containerValues.contains(.registrationTokenList) {
            struct KeyVal0{struct member{}}
            let registrationTokenListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .registrationTokenList)
            if let registrationTokenListWrappedContainer = registrationTokenListWrappedContainer {
                let registrationTokenListContainer = try registrationTokenListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var registrationTokenListBuffer:[Swift.String]? = nil
                if let registrationTokenListContainer = registrationTokenListContainer {
                    registrationTokenListBuffer = [Swift.String]()
                    for stringContainer0 in registrationTokenListContainer {
                        registrationTokenListBuffer?.append(stringContainer0)
                    }
                }
                registrationTokenList = registrationTokenListBuffer
            } else {
                registrationTokenList = []
            }
        } else {
            registrationTokenList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTypeVersionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let deprecatedStatus = deprecatedStatus {
            try container.encode(deprecatedStatus, forKey: ClientRuntime.Key("DeprecatedStatus"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("ListTypeVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTypeVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTypeVersionsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension for which you want version summary information. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The deprecation status of the extension versions that you want to get summary information about. Valid values include:
    ///
    /// * LIVE: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.
    ///
    /// * DEPRECATED: The extension version has been deregistered and can no longer be used in CloudFormation operations.
    ///
    ///
    /// The default is LIVE.
    public var deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The publisher ID of the extension publisher. Extensions published by Amazon aren't assigned a publisher ID.
    public var publisherId: Swift.String?
    /// The kind of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension for which you want version summary information. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?

    public init (
        arn: Swift.String? = nil,
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.deprecatedStatus = deprecatedStatus
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
    }
}

struct ListTypeVersionsInputBody: Swift.Equatable {
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let arn: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    let publisherId: Swift.String?
}

extension ListTypeVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case deprecatedStatus = "DeprecatedStatus"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case publisherId = "PublisherId"
        case type = "Type"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let deprecatedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeprecatedStatus.self, forKey: .deprecatedStatus)
        deprecatedStatus = deprecatedStatusDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
    }
}

extension ListTypeVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTypeVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTypeVersionsOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTypeVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTypeVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.typeVersionSummaries = output.typeVersionSummaries
        } else {
            self.nextToken = nil
            self.typeVersionSummaries = nil
        }
    }
}

public struct ListTypeVersionsOutputResponse: Swift.Equatable {
    /// If the request doesn't return all of the remaining results, NextToken is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of TypeVersionSummary structures that contain information about the specified extension's versions.
    public var typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]?

    public init (
        nextToken: Swift.String? = nil,
        typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.typeVersionSummaries = typeVersionSummaries
    }
}

struct ListTypeVersionsOutputResponseBody: Swift.Equatable {
    let typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]?
    let nextToken: Swift.String?
}

extension ListTypeVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case typeVersionSummaries = "TypeVersionSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypeVersionsResult"))
        if containerValues.contains(.typeVersionSummaries) {
            struct KeyVal0{struct member{}}
            let typeVersionSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeVersionSummaries)
            if let typeVersionSummariesWrappedContainer = typeVersionSummariesWrappedContainer {
                let typeVersionSummariesContainer = try typeVersionSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeVersionSummary].self, forKey: .member)
                var typeVersionSummariesBuffer:[CloudFormationClientTypes.TypeVersionSummary]? = nil
                if let typeVersionSummariesContainer = typeVersionSummariesContainer {
                    typeVersionSummariesBuffer = [CloudFormationClientTypes.TypeVersionSummary]()
                    for structureContainer0 in typeVersionSummariesContainer {
                        typeVersionSummariesBuffer?.append(structureContainer0)
                    }
                }
                typeVersionSummaries = typeVersionSummariesBuffer
            } else {
                typeVersionSummaries = []
            }
        } else {
            typeVersionSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTypesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deprecatedStatus = deprecatedStatus {
            try container.encode(deprecatedStatus, forKey: ClientRuntime.Key("DeprecatedStatus"))
        }
        if let filters = filters {
            try container.encode(filters, forKey: ClientRuntime.Key("Filters"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let provisioningType = provisioningType {
            try container.encode(provisioningType, forKey: ClientRuntime.Key("ProvisioningType"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let visibility = visibility {
            try container.encode(visibility, forKey: ClientRuntime.Key("Visibility"))
        }
        try container.encode("ListTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTypesInput: Swift.Equatable {
    /// The deprecation status of the extension that you want to get summary information about. Valid values include:
    ///
    /// * LIVE: The extension is registered for use in CloudFormation operations.
    ///
    /// * DEPRECATED: The extension has been deregistered and can no longer be used in CloudFormation operations.
    public var deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// Filter criteria to use in determining which extensions to return. Filters must be compatible with Visibility to return valid results. For example, specifying AWS_TYPES for Category and PRIVATE for Visibility returns an empty list of types, but specifying PUBLIC for Visibility returns the desired list.
    public var filters: CloudFormationClientTypes.TypeFilters?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted. Valid values include:
    ///
    /// * FULLY_MUTABLE: The resource type includes an update handler to process updates to the type during stack update operations.
    ///
    /// * IMMUTABLE: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.
    ///
    /// * NON_PROVISIONABLE: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.
    ///
    ///
    /// The default is FULLY_MUTABLE.
    public var provisioningType: CloudFormationClientTypes.ProvisioningType?
    /// The type of extension.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The scope at which the extensions are visible and usable in CloudFormation operations. Valid values include:
    ///
    /// * PRIVATE: Extensions that are visible and usable within this account and region. This includes:
    ///
    /// * Private extensions you have registered in this account and region.
    ///
    /// * Public extensions that you have activated in this account and region.
    ///
    ///
    ///
    ///
    /// * PUBLIC: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.
    ///
    ///
    /// The default is PRIVATE.
    public var visibility: CloudFormationClientTypes.Visibility?

    public init (
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        filters: CloudFormationClientTypes.TypeFilters? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        provisioningType: CloudFormationClientTypes.ProvisioningType? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        visibility: CloudFormationClientTypes.Visibility? = nil
    )
    {
        self.deprecatedStatus = deprecatedStatus
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.provisioningType = provisioningType
        self.type = type
        self.visibility = visibility
    }
}

struct ListTypesInputBody: Swift.Equatable {
    let visibility: CloudFormationClientTypes.Visibility?
    let provisioningType: CloudFormationClientTypes.ProvisioningType?
    let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    let type: CloudFormationClientTypes.RegistryType?
    let filters: CloudFormationClientTypes.TypeFilters?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTypesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deprecatedStatus = "DeprecatedStatus"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case provisioningType = "ProvisioningType"
        case type = "Type"
        case visibility = "Visibility"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let visibilityDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Visibility.self, forKey: .visibility)
        visibility = visibilityDecoded
        let provisioningTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ProvisioningType.self, forKey: .provisioningType)
        provisioningType = provisioningTypeDecoded
        let deprecatedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeprecatedStatus.self, forKey: .deprecatedStatus)
        deprecatedStatus = deprecatedStatusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.TypeFilters.self, forKey: .filters)
        filters = filtersDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTypesOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.typeSummaries = output.typeSummaries
        } else {
            self.nextToken = nil
            self.typeSummaries = nil
        }
    }
}

public struct ListTypesOutputResponse: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of TypeSummary structures that contain information about the specified extensions.
    public var typeSummaries: [CloudFormationClientTypes.TypeSummary]?

    public init (
        nextToken: Swift.String? = nil,
        typeSummaries: [CloudFormationClientTypes.TypeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.typeSummaries = typeSummaries
    }
}

struct ListTypesOutputResponseBody: Swift.Equatable {
    let typeSummaries: [CloudFormationClientTypes.TypeSummary]?
    let nextToken: Swift.String?
}

extension ListTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case typeSummaries = "TypeSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypesResult"))
        if containerValues.contains(.typeSummaries) {
            struct KeyVal0{struct member{}}
            let typeSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeSummaries)
            if let typeSummariesWrappedContainer = typeSummariesWrappedContainer {
                let typeSummariesContainer = try typeSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeSummary].self, forKey: .member)
                var typeSummariesBuffer:[CloudFormationClientTypes.TypeSummary]? = nil
                if let typeSummariesContainer = typeSummariesContainer {
                    typeSummariesBuffer = [CloudFormationClientTypes.TypeSummary]()
                    for structureContainer0 in typeSummariesContainer {
                        typeSummariesBuffer?.append(structureContainer0)
                    }
                }
                typeSummaries = typeSummariesBuffer
            } else {
                typeSummaries = []
            }
        } else {
            typeSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CloudFormationClientTypes.LoggingConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName = "LogGroupName"
        case logRoleArn = "LogRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logGroupName = logGroupName {
            try container.encode(logGroupName, forKey: ClientRuntime.Key("LogGroupName"))
        }
        if let logRoleArn = logRoleArn {
            try container.encode(logRoleArn, forKey: ClientRuntime.Key("LogRoleArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logRoleArn)
        logRoleArn = logRoleArnDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains logging configuration information for an extension.
    public struct LoggingConfig: Swift.Equatable {
        /// The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.
        /// This member is required.
        public var logGroupName: Swift.String?
        /// The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.
        /// This member is required.
        public var logRoleArn: Swift.String?

        public init (
            logGroupName: Swift.String? = nil,
            logRoleArn: Swift.String? = nil
        )
        {
            self.logGroupName = logGroupName
            self.logRoleArn = logRoleArn
        }
    }

}

extension CloudFormationClientTypes.ManagedExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let active = active {
            try container.encode(active, forKey: ClientRuntime.Key("Active"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
    }
}

extension CloudFormationClientTypes {
    /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
    public struct ManagedExecution: Swift.Equatable {
        /// When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting. You can't modify your stack set's execution configuration while there are running or queued operations for that stack set. When false (default), StackSets performs one operation at a time in request order.
        public var active: Swift.Bool?

        public init (
            active: Swift.Bool? = nil
        )
        {
            self.active = active
        }
    }

}

extension CloudFormationClientTypes.ModuleInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalIdHierarchy = "LogicalIdHierarchy"
        case typeHierarchy = "TypeHierarchy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalIdHierarchy = logicalIdHierarchy {
            try container.encode(logicalIdHierarchy, forKey: ClientRuntime.Key("LogicalIdHierarchy"))
        }
        if let typeHierarchy = typeHierarchy {
            try container.encode(typeHierarchy, forKey: ClientRuntime.Key("TypeHierarchy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeHierarchyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeHierarchy)
        typeHierarchy = typeHierarchyDecoded
        let logicalIdHierarchyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalIdHierarchy)
        logicalIdHierarchy = logicalIdHierarchyDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template. For more information about modules, see [Using modules to encapsulate and reuse resource configurations] in the CloudFormation User Guide.
    public struct ModuleInfo: Swift.Equatable {
        /// A concatenated list of the logical IDs of the module or modules containing the resource. Modules are listed starting with the inner-most nested module, and separated by /. In the following example, the resource was created from a module, moduleA, that's nested inside a parent module, moduleB. moduleA/moduleB For more information, see [Referencing resources in a module] in the CloudFormation User Guide.
        public var logicalIdHierarchy: Swift.String?
        /// A concatenated list of the module type or types containing the resource. Module types are listed starting with the inner-most nested module, and separated by /. In the following example, the resource was created from a module of type AWS::First::Example::MODULE, that's nested inside a parent module of type AWS::Second::Example::MODULE. AWS::First::Example::MODULE/AWS::Second::Example::MODULE
        public var typeHierarchy: Swift.String?

        public init (
            logicalIdHierarchy: Swift.String? = nil,
            typeHierarchy: Swift.String? = nil
        )
        {
            self.logicalIdHierarchy = logicalIdHierarchy
            self.typeHierarchy = typeHierarchy
        }
    }

}

extension NameAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<NameAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified name is already in use.
public struct NameAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NameAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NameAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum OnFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case doNothing
        case rollback
        case sdkUnknown(Swift.String)

        public static var allCases: [OnFailure] {
            return [
                .delete,
                .doNothing,
                .rollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .doNothing: return "DO_NOTHING"
            case .rollback: return "ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnFailure(rawValue: rawValue) ?? OnFailure.sdkUnknown(rawValue)
        }
    }
}

extension OperationIdAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<OperationIdAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified operation ID already exists.
public struct OperationIdAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationIdAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationIdAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OperationInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<OperationInProgressExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Another operation is currently in progress for this stack set. Only one operation can be performed for a stack set at a given time.
public struct OperationInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationInProgressExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OperationNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<OperationNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified ID refers to an operation that doesn't exist.
public struct OperationNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.OperationResultFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            try container.encode(values, forKey: ClientRuntime.Key("Values"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.OperationResultFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .values)
        values = valuesDecoded
    }
}

extension CloudFormationClientTypes {
    /// The status that operation results are filtered by.
    public struct OperationResultFilter: Swift.Equatable {
        /// The type of filter to apply.
        public var name: CloudFormationClientTypes.OperationResultFilterName?
        /// The value to filter by.
        public var values: Swift.String?

        public init (
            name: CloudFormationClientTypes.OperationResultFilterName? = nil,
            values: Swift.String? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension CloudFormationClientTypes {
    public enum OperationResultFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationResultStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationResultFilterName] {
            return [
                .operationResultStatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationResultStatus: return "OPERATION_RESULT_STATUS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationResultFilterName(rawValue: rawValue) ?? OperationResultFilterName.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum OperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationStatus(rawValue: rawValue) ?? OperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension OperationStatusCheckFailedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<OperationStatusCheckFailedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Error reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html). CloudFormation doesn't return this error to users.
public struct OperationStatusCheckFailedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationStatusCheckFailedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationStatusCheckFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.Output: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case exportName = "ExportName"
        case outputKey = "OutputKey"
        case outputValue = "OutputValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let exportName = exportName {
            try container.encode(exportName, forKey: ClientRuntime.Key("ExportName"))
        }
        if let outputKey = outputKey {
            try container.encode(outputKey, forKey: ClientRuntime.Key("OutputKey"))
        }
        if let outputValue = outputValue {
            try container.encode(outputValue, forKey: ClientRuntime.Key("OutputValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputValue)
        outputValue = outputValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let exportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportName)
        exportName = exportNameDecoded
    }
}

extension CloudFormationClientTypes {
    /// The Output data type.
    public struct Output: Swift.Equatable {
        /// User defined description associated with the output.
        public var description: Swift.String?
        /// The name of the export associated with the output.
        public var exportName: Swift.String?
        /// The key associated with the output.
        public var outputKey: Swift.String?
        /// The value associated with the output.
        public var outputValue: Swift.String?

        public init (
            description: Swift.String? = nil,
            exportName: Swift.String? = nil,
            outputKey: Swift.String? = nil,
            outputValue: Swift.String? = nil
        )
        {
            self.description = description
            self.exportName = exportName
            self.outputKey = outputKey
            self.outputValue = outputValue
        }
    }

}

extension CloudFormationClientTypes.Parameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterKey = "ParameterKey"
        case parameterValue = "ParameterValue"
        case resolvedValue = "ResolvedValue"
        case usePreviousValue = "UsePreviousValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let resolvedValue = resolvedValue {
            try container.encode(resolvedValue, forKey: ClientRuntime.Key("ResolvedValue"))
        }
        if let usePreviousValue = usePreviousValue {
            try container.encode(usePreviousValue, forKey: ClientRuntime.Key("UsePreviousValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterKey)
        parameterKey = parameterKeyDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
        let usePreviousValueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .usePreviousValue)
        usePreviousValue = usePreviousValueDecoded
        let resolvedValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolvedValue)
        resolvedValue = resolvedValueDecoded
    }
}

extension CloudFormationClientTypes {
    /// The Parameter data type.
    public struct Parameter: Swift.Equatable {
        /// The key associated with the parameter. If you don't specify a key and value for a particular parameter, CloudFormation uses the default value that's specified in your template.
        public var parameterKey: Swift.String?
        /// The input value associated with the parameter.
        public var parameterValue: Swift.String?
        /// Read-only. The value that corresponds to a SSM parameter key. This field is returned only for [SSM](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-ssm-parameter-types) parameter types in the template.
        public var resolvedValue: Swift.String?
        /// During a stack update, use the existing parameter value that the stack is using for a given parameter key. If you specify true, do not specify a parameter value.
        public var usePreviousValue: Swift.Bool?

        public init (
            parameterKey: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            resolvedValue: Swift.String? = nil,
            usePreviousValue: Swift.Bool? = nil
        )
        {
            self.parameterKey = parameterKey
            self.parameterValue = parameterValue
            self.resolvedValue = resolvedValue
            self.usePreviousValue = usePreviousValue
        }
    }

}

extension CloudFormationClientTypes.ParameterConstraints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            if !allowedValues.isEmpty {
                var allowedValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedValues"))
                for (index0, allowedvalue0) in allowedValues.enumerated() {
                    try allowedValuesContainer.encode(allowedvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var allowedValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedValues"))
                try allowedValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.allowedValues) {
            struct KeyVal0{struct member{}}
            let allowedValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .allowedValues)
            if let allowedValuesWrappedContainer = allowedValuesWrappedContainer {
                let allowedValuesContainer = try allowedValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allowedValuesBuffer:[Swift.String]? = nil
                if let allowedValuesContainer = allowedValuesContainer {
                    allowedValuesBuffer = [Swift.String]()
                    for stringContainer0 in allowedValuesContainer {
                        allowedValuesBuffer?.append(stringContainer0)
                    }
                }
                allowedValues = allowedValuesBuffer
            } else {
                allowedValues = []
            }
        } else {
            allowedValues = nil
        }
    }
}

extension CloudFormationClientTypes {
    /// A set of criteria that CloudFormation uses to validate parameter values. Although other constraints might be defined in the stack template, CloudFormation returns only the AllowedValues property.
    public struct ParameterConstraints: Swift.Equatable {
        /// A list of values that are permitted for a parameter.
        public var allowedValues: [Swift.String]?

        public init (
            allowedValues: [Swift.String]? = nil
        )
        {
            self.allowedValues = allowedValues
        }
    }

}

extension CloudFormationClientTypes.ParameterDeclaration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case noEcho = "NoEcho"
        case parameterConstraints = "ParameterConstraints"
        case parameterKey = "ParameterKey"
        case parameterType = "ParameterType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let noEcho = noEcho {
            try container.encode(noEcho, forKey: ClientRuntime.Key("NoEcho"))
        }
        if let parameterConstraints = parameterConstraints {
            try container.encode(parameterConstraints, forKey: ClientRuntime.Key("ParameterConstraints"))
        }
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
        if let parameterType = parameterType {
            try container.encode(parameterType, forKey: ClientRuntime.Key("ParameterType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterKey)
        parameterKey = parameterKeyDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let parameterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterType)
        parameterType = parameterTypeDecoded
        let noEchoDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noEcho)
        noEcho = noEchoDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parameterConstraintsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ParameterConstraints.self, forKey: .parameterConstraints)
        parameterConstraints = parameterConstraintsDecoded
    }
}

extension CloudFormationClientTypes {
    /// The ParameterDeclaration data type.
    public struct ParameterDeclaration: Swift.Equatable {
        /// The default value of the parameter.
        public var defaultValue: Swift.String?
        /// The description that's associate with the parameter.
        public var description: Swift.String?
        /// Flag that indicates whether the parameter value is shown as plain text in logs and in the Amazon Web Services Management Console.
        public var noEcho: Swift.Bool?
        /// The criteria that CloudFormation uses to validate parameter values.
        public var parameterConstraints: CloudFormationClientTypes.ParameterConstraints?
        /// The name that's associated with the parameter.
        public var parameterKey: Swift.String?
        /// The type of parameter.
        public var parameterType: Swift.String?

        public init (
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            noEcho: Swift.Bool? = nil,
            parameterConstraints: CloudFormationClientTypes.ParameterConstraints? = nil,
            parameterKey: Swift.String? = nil,
            parameterType: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.noEcho = noEcho
            self.parameterConstraints = parameterConstraints
            self.parameterKey = parameterKey
            self.parameterType = parameterType
        }
    }

}

extension CloudFormationClientTypes {
    public enum PermissionModels: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case selfManaged
        case serviceManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionModels] {
            return [
                .selfManaged,
                .serviceManaged,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .selfManaged: return "SELF_MANAGED"
            case .serviceManaged: return "SERVICE_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PermissionModels(rawValue: rawValue) ?? PermissionModels.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes {
    /// Context information that enables CloudFormation to uniquely identify a resource. CloudFormation uses context key-value pairs in cases where a resource's logical and physical IDs aren't enough to uniquely identify that resource. Each context key-value pair specifies a resource that contains the targeted resource.
    public struct PhysicalResourceIdContextKeyValuePair: Swift.Equatable {
        /// The resource context key.
        /// This member is required.
        public var key: Swift.String?
        /// The resource context value.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFormationClientTypes.PropertyDifference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualValue = "ActualValue"
        case differenceType = "DifferenceType"
        case expectedValue = "ExpectedValue"
        case propertyPath = "PropertyPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualValue = actualValue {
            try container.encode(actualValue, forKey: ClientRuntime.Key("ActualValue"))
        }
        if let differenceType = differenceType {
            try container.encode(differenceType, forKey: ClientRuntime.Key("DifferenceType"))
        }
        if let expectedValue = expectedValue {
            try container.encode(expectedValue, forKey: ClientRuntime.Key("ExpectedValue"))
        }
        if let propertyPath = propertyPath {
            try container.encode(propertyPath, forKey: ClientRuntime.Key("PropertyPath"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyPath)
        propertyPath = propertyPathDecoded
        let expectedValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedValue)
        expectedValue = expectedValueDecoded
        let actualValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actualValue)
        actualValue = actualValueDecoded
        let differenceTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DifferenceType.self, forKey: .differenceType)
        differenceType = differenceTypeDecoded
    }
}

extension CloudFormationClientTypes {
    /// Information about a resource property whose actual value differs from its expected value, as defined in the stack template and any values specified as template parameters. These will be present only for resources whose StackResourceDriftStatus is MODIFIED. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
    public struct PropertyDifference: Swift.Equatable {
        /// The actual property value of the resource property.
        /// This member is required.
        public var actualValue: Swift.String?
        /// The type of property difference.
        ///
        /// * ADD: A value has been added to a resource property that's an array or list data type.
        ///
        /// * REMOVE: The property has been removed from the current resource configuration.
        ///
        /// * NOT_EQUAL: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).
        /// This member is required.
        public var differenceType: CloudFormationClientTypes.DifferenceType?
        /// The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.
        /// This member is required.
        public var expectedValue: Swift.String?
        /// The fully-qualified path to the resource property.
        /// This member is required.
        public var propertyPath: Swift.String?

        public init (
            actualValue: Swift.String? = nil,
            differenceType: CloudFormationClientTypes.DifferenceType? = nil,
            expectedValue: Swift.String? = nil,
            propertyPath: Swift.String? = nil
        )
        {
            self.actualValue = actualValue
            self.differenceType = differenceType
            self.expectedValue = expectedValue
            self.propertyPath = propertyPath
        }
    }

}

extension CloudFormationClientTypes {
    public enum ProvisioningType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullyMutable
        case immutable
        case nonProvisionable
        case sdkUnknown(Swift.String)

        public static var allCases: [ProvisioningType] {
            return [
                .fullyMutable,
                .immutable,
                .nonProvisionable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullyMutable: return "FULLY_MUTABLE"
            case .immutable: return "IMMUTABLE"
            case .nonProvisionable: return "NON_PROVISIONABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProvisioningType(rawValue: rawValue) ?? ProvisioningType.sdkUnknown(rawValue)
        }
    }
}

extension PublishTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("PublishType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension PublishTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PublishTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var arn: Swift.String?
    /// The version number to assign to this version of the extension. Use the following format, and adhere to semantic versioning when assigning a version number to your extension: MAJOR.MINOR.PATCH For more information, see [Semantic Versioning 2.0.0](https://semver.org/). If you don't specify a version number, CloudFormation increments the version number by one minor version release. You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be 1.0.0.
    public var publicVersionNumber: Swift.String?
    /// The type of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var typeName: Swift.String?

    public init (
        arn: Swift.String? = nil,
        publicVersionNumber: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.publicVersionNumber = publicVersionNumber
        self.type = type
        self.typeName = typeName
    }
}

struct PublishTypeInputBody: Swift.Equatable {
    let type: CloudFormationClientTypes.ThirdPartyType?
    let arn: Swift.String?
    let typeName: Swift.String?
    let publicVersionNumber: Swift.String?
}

extension PublishTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case publicVersionNumber = "PublicVersionNumber"
        case type = "Type"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
    }
}

extension PublishTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PublishTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PublishTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PublishTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PublishTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.publicTypeArn = output.publicTypeArn
        } else {
            self.publicTypeArn = nil
        }
    }
}

public struct PublishTypeOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) assigned to the public extension upon publication.
    public var publicTypeArn: Swift.String?

    public init (
        publicTypeArn: Swift.String? = nil
    )
    {
        self.publicTypeArn = publicTypeArn
    }
}

struct PublishTypeOutputResponseBody: Swift.Equatable {
    let publicTypeArn: Swift.String?
}

extension PublishTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publicTypeArn = "PublicTypeArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PublishTypeResult"))
        let publicTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicTypeArn)
        publicTypeArn = publicTypeArnDecoded
    }
}

extension CloudFormationClientTypes {
    public enum PublisherStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case unverified
        case verified
        case sdkUnknown(Swift.String)

        public static var allCases: [PublisherStatus] {
            return [
                .unverified,
                .verified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .unverified: return "UNVERIFIED"
            case .verified: return "VERIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PublisherStatus(rawValue: rawValue) ?? PublisherStatus.sdkUnknown(rawValue)
        }
    }
}

extension RecordHandlerProgressInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bearerToken = bearerToken {
            try container.encode(bearerToken, forKey: ClientRuntime.Key("BearerToken"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let currentOperationStatus = currentOperationStatus {
            try container.encode(currentOperationStatus, forKey: ClientRuntime.Key("CurrentOperationStatus"))
        }
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let operationStatus = operationStatus {
            try container.encode(operationStatus, forKey: ClientRuntime.Key("OperationStatus"))
        }
        if let resourceModel = resourceModel {
            try container.encode(resourceModel, forKey: ClientRuntime.Key("ResourceModel"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        try container.encode("RecordHandlerProgress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RecordHandlerProgressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RecordHandlerProgressInput: Swift.Equatable {
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    /// This member is required.
    public var bearerToken: Swift.String?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var clientRequestToken: Swift.String?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var currentOperationStatus: CloudFormationClientTypes.OperationStatus?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var errorCode: CloudFormationClientTypes.HandlerErrorCode?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    /// This member is required.
    public var operationStatus: CloudFormationClientTypes.OperationStatus?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var resourceModel: Swift.String?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var statusMessage: Swift.String?

    public init (
        bearerToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        currentOperationStatus: CloudFormationClientTypes.OperationStatus? = nil,
        errorCode: CloudFormationClientTypes.HandlerErrorCode? = nil,
        operationStatus: CloudFormationClientTypes.OperationStatus? = nil,
        resourceModel: Swift.String? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.bearerToken = bearerToken
        self.clientRequestToken = clientRequestToken
        self.currentOperationStatus = currentOperationStatus
        self.errorCode = errorCode
        self.operationStatus = operationStatus
        self.resourceModel = resourceModel
        self.statusMessage = statusMessage
    }
}

struct RecordHandlerProgressInputBody: Swift.Equatable {
    let bearerToken: Swift.String?
    let operationStatus: CloudFormationClientTypes.OperationStatus?
    let currentOperationStatus: CloudFormationClientTypes.OperationStatus?
    let statusMessage: Swift.String?
    let errorCode: CloudFormationClientTypes.HandlerErrorCode?
    let resourceModel: Swift.String?
    let clientRequestToken: Swift.String?
}

extension RecordHandlerProgressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bearerToken = "BearerToken"
        case clientRequestToken = "ClientRequestToken"
        case currentOperationStatus = "CurrentOperationStatus"
        case errorCode = "ErrorCode"
        case operationStatus = "OperationStatus"
        case resourceModel = "ResourceModel"
        case statusMessage = "StatusMessage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bearerTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bearerToken)
        bearerToken = bearerTokenDecoded
        let operationStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.OperationStatus.self, forKey: .operationStatus)
        operationStatus = operationStatusDecoded
        let currentOperationStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.OperationStatus.self, forKey: .currentOperationStatus)
        currentOperationStatus = currentOperationStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HandlerErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let resourceModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceModel)
        resourceModel = resourceModelDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension RecordHandlerProgressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RecordHandlerProgressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidStateTransition" : self = .invalidStateTransitionException(try InvalidStateTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConditionalCheckFailed" : self = .operationStatusCheckFailedException(try OperationStatusCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RecordHandlerProgressOutputError: Swift.Error, Swift.Equatable {
    case invalidStateTransitionException(InvalidStateTransitionException)
    case operationStatusCheckFailedException(OperationStatusCheckFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordHandlerProgressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RecordHandlerProgressOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudFormationClientTypes {
    public enum RegionConcurrencyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case parallel
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionConcurrencyType] {
            return [
                .parallel,
                .sequential,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .parallel: return "PARALLEL"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegionConcurrencyType(rawValue: rawValue) ?? RegionConcurrencyType.sdkUnknown(rawValue)
        }
    }
}

extension RegisterPublisherInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let acceptTermsAndConditions = acceptTermsAndConditions {
            try container.encode(acceptTermsAndConditions, forKey: ClientRuntime.Key("AcceptTermsAndConditions"))
        }
        if let connectionArn = connectionArn {
            try container.encode(connectionArn, forKey: ClientRuntime.Key("ConnectionArn"))
        }
        try container.encode("RegisterPublisher", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RegisterPublisherInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterPublisherInput: Swift.Equatable {
    /// Whether you accept the [Terms and Conditions](https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf) for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to register to publish public extensions to the CloudFormation registry. The default is false.
    public var acceptTermsAndConditions: Swift.Bool?
    /// If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account. For more information, see [Registering your account to publish CloudFormation extensions](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs) in the CloudFormation CLI User Guide.
    public var connectionArn: Swift.String?

    public init (
        acceptTermsAndConditions: Swift.Bool? = nil,
        connectionArn: Swift.String? = nil
    )
    {
        self.acceptTermsAndConditions = acceptTermsAndConditions
        self.connectionArn = connectionArn
    }
}

struct RegisterPublisherInputBody: Swift.Equatable {
    let acceptTermsAndConditions: Swift.Bool?
    let connectionArn: Swift.String?
}

extension RegisterPublisherInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptTermsAndConditions = "AcceptTermsAndConditions"
        case connectionArn = "ConnectionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptTermsAndConditionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptTermsAndConditions)
        acceptTermsAndConditions = acceptTermsAndConditionsDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
    }
}

extension RegisterPublisherOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RegisterPublisherOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterPublisherOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterPublisherOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterPublisherOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.publisherId = output.publisherId
        } else {
            self.publisherId = nil
        }
    }
}

public struct RegisterPublisherOutputResponse: Swift.Equatable {
    /// The ID assigned this account by CloudFormation for publishing extensions.
    public var publisherId: Swift.String?

    public init (
        publisherId: Swift.String? = nil
    )
    {
        self.publisherId = publisherId
    }
}

struct RegisterPublisherOutputResponseBody: Swift.Equatable {
    let publisherId: Swift.String?
}

extension RegisterPublisherOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publisherId = "PublisherId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RegisterPublisherResult"))
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
    }
}

extension RegisterTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let executionRoleArn = executionRoleArn {
            try container.encode(executionRoleArn, forKey: ClientRuntime.Key("ExecutionRoleArn"))
        }
        if let loggingConfig = loggingConfig {
            try container.encode(loggingConfig, forKey: ClientRuntime.Key("LoggingConfig"))
        }
        if let schemaHandlerPackage = schemaHandlerPackage {
            try container.encode(schemaHandlerPackage, forKey: ClientRuntime.Key("SchemaHandlerPackage"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("RegisterType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RegisterTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterTypeInput: Swift.Equatable {
    /// A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registration request, even if the request is submitted multiple times.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension. For CloudFormation to assume the specified execution role, the role must contain a trust relationship with the CloudFormation service principle (resources.cloudformation.amazonaws.com). For more information about adding trust relationships, see [Modifying a role trust policy] in the Identity and Access Management User Guide. If your extension calls Amazon Web Services APIs in any of its handlers, you must create an [IAM execution role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. When CloudFormation needs to invoke the resource type handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the resource type handler, thereby supplying your resource type with the appropriate credentials.
    public var executionRoleArn: Swift.String?
    /// Specifies logging configuration information for an extension.
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// A URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. For information about generating a schema handler package for the extension you want to register, see [submit](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html) in the CloudFormation CLI User Guide. The user registering the extension must be able to access the package in the S3 bucket. That's, the user needs to have [GetObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html) permissions for the schema handler package. For more information, see [Actions, Resources, and Condition Keys for Amazon S3](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html) in the Identity and Access Management User Guide.
    /// This member is required.
    public var schemaHandlerPackage: Swift.String?
    /// The kind of extension.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension being registered. We suggest that extension names adhere to the following patterns:
    ///
    /// * For resource types, company_or_organization::service::type.
    ///
    /// * For modules, company_or_organization::service::type::MODULE.
    ///
    /// * For hooks, MyCompany::Testing::MyTestHook.
    ///
    ///
    /// The following organization namespaces are reserved and can't be used in your extension names:
    ///
    /// * Alexa
    ///
    /// * AMZN
    ///
    /// * Amazon
    ///
    /// * AWS
    ///
    /// * Custom
    ///
    /// * Dev
    /// This member is required.
    public var typeName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        schemaHandlerPackage: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.schemaHandlerPackage = schemaHandlerPackage
        self.type = type
        self.typeName = typeName
    }
}

struct RegisterTypeInputBody: Swift.Equatable {
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let schemaHandlerPackage: Swift.String?
    let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    let executionRoleArn: Swift.String?
    let clientRequestToken: Swift.String?
}

extension RegisterTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case executionRoleArn = "ExecutionRoleArn"
        case loggingConfig = "LoggingConfig"
        case schemaHandlerPackage = "SchemaHandlerPackage"
        case type = "Type"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let schemaHandlerPackageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaHandlerPackage)
        schemaHandlerPackage = schemaHandlerPackageDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension RegisterTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RegisterTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registrationToken = output.registrationToken
        } else {
            self.registrationToken = nil
        }
    }
}

public struct RegisterTypeOutputResponse: Swift.Equatable {
    /// The identifier for this registration request. Use this registration token when calling [DescribeTypeRegistration], which returns information about the status and IDs of the extension registration.
    public var registrationToken: Swift.String?

    public init (
        registrationToken: Swift.String? = nil
    )
    {
        self.registrationToken = registrationToken
    }
}

struct RegisterTypeOutputResponseBody: Swift.Equatable {
    let registrationToken: Swift.String?
}

extension RegisterTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationToken = "RegistrationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RegisterTypeResult"))
        let registrationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrationToken)
        registrationToken = registrationTokenDecoded
    }
}

extension CloudFormationClientTypes {
    public enum RegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum RegistryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hook
        case module
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistryType] {
            return [
                .hook,
                .module,
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hook: return "HOOK"
            case .module: return "MODULE"
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistryType(rawValue: rawValue) ?? RegistryType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Replacement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case conditional
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [Replacement] {
            return [
                .conditional,
                .false,
                .true,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .conditional: return "Conditional"
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Replacement(rawValue: rawValue) ?? Replacement.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.RequiredActivatedType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case originalTypeName = "OriginalTypeName"
        case publisherId = "PublisherId"
        case supportedMajorVersions = "SupportedMajorVersions"
        case typeNameAlias = "TypeNameAlias"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let originalTypeName = originalTypeName {
            try container.encode(originalTypeName, forKey: ClientRuntime.Key("OriginalTypeName"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let supportedMajorVersions = supportedMajorVersions {
            if !supportedMajorVersions.isEmpty {
                var supportedMajorVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedMajorVersions"))
                for (index0, supportedmajorversion0) in supportedMajorVersions.enumerated() {
                    try supportedMajorVersionsContainer.encode(supportedmajorversion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedMajorVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedMajorVersions"))
                try supportedMajorVersionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let typeNameAlias = typeNameAlias {
            try container.encode(typeNameAlias, forKey: ClientRuntime.Key("TypeNameAlias"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeNameAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeNameAlias)
        typeNameAlias = typeNameAliasDecoded
        let originalTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeName)
        originalTypeName = originalTypeNameDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        if containerValues.contains(.supportedMajorVersions) {
            struct KeyVal0{struct member{}}
            let supportedMajorVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedMajorVersions)
            if let supportedMajorVersionsWrappedContainer = supportedMajorVersionsWrappedContainer {
                let supportedMajorVersionsContainer = try supportedMajorVersionsWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var supportedMajorVersionsBuffer:[Swift.Int]? = nil
                if let supportedMajorVersionsContainer = supportedMajorVersionsContainer {
                    supportedMajorVersionsBuffer = [Swift.Int]()
                    for integerContainer0 in supportedMajorVersionsContainer {
                        supportedMajorVersionsBuffer?.append(integerContainer0)
                    }
                }
                supportedMajorVersions = supportedMajorVersionsBuffer
            } else {
                supportedMajorVersions = []
            }
        } else {
            supportedMajorVersions = nil
        }
    }
}

extension CloudFormationClientTypes {
    /// For extensions that are modules, a public third-party extension that must be activated in your account in order for the module itself to be activated. For more information, see [Activating public modules for use in your account](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/modules.html#module-enabling) in the CloudFormation User Guide.
    public struct RequiredActivatedType: Swift.Equatable {
        /// The type name of the public extension. If you specified a TypeNameAlias when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see [Specifying aliases to refer to extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias) in the CloudFormation User Guide.
        public var originalTypeName: Swift.String?
        /// The publisher ID of the extension publisher.
        public var publisherId: Swift.String?
        /// A list of the major versions of the extension type that the macro supports.
        public var supportedMajorVersions: [Swift.Int]?
        /// An alias assigned to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.
        public var typeNameAlias: Swift.String?

        public init (
            originalTypeName: Swift.String? = nil,
            publisherId: Swift.String? = nil,
            supportedMajorVersions: [Swift.Int]? = nil,
            typeNameAlias: Swift.String? = nil
        )
        {
            self.originalTypeName = originalTypeName
            self.publisherId = publisherId
            self.supportedMajorVersions = supportedMajorVersions
            self.typeNameAlias = typeNameAlias
        }
    }

}

extension CloudFormationClientTypes {
    public enum RequiresRecreation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case conditionally
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [RequiresRecreation] {
            return [
                .always,
                .conditionally,
                .never,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "Always"
            case .conditionally: return "Conditionally"
            case .never: return "Never"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequiresRecreation(rawValue: rawValue) ?? RequiresRecreation.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ResourceAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationpolicy
        case deletionpolicy
        case metadata
        case properties
        case tags
        case updatepolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceAttribute] {
            return [
                .creationpolicy,
                .deletionpolicy,
                .metadata,
                .properties,
                .tags,
                .updatepolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationpolicy: return "CreationPolicy"
            case .deletionpolicy: return "DeletionPolicy"
            case .metadata: return "Metadata"
            case .properties: return "Properties"
            case .tags: return "Tags"
            case .updatepolicy: return "UpdatePolicy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceAttribute(rawValue: rawValue) ?? ResourceAttribute.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceChange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case changeSetId = "ChangeSetId"
        case details = "Details"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case replacement = "Replacement"
        case resourceType = "ResourceType"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let details = details {
            if !details.isEmpty {
                var detailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Details"))
                for (index0, resourcechangedetail0) in details.enumerated() {
                    try detailsContainer.encode(resourcechangedetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var detailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Details"))
                try detailsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let replacement = replacement {
            try container.encode(replacement, forKey: ClientRuntime.Key("Replacement"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let scope = scope {
            if !scope.isEmpty {
                var scopeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Scope"))
                for (index0, resourceattribute0) in scope.enumerated() {
                    try scopeContainer.encode(resourceattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scopeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Scope"))
                try scopeContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let replacementDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Replacement.self, forKey: .replacement)
        replacement = replacementDecoded
        if containerValues.contains(.scope) {
            struct KeyVal0{struct member{}}
            let scopeWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scope)
            if let scopeWrappedContainer = scopeWrappedContainer {
                let scopeContainer = try scopeWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceAttribute].self, forKey: .member)
                var scopeBuffer:[CloudFormationClientTypes.ResourceAttribute]? = nil
                if let scopeContainer = scopeContainer {
                    scopeBuffer = [CloudFormationClientTypes.ResourceAttribute]()
                    for enumContainer0 in scopeContainer {
                        scopeBuffer?.append(enumContainer0)
                    }
                }
                scope = scopeBuffer
            } else {
                scope = []
            }
        } else {
            scope = nil
        }
        if containerValues.contains(.details) {
            struct KeyVal0{struct member{}}
            let detailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .details)
            if let detailsWrappedContainer = detailsWrappedContainer {
                let detailsContainer = try detailsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceChangeDetail].self, forKey: .member)
                var detailsBuffer:[CloudFormationClientTypes.ResourceChangeDetail]? = nil
                if let detailsContainer = detailsContainer {
                    detailsBuffer = [CloudFormationClientTypes.ResourceChangeDetail]()
                    for structureContainer0 in detailsContainer {
                        detailsBuffer?.append(structureContainer0)
                    }
                }
                details = detailsBuffer
            } else {
                details = []
            }
        } else {
            details = nil
        }
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes {
    /// The ResourceChange structure describes the resource and the action that CloudFormation will perform on it if you execute this change set.
    public struct ResourceChange: Swift.Equatable {
        /// The action that CloudFormation takes on the resource, such as Add (adds a new resource), Modify (changes a resource), Remove (deletes a resource), Import (imports a resource), or Dynamic (exact action for the resource can't be determined).
        public var action: CloudFormationClientTypes.ChangeAction?
        /// The change set ID of the nested change set.
        public var changeSetId: Swift.String?
        /// For the Modify action, a list of ResourceChangeDetail structures that describes the changes that CloudFormation will make to the resource.
        public var details: [CloudFormationClientTypes.ResourceChangeDetail]?
        /// The resource's logical ID, which is defined in the stack's template.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The resource's physical ID (resource name). Resources that you are adding don't have physical IDs because they haven't been created.
        public var physicalResourceId: Swift.String?
        /// For the Modify action, indicates whether CloudFormation will replace the resource by creating a new one and deleting the old one. This value depends on the value of the RequiresRecreation property in the ResourceTargetDefinition structure. For example, if the RequiresRecreation field is Always and the Evaluation field is Static, Replacement is True. If the RequiresRecreation field is Always and the Evaluation field is Dynamic, Replacement is Conditionally. If you have multiple changes with different RequiresRecreation values, the Replacement value depends on the change with the most impact. A RequiresRecreation value of Always has the most impact, followed by Conditionally, and then Never.
        public var replacement: CloudFormationClientTypes.Replacement?
        /// The type of CloudFormation resource, such as AWS::S3::Bucket.
        public var resourceType: Swift.String?
        /// For the Modify action, indicates which resource attribute is triggering this update, such as a change in the resource attribute's Metadata, Properties, or Tags.
        public var scope: [CloudFormationClientTypes.ResourceAttribute]?

        public init (
            action: CloudFormationClientTypes.ChangeAction? = nil,
            changeSetId: Swift.String? = nil,
            details: [CloudFormationClientTypes.ResourceChangeDetail]? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            replacement: CloudFormationClientTypes.Replacement? = nil,
            resourceType: Swift.String? = nil,
            scope: [CloudFormationClientTypes.ResourceAttribute]? = nil
        )
        {
            self.action = action
            self.changeSetId = changeSetId
            self.details = details
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.replacement = replacement
            self.resourceType = resourceType
            self.scope = scope
        }
    }

}

extension CloudFormationClientTypes.ResourceChangeDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case causingEntity = "CausingEntity"
        case changeSource = "ChangeSource"
        case evaluation = "Evaluation"
        case target = "Target"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let causingEntity = causingEntity {
            try container.encode(causingEntity, forKey: ClientRuntime.Key("CausingEntity"))
        }
        if let changeSource = changeSource {
            try container.encode(changeSource, forKey: ClientRuntime.Key("ChangeSource"))
        }
        if let evaluation = evaluation {
            try container.encode(evaluation, forKey: ClientRuntime.Key("Evaluation"))
        }
        if let target = target {
            try container.encode(target, forKey: ClientRuntime.Key("Target"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceTargetDefinition.self, forKey: .target)
        target = targetDecoded
        let evaluationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.EvaluationType.self, forKey: .evaluation)
        evaluation = evaluationDecoded
        let changeSourceDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSource.self, forKey: .changeSource)
        changeSource = changeSourceDecoded
        let causingEntityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .causingEntity)
        causingEntity = causingEntityDecoded
    }
}

extension CloudFormationClientTypes {
    /// For a resource with Modify as the action, the ResourceChange structure describes the changes CloudFormation will make to that resource.
    public struct ResourceChangeDetail: Swift.Equatable {
        /// The identity of the entity that triggered this change. This entity is a member of the group that's specified by the ChangeSource field. For example, if you modified the value of the KeyPairName parameter, the CausingEntity is the name of the parameter (KeyPairName). If the ChangeSource value is DirectModification, no value is given for CausingEntity.
        public var causingEntity: Swift.String?
        /// The group to which the CausingEntity value belongs. There are five entity groups:
        ///
        /// * ResourceReference entities are Ref intrinsic functions that refer to resources in the template, such as { "Ref" : "MyEC2InstanceResource" }.
        ///
        /// * ParameterReference entities are Ref intrinsic functions that get template parameter values, such as { "Ref" : "MyPasswordParameter" }.
        ///
        /// * ResourceAttribute entities are Fn::GetAtt intrinsic functions that get resource attribute values, such as { "Fn::GetAtt" : [ "MyEC2InstanceResource", "PublicDnsName" ] }.
        ///
        /// * DirectModification entities are changes that are made directly to the template.
        ///
        /// * Automatic entities are AWS::CloudFormation::Stack resource types, which are also known as nested stacks. If you made no changes to the AWS::CloudFormation::Stack resource, CloudFormation sets the ChangeSource to Automatic because the nested stack's template might have changed. Changes to a nested stack's template aren't visible to CloudFormation until you run an update on the parent stack.
        public var changeSource: CloudFormationClientTypes.ChangeSource?
        /// Indicates whether CloudFormation can determine the target value, and whether the target value will change before you execute a change set. For Static evaluations, CloudFormation can determine that the target value will change, and its value. For example, if you directly modify the InstanceType property of an EC2 instance, CloudFormation knows that this property value will change, and its value, so this is a Static evaluation. For Dynamic evaluations, can't determine the target value because it depends on the result of an intrinsic function, such as a Ref or Fn::GetAtt intrinsic function, when the stack is updated. For example, if your template includes a reference to a resource that's conditionally recreated, the value of the reference (the physical ID of the resource) might change, depending on if the resource is recreated. If the resource is recreated, it will have a new physical ID, so all references to that resource will also be updated.
        public var evaluation: CloudFormationClientTypes.EvaluationType?
        /// A ResourceTargetDefinition structure that describes the field that CloudFormation will change and whether the resource will be recreated.
        public var target: CloudFormationClientTypes.ResourceTargetDefinition?

        public init (
            causingEntity: Swift.String? = nil,
            changeSource: CloudFormationClientTypes.ChangeSource? = nil,
            evaluation: CloudFormationClientTypes.EvaluationType? = nil,
            target: CloudFormationClientTypes.ResourceTargetDefinition? = nil
        )
        {
            self.causingEntity = causingEntity
            self.changeSource = changeSource
            self.evaluation = evaluation
            self.target = target
        }
    }

}

extension CloudFormationClientTypes.ResourceIdentifierSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceIds = "LogicalResourceIds"
        case resourceIdentifiers = "ResourceIdentifiers"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceIds = logicalResourceIds {
            if !logicalResourceIds.isEmpty {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                for (index0, logicalresourceid0) in logicalResourceIds.enumerated() {
                    try logicalResourceIdsContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                try logicalResourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceIdentifiers = resourceIdentifiers {
            if !resourceIdentifiers.isEmpty {
                var resourceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifiers"))
                for (index0, resourceidentifierpropertykey0) in resourceIdentifiers.enumerated() {
                    try resourceIdentifiersContainer.encode(resourceidentifierpropertykey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifiers"))
                try resourceIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        if containerValues.contains(.logicalResourceIds) {
            struct KeyVal0{struct member{}}
            let logicalResourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logicalResourceIds)
            if let logicalResourceIdsWrappedContainer = logicalResourceIdsWrappedContainer {
                let logicalResourceIdsContainer = try logicalResourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logicalResourceIdsBuffer:[Swift.String]? = nil
                if let logicalResourceIdsContainer = logicalResourceIdsContainer {
                    logicalResourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in logicalResourceIdsContainer {
                        logicalResourceIdsBuffer?.append(stringContainer0)
                    }
                }
                logicalResourceIds = logicalResourceIdsBuffer
            } else {
                logicalResourceIds = []
            }
        } else {
            logicalResourceIds = nil
        }
        if containerValues.contains(.resourceIdentifiers) {
            struct KeyVal0{struct member{}}
            let resourceIdentifiersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceIdentifiers)
            if let resourceIdentifiersWrappedContainer = resourceIdentifiersWrappedContainer {
                let resourceIdentifiersContainer = try resourceIdentifiersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceIdentifiersBuffer:[Swift.String]? = nil
                if let resourceIdentifiersContainer = resourceIdentifiersContainer {
                    resourceIdentifiersBuffer = [Swift.String]()
                    for stringContainer0 in resourceIdentifiersContainer {
                        resourceIdentifiersBuffer?.append(stringContainer0)
                    }
                }
                resourceIdentifiers = resourceIdentifiersBuffer
            } else {
                resourceIdentifiers = []
            }
        } else {
            resourceIdentifiers = nil
        }
    }
}

extension CloudFormationClientTypes {
    /// Describes the target resources of a specific type in your import template (for example, all AWS::S3::Bucket resources) and the properties you can provide during the import to identify resources of that type.
    public struct ResourceIdentifierSummary: Swift.Equatable {
        /// The logical IDs of the target resources of the specified ResourceType, as defined in the import template.
        public var logicalResourceIds: [Swift.String]?
        /// The resource properties you can provide during the import to identify your target resources. For example, BucketName is a possible identifier property for AWS::S3::Bucket resources.
        public var resourceIdentifiers: [Swift.String]?
        /// The template resource type of the target resources, such as AWS::S3::Bucket.
        public var resourceType: Swift.String?

        public init (
            logicalResourceIds: [Swift.String]? = nil,
            resourceIdentifiers: [Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceIds = logicalResourceIds
            self.resourceIdentifiers = resourceIdentifiers
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes {
    public enum ResourceSignalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failure
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceSignalStatus] {
            return [
                .failure,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failure: return "FAILURE"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceSignalStatus(rawValue: rawValue) ?? ResourceSignalStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deleteSkipped
        case importComplete
        case importFailed
        case importInProgress
        case importRollbackComplete
        case importRollbackFailed
        case importRollbackInProgress
        case rollbackComplete
        case rollbackFailed
        case rollbackInProgress
        case updateComplete
        case updateFailed
        case updateInProgress
        case updateRollbackComplete
        case updateRollbackFailed
        case updateRollbackInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deleteSkipped,
                .importComplete,
                .importFailed,
                .importInProgress,
                .importRollbackComplete,
                .importRollbackFailed,
                .importRollbackInProgress,
                .rollbackComplete,
                .rollbackFailed,
                .rollbackInProgress,
                .updateComplete,
                .updateFailed,
                .updateInProgress,
                .updateRollbackComplete,
                .updateRollbackFailed,
                .updateRollbackInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSkipped: return "DELETE_SKIPPED"
            case .importComplete: return "IMPORT_COMPLETE"
            case .importFailed: return "IMPORT_FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .importRollbackComplete: return "IMPORT_ROLLBACK_COMPLETE"
            case .importRollbackFailed: return "IMPORT_ROLLBACK_FAILED"
            case .importRollbackInProgress: return "IMPORT_ROLLBACK_IN_PROGRESS"
            case .rollbackComplete: return "ROLLBACK_COMPLETE"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .rollbackInProgress: return "ROLLBACK_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateRollbackComplete: return "UPDATE_ROLLBACK_COMPLETE"
            case .updateRollbackFailed: return "UPDATE_ROLLBACK_FAILED"
            case .updateRollbackInProgress: return "UPDATE_ROLLBACK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceStatus(rawValue: rawValue) ?? ResourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceTargetDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case name = "Name"
        case requiresRecreation = "RequiresRecreation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let requiresRecreation = requiresRecreation {
            try container.encode(requiresRecreation, forKey: ClientRuntime.Key("RequiresRecreation"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceAttribute.self, forKey: .attribute)
        attribute = attributeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requiresRecreationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RequiresRecreation.self, forKey: .requiresRecreation)
        requiresRecreation = requiresRecreationDecoded
    }
}

extension CloudFormationClientTypes {
    /// The field that CloudFormation will change, such as the name of a resource's property, and whether the resource will be recreated.
    public struct ResourceTargetDefinition: Swift.Equatable {
        /// Indicates which resource attribute is triggering this update, such as a change in the resource attribute's Metadata, Properties, or Tags.
        public var attribute: CloudFormationClientTypes.ResourceAttribute?
        /// If the Attribute value is Properties, the name of the property. For all other attributes, the value is null.
        public var name: Swift.String?
        /// If the Attribute value is Properties, indicates whether a change to this property causes the resource to be recreated. The value can be Never, Always, or Conditionally. To determine the conditions for a Conditionally recreation, see the update behavior for that [property](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        public var requiresRecreation: CloudFormationClientTypes.RequiresRecreation?

        public init (
            attribute: CloudFormationClientTypes.ResourceAttribute? = nil,
            name: Swift.String? = nil,
            requiresRecreation: CloudFormationClientTypes.RequiresRecreation? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.requiresRecreation = requiresRecreation
        }
    }

}

extension CloudFormationClientTypes.ResourceToImport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let resourceidentifierpropertykeyKey0 = element0.key
                let resourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(resourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(resourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        if containerValues.contains(.resourceIdentifier) {
            struct KeyVal0{struct key{}; struct value{}}
            let resourceIdentifierWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .resourceIdentifier)
            if let resourceIdentifierWrappedContainer = resourceIdentifierWrappedContainer {
                let resourceIdentifierContainer = try resourceIdentifierWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var resourceIdentifierBuffer: [Swift.String:Swift.String]? = nil
                if let resourceIdentifierContainer = resourceIdentifierContainer {
                    resourceIdentifierBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in resourceIdentifierContainer {
                        resourceIdentifierBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                resourceIdentifier = resourceIdentifierBuffer
            } else {
                resourceIdentifier = [:]
            }
        } else {
            resourceIdentifier = nil
        }
    }
}

extension CloudFormationClientTypes {
    /// Describes the target resource of an import operation.
    public struct ResourceToImport: Swift.Equatable {
        /// The logical ID of the target resource as specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// A key-value pair that identifies the target resource. The key is an identifier property (for example, BucketName for AWS::S3::Bucket resources) and the value is the actual property value (for example, MyS3Bucket).
        /// This member is required.
        public var resourceIdentifier: [Swift.String:Swift.String]?
        /// The type of resource to import into your stack, such as AWS::S3::Bucket. For a list of supported resource types, see [Resources that support import operations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            logicalResourceId: Swift.String? = nil,
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.RollbackConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringTimeInMinutes = "MonitoringTimeInMinutes"
        case rollbackTriggers = "RollbackTriggers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let monitoringTimeInMinutes = monitoringTimeInMinutes {
            try container.encode(monitoringTimeInMinutes, forKey: ClientRuntime.Key("MonitoringTimeInMinutes"))
        }
        if let rollbackTriggers = rollbackTriggers {
            if !rollbackTriggers.isEmpty {
                var rollbackTriggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RollbackTriggers"))
                for (index0, rollbacktrigger0) in rollbackTriggers.enumerated() {
                    try rollbackTriggersContainer.encode(rollbacktrigger0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var rollbackTriggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RollbackTriggers"))
                try rollbackTriggersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rollbackTriggers) {
            struct KeyVal0{struct member{}}
            let rollbackTriggersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rollbackTriggers)
            if let rollbackTriggersWrappedContainer = rollbackTriggersWrappedContainer {
                let rollbackTriggersContainer = try rollbackTriggersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.RollbackTrigger].self, forKey: .member)
                var rollbackTriggersBuffer:[CloudFormationClientTypes.RollbackTrigger]? = nil
                if let rollbackTriggersContainer = rollbackTriggersContainer {
                    rollbackTriggersBuffer = [CloudFormationClientTypes.RollbackTrigger]()
                    for structureContainer0 in rollbackTriggersContainer {
                        rollbackTriggersBuffer?.append(structureContainer0)
                    }
                }
                rollbackTriggers = rollbackTriggersBuffer
            } else {
                rollbackTriggers = []
            }
        } else {
            rollbackTriggers = nil
        }
        let monitoringTimeInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .monitoringTimeInMinutes)
        monitoringTimeInMinutes = monitoringTimeInMinutesDecoded
    }
}

extension CloudFormationClientTypes {
    /// Structure containing the rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. Rollback triggers enable you to have CloudFormation monitor the state of your application during stack creation and updating, and to roll back that operation if the application breaches the threshold of any of the alarms you've specified. For more information, see [Monitor and Roll Back Stack Operations](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-rollback-triggers.html).
    public struct RollbackConfiguration: Swift.Equatable {
        /// The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources. The default is 0 minutes. If you specify a monitoring period but don't specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using [CancelUpdateStack](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html), for example) as necessary. If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.
        public var monitoringTimeInMinutes: Swift.Int?
        /// The triggers to monitor during stack creation or update actions. By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:
        ///
        /// * To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.
        ///
        /// * To specify new or updated rollback triggers, you must specify all the triggers that you want used for this stack, even triggers you've specified before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.
        ///
        /// * To remove all currently specified triggers, specify an empty list for this parameter.
        ///
        ///
        /// If a specified trigger is missing, the entire stack operation fails and is rolled back.
        public var rollbackTriggers: [CloudFormationClientTypes.RollbackTrigger]?

        public init (
            monitoringTimeInMinutes: Swift.Int? = nil,
            rollbackTriggers: [CloudFormationClientTypes.RollbackTrigger]? = nil
        )
        {
            self.monitoringTimeInMinutes = monitoringTimeInMinutes
            self.rollbackTriggers = rollbackTriggers
        }
    }

}

extension RollbackStackInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("RollbackStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RollbackStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RollbackStackInput: Swift.Equatable {
    /// A unique identifier for this RollbackStack request.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management role that CloudFormation assumes to rollback the stack.
    public var roleARN: Swift.String?
    /// The name that's associated with the stack.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

struct RollbackStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let roleARN: Swift.String?
    let clientRequestToken: Swift.String?
}

extension RollbackStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension RollbackStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RollbackStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RollbackStackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RollbackStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RollbackStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

public struct RollbackStackOutputResponse: Swift.Equatable {
    /// Unique identifier of the stack.
    public var stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct RollbackStackOutputResponseBody: Swift.Equatable {
    let stackId: Swift.String?
}

extension RollbackStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RollbackStackResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

extension CloudFormationClientTypes.RollbackTrigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension CloudFormationClientTypes {
    /// A rollback trigger CloudFormation monitors during creation and updating of stacks. If any of the alarms you specify goes to ALARM state during the stack operation or within the specified monitoring period afterwards, CloudFormation rolls back the entire stack operation.
    public struct RollbackTrigger: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the rollback trigger. If a specified trigger is missing, the entire stack operation fails and is rolled back.
        /// This member is required.
        public var arn: Swift.String?
        /// The resource type of the rollback trigger. Specify either [AWS::CloudWatch::Alarm](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html) or [AWS::CloudWatch::CompositeAlarm](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html) resource types.
        /// This member is required.
        public var type: Swift.String?

        public init (
            arn: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.type = type
        }
    }

}

extension SetStackPolicyInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        try container.encode("SetStackPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetStackPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [SetStackPolicy] action.
public struct SetStackPolicyInput: Swift.Equatable {
    /// The name or unique stack ID that you want to associate a policy with.
    /// This member is required.
    public var stackName: Swift.String?
    /// Structure containing the stack policy body. For more information, go to [ Prevent updates to stack resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the CloudFormation User Guide. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyBody: Swift.String?
    /// Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an Amazon S3 bucket in the same Amazon Web Services Region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyURL: Swift.String?

    public init (
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil
    )
    {
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
    }
}

struct SetStackPolicyInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let stackPolicyBody: Swift.String?
    let stackPolicyURL: Swift.String?
}

extension SetStackPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyURL = "StackPolicyURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackPolicyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyBody)
        stackPolicyBody = stackPolicyBodyDecoded
        let stackPolicyURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyURL)
        stackPolicyURL = stackPolicyURLDecoded
    }
}

extension SetStackPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetStackPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetStackPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetStackPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetStackPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension SetTypeConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let configurationAlias = configurationAlias {
            try container.encode(configurationAlias, forKey: ClientRuntime.Key("ConfigurationAlias"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("SetTypeConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetTypeConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetTypeConfigurationInput: Swift.Equatable {
    /// The configuration data for the extension, in this account and region. The configuration data must be formatted as JSON, and validate against the schema returned in the ConfigurationSchema response element of [API_DescribeType]. For more information, see [Defining account-level configuration data for an extension](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration) in the CloudFormation CLI User Guide.
    /// This member is required.
    public var configuration: Swift.String?
    /// An alias by which to refer to this extension configuration data. Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.
    public var configurationAlias: Swift.String?
    /// The type of extension. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The Amazon Resource Name (ARN) for the extension, in this account and region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and region. Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.
    public var typeArn: Swift.String?
    /// The name of the extension. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var typeName: Swift.String?

    public init (
        configuration: Swift.String? = nil,
        configurationAlias: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeArn: Swift.String? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.configurationAlias = configurationAlias
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}

struct SetTypeConfigurationInputBody: Swift.Equatable {
    let typeArn: Swift.String?
    let configuration: Swift.String?
    let configurationAlias: Swift.String?
    let typeName: Swift.String?
    let type: CloudFormationClientTypes.ThirdPartyType?
}

extension SetTypeConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case configurationAlias = "ConfigurationAlias"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let configurationAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAlias)
        configurationAlias = configurationAliasDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
    }
}

extension SetTypeConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetTypeConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetTypeConfigurationOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetTypeConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SetTypeConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationArn = output.configurationArn
        } else {
            self.configurationArn = nil
        }
    }
}

public struct SetTypeConfigurationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the configuration data, in this account and region. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var configurationArn: Swift.String?

    public init (
        configurationArn: Swift.String? = nil
    )
    {
        self.configurationArn = configurationArn
    }
}

struct SetTypeConfigurationOutputResponseBody: Swift.Equatable {
    let configurationArn: Swift.String?
}

extension SetTypeConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationArn = "ConfigurationArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SetTypeConfigurationResult"))
        let configurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationArn)
        configurationArn = configurationArnDecoded
    }
}

extension SetTypeDefaultVersionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("SetTypeDefaultVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetTypeDefaultVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetTypeDefaultVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension for which you want version summary information. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?
    /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.
    public var versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

struct SetTypeDefaultVersionInputBody: Swift.Equatable {
    let arn: Swift.String?
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let versionId: Swift.String?
}

extension SetTypeDefaultVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension SetTypeDefaultVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetTypeDefaultVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetTypeDefaultVersionOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetTypeDefaultVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetTypeDefaultVersionOutputResponse: Swift.Equatable {

    public init () { }
}

extension SignalResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let uniqueId = uniqueId {
            try container.encode(uniqueId, forKey: ClientRuntime.Key("UniqueId"))
        }
        try container.encode("SignalResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SignalResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for the [SignalResource] action.
public struct SignalResourceInput: Swift.Equatable {
    /// The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template.
    /// This member is required.
    public var logicalResourceId: Swift.String?
    /// The stack name or unique stack ID that includes the resource that you want to signal.
    /// This member is required.
    public var stackName: Swift.String?
    /// The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update.
    /// This member is required.
    public var status: CloudFormationClientTypes.ResourceSignalStatus?
    /// A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID.
    /// This member is required.
    public var uniqueId: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ResourceSignalStatus? = nil,
        uniqueId: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
        self.status = status
        self.uniqueId = uniqueId
    }
}

struct SignalResourceInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let logicalResourceId: Swift.String?
    let uniqueId: Swift.String?
    let status: CloudFormationClientTypes.ResourceSignalStatus?
}

extension SignalResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case stackName = "StackName"
        case status = "Status"
        case uniqueId = "UniqueId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let uniqueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueId)
        uniqueId = uniqueIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceSignalStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension SignalResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SignalResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SignalResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SignalResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SignalResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudFormationClientTypes.Stack: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetId = "ChangeSetId"
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case description = "Description"
        case disableRollback = "DisableRollback"
        case driftInformation = "DriftInformation"
        case enableTerminationProtection = "EnableTerminationProtection"
        case lastUpdatedTime = "LastUpdatedTime"
        case notificationARNs = "NotificationARNs"
        case outputs = "Outputs"
        case parameters = "Parameters"
        case parentId = "ParentId"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case tags = "Tags"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("creationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encodeTimestamp(deletionTime, format: .dateTime, forKey: ClientRuntime.Key("deletionTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encodeTimestamp(lastUpdatedTime, format: .dateTime, forKey: ClientRuntime.Key("lastUpdatedTime"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let outputs = outputs {
            if !outputs.isEmpty {
                var outputsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Outputs"))
                for (index0, output0) in outputs.enumerated() {
                    try outputsContainer.encode(output0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var outputsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Outputs"))
                try outputsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let deletionTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deletionTime)
        deletionTime = deletionTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        let stackStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackStatus.self, forKey: .stackStatus)
        stackStatus = stackStatusDecoded
        let stackStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackStatusReason)
        stackStatusReason = stackStatusReasonDecoded
        let disableRollbackDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableRollback)
        disableRollback = disableRollbackDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.outputs) {
            struct KeyVal0{struct member{}}
            let outputsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .outputs)
            if let outputsWrappedContainer = outputsWrappedContainer {
                let outputsContainer = try outputsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Output].self, forKey: .member)
                var outputsBuffer:[CloudFormationClientTypes.Output]? = nil
                if let outputsContainer = outputsContainer {
                    outputsBuffer = [CloudFormationClientTypes.Output]()
                    for structureContainer0 in outputsContainer {
                        outputsBuffer?.append(structureContainer0)
                    }
                }
                outputs = outputsBuffer
            } else {
                outputs = []
            }
        } else {
            outputs = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let enableTerminationProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTerminationProtection)
        enableTerminationProtection = enableTerminationProtectionDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
    }
}

extension CloudFormationClientTypes {
    /// The Stack data type.
    public struct Stack: Swift.Equatable {
        /// The capabilities allowed in the stack.
        public var capabilities: [CloudFormationClientTypes.Capability]?
        /// The unique ID of the change set.
        public var changeSetId: Swift.String?
        /// The time at which the stack was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time the stack was deleted.
        public var deletionTime: ClientRuntime.Date?
        /// A user-defined description associated with the stack.
        public var description: Swift.String?
        /// Boolean to enable or disable rollback on stack creation failures:
        ///
        /// * true: disable rollback.
        ///
        /// * false: enable rollback.
        public var disableRollback: Swift.Bool?
        /// Information about whether a stack's actual configuration differs, or has drifted, from it's expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackDriftInformation?
        /// Whether termination protection is enabled for the stack. For [nested stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html), termination protection is set on the root stack and can't be changed directly on the nested stack. For more information, see [Protecting a Stack From Being Deleted](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html) in the CloudFormation User Guide.
        public var enableTerminationProtection: Swift.Bool?
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// Amazon SNS topic Amazon Resource Names (ARNs) to which stack related events are published.
        public var notificationARNs: [Swift.String]?
        /// A list of output structures.
        public var outputs: [CloudFormationClientTypes.Output]?
        /// A list of Parameter structures.
        public var parameters: [CloudFormationClientTypes.Parameter]?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the direct parent of this stack. For the first level of nested stacks, the root stack is also the parent stack. For more information, see [Working with Nested Stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var parentId: Swift.String?
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that's associated with the stack. During a stack operation, CloudFormation uses this role's credentials to make calls on your behalf.
        public var roleARN: Swift.String?
        /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
        public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the top-level stack to which the nested stack ultimately belongs. For more information, see [Working with Nested Stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var rootId: Swift.String?
        /// Unique identifier of the stack.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        /// This member is required.
        public var stackName: Swift.String?
        /// Current status of the stack.
        /// This member is required.
        public var stackStatus: CloudFormationClientTypes.StackStatus?
        /// Success/failure message associated with the stack status.
        public var stackStatusReason: Swift.String?
        /// A list of Tags that specify information about the stack.
        public var tags: [CloudFormationClientTypes.Tag]?
        /// The amount of time within which stack creation should complete.
        public var timeoutInMinutes: Swift.Int?

        public init (
            capabilities: [CloudFormationClientTypes.Capability]? = nil,
            changeSetId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            deletionTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            disableRollback: Swift.Bool? = nil,
            driftInformation: CloudFormationClientTypes.StackDriftInformation? = nil,
            enableTerminationProtection: Swift.Bool? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            notificationARNs: [Swift.String]? = nil,
            outputs: [CloudFormationClientTypes.Output]? = nil,
            parameters: [CloudFormationClientTypes.Parameter]? = nil,
            parentId: Swift.String? = nil,
            roleARN: Swift.String? = nil,
            rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
            rootId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            stackStatus: CloudFormationClientTypes.StackStatus? = nil,
            stackStatusReason: Swift.String? = nil,
            tags: [CloudFormationClientTypes.Tag]? = nil,
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.capabilities = capabilities
            self.changeSetId = changeSetId
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.disableRollback = disableRollback
            self.driftInformation = driftInformation
            self.enableTerminationProtection = enableTerminationProtection
            self.lastUpdatedTime = lastUpdatedTime
            self.notificationARNs = notificationARNs
            self.outputs = outputs
            self.parameters = parameters
            self.parentId = parentId
            self.roleARN = roleARN
            self.rollbackConfiguration = rollbackConfiguration
            self.rootId = rootId
            self.stackId = stackId
            self.stackName = stackName
            self.stackStatus = stackStatus
            self.stackStatusReason = stackStatusReason
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackDriftDetectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detectionComplete
        case detectionFailed
        case detectionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [StackDriftDetectionStatus] {
            return [
                .detectionComplete,
                .detectionFailed,
                .detectionInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detectionComplete: return "DETECTION_COMPLETE"
            case .detectionFailed: return "DETECTION_FAILED"
            case .detectionInProgress: return "DETECTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackDriftDetectionStatus(rawValue: rawValue) ?? StackDriftDetectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackDriftInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackDriftStatus = "StackDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackDriftStatus = stackDriftStatus {
            try container.encode(stackDriftStatus, forKey: ClientRuntime.Key("StackDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .stackDriftStatus)
        stackDriftStatus = stackDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastCheckTimestamp)
        lastCheckTimestamp = lastCheckTimestampDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains information about whether the stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted.
    public struct StackDriftInformation: Swift.Equatable {
        /// Most recent time when a drift detection operation was initiated on the stack, or any of its individual resources that support drift detection.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the stack's actual configuration compared to its expected template configuration.
        ///
        /// * DRIFTED: The stack differs from its expected template configuration. A stack is considered to have drifted if one or more of its resources have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack differs from its expected template configuration.
        ///
        /// * IN_SYNC: The stack's actual configuration matches its expected template configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        /// This member is required.
        public var stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackDriftStatus = stackDriftStatus
        }
    }

}

extension CloudFormationClientTypes.StackDriftInformationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackDriftStatus = "StackDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackDriftStatus = stackDriftStatus {
            try container.encode(stackDriftStatus, forKey: ClientRuntime.Key("StackDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .stackDriftStatus)
        stackDriftStatus = stackDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastCheckTimestamp)
        lastCheckTimestamp = lastCheckTimestampDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains information about whether the stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted.
    public struct StackDriftInformationSummary: Swift.Equatable {
        /// Most recent time when a drift detection operation was initiated on the stack, or any of its individual resources that support drift detection.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the stack's actual configuration compared to its expected template configuration.
        ///
        /// * DRIFTED: The stack differs from its expected template configuration. A stack is considered to have drifted if one or more of its resources have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack differs from its expected template configuration.
        ///
        /// * IN_SYNC: The stack's actual configuration matches its expected template configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        /// This member is required.
        public var stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackDriftStatus = stackDriftStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drifted
        case inSync
        case notChecked
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [StackDriftStatus] {
            return [
                .drifted,
                .inSync,
                .notChecked,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drifted: return "DRIFTED"
            case .inSync: return "IN_SYNC"
            case .notChecked: return "NOT_CHECKED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackDriftStatus(rawValue: rawValue) ?? StackDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case eventId = "EventId"
        case hookFailureMode = "HookFailureMode"
        case hookInvocationPoint = "HookInvocationPoint"
        case hookStatus = "HookStatus"
        case hookStatusReason = "HookStatusReason"
        case hookType = "HookType"
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case resourceProperties = "ResourceProperties"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let hookFailureMode = hookFailureMode {
            try container.encode(hookFailureMode, forKey: ClientRuntime.Key("HookFailureMode"))
        }
        if let hookInvocationPoint = hookInvocationPoint {
            try container.encode(hookInvocationPoint, forKey: ClientRuntime.Key("HookInvocationPoint"))
        }
        if let hookStatus = hookStatus {
            try container.encode(hookStatus, forKey: ClientRuntime.Key("HookStatus"))
        }
        if let hookStatusReason = hookStatusReason {
            try container.encode(hookStatusReason, forKey: ClientRuntime.Key("HookStatusReason"))
        }
        if let hookType = hookType {
            try container.encode(hookType, forKey: ClientRuntime.Key("HookType"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceProperties = resourceProperties {
            try container.encode(resourceProperties, forKey: ClientRuntime.Key("ResourceProperties"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let resourcePropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceProperties)
        resourceProperties = resourcePropertiesDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let hookTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hookType)
        hookType = hookTypeDecoded
        let hookStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookStatus.self, forKey: .hookStatus)
        hookStatus = hookStatusDecoded
        let hookStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hookStatusReason)
        hookStatusReason = hookStatusReasonDecoded
        let hookInvocationPointDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookInvocationPoint.self, forKey: .hookInvocationPoint)
        hookInvocationPoint = hookInvocationPointDecoded
        let hookFailureModeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookFailureMode.self, forKey: .hookFailureMode)
        hookFailureMode = hookFailureModeDecoded
    }
}

extension CloudFormationClientTypes {
    /// The StackEvent data type.
    public struct StackEvent: Swift.Equatable {
        /// The token passed to the operation that generated this event. All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
        public var clientRequestToken: Swift.String?
        /// The unique ID of this event.
        /// This member is required.
        public var eventId: Swift.String?
        /// Specify the hook failure mode for non-compliant resources in the followings ways.
        ///
        /// * FAIL Stops provisioning resources.
        ///
        /// * WARN Allows provisioning to continue with a warning message.
        public var hookFailureMode: CloudFormationClientTypes.HookFailureMode?
        /// Invocation points are points in provisioning logic where hooks are initiated.
        public var hookInvocationPoint: CloudFormationClientTypes.HookInvocationPoint?
        /// Provides the status of the change set hook.
        public var hookStatus: CloudFormationClientTypes.HookStatus?
        /// Provides the reason for the hook status.
        public var hookStatusReason: Swift.String?
        /// The name of the hook.
        public var hookType: Swift.String?
        /// The logical name of the resource specified in the template.
        public var logicalResourceId: Swift.String?
        /// The name or unique identifier associated with the physical instance of the resource.
        public var physicalResourceId: Swift.String?
        /// BLOB of the properties used to create the resource.
        public var resourceProperties: Swift.String?
        /// Current status of the resource.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. (For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.)
        public var resourceType: Swift.String?
        /// The unique ID name of the instance of the stack.
        /// This member is required.
        public var stackId: Swift.String?
        /// The name associated with a stack.
        /// This member is required.
        public var stackName: Swift.String?
        /// Time the status was updated.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init (
            clientRequestToken: Swift.String? = nil,
            eventId: Swift.String? = nil,
            hookFailureMode: CloudFormationClientTypes.HookFailureMode? = nil,
            hookInvocationPoint: CloudFormationClientTypes.HookInvocationPoint? = nil,
            hookStatus: CloudFormationClientTypes.HookStatus? = nil,
            hookStatusReason: Swift.String? = nil,
            hookType: Swift.String? = nil,
            logicalResourceId: Swift.String? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceProperties: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.clientRequestToken = clientRequestToken
            self.eventId = eventId
            self.hookFailureMode = hookFailureMode
            self.hookInvocationPoint = hookInvocationPoint
            self.hookStatus = hookStatus
            self.hookStatusReason = hookStatusReason
            self.hookType = hookType
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.resourceProperties = resourceProperties
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case lastOperationId = "LastOperationId"
        case organizationalUnitId = "OrganizationalUnitId"
        case parameterOverrides = "ParameterOverrides"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let lastOperationId = lastOperationId {
            try container.encode(lastOperationId, forKey: ClientRuntime.Key("LastOperationId"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let parameterOverrides = parameterOverrides {
            if !parameterOverrides.isEmpty {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                for (index0, parameter0) in parameterOverrides.enumerated() {
                    try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                try parameterOverridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        if containerValues.contains(.parameterOverrides) {
            struct KeyVal0{struct member{}}
            let parameterOverridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameterOverrides)
            if let parameterOverridesWrappedContainer = parameterOverridesWrappedContainer {
                let parameterOverridesContainer = try parameterOverridesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parameterOverridesBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parameterOverridesContainer = parameterOverridesContainer {
                    parameterOverridesBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parameterOverridesContainer {
                        parameterOverridesBuffer?.append(structureContainer0)
                    }
                }
                parameterOverrides = parameterOverridesBuffer
            } else {
                parameterOverrides = []
            }
        } else {
            parameterOverrides = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let stackInstanceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceComprehensiveStatus.self, forKey: .stackInstanceStatus)
        stackInstanceStatus = stackInstanceStatusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastDriftCheckTimestamp)
        lastDriftCheckTimestamp = lastDriftCheckTimestampDecoded
        let lastOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastOperationId)
        lastOperationId = lastOperationIdDecoded
    }
}

extension CloudFormationClientTypes {
    /// An CloudFormation stack, in a specific account and Region, that's part of a stack set operation. A stack instance is a reference to an attempted or actual stack in a given account within a given Region. A stack instance can exist without a stack—for example, if the stack couldn't be created for some reason. A stack instance is associated with only one stack set. Each stack instance contains the ID of its associated stack set, in addition to the ID of the actual stack and the stack status.
    public struct StackInstance: Swift.Equatable {
        /// [Self-managed permissions] The name of the Amazon Web Services account that the stack instance is associated with.
        public var account: Swift.String?
        /// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs.
        ///
        /// * DRIFTED: The stack differs from the expected template and parameter configuration of the stack set to which it belongs. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack instance differs from its expected stack set configuration.
        ///
        /// * IN_SYNC: The stack instance's actual configuration matches its expected stack set configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        public var driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack instance. This value will be NULL for any stack instance on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// The last unique ID of a StackSet operation performed on a stack instance.
        public var lastOperationId: Swift.String?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitId: Swift.String?
        /// A list of parameters from the stack set template whose values have been overridden in this stack instance.
        public var parameterOverrides: [CloudFormationClientTypes.Parameter]?
        /// The name of the Amazon Web Services Region that the stack instance is associated with.
        public var region: Swift.String?
        /// The ID of the stack instance.
        public var stackId: Swift.String?
        /// The detailed status of the stack instance.
        public var stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus?
        /// The name or unique ID of the stack set that the stack instance is associated with.
        public var stackSetId: Swift.String?
        /// The status of the stack instance, in terms of its synchronization with its associated stack set.
        ///
        /// * INOPERABLE: A DeleteStackInstances operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further UpdateStackSet operations. You might need to perform a DeleteStackInstances operation, with RetainStacks set to true, to delete the stack instance, and then delete the stack manually.
        ///
        /// * OUTDATED: The stack isn't currently up to date with the stack set because:
        ///
        /// * The associated stack failed during a CreateStackSet or UpdateStackSet operation.
        ///
        /// * The stack was part of a CreateStackSet or UpdateStackSet operation that failed or was stopped before the stack was created or updated.
        ///
        ///
        ///
        ///
        /// * CURRENT: The stack is currently up to date with the stack set.
        public var status: CloudFormationClientTypes.StackInstanceStatus?
        /// The explanation for the specific status code that's assigned to this stack instance.
        public var statusReason: Swift.String?

        public init (
            account: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            lastOperationId: Swift.String? = nil,
            organizationalUnitId: Swift.String? = nil,
            parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
            region: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackInstanceStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.lastOperationId = lastOperationId
            self.organizationalUnitId = organizationalUnitId
            self.parameterOverrides = parameterOverrides
            self.region = region
            self.stackId = stackId
            self.stackInstanceStatus = stackInstanceStatus
            self.stackSetId = stackSetId
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes.StackInstanceComprehensiveStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detailedStatus = "DetailedStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let detailedStatus = detailedStatus {
            try container.encode(detailedStatus, forKey: ClientRuntime.Key("DetailedStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceDetailedStatus.self, forKey: .detailedStatus)
        detailedStatus = detailedStatusDecoded
    }
}

extension CloudFormationClientTypes {
    /// The detailed status of the stack instance.
    public struct StackInstanceComprehensiveStatus: Swift.Equatable {
        /// * CANCELLED: The operation in the specified account and Region has been canceled. This is either because a user has stopped the stack set operation, or because the failure tolerance of the stack set operation has been exceeded.
        ///
        /// * FAILED: The operation in the specified account and Region failed. If the stack set operation fails in enough accounts within a Region, the failure tolerance for the stack set operation as a whole might be exceeded.
        ///
        /// * INOPERABLE: A DeleteStackInstances operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further UpdateStackSet operations. You might need to perform a DeleteStackInstances operation, with RetainStacks set to true, to delete the stack instance, and then delete the stack manually.
        ///
        /// * PENDING: The operation in the specified account and Region has yet to start.
        ///
        /// * RUNNING: The operation in the specified account and Region is currently in progress.
        ///
        /// * SUCCEEDED: The operation in the specified account and Region completed successfully.
        public var detailedStatus: CloudFormationClientTypes.StackInstanceDetailedStatus?

        public init (
            detailedStatus: CloudFormationClientTypes.StackInstanceDetailedStatus? = nil
        )
        {
            self.detailedStatus = detailedStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceDetailedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inoperable
        case pending
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceDetailedStatus] {
            return [
                .cancelled,
                .failed,
                .inoperable,
                .pending,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .inoperable: return "INOPERABLE"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceDetailedStatus(rawValue: rawValue) ?? StackInstanceDetailedStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackInstanceFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            try container.encode(values, forKey: ClientRuntime.Key("Values"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .values)
        values = valuesDecoded
    }
}

extension CloudFormationClientTypes {
    /// The filter to apply to stack instances
    public struct StackInstanceFilter: Swift.Equatable {
        /// The type of filter to apply.
        public var name: CloudFormationClientTypes.StackInstanceFilterName?
        /// The status to filter by.
        public var values: Swift.String?

        public init (
            name: CloudFormationClientTypes.StackInstanceFilterName? = nil,
            values: Swift.String? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detailedStatus
        case lastOperationId
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceFilterName] {
            return [
                .detailedStatus,
                .lastOperationId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detailedStatus: return "DETAILED_STATUS"
            case .lastOperationId: return "LAST_OPERATION_ID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceFilterName(rawValue: rawValue) ?? StackInstanceFilterName.sdkUnknown(rawValue)
        }
    }
}

extension StackInstanceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<StackInstanceNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified stack instance doesn't exist.
public struct StackInstanceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackInstanceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StackInstanceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum StackInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case current
        case inoperable
        case outdated
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceStatus] {
            return [
                .current,
                .inoperable,
                .outdated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .current: return "CURRENT"
            case .inoperable: return "INOPERABLE"
            case .outdated: return "OUTDATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceStatus(rawValue: rawValue) ?? StackInstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackInstanceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case lastOperationId = "LastOperationId"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let lastOperationId = lastOperationId {
            try container.encode(lastOperationId, forKey: ClientRuntime.Key("LastOperationId"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let stackInstanceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceComprehensiveStatus.self, forKey: .stackInstanceStatus)
        stackInstanceStatus = stackInstanceStatusDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastDriftCheckTimestamp)
        lastDriftCheckTimestamp = lastDriftCheckTimestampDecoded
        let lastOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastOperationId)
        lastOperationId = lastOperationIdDecoded
    }
}

extension CloudFormationClientTypes {
    /// The structure that contains summary information about a stack instance.
    public struct StackInstanceSummary: Swift.Equatable {
        /// [Self-managed permissions] The name of the Amazon Web Services account that the stack instance is associated with.
        public var account: Swift.String?
        /// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs.
        ///
        /// * DRIFTED: The stack differs from the expected template and parameter configuration of the stack set to which it belongs. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack instance differs from its expected stack set configuration.
        ///
        /// * IN_SYNC: The stack instance's actual configuration matches its expected stack set configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        public var driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack instance. This value will be NULL for any stack instance on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// The last unique ID of a StackSet operation performed on a stack instance.
        public var lastOperationId: Swift.String?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitId: Swift.String?
        /// The name of the Amazon Web Services Region that the stack instance is associated with.
        public var region: Swift.String?
        /// The ID of the stack instance.
        public var stackId: Swift.String?
        /// The detailed status of the stack instance.
        public var stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus?
        /// The name or unique ID of the stack set that the stack instance is associated with.
        public var stackSetId: Swift.String?
        /// The status of the stack instance, in terms of its synchronization with its associated stack set.
        ///
        /// * INOPERABLE: A DeleteStackInstances operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further UpdateStackSet operations. You might need to perform a DeleteStackInstances operation, with RetainStacks set to true, to delete the stack instance, and then delete the stack manually.
        ///
        /// * OUTDATED: The stack isn't currently up to date with the stack set because:
        ///
        /// * The associated stack failed during a CreateStackSet or UpdateStackSet operation.
        ///
        /// * The stack was part of a CreateStackSet or UpdateStackSet operation that failed or was stopped before the stack was created or updated.
        ///
        ///
        ///
        ///
        /// * CURRENT: The stack is currently up to date with the stack set.
        public var status: CloudFormationClientTypes.StackInstanceStatus?
        /// The explanation for the specific status code assigned to this stack instance.
        public var statusReason: Swift.String?

        public init (
            account: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            lastOperationId: Swift.String? = nil,
            organizationalUnitId: Swift.String? = nil,
            region: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackInstanceStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.lastOperationId = lastOperationId
            self.organizationalUnitId = organizationalUnitId
            self.region = region
            self.stackId = stackId
            self.stackInstanceStatus = stackInstanceStatus
            self.stackSetId = stackSetId
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension StackNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<StackNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified stack ARN doesn't exist or stack doesn't exist corresponding to the ARN in input.
public struct StackNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StackNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.StackResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes {
    /// The StackResource data type.
    public struct StackResource: Swift.Equatable {
        /// User defined description associated with the resource.
        public var description: Swift.String?
        /// Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackResourceDriftInformation?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Current status of the resource.
        /// This member is required.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?
        /// Unique identifier of the stack.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        public var stackName: Swift.String?
        /// Time the status was updated.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init (
            description: Swift.String? = nil,
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformation? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.description = description
            self.driftInformation = driftInformation
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackResourceDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case metadata = "Metadata"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encodeTimestamp(lastUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let metadata = metadata {
            try container.encode(metadata, forKey: ClientRuntime.Key("Metadata"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadata)
        metadata = metadataDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains detailed information about the specified stack resource.
    public struct StackResourceDetail: Swift.Equatable {
        /// User defined description associated with the resource.
        public var description: Swift.String?
        /// Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackResourceDriftInformation?
        /// Time the status was updated.
        /// This member is required.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// The content of the Metadata attribute declared for the resource. For more information, see [Metadata Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-metadata.html) in the CloudFormation User Guide.
        public var metadata: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Current status of the resource.
        /// This member is required.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?
        /// Unique identifier of the stack.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        public var stackName: Swift.String?

        public init (
            description: Swift.String? = nil,
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformation? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            logicalResourceId: Swift.String? = nil,
            metadata: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil
        )
        {
            self.description = description
            self.driftInformation = driftInformation
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.logicalResourceId = logicalResourceId
            self.metadata = metadata
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
        }
    }

}

extension CloudFormationClientTypes.StackResourceDrift: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualProperties = "ActualProperties"
        case expectedProperties = "ExpectedProperties"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case physicalResourceIdContext = "PhysicalResourceIdContext"
        case propertyDifferences = "PropertyDifferences"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualProperties = actualProperties {
            try container.encode(actualProperties, forKey: ClientRuntime.Key("ActualProperties"))
        }
        if let expectedProperties = expectedProperties {
            try container.encode(expectedProperties, forKey: ClientRuntime.Key("ExpectedProperties"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let physicalResourceIdContext = physicalResourceIdContext {
            if !physicalResourceIdContext.isEmpty {
                var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
                for (index0, physicalresourceidcontextkeyvaluepair0) in physicalResourceIdContext.enumerated() {
                    try physicalResourceIdContextContainer.encode(physicalresourceidcontextkeyvaluepair0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
                try physicalResourceIdContextContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let propertyDifferences = propertyDifferences {
            if !propertyDifferences.isEmpty {
                var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
                for (index0, propertydifference0) in propertyDifferences.enumerated() {
                    try propertyDifferencesContainer.encode(propertydifference0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
                try propertyDifferencesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        if containerValues.contains(.physicalResourceIdContext) {
            struct KeyVal0{struct member{}}
            let physicalResourceIdContextWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .physicalResourceIdContext)
            if let physicalResourceIdContextWrappedContainer = physicalResourceIdContextWrappedContainer {
                let physicalResourceIdContextContainer = try physicalResourceIdContextWrappedContainer.decodeIfPresent([CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair].self, forKey: .member)
                var physicalResourceIdContextBuffer:[CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]? = nil
                if let physicalResourceIdContextContainer = physicalResourceIdContextContainer {
                    physicalResourceIdContextBuffer = [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]()
                    for structureContainer0 in physicalResourceIdContextContainer {
                        physicalResourceIdContextBuffer?.append(structureContainer0)
                    }
                }
                physicalResourceIdContext = physicalResourceIdContextBuffer
            } else {
                physicalResourceIdContext = []
            }
        } else {
            physicalResourceIdContext = nil
        }
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let expectedPropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedProperties)
        expectedProperties = expectedPropertiesDecoded
        let actualPropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actualProperties)
        actualProperties = actualPropertiesDecoded
        if containerValues.contains(.propertyDifferences) {
            struct KeyVal0{struct member{}}
            let propertyDifferencesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .propertyDifferences)
            if let propertyDifferencesWrappedContainer = propertyDifferencesWrappedContainer {
                let propertyDifferencesContainer = try propertyDifferencesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.PropertyDifference].self, forKey: .member)
                var propertyDifferencesBuffer:[CloudFormationClientTypes.PropertyDifference]? = nil
                if let propertyDifferencesContainer = propertyDifferencesContainer {
                    propertyDifferencesBuffer = [CloudFormationClientTypes.PropertyDifference]()
                    for structureContainer0 in propertyDifferencesContainer {
                        propertyDifferencesBuffer?.append(structureContainer0)
                    }
                }
                propertyDifferences = propertyDifferencesBuffer
            } else {
                propertyDifferences = []
            }
        } else {
            propertyDifferences = nil
        }
        let stackResourceDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftStatus.self, forKey: .stackResourceDriftStatus)
        stackResourceDriftStatus = stackResourceDriftStatusDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains the drift information for a resource that has been checked for drift. This includes actual and expected property values for resources in which CloudFormation has detected drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html). Resources that don't currently support drift detection can't be checked. For a list of resources that support drift detection, see [Resources that Support Drift Detection](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html). Use [DetectStackResourceDrift] to detect drift on individual resources, or [DetectStackDrift] to detect drift on all resources in a given stack that support drift detection.
    public struct StackResourceDrift: Swift.Equatable {
        /// A JSON structure containing the actual property values of the stack resource. For resources whose StackResourceDriftStatus is DELETED, this structure will not be present.
        public var actualProperties: Swift.String?
        /// A JSON structure containing the expected property values of the stack resource, as defined in the stack template and any values specified as template parameters. For resources whose StackResourceDriftStatus is DELETED, this structure will not be present.
        public var expectedProperties: Swift.String?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Context information that enables CloudFormation to uniquely identify a resource. CloudFormation uses context key-value pairs in cases where a resource's logical and physical IDs aren't enough to uniquely identify that resource. Each context key-value pair specifies a unique resource that contains the targeted resource.
        public var physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]?
        /// A collection of the resource properties whose actual values differ from their expected values. These will be present only for resources whose StackResourceDriftStatus is MODIFIED.
        public var propertyDifferences: [CloudFormationClientTypes.PropertyDifference]?
        /// The type of the resource.
        /// This member is required.
        public var resourceType: Swift.String?
        /// The ID of the stack.
        /// This member is required.
        public var stackId: Swift.String?
        /// Status of the resource's actual configuration compared to its expected configuration.
        ///
        /// * DELETED: The resource differs from its expected template configuration because the resource has been deleted.
        ///
        /// * MODIFIED: One or more resource properties differ from their expected values (as defined in the stack template and any values specified as template parameters).
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected template configuration.
        ///
        /// * NOT_CHECKED: CloudFormation does not currently return this value.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?
        /// Time at which CloudFormation performed drift detection on the stack resource.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init (
            actualProperties: Swift.String? = nil,
            expectedProperties: Swift.String? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]? = nil,
            propertyDifferences: [CloudFormationClientTypes.PropertyDifference]? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.actualProperties = actualProperties
            self.expectedProperties = expectedProperties
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.physicalResourceIdContext = physicalResourceIdContext
            self.propertyDifferences = propertyDifferences
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackResourceDriftStatus = stackResourceDriftStatus
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackResourceDriftInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackResourceDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftStatus.self, forKey: .stackResourceDriftStatus)
        stackResourceDriftStatus = stackResourceDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastCheckTimestamp)
        lastCheckTimestamp = lastCheckTimestampDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains information about whether the resource's actual configuration differs, or has drifted, from its expected configuration.
    public struct StackResourceDriftInformation: Swift.Equatable {
        /// When CloudFormation last checked if the resource had drifted from its expected configuration.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the resource's actual configuration compared to its expected configuration
        ///
        /// * DELETED: The resource differs from its expected configuration in that it has been deleted.
        ///
        /// * MODIFIED: The resource differs from its expected configuration.
        ///
        /// * NOT_CHECKED: CloudFormation has not checked if the resource differs from its expected configuration. Any resources that do not currently support drift detection have a status of NOT_CHECKED. For more information, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html).
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected configuration.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackResourceDriftStatus = stackResourceDriftStatus
        }
    }

}

extension CloudFormationClientTypes.StackResourceDriftInformationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackResourceDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftStatus.self, forKey: .stackResourceDriftStatus)
        stackResourceDriftStatus = stackResourceDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastCheckTimestamp)
        lastCheckTimestamp = lastCheckTimestampDecoded
    }
}

extension CloudFormationClientTypes {
    /// Summarizes information about whether the resource's actual configuration differs, or has drifted, from its expected configuration.
    public struct StackResourceDriftInformationSummary: Swift.Equatable {
        /// When CloudFormation last checked if the resource had drifted from its expected configuration.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the resource's actual configuration compared to its expected configuration.
        ///
        /// * DELETED: The resource differs from its expected configuration in that it has been deleted.
        ///
        /// * MODIFIED: The resource differs from its expected configuration.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the resource differs from its expected configuration. Any resources that don't currently support drift detection have a status of NOT_CHECKED. For more information, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html). If you performed an [ContinueUpdateRollback] operation on a stack, any resources included in ResourcesToSkip will also have a status of NOT_CHECKED. For more information about skipping resources during rollback operations, see [Continue Rolling Back an Update](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html) in the CloudFormation User Guide.
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected configuration.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackResourceDriftStatus = stackResourceDriftStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackResourceDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case inSync
        case modified
        case notChecked
        case sdkUnknown(Swift.String)

        public static var allCases: [StackResourceDriftStatus] {
            return [
                .deleted,
                .inSync,
                .modified,
                .notChecked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .inSync: return "IN_SYNC"
            case .modified: return "MODIFIED"
            case .notChecked: return "NOT_CHECKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackResourceDriftStatus(rawValue: rawValue) ?? StackResourceDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackResourceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encodeTimestamp(lastUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformationSummary.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains high-level information about the specified stack resource.
    public struct StackResourceSummary: Swift.Equatable {
        /// Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackResourceDriftInformationSummary?
        /// Time the status was updated.
        /// This member is required.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of the resource.
        public var physicalResourceId: Swift.String?
        /// Current status of the resource.
        /// This member is required.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. (For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.)
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformationSummary? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.driftInformation = driftInformation
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.StackSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case capabilities = "Capabilities"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case stackSetARN = "StackSetARN"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
        case tags = "Tags"
        case templateBody = "TemplateBody"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            if !organizationalUnitIds.isEmpty {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                    try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                try organizationalUnitIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackSetARN = stackSetARN {
            try container.encode(stackSetARN, forKey: ClientRuntime.Key("StackSetARN"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let stackSetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetARN)
        stackSetARN = stackSetARNDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
        let managedExecutionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ManagedExecution.self, forKey: .managedExecution)
        managedExecution = managedExecutionDecoded
    }
}

extension CloudFormationClientTypes {
    /// A structure that contains information about a stack set. A stack set enables you to provision stacks into Amazon Web Services accounts and across Regions by using a single CloudFormation template. In the stack set, you specify the template to use, in addition to any parameters and capabilities that the template requires.
    public struct StackSet: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the IAM role used to create or update the stack set. Use customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Prerequisites: Granting Permissions for Stack Set Operations](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide.
        public var administrationRoleARN: Swift.String?
        /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).
        public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
        /// The capabilities that are allowed in the stack set. Some stack set templates might include resources that can affect permissions in your Amazon Web Services account—for example, by creating new Identity and Access Management (IAM) users. For more information, see [Acknowledging IAM Resources in CloudFormation Templates.](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities)
        public var capabilities: [CloudFormationClientTypes.Capability]?
        /// A description of the stack set that you specify when the stack set is created or updated.
        public var description: Swift.String?
        /// The name of the IAM execution role used to create or update the stack set. Use customized execution roles to control which stack resources users and groups can include in their stack sets.
        public var executionRoleName: Swift.String?
        /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
        public var managedExecution: CloudFormationClientTypes.ManagedExecution?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitIds: [Swift.String]?
        /// A list of input parameters for a stack set.
        public var parameters: [CloudFormationClientTypes.Parameter]?
        /// Describes how the IAM roles required for stack set operations are created.
        ///
        /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
        ///
        /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
        public var permissionModel: CloudFormationClientTypes.PermissionModels?
        /// The Amazon Resource Name (ARN) of the stack set.
        public var stackSetARN: Swift.String?
        /// Detailed information about the drift status of the stack set. For stack sets, contains information about the last completed drift operation performed on the stack set. Information about drift operations currently in progress isn't included.
        public var stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails?
        /// The ID of the stack set.
        public var stackSetId: Swift.String?
        /// The name that's associated with the stack set.
        public var stackSetName: Swift.String?
        /// The status of the stack set.
        public var status: CloudFormationClientTypes.StackSetStatus?
        /// A list of tags that specify information about the stack set. A maximum number of 50 tags can be specified.
        public var tags: [CloudFormationClientTypes.Tag]?
        /// The structure that contains the body of the template that was used to create or update the stack set.
        public var templateBody: Swift.String?

        public init (
            administrationRoleARN: Swift.String? = nil,
            autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
            capabilities: [CloudFormationClientTypes.Capability]? = nil,
            description: Swift.String? = nil,
            executionRoleName: Swift.String? = nil,
            managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
            organizationalUnitIds: [Swift.String]? = nil,
            parameters: [CloudFormationClientTypes.Parameter]? = nil,
            permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
            stackSetARN: Swift.String? = nil,
            stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails? = nil,
            stackSetId: Swift.String? = nil,
            stackSetName: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetStatus? = nil,
            tags: [CloudFormationClientTypes.Tag]? = nil,
            templateBody: Swift.String? = nil
        )
        {
            self.administrationRoleARN = administrationRoleARN
            self.autoDeployment = autoDeployment
            self.capabilities = capabilities
            self.description = description
            self.executionRoleName = executionRoleName
            self.managedExecution = managedExecution
            self.organizationalUnitIds = organizationalUnitIds
            self.parameters = parameters
            self.permissionModel = permissionModel
            self.stackSetARN = stackSetARN
            self.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails
            self.stackSetId = stackSetId
            self.stackSetName = stackSetName
            self.status = status
            self.tags = tags
            self.templateBody = templateBody
        }
    }

}

extension CloudFormationClientTypes.StackSetDriftDetectionDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftDetectionStatus = "DriftDetectionStatus"
        case driftStatus = "DriftStatus"
        case driftedStackInstancesCount = "DriftedStackInstancesCount"
        case failedStackInstancesCount = "FailedStackInstancesCount"
        case inProgressStackInstancesCount = "InProgressStackInstancesCount"
        case inSyncStackInstancesCount = "InSyncStackInstancesCount"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case totalStackInstancesCount = "TotalStackInstancesCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftDetectionStatus = driftDetectionStatus {
            try container.encode(driftDetectionStatus, forKey: ClientRuntime.Key("DriftDetectionStatus"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if driftedStackInstancesCount != 0 {
            try container.encode(driftedStackInstancesCount, forKey: ClientRuntime.Key("DriftedStackInstancesCount"))
        }
        if failedStackInstancesCount != 0 {
            try container.encode(failedStackInstancesCount, forKey: ClientRuntime.Key("FailedStackInstancesCount"))
        }
        if inProgressStackInstancesCount != 0 {
            try container.encode(inProgressStackInstancesCount, forKey: ClientRuntime.Key("InProgressStackInstancesCount"))
        }
        if inSyncStackInstancesCount != 0 {
            try container.encode(inSyncStackInstancesCount, forKey: ClientRuntime.Key("InSyncStackInstancesCount"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if totalStackInstancesCount != 0 {
            try container.encode(totalStackInstancesCount, forKey: ClientRuntime.Key("TotalStackInstancesCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let driftDetectionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionStatus.self, forKey: .driftDetectionStatus)
        driftDetectionStatus = driftDetectionStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastDriftCheckTimestamp)
        lastDriftCheckTimestamp = lastDriftCheckTimestampDecoded
        let totalStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalStackInstancesCount)
        totalStackInstancesCount = totalStackInstancesCountDecoded
        let driftedStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .driftedStackInstancesCount)
        driftedStackInstancesCount = driftedStackInstancesCountDecoded
        let inSyncStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .inSyncStackInstancesCount)
        inSyncStackInstancesCount = inSyncStackInstancesCountDecoded
        let inProgressStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .inProgressStackInstancesCount)
        inProgressStackInstancesCount = inProgressStackInstancesCountDecoded
        let failedStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedStackInstancesCount)
        failedStackInstancesCount = failedStackInstancesCountDecoded
    }
}

extension CloudFormationClientTypes {
    /// Detailed information about the drift status of the stack set. For stack sets, contains information about the last completed drift operation performed on the stack set. Information about drift operations in-progress isn't included. For stack set operations, includes information about drift operations currently being performed on the stack set. For more information, see [Detecting unmanaged changes in stack sets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html) in the CloudFormation User Guide.
    public struct StackSetDriftDetectionDetails: Swift.Equatable {
        /// The status of the stack set drift detection operation.
        ///
        /// * COMPLETED: The drift detection operation completed without failing on any stack instances.
        ///
        /// * FAILED: The drift detection operation exceeded the specified failure tolerance.
        ///
        /// * PARTIAL_SUCCESS: The drift detection operation completed without exceeding the failure tolerance for the operation.
        ///
        /// * IN_PROGRESS: The drift detection operation is currently being performed.
        ///
        /// * STOPPED: The user has canceled the drift detection operation.
        public var driftDetectionStatus: CloudFormationClientTypes.StackSetDriftDetectionStatus?
        /// Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.
        ///
        /// * DRIFTED: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked the stack set for drift.
        ///
        /// * IN_SYNC: All of the stack instances belonging to the stack set stack match from the expected template and parameter configuration.
        public var driftStatus: CloudFormationClientTypes.StackSetDriftStatus?
        /// The number of stack instances that have drifted from the expected template and parameter configuration of the stack set. A stack instance is considered to have drifted if one or more of the resources in the associated stack don't match their expected configuration.
        public var driftedStackInstancesCount: Swift.Int
        /// The number of stack instances for which the drift detection operation failed.
        public var failedStackInstancesCount: Swift.Int
        /// The number of stack instances that are currently being checked for drift.
        public var inProgressStackInstancesCount: Swift.Int
        /// The number of stack instances which match the expected template and parameter configuration of the stack set.
        public var inSyncStackInstancesCount: Swift.Int
        /// Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be NULL for any stack set on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// The total number of stack instances belonging to this stack set. The total number of stack instances is equal to the total of:
        ///
        /// * Stack instances that match the stack set configuration.
        ///
        /// * Stack instances that have drifted from the stack set configuration.
        ///
        /// * Stack instances where the drift detection operation has failed.
        ///
        /// * Stack instances currently being checked for drift.
        public var totalStackInstancesCount: Swift.Int

        public init (
            driftDetectionStatus: CloudFormationClientTypes.StackSetDriftDetectionStatus? = nil,
            driftStatus: CloudFormationClientTypes.StackSetDriftStatus? = nil,
            driftedStackInstancesCount: Swift.Int = 0,
            failedStackInstancesCount: Swift.Int = 0,
            inProgressStackInstancesCount: Swift.Int = 0,
            inSyncStackInstancesCount: Swift.Int = 0,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            totalStackInstancesCount: Swift.Int = 0
        )
        {
            self.driftDetectionStatus = driftDetectionStatus
            self.driftStatus = driftStatus
            self.driftedStackInstancesCount = driftedStackInstancesCount
            self.failedStackInstancesCount = failedStackInstancesCount
            self.inProgressStackInstancesCount = inProgressStackInstancesCount
            self.inSyncStackInstancesCount = inSyncStackInstancesCount
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.totalStackInstancesCount = totalStackInstancesCount
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetDriftDetectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case partialSuccess
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetDriftDetectionStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .partialSuccess,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .partialSuccess: return "PARTIAL_SUCCESS"
            case .stopped: return "STOPPED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetDriftDetectionStatus(rawValue: rawValue) ?? StackSetDriftDetectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum StackSetDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drifted
        case inSync
        case notChecked
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetDriftStatus] {
            return [
                .drifted,
                .inSync,
                .notChecked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drifted: return "DRIFTED"
            case .inSync: return "IN_SYNC"
            case .notChecked: return "NOT_CHECKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetDriftStatus(rawValue: rawValue) ?? StackSetDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension StackSetNotEmptyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<StackSetNotEmptyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You can't yet delete this stack set, because it still contains one or more stack instances. Delete all stack instances from the stack set before deleting the stack set.
public struct StackSetNotEmptyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackSetNotEmptyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StackSetNotEmptyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StackSetNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<StackSetNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified stack set doesn't exist.
public struct StackSetNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackSetNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StackSetNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.StackSetOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case administrationRoleARN = "AdministrationRoleARN"
        case creationTimestamp = "CreationTimestamp"
        case deploymentTargets = "DeploymentTargets"
        case endTimestamp = "EndTimestamp"
        case executionRoleName = "ExecutionRoleName"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case retainStacks = "RetainStacks"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encodeTimestamp(creationTimestamp, format: .dateTime, forKey: ClientRuntime.Key("creationTimestamp"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let endTimestamp = endTimestamp {
            try container.encodeTimestamp(endTimestamp, format: .dateTime, forKey: ClientRuntime.Key("endTimestamp"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let retainStacks = retainStacks {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusDetails = statusDetails {
            try container.encode(statusDetails, forKey: ClientRuntime.Key("StatusDetails"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationAction.self, forKey: .action)
        action = actionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatus.self, forKey: .status)
        status = statusDecoded
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let retainStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retainStacks)
        retainStacks = retainStacksDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let endTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTimestamp)
        endTimestamp = endTimestampDecoded
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatusDetails.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
    }
}

extension CloudFormationClientTypes {
    /// The structure that contains information about a stack set operation.
    public struct StackSetOperation: Swift.Equatable {
        /// The type of stack set operation: CREATE, UPDATE, or DELETE. Create and delete operations affect only the specified stack set instances that are associated with the specified stack set. Update operations affect both the stack set itself, in addition to all associated stack set instances.
        public var action: CloudFormationClientTypes.StackSetOperationAction?
        /// The Amazon Resource Name (ARN) of the IAM role used to perform this stack set operation. Use customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Define Permissions for Multiple Administrators](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide.
        public var administrationRoleARN: Swift.String?
        /// The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.
        public var creationTimestamp: ClientRuntime.Date?
        /// [Service-managed permissions] The Organizations accounts affected by the stack operation.
        public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
        /// The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.
        public var endTimestamp: ClientRuntime.Date?
        /// The name of the IAM execution role used to create or update the stack set. Use customized execution roles to control which stack resources users and groups can include in their stack sets.
        public var executionRoleName: Swift.String?
        /// The unique ID of a stack set operation.
        public var operationId: Swift.String?
        /// The preferences for how CloudFormation performs this stack set operation.
        public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
        /// For stack set operations of action type DELETE, specifies whether to remove the stack instances from the specified stack set, but doesn't delete the stacks. You can't re-associate a retained stack, or add an existing, saved stack to a new stack set.
        public var retainStacks: Swift.Bool?
        /// Detailed information about the drift status of the stack set. This includes information about drift operations currently being performed on the stack set. This information will only be present for stack set operations whose Action type is DETECT_DRIFT. For more information, see [Detecting Unmanaged Changes in Stack Sets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html) in the CloudFormation User Guide.
        public var stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails?
        /// The ID of the stack set.
        public var stackSetId: Swift.String?
        /// The status of the operation.
        ///
        /// * FAILED: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to FAILED. This in turn sets the status of the operation as a whole to FAILED, and CloudFormation cancels the operation in any remaining Regions.
        ///
        /// * QUEUED: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the [stack set operation status codes](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes) in the CloudFormation User Guide.
        ///
        /// * RUNNING: The operation is currently being performed.
        ///
        /// * STOPPED: The user has canceled the operation.
        ///
        /// * STOPPING: The operation is in the process of stopping, at user request.
        ///
        /// * SUCCEEDED: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.
        public var status: CloudFormationClientTypes.StackSetOperationStatus?
        /// Detailed information about the StackSet operation.
        public var statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails?
        /// The status of the operation in details.
        public var statusReason: Swift.String?

        public init (
            action: CloudFormationClientTypes.StackSetOperationAction? = nil,
            administrationRoleARN: Swift.String? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
            endTimestamp: ClientRuntime.Date? = nil,
            executionRoleName: Swift.String? = nil,
            operationId: Swift.String? = nil,
            operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
            retainStacks: Swift.Bool? = nil,
            stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationStatus? = nil,
            statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.administrationRoleARN = administrationRoleARN
            self.creationTimestamp = creationTimestamp
            self.deploymentTargets = deploymentTargets
            self.endTimestamp = endTimestamp
            self.executionRoleName = executionRoleName
            self.operationId = operationId
            self.operationPreferences = operationPreferences
            self.retainStacks = retainStacks
            self.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails
            self.stackSetId = stackSetId
            self.status = status
            self.statusDetails = statusDetails
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case delete
        case detectDrift
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationAction] {
            return [
                .create,
                .delete,
                .detectDrift,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .delete: return "DELETE"
            case .detectDrift: return "DETECT_DRIFT"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationAction(rawValue: rawValue) ?? StackSetOperationAction.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationPreferences: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureToleranceCount = "FailureToleranceCount"
        case failureTolerancePercentage = "FailureTolerancePercentage"
        case maxConcurrentCount = "MaxConcurrentCount"
        case maxConcurrentPercentage = "MaxConcurrentPercentage"
        case regionConcurrencyType = "RegionConcurrencyType"
        case regionOrder = "RegionOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureToleranceCount = failureToleranceCount {
            try container.encode(failureToleranceCount, forKey: ClientRuntime.Key("FailureToleranceCount"))
        }
        if let failureTolerancePercentage = failureTolerancePercentage {
            try container.encode(failureTolerancePercentage, forKey: ClientRuntime.Key("FailureTolerancePercentage"))
        }
        if let maxConcurrentCount = maxConcurrentCount {
            try container.encode(maxConcurrentCount, forKey: ClientRuntime.Key("MaxConcurrentCount"))
        }
        if let maxConcurrentPercentage = maxConcurrentPercentage {
            try container.encode(maxConcurrentPercentage, forKey: ClientRuntime.Key("MaxConcurrentPercentage"))
        }
        if let regionConcurrencyType = regionConcurrencyType {
            try container.encode(regionConcurrencyType, forKey: ClientRuntime.Key("RegionConcurrencyType"))
        }
        if let regionOrder = regionOrder {
            if !regionOrder.isEmpty {
                var regionOrderContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionOrder"))
                for (index0, region0) in regionOrder.enumerated() {
                    try regionOrderContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionOrderContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionOrder"))
                try regionOrderContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionConcurrencyTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegionConcurrencyType.self, forKey: .regionConcurrencyType)
        regionConcurrencyType = regionConcurrencyTypeDecoded
        if containerValues.contains(.regionOrder) {
            struct KeyVal0{struct member{}}
            let regionOrderWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regionOrder)
            if let regionOrderWrappedContainer = regionOrderWrappedContainer {
                let regionOrderContainer = try regionOrderWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionOrderBuffer:[Swift.String]? = nil
                if let regionOrderContainer = regionOrderContainer {
                    regionOrderBuffer = [Swift.String]()
                    for stringContainer0 in regionOrderContainer {
                        regionOrderBuffer?.append(stringContainer0)
                    }
                }
                regionOrder = regionOrderBuffer
            } else {
                regionOrder = []
            }
        } else {
            regionOrder = nil
        }
        let failureToleranceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureToleranceCount)
        failureToleranceCount = failureToleranceCountDecoded
        let failureTolerancePercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureTolerancePercentage)
        failureTolerancePercentage = failureTolerancePercentageDecoded
        let maxConcurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentCount)
        maxConcurrentCount = maxConcurrentCountDecoded
        let maxConcurrentPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentPercentage)
        maxConcurrentPercentage = maxConcurrentPercentageDecoded
    }
}

extension CloudFormationClientTypes {
    /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    public struct StackSetOperationPreferences: Swift.Equatable {
        /// The number of accounts, per Region, for which this operation can fail before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions. Conditional: You must specify either FailureToleranceCount or FailureTolerancePercentage (but not both). By default, 0 is specified.
        public var failureToleranceCount: Swift.Int?
        /// The percentage of accounts, per Region, for which this stack operation can fail before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions. When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. Conditional: You must specify either FailureToleranceCount or FailureTolerancePercentage, but not both. By default, 0 is specified.
        public var failureTolerancePercentage: Swift.Int?
        /// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of FailureToleranceCount.MaxConcurrentCount is at most one more than the FailureToleranceCount. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Conditional: You must specify either MaxConcurrentCount or MaxConcurrentPercentage, but not both. By default, 1 is specified.
        public var maxConcurrentCount: Swift.Int?
        /// The maximum percentage of accounts in which to perform this operation at one time. When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Conditional: You must specify either MaxConcurrentCount or MaxConcurrentPercentage, but not both. By default, 1 is specified.
        public var maxConcurrentPercentage: Swift.Int?
        /// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
        public var regionConcurrencyType: CloudFormationClientTypes.RegionConcurrencyType?
        /// The order of the Regions in where you want to perform the stack operation.
        public var regionOrder: [Swift.String]?

        public init (
            failureToleranceCount: Swift.Int? = nil,
            failureTolerancePercentage: Swift.Int? = nil,
            maxConcurrentCount: Swift.Int? = nil,
            maxConcurrentPercentage: Swift.Int? = nil,
            regionConcurrencyType: CloudFormationClientTypes.RegionConcurrencyType? = nil,
            regionOrder: [Swift.String]? = nil
        )
        {
            self.failureToleranceCount = failureToleranceCount
            self.failureTolerancePercentage = failureTolerancePercentage
            self.maxConcurrentCount = maxConcurrentCount
            self.maxConcurrentPercentage = maxConcurrentPercentage
            self.regionConcurrencyType = regionConcurrencyType
            self.regionOrder = regionOrder
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationResultStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case pending
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationResultStatus] {
            return [
                .cancelled,
                .failed,
                .pending,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationResultStatus(rawValue: rawValue) ?? StackSetOperationResultStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationResultSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case accountGateResult = "AccountGateResult"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let accountGateResult = accountGateResult {
            try container.encode(accountGateResult, forKey: ClientRuntime.Key("AccountGateResult"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationResultStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let accountGateResultDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AccountGateResult.self, forKey: .accountGateResult)
        accountGateResult = accountGateResultDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
    }
}

extension CloudFormationClientTypes {
    /// The structure that contains information about a specified operation's results for a given account in a given Region.
    public struct StackSetOperationResultSummary: Swift.Equatable {
        /// [Self-managed permissions] The name of the Amazon Web Services account for this operation result.
        public var account: Swift.String?
        /// The results of the account gate function CloudFormation invokes, if present, before proceeding with stack set operations in an account.
        public var accountGateResult: CloudFormationClientTypes.AccountGateResult?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitId: Swift.String?
        /// The name of the Amazon Web Services Region for this operation result.
        public var region: Swift.String?
        /// The result status of the stack set operation for the given account in the given Region.
        ///
        /// * CANCELLED: The operation in the specified account and Region has been canceled. This is either because a user has stopped the stack set operation, or because the failure tolerance of the stack set operation has been exceeded.
        ///
        /// * FAILED: The operation in the specified account and Region failed. If the stack set operation fails in enough accounts within a Region, the failure tolerance for the stack set operation as a whole might be exceeded.
        ///
        /// * RUNNING: The operation in the specified account and Region is currently in progress.
        ///
        /// * PENDING: The operation in the specified account and Region has yet to start.
        ///
        /// * SUCCEEDED: The operation in the specified account and Region completed successfully.
        public var status: CloudFormationClientTypes.StackSetOperationResultStatus?
        /// The reason for the assigned result status.
        public var statusReason: Swift.String?

        public init (
            account: Swift.String? = nil,
            accountGateResult: CloudFormationClientTypes.AccountGateResult? = nil,
            organizationalUnitId: Swift.String? = nil,
            region: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationResultStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.accountGateResult = accountGateResult
            self.organizationalUnitId = organizationalUnitId
            self.region = region
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case queued
        case running
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationStatus] {
            return [
                .failed,
                .queued,
                .running,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .queued: return "QUEUED"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationStatus(rawValue: rawValue) ?? StackSetOperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationStatusDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedStackInstancesCount = "FailedStackInstancesCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if failedStackInstancesCount != 0 {
            try container.encode(failedStackInstancesCount, forKey: ClientRuntime.Key("FailedStackInstancesCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedStackInstancesCount)
        failedStackInstancesCount = failedStackInstancesCountDecoded
    }
}

extension CloudFormationClientTypes {
    /// Detailed information about the StackSet operation.
    public struct StackSetOperationStatusDetails: Swift.Equatable {
        /// The number of stack instances for which the StackSet operation failed.
        public var failedStackInstancesCount: Swift.Int

        public init (
            failedStackInstancesCount: Swift.Int = 0
        )
        {
            self.failedStackInstancesCount = failedStackInstancesCount
        }
    }

}

extension CloudFormationClientTypes.StackSetOperationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case creationTimestamp = "CreationTimestamp"
        case endTimestamp = "EndTimestamp"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encodeTimestamp(creationTimestamp, format: .dateTime, forKey: ClientRuntime.Key("creationTimestamp"))
        }
        if let endTimestamp = endTimestamp {
            try container.encodeTimestamp(endTimestamp, format: .dateTime, forKey: ClientRuntime.Key("endTimestamp"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusDetails = statusDetails {
            try container.encode(statusDetails, forKey: ClientRuntime.Key("StatusDetails"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationAction.self, forKey: .action)
        action = actionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let endTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTimestamp)
        endTimestamp = endTimestampDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatusDetails.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
    }
}

extension CloudFormationClientTypes {
    /// The structures that contain summary information about the specified operation.
    public struct StackSetOperationSummary: Swift.Equatable {
        /// The type of operation: CREATE, UPDATE, or DELETE. Create and delete operations affect only the specified stack instances that are associated with the specified stack set. Update operations affect both the stack set itself and all associated stack set instances.
        public var action: CloudFormationClientTypes.StackSetOperationAction?
        /// The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.
        public var creationTimestamp: ClientRuntime.Date?
        /// The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.
        public var endTimestamp: ClientRuntime.Date?
        /// The unique ID of the stack set operation.
        public var operationId: Swift.String?
        /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
        public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
        /// The overall status of the operation.
        ///
        /// * FAILED: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to FAILED. This in turn sets the status of the operation as a whole to FAILED, and CloudFormation cancels the operation in any remaining Regions.
        ///
        /// * QUEUED: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the [stack set operation status codes](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes) in the CloudFormation User Guide.
        ///
        /// * RUNNING: The operation is currently being performed.
        ///
        /// * STOPPED: The user has canceled the operation.
        ///
        /// * STOPPING: The operation is in the process of stopping, at user request.
        ///
        /// * SUCCEEDED: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.
        public var status: CloudFormationClientTypes.StackSetOperationStatus?
        /// Detailed information about the stack set operation.
        public var statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails?
        /// The status of the operation in details.
        public var statusReason: Swift.String?

        public init (
            action: CloudFormationClientTypes.StackSetOperationAction? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            endTimestamp: ClientRuntime.Date? = nil,
            operationId: Swift.String? = nil,
            operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
            status: CloudFormationClientTypes.StackSetOperationStatus? = nil,
            statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.creationTimestamp = creationTimestamp
            self.endTimestamp = endTimestamp
            self.operationId = operationId
            self.operationPreferences = operationPreferences
            self.status = status
            self.statusDetails = statusDetails
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetStatus] {
            return [
                .active,
                .deleted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetStatus(rawValue: rawValue) ?? StackSetStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoDeployment = "AutoDeployment"
        case description = "Description"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case managedExecution = "ManagedExecution"
        case permissionModel = "PermissionModel"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastDriftCheckTimestamp)
        lastDriftCheckTimestamp = lastDriftCheckTimestampDecoded
        let managedExecutionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ManagedExecution.self, forKey: .managedExecution)
        managedExecution = managedExecutionDecoded
    }
}

extension CloudFormationClientTypes {
    /// The structures that contain summary information about the specified stack set.
    public struct StackSetSummary: Swift.Equatable {
        /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).
        public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
        /// A description of the stack set that you specify when the stack set is created or updated.
        public var description: Swift.String?
        /// Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.
        ///
        /// * DRIFTED: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked the stack set for drift.
        ///
        /// * IN_SYNC: All the stack instances belonging to the stack set stack match from the expected template and parameter configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        public var driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be NULL for any stack set on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
        public var managedExecution: CloudFormationClientTypes.ManagedExecution?
        /// Describes how the IAM roles required for stack set operations are created.
        ///
        /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
        ///
        /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
        public var permissionModel: CloudFormationClientTypes.PermissionModels?
        /// The ID of the stack set.
        public var stackSetId: Swift.String?
        /// The name of the stack set.
        public var stackSetName: Swift.String?
        /// The status of the stack set.
        public var status: CloudFormationClientTypes.StackSetStatus?

        public init (
            autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
            description: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
            permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
            stackSetId: Swift.String? = nil,
            stackSetName: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetStatus? = nil
        )
        {
            self.autoDeployment = autoDeployment
            self.description = description
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.managedExecution = managedExecution
            self.permissionModel = permissionModel
            self.stackSetId = stackSetId
            self.stackSetName = stackSetName
            self.status = status
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case importComplete
        case importInProgress
        case importRollbackComplete
        case importRollbackFailed
        case importRollbackInProgress
        case reviewInProgress
        case rollbackComplete
        case rollbackFailed
        case rollbackInProgress
        case updateComplete
        case updateCompleteCleanupInProgress
        case updateFailed
        case updateInProgress
        case updateRollbackComplete
        case updateRollbackCompleteCleanupInProgress
        case updateRollbackFailed
        case updateRollbackInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [StackStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .importComplete,
                .importInProgress,
                .importRollbackComplete,
                .importRollbackFailed,
                .importRollbackInProgress,
                .reviewInProgress,
                .rollbackComplete,
                .rollbackFailed,
                .rollbackInProgress,
                .updateComplete,
                .updateCompleteCleanupInProgress,
                .updateFailed,
                .updateInProgress,
                .updateRollbackComplete,
                .updateRollbackCompleteCleanupInProgress,
                .updateRollbackFailed,
                .updateRollbackInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .importComplete: return "IMPORT_COMPLETE"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .importRollbackComplete: return "IMPORT_ROLLBACK_COMPLETE"
            case .importRollbackFailed: return "IMPORT_ROLLBACK_FAILED"
            case .importRollbackInProgress: return "IMPORT_ROLLBACK_IN_PROGRESS"
            case .reviewInProgress: return "REVIEW_IN_PROGRESS"
            case .rollbackComplete: return "ROLLBACK_COMPLETE"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .rollbackInProgress: return "ROLLBACK_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateCompleteCleanupInProgress: return "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateRollbackComplete: return "UPDATE_ROLLBACK_COMPLETE"
            case .updateRollbackCompleteCleanupInProgress: return "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS"
            case .updateRollbackFailed: return "UPDATE_ROLLBACK_FAILED"
            case .updateRollbackInProgress: return "UPDATE_ROLLBACK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackStatus(rawValue: rawValue) ?? StackStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case driftInformation = "DriftInformation"
        case lastUpdatedTime = "LastUpdatedTime"
        case parentId = "ParentId"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case templateDescription = "TemplateDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("creationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encodeTimestamp(deletionTime, format: .dateTime, forKey: ClientRuntime.Key("deletionTime"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encodeTimestamp(lastUpdatedTime, format: .dateTime, forKey: ClientRuntime.Key("lastUpdatedTime"))
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let templateDescription = templateDescription {
            try container.encode(templateDescription, forKey: ClientRuntime.Key("TemplateDescription"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let deletionTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .deletionTime)
        deletionTime = deletionTimeDecoded
        let stackStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackStatus.self, forKey: .stackStatus)
        stackStatus = stackStatusDecoded
        let stackStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackStatusReason)
        stackStatusReason = stackStatusReasonDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftInformationSummary.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
    }
}

extension CloudFormationClientTypes {
    /// The StackSummary Data Type
    public struct StackSummary: Swift.Equatable {
        /// The time the stack was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time the stack was deleted.
        public var deletionTime: ClientRuntime.Date?
        /// Summarizes information about whether a stack's actual configuration differs, or has drifted, from it's expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackDriftInformationSummary?
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the direct parent of this stack. For the first level of nested stacks, the root stack is also the parent stack. For more information, see [Working with Nested Stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var parentId: Swift.String?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the top-level stack to which the nested stack ultimately belongs. For more information, see [Working with Nested Stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var rootId: Swift.String?
        /// Unique stack identifier.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        /// This member is required.
        public var stackName: Swift.String?
        /// The current status of the stack.
        /// This member is required.
        public var stackStatus: CloudFormationClientTypes.StackStatus?
        /// Success/Failure message associated with the stack status.
        public var stackStatusReason: Swift.String?
        /// The template description of the template used to create the stack.
        public var templateDescription: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            deletionTime: ClientRuntime.Date? = nil,
            driftInformation: CloudFormationClientTypes.StackDriftInformationSummary? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            parentId: Swift.String? = nil,
            rootId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            stackStatus: CloudFormationClientTypes.StackStatus? = nil,
            stackStatusReason: Swift.String? = nil,
            templateDescription: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.driftInformation = driftInformation
            self.lastUpdatedTime = lastUpdatedTime
            self.parentId = parentId
            self.rootId = rootId
            self.stackId = stackId
            self.stackName = stackName
            self.stackStatus = stackStatus
            self.stackStatusReason = stackStatusReason
            self.templateDescription = templateDescription
        }
    }

}

extension StaleRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<StaleRequestExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Another operation has been performed on this stack set since the specified operation was performed.
public struct StaleRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StaleRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StaleRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StopStackSetOperationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("StopStackSetOperation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopStackSetOperationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopStackSetOperationInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The ID of the stack operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name or unique ID of the stack set that you want to stop the operation for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

struct StopStackSetOperationInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension StopStackSetOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension StopStackSetOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StopStackSetOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotFoundException" : self = .operationNotFoundException(try OperationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopStackSetOperationOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationNotFoundException(OperationNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopStackSetOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopStackSetOperationOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudFormationClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes {
    /// The Tag type enables you to specify a key-value pair that can be used to store information about an CloudFormation stack.
    public struct Tag: Swift.Equatable {
        /// Required. A string used to identify this tag. You can specify a maximum of 128 characters for a tag key. Tags owned by Amazon Web Services (Amazon Web Services) have the reserved prefix: aws:.
        /// This member is required.
        public var key: Swift.String?
        /// Required. A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFormationClientTypes.TemplateParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case noEcho = "NoEcho"
        case parameterKey = "ParameterKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let noEcho = noEcho {
            try container.encode(noEcho, forKey: ClientRuntime.Key("NoEcho"))
        }
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterKey)
        parameterKey = parameterKeyDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let noEchoDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noEcho)
        noEcho = noEchoDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension CloudFormationClientTypes {
    /// The TemplateParameter data type.
    public struct TemplateParameter: Swift.Equatable {
        /// The default value associated with the parameter.
        public var defaultValue: Swift.String?
        /// User defined description associated with the parameter.
        public var description: Swift.String?
        /// Flag indicating whether the parameter should be displayed as plain text in logs and UIs.
        public var noEcho: Swift.Bool?
        /// The name associated with the parameter.
        public var parameterKey: Swift.String?

        public init (
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            noEcho: Swift.Bool? = nil,
            parameterKey: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.noEcho = noEcho
            self.parameterKey = parameterKey
        }
    }

}

extension CloudFormationClientTypes {
    public enum TemplateStage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case original
        case processed
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateStage] {
            return [
                .original,
                .processed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .original: return "Original"
            case .processed: return "Processed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemplateStage(rawValue: rawValue) ?? TemplateStage.sdkUnknown(rawValue)
        }
    }
}

extension TestTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let logDeliveryBucket = logDeliveryBucket {
            try container.encode(logDeliveryBucket, forKey: ClientRuntime.Key("LogDeliveryBucket"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("TestType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension TestTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TestTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var arn: Swift.String?
    /// The S3 bucket to which CloudFormation delivers the contract test execution logs. CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of PASSED or FAILED. The user calling TestType must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:
    ///
    /// * GetObject
    ///
    /// * PutObject
    ///
    ///
    /// For more information, see [Actions, Resources, and Condition Keys for Amazon S3](https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html) in the Amazon Web Services Identity and Access Management User Guide.
    public var logDeliveryBucket: Swift.String?
    /// The type of the extension to test. Conditional: You must specify Arn, or TypeName and Type.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension to test. Conditional: You must specify Arn, or TypeName and Type.
    public var typeName: Swift.String?
    /// The version of the extension to test. You can specify the version id with either Arn, or with TypeName and Type. If you don't specify a version, CloudFormation uses the default version of the extension in this account and region for testing.
    public var versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        logDeliveryBucket: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.logDeliveryBucket = logDeliveryBucket
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

struct TestTypeInputBody: Swift.Equatable {
    let arn: Swift.String?
    let type: CloudFormationClientTypes.ThirdPartyType?
    let typeName: Swift.String?
    let versionId: Swift.String?
    let logDeliveryBucket: Swift.String?
}

extension TestTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case logDeliveryBucket = "LogDeliveryBucket"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let logDeliveryBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logDeliveryBucket)
        logDeliveryBucket = logDeliveryBucketDecoded
    }
}

extension TestTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TestTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TestTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TestTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.typeVersionArn = output.typeVersionArn
        } else {
            self.typeVersionArn = nil
        }
    }
}

public struct TestTypeOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension.
    public var typeVersionArn: Swift.String?

    public init (
        typeVersionArn: Swift.String? = nil
    )
    {
        self.typeVersionArn = typeVersionArn
    }
}

struct TestTypeOutputResponseBody: Swift.Equatable {
    let typeVersionArn: Swift.String?
}

extension TestTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case typeVersionArn = "TypeVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TestTypeResult"))
        let typeVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeVersionArn)
        typeVersionArn = typeVersionArnDecoded
    }
}

extension CloudFormationClientTypes {
    public enum ThirdPartyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hook
        case module
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [ThirdPartyType] {
            return [
                .hook,
                .module,
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hook: return "HOOK"
            case .module: return "MODULE"
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThirdPartyType(rawValue: rawValue) ?? ThirdPartyType.sdkUnknown(rawValue)
        }
    }
}

extension TokenAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TokenAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A client request token already exists.
public struct TokenAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TokenAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TokenAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.TypeConfigurationDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case arn = "Arn"
        case configuration = "Configuration"
        case isDefaultConfiguration = "IsDefaultConfiguration"
        case lastUpdated = "LastUpdated"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alias = alias {
            try container.encode(alias, forKey: ClientRuntime.Key("Alias"))
        }
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let isDefaultConfiguration = isDefaultConfiguration {
            try container.encode(isDefaultConfiguration, forKey: ClientRuntime.Key("IsDefaultConfiguration"))
        }
        if let lastUpdated = lastUpdated {
            try container.encodeTimestamp(lastUpdated, format: .dateTime, forKey: ClientRuntime.Key("lastUpdated"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let isDefaultConfigurationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultConfiguration)
        isDefaultConfiguration = isDefaultConfigurationDecoded
    }
}

extension CloudFormationClientTypes {
    /// Detailed information concerning the specification of a CloudFormation extension in a given account and region. For more information, see [Configuring extensions at the account level](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration) in the CloudFormation User Guide.
    public struct TypeConfigurationDetails: Swift.Equatable {
        /// The alias specified for this configuration, if one was specified when the configuration was set.
        public var alias: Swift.String?
        /// The Amazon Resource Name (ARN) for the configuration data, in this account and region.
        public var arn: Swift.String?
        /// A JSON string specifying the configuration data for the extension, in this account and region. If a configuration hasn't been set for a specified extension, CloudFormation returns {}.
        public var configuration: Swift.String?
        /// Whether this configuration data is the default configuration for the extension.
        public var isDefaultConfiguration: Swift.Bool?
        /// When the configuration data was last updated for this extension. If a configuration hasn't been set for a specified extension, CloudFormation returns null.
        public var lastUpdated: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the extension, in this account and region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and region.
        public var typeArn: Swift.String?
        /// The name of the extension.
        public var typeName: Swift.String?

        public init (
            alias: Swift.String? = nil,
            arn: Swift.String? = nil,
            configuration: Swift.String? = nil,
            isDefaultConfiguration: Swift.Bool? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            typeArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.alias = alias
            self.arn = arn
            self.configuration = configuration
            self.isDefaultConfiguration = isDefaultConfiguration
            self.lastUpdated = lastUpdated
            self.typeArn = typeArn
            self.typeName = typeName
        }
    }

}

extension CloudFormationClientTypes.TypeConfigurationIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case typeArn = "TypeArn"
        case typeConfigurationAlias = "TypeConfigurationAlias"
        case typeConfigurationArn = "TypeConfigurationArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeConfigurationAlias = typeConfigurationAlias {
            try container.encode(typeConfigurationAlias, forKey: ClientRuntime.Key("TypeConfigurationAlias"))
        }
        if let typeConfigurationArn = typeConfigurationArn {
            try container.encode(typeConfigurationArn, forKey: ClientRuntime.Key("TypeConfigurationArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeConfigurationAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeConfigurationAlias)
        typeConfigurationAlias = typeConfigurationAliasDecoded
        let typeConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeConfigurationArn)
        typeConfigurationArn = typeConfigurationArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
    }
}

extension CloudFormationClientTypes {
    /// Identifying information for the configuration of a CloudFormation extension.
    public struct TypeConfigurationIdentifier: Swift.Equatable {
        /// The type of extension.
        public var type: CloudFormationClientTypes.ThirdPartyType?
        /// The Amazon Resource Name (ARN) for the extension, in this account and region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and region.
        public var typeArn: Swift.String?
        /// The alias specified for this configuration, if one was specified when the configuration was set.
        public var typeConfigurationAlias: Swift.String?
        /// The Amazon Resource Name (ARN) for the configuration, in this account and region.
        public var typeConfigurationArn: Swift.String?
        /// The name of the extension type to which this configuration applies.
        public var typeName: Swift.String?

        public init (
            type: CloudFormationClientTypes.ThirdPartyType? = nil,
            typeArn: Swift.String? = nil,
            typeConfigurationAlias: Swift.String? = nil,
            typeConfigurationArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.type = type
            self.typeArn = typeArn
            self.typeConfigurationAlias = typeConfigurationAlias
            self.typeConfigurationArn = typeConfigurationArn
            self.typeName = typeName
        }
    }

}

extension TypeConfigurationNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TypeConfigurationNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified extension configuration can't be found.
public struct TypeConfigurationNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TypeConfigurationNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TypeConfigurationNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.TypeFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category = "Category"
        case publisherId = "PublisherId"
        case typeNamePrefix = "TypeNamePrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let category = category {
            try container.encode(category, forKey: ClientRuntime.Key("Category"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let typeNamePrefix = typeNamePrefix {
            try container.encode(typeNamePrefix, forKey: ClientRuntime.Key("TypeNamePrefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Category.self, forKey: .category)
        category = categoryDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let typeNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeNamePrefix)
        typeNamePrefix = typeNamePrefixDecoded
    }
}

extension CloudFormationClientTypes {
    /// Filter criteria to use in determining which extensions to return.
    public struct TypeFilters: Swift.Equatable {
        /// The category of extensions to return.
        ///
        /// * REGISTERED: Private extensions that have been registered for this account and region.
        ///
        /// * ACTIVATED: Public extensions that have been activated for this account and region.
        ///
        /// * THIRD_PARTY: Extensions available for use from publishers other than Amazon. This includes:
        ///
        /// * Private extensions registered in the account.
        ///
        /// * Public extensions from publishers other than Amazon, whether activated or not.
        ///
        ///
        ///
        ///
        /// * AWS_TYPES: Extensions available for use from Amazon.
        public var category: CloudFormationClientTypes.Category?
        /// The id of the publisher of the extension. Extensions published by Amazon aren't assigned a publisher ID. Use the AWS_TYPES category to specify a list of types published by Amazon.
        public var publisherId: Swift.String?
        /// A prefix to use as a filter for results.
        public var typeNamePrefix: Swift.String?

        public init (
            category: CloudFormationClientTypes.Category? = nil,
            publisherId: Swift.String? = nil,
            typeNamePrefix: Swift.String? = nil
        )
        {
            self.category = category
            self.publisherId = publisherId
            self.typeNamePrefix = typeNamePrefix
        }
    }

}

extension TypeNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<TypeNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified extension doesn't exist in the CloudFormation registry.
public struct TypeNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TypeNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TypeNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.TypeSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isActivated = "IsActivated"
        case lastUpdated = "LastUpdated"
        case latestPublicVersion = "LatestPublicVersion"
        case originalTypeName = "OriginalTypeName"
        case publicVersionNumber = "PublicVersionNumber"
        case publisherId = "PublisherId"
        case publisherIdentity = "PublisherIdentity"
        case publisherName = "PublisherName"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: ClientRuntime.Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isActivated = isActivated {
            try container.encode(isActivated, forKey: ClientRuntime.Key("IsActivated"))
        }
        if let lastUpdated = lastUpdated {
            try container.encodeTimestamp(lastUpdated, format: .dateTime, forKey: ClientRuntime.Key("lastUpdated"))
        }
        if let latestPublicVersion = latestPublicVersion {
            try container.encode(latestPublicVersion, forKey: ClientRuntime.Key("LatestPublicVersion"))
        }
        if let originalTypeName = originalTypeName {
            try container.encode(originalTypeName, forKey: ClientRuntime.Key("OriginalTypeName"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let publisherIdentity = publisherIdentity {
            try container.encode(publisherIdentity, forKey: ClientRuntime.Key("PublisherIdentity"))
        }
        if let publisherName = publisherName {
            try container.encode(publisherName, forKey: ClientRuntime.Key("PublisherName"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let lastUpdatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let originalTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeName)
        originalTypeName = originalTypeNameDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
        let latestPublicVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestPublicVersion)
        latestPublicVersion = latestPublicVersionDecoded
        let publisherIdentityDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.IdentityProvider.self, forKey: .publisherIdentity)
        publisherIdentity = publisherIdentityDecoded
        let publisherNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherName)
        publisherName = publisherNameDecoded
        let isActivatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActivated)
        isActivated = isActivatedDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains summary information about the specified CloudFormation extension.
    public struct TypeSummary: Swift.Equatable {
        /// The ID of the default version of the extension. The default version is used when the extension version isn't specified. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon and published by third parties, CloudFormation returns null. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html). To set the default version of an extension, use [SetTypeDefaultVersion].
        public var defaultVersionId: Swift.String?
        /// The description of the extension.
        public var description: Swift.String?
        /// Whether the extension is activated for this account and region. This applies only to third-party public extensions. Extensions published by Amazon are activated by default.
        public var isActivated: Swift.Bool?
        /// When the specified extension version was registered. This applies only to:
        ///
        /// * Private extensions you have registered in your account. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html).
        ///
        /// * Public extensions you have activated in your account with auto-update specified. For more information, see [ActivateType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html).
        ///
        ///
        /// For all other extension types, CloudFormation returns null.
        public var lastUpdated: ClientRuntime.Date?
        /// For public extensions that have been activated for this account and region, the latest version of the public extension that is available. For any extensions other than activated third-arty extensions, CloudFormation returns null. How you specified AutoUpdate when enabling the extension affects whether CloudFormation automatically updates the extension in this account and region when a new version is released. For more information, see [Setting CloudFormation to automatically use new versions of extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-auto) in the CloudFormation User Guide.
        public var latestPublicVersion: Swift.String?
        /// For public extensions that have been activated for this account and region, the type name of the public extension. If you specified a TypeNameAlias when enabling the extension in this account and region, CloudFormation treats that alias as the extension's type name within the account and region, not the type name of the public extension. For more information, see [Specifying aliases to refer to extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias) in the CloudFormation User Guide.
        public var originalTypeName: Swift.String?
        /// For public extensions that have been activated for this account and region, the version of the public extension to be used for CloudFormation operations in this account and Region. How you specified AutoUpdate when enabling the extension affects whether CloudFormation automatically updates the extension in this account and region when a new version is released. For more information, see [Setting CloudFormation to automatically use new versions of extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-auto) in the CloudFormation User Guide.
        public var publicVersionNumber: Swift.String?
        /// The ID of the extension publisher, if the extension is published by a third party. Extensions published by Amazon don't return a publisher ID.
        public var publisherId: Swift.String?
        /// The service used to verify the publisher identity. For more information, see [Registering your account to publish CloudFormation extensions](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html) in the CFN-CLI User Guide for Extension Development.
        public var publisherIdentity: CloudFormationClientTypes.IdentityProvider?
        /// The publisher name, as defined in the public profile for that publisher in the service used to verify the publisher identity.
        public var publisherName: Swift.String?
        /// The kind of extension.
        public var type: CloudFormationClientTypes.RegistryType?
        /// The Amazon Resource Name (ARN) of the extension.
        public var typeArn: Swift.String?
        /// The name of the extension. If you specified a TypeNameAlias when you [activate this extension](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in your account and region, CloudFormation considers that alias as the type name.
        public var typeName: Swift.String?

        public init (
            defaultVersionId: Swift.String? = nil,
            description: Swift.String? = nil,
            isActivated: Swift.Bool? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            latestPublicVersion: Swift.String? = nil,
            originalTypeName: Swift.String? = nil,
            publicVersionNumber: Swift.String? = nil,
            publisherId: Swift.String? = nil,
            publisherIdentity: CloudFormationClientTypes.IdentityProvider? = nil,
            publisherName: Swift.String? = nil,
            type: CloudFormationClientTypes.RegistryType? = nil,
            typeArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.defaultVersionId = defaultVersionId
            self.description = description
            self.isActivated = isActivated
            self.lastUpdated = lastUpdated
            self.latestPublicVersion = latestPublicVersion
            self.originalTypeName = originalTypeName
            self.publicVersionNumber = publicVersionNumber
            self.publisherId = publisherId
            self.publisherIdentity = publisherIdentity
            self.publisherName = publisherName
            self.type = type
            self.typeArn = typeArn
            self.typeName = typeName
        }
    }

}

extension CloudFormationClientTypes {
    public enum TypeTestsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case notTested
        case passed
        case sdkUnknown(Swift.String)

        public static var allCases: [TypeTestsStatus] {
            return [
                .failed,
                .inProgress,
                .notTested,
                .passed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .notTested: return "NOT_TESTED"
            case .passed: return "PASSED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TypeTestsStatus(rawValue: rawValue) ?? TypeTestsStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.TypeVersionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case description = "Description"
        case isDefaultVersion = "IsDefaultVersion"
        case publicVersionNumber = "PublicVersionNumber"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isDefaultVersion = isDefaultVersion {
            try container.encode(isDefaultVersion, forKey: ClientRuntime.Key("IsDefaultVersion"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let timeCreated = timeCreated {
            try container.encodeTimestamp(timeCreated, format: .dateTime, forKey: ClientRuntime.Key("timeCreated"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let timeCreatedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timeCreated)
        timeCreated = timeCreatedDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
    }
}

extension CloudFormationClientTypes {
    /// Contains summary information about a specific version of a CloudFormation extension.
    public struct TypeVersionSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the extension version.
        public var arn: Swift.String?
        /// The description of the extension version.
        public var description: Swift.String?
        /// Whether the specified extension version is set as the default version. This applies only to private extensions you have registered in your account, and extensions published by Amazon. For public third-party extensions, CloudFormation returns null.
        public var isDefaultVersion: Swift.Bool?
        /// For public extensions that have been activated for this account and region, the version of the public extension to be used for CloudFormation operations in this account and region. For any extensions other than activated third-arty extensions, CloudFormation returns null. How you specified AutoUpdate when enabling the extension affects whether CloudFormation automatically updates the extension in this account and region when a new version is released. For more information, see [Setting CloudFormation to automatically use new versions of extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-auto) in the CloudFormation User Guide.
        public var publicVersionNumber: Swift.String?
        /// When the version was registered.
        public var timeCreated: ClientRuntime.Date?
        /// The kind of extension.
        public var type: CloudFormationClientTypes.RegistryType?
        /// The name of the extension.
        public var typeName: Swift.String?
        /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it's registered.
        public var versionId: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            isDefaultVersion: Swift.Bool? = nil,
            publicVersionNumber: Swift.String? = nil,
            timeCreated: ClientRuntime.Date? = nil,
            type: CloudFormationClientTypes.RegistryType? = nil,
            typeName: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.isDefaultVersion = isDefaultVersion
            self.publicVersionNumber = publicVersionNumber
            self.timeCreated = timeCreated
            self.type = type
            self.typeName = typeName
            self.versionId = versionId
        }
    }

}

extension UpdateStackInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                for (index0, resourcetype0) in resourceTypes.enumerated() {
                    try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                try resourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody {
            try container.encode(stackPolicyDuringUpdateBody, forKey: ClientRuntime.Key("StackPolicyDuringUpdateBody"))
        }
        if let stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL {
            try container.encode(stackPolicyDuringUpdateURL, forKey: ClientRuntime.Key("StackPolicyDuringUpdateURL"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateStackInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for an [UpdateStack] action.
public struct UpdateStackInput: Swift.Equatable {
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually updating the stack. If your stack template contains one or more macros, and you choose to update a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation. If you want to update a stack from a stack template that contains macros and nested stacks, you must update the stack directly from the template using this capability. You should only update stacks directly from a stack template that contains macros if you know what processing the macro performs. Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified. For more information, see [Using CloudFormation Macros to Perform Custom Processing on Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// A unique identifier for this UpdateStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to update a stack with the same name. You might retry UpdateStack requests to ensure that CloudFormation successfully received them. All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    public var clientRequestToken: Swift.String?
    /// Preserve the state of previously provisioned resources when an operation fails. Default: False
    public var disableRollback: Swift.Bool?
    /// Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that CloudFormation associates with the stack. Specify an empty list to remove all notification topics.
    public var notificationARNs: [Swift.String]?
    /// A list of Parameter structures that specify input parameters for the stack. For more information, see the [Parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html) data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// The template resource types that you have permissions to work with for this update stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. If the list of resource types doesn't include a resource that you're updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see [Controlling Access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html).
    public var resourceTypes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to update the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.
    public var roleARN: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// The name or unique stack ID of the stack to update.
    /// This member is required.
    public var stackName: Swift.String?
    /// Structure containing a new stack policy body. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both. You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don't specify a stack policy, the current policy that is associated with the stack is unchanged.
    public var stackPolicyBody: Swift.String?
    /// Structure containing the temporary overriding stack policy body. You can specify either the StackPolicyDuringUpdateBody or the StackPolicyDuringUpdateURL parameter, but not both. If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don't specify a stack policy, the current policy that is associated with the stack will be used.
    public var stackPolicyDuringUpdateBody: Swift.String?
    /// Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the StackPolicyDuringUpdateBody or the StackPolicyDuringUpdateURL parameter, but not both. If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don't specify a stack policy, the current policy that is associated with the stack will be used.
    public var stackPolicyDuringUpdateURL: Swift.String?
    /// Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both. You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don't specify a stack policy, the current policy that is associated with the stack is unchanged.
    public var stackPolicyURL: Swift.String?
    /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 50 tags. If you don't specify this parameter, CloudFormation doesn't modify the stack's tags. If you specify an empty value, CloudFormation removes all associated tags.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide.) Conditional: You must specify only one of the following parameters: TemplateBody, TemplateURL, or set the UsePreviousTemplate to true.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template that's located in an Amazon S3 bucket or a Systems Manager document. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: TemplateBody, TemplateURL, or set the UsePreviousTemplate to true.
    public var templateURL: Swift.String?
    /// Reuse the existing template that is associated with the stack that you are updating. Conditional: You must specify only one of the following parameters: TemplateBody, TemplateURL, or set the UsePreviousTemplate to true.
    public var usePreviousTemplate: Swift.Bool?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyDuringUpdateBody: Swift.String? = nil,
        stackPolicyDuringUpdateURL: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody
        self.stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

struct UpdateStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let usePreviousTemplate: Swift.Bool?
    let stackPolicyDuringUpdateBody: Swift.String?
    let stackPolicyDuringUpdateURL: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let resourceTypes: [Swift.String]?
    let roleARN: Swift.String?
    let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    let stackPolicyBody: Swift.String?
    let stackPolicyURL: Swift.String?
    let notificationARNs: [Swift.String]?
    let tags: [CloudFormationClientTypes.Tag]?
    let disableRollback: Swift.Bool?
    let clientRequestToken: Swift.String?
}

extension UpdateStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case notificationARNs = "NotificationARNs"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyDuringUpdateBody = "StackPolicyDuringUpdateBody"
        case stackPolicyDuringUpdateURL = "StackPolicyDuringUpdateURL"
        case stackPolicyURL = "StackPolicyURL"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        let usePreviousTemplateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .usePreviousTemplate)
        usePreviousTemplate = usePreviousTemplateDecoded
        let stackPolicyDuringUpdateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyDuringUpdateBody)
        stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBodyDecoded
        let stackPolicyDuringUpdateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyDuringUpdateURL)
        stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURLDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        let stackPolicyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyBody)
        stackPolicyBody = stackPolicyBodyDecoded
        let stackPolicyURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyURL)
        stackPolicyURL = stackPolicyURLDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let disableRollbackDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableRollback)
        disableRollback = disableRollbackDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateStackInstancesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameterOverrides = parameterOverrides {
            if !parameterOverrides.isEmpty {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                for (index0, parameter0) in parameterOverrides.enumerated() {
                    try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                try parameterOverridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("UpdateStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateStackInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStackInstancesInput: Swift.Equatable {
    /// [Self-managed permissions] The names of one or more Amazon Web Services accounts for which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. You can specify Accounts or DeploymentTargets, but not both.
    public var accounts: [Swift.String]?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// [Service-managed permissions] The Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won't use the overridden values. You can specify Accounts or DeploymentTargets, but not both.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// The unique identifier for this stack set operation. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, the SDK generates one automatically.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// A list of input parameters whose values you want to update for the specified stack instances. Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance update operations:
    ///
    /// * To override the current value for a parameter, include the parameter and specify its value.
    ///
    /// * To leave an overridden parameter set to its present value, include the parameter and specify UsePreviousValue as true. (You can't specify both a value and set UsePreviousValue to true.)
    ///
    /// * To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don't include the parameter in the list.
    ///
    /// * To leave all parameters set to their present values, don't specify this property at all.
    ///
    ///
    /// During stack set updates, any parameter values overridden for a stack instance aren't updated, but retain their overridden value. You can only override the parameter values that are specified in the stack set; to add or delete a parameter itself, use UpdateStackSet to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use [UpdateStackSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html) to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using UpdateStackInstances.
    public var parameterOverrides: [CloudFormationClientTypes.Parameter]?
    /// The names of one or more Amazon Web Services Regions in which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions.
    /// This member is required.
    public var regions: [Swift.String]?
    /// The name or unique ID of the stack set associated with the stack instances.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init (
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameterOverrides = parameterOverrides
        self.regions = regions
        self.stackSetName = stackSetName
    }
}

struct UpdateStackInstancesInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let accounts: [Swift.String]?
    let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    let regions: [Swift.String]?
    let parameterOverrides: [CloudFormationClientTypes.Parameter]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension UpdateStackInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameterOverrides = "ParameterOverrides"
        case regions = "Regions"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct member{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionsBuffer:[Swift.String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Swift.String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        if containerValues.contains(.parameterOverrides) {
            struct KeyVal0{struct member{}}
            let parameterOverridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameterOverrides)
            if let parameterOverridesWrappedContainer = parameterOverridesWrappedContainer {
                let parameterOverridesContainer = try parameterOverridesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parameterOverridesBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parameterOverridesContainer = parameterOverridesContainer {
                    parameterOverridesBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parameterOverridesContainer {
                        parameterOverridesBuffer?.append(structureContainer0)
                    }
                }
                parameterOverrides = parameterOverridesBuffer
            } else {
                parameterOverrides = []
            }
        } else {
            parameterOverrides = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}

extension UpdateStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackInstanceNotFoundException" : self = .stackInstanceNotFoundException(try StackInstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackInstanceNotFoundException(StackInstanceNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct UpdateStackInstancesOutputResponse: Swift.Equatable {
    /// The unique identifier for this stack set operation.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct UpdateStackInstancesOutputResponseBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension UpdateStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateStackInstancesResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension UpdateStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStackOutputError: Swift.Error, Swift.Equatable {
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

/// The output for an [UpdateStack] action.
public struct UpdateStackOutputResponse: Swift.Equatable {
    /// Unique identifier of the stack.
    public var stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct UpdateStackOutputResponseBody: Swift.Equatable {
    let stackId: Swift.String?
}

extension UpdateStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateStackResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

extension UpdateStackSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateStackSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStackSetInput: Swift.Equatable {
    /// [Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you must also specify the Amazon Web Services Regions in which to update stack set instances. To update all the stack instances associated with this stack set, don't specify the Accounts or Regions properties. If the stack set update includes changes to the template (that is, if the TemplateBody or TemplateURL properties are specified), or the Parameters property, CloudFormation marks all stack instances with a status of OUTDATED prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Amazon Web Services Regions, while leaving all other stack instances with their existing stack instance status.
    public var accounts: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the IAM role to use to update this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Granting Permissions for Stack Set Operations](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide. If you specified a customized administrator role when you created the stack set, you must specify a customized administrator role, even if it is the same customized administrator role used with this stack set previously.
    public var administrationRoleARN: Swift.String?
    /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU). If you specify AutoDeployment, don't specify DeploymentTargets or Regions.
    public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack set and its associated stack instances.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks sets, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [ AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [ AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some templates reference macros. If your stack set template references one or more macros, you must update the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this capability. For more information, see [Using CloudFormation Macros to Perform Custom Processing on Templates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html). Stack sets with service-managed permissions do not currently support the use of macros in templates. (This includes the [AWS::Include](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// [Service-managed permissions] The Organizations accounts in which to update associated stack instances. To update all the stack instances associated with this stack set, do not specify DeploymentTargets or Regions. If the stack set update includes changes to the template (that is, if TemplateBody or TemplateURL is specified), or the Parameters, CloudFormation marks all stack instances with a status of OUTDATED prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update doesn't include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// A brief description of updates that you are making.
    public var description: Swift.String?
    /// The name of the IAM execution role to use to update the stack set. If you do not specify an execution role, CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation. Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets. If you specify a customized execution role, CloudFormation uses that role to update the stack. If you do not specify a customized execution role, CloudFormation performs the update using the role previously associated with the stack set, so long as you have permissions to perform operations on the stack set.
    public var executionRoleName: Swift.String?
    /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
    public var managedExecution: CloudFormationClientTypes.ManagedExecution?
    /// The unique ID for this stack set operation. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, CloudFormation generates one automatically. Repeating this stack set operation with a new operation ID retries all stack instances whose status is OUTDATED.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// A list of input parameters for the stack set template.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Describes how the IAM roles required for stack set operations are created. You cannot modify PermissionModel if there are stack instances associated with your stack set.
    ///
    /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
    ///
    /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
    public var permissionModel: CloudFormationClientTypes.PermissionModels?
    /// The Amazon Web Services Regions in which to update associated stack instances. If you specify Regions, you must also specify accounts in which to update stack set instances. To update all the stack instances associated with this stack set, do not specify the Accounts or Regions properties. If the stack set update includes changes to the template (that is, if the TemplateBody or TemplateURL properties are specified), or the Parameters property, CloudFormation marks all stack instances with a status of OUTDATED prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.
    public var regions: [Swift.String]?
    /// The name or unique ID of the stack set that you want to update.
    /// This member is required.
    public var stackSetName: Swift.String?
    /// The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. You can specify a maximum number of 50 tags. If you specify tags for this parameter, those tags replace any list of tags that are currently associated with this stack set. This means:
    ///
    /// * If you don't specify this parameter, CloudFormation doesn't modify the stack's tags.
    ///
    /// * If you specify any tags using this parameter, you must specify all the tags that you want associated with this stack set, even tags you've specified before (for example, when creating the stack set or during a previous update of the stack set.). Any tags that you don't include in the updated list of tags are removed from the stack set, and therefore from the stacks and resources as well.
    ///
    /// * If you specify an empty value, CloudFormation removes all currently associated tags.
    ///
    ///
    /// If you specify new tags as part of an UpdateStackSet action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you omit tags that are currently associated with the stack set from the list of tags you specify, CloudFormation assumes that you want to remove those tags from the stack set, and checks to see if you have permission to untag resources. If you don't have the necessary permission(s), the entire UpdateStackSet action fails with an access denied error, and the stack set is not updated.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: TemplateBody or TemplateURL—or set UsePreviousTemplate to true.
    public var templateBody: Swift.String?
    /// The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: TemplateBody or TemplateURL—or set UsePreviousTemplate to true.
    public var templateURL: Swift.String?
    /// Use the existing template that's associated with the stack set that you're updating. Conditional: You must specify only one of the following parameters: TemplateBody or TemplateURL—or set UsePreviousTemplate to true.
    public var usePreviousTemplate: Swift.Bool?

    public init (
        accounts: [Swift.String]? = nil,
        administrationRoleARN: Swift.String? = nil,
        autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        description: Swift.String? = nil,
        executionRoleName: Swift.String? = nil,
        managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.accounts = accounts
        self.administrationRoleARN = administrationRoleARN
        self.autoDeployment = autoDeployment
        self.callAs = callAs
        self.capabilities = capabilities
        self.deploymentTargets = deploymentTargets
        self.description = description
        self.executionRoleName = executionRoleName
        self.managedExecution = managedExecution
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameters = parameters
        self.permissionModel = permissionModel
        self.regions = regions
        self.stackSetName = stackSetName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

struct UpdateStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let description: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let usePreviousTemplate: Swift.Bool?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let tags: [CloudFormationClientTypes.Tag]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let administrationRoleARN: Swift.String?
    let executionRoleName: Swift.String?
    let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    let permissionModel: CloudFormationClientTypes.PermissionModels?
    let autoDeployment: CloudFormationClientTypes.AutoDeployment?
    let operationId: Swift.String?
    let accounts: [Swift.String]?
    let regions: [Swift.String]?
    let callAs: CloudFormationClientTypes.CallAs?
    let managedExecution: CloudFormationClientTypes.ManagedExecution?
}

extension UpdateStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case callAs = "CallAs"
        case capabilities = "Capabilities"
        case deploymentTargets = "DeploymentTargets"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case regions = "Regions"
        case stackSetName = "StackSetName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        let usePreviousTemplateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .usePreviousTemplate)
        usePreviousTemplate = usePreviousTemplateDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        if containerValues.contains(.regions) {
            struct KeyVal0{struct member{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionsBuffer:[Swift.String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Swift.String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
        let managedExecutionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ManagedExecution.self, forKey: .managedExecution)
        managedExecution = managedExecutionDecoded
    }
}

extension UpdateStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackInstanceNotFoundException" : self = .stackInstanceNotFoundException(try StackInstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStackSetOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackInstanceNotFoundException(StackInstanceNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct UpdateStackSetOutputResponse: Swift.Equatable {
    /// The unique ID for this stack set operation.
    public var operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct UpdateStackSetOutputResponseBody: Swift.Equatable {
    let operationId: Swift.String?
}

extension UpdateStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateStackSetResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension UpdateTerminationProtectionInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("UpdateTerminationProtection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateTerminationProtectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTerminationProtectionInput: Swift.Equatable {
    /// Whether to enable termination protection on the specified stack.
    /// This member is required.
    public var enableTerminationProtection: Swift.Bool?
    /// The name or unique ID of the stack for which you want to set termination protection.
    /// This member is required.
    public var stackName: Swift.String?

    public init (
        enableTerminationProtection: Swift.Bool? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.enableTerminationProtection = enableTerminationProtection
        self.stackName = stackName
    }
}

struct UpdateTerminationProtectionInputBody: Swift.Equatable {
    let enableTerminationProtection: Swift.Bool?
    let stackName: Swift.String?
}

extension UpdateTerminationProtectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableTerminationProtection = "EnableTerminationProtection"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableTerminationProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTerminationProtection)
        enableTerminationProtection = enableTerminationProtectionDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
    }
}

extension UpdateTerminationProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTerminationProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateTerminationProtectionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTerminationProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateTerminationProtectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

public struct UpdateTerminationProtectionOutputResponse: Swift.Equatable {
    /// The unique ID of the stack.
    public var stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct UpdateTerminationProtectionOutputResponseBody: Swift.Equatable {
    let stackId: Swift.String?
}

extension UpdateTerminationProtectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateTerminationProtectionResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

extension ValidateTemplateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("ValidateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ValidateTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input for [ValidateTemplate] action.
public struct ValidateTemplateInput: Swift.Equatable {
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
    public var templateURL: Swift.String?

    public init (
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

struct ValidateTemplateInputBody: Swift.Equatable {
    let templateBody: Swift.String?
    let templateURL: Swift.String?
}

extension ValidateTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
    }
}

extension ValidateTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ValidateTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ValidateTemplateOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidateTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capabilities = output.capabilities
            self.capabilitiesReason = output.capabilitiesReason
            self.declaredTransforms = output.declaredTransforms
            self.description = output.description
            self.parameters = output.parameters
        } else {
            self.capabilities = nil
            self.capabilitiesReason = nil
            self.declaredTransforms = nil
            self.description = nil
            self.parameters = nil
        }
    }
}

/// The output for [ValidateTemplate] action.
public struct ValidateTemplateOutputResponse: Swift.Equatable {
    /// The capabilities found within the template. If your template contains IAM resources, you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when you use the [CreateStack] or [UpdateStack] actions with your template; otherwise, those actions return an InsufficientCapabilities error. For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The list of resources that generated the values in the Capabilities response element.
    public var capabilitiesReason: Swift.String?
    /// A list of the transforms that are declared in the template.
    public var declaredTransforms: [Swift.String]?
    /// The description found within the template.
    public var description: Swift.String?
    /// A list of TemplateParameter structures.
    public var parameters: [CloudFormationClientTypes.TemplateParameter]?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        capabilitiesReason: Swift.String? = nil,
        declaredTransforms: [Swift.String]? = nil,
        description: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.TemplateParameter]? = nil
    )
    {
        self.capabilities = capabilities
        self.capabilitiesReason = capabilitiesReason
        self.declaredTransforms = declaredTransforms
        self.description = description
        self.parameters = parameters
    }
}

struct ValidateTemplateOutputResponseBody: Swift.Equatable {
    let parameters: [CloudFormationClientTypes.TemplateParameter]?
    let description: Swift.String?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let capabilitiesReason: Swift.String?
    let declaredTransforms: [Swift.String]?
}

extension ValidateTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case capabilitiesReason = "CapabilitiesReason"
        case declaredTransforms = "DeclaredTransforms"
        case description = "Description"
        case parameters = "Parameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ValidateTemplateResult"))
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TemplateParameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.TemplateParameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.TemplateParameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for enumContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(enumContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        let capabilitiesReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capabilitiesReason)
        capabilitiesReason = capabilitiesReasonDecoded
        if containerValues.contains(.declaredTransforms) {
            struct KeyVal0{struct member{}}
            let declaredTransformsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .declaredTransforms)
            if let declaredTransformsWrappedContainer = declaredTransformsWrappedContainer {
                let declaredTransformsContainer = try declaredTransformsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var declaredTransformsBuffer:[Swift.String]? = nil
                if let declaredTransformsContainer = declaredTransformsContainer {
                    declaredTransformsBuffer = [Swift.String]()
                    for stringContainer0 in declaredTransformsContainer {
                        declaredTransformsBuffer?.append(stringContainer0)
                    }
                }
                declaredTransforms = declaredTransformsBuffer
            } else {
                declaredTransforms = []
            }
        } else {
            declaredTransforms = nil
        }
    }
}

extension CloudFormationClientTypes {
    public enum VersionBump: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case major
        case minor
        case sdkUnknown(Swift.String)

        public static var allCases: [VersionBump] {
            return [
                .major,
                .minor,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .major: return "MAJOR"
            case .minor: return "MINOR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VersionBump(rawValue: rawValue) ?? VersionBump.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Visibility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [Visibility] {
            return [
                .private,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .private: return "PRIVATE"
            case .public: return "PUBLIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Visibility(rawValue: rawValue) ?? Visibility.sdkUnknown(rawValue)
        }
    }
}
